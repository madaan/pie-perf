{"user_id":"u732870425","problem_id":"p03371","language":"python","submission_id_v0":"s504204235","submission_id_v1":"s825991485","cpu_time_v0":104,"cpu_time_v1":26,"memory_v0":9176,"memory_v1":9180,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":75.0,"input":"A, B, C, X, Y = list(map(int, input().split()))\n\n\n\nans = 5000 * 2 * 10 ** 5\n\nfor i in range(10 ** 5 + 1):\n\n    s = i * 2 * C + max(0, X - i) * A + max(0, Y - i) * B\n\n    ans = min(ans, s)\n\n\n\nprint(ans)","target":"A, B, C, X, Y = list(map(int, input().split()))\n\n\n\nif X > Y:\n\n    v = A\n\nelse:\n\n    v = B\n\n\n\nans = min(A*X+B*Y, C*max(X, Y)*2, C*min(X,Y)*2+(max(X,Y)-min(X,Y))*v)\n\n\n\nprint(ans)","code_v0_loc":8,"code_v1_loc":10,"code_v0_num_chars":195,"code_v1_num_chars":170,"code_v0_no_empty_lines":"A, B, C, X, Y = list(map(int, input().split()))\nans = 5000 * 2 * 10**5\nfor i in range(10**5 + 1):\n    s = i * 2 * C + max(0, X - i) * A + max(0, Y - i) * B\n    ans = min(ans, s)\nprint(ans)\n","code_v1_no_empty_lines":"A, B, C, X, Y = list(map(int, input().split()))\nif X > Y:\n    v = A\nelse:\n    v = B\nans = min(\n    A * X + B * Y, C * max(X, Y) * 2, C * min(X, Y) * 2 + (max(X, Y) - min(X, Y)) * v\n)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["-ans = 5000 * 2 * 10**5","-for i in range(10**5 + 1):","-    s = i * 2 * C + max(0, X - i) * A + max(0, Y - i) * B","-    ans = min(ans, s)","+if X > Y:","+    v = A","+else:","+    v = B","+ans = min(","+    A * X + B * Y, C * max(X, Y) * 2, C * min(X, Y) * 2 + (max(X, Y) - min(X, Y)) * v","+)"],"diff_only_import_comment":false,"measured_runtime_v0":1.5409223008,"measured_runtime_v1":0.2907806964,"runtime_lift":5.2992592696,"key":["s504204235","s825991485"]}
{"user_id":"u102461423","problem_id":"p02612","language":"python","submission_id_v0":"s840955881","submission_id_v1":"s608348800","cpu_time_v0":35,"cpu_time_v1":29,"memory_v0":9152,"memory_v1":9160,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.14,"input":"import sys\n\n\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nN = int(read())\n\nx = N + (-N) % 1000\n\nprint((x - N))","target":"import math\n\nN = int(eval(input()))\n\nx = math.ceil(N\/1000) * 1000\n\nprint((x-N))","code_v0_loc":9,"code_v1_loc":4,"code_v0_num_chars":174,"code_v1_num_chars":71,"code_v0_no_empty_lines":"import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nN = int(read())\nx = N + (-N) % 1000\nprint((x - N))\n","code_v1_no_empty_lines":"import math\n\nN = int(eval(input()))\nx = math.ceil(N \/ 1000) * 1000\nprint((x - N))\n","code_same":false,"relative_loc_diff_percent":55.5555555556,"diff":["-import sys","+import math","-read = sys.stdin.buffer.read","-readline = sys.stdin.buffer.readline","-readlines = sys.stdin.buffer.readlines","-N = int(read())","-x = N + (-N) % 1000","+N = int(eval(input()))","+x = math.ceil(N \/ 1000) * 1000"],"diff_only_import_comment":false,"measured_runtime_v0":0.260022393,"measured_runtime_v1":0.1385840868,"runtime_lift":1.8762788639,"key":["s840955881","s608348800"]}
{"user_id":"u105210954","problem_id":"p03013","language":"python","submission_id_v0":"s757552767","submission_id_v1":"s396543034","cpu_time_v0":1264,"cpu_time_v1":505,"memory_v0":17796,"memory_v1":44376,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":60.05,"input":"import numpy as np\n\ndef resolve():\n\n    MOD = 10 ** 9 + 7\n\n    n, m = list(map(int, input().split()))\n\n    a = [int(eval(input())) for _ in range(m)]\n\n\n\n    dp = np.array([1] * (n + 1))\n\n    dp[a] = 0\n\n\n\n    for i in range(2, n + 1):\n\n        if dp[i] != 0:\n\n            dp[i] = np.sum(dp[i - 2:i]) % MOD\n\n\n\n    print((dp[n]))\n\n    \n\nresolve()","target":"def resolve():\n\n    MOD = 10 ** 9 + 7\n\n    n, m = list(map(int, input().split()))\n\n\n\n    # i\u6bb5\u76ee\u306b\u5230\u9054\u3059\u308b\u307e\u3067\u306e\u30eb\u30fc\u30c8\u306e\u7dcf\u6570\n\n    dp = [1] * (n + 1)\n\n\n\n    for _ in range(m):\n\n        dp[int(eval(input()))] = 0\n\n\n\n    for i in range(2, n + 1):\n\n        if dp[i] == 0:\n\n            continue\n\n\n\n        dp[i] = (dp[i - 1] + dp[i - 2]) % MOD\n\n\n\n    print((dp[n]))\n\n    \n\nresolve()","code_v0_loc":16,"code_v1_loc":19,"code_v0_num_chars":329,"code_v1_num_chars":347,"code_v0_no_empty_lines":"import numpy as np\n\n\ndef resolve():\n    MOD = 10**9 + 7\n    n, m = list(map(int, input().split()))\n    a = [int(eval(input())) for _ in range(m)]\n    dp = np.array([1] * (n + 1))\n    dp[a] = 0\n    for i in range(2, n + 1):\n        if dp[i] != 0:\n            dp[i] = np.sum(dp[i - 2 : i]) % MOD\n    print((dp[n]))\n\n\nresolve()\n","code_v1_no_empty_lines":"def resolve():\n    MOD = 10**9 + 7\n    n, m = list(map(int, input().split()))\n    # i\u6bb5\u76ee\u306b\u5230\u9054\u3059\u308b\u307e\u3067\u306e\u30eb\u30fc\u30c8\u306e\u7dcf\u6570\n    dp = [1] * (n + 1)\n    for _ in range(m):\n        dp[int(eval(input()))] = 0\n    for i in range(2, n + 1):\n        if dp[i] == 0:\n            continue\n        dp[i] = (dp[i - 1] + dp[i - 2]) % MOD\n    print((dp[n]))\n\n\nresolve()\n","code_same":false,"relative_loc_diff_percent":15.7894736842,"diff":["-import numpy as np","-","-","-    a = [int(eval(input())) for _ in range(m)]","-    dp = np.array([1] * (n + 1))","-    dp[a] = 0","+    # i\u6bb5\u76ee\u306b\u5230\u9054\u3059\u308b\u307e\u3067\u306e\u30eb\u30fc\u30c8\u306e\u7dcf\u6570","+    dp = [1] * (n + 1)","+    for _ in range(m):","+        dp[int(eval(input()))] = 0","-        if dp[i] != 0:","-            dp[i] = np.sum(dp[i - 2 : i]) % MOD","+        if dp[i] == 0:","+            continue","+        dp[i] = (dp[i - 1] + dp[i - 2]) % MOD"],"diff_only_import_comment":false,"measured_runtime_v0":1.6744469514,"measured_runtime_v1":0.2573392596,"runtime_lift":6.5067683562,"key":["s757552767","s396543034"]}
{"user_id":"u952708174","problem_id":"p02596","language":"python","submission_id_v0":"s856754977","submission_id_v1":"s552892775","cpu_time_v0":106,"cpu_time_v1":34,"memory_v0":9192,"memory_v1":9148,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":67.92,"input":"def c_repsept():\n\n    K = int(eval(input()))\n\n\n\n    L = 9 * K \/\/ 7 if K % 7 == 0 else 9 * K\n\n    if L % 2 == 0 or L % 5 == 0:\n\n        return -1\n\n\n\n    remainder = 1\n\n    for n in range(1, L + 1):\n\n        remainder = (10 * remainder) % L\n\n        if remainder == 1:\n\n            return n\n\n    return -1\n\n\n\nprint((c_repsept()))","target":"def c_repsept_totient():\n\n    def euler_phi(n):\n\n        \"\"\"\u6b63\u6574\u6570 n \u306b\u5bfe\u3057\u3066\u3001n \u3068\u4e92\u3044\u306b\u7d20\u306a n \u4ee5\u4e0b\u306e\u6b63\u6574\u6570\u306e\u500b\u6570\"\"\"\n\n        ret = n\n\n        for i in range(2, int(n**0.5) + 1):\n\n            if n % i == 0:\n\n                ret = ret \/\/ i * (i - 1)\n\n                while n % i == 0:\n\n                    n \/\/= i\n\n        if n > 1:\n\n            ret -= ret \/\/ n\n\n        return ret\n\n\n\n    def divisor_list(n):\n\n        \"\"\"n \u306e\u6b63\u306e\u7d04\u6570\u306e\u30ea\u30b9\u30c8\"\"\"\n\n        ret = set()\n\n        for k in range(1, int(n**0.5) + 1):\n\n            if n % k == 0:\n\n                ret.update({k, n \/\/ k})\n\n        return sorted(ret)\n\n\n\n    K = int(eval(input()))\n\n    L = 9 * (K \/\/ 7 if K % 7 == 0 else K)\n\n\n\n    for d in divisor_list(euler_phi(L)):\n\n        if pow(10, d, L) == 1:\n\n            return d\n\n    return -1\n\n\n\nprint((c_repsept_totient()))","code_v0_loc":15,"code_v1_loc":30,"code_v0_num_chars":319,"code_v1_num_chars":786,"code_v0_no_empty_lines":"def c_repsept():\n    K = int(eval(input()))\n    L = 9 * K \/\/ 7 if K % 7 == 0 else 9 * K\n    if L % 2 == 0 or L % 5 == 0:\n        return -1\n    remainder = 1\n    for n in range(1, L + 1):\n        remainder = (10 * remainder) % L\n        if remainder == 1:\n            return n\n    return -1\n\n\nprint((c_repsept()))\n","code_v1_no_empty_lines":"def c_repsept_totient():\n    def euler_phi(n):\n        \"\"\"\u6b63\u6574\u6570 n \u306b\u5bfe\u3057\u3066\u3001n \u3068\u4e92\u3044\u306b\u7d20\u306a n \u4ee5\u4e0b\u306e\u6b63\u6574\u6570\u306e\u500b\u6570\"\"\"\n        ret = n\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                ret = ret \/\/ i * (i - 1)\n                while n % i == 0:\n                    n \/\/= i\n        if n > 1:\n            ret -= ret \/\/ n\n        return ret\n\n    def divisor_list(n):\n        \"\"\"n \u306e\u6b63\u306e\u7d04\u6570\u306e\u30ea\u30b9\u30c8\"\"\"\n        ret = set()\n        for k in range(1, int(n**0.5) + 1):\n            if n % k == 0:\n                ret.update({k, n \/\/ k})\n        return sorted(ret)\n\n    K = int(eval(input()))\n    L = 9 * (K \/\/ 7 if K % 7 == 0 else K)\n    for d in divisor_list(euler_phi(L)):\n        if pow(10, d, L) == 1:\n            return d\n    return -1\n\n\nprint((c_repsept_totient()))\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-def c_repsept():","+def c_repsept_totient():","+    def euler_phi(n):","+        \"\"\"\u6b63\u6574\u6570 n \u306b\u5bfe\u3057\u3066\u3001n \u3068\u4e92\u3044\u306b\u7d20\u306a n \u4ee5\u4e0b\u306e\u6b63\u6574\u6570\u306e\u500b\u6570\"\"\"","+        ret = n","+        for i in range(2, int(n**0.5) + 1):","+            if n % i == 0:","+                ret = ret \/\/ i * (i - 1)","+                while n % i == 0:","+                    n \/\/= i","+        if n > 1:","+            ret -= ret \/\/ n","+        return ret","+","+    def divisor_list(n):","+        \"\"\"n \u306e\u6b63\u306e\u7d04\u6570\u306e\u30ea\u30b9\u30c8\"\"\"","+        ret = set()","+        for k in range(1, int(n**0.5) + 1):","+            if n % k == 0:","+                ret.update({k, n \/\/ k})","+        return sorted(ret)","+","-    L = 9 * K \/\/ 7 if K % 7 == 0 else 9 * K","-    if L % 2 == 0 or L % 5 == 0:","-        return -1","-    remainder = 1","-    for n in range(1, L + 1):","-        remainder = (10 * remainder) % L","-        if remainder == 1:","-            return n","+    L = 9 * (K \/\/ 7 if K % 7 == 0 else K)","+    for d in divisor_list(euler_phi(L)):","+        if pow(10, d, L) == 1:","+            return d","-print((c_repsept()))","+print((c_repsept_totient()))"],"diff_only_import_comment":false,"measured_runtime_v0":0.338304636,"measured_runtime_v1":0.2146003115,"runtime_lift":1.5764405634,"key":["s856754977","s552892775"]}
{"user_id":"u075012704","problem_id":"p03039","language":"python","submission_id_v0":"s732762289","submission_id_v1":"s994755294","cpu_time_v0":918,"cpu_time_v1":624,"memory_v0":21244,"memory_v1":27024,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":32.03,"input":"H, W, K = list(map(int, input().split()))\n\nMOD = 10 ** 9 + 7\n\n\n\nHd = sum([d * (H - d) * (W ** 2) for d in range(H)])\n\nWd = sum([d * (W - d) * (H ** 2) for d in range(W)])\n\n\n\n\n\n# \u968e\u4e57 & \u9006\u5143\u8a08\u7b97\n\nfactorial = [1]\n\ninverse = [1]\n\nfor i in range(1, H * W + 2):\n\n    factorial.append(factorial[-1] * i % MOD)\n\n    inverse.append(pow(factorial[-1], MOD - 2, MOD))\n\n\n\n\n\nans = (Hd + Wd) * factorial[H * W - 2] * inverse[K - 2] * inverse[H * W - K] % MOD\n\nprint(ans)\n","target":"H, W, K = list(map(int, input().split()))\n\nMOD = 10 ** 9 + 7\n\n\n\nfactorial = [1, 1]  # \u5143\u30c6\u30fc\u30d6\u30eb\n\ninverse = [1, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\n\ninverse_from = [0, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\n\n\nfor i in range(2, H * W + 1):\n\n    factorial.append((factorial[-1] * i) % MOD)\n\n    inverse_from.append((-inverse_from[MOD % i] * (MOD \/\/ i)) % MOD)\n\n    inverse.append((inverse[-1] * inverse_from[-1]) % MOD)\n\n\n\n\n\ndef nCr(n, r):\n\n    if n < r or r < 0:\n\n        return 0\n\n    elif r == 0:\n\n        return 1\n\n    return factorial[n] * inverse[r] * inverse[n - r] % MOD\n\n\n\n\n\nans = 0\n\n# H\u306b\u3064\u3044\u3066\n\nfor d in range(1, H):\n\n    ans += d * (H - d) * pow(W, 2, MOD) * nCr(H * W - 2, K - 2) % MOD\n\n    ans %= MOD\n\n# W\u306b\u3064\u3044\u3066\n\nfor d in range(1, W):\n\n    ans += d * (W - d) * pow(H, 2, MOD) * nCr(H * W - 2, K - 2) % MOD\n\n    ans %= MOD\n\n\n\nprint((ans % MOD))\n","code_v0_loc":17,"code_v1_loc":32,"code_v0_num_chars":446,"code_v1_num_chars":796,"code_v0_no_empty_lines":"H, W, K = list(map(int, input().split()))\nMOD = 10**9 + 7\nHd = sum([d * (H - d) * (W**2) for d in range(H)])\nWd = sum([d * (W - d) * (H**2) for d in range(W)])\n# \u968e\u4e57 & \u9006\u5143\u8a08\u7b97\nfactorial = [1]\ninverse = [1]\nfor i in range(1, H * W + 2):\n    factorial.append(factorial[-1] * i % MOD)\n    inverse.append(pow(factorial[-1], MOD - 2, MOD))\nans = (Hd + Wd) * factorial[H * W - 2] * inverse[K - 2] * inverse[H * W - K] % MOD\nprint(ans)\n","code_v1_no_empty_lines":"H, W, K = list(map(int, input().split()))\nMOD = 10**9 + 7\nfactorial = [1, 1]  # \u5143\u30c6\u30fc\u30d6\u30eb\ninverse = [1, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse_from = [0, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\nfor i in range(2, H * W + 1):\n    factorial.append((factorial[-1] * i) % MOD)\n    inverse_from.append((-inverse_from[MOD % i] * (MOD \/\/ i)) % MOD)\n    inverse.append((inverse[-1] * inverse_from[-1]) % MOD)\n\n\ndef nCr(n, r):\n    if n < r or r < 0:\n        return 0\n    elif r == 0:\n        return 1\n    return factorial[n] * inverse[r] * inverse[n - r] % MOD\n\n\nans = 0\n# H\u306b\u3064\u3044\u3066\nfor d in range(1, H):\n    ans += d * (H - d) * pow(W, 2, MOD) * nCr(H * W - 2, K - 2) % MOD\n    ans %= MOD\n# W\u306b\u3064\u3044\u3066\nfor d in range(1, W):\n    ans += d * (W - d) * pow(H, 2, MOD) * nCr(H * W - 2, K - 2) % MOD\n    ans %= MOD\nprint((ans % MOD))\n","code_same":false,"relative_loc_diff_percent":46.875,"diff":["-Hd = sum([d * (H - d) * (W**2) for d in range(H)])","-Wd = sum([d * (W - d) * (H**2) for d in range(W)])","-# \u968e\u4e57 & \u9006\u5143\u8a08\u7b97","-factorial = [1]","-inverse = [1]","-for i in range(1, H * W + 2):","-    factorial.append(factorial[-1] * i % MOD)","-    inverse.append(pow(factorial[-1], MOD - 2, MOD))","-ans = (Hd + Wd) * factorial[H * W - 2] * inverse[K - 2] * inverse[H * W - K] % MOD","-print(ans)","+factorial = [1, 1]  # \u5143\u30c6\u30fc\u30d6\u30eb","+inverse = [1, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb","+inverse_from = [0, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb","+for i in range(2, H * W + 1):","+    factorial.append((factorial[-1] * i) % MOD)","+    inverse_from.append((-inverse_from[MOD % i] * (MOD \/\/ i)) % MOD)","+    inverse.append((inverse[-1] * inverse_from[-1]) % MOD)","+","+","+def nCr(n, r):","+    if n < r or r < 0:","+        return 0","+    elif r == 0:","+        return 1","+    return factorial[n] * inverse[r] * inverse[n - r] % MOD","+","+","+ans = 0","+# H\u306b\u3064\u3044\u3066","+for d in range(1, H):","+    ans += d * (H - d) * pow(W, 2, MOD) * nCr(H * W - 2, K - 2) % MOD","+    ans %= MOD","+# W\u306b\u3064\u3044\u3066","+for d in range(1, W):","+    ans += d * (W - d) * pow(H, 2, MOD) * nCr(H * W - 2, K - 2) % MOD","+    ans %= MOD","+print((ans % MOD))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3874847701,"measured_runtime_v1":0.2564818668,"runtime_lift":1.5107686747,"key":["s732762289","s994755294"]}
{"user_id":"u056277698","problem_id":"p03078","language":"python","submission_id_v0":"s581139547","submission_id_v1":"s213757381","cpu_time_v0":104,"cpu_time_v1":36,"memory_v0":8708,"memory_v1":4976,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":65.38,"input":"# -*- coding: utf-8 -*-\n\nx, y, z, k = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nb = list(map(int, input().split()))\n\nc = list(map(int, input().split()))\n\n\n\na.sort(reverse=True)\n\nb.sort(reverse=True)\n\nc.sort(reverse=True)\n\n\n\nabc = []\n\n\n\nfor i, _a in enumerate(a):\n\n    for j, _b in enumerate(b):\n\n        if (i+1) * (j+1) > k:\n\n            break\n\n        for l, _c in enumerate(c):\n\n            if (i+1) * (j+1) * (l+1) > k:\n\n                break\n\n            abc.append(_a + _b + _c)\n\n\n\nabc.sort(reverse=True)\n\nfor x in abc[:k]:\n\n    print(x)\n","target":"# -*- coding: utf-8 -*-\n\nimport heapq\n\n\n\nx, y, z, k = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nb = list(map(int, input().split()))\n\nc = list(map(int, input().split()))\n\n\n\nla, lb, lc = len(a), len(b), len(c)\n\n\n\na.sort(reverse=True)\n\nb.sort(reverse=True)\n\nc.sort(reverse=True)\n\n\n\nfix = set()\n\n\n\nq = [(-(a[0]+b[0]+c[0]), 0, 0, 0)]\n\n\n\nfor _ in range(k):\n\n    abc, i, j, l = heapq.heappop(q)\n\n    print((-abc))\n\n\n\n    if i+1 < la and (i+1, j, l) not in fix:\n\n        heapq.heappush(q, (-(a[i+1]+b[j]+c[l]), i+1, j, l))\n\n        fix.add((i+1, j, l))\n\n\n\n    if j+1 < lb and (i, j+1, l) not in fix:\n\n        heapq.heappush(q, (-(a[i]+b[j+1]+c[l]), i, j+1, l))\n\n        fix.add((i, j+1, l))\n\n\n\n    if l+1 < lc and (i, j, l+1) not in fix:\n\n        heapq.heappush(q, (-(a[i]+b[j]+c[l+1]), i, j, l+1))\n\n        fix.add((i, j, l+1))\n","code_v0_loc":24,"code_v1_loc":33,"code_v0_num_chars":566,"code_v1_num_chars":841,"code_v0_no_empty_lines":"# -*- coding: utf-8 -*-\nx, y, z, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\na.sort(reverse=True)\nb.sort(reverse=True)\nc.sort(reverse=True)\nabc = []\nfor i, _a in enumerate(a):\n    for j, _b in enumerate(b):\n        if (i + 1) * (j + 1) > k:\n            break\n        for l, _c in enumerate(c):\n            if (i + 1) * (j + 1) * (l + 1) > k:\n                break\n            abc.append(_a + _b + _c)\nabc.sort(reverse=True)\nfor x in abc[:k]:\n    print(x)\n","code_v1_no_empty_lines":"# -*- coding: utf-8 -*-\nimport heapq\n\nx, y, z, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nla, lb, lc = len(a), len(b), len(c)\na.sort(reverse=True)\nb.sort(reverse=True)\nc.sort(reverse=True)\nfix = set()\nq = [(-(a[0] + b[0] + c[0]), 0, 0, 0)]\nfor _ in range(k):\n    abc, i, j, l = heapq.heappop(q)\n    print((-abc))\n    if i + 1 < la and (i + 1, j, l) not in fix:\n        heapq.heappush(q, (-(a[i + 1] + b[j] + c[l]), i + 1, j, l))\n        fix.add((i + 1, j, l))\n    if j + 1 < lb and (i, j + 1, l) not in fix:\n        heapq.heappush(q, (-(a[i] + b[j + 1] + c[l]), i, j + 1, l))\n        fix.add((i, j + 1, l))\n    if l + 1 < lc and (i, j, l + 1) not in fix:\n        heapq.heappush(q, (-(a[i] + b[j] + c[l + 1]), i, j, l + 1))\n        fix.add((i, j, l + 1))\n","code_same":false,"relative_loc_diff_percent":27.2727272727,"diff":["+import heapq","+","+la, lb, lc = len(a), len(b), len(c)","-abc = []","-for i, _a in enumerate(a):","-    for j, _b in enumerate(b):","-        if (i + 1) * (j + 1) > k:","-            break","-        for l, _c in enumerate(c):","-            if (i + 1) * (j + 1) * (l + 1) > k:","-                break","-            abc.append(_a + _b + _c)","-abc.sort(reverse=True)","-for x in abc[:k]:","-    print(x)","+fix = set()","+q = [(-(a[0] + b[0] + c[0]), 0, 0, 0)]","+for _ in range(k):","+    abc, i, j, l = heapq.heappop(q)","+    print((-abc))","+    if i + 1 < la and (i + 1, j, l) not in fix:","+        heapq.heappush(q, (-(a[i + 1] + b[j] + c[l]), i + 1, j, l))","+        fix.add((i + 1, j, l))","+    if j + 1 < lb and (i, j + 1, l) not in fix:","+        heapq.heappush(q, (-(a[i] + b[j + 1] + c[l]), i, j + 1, l))","+        fix.add((i, j + 1, l))","+    if l + 1 < lc and (i, j, l + 1) not in fix:","+        heapq.heappush(q, (-(a[i] + b[j] + c[l + 1]), i, j, l + 1))","+        fix.add((i, j, l + 1))"],"diff_only_import_comment":false,"measured_runtime_v0":0.4343315315,"measured_runtime_v1":0.2096420834,"runtime_lift":2.0717764508,"key":["s581139547","s213757381"]}
{"user_id":"u761320129","problem_id":"p03559","language":"python","submission_id_v0":"s241549796","submission_id_v1":"s763191935","cpu_time_v0":368,"cpu_time_v1":263,"memory_v0":23328,"memory_v1":29344,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":28.53,"input":"N = int(eval(input()))\n\nA = list(map(int,input().split()))\n\nB = list(map(int,input().split()))\n\nC = list(map(int,input().split()))\n\nA.sort()\n\nC.sort()\n\n\n\nans = 0\n\nfrom bisect import bisect, bisect_left\n\nfor b in B:\n\n    i = bisect_left(A, b)\n\n    j = bisect(C, b)\n\n    ans += i * (N-j)\n\nprint(ans)","target":"N = int(eval(input()))\n\nA = list(map(int,input().split()))\n\nB = list(map(int,input().split()))\n\nC = list(map(int,input().split()))\n\nA.sort()\n\nC.sort()\n\n\n\nfrom bisect import bisect_left, bisect\n\nans = 0\n\nfor b in B:\n\n    i = bisect_left(A,b)\n\n    j = bisect(C,b)\n\n    ans += i * (N-j)\n\nprint(ans)","code_v0_loc":14,"code_v1_loc":14,"code_v0_num_chars":291,"code_v1_num_chars":289,"code_v0_no_empty_lines":"N = int(eval(input()))\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\nA.sort()\nC.sort()\nans = 0\nfrom bisect import bisect, bisect_left\n\nfor b in B:\n    i = bisect_left(A, b)\n    j = bisect(C, b)\n    ans += i * (N - j)\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\nA.sort()\nC.sort()\nfrom bisect import bisect_left, bisect\n\nans = 0\nfor b in B:\n    i = bisect_left(A, b)\n    j = bisect(C, b)\n    ans += i * (N - j)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["+from bisect import bisect_left, bisect","+","-from bisect import bisect, bisect_left","-"],"diff_only_import_comment":false,"measured_runtime_v0":0.2898341594,"measured_runtime_v1":0.1261365476,"runtime_lift":2.2977809758,"key":["s241549796","s763191935"]}
{"user_id":"u984276646","problem_id":"p03674","language":"python","submission_id_v0":"s545310428","submission_id_v1":"s792744532","cpu_time_v0":433,"cpu_time_v1":334,"memory_v0":43480,"memory_v1":43988,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":22.86,"input":"n = int(eval(input()))\n\na = list(map(int, input().split()))\n\nD = {i: [0] for i in range(1, n+1)}\n\nfor i in range(n+1):\n\n  D[a[i]][0] += 1\n\n  D[a[i]].append(i)\n\npl, pr = 0, 0\n\nfor i in D:\n\n  if D[i][0] == 2:\n\n    pl = D[i][1]\n\n    pr = D[i][2]\n\n    break\n\nL = pl\n\nM = pr - pl - 1\n\nN = n - pr\n\nmod = int(1e9) + 7 # <-- input modulo\n\nmaxf = n+11          # <-- input factional limitation\n\n\n\ndef make_fact(n, k):\n\n    tmp = n\n\n    perm = [i for i in range(k)]\n\n    L = [0 for _ in range(k)]\n\n    for i in range(k):\n\n        L[i] = tmp % (i + 1)\n\n        tmp \/\/= i + 1\n\n    LL = [0 for _ in range(k)]\n\n    for i in range(k):\n\n        LL[i] = perm[L[-i-1]]\n\n        for j in range(L[-i-1]+1, k):\n\n            perm[j-1] = perm[j]\n\n    return LL\n\n\n\ndef doubling(n, m, modulo=mod):\n\n    y = 1\n\n    base = n\n\n    tmp = m\n\n    while tmp != 0:\n\n        if tmp % 2 == 1:\n\n            y *= base\n\n            if modulo > 0:\n\n                y %= modulo\n\n        base *= base\n\n        if modulo > 0:\n\n            base %= modulo\n\n        tmp \/\/= 2\n\n    return y\n\n\n\ndef inved(a, modulo=mod):\n\n    x, y, u, v, k, l = 1, 0, 0, 1, a, modulo\n\n    while l != 0:\n\n        x, y, u, v = u, v, x - u * (k \/\/ l), y - v * (k \/\/ l)\n\n        k, l = l, k % l\n\n    return x % modulo\n\n\n\nfact = [1 for _ in range(maxf+1)]\n\ninvf = [1 for _ in range(maxf+1)]\n\n\n\nfor i in range(maxf):\n\n    fact[i+1] = (fact[i] * (i+1)) % mod\n\ninvf[-1] = inved(fact[-1])\n\nfor i in range(maxf, 0, -1):\n\n    invf[i-1] = (invf[i] * i) % mod\n\n\n\nfor i in range(1, n+2):\n\n  S = fact[n]*invf[i-1]*invf[n-i+1]%mod\n\n  if i <= n-1:\n\n    S += fact[n-1]*invf[i]*invf[n-1-i]%mod\n\n    S %= mod\n\n  if i <= n-M:\n\n    S -= fact[n-1-M]*invf[i-1]*invf[n-M-i]%mod\n\n    S %= mod\n\n  if i <= n:\n\n    S += fact[n-1]*invf[i-1]*invf[n-i]%mod\n\n    S %= mod\n\n  print(S)","target":"n = int(eval(input()))\n\na = list(map(int, input().split()))\n\nD = {i: [0] for i in range(1, n+1)}\n\nfor i in range(n+1):\n\n  D[a[i]][0] += 1\n\n  D[a[i]].append(i)\n\npl, pr = 0, 0\n\nfor i in D:\n\n  if D[i][0] == 2:\n\n    pl = D[i][1]\n\n    pr = D[i][2]\n\n    break\n\nL = pl\n\nM = pr - pl - 1\n\nN = n - pr\n\nmod = int(1e9) + 7 # <-- input modulo\n\nmaxf = n+11          # <-- input factional limitation\n\n\n\ndef make_fact(n, k):\n\n    tmp = n\n\n    perm = [i for i in range(k)]\n\n    L = [0 for _ in range(k)]\n\n    for i in range(k):\n\n        L[i] = tmp % (i + 1)\n\n        tmp \/\/= i + 1\n\n    LL = [0 for _ in range(k)]\n\n    for i in range(k):\n\n        LL[i] = perm[L[-i-1]]\n\n        for j in range(L[-i-1]+1, k):\n\n            perm[j-1] = perm[j]\n\n    return LL\n\n\n\ndef doubling(n, m, modulo=mod):\n\n    y = 1\n\n    base = n\n\n    tmp = m\n\n    while tmp != 0:\n\n        if tmp % 2 == 1:\n\n            y *= base\n\n            if modulo > 0:\n\n                y %= modulo\n\n        base *= base\n\n        if modulo > 0:\n\n            base %= modulo\n\n        tmp \/\/= 2\n\n    return y\n\n\n\ndef inved(a, modulo=mod):\n\n    x, y, u, v, k, l = 1, 0, 0, 1, a, modulo\n\n    while l != 0:\n\n        x, y, u, v = u, v, x - u * (k \/\/ l), y - v * (k \/\/ l)\n\n        k, l = l, k % l\n\n    return x % modulo\n\n\n\nfact = [1 for _ in range(maxf+1)]\n\ninvf = [1 for _ in range(maxf+1)]\n\n\n\nfor i in range(maxf):\n\n    fact[i+1] = (fact[i] * (i+1)) % mod\n\ninvf[-1] = inved(fact[-1])\n\nfor i in range(maxf, 0, -1):\n\n    invf[i-1] = (invf[i] * i) % mod\n\n\n\nfor i in range(1, n+2):\n\n  S = fact[n+1]*invf[i]*invf[n-i+1]%mod\n\n  if i <= n-M:\n\n    S -= fact[n-1-M]*invf[i-1]*invf[n-M-i]%mod\n\n    S %= mod\n\n  print(S)\n","code_v0_loc":75,"code_v1_loc":69,"code_v0_num_chars":1780,"code_v1_num_chars":1635,"code_v0_no_empty_lines":"n = int(eval(input()))\na = list(map(int, input().split()))\nD = {i: [0] for i in range(1, n + 1)}\nfor i in range(n + 1):\n    D[a[i]][0] += 1\n    D[a[i]].append(i)\npl, pr = 0, 0\nfor i in D:\n    if D[i][0] == 2:\n        pl = D[i][1]\n        pr = D[i][2]\n        break\nL = pl\nM = pr - pl - 1\nN = n - pr\nmod = int(1e9) + 7  # <-- input modulo\nmaxf = n + 11  # <-- input factional limitation\n\n\ndef make_fact(n, k):\n    tmp = n\n    perm = [i for i in range(k)]\n    L = [0 for _ in range(k)]\n    for i in range(k):\n        L[i] = tmp % (i + 1)\n        tmp \/\/= i + 1\n    LL = [0 for _ in range(k)]\n    for i in range(k):\n        LL[i] = perm[L[-i - 1]]\n        for j in range(L[-i - 1] + 1, k):\n            perm[j - 1] = perm[j]\n    return LL\n\n\ndef doubling(n, m, modulo=mod):\n    y = 1\n    base = n\n    tmp = m\n    while tmp != 0:\n        if tmp % 2 == 1:\n            y *= base\n            if modulo > 0:\n                y %= modulo\n        base *= base\n        if modulo > 0:\n            base %= modulo\n        tmp \/\/= 2\n    return y\n\n\ndef inved(a, modulo=mod):\n    x, y, u, v, k, l = 1, 0, 0, 1, a, modulo\n    while l != 0:\n        x, y, u, v = u, v, x - u * (k \/\/ l), y - v * (k \/\/ l)\n        k, l = l, k % l\n    return x % modulo\n\n\nfact = [1 for _ in range(maxf + 1)]\ninvf = [1 for _ in range(maxf + 1)]\nfor i in range(maxf):\n    fact[i + 1] = (fact[i] * (i + 1)) % mod\ninvf[-1] = inved(fact[-1])\nfor i in range(maxf, 0, -1):\n    invf[i - 1] = (invf[i] * i) % mod\nfor i in range(1, n + 2):\n    S = fact[n] * invf[i - 1] * invf[n - i + 1] % mod\n    if i <= n - 1:\n        S += fact[n - 1] * invf[i] * invf[n - 1 - i] % mod\n        S %= mod\n    if i <= n - M:\n        S -= fact[n - 1 - M] * invf[i - 1] * invf[n - M - i] % mod\n        S %= mod\n    if i <= n:\n        S += fact[n - 1] * invf[i - 1] * invf[n - i] % mod\n        S %= mod\n    print(S)\n","code_v1_no_empty_lines":"n = int(eval(input()))\na = list(map(int, input().split()))\nD = {i: [0] for i in range(1, n + 1)}\nfor i in range(n + 1):\n    D[a[i]][0] += 1\n    D[a[i]].append(i)\npl, pr = 0, 0\nfor i in D:\n    if D[i][0] == 2:\n        pl = D[i][1]\n        pr = D[i][2]\n        break\nL = pl\nM = pr - pl - 1\nN = n - pr\nmod = int(1e9) + 7  # <-- input modulo\nmaxf = n + 11  # <-- input factional limitation\n\n\ndef make_fact(n, k):\n    tmp = n\n    perm = [i for i in range(k)]\n    L = [0 for _ in range(k)]\n    for i in range(k):\n        L[i] = tmp % (i + 1)\n        tmp \/\/= i + 1\n    LL = [0 for _ in range(k)]\n    for i in range(k):\n        LL[i] = perm[L[-i - 1]]\n        for j in range(L[-i - 1] + 1, k):\n            perm[j - 1] = perm[j]\n    return LL\n\n\ndef doubling(n, m, modulo=mod):\n    y = 1\n    base = n\n    tmp = m\n    while tmp != 0:\n        if tmp % 2 == 1:\n            y *= base\n            if modulo > 0:\n                y %= modulo\n        base *= base\n        if modulo > 0:\n            base %= modulo\n        tmp \/\/= 2\n    return y\n\n\ndef inved(a, modulo=mod):\n    x, y, u, v, k, l = 1, 0, 0, 1, a, modulo\n    while l != 0:\n        x, y, u, v = u, v, x - u * (k \/\/ l), y - v * (k \/\/ l)\n        k, l = l, k % l\n    return x % modulo\n\n\nfact = [1 for _ in range(maxf + 1)]\ninvf = [1 for _ in range(maxf + 1)]\nfor i in range(maxf):\n    fact[i + 1] = (fact[i] * (i + 1)) % mod\ninvf[-1] = inved(fact[-1])\nfor i in range(maxf, 0, -1):\n    invf[i - 1] = (invf[i] * i) % mod\nfor i in range(1, n + 2):\n    S = fact[n + 1] * invf[i] * invf[n - i + 1] % mod\n    if i <= n - M:\n        S -= fact[n - 1 - M] * invf[i - 1] * invf[n - M - i] % mod\n        S %= mod\n    print(S)\n","code_same":false,"relative_loc_diff_percent":8.0,"diff":["-    S = fact[n] * invf[i - 1] * invf[n - i + 1] % mod","-    if i <= n - 1:","-        S += fact[n - 1] * invf[i] * invf[n - 1 - i] % mod","-        S %= mod","+    S = fact[n + 1] * invf[i] * invf[n - i + 1] % mod","-    if i <= n:","-        S += fact[n - 1] * invf[i - 1] * invf[n - i] % mod","-        S %= mod"],"diff_only_import_comment":false,"measured_runtime_v0":0.3162681131,"measured_runtime_v1":0.0655883436,"runtime_lift":4.8220170785,"key":["s545310428","s792744532"]}
{"user_id":"u671060652","problem_id":"p02952","language":"python","submission_id_v0":"s923935687","submission_id_v1":"s007434774","cpu_time_v0":222,"cpu_time_v1":60,"memory_v0":40940,"memory_v1":61860,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":72.97,"input":"n = int(eval(input()))\n\n\n\n\n\ndef countKeta(num):\n\n    count = 1\n\n    while num \/ 10 >= 1:\n\n        count += 1\n\n        num = num \/\/ 10\n\n    return count\n\n\n\n\n\ncount = 0\n\n\n\nfor i in range(1, n+1):\n\n    if(countKeta(i) % 2 == 1):\n\n        count += 1\n\n\n\nprint(count)","target":"n = int(eval(input()))\n\n\n\nif n < 10:\n\n    print(n)\n\nelif n < 100:\n\n    print((9))\n\nelif n < 1000:\n\n    print((n-90))\n\nelif n < 10000:\n\n    print((909))\n\nelif n < 100000:\n\n    print((n-9090))\n\nelif n < 1000000:\n\n    print((90909))","code_v0_loc":18,"code_v1_loc":14,"code_v0_num_chars":255,"code_v1_num_chars":213,"code_v0_no_empty_lines":"n = int(eval(input()))\n\n\ndef countKeta(num):\n    count = 1\n    while num \/ 10 >= 1:\n        count += 1\n        num = num \/\/ 10\n    return count\n\n\ncount = 0\nfor i in range(1, n + 1):\n    if countKeta(i) % 2 == 1:\n        count += 1\nprint(count)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nif n < 10:\n    print(n)\nelif n < 100:\n    print((9))\nelif n < 1000:\n    print((n - 90))\nelif n < 10000:\n    print((909))\nelif n < 100000:\n    print((n - 9090))\nelif n < 1000000:\n    print((90909))\n","code_same":false,"relative_loc_diff_percent":22.2222222222,"diff":["-","-","-def countKeta(num):","-    count = 1","-    while num \/ 10 >= 1:","-        count += 1","-        num = num \/\/ 10","-    return count","-","-","-count = 0","-for i in range(1, n + 1):","-    if countKeta(i) % 2 == 1:","-        count += 1","-print(count)","+if n < 10:","+    print(n)","+elif n < 100:","+    print((9))","+elif n < 1000:","+    print((n - 90))","+elif n < 10000:","+    print((909))","+elif n < 100000:","+    print((n - 9090))","+elif n < 1000000:","+    print((90909))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2693535981,"measured_runtime_v1":0.1929554205,"runtime_lift":1.3959369341,"key":["s923935687","s007434774"]}
{"user_id":"u598016178","problem_id":"p03721","language":"python","submission_id_v0":"s302115761","submission_id_v1":"s017112636","cpu_time_v0":756,"cpu_time_v1":620,"memory_v0":13140,"memory_v1":49880,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.99,"input":"import numpy as np\n\n\n\nn, k = list(map(int, input().split()))\n\nz = np.zeros(10**5 + 1)\n\nfor i in range(n):\n\n  a, b = list(map(int, input().split()))\n\n  z[a] += b\n\n\n\na = 0\n\nfor i in range(1, 10**5 + 1):\n\n  if k <= z[i]:\n\n    a = i\n\n    break\n\n  k -= z[i]\n\n\n\nprint((int(a)))\n","target":"n, k = list(map(int, input().split()))\n\nd = {}\n\nfor i in range(n):\n\n  a, b = list(map(int, input().split()))\n\n  d[a] = d[a] + b if a in d else b\n\n \n\na = 0\n\nfor i in range(1, 10**5+1):\n\n  if i in d and k <= d[i]:\n\n    a = i\n\n    break\n\n  k -= d[i] if i in d else 0\n\n \n\nprint(a)","code_v0_loc":16,"code_v1_loc":14,"code_v0_num_chars":258,"code_v1_num_chars":264,"code_v0_no_empty_lines":"import numpy as np\n\nn, k = list(map(int, input().split()))\nz = np.zeros(10**5 + 1)\nfor i in range(n):\n    a, b = list(map(int, input().split()))\n    z[a] += b\na = 0\nfor i in range(1, 10**5 + 1):\n    if k <= z[i]:\n        a = i\n        break\n    k -= z[i]\nprint((int(a)))\n","code_v1_no_empty_lines":"n, k = list(map(int, input().split()))\nd = {}\nfor i in range(n):\n    a, b = list(map(int, input().split()))\n    d[a] = d[a] + b if a in d else b\na = 0\nfor i in range(1, 10**5 + 1):\n    if i in d and k <= d[i]:\n        a = i\n        break\n    k -= d[i] if i in d else 0\nprint(a)\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-import numpy as np","-","-z = np.zeros(10**5 + 1)","+d = {}","-    z[a] += b","+    d[a] = d[a] + b if a in d else b","-    if k <= z[i]:","+    if i in d and k <= d[i]:","-    k -= z[i]","-print((int(a)))","+    k -= d[i] if i in d else 0","+print(a)"],"diff_only_import_comment":false,"measured_runtime_v0":2.2745897543,"measured_runtime_v1":0.3532919188,"runtime_lift":6.4382728093,"key":["s302115761","s017112636"]}
{"user_id":"u837286475","problem_id":"p02996","language":"python","submission_id_v0":"s244057022","submission_id_v1":"s796254109","cpu_time_v0":1201,"cpu_time_v1":941,"memory_v0":53532,"memory_v1":53600,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":21.65,"input":"\n\n\n\nn = int(eval(input()))\n\n\n\nabn = [list(map(int,input().split())) for _ in range(n)]\n\n\n\n\n\nabn.sort()\n\nabn.sort(key = lambda x:x[1])\n\n\n\n\n\n#print(abn)\n\n\n\nts = 0 # time_stamp\n\nenable = True\n\nfor abi in abn:\n\n    a, b = abi\n\n\n\n    if not ts + a <= b:\n\n        enable = False\n\n        break\n\n    else:\n\n        ts += a\n\n\n\nprint(('Yes' if enable else 'No'))","target":"\n\nn = int(eval(input()))\n\n\n\nabn = [list(map(int,input().split())) for _ in range(n)]\n\n\n\n\n\n#abn.sort()\n\nabn.sort(key = lambda x:x[1])\n\n\n\n\n\n#print(abn)\n\n\n\nts = 0 # time_stamp\n\nenable = True\n\nfor abi in abn:\n\n    a, b = abi\n\n\n\n    if not ts + a <= b:\n\n        enable = False\n\n        break\n\n    else:\n\n        ts += a\n\n\n\nprint(('Yes' if enable else 'No'))","code_v0_loc":25,"code_v1_loc":24,"code_v0_num_chars":345,"code_v1_num_chars":344,"code_v0_no_empty_lines":"n = int(eval(input()))\nabn = [list(map(int, input().split())) for _ in range(n)]\nabn.sort()\nabn.sort(key=lambda x: x[1])\n# print(abn)\nts = 0  # time_stamp\nenable = True\nfor abi in abn:\n    a, b = abi\n    if not ts + a <= b:\n        enable = False\n        break\n    else:\n        ts += a\nprint((\"Yes\" if enable else \"No\"))\n","code_v1_no_empty_lines":"n = int(eval(input()))\nabn = [list(map(int, input().split())) for _ in range(n)]\n# abn.sort()\nabn.sort(key=lambda x: x[1])\n# print(abn)\nts = 0  # time_stamp\nenable = True\nfor abi in abn:\n    a, b = abi\n    if not ts + a <= b:\n        enable = False\n        break\n    else:\n        ts += a\nprint((\"Yes\" if enable else \"No\"))\n","code_same":false,"relative_loc_diff_percent":4.0,"diff":["-abn.sort()","+# abn.sort()"],"diff_only_import_comment":false,"measured_runtime_v0":0.205832685,"measured_runtime_v1":0.0061624551,"runtime_lift":33.4010847824,"key":["s244057022","s796254109"]}
{"user_id":"u546285759","problem_id":"p00053","language":"python","submission_id_v0":"s431311473","submission_id_v1":"s975765781","cpu_time_v0":360,"cpu_time_v1":100,"memory_v0":8104,"memory_v1":9480,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":72.22,"input":"def isPrime(x):\n\n    if x == 2:\n\n        return True\n\n    if x < 2 or x % 2 == 0:\n\n        return False\n\n    i, root_x = 3, int(pow(x, 0.5))\n\n    while i <= root_x:\n\n        if x % i == 0:\n\n            return False\n\n        i += 2\n\n    return True\n\n\n\nprimes = [2]\n\nfor i in range(3, 104730):\n\n    if isPrime(i):\n\n        primes.append(primes[-1]+i)\n\nwhile True:\n\n    n = int(eval(input()))\n\n    if n == 0:\n\n        break\n\n    print((primes[n-1]))","target":"primes = [0, 0] + [1] * 150000\n\nfor i in range(2, 388):\n\n    if primes[i]:\n\n        for j in range(i*i, 150001, i):\n\n            primes[j] = 0\n\n\n\nvalues = [i for i, v in enumerate(primes) if v]\n\nwhile True:\n\n    n = int(eval(input()))\n\n    if n == 0:\n\n        break\n\n    print((sum(values[:n])))","code_v0_loc":21,"code_v1_loc":12,"code_v0_num_chars":438,"code_v1_num_chars":287,"code_v0_no_empty_lines":"def isPrime(x):\n    if x == 2:\n        return True\n    if x < 2 or x % 2 == 0:\n        return False\n    i, root_x = 3, int(pow(x, 0.5))\n    while i <= root_x:\n        if x % i == 0:\n            return False\n        i += 2\n    return True\n\n\nprimes = [2]\nfor i in range(3, 104730):\n    if isPrime(i):\n        primes.append(primes[-1] + i)\nwhile True:\n    n = int(eval(input()))\n    if n == 0:\n        break\n    print((primes[n - 1]))\n","code_v1_no_empty_lines":"primes = [0, 0] + [1] * 150000\nfor i in range(2, 388):\n    if primes[i]:\n        for j in range(i * i, 150001, i):\n            primes[j] = 0\nvalues = [i for i, v in enumerate(primes) if v]\nwhile True:\n    n = int(eval(input()))\n    if n == 0:\n        break\n    print((sum(values[:n])))\n","code_same":false,"relative_loc_diff_percent":42.8571428571,"diff":["-def isPrime(x):","-    if x == 2:","-        return True","-    if x < 2 or x % 2 == 0:","-        return False","-    i, root_x = 3, int(pow(x, 0.5))","-    while i <= root_x:","-        if x % i == 0:","-            return False","-        i += 2","-    return True","-","-","-primes = [2]","-for i in range(3, 104730):","-    if isPrime(i):","-        primes.append(primes[-1] + i)","+primes = [0, 0] + [1] * 150000","+for i in range(2, 388):","+    if primes[i]:","+        for j in range(i * i, 150001, i):","+            primes[j] = 0","+values = [i for i, v in enumerate(primes) if v]","-    print((primes[n - 1]))","+    print((sum(values[:n])))"],"diff_only_import_comment":false,"measured_runtime_v0":1.4180367088,"measured_runtime_v1":0.5017841969,"runtime_lift":2.8259891756,"key":["s431311473","s975765781"]}
{"user_id":"u773686010","problem_id":"p03162","language":"python","submission_id_v0":"s443943241","submission_id_v1":"s399855216","cpu_time_v0":1938,"cpu_time_v1":418,"memory_v0":46688,"memory_v1":28484,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":78.43,"input":"# https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_c\n\nimport numpy as np\n\nN = int(eval(input()))\n\nMax_List=[]\n\nN_List=[i for i in range(3)]\n\nfor i in range(N):\n\n    Current_List=list(map(int,input().split())) \n\n    if i == 0:\n\n        Max_List.append(Current_List)\n\n    else:\n\n        Current_Max_List = []\n\n        for j in range(3):\n\n            Index_List=np.array(Max_List[i-1])\n\n            ind = np.ones(3, dtype=bool)\n\n            ind[j] = False\n\n            Current_Max_List.append(max(Index_List[ind])+Current_List[j])\n\n            \n\n        Max_List.append(Current_Max_List)\n\n        \n\n    \n\nprint((max(Max_List[-1])))","target":"# https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_c\n\nN = int(eval(input()))\n\nMax_List=[]\n\nN_List=[i for i in range(3)]\n\nfor i in range(N):\n\n    Current_List=list(map(int,input().split())) \n\n    if i == 0:\n\n        Max_List.append(Current_List)\n\n    else:\n\n        Current_Max_List = []\n\n        Search_List=Max_List[i-1]\n\n        for j in range(3):\n\n            Current_Search_List=Search_List[1:3]\n\n            Current_Max_List.append(max(Current_Search_List)+Current_List[j])\n\n            Search_List.append(Search_List[0])\n\n            del Search_List[0]\n\n        Max_List.append(Current_Max_List)\n\n        \n\n    \n\nprint((max(Max_List[-1])))","code_v0_loc":21,"code_v1_loc":20,"code_v0_num_chars":611,"code_v1_num_chars":628,"code_v0_no_empty_lines":"# https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_c\nimport numpy as np\n\nN = int(eval(input()))\nMax_List = []\nN_List = [i for i in range(3)]\nfor i in range(N):\n    Current_List = list(map(int, input().split()))\n    if i == 0:\n        Max_List.append(Current_List)\n    else:\n        Current_Max_List = []\n        for j in range(3):\n            Index_List = np.array(Max_List[i - 1])\n            ind = np.ones(3, dtype=bool)\n            ind[j] = False\n            Current_Max_List.append(max(Index_List[ind]) + Current_List[j])\n        Max_List.append(Current_Max_List)\nprint((max(Max_List[-1])))\n","code_v1_no_empty_lines":"# https:\/\/atcoder.jp\/contests\/dp\/tasks\/dp_c\nN = int(eval(input()))\nMax_List = []\nN_List = [i for i in range(3)]\nfor i in range(N):\n    Current_List = list(map(int, input().split()))\n    if i == 0:\n        Max_List.append(Current_List)\n    else:\n        Current_Max_List = []\n        Search_List = Max_List[i - 1]\n        for j in range(3):\n            Current_Search_List = Search_List[1:3]\n            Current_Max_List.append(max(Current_Search_List) + Current_List[j])\n            Search_List.append(Search_List[0])\n            del Search_List[0]\n        Max_List.append(Current_Max_List)\nprint((max(Max_List[-1])))\n","code_same":false,"relative_loc_diff_percent":4.7619047619,"diff":["-import numpy as np","-","+        Search_List = Max_List[i - 1]","-            Index_List = np.array(Max_List[i - 1])","-            ind = np.ones(3, dtype=bool)","-            ind[j] = False","-            Current_Max_List.append(max(Index_List[ind]) + Current_List[j])","+            Current_Search_List = Search_List[1:3]","+            Current_Max_List.append(max(Current_Search_List) + Current_List[j])","+            Search_List.append(Search_List[0])","+            del Search_List[0]"],"diff_only_import_comment":false,"measured_runtime_v0":1.9151891472,"measured_runtime_v1":0.3473046393,"runtime_lift":5.5144358302,"key":["s443943241","s399855216"]}
{"user_id":"u714300041","problem_id":"p03835","language":"python","submission_id_v0":"s859897716","submission_id_v1":"s908338086","cpu_time_v0":324,"cpu_time_v1":265,"memory_v0":40684,"memory_v1":40684,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":18.21,"input":"import sys\n\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\nK, S = list(map(int, input().split()))\n\n\n\nans = 0\n\nfor z in range(K+1):\n\n    for y in range(K+1):\n\n        x = S - (z + y)\n\n        if x >= 0 and x <= K:\n\n            ans += 1\n\nprint(ans)","target":"import sys\n\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\nK, S = list(map(int, input().split()))\n\n\n\nans = 0\n\nfor z in range(K+1):\n\n    for y in range(K+1):\n\n        x = S - (z + y)\n\n        if 0 <= x <= K:\n\n            ans += 1\n\nprint(ans)","code_v0_loc":13,"code_v1_loc":13,"code_v0_num_chars":255,"code_v1_num_chars":249,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nK, S = list(map(int, input().split()))\nans = 0\nfor z in range(K + 1):\n    for y in range(K + 1):\n        x = S - (z + y)\n        if x >= 0 and x <= K:\n            ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nK, S = list(map(int, input().split()))\nans = 0\nfor z in range(K + 1):\n    for y in range(K + 1):\n        x = S - (z + y)\n        if 0 <= x <= K:\n            ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-        if x >= 0 and x <= K:","+        if 0 <= x <= K:"],"diff_only_import_comment":false,"measured_runtime_v0":0.450106571,"measured_runtime_v1":0.2041984936,"runtime_lift":2.2042599977,"key":["s859897716","s908338086"]}
{"user_id":"u994988729","problem_id":"p02996","language":"python","submission_id_v0":"s348750359","submission_id_v1":"s832149929","cpu_time_v0":885,"cpu_time_v1":774,"memory_v0":30828,"memory_v1":41916,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":12.54,"input":"n=int(eval(input()))\n\ntask=[] \n\nfor _ in range(n):\n\n    a,b=list(map(int,input().split()))\n\n    task.append((b, -a))\n\n\n\ntask.sort()\n\n\n\ntime=0\n\nflag=True\n\nfor i in task:\n\n    time-=i[1]\n\n    if time>i[0]:\n\n        flag=False\n\n        break\n\n\n\nif flag:\n\n    print(\"Yes\")\n\nelse:\n\n    print(\"No\")\n\n\n","target":"import sys\n\nfrom collections import defaultdict\n\nfrom operator import itemgetter\n\ninput = sys.stdin.readline\n\n\n\nN = int(eval(input()))\n\nd = defaultdict(int)\n\nfor _ in range(N):\n\n    a, b = list(map(int, input().split()))\n\n    d[b] += a\n\ntask = list(d.items())\n\ntask.sort()\n\n\n\nnow = 0\n\nans = \"Yes\"\n\nfor limit, time in task:\n\n    now += time\n\n    if now > limit:\n\n        ans = \"No\"\n\n        break\n\n\n\nprint(ans)\n","code_v0_loc":21,"code_v1_loc":22,"code_v0_num_chars":283,"code_v1_num_chars":398,"code_v0_no_empty_lines":"n = int(eval(input()))\ntask = []\nfor _ in range(n):\n    a, b = list(map(int, input().split()))\n    task.append((b, -a))\ntask.sort()\ntime = 0\nflag = True\nfor i in task:\n    time -= i[1]\n    if time > i[0]:\n        flag = False\n        break\nif flag:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","code_v1_no_empty_lines":"import sys\nfrom collections import defaultdict\nfrom operator import itemgetter\n\ninput = sys.stdin.readline\nN = int(eval(input()))\nd = defaultdict(int)\nfor _ in range(N):\n    a, b = list(map(int, input().split()))\n    d[b] += a\ntask = list(d.items())\ntask.sort()\nnow = 0\nans = \"Yes\"\nfor limit, time in task:\n    now += time\n    if now > limit:\n        ans = \"No\"\n        break\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":4.5454545455,"diff":["-n = int(eval(input()))","-task = []","-for _ in range(n):","+import sys","+from collections import defaultdict","+from operator import itemgetter","+","+input = sys.stdin.readline","+N = int(eval(input()))","+d = defaultdict(int)","+for _ in range(N):","-    task.append((b, -a))","+    d[b] += a","+task = list(d.items())","-time = 0","-flag = True","-for i in task:","-    time -= i[1]","-    if time > i[0]:","-        flag = False","+now = 0","+ans = \"Yes\"","+for limit, time in task:","+    now += time","+    if now > limit:","+        ans = \"No\"","-if flag:","-    print(\"Yes\")","-else:","-    print(\"No\")","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3182171457,"measured_runtime_v1":0.1977030051,"runtime_lift":1.6095716175,"key":["s348750359","s832149929"]}
{"user_id":"u883040023","problem_id":"p02767","language":"python","submission_id_v0":"s988075401","submission_id_v1":"s958750940","cpu_time_v0":151,"cpu_time_v1":21,"memory_v0":12504,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":86.09,"input":"import numpy as np\n\n\n\nn = int(eval(input()))\n\nx = list(map(int,input().split()))\n\nx2 = np.power(x,2)\n\n\n\np1 = sum(x)\/\/n\n\np2 = -(-sum(x)\/\/n)\n\n\n\nw1 = n*(p1**2) -2*sum(x)*p1 +sum(x2)\n\nw2 = n*(p2**2) -2*sum(x)*p2 +sum(x2)\n\n\n\nprint((min(w1,w2)))","target":"n = int(eval(input()))\n\nX = sorted(map(int,input().split()))\n\nans = 10**6\n\n\n\nfor i in range(X[0],X[-1]+1):\n\n    HP = 0\n\n    \n\n    for j in X:\n\n        HP += (j - i) ** 2\n\n        \n\n    ans = min(ans,HP)\n\n    \n\nprint(ans)","code_v0_loc":13,"code_v1_loc":13,"code_v0_num_chars":231,"code_v1_num_chars":214,"code_v0_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\nx = list(map(int, input().split()))\nx2 = np.power(x, 2)\np1 = sum(x) \/\/ n\np2 = -(-sum(x) \/\/ n)\nw1 = n * (p1**2) - 2 * sum(x) * p1 + sum(x2)\nw2 = n * (p2**2) - 2 * sum(x) * p2 + sum(x2)\nprint((min(w1, w2)))\n","code_v1_no_empty_lines":"n = int(eval(input()))\nX = sorted(map(int, input().split()))\nans = 10**6\nfor i in range(X[0], X[-1] + 1):\n    HP = 0\n    for j in X:\n        HP += (j - i) ** 2\n    ans = min(ans, HP)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-import numpy as np","-","-x = list(map(int, input().split()))","-x2 = np.power(x, 2)","-p1 = sum(x) \/\/ n","-p2 = -(-sum(x) \/\/ n)","-w1 = n * (p1**2) - 2 * sum(x) * p1 + sum(x2)","-w2 = n * (p2**2) - 2 * sum(x) * p2 + sum(x2)","-print((min(w1, w2)))","+X = sorted(map(int, input().split()))","+ans = 10**6","+for i in range(X[0], X[-1] + 1):","+    HP = 0","+    for j in X:","+        HP += (j - i) ** 2","+    ans = min(ans, HP)","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.3939440961,"measured_runtime_v1":0.2004205168,"runtime_lift":6.9550968045,"key":["s988075401","s958750940"]}
{"user_id":"u645250356","problem_id":"p03038","language":"python","submission_id_v0":"s890208193","submission_id_v1":"s797826633","cpu_time_v0":490,"cpu_time_v1":431,"memory_v0":71452,"memory_v1":34916,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":12.04,"input":"from collections import Counter,defaultdict,deque\n\nfrom heapq import heapify,heappop,heappush\n\nfrom bisect import bisect_left,bisect_right\n\nimport sys,math,itertools,string,queue\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\ndef inp(): return int(sys.stdin.readline())\n\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\ndef inpl_str(): return list(sys.stdin.readline().split())\n\ndef inpln(n): return list(int(sys.stdin.readline()) for i in range(n))\n\n\n\nn,m = inpl()\n\na = inpl()\n\nb = [0] * m\n\nfor i in range(m):\n\n    x,y = inpl()\n\n    b[i] = [x,y]\n\na.sort()\n\nb.sort(key=lambda x:x[1], reverse = True)\n\nres = sum(a)\n\ni = 0\n\nj = 0\n\nwhile True:\n\n    # print(i,j)\n\n    if a[i] < b[j][1]:\n\n        res += b[j][1] - a[i]\n\n        i += 1\n\n    else:\n\n        break\n\n    b[j][0] -= 1\n\n    if b[j][0] == 0:\n\n        j += 1\n\n    if i >= n or j >= m:\n\n        break\n\nprint(res)\n","target":"from collections import Counter,defaultdict,deque\n\nfrom heapq import heappop,heappush,heapify\n\nfrom bisect import bisect_left,bisect_right \n\nimport sys,math,itertools,fractions,pprint\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\nINF = float('inf')\n\ndef inp(): return int(sys.stdin.readline())\n\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\n\n\nn,m = inpl()\n\na = inpl()\n\na.sort()\n\nbc = [inpl() for _ in range(m)]\n\nbc.sort(key = lambda x:x[1], reverse = True)\n\nlm = sum(x[1] for x in bc)\n\nnow = 0\n\nalt = 0\n\nwhile now < n and alt < m:\n\n    c,b = bc[alt]\n\n    if a[now] > b:\n\n        break\n\n    else:\n\n        a[now] = b\n\n    bc[alt][0] -= 1\n\n    if bc[alt][0] == 0:\n\n        alt += 1\n\n    now += 1\n\nprint((sum(a)))\n","code_v0_loc":35,"code_v1_loc":29,"code_v0_num_chars":880,"code_v1_num_chars":728,"code_v0_no_empty_lines":"from collections import Counter, defaultdict, deque\nfrom heapq import heapify, heappop, heappush\nfrom bisect import bisect_left, bisect_right\nimport sys, math, itertools, string, queue\n\nsys.setrecursionlimit(10**8)\nmod = 10**9 + 7\n\n\ndef inp():\n    return int(sys.stdin.readline())\n\n\ndef inpl():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef inpl_str():\n    return list(sys.stdin.readline().split())\n\n\ndef inpln(n):\n    return list(int(sys.stdin.readline()) for i in range(n))\n\n\nn, m = inpl()\na = inpl()\nb = [0] * m\nfor i in range(m):\n    x, y = inpl()\n    b[i] = [x, y]\na.sort()\nb.sort(key=lambda x: x[1], reverse=True)\nres = sum(a)\ni = 0\nj = 0\nwhile True:\n    # print(i,j)\n    if a[i] < b[j][1]:\n        res += b[j][1] - a[i]\n        i += 1\n    else:\n        break\n    b[j][0] -= 1\n    if b[j][0] == 0:\n        j += 1\n    if i >= n or j >= m:\n        break\nprint(res)\n","code_v1_no_empty_lines":"from collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush, heapify\nfrom bisect import bisect_left, bisect_right\nimport sys, math, itertools, fractions, pprint\n\nsys.setrecursionlimit(10**8)\nmod = 10**9 + 7\nINF = float(\"inf\")\n\n\ndef inp():\n    return int(sys.stdin.readline())\n\n\ndef inpl():\n    return list(map(int, sys.stdin.readline().split()))\n\n\nn, m = inpl()\na = inpl()\na.sort()\nbc = [inpl() for _ in range(m)]\nbc.sort(key=lambda x: x[1], reverse=True)\nlm = sum(x[1] for x in bc)\nnow = 0\nalt = 0\nwhile now < n and alt < m:\n    c, b = bc[alt]\n    if a[now] > b:\n        break\n    else:\n        a[now] = b\n    bc[alt][0] -= 1\n    if bc[alt][0] == 0:\n        alt += 1\n    now += 1\nprint((sum(a)))\n","code_same":false,"relative_loc_diff_percent":17.1428571429,"diff":["-from heapq import heapify, heappop, heappush","+from heapq import heappop, heappush, heapify","-import sys, math, itertools, string, queue","+import sys, math, itertools, fractions, pprint","+INF = float(\"inf\")","-def inpl_str():","-    return list(sys.stdin.readline().split())","-","-","-def inpln(n):","-    return list(int(sys.stdin.readline()) for i in range(n))","-","-","-b = [0] * m","-for i in range(m):","-    x, y = inpl()","-    b[i] = [x, y]","-b.sort(key=lambda x: x[1], reverse=True)","-res = sum(a)","-i = 0","-j = 0","-while True:","-    # print(i,j)","-    if a[i] < b[j][1]:","-        res += b[j][1] - a[i]","-        i += 1","+bc = [inpl() for _ in range(m)]","+bc.sort(key=lambda x: x[1], reverse=True)","+lm = sum(x[1] for x in bc)","+now = 0","+alt = 0","+while now < n and alt < m:","+    c, b = bc[alt]","+    if a[now] > b:","+        break","-        break","-    b[j][0] -= 1","-    if b[j][0] == 0:","-        j += 1","-    if i >= n or j >= m:","-        break","-print(res)","+        a[now] = b","+    bc[alt][0] -= 1","+    if bc[alt][0] == 0:","+        alt += 1","+    now += 1","+print((sum(a)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.310756367,"measured_runtime_v1":0.2053928638,"runtime_lift":1.5129852191,"key":["s890208193","s797826633"]}
{"user_id":"u287132915","problem_id":"p02891","language":"python","submission_id_v0":"s480399361","submission_id_v1":"s640908939","cpu_time_v0":182,"cpu_time_v1":72,"memory_v0":38256,"memory_v1":61768,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":60.44,"input":"s = eval(input())\n\nk = int(eval(input()))\n\n\n\nif len(set(s)) == 1:\n\n    print(((len(s)*k)\/\/2))\n\n    exit()\n\n\n\nss = s + s\n\n\n\nshoko = 0\n\nprev = ''\n\ncnt = 0\n\nfor i in range(len(s)):\n\n    if s[i] == prev:\n\n        cnt += 1\n\n    else:\n\n        shoko += cnt \/\/ 2\n\n        cnt = 1\n\n    prev = s[i]\n\nshoko += cnt \/\/ 2\n\n\n\nkosa = 0\n\nprev = ''\n\ncnt = 0\n\nfor i in range(len(ss)):\n\n    if ss[i] == prev:\n\n        cnt += 1\n\n    else:\n\n        kosa += cnt \/\/ 2\n\n        cnt = 1\n\n    prev = ss[i]\n\nkosa += cnt \/\/ 2\n\nkosa -= shoko\n\n\n\nprint((shoko + (k-1)*kosa))","target":"s = eval(input())\n\nk = int(eval(input()))\n\nn = len(s)\n\n\n\nif len(set(s)) == 1:\n\n    print((n*k\/\/2))\n\n    exit()\n\n\n\nss = s + s\n\ncnts = 0\n\nnow = s[0]\n\ntemp = 1\n\nfor i in range(1, n):\n\n    if s[i] == now:\n\n        temp += 1\n\n    else:\n\n        cnts += temp \/\/ 2\n\n        temp = 1\n\n        now = s[i]\n\ncnts += temp \/\/ 2\n\n\n\ncntss = 0\n\nnow = ss[0]\n\ntemp = 1\n\nfor i in range(1, 2*n):\n\n    if ss[i] == now:\n\n        temp += 1\n\n    else:\n\n        cntss += temp \/\/ 2\n\n        temp = 1\n\n        now = ss[i]\n\ncntss += temp \/\/ 2\n\n\n\nkousa = cntss - cnts\n\nprint((cnts + kousa*(k-1)))","code_v0_loc":35,"code_v1_loc":35,"code_v0_num_chars":527,"code_v1_num_chars":551,"code_v0_no_empty_lines":"s = eval(input())\nk = int(eval(input()))\nif len(set(s)) == 1:\n    print(((len(s) * k) \/\/ 2))\n    exit()\nss = s + s\nshoko = 0\nprev = \"\"\ncnt = 0\nfor i in range(len(s)):\n    if s[i] == prev:\n        cnt += 1\n    else:\n        shoko += cnt \/\/ 2\n        cnt = 1\n    prev = s[i]\nshoko += cnt \/\/ 2\nkosa = 0\nprev = \"\"\ncnt = 0\nfor i in range(len(ss)):\n    if ss[i] == prev:\n        cnt += 1\n    else:\n        kosa += cnt \/\/ 2\n        cnt = 1\n    prev = ss[i]\nkosa += cnt \/\/ 2\nkosa -= shoko\nprint((shoko + (k - 1) * kosa))\n","code_v1_no_empty_lines":"s = eval(input())\nk = int(eval(input()))\nn = len(s)\nif len(set(s)) == 1:\n    print((n * k \/\/ 2))\n    exit()\nss = s + s\ncnts = 0\nnow = s[0]\ntemp = 1\nfor i in range(1, n):\n    if s[i] == now:\n        temp += 1\n    else:\n        cnts += temp \/\/ 2\n        temp = 1\n        now = s[i]\ncnts += temp \/\/ 2\ncntss = 0\nnow = ss[0]\ntemp = 1\nfor i in range(1, 2 * n):\n    if ss[i] == now:\n        temp += 1\n    else:\n        cntss += temp \/\/ 2\n        temp = 1\n        now = ss[i]\ncntss += temp \/\/ 2\nkousa = cntss - cnts\nprint((cnts + kousa * (k - 1)))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["+n = len(s)","-    print(((len(s) * k) \/\/ 2))","+    print((n * k \/\/ 2))","-shoko = 0","-prev = \"\"","-cnt = 0","-for i in range(len(s)):","-    if s[i] == prev:","-        cnt += 1","+cnts = 0","+now = s[0]","+temp = 1","+for i in range(1, n):","+    if s[i] == now:","+        temp += 1","-        shoko += cnt \/\/ 2","-        cnt = 1","-    prev = s[i]","-shoko += cnt \/\/ 2","-kosa = 0","-prev = \"\"","-cnt = 0","-for i in range(len(ss)):","-    if ss[i] == prev:","-        cnt += 1","+        cnts += temp \/\/ 2","+        temp = 1","+        now = s[i]","+cnts += temp \/\/ 2","+cntss = 0","+now = ss[0]","+temp = 1","+for i in range(1, 2 * n):","+    if ss[i] == now:","+        temp += 1","-        kosa += cnt \/\/ 2","-        cnt = 1","-    prev = ss[i]","-kosa += cnt \/\/ 2","-kosa -= shoko","-print((shoko + (k - 1) * kosa))","+        cntss += temp \/\/ 2","+        temp = 1","+        now = ss[i]","+cntss += temp \/\/ 2","+kousa = cntss - cnts","+print((cnts + kousa * (k - 1)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2980948234,"measured_runtime_v1":0.2282131991,"runtime_lift":1.3062120179,"key":["s480399361","s640908939"]}
{"user_id":"u367130284","problem_id":"p03081","language":"python","submission_id_v0":"s141729674","submission_id_v1":"s328617225","cpu_time_v0":599,"cpu_time_v1":524,"memory_v0":40892,"memory_v1":40892,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":12.52,"input":"n,q=list(map(int,input().split()));s=\"_\"+eval(input())+\"_\";l,r=0,n+1\n\nfor(m,h)in[input().split()for i in range(q)][::-1]:L=h==\"L\";R=h==\"R\";l,r=[l,l-1,l+1][(m==s[l]and R)-(m==s[l+1]and L)],[r,r-1,r+1][(m==s[r-1]and R)-(m==s[r]and L)]\n\nprint((max(0,r-l-1)))","target":"n,q=list(map(int,input().split()));s=\"_\"+eval(input())+\"_\";l,r=0,n+1\n\nfor(m,h)in[input().split()for i in range(q)][::-1]:\n\n    L=h==\"L\";R=h==\"R\";\n\n    l+=(m==s[l+1]and L)-(m==s[l]and R)\n\n    r+=(m==s[r]and L)-(m==s[r-1]and R)\n\nprint((max(0,r-l-1)))","code_v0_loc":3,"code_v1_loc":6,"code_v0_num_chars":241,"code_v1_num_chars":234,"code_v0_no_empty_lines":"n, q = list(map(int, input().split()))\ns = \"_\" + eval(input()) + \"_\"\nl, r = 0, n + 1\nfor (m, h) in [input().split() for i in range(q)][::-1]:\n    L = h == \"L\"\n    R = h == \"R\"\n    l, r = [l, l - 1, l + 1][(m == s[l] and R) - (m == s[l + 1] and L)], [\n        r,\n        r - 1,\n        r + 1,\n    ][(m == s[r - 1] and R) - (m == s[r] and L)]\nprint((max(0, r - l - 1)))\n","code_v1_no_empty_lines":"n, q = list(map(int, input().split()))\ns = \"_\" + eval(input()) + \"_\"\nl, r = 0, n + 1\nfor (m, h) in [input().split() for i in range(q)][::-1]:\n    L = h == \"L\"\n    R = h == \"R\"\n    l += (m == s[l + 1] and L) - (m == s[l] and R)\n    r += (m == s[r] and L) - (m == s[r - 1] and R)\nprint((max(0, r - l - 1)))\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-    l, r = [l, l - 1, l + 1][(m == s[l] and R) - (m == s[l + 1] and L)], [","-        r,","-        r - 1,","-        r + 1,","-    ][(m == s[r - 1] and R) - (m == s[r] and L)]","+    l += (m == s[l + 1] and L) - (m == s[l] and R)","+    r += (m == s[r] and L) - (m == s[r - 1] and R)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2496840062,"measured_runtime_v1":0.1505171778,"runtime_lift":1.6588406042,"key":["s141729674","s328617225"]}
{"user_id":"u884982181","problem_id":"p03325","language":"python","submission_id_v0":"s470797111","submission_id_v1":"s347705079","cpu_time_v0":557,"cpu_time_v1":99,"memory_v0":14868,"memory_v1":4148,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":82.23,"input":"import numpy as np\n\nN = int(eval(input()))\n\na = list(map(int,input().split()))\n\nans = 0\n\na = np.array(a)\n\nwhile a.size > 0:\n\n    a = a[a%2 == 0]\n\n    ans += len(a)\n\n    a = a\/\/2\n\nprint(ans)","target":"n = int(eval(input()))\n\na = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(n):\n\n    while a[i]%2 == 0:\n\n        a[i] \/\/=2\n\n        ans+=1\n\nprint(ans)","code_v0_loc":10,"code_v1_loc":8,"code_v0_num_chars":183,"code_v1_num_chars":152,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\na = list(map(int, input().split()))\nans = 0\na = np.array(a)\nwhile a.size > 0:\n    a = a[a % 2 == 0]\n    ans += len(a)\n    a = a \/\/ 2\nprint(ans)\n","code_v1_no_empty_lines":"n = int(eval(input()))\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n    while a[i] % 2 == 0:\n        a[i] \/\/= 2\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["-import numpy as np","-","-N = int(eval(input()))","+n = int(eval(input()))","-a = np.array(a)","-while a.size > 0:","-    a = a[a % 2 == 0]","-    ans += len(a)","-    a = a \/\/ 2","+for i in range(n):","+    while a[i] % 2 == 0:","+        a[i] \/\/= 2","+        ans += 1"],"diff_only_import_comment":false,"measured_runtime_v0":1.4026193674,"measured_runtime_v1":0.2031858566,"runtime_lift":6.9031348485,"key":["s470797111","s347705079"]}
{"user_id":"u377989038","problem_id":"p03013","language":"python","submission_id_v0":"s518499900","submission_id_v1":"s037041247","cpu_time_v0":377,"cpu_time_v1":189,"memory_v0":17016,"memory_v1":7824,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":49.87,"input":"import numpy as np\n\n\n\nn, m = list(map(int, input().split()))\n\na = [int(eval(input())) for _ in range(m)] + [0]\n\nmod = 10 ** 9 + 7\n\n\n\ndp = np.zeros(n + 1, dtype=np.int64)\n\ndp[0] = 1\n\nb = a[0]\n\nj = 1\n\nfor i in range(1, n + 1):\n\n    if i == b:\n\n        b = a[j]\n\n        j += 1\n\n    else:\n\n        tmp = dp[i - 2] + dp[i - 1]\n\n        if tmp >= mod:\n\n            tmp -= mod\n\n        dp[i] = tmp\n\nprint((int(dp[-1])))","target":"n, m = list(map(int, input().split()))\n\na = [int(eval(input())) for _ in range(m)] + [0]\n\nmod = 10 ** 9 + 7\n\n\n\ndp = [0] * (n + 1)\n\ndp[0] = 1\n\nb = a[0]\n\nj = 1\n\nfor i in range(1, n + 1):\n\n    if i == b:\n\n        b = a[j]\n\n        j += 1\n\n    else:\n\n        tmp = dp[i - 2] + dp[i - 1]\n\n        if tmp >= mod:\n\n            tmp -= mod\n\n        dp[i] = tmp\n\nprint((int(dp[-1])))","code_v0_loc":20,"code_v1_loc":18,"code_v0_num_chars":399,"code_v1_num_chars":359,"code_v0_no_empty_lines":"import numpy as np\n\nn, m = list(map(int, input().split()))\na = [int(eval(input())) for _ in range(m)] + [0]\nmod = 10**9 + 7\ndp = np.zeros(n + 1, dtype=np.int64)\ndp[0] = 1\nb = a[0]\nj = 1\nfor i in range(1, n + 1):\n    if i == b:\n        b = a[j]\n        j += 1\n    else:\n        tmp = dp[i - 2] + dp[i - 1]\n        if tmp >= mod:\n            tmp -= mod\n        dp[i] = tmp\nprint((int(dp[-1])))\n","code_v1_no_empty_lines":"n, m = list(map(int, input().split()))\na = [int(eval(input())) for _ in range(m)] + [0]\nmod = 10**9 + 7\ndp = [0] * (n + 1)\ndp[0] = 1\nb = a[0]\nj = 1\nfor i in range(1, n + 1):\n    if i == b:\n        b = a[j]\n        j += 1\n    else:\n        tmp = dp[i - 2] + dp[i - 1]\n        if tmp >= mod:\n            tmp -= mod\n        dp[i] = tmp\nprint((int(dp[-1])))\n","code_same":false,"relative_loc_diff_percent":10.0,"diff":["-import numpy as np","-","-dp = np.zeros(n + 1, dtype=np.int64)","+dp = [0] * (n + 1)"],"diff_only_import_comment":false,"measured_runtime_v0":1.311264878,"measured_runtime_v1":0.2038756571,"runtime_lift":6.4316892793,"key":["s518499900","s037041247"]}
{"user_id":"u093739220","problem_id":"p03013","language":"python","submission_id_v0":"s120232779","submission_id_v1":"s983584428","cpu_time_v0":173,"cpu_time_v1":130,"memory_v0":11884,"memory_v1":13948,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":24.86,"input":"N, M = list(map(int, input().split(\" \")))\n\nA = {int(eval(input())) for _ in range(M)}\n\n\n\nmemo = [0] * (N + 1)\n\nmemo[0] = 1\n\nmemo[1] = 0 if 1 in A else 1\n\n\n\nif N == 1:\n\n    print((memo[1]))\n\nelse:\n\n    for i in range(2, N + 1):\n\n        if i in A:\n\n            continue\n\n        memo[i] = (memo[i - 2] + memo[i - 1]) % 1000000007\n\n\n\n    print((memo[N]))\n","target":"N, M = list(map(int, input().split(\" \")))\n\nA = {int(input()) for _ in range(M)}\n\n\n\nmemo = [0] * (N + 1)\n\nmemo[0] = 1\n\nmemo[1] = 0 if 1 in A else 1\n\n\n\nif N == 1:\n\n    print((memo[1]))\n\nelse:\n\n    for i in range(2, N + 1):\n\n        if i in A:\n\n            continue\n\n        memo[i] = (memo[i - 2] + memo[i - 1]) % 1000000007\n\n    print((memo[N]))\n","code_v0_loc":16,"code_v1_loc":15,"code_v0_num_chars":343,"code_v1_num_chars":343,"code_v0_no_empty_lines":"N, M = list(map(int, input().split(\" \")))\nA = {int(eval(input())) for _ in range(M)}\nmemo = [0] * (N + 1)\nmemo[0] = 1\nmemo[1] = 0 if 1 in A else 1\nif N == 1:\n    print((memo[1]))\nelse:\n    for i in range(2, N + 1):\n        if i in A:\n            continue\n        memo[i] = (memo[i - 2] + memo[i - 1]) % 1000000007\n    print((memo[N]))\n","code_v1_no_empty_lines":"N, M = list(map(int, input().split(\" \")))\nA = {int(input()) for _ in range(M)}\nmemo = [0] * (N + 1)\nmemo[0] = 1\nmemo[1] = 0 if 1 in A else 1\nif N == 1:\n    print((memo[1]))\nelse:\n    for i in range(2, N + 1):\n        if i in A:\n            continue\n        memo[i] = (memo[i - 2] + memo[i - 1]) % 1000000007\n    print((memo[N]))\n","code_same":false,"relative_loc_diff_percent":6.25,"diff":["-A = {int(eval(input())) for _ in range(M)}","+A = {int(input()) for _ in range(M)}"],"diff_only_import_comment":false,"measured_runtime_v0":0.3921922538,"measured_runtime_v1":0.2727835524,"runtime_lift":1.4377415733,"key":["s120232779","s983584428"]}
{"user_id":"u134019875","problem_id":"p03796","language":"python","submission_id_v0":"s983655328","submission_id_v1":"s754374761","cpu_time_v0":231,"cpu_time_v1":36,"memory_v0":3984,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":84.42,"input":"import math\n\n\n\nn = int(eval(input()))\n\nprint((math.factorial(n) % (10 ** 9 + 7)))","target":"n = int(eval(input()))\n\np = 1\n\nfor i in range(1, n + 1):\n\n  p = p * i % (10 ** 9 + 7)\n\nprint(p)","code_v0_loc":4,"code_v1_loc":5,"code_v0_num_chars":73,"code_v1_num_chars":89,"code_v0_no_empty_lines":"import math\n\nn = int(eval(input()))\nprint((math.factorial(n) % (10**9 + 7)))\n","code_v1_no_empty_lines":"n = int(eval(input()))\np = 1\nfor i in range(1, n + 1):\n    p = p * i % (10**9 + 7)\nprint(p)\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["-import math","-","-print((math.factorial(n) % (10**9 + 7)))","+p = 1","+for i in range(1, n + 1):","+    p = p * i % (10**9 + 7)","+print(p)"],"diff_only_import_comment":false,"measured_runtime_v0":0.1349290106,"measured_runtime_v1":0.0997186968,"runtime_lift":1.3530964092,"key":["s983655328","s754374761"]}
{"user_id":"u852690916","problem_id":"p02883","language":"python","submission_id_v0":"s516001124","submission_id_v1":"s468582154","cpu_time_v0":510,"cpu_time_v1":354,"memory_v0":119500,"memory_v1":120848,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":30.59,"input":"N, K = list(map(int, input().split()))\n\nA = list(map(int, input().split()))\n\nF = list(map(int, input().split()))\n\n\n\nA.sort()\n\nF.sort(reverse=True)\n\n\n\n#\u7a4d\u3092x\u4ee5\u4e0b\u306b\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u4fee\u884c\u56de\u6570\n\ndef f(x):\n\n    r = 0\n\n    for i in range(N):\n\n        a, f = A[i], F[i]\n\n        m = a * f\n\n        if m > x:\n\n            r += (m - x + f - 1) \/\/ f\n\n    return r\n\n\n\nunder = -1\n\nr = 10**18\n\nwhile r - under > 1:\n\n    m = (under + r) \/\/ 2\n\n    if f(m) > K: under = m\n\n    else: r = m\n\nprint(r)","target":"# \u3067\u3064oO(YOU PLAY WITH THE CARDS YOU'RE DEALT..)\n\nimport sys\n\ndef main(N, K, A, F):\n\n    A.sort()\n\n    F.sort(reverse=True)\n\n\n\n    def f(x):\n\n        sy = 0\n\n        for a, f in zip(A, F):\n\n            m = a * f\n\n            if m > x:\n\n                sy += (m - x + f - 1) \/\/ f\n\n        return sy\n\n\n\n    under = -1\n\n    hi = 10**12 + 1\n\n    while hi - under > 1:\n\n        m = (hi + under) \/\/ 2\n\n        if f(m) <= K: hi = m\n\n        else: under = m\n\n    print(hi)\n\n\n\nif __name__ == '__main__':\n\n    input = sys.stdin.readline\n\n    N, K = list(map(int, input().split()))\n\n    *A, = list(map(int, input().split()))\n\n    *F, = list(map(int, input().split()))\n\n    main(N, K, A, F)\n","code_v0_loc":24,"code_v1_loc":28,"code_v0_num_chars":456,"code_v1_num_chars":659,"code_v0_no_empty_lines":"N, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\nF = list(map(int, input().split()))\nA.sort()\nF.sort(reverse=True)\n# \u7a4d\u3092x\u4ee5\u4e0b\u306b\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u4fee\u884c\u56de\u6570\ndef f(x):\n    r = 0\n    for i in range(N):\n        a, f = A[i], F[i]\n        m = a * f\n        if m > x:\n            r += (m - x + f - 1) \/\/ f\n    return r\n\n\nunder = -1\nr = 10**18\nwhile r - under > 1:\n    m = (under + r) \/\/ 2\n    if f(m) > K:\n        under = m\n    else:\n        r = m\nprint(r)\n","code_v1_no_empty_lines":"# \u3067\u3064oO(YOU PLAY WITH THE CARDS YOU'RE DEALT..)\nimport sys\n\n\ndef main(N, K, A, F):\n    A.sort()\n    F.sort(reverse=True)\n\n    def f(x):\n        sy = 0\n        for a, f in zip(A, F):\n            m = a * f\n            if m > x:\n                sy += (m - x + f - 1) \/\/ f\n        return sy\n\n    under = -1\n    hi = 10**12 + 1\n    while hi - under > 1:\n        m = (hi + under) \/\/ 2\n        if f(m) <= K:\n            hi = m\n        else:\n            under = m\n    print(hi)\n\n\nif __name__ == \"__main__\":\n    input = sys.stdin.readline\n    N, K = list(map(int, input().split()))\n    (*A,) = list(map(int, input().split()))\n    (*F,) = list(map(int, input().split()))\n    main(N, K, A, F)\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["-N, K = list(map(int, input().split()))","-A = list(map(int, input().split()))","-F = list(map(int, input().split()))","-A.sort()","-F.sort(reverse=True)","-# \u7a4d\u3092x\u4ee5\u4e0b\u306b\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u4fee\u884c\u56de\u6570","-def f(x):","-    r = 0","-    for i in range(N):","-        a, f = A[i], F[i]","-        m = a * f","-        if m > x:","-            r += (m - x + f - 1) \/\/ f","-    return r","+# \u3067\u3064oO(YOU PLAY WITH THE CARDS YOU'RE DEALT..)","+import sys","-under = -1","-r = 10**18","-while r - under > 1:","-    m = (under + r) \/\/ 2","-    if f(m) > K:","-        under = m","-    else:","-        r = m","-print(r)","+def main(N, K, A, F):","+    A.sort()","+    F.sort(reverse=True)","+","+    def f(x):","+        sy = 0","+        for a, f in zip(A, F):","+            m = a * f","+            if m > x:","+                sy += (m - x + f - 1) \/\/ f","+        return sy","+","+    under = -1","+    hi = 10**12 + 1","+    while hi - under > 1:","+        m = (hi + under) \/\/ 2","+        if f(m) <= K:","+            hi = m","+        else:","+            under = m","+    print(hi)","+","+","+if __name__ == \"__main__\":","+    input = sys.stdin.readline","+    N, K = list(map(int, input().split()))","+    (*A,) = list(map(int, input().split()))","+    (*F,) = list(map(int, input().split()))","+    main(N, K, A, F)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3640662682,"measured_runtime_v1":0.2871974897,"runtime_lift":1.2676512894,"key":["s516001124","s468582154"]}
{"user_id":"u597374218","problem_id":"p03035","language":"python","submission_id_v0":"s085289040","submission_id_v1":"s328762084","cpu_time_v0":19,"cpu_time_v1":17,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.53,"input":"a,b=list(map(int,input().split()))\n\nprint((b if 13<=a else b\/\/2 if 6<=a else 0))","target":"a,b=list(map(int,input().split()))\n\nprint((b if 12<a else b\/\/2 if 5<a else 0))","code_v0_loc":2,"code_v1_loc":2,"code_v0_num_chars":72,"code_v1_num_chars":70,"code_v0_no_empty_lines":"a, b = list(map(int, input().split()))\nprint((b if 13 <= a else b \/\/ 2 if 6 <= a else 0))\n","code_v1_no_empty_lines":"a, b = list(map(int, input().split()))\nprint((b if 12 < a else b \/\/ 2 if 5 < a else 0))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-print((b if 13 <= a else b \/\/ 2 if 6 <= a else 0))","+print((b if 12 < a else b \/\/ 2 if 5 < a else 0))"],"diff_only_import_comment":false,"measured_runtime_v0":0.1467108691,"measured_runtime_v1":0.0059958358,"runtime_lift":24.4687937071,"key":["s085289040","s328762084"]}
{"user_id":"u708556844","problem_id":"p02688","language":"python","submission_id_v0":"s393142342","submission_id_v1":"s768184755","cpu_time_v0":75,"cpu_time_v1":62,"memory_v0":72720,"memory_v1":67880,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.33,"input":"N,K=list(map(int,input().split()))\n\n\n\ncon = 0\n\nans = list(int() for _ in range(100000))\n\npre = 0\n\n\n\n\n\nfor _ in range(K):\n\n\n\n    D = int(eval(input()))\n\n    arr = list(map(int,input().split()))\n\n\n\n    for j in range(D):\n\n\n\n        ans[pre+j]=arr[j]\n\n\n\n    pre += D\n\n\n\n        \n\nfin = (N+1) - len(set(ans))\n\n\n\nprint(fin)","target":"N,K=list(map(int,input().split()))\n\n\n\ncon = 0\n\nans = list(int() for _ in range(10001))\n\npre = 0\n\n\n\n\n\nfor _ in range(K):\n\n\n\n    D = int(eval(input()))\n\n    arr = list(map(int,input().split()))\n\n\n\n    for j in range(D):\n\n\n\n        ans[pre+j]=arr[j]\n\n\n\n    pre += D\n\n\n\n        \n\nfin = (N+1) - len(set(ans))\n\n\n\nprint(fin)","code_v0_loc":22,"code_v1_loc":22,"code_v0_num_chars":306,"code_v1_num_chars":305,"code_v0_no_empty_lines":"N, K = list(map(int, input().split()))\ncon = 0\nans = list(int() for _ in range(100000))\npre = 0\nfor _ in range(K):\n    D = int(eval(input()))\n    arr = list(map(int, input().split()))\n    for j in range(D):\n        ans[pre + j] = arr[j]\n    pre += D\nfin = (N + 1) - len(set(ans))\nprint(fin)\n","code_v1_no_empty_lines":"N, K = list(map(int, input().split()))\ncon = 0\nans = list(int() for _ in range(10001))\npre = 0\nfor _ in range(K):\n    D = int(eval(input()))\n    arr = list(map(int, input().split()))\n    for j in range(D):\n        ans[pre + j] = arr[j]\n    pre += D\nfin = (N + 1) - len(set(ans))\nprint(fin)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-ans = list(int() for _ in range(100000))","+ans = list(int() for _ in range(10001))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3054342192,"measured_runtime_v1":0.2128900746,"runtime_lift":1.434703895,"key":["s393142342","s768184755"]}
{"user_id":"u186206732","problem_id":"p03162","language":"python","submission_id_v0":"s935693074","submission_id_v1":"s530388872","cpu_time_v0":399,"cpu_time_v1":352,"memory_v0":14996,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.78,"input":"def main():\n\n  n = int(eval(input()))\n\n  a = [0]\n\n  b = [0]\n\n  c = [0]\n\n\n\n  for i in range(n):\n\n      aa,bb,cc = list(map(int,input().split()))\n\n      a.append(max(b[i] + aa, c[i] + aa))\n\n      b.append(max(a[i] + bb, c[i] + bb))\n\n      c.append(max(a[i] + cc, b[i] + cc))\n\n\n\n  print((max(a[-1], b[-1], c[-1])))\n\n\n\nmain()","target":"def main():\n\n    n = int(eval(input()))\n\n    a = 0\n\n    b = 0\n\n    c = 0\n\n\n\n    for i in range(n):\n\n        aa,bb,cc = list(map(int,input().split()))\n\n        a,b,c = max(b,c)+aa, max(a,c)+bb, max(a,b)+cc\n\n\n\n    print((max(a,b,c)))\n\n\n\nmain()\n","code_v0_loc":15,"code_v1_loc":13,"code_v0_num_chars":307,"code_v1_num_chars":228,"code_v0_no_empty_lines":"def main():\n    n = int(eval(input()))\n    a = [0]\n    b = [0]\n    c = [0]\n    for i in range(n):\n        aa, bb, cc = list(map(int, input().split()))\n        a.append(max(b[i] + aa, c[i] + aa))\n        b.append(max(a[i] + bb, c[i] + bb))\n        c.append(max(a[i] + cc, b[i] + cc))\n    print((max(a[-1], b[-1], c[-1])))\n\n\nmain()\n","code_v1_no_empty_lines":"def main():\n    n = int(eval(input()))\n    a = 0\n    b = 0\n    c = 0\n    for i in range(n):\n        aa, bb, cc = list(map(int, input().split()))\n        a, b, c = max(b, c) + aa, max(a, c) + bb, max(a, b) + cc\n    print((max(a, b, c)))\n\n\nmain()\n","code_same":false,"relative_loc_diff_percent":13.3333333333,"diff":["-    a = [0]","-    b = [0]","-    c = [0]","+    a = 0","+    b = 0","+    c = 0","-        a.append(max(b[i] + aa, c[i] + aa))","-        b.append(max(a[i] + bb, c[i] + bb))","-        c.append(max(a[i] + cc, b[i] + cc))","-    print((max(a[-1], b[-1], c[-1])))","+        a, b, c = max(b, c) + aa, max(a, c) + bb, max(a, b) + cc","+    print((max(a, b, c)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2658671594,"measured_runtime_v1":0.1864644525,"runtime_lift":1.4258329445,"key":["s935693074","s530388872"]}
{"user_id":"u863442865","problem_id":"p03078","language":"python","submission_id_v0":"s321808897","submission_id_v1":"s575596303","cpu_time_v0":954,"cpu_time_v1":745,"memory_v0":139652,"memory_v1":105356,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":21.91,"input":"def main():\n\n    import sys\n\n    input = sys.stdin.readline\n\n    sys.setrecursionlimit(10**7)\n\n    from collections import Counter, deque\n\n    #from collections import defaultdict\n\n    from itertools import combinations, permutations, accumulate, groupby\n\n    #from itertools import product\n\n    from bisect import bisect_left,bisect_right\n\n    import heapq\n\n    from math import floor, ceil\n\n    #from operator import itemgetter\n\n\n\n    #inf = 10**17\n\n    #mod = 10**9 + 7\n\n\n\n    x,y,z,k = list(map(int, input().split()))\n\n    a = list(map(int, input().split()))\n\n    b = list(map(int, input().split()))\n\n    c = list(map(int, input().split()))\n\n    ab = []\n\n    for i in a:\n\n        for j in b:\n\n            ab.append(i+j)\n\n    ab.sort(reverse=1)\n\n    ab = ab[:k]\n\n    abc = []\n\n    for i in ab:\n\n        for j in c:\n\n            abc.append(i+j)\n\n    abc.sort(reverse=1)\n\n    for i in range(k):\n\n        print((abc[i]))\n\n\n\nif __name__ == '__main__':\n\n    main()","target":"#xyz\u306e\u5168\u901a\u308a\u8abf\u3079\u308b\u3068\u9593\u306b\u5408\u308f\u306a\u3044\n\n#\u307e\u305a\u554f\u984c\u3092\u5206\u3051\u3088\u3046\n\n#\u5148\u306bxy\u3060\u3051\u8003\u3048\u3066\u307f\u308b\n\n#xy\u306e\u548c\u3092\u3068\u3063\u3066\u304b\u3089\u305d\u308c\u3068z\u306e\u548c\u3092\u3068\u308b\u3068\u304d\n\n#xy\u306e\u548c\u306b\u304a\u3044\u3066k\u756a\u76ee\u4ee5\u964d\u306e\u5024\u3092\u4f7f\u3046\u3053\u3068\u306f\u7121\u3044\n\n#\n\n\n\ndef main():\n\n    import sys\n\n    input = sys.stdin.readline\n\n    sys.setrecursionlimit(10**7)\n\n    from collections import Counter, deque\n\n    #from collections import defaultdict\n\n    from itertools import combinations, permutations, accumulate, groupby\n\n    #from itertools import product\n\n    from bisect import bisect_left,bisect_right\n\n    import heapq\n\n    from math import floor, ceil\n\n    #from operator import itemgetter\n\n\n\n    #inf = 10**17\n\n    #mod = 10**9 + 7\n\n\n\n    x,y,z,k = list(map(int, input().split()))\n\n    a = list(map(int, input().split()))\n\n    b = list(map(int, input().split()))\n\n    c = list(map(int, input().split()))\n\n    a.sort(reverse=1)\n\n    b.sort(reverse=1)\n\n    c.sort(reverse=1)\n\n    abc = []\n\n    for i in range(x):\n\n        for j in range(y):\n\n            if i*j>k:\n\n                continue\n\n            for t in range(z):\n\n                if i*j*t>k:\n\n                    continue\n\n                abc.append(a[i]+b[j]+c[t])\n\n    abc.sort(reverse=1)\n\n    for i in range(k):\n\n        print((abc[i]))\n\n\n\nif __name__ == '__main__':\n\n    main()","code_v0_loc":36,"code_v1_loc":45,"code_v0_num_chars":954,"code_v1_num_chars":1172,"code_v0_no_empty_lines":"def main():\n    import sys\n\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**7)\n    from collections import Counter, deque\n\n    # from collections import defaultdict\n    from itertools import combinations, permutations, accumulate, groupby\n\n    # from itertools import product\n    from bisect import bisect_left, bisect_right\n    import heapq\n    from math import floor, ceil\n\n    # from operator import itemgetter\n    # inf = 10**17\n    # mod = 10**9 + 7\n    x, y, z, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    ab = []\n    for i in a:\n        for j in b:\n            ab.append(i + j)\n    ab.sort(reverse=1)\n    ab = ab[:k]\n    abc = []\n    for i in ab:\n        for j in c:\n            abc.append(i + j)\n    abc.sort(reverse=1)\n    for i in range(k):\n        print((abc[i]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"# xyz\u306e\u5168\u901a\u308a\u8abf\u3079\u308b\u3068\u9593\u306b\u5408\u308f\u306a\u3044\n# \u307e\u305a\u554f\u984c\u3092\u5206\u3051\u3088\u3046\n# \u5148\u306bxy\u3060\u3051\u8003\u3048\u3066\u307f\u308b\n# xy\u306e\u548c\u3092\u3068\u3063\u3066\u304b\u3089\u305d\u308c\u3068z\u306e\u548c\u3092\u3068\u308b\u3068\u304d\n# xy\u306e\u548c\u306b\u304a\u3044\u3066k\u756a\u76ee\u4ee5\u964d\u306e\u5024\u3092\u4f7f\u3046\u3053\u3068\u306f\u7121\u3044\n#\ndef main():\n    import sys\n\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**7)\n    from collections import Counter, deque\n\n    # from collections import defaultdict\n    from itertools import combinations, permutations, accumulate, groupby\n\n    # from itertools import product\n    from bisect import bisect_left, bisect_right\n    import heapq\n    from math import floor, ceil\n\n    # from operator import itemgetter\n    # inf = 10**17\n    # mod = 10**9 + 7\n    x, y, z, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    a.sort(reverse=1)\n    b.sort(reverse=1)\n    c.sort(reverse=1)\n    abc = []\n    for i in range(x):\n        for j in range(y):\n            if i * j > k:\n                continue\n            for t in range(z):\n                if i * j * t > k:\n                    continue\n                abc.append(a[i] + b[j] + c[t])\n    abc.sort(reverse=1)\n    for i in range(k):\n        print((abc[i]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["+# xyz\u306e\u5168\u901a\u308a\u8abf\u3079\u308b\u3068\u9593\u306b\u5408\u308f\u306a\u3044","+# \u307e\u305a\u554f\u984c\u3092\u5206\u3051\u3088\u3046","+# \u5148\u306bxy\u3060\u3051\u8003\u3048\u3066\u307f\u308b","+# xy\u306e\u548c\u3092\u3068\u3063\u3066\u304b\u3089\u305d\u308c\u3068z\u306e\u548c\u3092\u3068\u308b\u3068\u304d","+# xy\u306e\u548c\u306b\u304a\u3044\u3066k\u756a\u76ee\u4ee5\u964d\u306e\u5024\u3092\u4f7f\u3046\u3053\u3068\u306f\u7121\u3044","+#","-    ab = []","-    for i in a:","-        for j in b:","-            ab.append(i + j)","-    ab.sort(reverse=1)","-    ab = ab[:k]","+    a.sort(reverse=1)","+    b.sort(reverse=1)","+    c.sort(reverse=1)","-    for i in ab:","-        for j in c:","-            abc.append(i + j)","+    for i in range(x):","+        for j in range(y):","+            if i * j > k:","+                continue","+            for t in range(z):","+                if i * j * t > k:","+                    continue","+                abc.append(a[i] + b[j] + c[t])"],"diff_only_import_comment":false,"measured_runtime_v0":0.5108549283,"measured_runtime_v1":0.1529760139,"runtime_lift":3.3394446306,"key":["s321808897","s575596303"]}
{"user_id":"u150984829","problem_id":"p02414","language":"python","submission_id_v0":"s058277941","submission_id_v1":"s168687059","cpu_time_v0":180,"cpu_time_v1":130,"memory_v0":6264,"memory_v1":6796,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":27.78,"input":"import sys\n\ne=[list(map(int,e.split()))for e in sys.stdin]\n\nn=e[0][0]+1\n\nfor c in e[1:n]:\n\n t=''\n\n for l in zip(*e[n:]):t+=f'{sum(s*t for s,t in zip(c,l))} '\n\n print((t[:-1]))\n","target":"import sys\n\ne=[list(map(int,e.split()))for e in sys.stdin]\n\nn=e[0][0]+1\n\nt=''\n\nfor c in e[1:n]:\n\n for l in zip(*e[n:]):t+=f'{sum(s*t for s,t in zip(c,l))} '\n\n t=t[:-1]+'\\n'\n\nprint((t[:-1]))\n","code_v0_loc":7,"code_v1_loc":8,"code_v0_num_chars":174,"code_v1_num_chars":188,"code_v0_no_empty_lines":"import sys\n\ne = [list(map(int, e.split())) for e in sys.stdin]\nn = e[0][0] + 1\nfor c in e[1:n]:\n    t = \"\"\n    for l in zip(*e[n:]):\n        t += f\"{sum(s*t for s,t in zip(c,l))} \"\n    print((t[:-1]))\n","code_v1_no_empty_lines":"import sys\n\ne = [list(map(int, e.split())) for e in sys.stdin]\nn = e[0][0] + 1\nt = \"\"\nfor c in e[1:n]:\n    for l in zip(*e[n:]):\n        t += f\"{sum(s*t for s,t in zip(c,l))} \"\n    t = t[:-1] + \"\\n\"\nprint((t[:-1]))\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["+t = \"\"","-    t = \"\"","-    print((t[:-1]))","+    t = t[:-1] + \"\\n\"","+print((t[:-1]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2549450145,"measured_runtime_v1":0.0065752838,"runtime_lift":38.7732336991,"key":["s058277941","s168687059"]}
{"user_id":"u057109575","problem_id":"p02814","language":"python","submission_id_v0":"s505874222","submission_id_v1":"s539286615","cpu_time_v0":444,"cpu_time_v1":182,"memory_v0":96824,"memory_v1":96876,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":59.01,"input":"from functools import reduce\n\nfrom fractions import gcd\n\n\n\nN, M, *A = list(map(int, open(0).read().split()))\n\n\n\ndef lcm(x, y):\n\n    return x * y \/\/ gcd(x, y)\n\n\n\ndef sub_by_2(n):\n\n    cnt = 0\n\n    while n % 2 == 0:\n\n        n \/\/= 2\n\n        cnt += 1\n\n    return cnt\n\n\n\nlcm_2 = [sub_by_2(n \/\/ 2) for n in A]\n\nif all(lcm_2[0] == v for v in lcm_2):\n\n    num = reduce(lcm, [v \/\/ 2 for v in A])\n\n    res = M \/\/ num\n\n    print((res \/\/ 2 + res % 2))\n\nelse:\n\n    print((0))\n","target":"from math import gcd\n\nfrom functools import reduce\n\n\n\nN, M, *A = list(map(int, open(0).read().split()))\n\n\n\ndef lcm(x, y):\n\n    return x * y \/\/ gcd(x, y)\n\n\n\ndef lcm_list(numbers):\n\n    return reduce(lcm, numbers, 1)\n\n\n\ndef even_count(n):\n\n    res = 0\n\n    while n % 2 == 0:\n\n        res += 1\n\n        n \/\/= 2\n\n    return res\n\n\n\n\n\nx = [v \/\/ 2 for v in A]\n\nif all(even_count(v) == even_count(x[0]) for v in x):\n\n    num = lcm_list(x)\n\n    print((-(-(M \/\/ num) \/\/ 2)))\n\nelse:\n\n    print((0))\n\n\n","code_v0_loc":22,"code_v1_loc":26,"code_v0_num_chars":455,"code_v1_num_chars":480,"code_v0_no_empty_lines":"from functools import reduce\nfrom fractions import gcd\n\nN, M, *A = list(map(int, open(0).read().split()))\n\n\ndef lcm(x, y):\n    return x * y \/\/ gcd(x, y)\n\n\ndef sub_by_2(n):\n    cnt = 0\n    while n % 2 == 0:\n        n \/\/= 2\n        cnt += 1\n    return cnt\n\n\nlcm_2 = [sub_by_2(n \/\/ 2) for n in A]\nif all(lcm_2[0] == v for v in lcm_2):\n    num = reduce(lcm, [v \/\/ 2 for v in A])\n    res = M \/\/ num\n    print((res \/\/ 2 + res % 2))\nelse:\n    print((0))\n","code_v1_no_empty_lines":"from math import gcd\nfrom functools import reduce\n\nN, M, *A = list(map(int, open(0).read().split()))\n\n\ndef lcm(x, y):\n    return x * y \/\/ gcd(x, y)\n\n\ndef lcm_list(numbers):\n    return reduce(lcm, numbers, 1)\n\n\ndef even_count(n):\n    res = 0\n    while n % 2 == 0:\n        res += 1\n        n \/\/= 2\n    return res\n\n\nx = [v \/\/ 2 for v in A]\nif all(even_count(v) == even_count(x[0]) for v in x):\n    num = lcm_list(x)\n    print((-(-(M \/\/ num) \/\/ 2)))\nelse:\n    print((0))\n","code_same":false,"relative_loc_diff_percent":15.3846153846,"diff":["+from math import gcd","-from fractions import gcd","-def sub_by_2(n):","-    cnt = 0","-    while n % 2 == 0:","-        n \/\/= 2","-        cnt += 1","-    return cnt","+def lcm_list(numbers):","+    return reduce(lcm, numbers, 1)","-lcm_2 = [sub_by_2(n \/\/ 2) for n in A]","-if all(lcm_2[0] == v for v in lcm_2):","-    num = reduce(lcm, [v \/\/ 2 for v in A])","-    res = M \/\/ num","-    print((res \/\/ 2 + res % 2))","+def even_count(n):","+    res = 0","+    while n % 2 == 0:","+        res += 1","+        n \/\/= 2","+    return res","+","+","+x = [v \/\/ 2 for v in A]","+if all(even_count(v) == even_count(x[0]) for v in x):","+    num = lcm_list(x)","+    print((-(-(M \/\/ num) \/\/ 2)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.4227621694,"measured_runtime_v1":0.2989870732,"runtime_lift":1.4139814302,"key":["s505874222","s539286615"]}
{"user_id":"u576917603","problem_id":"p02886","language":"python","submission_id_v0":"s933480835","submission_id_v1":"s488301795","cpu_time_v0":163,"cpu_time_v1":18,"memory_v0":12424,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.96,"input":"n=int(eval(input()))\n\na=list(map(int,input().split()))\n\nimport itertools as it\n\nimport numpy as np\n\nal=list(it.combinations(a,2))\n\ntotal=0\n\nfor i in al:\n\n    total+=np.prod(i)\n\nprint(total)","target":"n=int(eval(input()))\n\na=list(map(int,input().split()))\n\nans=0\n\nfor i in range(n-1):\n\n    for j in range(i+1,n):\n\n        ans+=a[i]*a[j]\n\nprint(ans)","code_v0_loc":9,"code_v1_loc":7,"code_v0_num_chars":183,"code_v1_num_chars":141,"code_v0_no_empty_lines":"n = int(eval(input()))\na = list(map(int, input().split()))\nimport itertools as it\nimport numpy as np\n\nal = list(it.combinations(a, 2))\ntotal = 0\nfor i in al:\n    total += np.prod(i)\nprint(total)\n","code_v1_no_empty_lines":"n = int(eval(input()))\na = list(map(int, input().split()))\nans = 0\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        ans += a[i] * a[j]\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":22.2222222222,"diff":["-import itertools as it","-import numpy as np","-","-al = list(it.combinations(a, 2))","-total = 0","-for i in al:","-    total += np.prod(i)","-print(total)","+ans = 0","+for i in range(n - 1):","+    for j in range(i + 1, n):","+        ans += a[i] * a[j]","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.6349947588,"measured_runtime_v1":0.2197330449,"runtime_lift":7.4408232914,"key":["s933480835","s488301795"]}
{"user_id":"u453634104","problem_id":"p02552","language":"python","submission_id_v0":"s410377980","submission_id_v1":"s110616608","cpu_time_v0":126,"cpu_time_v1":24,"memory_v0":61640,"memory_v1":9128,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":80.95,"input":"x = int(eval(input()))\n\nif x == 0:\n\n  print((1))\n\nelse:\n\n  print((0))","target":"x = int(eval(input()))\n\nprint((x^1))\n","code_v0_loc":5,"code_v1_loc":2,"code_v0_num_chars":59,"code_v1_num_chars":29,"code_v0_no_empty_lines":"x = int(eval(input()))\nif x == 0:\n    print((1))\nelse:\n    print((0))\n","code_v1_no_empty_lines":"x = int(eval(input()))\nprint((x ^ 1))\n","code_same":false,"relative_loc_diff_percent":60.0,"diff":["-if x == 0:","-    print((1))","-else:","-    print((0))","+print((x ^ 1))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3271924098,"measured_runtime_v1":0.2133970539,"runtime_lift":1.5332564526,"key":["s410377980","s110616608"]}
{"user_id":"u102461423","problem_id":"p03325","language":"python","submission_id_v0":"s031225874","submission_id_v1":"s421873683","cpu_time_v0":349,"cpu_time_v1":154,"memory_v0":22780,"memory_v1":12668,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":55.87,"input":"import numpy as np\n\n\n\nN = int(eval(input()))\n\nA = np.array(input().split(),dtype=np.int32)\n\n\n\ndef ord(n):\n\n  cnt = 0\n\n  while not n&1:\n\n    n >>= 1\n\n    cnt += 1\n\n  return cnt\n\n\n\nnp_ord = np.frompyfunc(ord,1,1)\n\nanswer = np_ord(A).sum()\n\nprint(answer)","target":"import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nimport numpy as np\n\n\n\nN = int(readline())\n\nA = np.array(read().split(),np.int32)\n\n\n\nanswer = 0\n\nfor _ in range(32):\n\n    A = A[A%2 == 0]\n\n    answer += len(A)\n\n    A >>= 1\n\n\n\nprint(answer)","code_v0_loc":15,"code_v1_loc":17,"code_v0_num_chars":245,"code_v1_num_chars":310,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nA = np.array(input().split(), dtype=np.int32)\n\n\ndef ord(n):\n    cnt = 0\n    while not n & 1:\n        n >>= 1\n        cnt += 1\n    return cnt\n\n\nnp_ord = np.frompyfunc(ord, 1, 1)\nanswer = np_ord(A).sum()\nprint(answer)\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nimport numpy as np\n\nN = int(readline())\nA = np.array(read().split(), np.int32)\nanswer = 0\nfor _ in range(32):\n    A = A[A % 2 == 0]\n    answer += len(A)\n    A >>= 1\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":11.7647058824,"diff":["+import sys","+","+read = sys.stdin.buffer.read","+readline = sys.stdin.buffer.readline","+readlines = sys.stdin.buffer.readlines","-N = int(eval(input()))","-A = np.array(input().split(), dtype=np.int32)","-","-","-def ord(n):","-    cnt = 0","-    while not n & 1:","-        n >>= 1","-        cnt += 1","-    return cnt","-","-","-np_ord = np.frompyfunc(ord, 1, 1)","-answer = np_ord(A).sum()","+N = int(readline())","+A = np.array(read().split(), np.int32)","+answer = 0","+for _ in range(32):","+    A = A[A % 2 == 0]","+    answer += len(A)","+    A >>= 1"],"diff_only_import_comment":false,"measured_runtime_v0":2.014342514,"measured_runtime_v1":0.210192055,"runtime_lift":9.5833427865,"key":["s031225874","s421873683"]}
{"user_id":"u043236471","problem_id":"p02994","language":"python","submission_id_v0":"s517208919","submission_id_v1":"s465254734","cpu_time_v0":149,"cpu_time_v1":17,"memory_v0":12492,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.59,"input":"import numpy as np\n\n\n\nn,l = [int(x) for x in input().split()] \n\nx = np.arange(l,l+n)\n\ny = np.abs(x)\n\nx = np.delete(x, np.argmin(y))\n\nprint((np.sum(x)))","target":"N, L = list(map(int, input().split()))\n\napples = [i for i in range(L, L+N)]\n\napples_abs = [abs(i) for i in apples]\n\nmin_idx = apples_abs.index(min(apples_abs))\n\n\n\nprint((sum(apples) - apples[min_idx]))","code_v0_loc":7,"code_v1_loc":6,"code_v0_num_chars":149,"code_v1_num_chars":193,"code_v0_no_empty_lines":"import numpy as np\n\nn, l = [int(x) for x in input().split()]\nx = np.arange(l, l + n)\ny = np.abs(x)\nx = np.delete(x, np.argmin(y))\nprint((np.sum(x)))\n","code_v1_no_empty_lines":"N, L = list(map(int, input().split()))\napples = [i for i in range(L, L + N)]\napples_abs = [abs(i) for i in apples]\nmin_idx = apples_abs.index(min(apples_abs))\nprint((sum(apples) - apples[min_idx]))\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["-import numpy as np","-","-n, l = [int(x) for x in input().split()]","-x = np.arange(l, l + n)","-y = np.abs(x)","-x = np.delete(x, np.argmin(y))","-print((np.sum(x)))","+N, L = list(map(int, input().split()))","+apples = [i for i in range(L, L + N)]","+apples_abs = [abs(i) for i in apples]","+min_idx = apples_abs.index(min(apples_abs))","+print((sum(apples) - apples[min_idx]))"],"diff_only_import_comment":false,"measured_runtime_v0":1.748840265,"measured_runtime_v1":0.2910926256,"runtime_lift":6.0078480561,"key":["s517208919","s465254734"]}
{"user_id":"u079022693","problem_id":"p02792","language":"python","submission_id_v0":"s064765551","submission_id_v1":"s282052850","cpu_time_v0":289,"cpu_time_v1":146,"memory_v0":3064,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":49.48,"input":"N=int(eval(input()))\n\nC=[[0]*9  for i in range(9)]\n\ncount=0\n\n\n\nfor n in range(1,N+1):\n\n   if str(n)[-1]!=\"0\":\n\n      left=int(str(n)[0])-1\n\n      right=int(str(n)[-1])-1\n\n      C[left][right]+=1\n\n      \n\nfor i in range(1,10):\n\n   for j in range(1,10):\n\n      count+=C[i-1][j-1]*C[j-1][i-1]\n\n\n\nprint(count)","target":"from sys import stdin\n\ndef main():\n\n    #\u5165\u529b\n\n    readline=stdin.readline\n\n    N=int(readline())\n\n    d=dict()\n\n    for i in range(1,N+1):\n\n        i=str(i)\n\n        head=i[0]\n\n        tail=i[-1]\n\n        if tail==\"0\":\n\n            continue\n\n        if (head,tail) not in d:\n\n            d[(head,tail)]=1\n\n        else:\n\n            d[(head,tail)]+=1\n\n\n\n    ans=0\n\n    s=set()\n\n    for k in list(d.keys()):\n\n        m,l=k[0],k[1]\n\n        if (m,l) in s:\n\n            continue\n\n        if (l,m) in d:\n\n            ans+=d[(m,l)]*d[(l,m)]\n\n            if (m,l)!=(l,m):\n\n                ans+=d[(m,l)]*d[(l,m)]\n\n        s.add((m,l))\n\n        s.add((l,m))\n\n\n\n    print(ans)\n\n\n\nif __name__==\"__main__\":\n\n    main()","code_v0_loc":15,"code_v1_loc":34,"code_v0_num_chars":299,"code_v1_num_chars":700,"code_v0_no_empty_lines":"N = int(eval(input()))\nC = [[0] * 9 for i in range(9)]\ncount = 0\nfor n in range(1, N + 1):\n    if str(n)[-1] != \"0\":\n        left = int(str(n)[0]) - 1\n        right = int(str(n)[-1]) - 1\n        C[left][right] += 1\nfor i in range(1, 10):\n    for j in range(1, 10):\n        count += C[i - 1][j - 1] * C[j - 1][i - 1]\nprint(count)\n","code_v1_no_empty_lines":"from sys import stdin\n\n\ndef main():\n    # \u5165\u529b\n    readline = stdin.readline\n    N = int(readline())\n    d = dict()\n    for i in range(1, N + 1):\n        i = str(i)\n        head = i[0]\n        tail = i[-1]\n        if tail == \"0\":\n            continue\n        if (head, tail) not in d:\n            d[(head, tail)] = 1\n        else:\n            d[(head, tail)] += 1\n    ans = 0\n    s = set()\n    for k in list(d.keys()):\n        m, l = k[0], k[1]\n        if (m, l) in s:\n            continue\n        if (l, m) in d:\n            ans += d[(m, l)] * d[(l, m)]\n            if (m, l) != (l, m):\n                ans += d[(m, l)] * d[(l, m)]\n        s.add((m, l))\n        s.add((l, m))\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":55.8823529412,"diff":["-N = int(eval(input()))","-C = [[0] * 9 for i in range(9)]","-count = 0","-for n in range(1, N + 1):","-    if str(n)[-1] != \"0\":","-        left = int(str(n)[0]) - 1","-        right = int(str(n)[-1]) - 1","-        C[left][right] += 1","-for i in range(1, 10):","-    for j in range(1, 10):","-        count += C[i - 1][j - 1] * C[j - 1][i - 1]","-print(count)","+from sys import stdin","+","+","+def main():","+    # \u5165\u529b","+    readline = stdin.readline","+    N = int(readline())","+    d = dict()","+    for i in range(1, N + 1):","+        i = str(i)","+        head = i[0]","+        tail = i[-1]","+        if tail == \"0\":","+            continue","+        if (head, tail) not in d:","+            d[(head, tail)] = 1","+        else:","+            d[(head, tail)] += 1","+    ans = 0","+    s = set()","+    for k in list(d.keys()):","+        m, l = k[0], k[1]","+        if (m, l) in s:","+            continue","+        if (l, m) in d:","+            ans += d[(m, l)] * d[(l, m)]","+            if (m, l) != (l, m):","+                ans += d[(m, l)] * d[(l, m)]","+        s.add((m, l))","+        s.add((l, m))","+    print(ans)","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.3649349464,"measured_runtime_v1":0.2790334361,"runtime_lift":1.3078538236,"key":["s064765551","s282052850"]}
{"user_id":"u867069435","problem_id":"p03696","language":"python","submission_id_v0":"s841488788","submission_id_v1":"s312350323","cpu_time_v0":295,"cpu_time_v1":17,"memory_v0":20656,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":94.24,"input":"import numpy as np\n\nn = int(eval(input()))\n\ns = list(eval(input()))\n\nj = []\n\nnow = 0\n\nunclosen = 0\n\nopened = 0\n\nfor i in s:\n\n    if i == \")\":\n\n        now -= 1\n\n        if opened:\n\n            opened -= 1\n\n        else:\n\n            unclosen += 1\n\n    else:\n\n        now += 1\n\n        opened += 1\n\nj = np.array(j)\n\nprint((\"(\" * unclosen + \"\".join(s) + \")\" * opened))","target":"n = int(eval(input()))\n\ns = list(eval(input()))\n\nnow = 0\n\nunclosen = 0\n\nopened = 0\n\nfor i in s:\n\n    if i == \")\":\n\n        now -= 1\n\n        if opened:\n\n            opened -= 1\n\n        else:\n\n            unclosen += 1\n\n    else:\n\n        now += 1\n\n        opened += 1\n\nprint((\"(\" * unclosen + \"\".join(s) + \")\" * opened))","code_v0_loc":19,"code_v1_loc":16,"code_v0_num_chars":352,"code_v1_num_chars":307,"code_v0_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\ns = list(eval(input()))\nj = []\nnow = 0\nunclosen = 0\nopened = 0\nfor i in s:\n    if i == \")\":\n        now -= 1\n        if opened:\n            opened -= 1\n        else:\n            unclosen += 1\n    else:\n        now += 1\n        opened += 1\nj = np.array(j)\nprint((\"(\" * unclosen + \"\".join(s) + \")\" * opened))\n","code_v1_no_empty_lines":"n = int(eval(input()))\ns = list(eval(input()))\nnow = 0\nunclosen = 0\nopened = 0\nfor i in s:\n    if i == \")\":\n        now -= 1\n        if opened:\n            opened -= 1\n        else:\n            unclosen += 1\n    else:\n        now += 1\n        opened += 1\nprint((\"(\" * unclosen + \"\".join(s) + \")\" * opened))\n","code_same":false,"relative_loc_diff_percent":15.7894736842,"diff":["-import numpy as np","-","-j = []","-j = np.array(j)"],"diff_only_import_comment":false,"measured_runtime_v0":1.891548876,"measured_runtime_v1":0.2480743408,"runtime_lift":7.6249275508,"key":["s841488788","s312350323"]}
{"user_id":"u860002137","problem_id":"p03254","language":"python","submission_id_v0":"s707896844","submission_id_v1":"s627798423","cpu_time_v0":154,"cpu_time_v1":29,"memory_v0":12392,"memory_v1":9160,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":81.17,"input":"import numpy as np\n\nN, x = list(map(int, input().split()))\n\na = np.array(list(map(int, input().split())))\n\n\n\ncs = np.sort(a).cumsum()\n\n\n\nif cs[-1]<x:\n\n    print((N-1))\n\nelif cs[-1]==x:\n\n    print(N)\n\nelse:\n\n    print((np.where(cs<=x)[0].shape[0]))","target":"from bisect import bisect_right\n\nfrom itertools import accumulate\n\n\n\nn, x = list(map(int, input().split()))\n\narr = list(map(int, input().split()))\n\n\n\narr.sort()\n\narr = list(accumulate(arr))\n\n\n\n\n\nhappy = bisect_right(arr, x)\n\n\n\nif happy == n:\n\n    if arr[-1] != x:\n\n        happy -= 1\n\n\n\nprint(happy)","code_v0_loc":12,"code_v1_loc":17,"code_v0_num_chars":237,"code_v1_num_chars":293,"code_v0_no_empty_lines":"import numpy as np\n\nN, x = list(map(int, input().split()))\na = np.array(list(map(int, input().split())))\ncs = np.sort(a).cumsum()\nif cs[-1] < x:\n    print((N - 1))\nelif cs[-1] == x:\n    print(N)\nelse:\n    print((np.where(cs <= x)[0].shape[0]))\n","code_v1_no_empty_lines":"from bisect import bisect_right\nfrom itertools import accumulate\n\nn, x = list(map(int, input().split()))\narr = list(map(int, input().split()))\narr.sort()\narr = list(accumulate(arr))\nhappy = bisect_right(arr, x)\nif happy == n:\n    if arr[-1] != x:\n        happy -= 1\nprint(happy)\n","code_same":false,"relative_loc_diff_percent":29.4117647059,"diff":["-import numpy as np","+from bisect import bisect_right","+from itertools import accumulate","-N, x = list(map(int, input().split()))","-a = np.array(list(map(int, input().split())))","-cs = np.sort(a).cumsum()","-if cs[-1] < x:","-    print((N - 1))","-elif cs[-1] == x:","-    print(N)","-else:","-    print((np.where(cs <= x)[0].shape[0]))","+n, x = list(map(int, input().split()))","+arr = list(map(int, input().split()))","+arr.sort()","+arr = list(accumulate(arr))","+happy = bisect_right(arr, x)","+if happy == n:","+    if arr[-1] != x:","+        happy -= 1","+print(happy)"],"diff_only_import_comment":false,"measured_runtime_v0":2.70895349,"measured_runtime_v1":0.3632414298,"runtime_lift":7.4577216905,"key":["s707896844","s627798423"]}
{"user_id":"u353919145","problem_id":"p02959","language":"python","submission_id_v0":"s078643579","submission_id_v1":"s464947070","cpu_time_v0":144,"cpu_time_v1":114,"memory_v0":24244,"memory_v1":97748,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":20.83,"input":"from sys import stdin,stdout\n\n\n\nif __name__==\"__main__\":\n\n    n=int(stdin.readline())\n\n\n\n    a=[int(x) for x in stdin.readline().split()]\n\n    b=[int(x) for x in stdin.readline().split()]\n\n\n\n    cnt=0\n\n\n\n    for i in range(n):\n\n        if(a[i]>=b[i]):\n\n            cnt+=b[i]\n\n        else:\n\n            cnt+=a[i]\n\n            d=b[i]-a[i]\n\n            cnt+=min(a[i+1],d)\n\n            if(d>a[i+1]):\n\n                a[i+1]=0\n\n            else: a[i+1]-=d\n\n            \n\n    stdout.write(str(cnt)+\"\\n\")\n","target":"n = int(eval(input()))\n\nA = list(map(int, input().split()))\n\nB = list(map(int, input().split()))\n\na1 = sum(A)\n\nfor i in range(n):\n\n  b = B[i]\n\n  if A[i] >= b:A[i] -= b\n\n  else:\n\n    if A[i+1]+A[i] >= b:\n\n      A[i+1] = A[i+1]+A[i]-b\n\n      A[i] = 0\n\n    else:A[i], A[i+1] = 0, 0\n\na2 = sum(A)\n\nprint((a1-a2))","code_v0_loc":22,"code_v1_loc":14,"code_v0_num_chars":499,"code_v1_num_chars":299,"code_v0_no_empty_lines":"from sys import stdin, stdout\n\nif __name__ == \"__main__\":\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    b = [int(x) for x in stdin.readline().split()]\n    cnt = 0\n    for i in range(n):\n        if a[i] >= b[i]:\n            cnt += b[i]\n        else:\n            cnt += a[i]\n            d = b[i] - a[i]\n            cnt += min(a[i + 1], d)\n            if d > a[i + 1]:\n                a[i + 1] = 0\n            else:\n                a[i + 1] -= d\n    stdout.write(str(cnt) + \"\\n\")\n","code_v1_no_empty_lines":"n = int(eval(input()))\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\na1 = sum(A)\nfor i in range(n):\n    b = B[i]\n    if A[i] >= b:\n        A[i] -= b\n    else:\n        if A[i + 1] + A[i] >= b:\n            A[i + 1] = A[i + 1] + A[i] - b\n            A[i] = 0\n        else:\n            A[i], A[i + 1] = 0, 0\na2 = sum(A)\nprint((a1 - a2))\n","code_same":false,"relative_loc_diff_percent":36.3636363636,"diff":["-from sys import stdin, stdout","-","-if __name__ == \"__main__\":","-    n = int(stdin.readline())","-    a = [int(x) for x in stdin.readline().split()]","-    b = [int(x) for x in stdin.readline().split()]","-    cnt = 0","-    for i in range(n):","-        if a[i] >= b[i]:","-            cnt += b[i]","+n = int(eval(input()))","+A = list(map(int, input().split()))","+B = list(map(int, input().split()))","+a1 = sum(A)","+for i in range(n):","+    b = B[i]","+    if A[i] >= b:","+        A[i] -= b","+    else:","+        if A[i + 1] + A[i] >= b:","+            A[i + 1] = A[i + 1] + A[i] - b","+            A[i] = 0","-            cnt += a[i]","-            d = b[i] - a[i]","-            cnt += min(a[i + 1], d)","-            if d > a[i + 1]:","-                a[i + 1] = 0","-            else:","-                a[i + 1] -= d","-    stdout.write(str(cnt) + \"\\n\")","+            A[i], A[i + 1] = 0, 0","+a2 = sum(A)","+print((a1 - a2))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2530250838,"measured_runtime_v1":0.0949857178,"runtime_lift":2.6638224113,"key":["s078643579","s464947070"]}
{"user_id":"u127499732","problem_id":"p03608","language":"python","submission_id_v0":"s266235653","submission_id_v1":"s503227515","cpu_time_v0":246,"cpu_time_v1":190,"memory_v0":83588,"memory_v1":83656,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":22.76,"input":"def main():\n\n    from itertools import permutations\n\n\n\n    n, m, r, *x = list(map(int, open(0).read().split()))\n\n    to = x[:r]\n\n\n\n    dis = [[float(\"Inf\")] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n\n        dis[i][i] = 0\n\n\n\n    for a, b, c in zip(*[iter(x[r:])] * 3):\n\n        dis[a][b] = c\n\n        dis[b][a] = c\n\n\n\n    for k in range(1, n + 1):\n\n        for i in range(1, n + 1):\n\n            for j in range(1, n + 1):\n\n                dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])\n\n\n\n    ans = float(\"Inf\")\n\n    for p in permutations(to):\n\n        tmp = 0\n\n        nw = p[0]\n\n        for nx in p[1:]:\n\n            tmp += dis[nw][nx]\n\n            nw = nx\n\n\n\n        ans = min(ans, tmp)\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"def main():\n\n    from itertools import permutations\n\n\n\n    n, m, r, *x = list(map(int, open(0).read().split()))\n\n    to = x[:r]\n\n\n\n    dis = [[10 ** 8] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n\n        dis[i][i] = 0\n\n\n\n    for a, b, c in zip(*[iter(x[r:])] * 3):\n\n        dis[a][b] = c\n\n        dis[b][a] = c\n\n\n\n    for k in range(1, n + 1):\n\n        for i in range(1, n + 1):\n\n            for j in range(1, n + 1):\n\n                dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])\n\n\n\n    ans = 10 ** 8\n\n    for p in permutations(to):\n\n        tmp = 0\n\n        nw = p[0]\n\n        for nx in p[1:]:\n\n            tmp += dis[nw][nx]\n\n            nw = nx\n\n\n\n        ans = min(ans, tmp)\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":34,"code_v1_loc":34,"code_v0_num_chars":771,"code_v1_num_chars":761,"code_v0_no_empty_lines":"def main():\n    from itertools import permutations\n\n    n, m, r, *x = list(map(int, open(0).read().split()))\n    to = x[:r]\n    dis = [[float(\"Inf\")] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dis[i][i] = 0\n    for a, b, c in zip(*[iter(x[r:])] * 3):\n        dis[a][b] = c\n        dis[b][a] = c\n    for k in range(1, n + 1):\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])\n    ans = float(\"Inf\")\n    for p in permutations(to):\n        tmp = 0\n        nw = p[0]\n        for nx in p[1:]:\n            tmp += dis[nw][nx]\n            nw = nx\n        ans = min(ans, tmp)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def main():\n    from itertools import permutations\n\n    n, m, r, *x = list(map(int, open(0).read().split()))\n    to = x[:r]\n    dis = [[10**8] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dis[i][i] = 0\n    for a, b, c in zip(*[iter(x[r:])] * 3):\n        dis[a][b] = c\n        dis[b][a] = c\n    for k in range(1, n + 1):\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j])\n    ans = 10**8\n    for p in permutations(to):\n        tmp = 0\n        nw = p[0]\n        for nx in p[1:]:\n            tmp += dis[nw][nx]\n            nw = nx\n        ans = min(ans, tmp)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    dis = [[float(\"Inf\")] * (n + 1) for _ in range(n + 1)]","+    dis = [[10**8] * (n + 1) for _ in range(n + 1)]","-    ans = float(\"Inf\")","+    ans = 10**8"],"diff_only_import_comment":false,"measured_runtime_v0":0.3828251469,"measured_runtime_v1":0.1865792952,"runtime_lift":2.0518093745,"key":["s266235653","s503227515"]}
{"user_id":"u732159958","problem_id":"p03416","language":"python","submission_id_v0":"s130057185","submission_id_v1":"s637640023","cpu_time_v0":68,"cpu_time_v1":50,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":26.47,"input":"counter = 0\n\nc = list(map(int, input().split(' ')))\n\nfor i in range(c[0], c[1] + 1):\n\n  if str(i)[0] != str(i)[4]:\n\n    continue\n\n  if str(i)[1] != str(i)[3]:\n\n    continue\n\n  counter += 1\n\n\n\nprint(counter)","target":"a = list(map(int, input().split()))\n\ncounter = 0\n\nfor i in range(a[0], a[1] + 1):\n\n  stri = str(i)\n\n  if (stri[0] == stri[4] and stri[1] == stri[3]):\n\n    counter += 1\n\n    \n\nprint(counter)","code_v0_loc":10,"code_v1_loc":8,"code_v0_num_chars":206,"code_v1_num_chars":189,"code_v0_no_empty_lines":"counter = 0\nc = list(map(int, input().split(\" \")))\nfor i in range(c[0], c[1] + 1):\n    if str(i)[0] != str(i)[4]:\n        continue\n    if str(i)[1] != str(i)[3]:\n        continue\n    counter += 1\nprint(counter)\n","code_v1_no_empty_lines":"a = list(map(int, input().split()))\ncounter = 0\nfor i in range(a[0], a[1] + 1):\n    stri = str(i)\n    if stri[0] == stri[4] and stri[1] == stri[3]:\n        counter += 1\nprint(counter)\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["+a = list(map(int, input().split()))","-c = list(map(int, input().split(\" \")))","-for i in range(c[0], c[1] + 1):","-    if str(i)[0] != str(i)[4]:","-        continue","-    if str(i)[1] != str(i)[3]:","-        continue","-    counter += 1","+for i in range(a[0], a[1] + 1):","+    stri = str(i)","+    if stri[0] == stri[4] and stri[1] == stri[3]:","+        counter += 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.442622024,"measured_runtime_v1":0.3161446974,"runtime_lift":1.4000615148,"key":["s130057185","s637640023"]}
{"user_id":"u089230684","problem_id":"p03038","language":"python","submission_id_v0":"s817533229","submission_id_v1":"s906455398","cpu_time_v0":826,"cpu_time_v1":662,"memory_v0":82456,"memory_v1":25196,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":19.85,"input":"I=lambda:list(map(int,input().split()))\n\nn,m=I()\n\na=I()\n\na.sort(reverse=True)\n\nqq=[I() for i in range(m)]\n\nqq.sort(key=lambda x:x[1],reverse=True)\n\nans=0\n\nfor x,y in qq:\n\n    for j in range(x):\n\n        if not a:\n\n            break\n\n        aa=a.pop()\n\n        ans+=max(aa,y)\n\nans+=sum(a)\n\nprint(ans)\n\n        ","target":"I=lambda : list(map(int,input().split()))\n\nn,m = I()\n\nl=I();s=sum(l);l.sort();d=[]\n\nfor _ in range(m):\n\n    b,c=I()\n\n    d.append([c,b])\n\np=s=0    \n\nfor i in sorted(d,reverse=True):\n\n    while i[1]:\n\n        if p>=n or l[p]>=i[0]:\n\n            break\n\n        i[1]-=1\n\n        s+=i[0]\n\n        p+=1\n\n    if p>=n:\n\n        break\n\ns+=sum(l[p:])\n\nprint(s)","code_v0_loc":16,"code_v1_loc":18,"code_v0_num_chars":310,"code_v1_num_chars":351,"code_v0_no_empty_lines":"I = lambda: list(map(int, input().split()))\nn, m = I()\na = I()\na.sort(reverse=True)\nqq = [I() for i in range(m)]\nqq.sort(key=lambda x: x[1], reverse=True)\nans = 0\nfor x, y in qq:\n    for j in range(x):\n        if not a:\n            break\n        aa = a.pop()\n        ans += max(aa, y)\nans += sum(a)\nprint(ans)\n","code_v1_no_empty_lines":"I = lambda: list(map(int, input().split()))\nn, m = I()\nl = I()\ns = sum(l)\nl.sort()\nd = []\nfor _ in range(m):\n    b, c = I()\n    d.append([c, b])\np = s = 0\nfor i in sorted(d, reverse=True):\n    while i[1]:\n        if p >= n or l[p] >= i[0]:\n            break\n        i[1] -= 1\n        s += i[0]\n        p += 1\n    if p >= n:\n        break\ns += sum(l[p:])\nprint(s)\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["-a = I()","-a.sort(reverse=True)","-qq = [I() for i in range(m)]","-qq.sort(key=lambda x: x[1], reverse=True)","-ans = 0","-for x, y in qq:","-    for j in range(x):","-        if not a:","+l = I()","+s = sum(l)","+l.sort()","+d = []","+for _ in range(m):","+    b, c = I()","+    d.append([c, b])","+p = s = 0","+for i in sorted(d, reverse=True):","+    while i[1]:","+        if p >= n or l[p] >= i[0]:","-        aa = a.pop()","-        ans += max(aa, y)","-ans += sum(a)","-print(ans)","+        i[1] -= 1","+        s += i[0]","+        p += 1","+    if p >= n:","+        break","+s += sum(l[p:])","+print(s)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3493785617,"measured_runtime_v1":0.2761461248,"runtime_lift":1.2651945122,"key":["s817533229","s906455398"]}
{"user_id":"u127499732","problem_id":"p02780","language":"python","submission_id_v0":"s032064078","submission_id_v1":"s836088645","cpu_time_v0":401,"cpu_time_v1":159,"memory_v0":32556,"memory_v1":23616,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":60.35,"input":"import numpy as np\n\nn,k=list(map(int,input().split()))\n\nexp=tuple([(int(x)+1)\/2 for x in input().split()])\n\nl=np.cumsum(exp)\n\n\n\nans=l[k-1]\n\nfor i in range(0,n-k):\n\n  x=l[i+k]-l[i]\n\n  ans=max(ans,x)\n\nprint(ans)","target":"def main():\n\n    from itertools import accumulate\n\n    n, k = list(map(int, input().split()))\n\n    *exp, = [(int(x) + 1) \/ 2 for x in input().split()]\n\n    l = accumulate(exp)\n\n    l = list(l)\n\n    ans = l[k - 1]\n\n    for i in range(0, n - k):\n\n        x = l[i + k] - l[i]\n\n        ans = max(ans, x)\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":10,"code_v1_loc":15,"code_v0_num_chars":207,"code_v1_num_chars":359,"code_v0_no_empty_lines":"import numpy as np\n\nn, k = list(map(int, input().split()))\nexp = tuple([(int(x) + 1) \/ 2 for x in input().split()])\nl = np.cumsum(exp)\nans = l[k - 1]\nfor i in range(0, n - k):\n    x = l[i + k] - l[i]\n    ans = max(ans, x)\nprint(ans)\n","code_v1_no_empty_lines":"def main():\n    from itertools import accumulate\n\n    n, k = list(map(int, input().split()))\n    (*exp,) = [(int(x) + 1) \/ 2 for x in input().split()]\n    l = accumulate(exp)\n    l = list(l)\n    ans = l[k - 1]\n    for i in range(0, n - k):\n        x = l[i + k] - l[i]\n        ans = max(ans, x)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-import numpy as np","+def main():","+    from itertools import accumulate","-n, k = list(map(int, input().split()))","-exp = tuple([(int(x) + 1) \/ 2 for x in input().split()])","-l = np.cumsum(exp)","-ans = l[k - 1]","-for i in range(0, n - k):","-    x = l[i + k] - l[i]","-    ans = max(ans, x)","-print(ans)","+    n, k = list(map(int, input().split()))","+    (*exp,) = [(int(x) + 1) \/ 2 for x in input().split()]","+    l = accumulate(exp)","+    l = list(l)","+    ans = l[k - 1]","+    for i in range(0, n - k):","+        x = l[i + k] - l[i]","+        ans = max(ans, x)","+    print(ans)","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":1.2954093719,"measured_runtime_v1":0.1973411753,"runtime_lift":6.5643136548,"key":["s032064078","s836088645"]}
{"user_id":"u202406075","problem_id":"p03494","language":"python","submission_id_v0":"s829872247","submission_id_v1":"s319951709","cpu_time_v0":148,"cpu_time_v1":18,"memory_v0":12396,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.84,"input":"import numpy as np\n\nimport sys\n\n\n\nn = int(eval(input()))\n\na = np.array(list(map(int, input().split())))\n\n\n\ncnt = 1\n\n\n\nif np.any(a%2==1):\n\n    print((0))\n\n    sys.exit()\n\n\n\nwhile True:\n\n    a2 = a % 2**cnt\n\n    if np.all(a2==0):\n\n        cnt += 1\n\n        continue\n\n    else:\n\n        print((cnt-1))\n\n        break","target":"N = int(eval(input()))\n\na = list(map(int,input().split()))\n\nans = 0\n\nwhile all(A%2 == 0 for A in a):\n\n\ta = [i\/2 for i in a ]\n\n\tans += 1\n\nprint(ans)\n","code_v0_loc":20,"code_v1_loc":7,"code_v0_num_chars":303,"code_v1_num_chars":142,"code_v0_no_empty_lines":"import numpy as np\nimport sys\n\nn = int(eval(input()))\na = np.array(list(map(int, input().split())))\ncnt = 1\nif np.any(a % 2 == 1):\n    print((0))\n    sys.exit()\nwhile True:\n    a2 = a % 2**cnt\n    if np.all(a2 == 0):\n        cnt += 1\n        continue\n    else:\n        print((cnt - 1))\n        break\n","code_v1_no_empty_lines":"N = int(eval(input()))\na = list(map(int, input().split()))\nans = 0\nwhile all(A % 2 == 0 for A in a):\n    a = [i \/ 2 for i in a]\n    ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":65.0,"diff":["-import numpy as np","-import sys","-","-n = int(eval(input()))","-a = np.array(list(map(int, input().split())))","-cnt = 1","-if np.any(a % 2 == 1):","-    print((0))","-    sys.exit()","-while True:","-    a2 = a % 2**cnt","-    if np.all(a2 == 0):","-        cnt += 1","-        continue","-    else:","-        print((cnt - 1))","-        break","+N = int(eval(input()))","+a = list(map(int, input().split()))","+ans = 0","+while all(A % 2 == 0 for A in a):","+    a = [i \/ 2 for i in a]","+    ans += 1","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.8370131412,"measured_runtime_v1":0.3072203367,"runtime_lift":5.9794646441,"key":["s829872247","s319951709"]}
{"user_id":"u062691227","problem_id":"p03723","language":"python","submission_id_v0":"s522426109","submission_id_v1":"s794063832","cpu_time_v0":61,"cpu_time_v1":29,"memory_v0":61360,"memory_v1":9172,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":52.46,"input":"a,b,c=list(map(int,input().split()))\n\ne=(a-b)|(b-c)\n\nprint((bool(e|(a|b|c)%2)*(e^~-e).bit_length()-1))","target":"a,b,c=list(map(int,input().split()))\n\ne=(a-b)|(b-c)\n\nprint((bool(e|b%2)*(e^~-e).bit_length()-1))","code_v0_loc":3,"code_v1_loc":3,"code_v0_num_chars":94,"code_v1_num_chars":88,"code_v0_no_empty_lines":"a, b, c = list(map(int, input().split()))\ne = (a - b) | (b - c)\nprint((bool(e | (a | b | c) % 2) * (e ^ ~-e).bit_length() - 1))\n","code_v1_no_empty_lines":"a, b, c = list(map(int, input().split()))\ne = (a - b) | (b - c)\nprint((bool(e | b % 2) * (e ^ ~-e).bit_length() - 1))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-print((bool(e | (a | b | c) % 2) * (e ^ ~-e).bit_length() - 1))","+print((bool(e | b % 2) * (e ^ ~-e).bit_length() - 1))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2914967289,"measured_runtime_v1":0.0905496902,"runtime_lift":3.2191907898,"key":["s522426109","s794063832"]}
{"user_id":"u531220228","problem_id":"p02970","language":"python","submission_id_v0":"s388408889","submission_id_v1":"s284238115","cpu_time_v0":150,"cpu_time_v1":21,"memory_v0":12392,"memory_v1":3316,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":86.0,"input":"import numpy as np\n\nN, D = list(map(int, input().split()))\n\nprint((int(np.ceil(N\/(2*D+1)))))","target":"N, D = list(map(int, input().split()))\n\nimport math\n\nprint((math.ceil(N\/(2*D+1))))","code_v0_loc":3,"code_v1_loc":3,"code_v0_num_chars":84,"code_v1_num_chars":74,"code_v0_no_empty_lines":"import numpy as np\n\nN, D = list(map(int, input().split()))\nprint((int(np.ceil(N \/ (2 * D + 1)))))\n","code_v1_no_empty_lines":"N, D = list(map(int, input().split()))\nimport math\n\nprint((math.ceil(N \/ (2 * D + 1))))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-import numpy as np","+N, D = list(map(int, input().split()))","+import math","-N, D = list(map(int, input().split()))","-print((int(np.ceil(N \/ (2 * D + 1)))))","+print((math.ceil(N \/ (2 * D + 1))))"],"diff_only_import_comment":false,"measured_runtime_v0":2.2725535502,"measured_runtime_v1":0.3538572516,"runtime_lift":6.4222325235,"key":["s388408889","s284238115"]}
{"user_id":"u298297089","problem_id":"p03037","language":"python","submission_id_v0":"s092044899","submission_id_v1":"s679810914","cpu_time_v0":352,"cpu_time_v1":284,"memory_v0":4760,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":19.32,"input":"N, M =list(map(int, input().split()))\n\nL = [0 for i in range(N+1)]\n\nR = [0 for i in range(N+1)]\n\nfor i in range(M):\n\n    l,r = list(map(int, input().split()))\n\n    L[l] += 1\n\n    R[r] += 1\n\ncnt = 0\n\ntmp = 0\n\nfor i in range(N+1):\n\n    tmp += L[i]\n\n    if tmp == M:\n\n        cnt += 1\n\n    tmp -= R[i]\n\nprint(cnt)\n","target":"n,m = list(map(int, input().split()))\n\nll = 1\n\nrr = n\n\nfor i in range(m):\n\n    l,r = list(map(int,input().split()))\n\n    if l > ll:\n\n        ll = l\n\n    if r < rr:\n\n        rr = r\n\nprint((max(rr - ll + 1, 0)))\n","code_v0_loc":15,"code_v1_loc":10,"code_v0_num_chars":299,"code_v1_num_chars":196,"code_v0_no_empty_lines":"N, M = list(map(int, input().split()))\nL = [0 for i in range(N + 1)]\nR = [0 for i in range(N + 1)]\nfor i in range(M):\n    l, r = list(map(int, input().split()))\n    L[l] += 1\n    R[r] += 1\ncnt = 0\ntmp = 0\nfor i in range(N + 1):\n    tmp += L[i]\n    if tmp == M:\n        cnt += 1\n    tmp -= R[i]\nprint(cnt)\n","code_v1_no_empty_lines":"n, m = list(map(int, input().split()))\nll = 1\nrr = n\nfor i in range(m):\n    l, r = list(map(int, input().split()))\n    if l > ll:\n        ll = l\n    if r < rr:\n        rr = r\nprint((max(rr - ll + 1, 0)))\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-N, M = list(map(int, input().split()))","-L = [0 for i in range(N + 1)]","-R = [0 for i in range(N + 1)]","-for i in range(M):","+n, m = list(map(int, input().split()))","+ll = 1","+rr = n","+for i in range(m):","-    L[l] += 1","-    R[r] += 1","-cnt = 0","-tmp = 0","-for i in range(N + 1):","-    tmp += L[i]","-    if tmp == M:","-        cnt += 1","-    tmp -= R[i]","-print(cnt)","+    if l > ll:","+        ll = l","+    if r < rr:","+        rr = r","+print((max(rr - ll + 1, 0)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2886495962,"measured_runtime_v1":0.2151292083,"runtime_lift":1.3417499114,"key":["s092044899","s679810914"]}
{"user_id":"u652057333","problem_id":"p03457","language":"python","submission_id_v0":"s981534291","submission_id_v1":"s633478372","cpu_time_v0":1075,"cpu_time_v1":501,"memory_v0":32460,"memory_v1":3572,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":53.4,"input":"import numpy as np\n\n\n\nn = int(eval(input()))\n\ninput_X = [[int(i) for i in input().split()] for i in range(n)]\n\nX = np.array(input_X)\n\n\n\npre_t = 0\n\npre_x = 0\n\npre_y = 0\n\nfor i in range(n):\n\n    x_move = abs(X[i][1] - pre_x)\n\n    y_move = abs(X[i][2] - pre_y)\n\n    xy_sum = x_move + y_move\n\n    spend_time = X[i][0]-pre_t\n\n    if xy_sum%2 == spend_time%2 and spend_time >= xy_sum:\n\n        pre_t = X[i][0]\n\n        pre_x = X[i][1]\n\n        pre_y = X[i][2]\n\n        if i+1 == n:\n\n            print('Yes')\n\n        else:\n\n            continue\n\n    else:\n\n        print('No')\n\n        break","target":"# C\n\nimport copy\n\nn = int(eval(input()))\n\npreX = [0,0,0]\n\nans = True\n\nfor i in range(n):\n\n    curX = list(map(int, input().split()))\n\n    dt = curX[0] - preX[0]\n\n    dx = abs(curX[1] - preX[1])\n\n    dy = abs(curX[2] - preX[2])\n\n    if dt < dx + dy  or (dt % 2) != ((dx + dy) % 2):\n\n        ans = False\n\n    preX = copy.copy(curX)\n\nif ans:\n\n    print('Yes')\n\nelse:\n\n    print('No')","code_v0_loc":25,"code_v1_loc":17,"code_v0_num_chars":579,"code_v1_num_chars":374,"code_v0_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\ninput_X = [[int(i) for i in input().split()] for i in range(n)]\nX = np.array(input_X)\npre_t = 0\npre_x = 0\npre_y = 0\nfor i in range(n):\n    x_move = abs(X[i][1] - pre_x)\n    y_move = abs(X[i][2] - pre_y)\n    xy_sum = x_move + y_move\n    spend_time = X[i][0] - pre_t\n    if xy_sum % 2 == spend_time % 2 and spend_time >= xy_sum:\n        pre_t = X[i][0]\n        pre_x = X[i][1]\n        pre_y = X[i][2]\n        if i + 1 == n:\n            print(\"Yes\")\n        else:\n            continue\n    else:\n        print(\"No\")\n        break\n","code_v1_no_empty_lines":"# C\nimport copy\n\nn = int(eval(input()))\npreX = [0, 0, 0]\nans = True\nfor i in range(n):\n    curX = list(map(int, input().split()))\n    dt = curX[0] - preX[0]\n    dx = abs(curX[1] - preX[1])\n    dy = abs(curX[2] - preX[2])\n    if dt < dx + dy or (dt % 2) != ((dx + dy) % 2):\n        ans = False\n    preX = copy.copy(curX)\nif ans:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","code_same":false,"relative_loc_diff_percent":32.0,"diff":["-import numpy as np","+# C","+import copy","-input_X = [[int(i) for i in input().split()] for i in range(n)]","-X = np.array(input_X)","-pre_t = 0","-pre_x = 0","-pre_y = 0","+preX = [0, 0, 0]","+ans = True","-    x_move = abs(X[i][1] - pre_x)","-    y_move = abs(X[i][2] - pre_y)","-    xy_sum = x_move + y_move","-    spend_time = X[i][0] - pre_t","-    if xy_sum % 2 == spend_time % 2 and spend_time >= xy_sum:","-        pre_t = X[i][0]","-        pre_x = X[i][1]","-        pre_y = X[i][2]","-        if i + 1 == n:","-            print(\"Yes\")","-        else:","-            continue","-    else:","-        print(\"No\")","-        break","+    curX = list(map(int, input().split()))","+    dt = curX[0] - preX[0]","+    dx = abs(curX[1] - preX[1])","+    dy = abs(curX[2] - preX[2])","+    if dt < dx + dy or (dt % 2) != ((dx + dy) % 2):","+        ans = False","+    preX = copy.copy(curX)","+if ans:","+    print(\"Yes\")","+else:","+    print(\"No\")"],"diff_only_import_comment":false,"measured_runtime_v0":1.2549288661,"measured_runtime_v1":0.2172089093,"runtime_lift":5.7775202237,"key":["s981534291","s633478372"]}
{"user_id":"u075012704","problem_id":"p03558","language":"python","submission_id_v0":"s239051528","submission_id_v1":"s690298448","cpu_time_v0":622,"cpu_time_v1":294,"memory_v0":102192,"memory_v1":35324,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":52.73,"input":"from collections import deque\n\nK = int(eval(input()))\n\nG = [[] for i in range(K)]\n\n\n\nfor n in range(K):\n\n    G[n].append([(n + 1) % K, 1])\n\n    G[n].append([(10 * n) % K, 0])\n\n\n\nque = deque([[1, 1]])\n\ndist = [float('inf')] * K\n\n\n\nwhile que:\n\n    node, cost = que.pop()\n\n    dist[node] = min(cost, dist[node])\n\n    for e, e_cost in G[node]:\n\n        if dist[e] != float('inf'):\n\n            continue\n\n\n\n        if e_cost == 0:\n\n            que.append([e, cost + 0])\n\n\n\n        if e_cost == 1:\n\n            que.appendleft([e, cost + 1])\n\n\n\nprint((dist[0]))\n","target":"from collections import deque\n\nK = int(eval(input()))\n\nG = [[] for i in range(K)]\n\nfor i in range(K):\n\n    G[i].append(((10 * i) % K, 0))\n\n    G[i].append(((i + 1) % K, 1))\n\n\n\ndist = [float('inf')] * K\n\ndist[1] = 1\n\nque = deque()\n\nque.append(1)\n\n\n\nwhile que:\n\n    n = que.pop()\n\n    for v, c in G[n]:\n\n        if dist[v] > dist[n] + c:\n\n            dist[v] = dist[n] + c\n\n            if c == 0:\n\n                que.append(v)\n\n            else:\n\n                que.appendleft(v)\n\n\n\nprint((dist[0]))\n","code_v0_loc":25,"code_v1_loc":23,"code_v0_num_chars":547,"code_v1_num_chars":492,"code_v0_no_empty_lines":"from collections import deque\n\nK = int(eval(input()))\nG = [[] for i in range(K)]\nfor n in range(K):\n    G[n].append([(n + 1) % K, 1])\n    G[n].append([(10 * n) % K, 0])\nque = deque([[1, 1]])\ndist = [float(\"inf\")] * K\nwhile que:\n    node, cost = que.pop()\n    dist[node] = min(cost, dist[node])\n    for e, e_cost in G[node]:\n        if dist[e] != float(\"inf\"):\n            continue\n        if e_cost == 0:\n            que.append([e, cost + 0])\n        if e_cost == 1:\n            que.appendleft([e, cost + 1])\nprint((dist[0]))\n","code_v1_no_empty_lines":"from collections import deque\n\nK = int(eval(input()))\nG = [[] for i in range(K)]\nfor i in range(K):\n    G[i].append(((10 * i) % K, 0))\n    G[i].append(((i + 1) % K, 1))\ndist = [float(\"inf\")] * K\ndist[1] = 1\nque = deque()\nque.append(1)\nwhile que:\n    n = que.pop()\n    for v, c in G[n]:\n        if dist[v] > dist[n] + c:\n            dist[v] = dist[n] + c\n            if c == 0:\n                que.append(v)\n            else:\n                que.appendleft(v)\nprint((dist[0]))\n","code_same":false,"relative_loc_diff_percent":8.0,"diff":["-for n in range(K):","-    G[n].append([(n + 1) % K, 1])","-    G[n].append([(10 * n) % K, 0])","-que = deque([[1, 1]])","+for i in range(K):","+    G[i].append(((10 * i) % K, 0))","+    G[i].append(((i + 1) % K, 1))","+dist[1] = 1","+que = deque()","+que.append(1)","-    node, cost = que.pop()","-    dist[node] = min(cost, dist[node])","-    for e, e_cost in G[node]:","-        if dist[e] != float(\"inf\"):","-            continue","-        if e_cost == 0:","-            que.append([e, cost + 0])","-        if e_cost == 1:","-            que.appendleft([e, cost + 1])","+    n = que.pop()","+    for v, c in G[n]:","+        if dist[v] > dist[n] + c:","+            dist[v] = dist[n] + c","+            if c == 0:","+                que.append(v)","+            else:","+                que.appendleft(v)"],"diff_only_import_comment":false,"measured_runtime_v0":0.7363213913,"measured_runtime_v1":0.4714232118,"runtime_lift":1.5619116176,"key":["s239051528","s690298448"]}
{"user_id":"u305366205","problem_id":"p03307","language":"python","submission_id_v0":"s023207655","submission_id_v1":"s158622460","cpu_time_v0":36,"cpu_time_v1":17,"memory_v0":5176,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":52.78,"input":"import fractions\n\n\n\n\n\ndef lcm(x, y):\n\n    return (x * y) \/\/ fractions.gcd(x, y)\n\n\n\n\n\nN = int(eval(input()))\n\nprint((lcm(N, 2)))","target":"N = int(eval(input()))\n\nif N % 2 == 0:\n\n    print(N)\n\nelse:\n\n    print((2 * N))","code_v0_loc":9,"code_v1_loc":5,"code_v0_num_chars":119,"code_v1_num_chars":71,"code_v0_no_empty_lines":"import fractions\n\n\ndef lcm(x, y):\n    return (x * y) \/\/ fractions.gcd(x, y)\n\n\nN = int(eval(input()))\nprint((lcm(N, 2)))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nif N % 2 == 0:\n    print(N)\nelse:\n    print((2 * N))\n","code_same":false,"relative_loc_diff_percent":44.4444444444,"diff":["-import fractions","-","-","-def lcm(x, y):","-    return (x * y) \/\/ fractions.gcd(x, y)","-","-","-print((lcm(N, 2)))","+if N % 2 == 0:","+    print(N)","+else:","+    print((2 * N))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2764545197,"measured_runtime_v1":0.1953277736,"runtime_lift":1.4153364608,"key":["s023207655","s158622460"]}
{"user_id":"u379692329","problem_id":"p03720","language":"python","submission_id_v0":"s591924545","submission_id_v1":"s922681456","cpu_time_v0":155,"cpu_time_v1":17,"memory_v0":12452,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":89.03,"input":"import numpy as np\n\n\n\nN, M = [int(x) for x in input().split()]\n\nL = [[int (y) for y in input().split()] for _ in range(M)]\n\nL = sum(L, [])\n\n\n\nfor i in np.arange(1, N+1):\n\n    print((L.count(i)))","target":"N, M = [int(x) for x in input().split()]\n\nL = [[int (y) for y in input().split()] for _ in range(M)]\n\nL = sum(L, [])\n\n\n\nfor i in range(1, N+1):\n\n    print((L.count(i)))","code_v0_loc":8,"code_v1_loc":6,"code_v0_num_chars":192,"code_v1_num_chars":166,"code_v0_no_empty_lines":"import numpy as np\n\nN, M = [int(x) for x in input().split()]\nL = [[int(y) for y in input().split()] for _ in range(M)]\nL = sum(L, [])\nfor i in np.arange(1, N + 1):\n    print((L.count(i)))\n","code_v1_no_empty_lines":"N, M = [int(x) for x in input().split()]\nL = [[int(y) for y in input().split()] for _ in range(M)]\nL = sum(L, [])\nfor i in range(1, N + 1):\n    print((L.count(i)))\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-import numpy as np","-","-for i in np.arange(1, N + 1):","+for i in range(1, N + 1):"],"diff_only_import_comment":false,"measured_runtime_v0":1.7429071844,"measured_runtime_v1":0.246149132,"runtime_lift":7.08069604,"key":["s591924545","s922681456"]}
{"user_id":"u638456847","problem_id":"p02881","language":"python","submission_id_v0":"s727719500","submission_id_v1":"s621896362","cpu_time_v0":169,"cpu_time_v1":115,"memory_v0":29028,"memory_v1":3464,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":31.95,"input":"import numpy as np\n\n\n\ndef main():\n\n    N = int(eval(input()))\n\n\n\n    INF = 10**6 + 100\n\n\n\n    x = np.arange(1,INF,dtype=np.int64)\n\n    div = x[N % x == 0]\n\n    #print(div)\n\n    #print(N \/\/ div)\n\n    \n\n    ans = (div + N\/\/div).min() - 2\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"import sys\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\n\n\nfrom math import sqrt\n\n\n\ndef divisor_enumeration(n):\n\n    div = []\n\n    for i in range(1, int(sqrt(n))+1):\n\n        if n % i == 0:\n\n            if n \/\/ i != i:\n\n                div.append((i, n \/\/ i))\n\n            else:\n\n                div.append((i, i))\n\n        \n\n    return div\n\n\n\n\n\ndef main():\n\n    N = int(readline())\n\n\n\n    d = divisor_enumeration(N)\n\n    \n\n    ans = 10**15\n\n    for x, y in d:\n\n        ans = min(ans, x + y - 2)\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":18,"code_v1_loc":33,"code_v0_num_chars":290,"code_v1_num_chars":600,"code_v0_no_empty_lines":"import numpy as np\n\n\ndef main():\n    N = int(eval(input()))\n    INF = 10**6 + 100\n    x = np.arange(1, INF, dtype=np.int64)\n    div = x[N % x == 0]\n    # print(div)\n    # print(N \/\/ div)\n    ans = (div + N \/\/ div).min() - 2\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nfrom math import sqrt\n\n\ndef divisor_enumeration(n):\n    div = []\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if n \/\/ i != i:\n                div.append((i, n \/\/ i))\n            else:\n                div.append((i, i))\n    return div\n\n\ndef main():\n    N = int(readline())\n    d = divisor_enumeration(N)\n    ans = 10**15\n    for x, y in d:\n        ans = min(ans, x + y - 2)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":45.4545454545,"diff":["-import numpy as np","+import sys","+","+read = sys.stdin.read","+readline = sys.stdin.readline","+readlines = sys.stdin.readlines","+from math import sqrt","+","+","+def divisor_enumeration(n):","+    div = []","+    for i in range(1, int(sqrt(n)) + 1):","+        if n % i == 0:","+            if n \/\/ i != i:","+                div.append((i, n \/\/ i))","+            else:","+                div.append((i, i))","+    return div","-    N = int(eval(input()))","-    INF = 10**6 + 100","-    x = np.arange(1, INF, dtype=np.int64)","-    div = x[N % x == 0]","-    # print(div)","-    # print(N \/\/ div)","-    ans = (div + N \/\/ div).min() - 2","+    N = int(readline())","+    d = divisor_enumeration(N)","+    ans = 10**15","+    for x, y in d:","+        ans = min(ans, x + y - 2)"],"diff_only_import_comment":false,"measured_runtime_v0":1.9439773376,"measured_runtime_v1":0.2817540879,"runtime_lift":6.8995532659,"key":["s727719500","s621896362"]}
{"user_id":"u507456172","problem_id":"p02555","language":"python","submission_id_v0":"s532831472","submission_id_v1":"s789265811","cpu_time_v0":123,"cpu_time_v1":31,"memory_v0":9160,"memory_v1":9152,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":74.8,"input":"from math import factorial as fac\n\n\n\nS = int(eval(input()))\n\nans = 0\n\n\n\nif S == 1 or S == 2:\n\n  print((0))\n\nelif S == 3:\n\n  print((1))\n\nelse:\n\n  for k in range(1,S):\n\n    if S-2*k-1 >= 0 and S-3*k >= 0:\n\n      ans += fac(S-2*k-1)\/\/(fac(k-1)*fac(S-3*k))\n\n  print((ans%1000000007))","target":"S = int(eval(input()))\n\n\n\nif S == 1 or S ==2:\n\n  print((0))\n\nelif S == 3 or S == 4 or S == 5:\n\n  print((1))\n\nelse:\n\n  #\u521d\u671f\u5316\n\n  dp = [0]*S\n\n  dp[2] = 1\n\n  dp[3] = 1\n\n  dp[4] = 1\n\n  dp_S = 0\n\n  #dp\n\n  for i in range(5,S):\n\n    dp_S += dp[i-3] \n\n    dp[i] = 1+dp_S\n\n\n\n  print((dp[S-1]%1000000007))","code_v0_loc":14,"code_v1_loc":19,"code_v0_num_chars":267,"code_v1_num_chars":281,"code_v0_no_empty_lines":"from math import factorial as fac\n\nS = int(eval(input()))\nans = 0\nif S == 1 or S == 2:\n    print((0))\nelif S == 3:\n    print((1))\nelse:\n    for k in range(1, S):\n        if S - 2 * k - 1 >= 0 and S - 3 * k >= 0:\n            ans += fac(S - 2 * k - 1) \/\/ (fac(k - 1) * fac(S - 3 * k))\n    print((ans % 1000000007))\n","code_v1_no_empty_lines":"S = int(eval(input()))\nif S == 1 or S == 2:\n    print((0))\nelif S == 3 or S == 4 or S == 5:\n    print((1))\nelse:\n    # \u521d\u671f\u5316\n    dp = [0] * S\n    dp[2] = 1\n    dp[3] = 1\n    dp[4] = 1\n    dp_S = 0\n    # dp\n    for i in range(5, S):\n        dp_S += dp[i - 3]\n        dp[i] = 1 + dp_S\n    print((dp[S - 1] % 1000000007))\n","code_same":false,"relative_loc_diff_percent":26.3157894737,"diff":["-from math import factorial as fac","-","-ans = 0","-elif S == 3:","+elif S == 3 or S == 4 or S == 5:","-    for k in range(1, S):","-        if S - 2 * k - 1 >= 0 and S - 3 * k >= 0:","-            ans += fac(S - 2 * k - 1) \/\/ (fac(k - 1) * fac(S - 3 * k))","-    print((ans % 1000000007))","+    # \u521d\u671f\u5316","+    dp = [0] * S","+    dp[2] = 1","+    dp[3] = 1","+    dp[4] = 1","+    dp_S = 0","+    # dp","+    for i in range(5, S):","+        dp_S += dp[i - 3]","+        dp[i] = 1 + dp_S","+    print((dp[S - 1] % 1000000007))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3404159594,"measured_runtime_v1":0.2477156413,"runtime_lift":1.3742206895,"key":["s532831472","s789265811"]}
{"user_id":"u439396449","problem_id":"p03287","language":"python","submission_id_v0":"s936062710","submission_id_v1":"s930018564","cpu_time_v0":270,"cpu_time_v1":121,"memory_v0":27356,"memory_v1":16208,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":55.19,"input":"from collections import defaultdict\n\n\n\nfrom scipy.misc import comb\n\n\n\nN, M = list(map(int, input().split()))\n\nA = [int(x) for x in input().split()]\n\n\n\nB = [0] * N\n\nB[0] = A[0]\n\nfor i in range(1, N):\n\n    B[i] = B[i - 1] + A[i]\n\nB = [0] + B\n\n\n\nc = defaultdict(int)\n\nfor i in range(N + 1):\n\n    c[B[i] % M] += 1\n\n\n\nans = 0\n\nfor k, v in list(c.items()):\n\n    if v >= 2:\n\n        ans += comb(v, 2, exact=True)\n\nprint(ans)","target":"from collections import defaultdict\n\n\n\nN, M = list(map(int, input().split()))\n\nA = [int(x) for x in input().split()]\n\n\n\nB = [0] * N\n\nB[0] = A[0]\n\nfor i in range(1, N):\n\n    B[i] = B[i - 1] + A[i]\n\nB = [0] + B\n\n\n\nc = defaultdict(int)\n\nfor i in range(N + 1):\n\n    c[B[i] % M] += 1\n\n\n\nans = 0\n\nfor k, v in list(c.items()):\n\n    if v >= 2:\n\n        ans += v * (v - 1) \/\/ 2\n\nprint(ans)","code_v0_loc":22,"code_v1_loc":20,"code_v0_num_chars":405,"code_v1_num_chars":368,"code_v0_no_empty_lines":"from collections import defaultdict\nfrom scipy.misc import comb\n\nN, M = list(map(int, input().split()))\nA = [int(x) for x in input().split()]\nB = [0] * N\nB[0] = A[0]\nfor i in range(1, N):\n    B[i] = B[i - 1] + A[i]\nB = [0] + B\nc = defaultdict(int)\nfor i in range(N + 1):\n    c[B[i] % M] += 1\nans = 0\nfor k, v in list(c.items()):\n    if v >= 2:\n        ans += comb(v, 2, exact=True)\nprint(ans)\n","code_v1_no_empty_lines":"from collections import defaultdict\n\nN, M = list(map(int, input().split()))\nA = [int(x) for x in input().split()]\nB = [0] * N\nB[0] = A[0]\nfor i in range(1, N):\n    B[i] = B[i - 1] + A[i]\nB = [0] + B\nc = defaultdict(int)\nfor i in range(N + 1):\n    c[B[i] % M] += 1\nans = 0\nfor k, v in list(c.items()):\n    if v >= 2:\n        ans += v * (v - 1) \/\/ 2\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":9.0909090909,"diff":["-from scipy.misc import comb","-        ans += comb(v, 2, exact=True)","+        ans += v * (v - 1) \/\/ 2"],"diff_only_import_comment":false,"measured_runtime_v0":1.3683824704,"measured_runtime_v1":0.2000572271,"runtime_lift":6.8399551963,"key":["s936062710","s930018564"]}
{"user_id":"u279493135","problem_id":"p02555","language":"python","submission_id_v0":"s706729835","submission_id_v1":"s005580579","cpu_time_v0":319,"cpu_time_v1":39,"memory_v0":10348,"memory_v1":11860,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.77,"input":"import sys, re\n\nfrom collections import deque, defaultdict, Counter\n\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians, gcd\n\nfrom itertools import accumulate, permutations, combinations, product, groupby, combinations_with_replacement\n\nfrom operator import itemgetter, mul\n\nfrom copy import deepcopy\n\nfrom string import ascii_lowercase, ascii_uppercase, digits\n\nfrom bisect import bisect, bisect_left\n\nfrom heapq import heappush, heappop\n\nfrom functools import reduce, lru_cache\n\ndef input(): return sys.stdin.readline().strip()\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(): return list(map(int, input().split()))\n\ndef ZIP(n): return list(zip(*(MAP() for _ in range(n))))\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = float('inf')\n\nmod = 10 ** 9 + 7\n\n\n\nS = INT()\n\n\n\n@lru_cache(maxsize=None)\n\ndef rec(x):\n\n    if x == 0: return 1\n\n\n\n    ret = 0\n\n    for i in range(x-2):\n\n        ret += rec(i)\n\n        ret %= mod\n\n    return ret\n\n\n\nprint((rec(S)))\n","target":"import sys, re\n\nfrom collections import deque, defaultdict, Counter\n\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians, gcd\n\nfrom itertools import accumulate, permutations, combinations, product, groupby, combinations_with_replacement\n\nfrom operator import itemgetter, mul\n\nfrom copy import deepcopy\n\nfrom string import ascii_lowercase, ascii_uppercase, digits\n\nfrom bisect import bisect, bisect_left\n\nfrom heapq import heappush, heappop\n\nfrom functools import reduce, lru_cache\n\ndef input(): return sys.stdin.readline().strip()\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(): return list(map(int, input().split()))\n\ndef ZIP(n): return list(zip(*(MAP() for _ in range(n))))\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = float('inf')\n\nmod = 10 ** 9 + 7\n\n\n\nS = INT()\n\n\n\n@lru_cache(maxsize=None)\n\ndef rec(x):\n\n    if x == 0: return 1\n\n\n\n    ret = 0\n\n    if x >= 3:\n\n        return (rec(x-1)+rec(x-3))%mod\n\n    else:\n\n        return 0\n\n\n\nprint((rec(S)))\n","code_v0_loc":32,"code_v1_loc":32,"code_v0_num_chars":996,"code_v1_num_chars":996,"code_v0_no_empty_lines":"import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians, gcd\nfrom itertools import (\n    accumulate,\n    permutations,\n    combinations,\n    product,\n    groupby,\n    combinations_with_replacement,\n)\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom heapq import heappush, heappop\nfrom functools import reduce, lru_cache\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef INT():\n    return int(eval(input()))\n\n\ndef MAP():\n    return list(map(int, input().split()))\n\n\ndef LIST():\n    return list(map(int, input().split()))\n\n\ndef ZIP(n):\n    return list(zip(*(MAP() for _ in range(n))))\n\n\nsys.setrecursionlimit(10**9)\nINF = float(\"inf\")\nmod = 10**9 + 7\nS = INT()\n\n\n@lru_cache(maxsize=None)\ndef rec(x):\n    if x == 0:\n        return 1\n    ret = 0\n    for i in range(x - 2):\n        ret += rec(i)\n        ret %= mod\n    return ret\n\n\nprint((rec(S)))\n","code_v1_no_empty_lines":"import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians, gcd\nfrom itertools import (\n    accumulate,\n    permutations,\n    combinations,\n    product,\n    groupby,\n    combinations_with_replacement,\n)\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom heapq import heappush, heappop\nfrom functools import reduce, lru_cache\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef INT():\n    return int(eval(input()))\n\n\ndef MAP():\n    return list(map(int, input().split()))\n\n\ndef LIST():\n    return list(map(int, input().split()))\n\n\ndef ZIP(n):\n    return list(zip(*(MAP() for _ in range(n))))\n\n\nsys.setrecursionlimit(10**9)\nINF = float(\"inf\")\nmod = 10**9 + 7\nS = INT()\n\n\n@lru_cache(maxsize=None)\ndef rec(x):\n    if x == 0:\n        return 1\n    ret = 0\n    if x >= 3:\n        return (rec(x - 1) + rec(x - 3)) % mod\n    else:\n        return 0\n\n\nprint((rec(S)))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    for i in range(x - 2):","-        ret += rec(i)","-        ret %= mod","-    return ret","+    if x >= 3:","+        return (rec(x - 1) + rec(x - 3)) % mod","+    else:","+        return 0"],"diff_only_import_comment":false,"measured_runtime_v0":0.4423550682,"measured_runtime_v1":0.2103828435,"runtime_lift":2.1026194952,"key":["s706729835","s005580579"]}
{"user_id":"u143173995","problem_id":"p03250","language":"python","submission_id_v0":"s114284602","submission_id_v1":"s442028856","cpu_time_v0":276,"cpu_time_v1":17,"memory_v0":17964,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":93.84,"input":"# \u30a4\u30f3\u30dd\u30fc\u30c8\n\nimport numpy as np\n\n# A,B,C\u306e\u5024\u306e\u7372\u5f97\n\nnum = list(map(int, input().split()))\n\n# num\u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u309210\u500d\n\nnum[num.index(max(num))] = max(num) * 10\n\n# np\u3067\u8981\u7d20\u306e\u548c\u3092\u8a08\u7b97\u3057\u3001\u51fa\u529b\n\nprint((np.sum(num)))","target":"# A,B,C\u306e\u5024\u306e\u7372\u5f97\n\nnum = list(map(int, input().split()))\n\n# num\u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u309210\u500d\n\nnum[num.index(max(num))] *= 10\n\n# np\u3067\u8981\u7d20\u306e\u548c\u3092\u8a08\u7b97\u3057\u3001\u51fa\u529b\n\nprint((sum(num)))\n","code_v0_loc":8,"code_v1_loc":6,"code_v0_num_chars":178,"code_v1_num_chars":137,"code_v0_no_empty_lines":"# \u30a4\u30f3\u30dd\u30fc\u30c8\nimport numpy as np\n\n# A,B,C\u306e\u5024\u306e\u7372\u5f97\nnum = list(map(int, input().split()))\n# num\u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u309210\u500d\nnum[num.index(max(num))] = max(num) * 10\n# np\u3067\u8981\u7d20\u306e\u548c\u3092\u8a08\u7b97\u3057\u3001\u51fa\u529b\nprint((np.sum(num)))\n","code_v1_no_empty_lines":"# A,B,C\u306e\u5024\u306e\u7372\u5f97\nnum = list(map(int, input().split()))\n# num\u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u309210\u500d\nnum[num.index(max(num))] *= 10\n# np\u3067\u8981\u7d20\u306e\u548c\u3092\u8a08\u7b97\u3057\u3001\u51fa\u529b\nprint((sum(num)))\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-# \u30a4\u30f3\u30dd\u30fc\u30c8","-import numpy as np","-","-num[num.index(max(num))] = max(num) * 10","+num[num.index(max(num))] *= 10","-print((np.sum(num)))","+print((sum(num)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3555554001,"measured_runtime_v1":0.1939001415,"runtime_lift":6.990997478,"key":["s114284602","s442028856"]}
{"user_id":"u254871849","problem_id":"p03037","language":"python","submission_id_v0":"s133611442","submission_id_v1":"s023877292","cpu_time_v0":105,"cpu_time_v1":71,"memory_v0":25076,"memory_v1":25076,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":32.38,"input":"import sys\n\n\n\nn, m, *lr = list(map(int, sys.stdin.read().split()))\n\nlr = list(zip(*[iter(lr)] * 2))\n\n\n\ndef main():\n\n    cnt = [0] * (n + 1)\n\n    for l, r in lr:\n\n        cnt[l-1] += 1\n\n        cnt[r] -= 1\n\n    \n\n    for i in range(n):\n\n        cnt[i+1] += cnt[i]\n\n    \n\n    res = 0\n\n    for i in range(n):\n\n        res += (cnt[i] == m) & 1\n\n    \n\n    return res\n\n\n\nif __name__ == '__main__':\n\n    ans = main()\n\n    print(ans)","target":"import sys\n\n\n\nn, m, *lr = list(map(int, sys.stdin.read().split()))\n\nl, r = lr[::2], lr[1::2]\n\n\n\ndef main():\n\n    ans = max(min(r) - max(l) + 1, 0)\n\n    return ans\n\n\n\nif __name__ == '__main__':\n\n    ans = main()\n\n    print(ans)","code_v0_loc":23,"code_v1_loc":12,"code_v0_num_chars":413,"code_v1_num_chars":220,"code_v0_no_empty_lines":"import sys\n\nn, m, *lr = list(map(int, sys.stdin.read().split()))\nlr = list(zip(*[iter(lr)] * 2))\n\n\ndef main():\n    cnt = [0] * (n + 1)\n    for l, r in lr:\n        cnt[l - 1] += 1\n        cnt[r] -= 1\n    for i in range(n):\n        cnt[i + 1] += cnt[i]\n    res = 0\n    for i in range(n):\n        res += (cnt[i] == m) & 1\n    return res\n\n\nif __name__ == \"__main__\":\n    ans = main()\n    print(ans)\n","code_v1_no_empty_lines":"import sys\n\nn, m, *lr = list(map(int, sys.stdin.read().split()))\nl, r = lr[::2], lr[1::2]\n\n\ndef main():\n    ans = max(min(r) - max(l) + 1, 0)\n    return ans\n\n\nif __name__ == \"__main__\":\n    ans = main()\n    print(ans)\n","code_same":false,"relative_loc_diff_percent":47.8260869565,"diff":["-lr = list(zip(*[iter(lr)] * 2))","+l, r = lr[::2], lr[1::2]","-    cnt = [0] * (n + 1)","-    for l, r in lr:","-        cnt[l - 1] += 1","-        cnt[r] -= 1","-    for i in range(n):","-        cnt[i + 1] += cnt[i]","-    res = 0","-    for i in range(n):","-        res += (cnt[i] == m) & 1","-    return res","+    ans = max(min(r) - max(l) + 1, 0)","+    return ans"],"diff_only_import_comment":false,"measured_runtime_v0":0.3223134096,"measured_runtime_v1":0.2034767451,"runtime_lift":1.5840306928,"key":["s133611442","s023877292"]}
{"user_id":"u633068244","problem_id":"p01438","language":"python","submission_id_v0":"s057521298","submission_id_v1":"s672157071","cpu_time_v0":350,"cpu_time_v1":160,"memory_v0":16636,"memory_v1":11468,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":54.29,"input":"from collections import defaultdict\n\nwhile 1:\n\n    n = int(input())\n\n    if n == 0: break\n\n    L = [0]*n\n\n    D = [0]*n\n\n    for man in range(n):\n\n        m,l = list(map(int,input().split()))\n\n        L[man] = l\n\n        t = 0\n\n        for date in range(m):\n\n            s,e = list(map(int,input().split()))\n\n            for s in range(s-6,e-6):\n\n                t |= 1 << s\n\n        D[man] = t\n\n\n\n    dp = [defaultdict(int) for i in range(n)]\n\n    dp[0][D[0]] = L[0]\n\n    for i in range(1,n):\n\n        for bit in list(dp[i-1].keys()):\n\n            if bit&D[i] == 0:\n\n                dp[i][bit|D[i]] = max(dp[i][bit|D[i]], dp[i-1][bit]+L[i])\n\n            dp[i][bit] = max(dp[i][bit],dp[i-1][bit])\n\n        dp[i][D[i]] = max(dp[i][D[i]], L[i])\n\n        \n\n    ans = max(max(dp[i].values()) for i in range(n))\n\n    print(ans)","target":"from collections import defaultdict\n\nwhile 1:\n\n    n = int(input())\n\n    if n == 0: break\n\n    L = [0]*n\n\n    T = [0]*n\n\n    for man in range(n):\n\n        m,l = list(map(int,input().split()))\n\n        L[man] = l\n\n        t = 0\n\n        for date in range(m):\n\n            s,e = list(map(int,input().split()))\n\n            t |= 2**(e-6)-2**(s-6)\n\n        T[man] = t\n\n\n\n    dp = defaultdict(int)\n\n    dp[T[0]] = L[0]\n\n    for i in range(1,n):\n\n        for bit in list(dp.keys()):\n\n            if bit&T[i] == 0:\n\n                dp[bit|T[i]] = max(dp[bit|T[i]], dp[bit]+L[i])\n\n        dp[T[i]] = max(dp[T[i]], L[i])\n\n        \n\n    print(max(dp.values()))","code_v0_loc":27,"code_v1_loc":24,"code_v0_num_chars":821,"code_v1_num_chars":646,"code_v0_no_empty_lines":"from collections import defaultdict\n\nwhile 1:\n    n = int(input())\n    if n == 0:\n        break\n    L = [0] * n\n    D = [0] * n\n    for man in range(n):\n        m, l = list(map(int, input().split()))\n        L[man] = l\n        t = 0\n        for date in range(m):\n            s, e = list(map(int, input().split()))\n            for s in range(s - 6, e - 6):\n                t |= 1 << s\n        D[man] = t\n    dp = [defaultdict(int) for i in range(n)]\n    dp[0][D[0]] = L[0]\n    for i in range(1, n):\n        for bit in list(dp[i - 1].keys()):\n            if bit & D[i] == 0:\n                dp[i][bit | D[i]] = max(dp[i][bit | D[i]], dp[i - 1][bit] + L[i])\n            dp[i][bit] = max(dp[i][bit], dp[i - 1][bit])\n        dp[i][D[i]] = max(dp[i][D[i]], L[i])\n    ans = max(max(dp[i].values()) for i in range(n))\n    print(ans)\n","code_v1_no_empty_lines":"from collections import defaultdict\n\nwhile 1:\n    n = int(input())\n    if n == 0:\n        break\n    L = [0] * n\n    T = [0] * n\n    for man in range(n):\n        m, l = list(map(int, input().split()))\n        L[man] = l\n        t = 0\n        for date in range(m):\n            s, e = list(map(int, input().split()))\n            t |= 2 ** (e - 6) - 2 ** (s - 6)\n        T[man] = t\n    dp = defaultdict(int)\n    dp[T[0]] = L[0]\n    for i in range(1, n):\n        for bit in list(dp.keys()):\n            if bit & T[i] == 0:\n                dp[bit | T[i]] = max(dp[bit | T[i]], dp[bit] + L[i])\n        dp[T[i]] = max(dp[T[i]], L[i])\n    print(max(dp.values()))\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["-    D = [0] * n","+    T = [0] * n","-            for s in range(s - 6, e - 6):","-                t |= 1 << s","-        D[man] = t","-    dp = [defaultdict(int) for i in range(n)]","-    dp[0][D[0]] = L[0]","+            t |= 2 ** (e - 6) - 2 ** (s - 6)","+        T[man] = t","+    dp = defaultdict(int)","+    dp[T[0]] = L[0]","-        for bit in list(dp[i - 1].keys()):","-            if bit & D[i] == 0:","-                dp[i][bit | D[i]] = max(dp[i][bit | D[i]], dp[i - 1][bit] + L[i])","-            dp[i][bit] = max(dp[i][bit], dp[i - 1][bit])","-        dp[i][D[i]] = max(dp[i][D[i]], L[i])","-    ans = max(max(dp[i].values()) for i in range(n))","-    print(ans)","+        for bit in list(dp.keys()):","+            if bit & T[i] == 0:","+                dp[bit | T[i]] = max(dp[bit | T[i]], dp[bit] + L[i])","+        dp[T[i]] = max(dp[T[i]], L[i])","+    print(max(dp.values()))"],"diff_only_import_comment":false,"measured_runtime_v0":1.0352676418,"measured_runtime_v1":0.6319530358,"runtime_lift":1.6382034472,"key":["s057521298","s672157071"]}
{"user_id":"u186974762","problem_id":"p02767","language":"python","submission_id_v0":"s418768557","submission_id_v1":"s739454407","cpu_time_v0":150,"cpu_time_v1":19,"memory_v0":12504,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.33,"input":"import numpy as np\n\nN = int(eval(input()))\n\nX = np.array(input().split()).astype(int)\n\nP = round(np.average(X))\n\nprint((int(np.sum((P-X)**2))))","target":"n = int(eval(input()))\n\nx = [int(i) for i in input().split()]\n\nmin_x = round(sum(x) \/ n)\n\nans = sum([(min_x - i)**2 for i in x])\n\nprint(ans)","code_v0_loc":5,"code_v1_loc":5,"code_v0_num_chars":135,"code_v1_num_chars":134,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nX = np.array(input().split()).astype(int)\nP = round(np.average(X))\nprint((int(np.sum((P - X) ** 2))))\n","code_v1_no_empty_lines":"n = int(eval(input()))\nx = [int(i) for i in input().split()]\nmin_x = round(sum(x) \/ n)\nans = sum([(min_x - i) ** 2 for i in x])\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-import numpy as np","-","-N = int(eval(input()))","-X = np.array(input().split()).astype(int)","-P = round(np.average(X))","-print((int(np.sum((P - X) ** 2))))","+n = int(eval(input()))","+x = [int(i) for i in input().split()]","+min_x = round(sum(x) \/ n)","+ans = sum([(min_x - i) ** 2 for i in x])","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.1962851752,"measured_runtime_v1":0.2023058402,"runtime_lift":5.9132508194,"key":["s418768557","s739454407"]}
{"user_id":"u873616440","problem_id":"p02780","language":"python","submission_id_v0":"s803345472","submission_id_v1":"s423400256","cpu_time_v0":163,"cpu_time_v1":141,"memory_v0":25952,"memory_v1":25060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.5,"input":"N, K = list(map(int, input().split()))\n\nA = list(map(int, input().split()))\n\ns = [0] * 1000000\n\nfor i in range(N):\n\n    s[i+1] = s[i] + A[i]\n\n\n\nmax_s = 0\n\nfor i in range(N):\n\n    if max_s < s[i+K] - s[i]:\n\n        max_s = s[i+K] - s[i]\n\n\n\n\n\nprint(((max_s+K) \/ 2))","target":"N, K = list(map(int, input().split()))\n\np = list(map(int, input().split()))\n\n\n\nm = [(e + 1) \/ 2 for e in p]\n\n\n\nt = sum(m[0:K])\n\nresult = t\n\nfor i in range(N - K):\n\n    t -= m[i]\n\n    t += m[i + K]\n\n    if t > result:\n\n        result = t\n\nprint(result)","code_v0_loc":13,"code_v1_loc":13,"code_v0_num_chars":261,"code_v1_num_chars":245,"code_v0_no_empty_lines":"N, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\ns = [0] * 1000000\nfor i in range(N):\n    s[i + 1] = s[i] + A[i]\nmax_s = 0\nfor i in range(N):\n    if max_s < s[i + K] - s[i]:\n        max_s = s[i + K] - s[i]\nprint(((max_s + K) \/ 2))\n","code_v1_no_empty_lines":"N, K = list(map(int, input().split()))\np = list(map(int, input().split()))\nm = [(e + 1) \/ 2 for e in p]\nt = sum(m[0:K])\nresult = t\nfor i in range(N - K):\n    t -= m[i]\n    t += m[i + K]\n    if t > result:\n        result = t\nprint(result)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-A = list(map(int, input().split()))","-s = [0] * 1000000","-for i in range(N):","-    s[i + 1] = s[i] + A[i]","-max_s = 0","-for i in range(N):","-    if max_s < s[i + K] - s[i]:","-        max_s = s[i + K] - s[i]","-print(((max_s + K) \/ 2))","+p = list(map(int, input().split()))","+m = [(e + 1) \/ 2 for e in p]","+t = sum(m[0:K])","+result = t","+for i in range(N - K):","+    t -= m[i]","+    t += m[i + K]","+    if t > result:","+        result = t","+print(result)"],"diff_only_import_comment":false,"measured_runtime_v0":0.394733299,"measured_runtime_v1":0.2439838529,"runtime_lift":1.6178664873,"key":["s803345472","s423400256"]}
{"user_id":"u392319141","problem_id":"p03208","language":"python","submission_id_v0":"s260498412","submission_id_v1":"s755290756","cpu_time_v0":275,"cpu_time_v1":243,"memory_v0":7384,"memory_v1":7484,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.64,"input":"N, K = list(map(int, input().split()))\n\n\n\nheight = []\n\nfor _ in range(N) :\n\n    height.append(int(eval(input())))\n\n\n\nheight.sort()\n\nans = float('inf')\n\n\n\nfor i in range(N-K+1) :\n\n    diff = height[i + K - 1] - height[i]\n\n    ans = min(ans, diff)\n\n\n\nprint(ans)","target":"N, K = list(map(int, input().split()))\n\nH = [int(eval(input())) for _ in range(N)]\n\nH.sort()\n\n\n\nans = 10**18\n\nfor i in range(N - K + 1):\n\n    ans = min(ans, H[i + K - 1] - H[i])\n\nprint(ans)","code_v0_loc":14,"code_v1_loc":8,"code_v0_num_chars":247,"code_v1_num_chars":177,"code_v0_no_empty_lines":"N, K = list(map(int, input().split()))\nheight = []\nfor _ in range(N):\n    height.append(int(eval(input())))\nheight.sort()\nans = float(\"inf\")\nfor i in range(N - K + 1):\n    diff = height[i + K - 1] - height[i]\n    ans = min(ans, diff)\nprint(ans)\n","code_v1_no_empty_lines":"N, K = list(map(int, input().split()))\nH = [int(eval(input())) for _ in range(N)]\nH.sort()\nans = 10**18\nfor i in range(N - K + 1):\n    ans = min(ans, H[i + K - 1] - H[i])\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":42.8571428571,"diff":["-height = []","-for _ in range(N):","-    height.append(int(eval(input())))","-height.sort()","-ans = float(\"inf\")","+H = [int(eval(input())) for _ in range(N)]","+H.sort()","+ans = 10**18","-    diff = height[i + K - 1] - height[i]","-    ans = min(ans, diff)","+    ans = min(ans, H[i + K - 1] - H[i])"],"diff_only_import_comment":false,"measured_runtime_v0":0.2545773742,"measured_runtime_v1":0.0892174052,"runtime_lift":2.8534496549,"key":["s260498412","s755290756"]}
{"user_id":"u380524497","problem_id":"p03032","language":"python","submission_id_v0":"s669893633","submission_id_v1":"s465849215","cpu_time_v0":57,"cpu_time_v1":34,"memory_v0":3316,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":40.35,"input":"from collections import deque\n\n\n\nn, k = list(map(int, input().split()))\n\nV = list(map(int, input().split()))\n\n\n\nans = 0\n\nfor t in range(k\/\/2 + 1):\n\n    hand = deque(V[:k-t])\n\n    rest = deque(V[k-t:])\n\n    cur_sum = sum(hand)\n\n\n\n    for j in range(k-t+1):\n\n        put_back = 0\n\n        rev_hand = sorted(hand)\n\n\n\n        for i in range(t):\n\n            jewel = rev_hand[i]\n\n            if jewel < 0:\n\n                put_back -= jewel\n\n            else:\n\n                break\n\n\n\n        candidate = cur_sum + put_back\n\n        ans = max(candidate, ans)\n\n\n\n        to_rest = hand.pop()\n\n        rest.appendleft(to_rest)\n\n        to_hand = rest.pop()\n\n        hand.appendleft(to_hand)\n\n\n\n        cur_sum += to_hand - to_rest\n\n\n\nprint(ans)","target":"n, k = list(map(int, input().split()))\n\nV = list(map(int, input().split()))\n\n\n\n\n\ndef get_jewelries(box, left_pop, right_pop):\n\n    if left_pop + right_pop >= len(box):\n\n        return box[:]\n\n\n\n    left = box[:left_pop]\n\n    right = box[-right_pop:] if right_pop else []\n\n\n\n    return left + right\n\n\n\n\n\ncandidates = []\n\npop_max = min(k, n)\n\nfor pop_count in range(pop_max+1):\n\n    residue = k - pop_count\n\n\n\n    for left_pop in range(pop_count+1):\n\n        right_pop = pop_count - left_pop\n\n        jewelries = get_jewelries(V, left_pop, right_pop)\n\n        jewelries.sort(reverse=True)\n\n\n\n        for _ in range(residue):\n\n            if not jewelries:\n\n                break\n\n            if jewelries[-1] < 0:\n\n                jewelries.pop()\n\n\n\n        value = sum(jewelries)\n\n        candidates.append(value)\n\n\n\nprint((max(candidates)))\n","code_v0_loc":33,"code_v1_loc":34,"code_v0_num_chars":732,"code_v1_num_chars":833,"code_v0_no_empty_lines":"from collections import deque\n\nn, k = list(map(int, input().split()))\nV = list(map(int, input().split()))\nans = 0\nfor t in range(k \/\/ 2 + 1):\n    hand = deque(V[: k - t])\n    rest = deque(V[k - t :])\n    cur_sum = sum(hand)\n    for j in range(k - t + 1):\n        put_back = 0\n        rev_hand = sorted(hand)\n        for i in range(t):\n            jewel = rev_hand[i]\n            if jewel < 0:\n                put_back -= jewel\n            else:\n                break\n        candidate = cur_sum + put_back\n        ans = max(candidate, ans)\n        to_rest = hand.pop()\n        rest.appendleft(to_rest)\n        to_hand = rest.pop()\n        hand.appendleft(to_hand)\n        cur_sum += to_hand - to_rest\nprint(ans)\n","code_v1_no_empty_lines":"n, k = list(map(int, input().split()))\nV = list(map(int, input().split()))\n\n\ndef get_jewelries(box, left_pop, right_pop):\n    if left_pop + right_pop >= len(box):\n        return box[:]\n    left = box[:left_pop]\n    right = box[-right_pop:] if right_pop else []\n    return left + right\n\n\ncandidates = []\npop_max = min(k, n)\nfor pop_count in range(pop_max + 1):\n    residue = k - pop_count\n    for left_pop in range(pop_count + 1):\n        right_pop = pop_count - left_pop\n        jewelries = get_jewelries(V, left_pop, right_pop)\n        jewelries.sort(reverse=True)\n        for _ in range(residue):\n            if not jewelries:\n                break\n            if jewelries[-1] < 0:\n                jewelries.pop()\n        value = sum(jewelries)\n        candidates.append(value)\nprint((max(candidates)))\n","code_same":false,"relative_loc_diff_percent":2.9411764706,"diff":["-from collections import deque","-","-ans = 0","-for t in range(k \/\/ 2 + 1):","-    hand = deque(V[: k - t])","-    rest = deque(V[k - t :])","-    cur_sum = sum(hand)","-    for j in range(k - t + 1):","-        put_back = 0","-        rev_hand = sorted(hand)","-        for i in range(t):","-            jewel = rev_hand[i]","-            if jewel < 0:","-                put_back -= jewel","-            else:","+","+","+def get_jewelries(box, left_pop, right_pop):","+    if left_pop + right_pop >= len(box):","+        return box[:]","+    left = box[:left_pop]","+    right = box[-right_pop:] if right_pop else []","+    return left + right","+","+","+candidates = []","+pop_max = min(k, n)","+for pop_count in range(pop_max + 1):","+    residue = k - pop_count","+    for left_pop in range(pop_count + 1):","+        right_pop = pop_count - left_pop","+        jewelries = get_jewelries(V, left_pop, right_pop)","+        jewelries.sort(reverse=True)","+        for _ in range(residue):","+            if not jewelries:","-        candidate = cur_sum + put_back","-        ans = max(candidate, ans)","-        to_rest = hand.pop()","-        rest.appendleft(to_rest)","-        to_hand = rest.pop()","-        hand.appendleft(to_hand)","-        cur_sum += to_hand - to_rest","-print(ans)","+            if jewelries[-1] < 0:","+                jewelries.pop()","+        value = sum(jewelries)","+        candidates.append(value)","+print((max(candidates)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2830656636,"measured_runtime_v1":0.1950679789,"runtime_lift":1.4511129157,"key":["s669893633","s465849215"]}
{"user_id":"u227082700","problem_id":"p02863","language":"python","submission_id_v0":"s340691380","submission_id_v1":"s390961057","cpu_time_v0":541,"cpu_time_v1":362,"memory_v0":216520,"memory_v1":217248,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":33.09,"input":"n,t=list(map(int,input().split()))\n\nab=[list(map(int,input().split()))for _ in range(n)]\n\nab.sort()\n\ndp=[(6007)*[0]for _ in range(n+1)]\n\ndp[0][0]=0\n\nans=0\n\nfor i in range(n):\n\n  for j in range(6007):\n\n    dp[i+1][j]=max(dp[i+1][j],dp[i][j])\n\n    if j<t:dp[i+1][j+ab[i][0]]=max(dp[i][j]+ab[i][1],dp[i][j+ab[i][0]])\n\n    ans=max(ans,dp[i+1][j])\n\nprint(ans)\n","target":"n,t=list(map(int,input().split()))\n\ndp=[[0]*(t+3001)for _ in range(n+1)]\n\nans=0\n\nab=[list(map(int,input().split()))for _ in range(n)]\n\nab.sort()\n\nfor i in range(1,n+1):\n\n    a,b=ab[i-1]\n\n    for j in range(t):\n\n        dp[i][j]=max(dp[i-1][j],dp[i][j])\n\n        dp[i][j+a]=dp[i-1][j]+b\n\n        ans=max(dp[i][j],dp[i][j+a],ans)\n\nprint(ans)   ","code_v0_loc":12,"code_v1_loc":12,"code_v0_num_chars":349,"code_v1_num_chars":336,"code_v0_no_empty_lines":"n, t = list(map(int, input().split()))\nab = [list(map(int, input().split())) for _ in range(n)]\nab.sort()\ndp = [(6007) * [0] for _ in range(n + 1)]\ndp[0][0] = 0\nans = 0\nfor i in range(n):\n    for j in range(6007):\n        dp[i + 1][j] = max(dp[i + 1][j], dp[i][j])\n        if j < t:\n            dp[i + 1][j + ab[i][0]] = max(dp[i][j] + ab[i][1], dp[i][j + ab[i][0]])\n        ans = max(ans, dp[i + 1][j])\nprint(ans)\n","code_v1_no_empty_lines":"n, t = list(map(int, input().split()))\ndp = [[0] * (t + 3001) for _ in range(n + 1)]\nans = 0\nab = [list(map(int, input().split())) for _ in range(n)]\nab.sort()\nfor i in range(1, n + 1):\n    a, b = ab[i - 1]\n    for j in range(t):\n        dp[i][j] = max(dp[i - 1][j], dp[i][j])\n        dp[i][j + a] = dp[i - 1][j] + b\n        ans = max(dp[i][j], dp[i][j + a], ans)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["+dp = [[0] * (t + 3001) for _ in range(n + 1)]","+ans = 0","-dp = [(6007) * [0] for _ in range(n + 1)]","-dp[0][0] = 0","-ans = 0","-for i in range(n):","-    for j in range(6007):","-        dp[i + 1][j] = max(dp[i + 1][j], dp[i][j])","-        if j < t:","-            dp[i + 1][j + ab[i][0]] = max(dp[i][j] + ab[i][1], dp[i][j + ab[i][0]])","-        ans = max(ans, dp[i + 1][j])","+for i in range(1, n + 1):","+    a, b = ab[i - 1]","+    for j in range(t):","+        dp[i][j] = max(dp[i - 1][j], dp[i][j])","+        dp[i][j + a] = dp[i - 1][j] + b","+        ans = max(dp[i][j], dp[i][j + a], ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.4546927779,"measured_runtime_v1":0.2128328624,"runtime_lift":2.1363842631,"key":["s340691380","s390961057"]}
{"user_id":"u408260374","problem_id":"p00447","language":"python","submission_id_v0":"s848528651","submission_id_v1":"s273363528","cpu_time_v0":150,"cpu_time_v1":90,"memory_v0":22692,"memory_v1":7092,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":40.0,"input":"board = [[False]*1000001]*1000001\n\nwhile True:\n\n    m = int(eval(input()))\n\n    if m == 0: break\n\n    star = list({tuple(map(int, input().split())) for i in range(m)})\n\n    sx, sy = star[0]\n\n    \n\n    n = int(eval(input()))\n\n    starlist = list({tuple(map(int, input().split())) for i in range(n)})\n\n    for i in range(len(starlist)):\n\n        board[starlist[i][0]][starlist[i][1]] = True\n\n    for i in range(n):\n\n        flag = True\n\n        for j in range(len(star)-1):\n\n            dx = starlist[i][0] + star[j+1][0] - sx\n\n            dy = starlist[i][1] + star[j+1][1] - sy\n\n            if dx < 0 or 1000000 < dx or dy < 0 or 1000000 < dy or board[dx][dy] == False:\n\n                flag = False\n\n                break\n\n\n\n        if flag == True:\n\n            print((\"{} {}\".format(starlist[i][0] - sx, starlist[i][1] -sy)))\n\n            break\n\n    ","target":"while True:\n\n    m = int(eval(input()))\n\n    if m == 0: break\n\n    star = list({tuple(map(int, input().split())) for i in range(m)})\n\n    sx, sy = star[0]\n\n    \n\n    n = int(eval(input()))\n\n    starset = {tuple(map(int, input().split())) for i in range(n)}\n\n    for x, y in starset:\n\n        flag = True\n\n        for j in range(len(star)-1):\n\n            dx = x + star[j+1][0] - sx\n\n            dy = y + star[j+1][1] - sy\n\n            if (dx, dy) not in starset:\n\n                flag = False\n\n                break\n\n\n\n        if flag == True:\n\n            print((x - sx, y - sy))\n\n            break\n\n    ","code_v0_loc":24,"code_v1_loc":21,"code_v0_num_chars":839,"code_v1_num_chars":591,"code_v0_no_empty_lines":"board = [[False] * 1000001] * 1000001\nwhile True:\n    m = int(eval(input()))\n    if m == 0:\n        break\n    star = list({tuple(map(int, input().split())) for i in range(m)})\n    sx, sy = star[0]\n    n = int(eval(input()))\n    starlist = list({tuple(map(int, input().split())) for i in range(n)})\n    for i in range(len(starlist)):\n        board[starlist[i][0]][starlist[i][1]] = True\n    for i in range(n):\n        flag = True\n        for j in range(len(star) - 1):\n            dx = starlist[i][0] + star[j + 1][0] - sx\n            dy = starlist[i][1] + star[j + 1][1] - sy\n            if (\n                dx < 0\n                or 1000000 < dx\n                or dy < 0\n                or 1000000 < dy\n                or board[dx][dy] == False\n            ):\n                flag = False\n                break\n        if flag == True:\n            print((\"{} {}\".format(starlist[i][0] - sx, starlist[i][1] - sy)))\n            break\n","code_v1_no_empty_lines":"while True:\n    m = int(eval(input()))\n    if m == 0:\n        break\n    star = list({tuple(map(int, input().split())) for i in range(m)})\n    sx, sy = star[0]\n    n = int(eval(input()))\n    starset = {tuple(map(int, input().split())) for i in range(n)}\n    for x, y in starset:\n        flag = True\n        for j in range(len(star) - 1):\n            dx = x + star[j + 1][0] - sx\n            dy = y + star[j + 1][1] - sy\n            if (dx, dy) not in starset:\n                flag = False\n                break\n        if flag == True:\n            print((x - sx, y - sy))\n            break\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-board = [[False] * 1000001] * 1000001","-    starlist = list({tuple(map(int, input().split())) for i in range(n)})","-    for i in range(len(starlist)):","-        board[starlist[i][0]][starlist[i][1]] = True","-    for i in range(n):","+    starset = {tuple(map(int, input().split())) for i in range(n)}","+    for x, y in starset:","-            dx = starlist[i][0] + star[j + 1][0] - sx","-            dy = starlist[i][1] + star[j + 1][1] - sy","-            if (","-                dx < 0","-                or 1000000 < dx","-                or dy < 0","-                or 1000000 < dy","-                or board[dx][dy] == False","-            ):","+            dx = x + star[j + 1][0] - sx","+            dy = y + star[j + 1][1] - sy","+            if (dx, dy) not in starset:","-            print((\"{} {}\".format(starlist[i][0] - sx, starlist[i][1] - sy)))","+            print((x - sx, y - sy))"],"diff_only_import_comment":false,"measured_runtime_v0":0.5961894131,"measured_runtime_v1":0.2429299738,"runtime_lift":2.454161599,"key":["s848528651","s273363528"]}
{"user_id":"u824144553","problem_id":"p02647","language":"python","submission_id_v0":"s947547146","submission_id_v1":"s829816575","cpu_time_v0":897,"cpu_time_v1":312,"memory_v0":129220,"memory_v1":169716,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":65.22,"input":"import copy\n\nfrom functools import lru_cache\n\nimport numpy as np\n\nfrom numba import njit\n\n\n\n#@njit\n\n# @njit('(i8[::1],)', cache=True)\n\n# def func(A):\n\n#     N = len(A)\n\n#     B = np.zeros_like(A)\n\n#     for i in range(N):\n\n#         l = max(0, i - A[i])\n\n#         r = min(i + A[i], N-1)\n\n#         B[l] += 1\n\n#         if r+1 < N:\n\n#             B[r+1] -= 1\n\n\n\n#     B = np.cumsum(B)\n\n#     return B\n\n\n\ndef resolve():\n\n    N, K = list(map(int, input().split()))\n\n    A = np.array(list(map(int, input().split())))\n\n\n\n    # N = 2 * 10**5\n\n    # K = 2 * 10**5\n\n    # A = np.array([0] *  N)\n\n\n\n    @njit\n\n    def func(A):\n\n        #N = len(A)\n\n        B = np.zeros_like(A)\n\n        for i in range(N):\n\n            l = max(0, i - A[i])\n\n            r = min(i + A[i], N-1)\n\n            B[l] += 1\n\n            if r+1 < N:\n\n                B[r+1] -= 1\n\n\n\n        B = np.cumsum(B)\n\n        return B\n\n\n\n    for k in range(K):\n\n        #print(k)\n\n        A = func(A)\n\n        if k >= 50:\n\n            break\n\n\n\n    print((\" \".join(map(str, A))))\n\n\n\nif __name__ == \"__main__\":\n\n    resolve()","target":"import copy\n\nfrom functools import lru_cache\n\n#import numpy as np\n\n#from numba import njit\n\n\n\ndef resolve():\n\n    N, K = list(map(int, input().split()))\n\n    #A = np.array(list(map(int, input().split())))\n\n    A = list(map(int, input().split()))\n\n\n\n    #N = 2 * 10**5\n\n    #K = 2 * 10**5\n\n    #A = np.array([0] *  N)\n\n\n\n    def func(A):\n\n        B = [0] * N\n\n        for i in range(N):\n\n            l = max(0, i - A[i])\n\n            r = min(i + A[i], N-1)\n\n            B[l] += 1\n\n            if r+1 < N:\n\n                B[r+1] -= 1\n\n\n\n        for i in range(1, N):\n\n            B[i] += B[i-1]\n\n        return B\n\n\n\n    for k in range(K):\n\n        #print(k)\n\n        A = func(A)\n\n        if k >= 50:\n\n            break\n\n\n\n    print((\" \".join(map(str, A))))\n\n\n\nif __name__ == \"__main__\":\n\n    resolve()","code_v0_loc":52,"code_v1_loc":37,"code_v0_num_chars":1071,"code_v1_num_chars":792,"code_v0_no_empty_lines":"import copy\nfrom functools import lru_cache\nimport numpy as np\nfrom numba import njit\n\n# @njit\n# @njit('(i8[::1],)', cache=True)\n# def func(A):\n#     N = len(A)\n#     B = np.zeros_like(A)\n#     for i in range(N):\n#         l = max(0, i - A[i])\n#         r = min(i + A[i], N-1)\n#         B[l] += 1\n#         if r+1 < N:\n#             B[r+1] -= 1\n#     B = np.cumsum(B)\n#     return B\ndef resolve():\n    N, K = list(map(int, input().split()))\n    A = np.array(list(map(int, input().split())))\n    # N = 2 * 10**5\n    # K = 2 * 10**5\n    # A = np.array([0] *  N)\n    @njit\n    def func(A):\n        # N = len(A)\n        B = np.zeros_like(A)\n        for i in range(N):\n            l = max(0, i - A[i])\n            r = min(i + A[i], N - 1)\n            B[l] += 1\n            if r + 1 < N:\n                B[r + 1] -= 1\n        B = np.cumsum(B)\n        return B\n\n    for k in range(K):\n        # print(k)\n        A = func(A)\n        if k >= 50:\n            break\n    print((\" \".join(map(str, A))))\n\n\nif __name__ == \"__main__\":\n    resolve()\n","code_v1_no_empty_lines":"import copy\nfrom functools import lru_cache\n\n# import numpy as np\n# from numba import njit\ndef resolve():\n    N, K = list(map(int, input().split()))\n    # A = np.array(list(map(int, input().split())))\n    A = list(map(int, input().split()))\n    # N = 2 * 10**5\n    # K = 2 * 10**5\n    # A = np.array([0] *  N)\n    def func(A):\n        B = [0] * N\n        for i in range(N):\n            l = max(0, i - A[i])\n            r = min(i + A[i], N - 1)\n            B[l] += 1\n            if r + 1 < N:\n                B[r + 1] -= 1\n        for i in range(1, N):\n            B[i] += B[i - 1]\n        return B\n\n    for k in range(K):\n        # print(k)\n        A = func(A)\n        if k >= 50:\n            break\n    print((\" \".join(map(str, A))))\n\n\nif __name__ == \"__main__\":\n    resolve()\n","code_same":false,"relative_loc_diff_percent":28.8461538462,"diff":["-import numpy as np","-from numba import njit","-# @njit","-# @njit('(i8[::1],)', cache=True)","-# def func(A):","-#     N = len(A)","-#     B = np.zeros_like(A)","-#     for i in range(N):","-#         l = max(0, i - A[i])","-#         r = min(i + A[i], N-1)","-#         B[l] += 1","-#         if r+1 < N:","-#             B[r+1] -= 1","-#     B = np.cumsum(B)","-#     return B","+# import numpy as np","+# from numba import njit","-    A = np.array(list(map(int, input().split())))","+    # A = np.array(list(map(int, input().split())))","+    A = list(map(int, input().split()))","-    @njit","-        # N = len(A)","-        B = np.zeros_like(A)","+        B = [0] * N","-        B = np.cumsum(B)","+        for i in range(1, N):","+            B[i] += B[i - 1]"],"diff_only_import_comment":false,"measured_runtime_v0":1.3551732968,"measured_runtime_v1":0.2157634698,"runtime_lift":6.280828252,"key":["s947547146","s829816575"]}
{"user_id":"u867069435","problem_id":"p03399","language":"python","submission_id_v0":"s852784971","submission_id_v1":"s460322800","cpu_time_v0":19,"cpu_time_v1":17,"memory_v0":3316,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.53,"input":"a, b, c, d = int(eval(input())), int(eval(input())), int(eval(input())), int(eval(input())),\n\nprint((min(a, b)+min(c, d)))","target":"print((min(int(eval(input())), int(eval(input()))) + min(int(eval(input())), int(eval(input())))))","code_v0_loc":2,"code_v1_loc":1,"code_v0_num_chars":96,"code_v1_num_chars":72,"code_v0_no_empty_lines":"a, b, c, d = (\n    int(eval(input())),\n    int(eval(input())),\n    int(eval(input())),\n    int(eval(input())),\n)\nprint((min(a, b) + min(c, d)))\n","code_v1_no_empty_lines":"print(\n    (\n        min(int(eval(input())), int(eval(input())))\n        + min(int(eval(input())), int(eval(input())))\n    )\n)\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-a, b, c, d = (","-    int(eval(input())),","-    int(eval(input())),","-    int(eval(input())),","-    int(eval(input())),","+print(","+    (","+        min(int(eval(input())), int(eval(input())))","+        + min(int(eval(input())), int(eval(input())))","+    )","-print((min(a, b) + min(c, d)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2959700694,"measured_runtime_v1":0.2359499116,"runtime_lift":1.2543766912,"key":["s852784971","s460322800"]}
{"user_id":"u021019433","problem_id":"p02837","language":"python","submission_id_v0":"s475579950","submission_id_v1":"s165212154","cpu_time_v0":219,"cpu_time_v1":58,"memory_v0":3064,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":73.52,"input":"def popcount(x):\n\n  r = 0\n\n  while x:\n\n    if x & 1:\n\n      r += 1\n\n    x >>= 1\n\n  return r\n\n\n\nn = int(eval(input()))\n\nr = list(range(n))\n\na = [[0, 0] for _ in r]\n\nfor i in r:\n\n  for _ in range(int(eval(input()))):\n\n    x, y = list(map(int, input().split()))\n\n    a[i][y] |= 1 << (x - 1)\n\n\n\nm = 0\n\nl = (1 << n) - 1\n\nfor x in range(1, l + 1):\n\n  if all(a[i][0] & x == a[i][1] & l - x == 0 for i in r if x >> i & 1):\n\n    m = max(m, popcount(x))\n\nprint(m)\n","target":"from itertools import combinations\n\n \n\nn = int(eval(input()))\n\nr = list(range(n))\n\na = [(set(), set()) for _ in r]\n\nfor i in r:\n\n  for _ in range(int(eval(input()))):\n\n    x, y = list(map(int, input().split()))\n\n    a[i][y].add(x - 1)\n\n \n\nfail = lambda x: not all(a[i][0].isdisjoint(x) and a[i][1] < x for i in x)\n\n \n\nwhile all(map(fail, list(map(set, combinations(r, n))))):\n\n  n -= 1\n\nprint(n)","code_v0_loc":22,"code_v1_loc":15,"code_v0_num_chars":430,"code_v1_num_chars":365,"code_v0_no_empty_lines":"def popcount(x):\n    r = 0\n    while x:\n        if x & 1:\n            r += 1\n        x >>= 1\n    return r\n\n\nn = int(eval(input()))\nr = list(range(n))\na = [[0, 0] for _ in r]\nfor i in r:\n    for _ in range(int(eval(input()))):\n        x, y = list(map(int, input().split()))\n        a[i][y] |= 1 << (x - 1)\nm = 0\nl = (1 << n) - 1\nfor x in range(1, l + 1):\n    if all(a[i][0] & x == a[i][1] & l - x == 0 for i in r if x >> i & 1):\n        m = max(m, popcount(x))\nprint(m)\n","code_v1_no_empty_lines":"from itertools import combinations\n\nn = int(eval(input()))\nr = list(range(n))\na = [(set(), set()) for _ in r]\nfor i in r:\n    for _ in range(int(eval(input()))):\n        x, y = list(map(int, input().split()))\n        a[i][y].add(x - 1)\nfail = lambda x: not all(a[i][0].isdisjoint(x) and a[i][1] < x for i in x)\nwhile all(map(fail, list(map(set, combinations(r, n))))):\n    n -= 1\nprint(n)\n","code_same":false,"relative_loc_diff_percent":31.8181818182,"diff":["-def popcount(x):","-    r = 0","-    while x:","-        if x & 1:","-            r += 1","-        x >>= 1","-    return r","-","+from itertools import combinations","-a = [[0, 0] for _ in r]","+a = [(set(), set()) for _ in r]","-        a[i][y] |= 1 << (x - 1)","-m = 0","-l = (1 << n) - 1","-for x in range(1, l + 1):","-    if all(a[i][0] & x == a[i][1] & l - x == 0 for i in r if x >> i & 1):","-        m = max(m, popcount(x))","-print(m)","+        a[i][y].add(x - 1)","+fail = lambda x: not all(a[i][0].isdisjoint(x) and a[i][1] < x for i in x)","+while all(map(fail, list(map(set, combinations(r, n))))):","+    n -= 1","+print(n)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2279194756,"measured_runtime_v1":0.0067682672,"runtime_lift":33.6747161436,"key":["s475579950","s165212154"]}
{"user_id":"u893063840","problem_id":"p03039","language":"python","submission_id_v0":"s835548762","submission_id_v1":"s860519661","cpu_time_v0":1667,"cpu_time_v1":328,"memory_v0":85236,"memory_v1":18804,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":80.32,"input":"n, m, k = list(map(int, input().split()))\n\nmod = 10 ** 9 + 7\n\nMAX = n * m\n\n\n\n\n\nclass ModInt:\n\n    def __init__(self, num):\n\n        self.num = num\n\n\n\n    def __str__(self):\n\n        return str(self.num)\n\n\n\n    def __repr__(self):\n\n        return \"ModInt(num: {}, mod: {}\".format(self.num, mod)\n\n\n\n    def __add__(self, other):\n\n        ret = self.num + other.num\n\n        ret %= mod\n\n        return ModInt(ret)\n\n\n\n    def __sub__(self, other):\n\n        ret = self.num - other.num\n\n        ret %= mod\n\n        return ModInt(ret)\n\n\n\n    def __mul__(self, other):\n\n        ret = self.num * other.num\n\n        ret %= mod\n\n        return ModInt(ret)\n\n\n\n    def pow(self, times):\n\n        pw = pow(self.num, times, mod)\n\n        return ModInt(pw)\n\n\n\n    def inverse(self):\n\n        return ModInt(inv[self.num])\n\n\n\n    def __truediv__(self, other):\n\n        num = self * other.inverse()\n\n        return ModInt(num)\n\n\n\n\n\ndef comb(n, k):\n\n    return fact[n] * inv[n-k] * inv[k]\n\n\n\n\n\nfact = [None] * (MAX + 1)\n\nfact[0] = ModInt(1)\n\nfor i in range(1, MAX + 1):\n\n    fact[i] = fact[i-1] * ModInt(i)\n\n\n\ninv = [None] * (MAX + 1)\n\ninv[MAX] = fact[MAX].pow(mod - 2)\n\nfor i in range(MAX, 0, -1):\n\n    inv[i-1] = inv[i] * ModInt(i)\n\n\n\nans = ModInt(0)\n\nfor i in range(n):\n\n    for j in range(m):\n\n        add = ModInt(n - i) * ModInt(m - j) * ModInt(i + j)\n\n        if i != 0 and j != 0:\n\n            add *= ModInt(2)\n\n\n\n        ans += add\n\n\n\nans *= comb(n * m - 2, k - 2)\n\nprint(ans)\n","target":"n, m, k = list(map(int, input().split()))\n\n\n\nmod = 10 ** 9 + 7\n\nMAX = n * m\n\n\n\nfact = [1] * (MAX + 1)\n\nfor i in range(1, MAX + 1):\n\n    fact[i] = (fact[i-1] * i) % mod\n\n\n\ninv = [1] * (MAX + 1)\n\ninv[MAX] = pow(fact[MAX], mod - 2, mod)\n\nfor i in range(MAX, 0, -1):\n\n    inv[i-1] = (inv[i] * i) % mod\n\n\n\n\n\ndef comb(n, k):\n\n    return fact[n] * inv[n-k] * inv[k] % mod\n\n\n\n\n\nans = 0\n\nfor i in range(n):\n\n    for j in range(m):\n\n        add = (n - i) * (m - j) * (i + j) % mod\n\n        if i != 0 and j != 0:\n\n            add *= 2\n\n            add %= mod\n\n\n\n        ans += add\n\n        ans %= mod\n\n\n\nans *= comb(MAX - 2, k - 2)\n\nans %= mod\n\nprint(ans)\n","code_v0_loc":67,"code_v1_loc":33,"code_v0_num_chars":1460,"code_v1_num_chars":639,"code_v0_no_empty_lines":"n, m, k = list(map(int, input().split()))\nmod = 10**9 + 7\nMAX = n * m\n\n\nclass ModInt:\n    def __init__(self, num):\n        self.num = num\n\n    def __str__(self):\n        return str(self.num)\n\n    def __repr__(self):\n        return \"ModInt(num: {}, mod: {}\".format(self.num, mod)\n\n    def __add__(self, other):\n        ret = self.num + other.num\n        ret %= mod\n        return ModInt(ret)\n\n    def __sub__(self, other):\n        ret = self.num - other.num\n        ret %= mod\n        return ModInt(ret)\n\n    def __mul__(self, other):\n        ret = self.num * other.num\n        ret %= mod\n        return ModInt(ret)\n\n    def pow(self, times):\n        pw = pow(self.num, times, mod)\n        return ModInt(pw)\n\n    def inverse(self):\n        return ModInt(inv[self.num])\n\n    def __truediv__(self, other):\n        num = self * other.inverse()\n        return ModInt(num)\n\n\ndef comb(n, k):\n    return fact[n] * inv[n - k] * inv[k]\n\n\nfact = [None] * (MAX + 1)\nfact[0] = ModInt(1)\nfor i in range(1, MAX + 1):\n    fact[i] = fact[i - 1] * ModInt(i)\ninv = [None] * (MAX + 1)\ninv[MAX] = fact[MAX].pow(mod - 2)\nfor i in range(MAX, 0, -1):\n    inv[i - 1] = inv[i] * ModInt(i)\nans = ModInt(0)\nfor i in range(n):\n    for j in range(m):\n        add = ModInt(n - i) * ModInt(m - j) * ModInt(i + j)\n        if i != 0 and j != 0:\n            add *= ModInt(2)\n        ans += add\nans *= comb(n * m - 2, k - 2)\nprint(ans)\n","code_v1_no_empty_lines":"n, m, k = list(map(int, input().split()))\nmod = 10**9 + 7\nMAX = n * m\nfact = [1] * (MAX + 1)\nfor i in range(1, MAX + 1):\n    fact[i] = (fact[i - 1] * i) % mod\ninv = [1] * (MAX + 1)\ninv[MAX] = pow(fact[MAX], mod - 2, mod)\nfor i in range(MAX, 0, -1):\n    inv[i - 1] = (inv[i] * i) % mod\n\n\ndef comb(n, k):\n    return fact[n] * inv[n - k] * inv[k] % mod\n\n\nans = 0\nfor i in range(n):\n    for j in range(m):\n        add = (n - i) * (m - j) * (i + j) % mod\n        if i != 0 and j != 0:\n            add *= 2\n            add %= mod\n        ans += add\n        ans %= mod\nans *= comb(MAX - 2, k - 2)\nans %= mod\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":50.7462686567,"diff":["-","-","-class ModInt:","-    def __init__(self, num):","-        self.num = num","-","-    def __str__(self):","-        return str(self.num)","-","-    def __repr__(self):","-        return \"ModInt(num: {}, mod: {}\".format(self.num, mod)","-","-    def __add__(self, other):","-        ret = self.num + other.num","-        ret %= mod","-        return ModInt(ret)","-","-    def __sub__(self, other):","-        ret = self.num - other.num","-        ret %= mod","-        return ModInt(ret)","-","-    def __mul__(self, other):","-        ret = self.num * other.num","-        ret %= mod","-        return ModInt(ret)","-","-    def pow(self, times):","-        pw = pow(self.num, times, mod)","-        return ModInt(pw)","-","-    def inverse(self):","-        return ModInt(inv[self.num])","-","-    def __truediv__(self, other):","-        num = self * other.inverse()","-        return ModInt(num)","+fact = [1] * (MAX + 1)","+for i in range(1, MAX + 1):","+    fact[i] = (fact[i - 1] * i) % mod","+inv = [1] * (MAX + 1)","+inv[MAX] = pow(fact[MAX], mod - 2, mod)","+for i in range(MAX, 0, -1):","+    inv[i - 1] = (inv[i] * i) % mod","-    return fact[n] * inv[n - k] * inv[k]","+    return fact[n] * inv[n - k] * inv[k] % mod","-fact = [None] * (MAX + 1)","-fact[0] = ModInt(1)","-for i in range(1, MAX + 1):","-    fact[i] = fact[i - 1] * ModInt(i)","-inv = [None] * (MAX + 1)","-inv[MAX] = fact[MAX].pow(mod - 2)","-for i in range(MAX, 0, -1):","-    inv[i - 1] = inv[i] * ModInt(i)","-ans = ModInt(0)","+ans = 0","-        add = ModInt(n - i) * ModInt(m - j) * ModInt(i + j)","+        add = (n - i) * (m - j) * (i + j) % mod","-            add *= ModInt(2)","+            add *= 2","+            add %= mod","-ans *= comb(n * m - 2, k - 2)","+        ans %= mod","+ans *= comb(MAX - 2, k - 2)","+ans %= mod"],"diff_only_import_comment":false,"measured_runtime_v0":1.0146762717,"measured_runtime_v1":0.4959636457,"runtime_lift":2.0458682415,"key":["s835548762","s860519661"]}
{"user_id":"u600402037","problem_id":"p02792","language":"python","submission_id_v0":"s118732898","submission_id_v1":"s414047719","cpu_time_v0":343,"cpu_time_v1":199,"memory_v0":12500,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":41.98,"input":"import sys\n\nimport numpy as np\n\n\n\nsr = lambda: sys.stdin.readline().rstrip()\n\nir = lambda: int(sr())\n\nlr = lambda: list(map(int, sr().split()))\n\n\n\nN = ir()\n\n# A\u306e\u5148\u982d\u306e\u6841\u3068\u672b\u5c3e\u306e\u6841\u306e\u7d44\u307f\u5408\u308f\u305b\u306f9*10=90\u901a\u308a\u3060\u3051\n\ntable = [[0] * 10 for i in range(10)]\n\nfor x in range(1, N+1):\n\n    x = str(x)\n\n    i = int(x[0])\n\n    j = int(x[-1])\n\n    table[i][j] += 1\n\n\n\ntable = np.array(table)\n\nanswer = (table * table.T).sum()\n\nprint(answer)\n","target":"import sys\n\n\n\nsr = lambda: sys.stdin.readline().rstrip()\n\nir = lambda: int(sr())\n\nlr = lambda: list(map(int, sr().split()))\n\n\n\nN = ir()\n\ncount = [[0] * 10 for _ in range(10)] # dp[head][tail]\n\nfor i in range(1, N+1):\n\n    s = str(i)\n\n    head = int(s[0]); tail = int(s[-1])\n\n    count[head][tail] += 1\n\n\n\nanswer = 0\n\nfor h in range(10):\n\n    for t in range(10):\n\n        answer += count[h][t] * count[t][h]\n\nprint(answer)\n","code_v0_loc":19,"code_v1_loc":18,"code_v0_num_chars":406,"code_v1_num_chars":422,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\nN = ir()\n# A\u306e\u5148\u982d\u306e\u6841\u3068\u672b\u5c3e\u306e\u6841\u306e\u7d44\u307f\u5408\u308f\u305b\u306f9*10=90\u901a\u308a\u3060\u3051\ntable = [[0] * 10 for i in range(10)]\nfor x in range(1, N + 1):\n    x = str(x)\n    i = int(x[0])\n    j = int(x[-1])\n    table[i][j] += 1\ntable = np.array(table)\nanswer = (table * table.T).sum()\nprint(answer)\n","code_v1_no_empty_lines":"import sys\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\nN = ir()\ncount = [[0] * 10 for _ in range(10)]  # dp[head][tail]\nfor i in range(1, N + 1):\n    s = str(i)\n    head = int(s[0])\n    tail = int(s[-1])\n    count[head][tail] += 1\nanswer = 0\nfor h in range(10):\n    for t in range(10):\n        answer += count[h][t] * count[t][h]\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":5.2631578947,"diff":["-import numpy as np","-# A\u306e\u5148\u982d\u306e\u6841\u3068\u672b\u5c3e\u306e\u6841\u306e\u7d44\u307f\u5408\u308f\u305b\u306f9*10=90\u901a\u308a\u3060\u3051","-table = [[0] * 10 for i in range(10)]","-for x in range(1, N + 1):","-    x = str(x)","-    i = int(x[0])","-    j = int(x[-1])","-    table[i][j] += 1","-table = np.array(table)","-answer = (table * table.T).sum()","+count = [[0] * 10 for _ in range(10)]  # dp[head][tail]","+for i in range(1, N + 1):","+    s = str(i)","+    head = int(s[0])","+    tail = int(s[-1])","+    count[head][tail] += 1","+answer = 0","+for h in range(10):","+    for t in range(10):","+        answer += count[h][t] * count[t][h]"],"diff_only_import_comment":false,"measured_runtime_v0":1.4269222763,"measured_runtime_v1":0.2967054391,"runtime_lift":4.8092218352,"key":["s118732898","s414047719"]}
{"user_id":"u644907318","problem_id":"p03241","language":"python","submission_id_v0":"s205255104","submission_id_v1":"s496579949","cpu_time_v0":180,"cpu_time_v1":73,"memory_v0":38640,"memory_v1":63824,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":59.44,"input":"N,M = list(map(int,input().split()))\n\nif N==1:\n\n    nmax=M\n\nelse:\n\n    nmax = 1\n\n    for i in range(2,int(M**0.5)+1):\n\n        if M%i==0 and M\/\/i>=N:\n\n            nmax = max(nmax,i)\n\n        if M%i==0 and i>=N:\n\n            nmax = max(nmax,M\/\/i)\n\nprint(nmax)","target":"N,M = list(map(int,input().split()))\n\namax = 1\n\nfor i in range(1,int(M**0.5)+1):\n\n    if M%i==0:\n\n        a = i\n\n        b = M\/\/i\n\n        if b>=N:\n\n            amax = max(amax,a)\n\n        a,b = b,a\n\n        if b>=N:\n\n            amax = max(amax,a)\n\nprint(amax)","code_v0_loc":11,"code_v1_loc":12,"code_v0_num_chars":252,"code_v1_num_chars":255,"code_v0_no_empty_lines":"N, M = list(map(int, input().split()))\nif N == 1:\n    nmax = M\nelse:\n    nmax = 1\n    for i in range(2, int(M**0.5) + 1):\n        if M % i == 0 and M \/\/ i >= N:\n            nmax = max(nmax, i)\n        if M % i == 0 and i >= N:\n            nmax = max(nmax, M \/\/ i)\nprint(nmax)\n","code_v1_no_empty_lines":"N, M = list(map(int, input().split()))\namax = 1\nfor i in range(1, int(M**0.5) + 1):\n    if M % i == 0:\n        a = i\n        b = M \/\/ i\n        if b >= N:\n            amax = max(amax, a)\n        a, b = b, a\n        if b >= N:\n            amax = max(amax, a)\nprint(amax)\n","code_same":false,"relative_loc_diff_percent":8.3333333333,"diff":["-if N == 1:","-    nmax = M","-else:","-    nmax = 1","-    for i in range(2, int(M**0.5) + 1):","-        if M % i == 0 and M \/\/ i >= N:","-            nmax = max(nmax, i)","-        if M % i == 0 and i >= N:","-            nmax = max(nmax, M \/\/ i)","-print(nmax)","+amax = 1","+for i in range(1, int(M**0.5) + 1):","+    if M % i == 0:","+        a = i","+        b = M \/\/ i","+        if b >= N:","+            amax = max(amax, a)","+        a, b = b, a","+        if b >= N:","+            amax = max(amax, a)","+print(amax)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3445633175,"measured_runtime_v1":0.2717220852,"runtime_lift":1.26807255,"key":["s205255104","s496579949"]}
{"user_id":"u628335443","problem_id":"p03162","language":"python","submission_id_v0":"s314983266","submission_id_v1":"s746344991","cpu_time_v0":1077,"cpu_time_v1":699,"memory_v0":56144,"memory_v1":50192,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":35.1,"input":"import numpy as np\n\n\n\nN = int(eval(input()))\n\na = np.array([input().split() for i in range(N)], dtype=int)\n\n\n\ndp = np.zeros((N, 3), dtype=int)\n\ndp[0] = a[0]\n\n\n\nfor i in range(1, N):\n\n    dp[i] = [\n\n        a[i][0] + max(dp[i - 1][1], dp[i - 1][2]),\n\n        a[i][1] + max(dp[i - 1][2], dp[i - 1][0]),\n\n        a[i][2] + max(dp[i - 1][0], dp[i - 1][1]),\n\n    ]\n\n\n\nprint((np.max(dp[-1])))\n","target":"N = int(eval(input()))\n\na = [list(map(int, input().split())) for _ in range(N)]\n\n\n\ndp = [[0, 0, 0] for _ in range(N+1)]\n\n\n\nfor i in range(N):\n\n    for j in range(3):\n\n        for k in range(3):\n\n            if j == k:\n\n                continue\n\n            dp[i+1][k] = max(dp[i+1][k], dp[i][j] + a[i][k])\n\n\n\nprint((max(dp[-1])))\n","code_v0_loc":16,"code_v1_loc":13,"code_v0_num_chars":379,"code_v1_num_chars":322,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\na = np.array([input().split() for i in range(N)], dtype=int)\ndp = np.zeros((N, 3), dtype=int)\ndp[0] = a[0]\nfor i in range(1, N):\n    dp[i] = [\n        a[i][0] + max(dp[i - 1][1], dp[i - 1][2]),\n        a[i][1] + max(dp[i - 1][2], dp[i - 1][0]),\n        a[i][2] + max(dp[i - 1][0], dp[i - 1][1]),\n    ]\nprint((np.max(dp[-1])))\n","code_v1_no_empty_lines":"N = int(eval(input()))\na = [list(map(int, input().split())) for _ in range(N)]\ndp = [[0, 0, 0] for _ in range(N + 1)]\nfor i in range(N):\n    for j in range(3):\n        for k in range(3):\n            if j == k:\n                continue\n            dp[i + 1][k] = max(dp[i + 1][k], dp[i][j] + a[i][k])\nprint((max(dp[-1])))\n","code_same":false,"relative_loc_diff_percent":18.75,"diff":["-import numpy as np","-","-a = np.array([input().split() for i in range(N)], dtype=int)","-dp = np.zeros((N, 3), dtype=int)","-dp[0] = a[0]","-for i in range(1, N):","-    dp[i] = [","-        a[i][0] + max(dp[i - 1][1], dp[i - 1][2]),","-        a[i][1] + max(dp[i - 1][2], dp[i - 1][0]),","-        a[i][2] + max(dp[i - 1][0], dp[i - 1][1]),","-    ]","-print((np.max(dp[-1])))","+a = [list(map(int, input().split())) for _ in range(N)]","+dp = [[0, 0, 0] for _ in range(N + 1)]","+for i in range(N):","+    for j in range(3):","+        for k in range(3):","+            if j == k:","+                continue","+            dp[i + 1][k] = max(dp[i + 1][k], dp[i][j] + a[i][k])","+print((max(dp[-1])))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3170761042,"measured_runtime_v1":0.2653971686,"runtime_lift":4.9626607205,"key":["s314983266","s746344991"]}
{"user_id":"u543954314","problem_id":"p02596","language":"python","submission_id_v0":"s410919516","submission_id_v1":"s753895766","cpu_time_v0":302,"cpu_time_v1":127,"memory_v0":114648,"memory_v1":9196,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":57.95,"input":"import sys\n\n\n\nreadline = sys.stdin.readline\n\nreadall = sys.stdin.read\n\nns = lambda: readline().rstrip()\n\nni = lambda: int(readline().rstrip())\n\nnm = lambda: map(int, readline().split())\n\nnl = lambda: list(map(int, readline().split()))\n\nprn = lambda x: print(*x, sep='\\n')\n\n\n\ndef solve():\n\n    d = dict()\n\n    k = ni()\n\n    c = 7 % k\n\n    x = d[c] = 1\n\n    while True:\n\n        c = (c * 10 + 7) % k\n\n        if c in d:\n\n            break\n\n        x += 1\n\n        d[c] = x\n\n    print(d.get(0, -1))\n\n    return\n\n\n\nsolve()\n","target":"import sys\n\n\n\nreadline = sys.stdin.readline\n\nreadall = sys.stdin.read\n\nns = lambda: readline().rstrip()\n\nni = lambda: int(readline().rstrip())\n\nnm = lambda: map(int, readline().split())\n\nnl = lambda: list(map(int, readline().split()))\n\nprn = lambda x: print(*x, sep='\\n')\n\n\n\ndef solve():\n\n    k = ni()\n\n    c = 0\n\n    for i in range(k):\n\n        c = (c * 10 + 7) % k\n\n        if c == 0:\n\n            print(i+1)\n\n            break\n\n    else:\n\n        print(-1)\n\n    return\n\n\n\nsolve()\n","code_v0_loc":25,"code_v1_loc":23,"code_v0_num_chars":519,"code_v1_num_chars":483,"code_v0_no_empty_lines":"import sys\n\nreadline = sys.stdin.readline\nreadall = sys.stdin.read\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\nprn = lambda x: print(*x, sep=\"\\n\")\n\n\ndef solve():\n    d = dict()\n    k = ni()\n    c = 7 % k\n    x = d[c] = 1\n    while True:\n        c = (c * 10 + 7) % k\n        if c in d:\n            break\n        x += 1\n        d[c] = x\n    print(d.get(0, -1))\n    return\n\n\nsolve()\n","code_v1_no_empty_lines":"import sys\n\nreadline = sys.stdin.readline\nreadall = sys.stdin.read\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\nprn = lambda x: print(*x, sep=\"\\n\")\n\n\ndef solve():\n    k = ni()\n    c = 0\n    for i in range(k):\n        c = (c * 10 + 7) % k\n        if c == 0:\n            print(i + 1)\n            break\n    else:\n        print(-1)\n    return\n\n\nsolve()\n","code_same":false,"relative_loc_diff_percent":8.0,"diff":["-    d = dict()","-    c = 7 % k","-    x = d[c] = 1","-    while True:","+    c = 0","+    for i in range(k):","-        if c in d:","+        if c == 0:","+            print(i + 1)","-        x += 1","-        d[c] = x","-    print(d.get(0, -1))","+    else:","+        print(-1)"],"diff_only_import_comment":false,"measured_runtime_v0":0.7691566973,"measured_runtime_v1":0.3673865876,"runtime_lift":2.0935894863,"key":["s410919516","s753895766"]}
{"user_id":"u561083515","problem_id":"p02959","language":"python","submission_id_v0":"s872669573","submission_id_v1":"s116182226","cpu_time_v0":274,"cpu_time_v1":160,"memory_v0":73316,"memory_v1":19648,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":41.61,"input":"import sys\n\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\nN = int(eval(input()))\n\nA = [int(i) for i in input().split()]\n\nB = [int(i) for i in input().split()]\n\nbefore = sum(A)\n\n\n\nfor i in range(N):\n\n    nokori = B[i]\n\n    for j in range(i,i+2):\n\n        if nokori >= A[j]:\n\n            nokori -= A[j]\n\n            A[j] = 0\n\n        else:\n\n            A[j] -= nokori\n\n            nokori = 0\n\nafter = sum(A)\n\n\n\nprint((before - after))","target":"N = int(eval(input()))\n\nA = [int(i) for i in input().split()]\n\nB = [int(i) for i in input().split()]\n\n\n\ncnt = 0\n\nfor i in range(N):\n\n    if B[i] >= A[i]:\n\n        cnt += A[i]\n\n        B[i] -= A[i]\n\n    else:\n\n        cnt += B[i]\n\n        B[i] = 0\n\n    if B[i] == 0:\n\n        continue\n\n    if B[i] >= A[i+1]:\n\n        cnt += A[i+1]\n\n        A[i+1] = 0\n\n    else:\n\n        cnt += B[i]\n\n        A[i+1] -= B[i]\n\n\n\nprint(cnt)","code_v0_loc":21,"code_v1_loc":22,"code_v0_num_chars":440,"code_v1_num_chars":414,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nN = int(eval(input()))\nA = [int(i) for i in input().split()]\nB = [int(i) for i in input().split()]\nbefore = sum(A)\nfor i in range(N):\n    nokori = B[i]\n    for j in range(i, i + 2):\n        if nokori >= A[j]:\n            nokori -= A[j]\n            A[j] = 0\n        else:\n            A[j] -= nokori\n            nokori = 0\nafter = sum(A)\nprint((before - after))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = [int(i) for i in input().split()]\nB = [int(i) for i in input().split()]\ncnt = 0\nfor i in range(N):\n    if B[i] >= A[i]:\n        cnt += A[i]\n        B[i] -= A[i]\n    else:\n        cnt += B[i]\n        B[i] = 0\n    if B[i] == 0:\n        continue\n    if B[i] >= A[i + 1]:\n        cnt += A[i + 1]\n        A[i + 1] = 0\n    else:\n        cnt += B[i]\n        A[i + 1] -= B[i]\nprint(cnt)\n","code_same":false,"relative_loc_diff_percent":4.5454545455,"diff":["-import sys","-","-input = sys.stdin.readline","-sys.setrecursionlimit(10**7)","-before = sum(A)","+cnt = 0","-    nokori = B[i]","-    for j in range(i, i + 2):","-        if nokori >= A[j]:","-            nokori -= A[j]","-            A[j] = 0","-        else:","-            A[j] -= nokori","-            nokori = 0","-after = sum(A)","-print((before - after))","+    if B[i] >= A[i]:","+        cnt += A[i]","+        B[i] -= A[i]","+    else:","+        cnt += B[i]","+        B[i] = 0","+    if B[i] == 0:","+        continue","+    if B[i] >= A[i + 1]:","+        cnt += A[i + 1]","+        A[i + 1] = 0","+    else:","+        cnt += B[i]","+        A[i + 1] -= B[i]","+print(cnt)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3369382279,"measured_runtime_v1":0.0062937415,"runtime_lift":53.5354413986,"key":["s872669573","s116182226"]}
{"user_id":"u144913062","problem_id":"p03457","language":"python","submission_id_v0":"s956976175","submission_id_v1":"s285518014","cpu_time_v0":628,"cpu_time_v1":555,"memory_v0":62040,"memory_v1":46056,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.62,"input":"N = int(eval(input()))\n\ntxy = [(0, 0, 0)] + [tuple(map(int, input().split())) for _ in range(N)]\n\nfor i in range(N):\n\n    t1, x1, y1 = txy[i]\n\n    t2, x2, y2 = txy[i+1]\n\n    if abs(x2-x1) + abs(y2-y1) <= t2 - t1 and (x1+y1+x2+y2) % 2 == (t2-t1) % 2:\n\n        continue\n\n    else:\n\n        print('No')\n\n        exit()\n\nprint('Yes')","target":"N = int(eval(input()))\n\nt0 = x0 = y0 = 0\n\nfor _ in range(N):\n\n    t1, x1, y1 = list(map(int, input().split()))\n\n    d = abs(x1 - x0) + abs(y1 - y0)\n\n    if d > t1 - t0 or d % 2 != (t1 - t0) % 2:\n\n        print('No')\n\n        exit()\n\n    t0, x0, y0 = t1, x1, y1\n\nprint('Yes')\n","code_v0_loc":11,"code_v1_loc":10,"code_v0_num_chars":323,"code_v1_num_chars":263,"code_v0_no_empty_lines":"N = int(eval(input()))\ntxy = [(0, 0, 0)] + [tuple(map(int, input().split())) for _ in range(N)]\nfor i in range(N):\n    t1, x1, y1 = txy[i]\n    t2, x2, y2 = txy[i + 1]\n    if (\n        abs(x2 - x1) + abs(y2 - y1) <= t2 - t1\n        and (x1 + y1 + x2 + y2) % 2 == (t2 - t1) % 2\n    ):\n        continue\n    else:\n        print(\"No\")\n        exit()\nprint(\"Yes\")\n","code_v1_no_empty_lines":"N = int(eval(input()))\nt0 = x0 = y0 = 0\nfor _ in range(N):\n    t1, x1, y1 = list(map(int, input().split()))\n    d = abs(x1 - x0) + abs(y1 - y0)\n    if d > t1 - t0 or d % 2 != (t1 - t0) % 2:\n        print(\"No\")\n        exit()\n    t0, x0, y0 = t1, x1, y1\nprint(\"Yes\")\n","code_same":false,"relative_loc_diff_percent":9.0909090909,"diff":["-txy = [(0, 0, 0)] + [tuple(map(int, input().split())) for _ in range(N)]","-for i in range(N):","-    t1, x1, y1 = txy[i]","-    t2, x2, y2 = txy[i + 1]","-    if (","-        abs(x2 - x1) + abs(y2 - y1) <= t2 - t1","-        and (x1 + y1 + x2 + y2) % 2 == (t2 - t1) % 2","-    ):","-        continue","-    else:","+t0 = x0 = y0 = 0","+for _ in range(N):","+    t1, x1, y1 = list(map(int, input().split()))","+    d = abs(x1 - x0) + abs(y1 - y0)","+    if d > t1 - t0 or d % 2 != (t1 - t0) % 2:","+    t0, x0, y0 = t1, x1, y1"],"diff_only_import_comment":false,"measured_runtime_v0":0.3724059272,"measured_runtime_v1":0.2797260373,"runtime_lift":1.3313237867,"key":["s956976175","s285518014"]}
{"user_id":"u227082700","problem_id":"p02834","language":"python","submission_id_v0":"s854767798","submission_id_v1":"s662268715","cpu_time_v0":780,"cpu_time_v1":670,"memory_v0":84508,"memory_v1":38312,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.1,"input":"n,u,v=list(map(int,input().split()))\n\nanss=0\n\nu-=1\n\nv-=1\n\nd=[[]for _ in range(n)]\n\ninf=float('inf')\n\naoki=[inf]*n\n\nfor i in range(n-1):\n\n  a,b=list(map(int,input().split()))\n\n  a-=1\n\n  b-=1\n\n  d[a].append(b)\n\n  d[b].append(a)\n\nQ=d[v]\n\naoki[v]=0\n\ndis=1\n\nvisited={v}\n\nwhile Q:\n\n  P=[]\n\n  for i in Q:\n\n    visited.add(i)\n\n    for j in d[i]:\n\n      if j not in visited:P.append(j)\n\n    aoki[i]=dis\n\n  dis+=1\n\n  Q=P\n\nQ=d[u]\n\nchokudai=[-1]*n\n\nchokudai[u]=0\n\ndis=1\n\nvisited={u}\n\npoint=-1\n\nwhile Q:\n\n  P=[]\n\n  for i in Q:\n\n    visited.add(i)\n\n    for j in d[i]:\n\n      if aoki[j]<=dis+1:\n\n        if aoki[j]==dis+1:anss=1\n\n        if point<0:point=i\n\n        continue\n\n      if j not in visited:P.append(j)\n\n    chokudai[i]=dis\n\n  dis+=1\n\n  Q=P\n\nQ=d[point]\n\ndis=chokudai[point]+1\n\nvisited={point}\n\nwhile Q:\n\n  P=[]\n\n  for i in Q:\n\n    visited.add(i)\n\n    if chokudai[i]==-1:continue\n\n    chokudai[i]=max(dis,chokudai[i])\n\n    for j in d[i]:\n\n      if j not in visited:P.append(j)\n\n  dis+=1\n\n  Q=P\n\nans=0\n\nfor i in range(n):\n\n  if aoki[i]>chokudai[i]:ans=max(ans,chokudai[i])\n\nprint((ans+anss))\n\n#print(aoki)\n\n#print(chokudai)","target":"n,u,v=list(map(int,input().split()))\n\nu-=1\n\nv-=1\n\ne=[[]for _ in range(n)]\n\nfor i in range(n-1):\n\n  a,b=list(map(int,input().split()))\n\n  a-=1\n\n  b-=1\n\n  e[a].append(b)\n\n  e[b].append(a)\n\ncho=[u]\n\ncho_dis=[10**7]*n\n\ncho_dis[u]=0\n\ncho_visited={u}\n\ncountt=1\n\nwhile cho:\n\n  CHO=[]\n\n  for i in cho:\n\n    for j in e[i]:\n\n      if j in cho_visited:continue\n\n      cho_visited.add(j)\n\n      CHO.append(j)\n\n      cho_dis[j]=countt\n\n  countt+=1\n\n  cho=CHO\n\naok=[v]\n\naok_dis=[10**7]*n\n\naok_dis[v]=0\n\naok_visited={v}\n\ncountt=1\n\nwhile aok:\n\n  AOK=[]\n\n  for i in aok:\n\n    for j in e[i]:\n\n      if j in aok_visited:continue\n\n      aok_visited.add(j)\n\n      AOK.append(j)\n\n      aok_dis[j]=countt\n\n  countt+=1\n\n  aok=AOK\n\nans=0\n\nfor i in range(n):\n\n  if cho_dis[i]<aok_dis[i]:ans=max(ans,aok_dis[i]-1)\n\nprint(ans)","code_v0_loc":64,"code_v1_loc":44,"code_v0_num_chars":1103,"code_v1_num_chars":786,"code_v0_no_empty_lines":"n, u, v = list(map(int, input().split()))\nanss = 0\nu -= 1\nv -= 1\nd = [[] for _ in range(n)]\ninf = float(\"inf\")\naoki = [inf] * n\nfor i in range(n - 1):\n    a, b = list(map(int, input().split()))\n    a -= 1\n    b -= 1\n    d[a].append(b)\n    d[b].append(a)\nQ = d[v]\naoki[v] = 0\ndis = 1\nvisited = {v}\nwhile Q:\n    P = []\n    for i in Q:\n        visited.add(i)\n        for j in d[i]:\n            if j not in visited:\n                P.append(j)\n        aoki[i] = dis\n    dis += 1\n    Q = P\nQ = d[u]\nchokudai = [-1] * n\nchokudai[u] = 0\ndis = 1\nvisited = {u}\npoint = -1\nwhile Q:\n    P = []\n    for i in Q:\n        visited.add(i)\n        for j in d[i]:\n            if aoki[j] <= dis + 1:\n                if aoki[j] == dis + 1:\n                    anss = 1\n                if point < 0:\n                    point = i\n                continue\n            if j not in visited:\n                P.append(j)\n        chokudai[i] = dis\n    dis += 1\n    Q = P\nQ = d[point]\ndis = chokudai[point] + 1\nvisited = {point}\nwhile Q:\n    P = []\n    for i in Q:\n        visited.add(i)\n        if chokudai[i] == -1:\n            continue\n        chokudai[i] = max(dis, chokudai[i])\n        for j in d[i]:\n            if j not in visited:\n                P.append(j)\n    dis += 1\n    Q = P\nans = 0\nfor i in range(n):\n    if aoki[i] > chokudai[i]:\n        ans = max(ans, chokudai[i])\nprint((ans + anss))\n# print(aoki)\n# print(chokudai)\n","code_v1_no_empty_lines":"n, u, v = list(map(int, input().split()))\nu -= 1\nv -= 1\ne = [[] for _ in range(n)]\nfor i in range(n - 1):\n    a, b = list(map(int, input().split()))\n    a -= 1\n    b -= 1\n    e[a].append(b)\n    e[b].append(a)\ncho = [u]\ncho_dis = [10**7] * n\ncho_dis[u] = 0\ncho_visited = {u}\ncountt = 1\nwhile cho:\n    CHO = []\n    for i in cho:\n        for j in e[i]:\n            if j in cho_visited:\n                continue\n            cho_visited.add(j)\n            CHO.append(j)\n            cho_dis[j] = countt\n    countt += 1\n    cho = CHO\naok = [v]\naok_dis = [10**7] * n\naok_dis[v] = 0\naok_visited = {v}\ncountt = 1\nwhile aok:\n    AOK = []\n    for i in aok:\n        for j in e[i]:\n            if j in aok_visited:\n                continue\n            aok_visited.add(j)\n            AOK.append(j)\n            aok_dis[j] = countt\n    countt += 1\n    aok = AOK\nans = 0\nfor i in range(n):\n    if cho_dis[i] < aok_dis[i]:\n        ans = max(ans, aok_dis[i] - 1)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":31.25,"diff":["-anss = 0","-d = [[] for _ in range(n)]","-inf = float(\"inf\")","-aoki = [inf] * n","+e = [[] for _ in range(n)]","-    d[a].append(b)","-    d[b].append(a)","-Q = d[v]","-aoki[v] = 0","-dis = 1","-visited = {v}","-while Q:","-    P = []","-    for i in Q:","-        visited.add(i)","-        for j in d[i]:","-            if j not in visited:","-                P.append(j)","-        aoki[i] = dis","-    dis += 1","-    Q = P","-Q = d[u]","-chokudai = [-1] * n","-chokudai[u] = 0","-dis = 1","-visited = {u}","-point = -1","-while Q:","-    P = []","-    for i in Q:","-        visited.add(i)","-        for j in d[i]:","-            if aoki[j] <= dis + 1:","-                if aoki[j] == dis + 1:","-                    anss = 1","-                if point < 0:","-                    point = i","+    e[a].append(b)","+    e[b].append(a)","+cho = [u]","+cho_dis = [10**7] * n","+cho_dis[u] = 0","+cho_visited = {u}","+countt = 1","+while cho:","+    CHO = []","+    for i in cho:","+        for j in e[i]:","+            if j in cho_visited:","-            if j not in visited:","-                P.append(j)","-        chokudai[i] = dis","-    dis += 1","-    Q = P","-Q = d[point]","-dis = chokudai[point] + 1","-visited = {point}","-while Q:","-    P = []","-    for i in Q:","-        visited.add(i)","-        if chokudai[i] == -1:","-            continue","-        chokudai[i] = max(dis, chokudai[i])","-        for j in d[i]:","-            if j not in visited:","-                P.append(j)","-    dis += 1","-    Q = P","+            cho_visited.add(j)","+            CHO.append(j)","+            cho_dis[j] = countt","+    countt += 1","+    cho = CHO","+aok = [v]","+aok_dis = [10**7] * n","+aok_dis[v] = 0","+aok_visited = {v}","+countt = 1","+while aok:","+    AOK = []","+    for i in aok:","+        for j in e[i]:","+            if j in aok_visited:","+                continue","+            aok_visited.add(j)","+            AOK.append(j)","+            aok_dis[j] = countt","+    countt += 1","+    aok = AOK","-    if aoki[i] > chokudai[i]:","-        ans = max(ans, chokudai[i])","-print((ans + anss))","-# print(aoki)","-# print(chokudai)","+    if cho_dis[i] < aok_dis[i]:","+        ans = max(ans, aok_dis[i] - 1)","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2686464586,"measured_runtime_v1":0.0699197628,"runtime_lift":3.842210666,"key":["s854767798","s662268715"]}
{"user_id":"u102461423","problem_id":"p02624","language":"python","submission_id_v0":"s573473634","submission_id_v1":"s100010005","cpu_time_v0":791,"cpu_time_v1":35,"memory_v0":266304,"memory_v1":9168,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":95.58,"input":"import sys\n\nimport numpy as np\n\n\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\ndef prime_table(N):\n\n    is_prime = np.zeros(N, np.int64)\n\n    is_prime[2:3] = 1\n\n    is_prime[3::2] = 1\n\n    for p in range(3, N, 2):\n\n        if p * p >= N:\n\n            break\n\n        if is_prime[p]:\n\n            is_prime[p * p::p + p] = 0\n\n    return is_prime, np.where(is_prime)[0]\n\n\n\ndef main(N, primes):\n\n    div = np.ones(N + 1, dtype=np.int64)\n\n    for p in primes:\n\n        for i in range(N \/\/ p + 1):\n\n            div[p * i] += div[i]\n\n    div *= np.arange(N + 1)\n\n    return div.sum()\n\n\n\nif sys.argv[-1] == 'ONLINE_JUDGE':\n\n    import numba\n\n    from numba.pycc import CC\n\n    i8 = numba.int64\n\n    cc = CC('my_module')\n\n\n\n    def cc_export(f, signature):\n\n        cc.export(f.__name__, signature)(f)\n\n        return numba.njit(f)\n\n\n\n    main = cc_export(main, (i8, i8[:]))\n\n    cc.compile()\n\n\n\nfrom my_module import main\n\n\n\nN = int(read())\n\nis_prime, primes = prime_table(N + 1)\n\nprint((main(N, primes)))","target":"N = int(eval(input()))\n\n\n\ndef f(x):\n\n  return x * (x+1) \/\/ 2\n\n\n\nans = 0\n\nfor x in range(1, N+1):\n\n  if x * x > N:\n\n    break\n\n  # x = y\n\n  ans += x * x\n\n  # x < y \u306e 2 \u500d\n\n  y_high = N\/\/x\n\n  ans += 2 * x * (f(y_high) - f(x))\n\n\n\nprint(ans)","code_v0_loc":44,"code_v1_loc":16,"code_v0_num_chars":1059,"code_v1_num_chars":230,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\n\ndef prime_table(N):\n    is_prime = np.zeros(N, np.int64)\n    is_prime[2:3] = 1\n    is_prime[3::2] = 1\n    for p in range(3, N, 2):\n        if p * p >= N:\n            break\n        if is_prime[p]:\n            is_prime[p * p :: p + p] = 0\n    return is_prime, np.where(is_prime)[0]\n\n\ndef main(N, primes):\n    div = np.ones(N + 1, dtype=np.int64)\n    for p in primes:\n        for i in range(N \/\/ p + 1):\n            div[p * i] += div[i]\n    div *= np.arange(N + 1)\n    return div.sum()\n\n\nif sys.argv[-1] == \"ONLINE_JUDGE\":\n    import numba\n    from numba.pycc import CC\n\n    i8 = numba.int64\n    cc = CC(\"my_module\")\n\n    def cc_export(f, signature):\n        cc.export(f.__name__, signature)(f)\n        return numba.njit(f)\n\n    main = cc_export(main, (i8, i8[:]))\n    cc.compile()\nfrom my_module import main\n\nN = int(read())\nis_prime, primes = prime_table(N + 1)\nprint((main(N, primes)))\n","code_v1_no_empty_lines":"N = int(eval(input()))\n\n\ndef f(x):\n    return x * (x + 1) \/\/ 2\n\n\nans = 0\nfor x in range(1, N + 1):\n    if x * x > N:\n        break\n    # x = y\n    ans += x * x\n    # x < y \u306e 2 \u500d\n    y_high = N \/\/ x\n    ans += 2 * x * (f(y_high) - f(x))\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":63.6363636364,"diff":["-import sys","-import numpy as np","-","-read = sys.stdin.buffer.read","-readline = sys.stdin.buffer.readline","-readlines = sys.stdin.buffer.readlines","+N = int(eval(input()))","-def prime_table(N):","-    is_prime = np.zeros(N, np.int64)","-    is_prime[2:3] = 1","-    is_prime[3::2] = 1","-    for p in range(3, N, 2):","-        if p * p >= N:","-            break","-        if is_prime[p]:","-            is_prime[p * p :: p + p] = 0","-    return is_prime, np.where(is_prime)[0]","+def f(x):","+    return x * (x + 1) \/\/ 2","-def main(N, primes):","-    div = np.ones(N + 1, dtype=np.int64)","-    for p in primes:","-        for i in range(N \/\/ p + 1):","-            div[p * i] += div[i]","-    div *= np.arange(N + 1)","-    return div.sum()","-","-","-if sys.argv[-1] == \"ONLINE_JUDGE\":","-    import numba","-    from numba.pycc import CC","-","-    i8 = numba.int64","-    cc = CC(\"my_module\")","-","-    def cc_export(f, signature):","-        cc.export(f.__name__, signature)(f)","-        return numba.njit(f)","-","-    main = cc_export(main, (i8, i8[:]))","-    cc.compile()","-from my_module import main","-","-N = int(read())","-is_prime, primes = prime_table(N + 1)","-print((main(N, primes)))","+ans = 0","+for x in range(1, N + 1):","+    if x * x > N:","+        break","+    # x = y","+    ans += x * x","+    # x < y \u306e 2 \u500d","+    y_high = N \/\/ x","+    ans += 2 * x * (f(y_high) - f(x))","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.4964172101,"measured_runtime_v1":0.255015204,"runtime_lift":5.8679529175,"key":["s573473634","s100010005"]}
{"user_id":"u729133443","problem_id":"p02537","language":"python","submission_id_v0":"s897150427","submission_id_v1":"s003067542","cpu_time_v0":1389,"cpu_time_v1":1137,"memory_v0":275544,"memory_v1":157144,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":18.14,"input":"d=[0]*6**8\n\nn,k,*a=list(map(int,open(0).read().split()+d))\n\nfor i in range(n):d[i]=max(d[j]for j in range(i-99,i+1)if abs(a[i]-a[j])<=k)+1\n\nprint((max(d)))","target":"d=[0]*6**8\n\nn,k,*a=list(map(int,open(0).read().split()))\n\na=d+a\n\nwhile n:d[n]=max(d[j]for j in range(n,n+99)if abs(a[-n]-a[-j])<=k)+1;n-=1\n\nprint((max(d)))","code_v0_loc":4,"code_v1_loc":5,"code_v0_num_chars":147,"code_v1_num_chars":147,"code_v0_no_empty_lines":"d = [0] * 6**8\nn, k, *a = list(map(int, open(0).read().split() + d))\nfor i in range(n):\n    d[i] = max(d[j] for j in range(i - 99, i + 1) if abs(a[i] - a[j]) <= k) + 1\nprint((max(d)))\n","code_v1_no_empty_lines":"d = [0] * 6**8\nn, k, *a = list(map(int, open(0).read().split()))\na = d + a\nwhile n:\n    d[n] = max(d[j] for j in range(n, n + 99) if abs(a[-n] - a[-j]) <= k) + 1\n    n -= 1\nprint((max(d)))\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["-n, k, *a = list(map(int, open(0).read().split() + d))","-for i in range(n):","-    d[i] = max(d[j] for j in range(i - 99, i + 1) if abs(a[i] - a[j]) <= k) + 1","+n, k, *a = list(map(int, open(0).read().split()))","+a = d + a","+while n:","+    d[n] = max(d[j] for j in range(n, n + 99) if abs(a[-n] - a[-j]) <= k) + 1","+    n -= 1"],"diff_only_import_comment":false,"measured_runtime_v0":1.750332129,"measured_runtime_v1":0.822091434,"runtime_lift":2.1291209914,"key":["s897150427","s003067542"]}
{"user_id":"u437638594","problem_id":"p02899","language":"python","submission_id_v0":"s394411898","submission_id_v1":"s768084185","cpu_time_v0":774,"cpu_time_v1":113,"memory_v0":23388,"memory_v1":14008,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":85.4,"input":"import numpy as np\n\n\n\nN = int(input())\n\nAs = list(map(int, input().split()))\n\n\n\n# for i in range(N):\n\n#   print(As.index(i+1) + 1, end = \" \")\n\n\n\nfor item in np.argsort(As):\n\n  print(item+1, end=\" \")\n","target":"N = int(eval(input()))\n\nAs = list(map(int, input().split()))\n\n\n\nans = [0] * N\n\n\n\nfor i, A in enumerate(As):\n\n  ans[A-1] = i+1\n\n  \n\nprint((*ans))","code_v0_loc":10,"code_v1_loc":9,"code_v0_num_chars":199,"code_v1_num_chars":136,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(input())\nAs = list(map(int, input().split()))\n# for i in range(N):\n#   print(As.index(i+1) + 1, end = \" \")\nfor item in np.argsort(As):\n    print(item + 1, end=\" \")\n","code_v1_no_empty_lines":"N = int(eval(input()))\nAs = list(map(int, input().split()))\nans = [0] * N\nfor i, A in enumerate(As):\n    ans[A - 1] = i + 1\nprint((*ans))\n","code_same":false,"relative_loc_diff_percent":10.0,"diff":["-import numpy as np","-","-N = int(input())","+N = int(eval(input()))","-# for i in range(N):","-#   print(As.index(i+1) + 1, end = \" \")","-for item in np.argsort(As):","-    print(item + 1, end=\" \")","+ans = [0] * N","+for i, A in enumerate(As):","+    ans[A - 1] = i + 1","+print((*ans))"],"diff_only_import_comment":false,"measured_runtime_v0":2.1602964805,"measured_runtime_v1":0.2883257704,"runtime_lift":7.4925542641,"key":["s394411898","s768084185"]}
{"user_id":"u028260664","problem_id":"p03494","language":"python","submission_id_v0":"s951687748","submission_id_v1":"s895960468","cpu_time_v0":279,"cpu_time_v1":19,"memory_v0":17932,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":93.19,"input":"import numpy as np\n\n# Me\n\n\n\n\n\ndef f():\n\n    i = int(eval(input()))\n\n    nums = np.array(list(map(int, input().split())))\n\n    # nums = [int(x) for x in input().split()]\n\n    c = 0\n\n    while True:\n\n        if any(nums % 2 == 1):\n\n            break\n\n        c += 1\n\n        nums = nums \/ 2\n\n    print(c)\n\n\n\n\n\nf()\n\n\n\n\n\n# Other\n","target":"def divide_all(a):\n\n    success = True\n\n    for i, n in enumerate(a):\n\n        if n % 2 != 0:\n\n            success = False\n\n            break\n\n        a[i] = n \/ 2\n\n    if success is False:\n\n        return (a, False)\n\n    return (a, True)\n\n\n\nn = int(eval(input()))\n\na = list(map(int, input().split()))\n\nc = 0\n\nwhile True:\n\n    a, r = divide_all(a)\n\n    if r is False:\n\n        break\n\n    c += 1\n\n\n\n\n\nprint(c)\n","code_v0_loc":21,"code_v1_loc":22,"code_v0_num_chars":319,"code_v1_num_chars":403,"code_v0_no_empty_lines":"import numpy as np\n\n# Me\ndef f():\n    i = int(eval(input()))\n    nums = np.array(list(map(int, input().split())))\n    # nums = [int(x) for x in input().split()]\n    c = 0\n    while True:\n        if any(nums % 2 == 1):\n            break\n        c += 1\n        nums = nums \/ 2\n    print(c)\n\n\nf()\n# Other\n","code_v1_no_empty_lines":"def divide_all(a):\n    success = True\n    for i, n in enumerate(a):\n        if n % 2 != 0:\n            success = False\n            break\n        a[i] = n \/ 2\n    if success is False:\n        return (a, False)\n    return (a, True)\n\n\nn = int(eval(input()))\na = list(map(int, input().split()))\nc = 0\nwhile True:\n    a, r = divide_all(a)\n    if r is False:\n        break\n    c += 1\nprint(c)\n","code_same":false,"relative_loc_diff_percent":4.5454545455,"diff":["-import numpy as np","-","-# Me","-def f():","-    i = int(eval(input()))","-    nums = np.array(list(map(int, input().split())))","-    # nums = [int(x) for x in input().split()]","-    c = 0","-    while True:","-        if any(nums % 2 == 1):","+def divide_all(a):","+    success = True","+    for i, n in enumerate(a):","+        if n % 2 != 0:","+            success = False","-        c += 1","-        nums = nums \/ 2","-    print(c)","+        a[i] = n \/ 2","+    if success is False:","+        return (a, False)","+    return (a, True)","-f()","-# Other","+n = int(eval(input()))","+a = list(map(int, input().split()))","+c = 0","+while True:","+    a, r = divide_all(a)","+    if r is False:","+        break","+    c += 1","+print(c)"],"diff_only_import_comment":false,"measured_runtime_v0":1.5223398395,"measured_runtime_v1":0.2142075307,"runtime_lift":7.106845563,"key":["s951687748","s895960468"]}
{"user_id":"u163829702","problem_id":"p02690","language":"python","submission_id_v0":"s837447612","submission_id_v1":"s901497928","cpu_time_v0":71,"cpu_time_v1":47,"memory_v0":9108,"memory_v1":9172,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":33.8,"input":"X = int(eval(input()))\n\nfor A in range(-200, 200):\n\n    for B in range(-200, 200):\n\n        if A**5 - B**5 == X:\n\n            print((A, B))\n\n            break\n\n    else:\n\n        continue\n\n    break","target":"X = int(eval(input()))\n\nfor A in range(-150, 150):\n\n    for B in range(-150, 150):\n\n        if A**5 - B**5 == X:\n\n            print((A, B))\n\n            break\n\n    else:\n\n        continue\n\n    break","code_v0_loc":9,"code_v1_loc":9,"code_v0_num_chars":190,"code_v1_num_chars":190,"code_v0_no_empty_lines":"X = int(eval(input()))\nfor A in range(-200, 200):\n    for B in range(-200, 200):\n        if A**5 - B**5 == X:\n            print((A, B))\n            break\n    else:\n        continue\n    break\n","code_v1_no_empty_lines":"X = int(eval(input()))\nfor A in range(-150, 150):\n    for B in range(-150, 150):\n        if A**5 - B**5 == X:\n            print((A, B))\n            break\n    else:\n        continue\n    break\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-for A in range(-200, 200):","-    for B in range(-200, 200):","+for A in range(-150, 150):","+    for B in range(-150, 150):"],"diff_only_import_comment":false,"measured_runtime_v0":0.6633033911,"measured_runtime_v1":0.465554901,"runtime_lift":1.4247586907,"key":["s837447612","s901497928"]}
{"user_id":"u185948224","problem_id":"p02873","language":"python","submission_id_v0":"s874712614","submission_id_v1":"s975354355","cpu_time_v0":481,"cpu_time_v1":429,"memory_v0":27676,"memory_v1":27548,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.81,"input":"S = eval(input())\n\n\n\nlst = [1 if S[0]=='<' else -1]\n\nfor i in range(1, len(S)):\n\n    if S[i] == S[i - 1]:\n\n        lst[-1] += 1 if S[i]=='<' else -1\n\n    else:\n\n        lst.append(-1 if S[i]=='>' else 1)\n\n        \n\nans = [0]\n\n\n\nfor i in range(len(lst)):\n\n    if lst[i] > 0:\n\n        ans += list(range(1,lst[i]+1))\n\n    else:\n\n        ans[-1] = max(ans[-1], -lst[i])\n\n        ans += list(range(-lst[i]-1,-1, -1))\n\n\n\nprint((sum(ans)))\n","target":"S = eval(input())\n\n\n\nlst = [1 if S[0]=='<' else -1]\n\nfor i in range(1, len(S)):\n\n    if S[i] == S[i - 1]:\n\n        lst[-1] += 1 if S[i]=='<' else -1\n\n    else:\n\n        lst.append(-1 if S[i]=='>' else 1)\n\n        \n\nans = [0]\n\n\n\nfor i in lst:\n\n    if i > 0:\n\n        ans += list(range(1,i+1))\n\n    else:\n\n        ans[-1] = max(ans[-1], -i)\n\n        ans += list(range(-i-1,-1, -1))\n\n\n\n\n\nprint((sum(ans)))","code_v0_loc":19,"code_v1_loc":20,"code_v0_num_chars":425,"code_v1_num_chars":394,"code_v0_no_empty_lines":"S = eval(input())\nlst = [1 if S[0] == \"<\" else -1]\nfor i in range(1, len(S)):\n    if S[i] == S[i - 1]:\n        lst[-1] += 1 if S[i] == \"<\" else -1\n    else:\n        lst.append(-1 if S[i] == \">\" else 1)\nans = [0]\nfor i in range(len(lst)):\n    if lst[i] > 0:\n        ans += list(range(1, lst[i] + 1))\n    else:\n        ans[-1] = max(ans[-1], -lst[i])\n        ans += list(range(-lst[i] - 1, -1, -1))\nprint((sum(ans)))\n","code_v1_no_empty_lines":"S = eval(input())\nlst = [1 if S[0] == \"<\" else -1]\nfor i in range(1, len(S)):\n    if S[i] == S[i - 1]:\n        lst[-1] += 1 if S[i] == \"<\" else -1\n    else:\n        lst.append(-1 if S[i] == \">\" else 1)\nans = [0]\nfor i in lst:\n    if i > 0:\n        ans += list(range(1, i + 1))\n    else:\n        ans[-1] = max(ans[-1], -i)\n        ans += list(range(-i - 1, -1, -1))\nprint((sum(ans)))\n","code_same":false,"relative_loc_diff_percent":5.0,"diff":["-for i in range(len(lst)):","-    if lst[i] > 0:","-        ans += list(range(1, lst[i] + 1))","+for i in lst:","+    if i > 0:","+        ans += list(range(1, i + 1))","-        ans[-1] = max(ans[-1], -lst[i])","-        ans += list(range(-lst[i] - 1, -1, -1))","+        ans[-1] = max(ans[-1], -i)","+        ans += list(range(-i - 1, -1, -1))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2820563465,"measured_runtime_v1":0.2050767321,"runtime_lift":1.3753698122,"key":["s874712614","s975354355"]}
{"user_id":"u231095456","problem_id":"p03253","language":"python","submission_id_v0":"s968664754","submission_id_v1":"s390670273","cpu_time_v0":89,"cpu_time_v1":32,"memory_v0":11252,"memory_v1":9336,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":64.04,"input":"from math import floor, sqrt\n\nfrom collections import defaultdict\n\ndef factors(n):\n\n    d = defaultdict(int)\n\n    for i in range(2,floor(sqrt(n))+1):\n\n        while n % i == 0:\n\n            n \/\/= i\n\n            d[i] += 1\n\n        if n == 1:\n\n            break\n\n    if n != 1:\n\n        d[n] += 1\n\n    return d\n\ndef inv(x, mod):\n\n    k = mod - 2\n\n    ret = 1\n\n    while k > 0:\n\n        if k&1:\n\n            ret = (ret*x) % mod\n\n        x = (x*x) % mod\n\n        k >>= 1\n\n    return ret\n\nN, M = list(map(int,input().split()))\n\nmod = 10**9+7\n\ndic = factors(M)\n\nK = len(dic)\n\nSIZE = N+max(dic.values()) if list(dic.values()) else N\n\nfact = [None]*(SIZE+1)\n\nfinv = [None]*(SIZE+1)\n\nfact[0] = 1\n\nfor i in range(1,SIZE+1):\n\n    fact[i] = (fact[i-1]*i) % mod\n\nfinv[SIZE] = inv(fact[SIZE], mod=mod)\n\nfor i in range(SIZE, 0, -1):\n\n    finv[i-1] = (finv[i]*i) % mod\n\ndef comb(n,k):\n\n    tmp = (finv[k]*finv[n-k]) % mod\n\n    return (fact[n]*tmp) % mod\n\nans = 1\n\nfor p in dic:\n\n    ans = (ans*comb(dic[p]+N-1, dic[p])) % mod\n\nprint(ans)","target":"from math import floor, sqrt\n\nfrom collections import defaultdict\n\nN,M = list(map(int,input().split()))\n\nd = defaultdict(int)\n\nfor i in range(2, floor(sqrt(M))+1):\n\n    while M % i == 0:\n\n        d[i] += 1\n\n        M \/\/= i\n\nif M != 1:\n\n    d[M] += 1\n\ndef comb(n,k):\n\n    if k == 0:\n\n        return 1\n\n    return comb(n-1,k-1) * n \/\/ k\n\nans = 1\n\nfor e in list(d.values()):\n\n    ans *= comb(N+e-1, e)\n\nprint((ans % (10**9+7)))","code_v0_loc":42,"code_v1_loc":18,"code_v0_num_chars":1009,"code_v1_num_chars":410,"code_v0_no_empty_lines":"from math import floor, sqrt\nfrom collections import defaultdict\n\n\ndef factors(n):\n    d = defaultdict(int)\n    for i in range(2, floor(sqrt(n)) + 1):\n        while n % i == 0:\n            n \/\/= i\n            d[i] += 1\n        if n == 1:\n            break\n    if n != 1:\n        d[n] += 1\n    return d\n\n\ndef inv(x, mod):\n    k = mod - 2\n    ret = 1\n    while k > 0:\n        if k & 1:\n            ret = (ret * x) % mod\n        x = (x * x) % mod\n        k >>= 1\n    return ret\n\n\nN, M = list(map(int, input().split()))\nmod = 10**9 + 7\ndic = factors(M)\nK = len(dic)\nSIZE = N + max(dic.values()) if list(dic.values()) else N\nfact = [None] * (SIZE + 1)\nfinv = [None] * (SIZE + 1)\nfact[0] = 1\nfor i in range(1, SIZE + 1):\n    fact[i] = (fact[i - 1] * i) % mod\nfinv[SIZE] = inv(fact[SIZE], mod=mod)\nfor i in range(SIZE, 0, -1):\n    finv[i - 1] = (finv[i] * i) % mod\n\n\ndef comb(n, k):\n    tmp = (finv[k] * finv[n - k]) % mod\n    return (fact[n] * tmp) % mod\n\n\nans = 1\nfor p in dic:\n    ans = (ans * comb(dic[p] + N - 1, dic[p])) % mod\nprint(ans)\n","code_v1_no_empty_lines":"from math import floor, sqrt\nfrom collections import defaultdict\n\nN, M = list(map(int, input().split()))\nd = defaultdict(int)\nfor i in range(2, floor(sqrt(M)) + 1):\n    while M % i == 0:\n        d[i] += 1\n        M \/\/= i\nif M != 1:\n    d[M] += 1\n\n\ndef comb(n, k):\n    if k == 0:\n        return 1\n    return comb(n - 1, k - 1) * n \/\/ k\n\n\nans = 1\nfor e in list(d.values()):\n    ans *= comb(N + e - 1, e)\nprint((ans % (10**9 + 7)))\n","code_same":false,"relative_loc_diff_percent":57.1428571429,"diff":["-","-def factors(n):","-    d = defaultdict(int)","-    for i in range(2, floor(sqrt(n)) + 1):","-        while n % i == 0:","-            n \/\/= i","-            d[i] += 1","-        if n == 1:","-            break","-    if n != 1:","-        d[n] += 1","-    return d","-","-","-def inv(x, mod):","-    k = mod - 2","-    ret = 1","-    while k > 0:","-        if k & 1:","-            ret = (ret * x) % mod","-        x = (x * x) % mod","-        k >>= 1","-    return ret","-","-","-mod = 10**9 + 7","-dic = factors(M)","-K = len(dic)","-SIZE = N + max(dic.values()) if list(dic.values()) else N","-fact = [None] * (SIZE + 1)","-finv = [None] * (SIZE + 1)","-fact[0] = 1","-for i in range(1, SIZE + 1):","-    fact[i] = (fact[i - 1] * i) % mod","-finv[SIZE] = inv(fact[SIZE], mod=mod)","-for i in range(SIZE, 0, -1):","-    finv[i - 1] = (finv[i] * i) % mod","+d = defaultdict(int)","+for i in range(2, floor(sqrt(M)) + 1):","+    while M % i == 0:","+        d[i] += 1","+        M \/\/= i","+if M != 1:","+    d[M] += 1","-    tmp = (finv[k] * finv[n - k]) % mod","-    return (fact[n] * tmp) % mod","+    if k == 0:","+        return 1","+    return comb(n - 1, k - 1) * n \/\/ k","-for p in dic:","-    ans = (ans * comb(dic[p] + N - 1, dic[p])) % mod","-print(ans)","+for e in list(d.values()):","+    ans *= comb(N + e - 1, e)","+print((ans % (10**9 + 7)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3098533685,"measured_runtime_v1":0.2185445104,"runtime_lift":1.4178044005,"key":["s968664754","s390670273"]}
{"user_id":"u118019047","problem_id":"p03416","language":"python","submission_id_v0":"s640144582","submission_id_v1":"s252292470","cpu_time_v0":78,"cpu_time_v1":54,"memory_v0":3060,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":30.77,"input":"a , b = input().split()\n\na = int(a)\n\nb = int(b)\n\ncount=0\n\nfor i in range(a,b+1):\n\n    test = list(str(i))\n\n    if (test[0] == test[4]) and (test[1]==test[3]):\n\n        count=count+1\n\nprint(count)","target":"A,B=list(map(int,input().split()))\n\nct=0\n\nfor i in range(A,B+1):\n\n    s=str(i)\n\n    if s==s[::-1]:\n\n        ct+=1\n\nprint(ct)","code_v0_loc":9,"code_v1_loc":7,"code_v0_num_chars":195,"code_v1_num_chars":118,"code_v0_no_empty_lines":"a, b = input().split()\na = int(a)\nb = int(b)\ncount = 0\nfor i in range(a, b + 1):\n    test = list(str(i))\n    if (test[0] == test[4]) and (test[1] == test[3]):\n        count = count + 1\nprint(count)\n","code_v1_no_empty_lines":"A, B = list(map(int, input().split()))\nct = 0\nfor i in range(A, B + 1):\n    s = str(i)\n    if s == s[::-1]:\n        ct += 1\nprint(ct)\n","code_same":false,"relative_loc_diff_percent":22.2222222222,"diff":["-a, b = input().split()","-a = int(a)","-b = int(b)","-count = 0","-for i in range(a, b + 1):","-    test = list(str(i))","-    if (test[0] == test[4]) and (test[1] == test[3]):","-        count = count + 1","-print(count)","+A, B = list(map(int, input().split()))","+ct = 0","+for i in range(A, B + 1):","+    s = str(i)","+    if s == s[::-1]:","+        ct += 1","+print(ct)"],"diff_only_import_comment":false,"measured_runtime_v0":0.4764800201,"measured_runtime_v1":0.3351052109,"runtime_lift":1.4218818588,"key":["s640144582","s252292470"]}
{"user_id":"u102461423","problem_id":"p03034","language":"python","submission_id_v0":"s230699006","submission_id_v1":"s911725590","cpu_time_v0":873,"cpu_time_v1":348,"memory_v0":18552,"memory_v1":12936,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":60.14,"input":"import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nimport numpy as np\n\n\n\nN = int(readline())\n\nS = np.array(read().split(),np.int64)\n\n\n\ndef F(d):\n\n    # \u516c\u5dee\u3092\u56fa\u5b9a\n\n    L = S[:-d:d].cumsum()\n\n    R = S[::-1][:-d:d].cumsum()\n\n    if (N-1)%d == 0:\n\n        n = (N-1)\/\/d\n\n        x = np.arange(1,n+1)\n\n        bl = (x+x <= n+1)\n\n        L = L[bl]; R = R[bl]\n\n    return (L+R).max()\n\n\n\ndef G(n):\n\n    # \u9805\u6570n+1\u3092\u56fa\u5b9a\n\n    D = (N-1-n)\/\/n\n\n    L = np.zeros(D+1,np.int64)\n\n    R = np.zeros(D+1,np.int64)\n\n    for i in range(1,n+1):\n\n        L += S[:i*(D+1):i]\n\n        R += S[::-1][:i*(D+1):i]\n\n    ok = np.ones(D+1,np.bool)\n\n    overlap = (np.arange(D+1) * (n+n) >= N-1)\n\n    overlap[1:] &= ((N-1)%np.arange(1,D+1) == 0)\n\n    x = L+R\n\n    x[overlap] = 0\n\n    return x.max()\n\n\n\nL = int((N-1)**.5 + 10)\n\nL = min(N-1,L)\n\n\n\nx = max(F(n) for n in range(1,L+1))\n\ny = max(G(n) for n in range(1,L+1))\n\nanswer = max(x,y)\n\nprint(answer)","target":"import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nimport itertools\n\n\n\nN = int(readline())\n\nS = list(map(int,read().split()))\n\n\n\nanswer = 0\n\nfor d in range(1,N):\n\n    n = (N-1)\/\/d\n\n    if (N-1)%d == 0:\n\n        n = ((N-1)\/\/d+1)\/\/2\n\n    if n <= 1:\n\n        continue\n\n    x = max(itertools.accumulate(x+y for x,y in zip(S[d:d*n:d],S[N-1-d:N-1-d*n:-d])))\n\n    if answer < x:\n\n        answer = x\n\n\n\nprint(answer)","code_v0_loc":43,"code_v1_loc":22,"code_v0_num_chars":980,"code_v1_num_chars":479,"code_v0_no_empty_lines":"import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nimport numpy as np\n\nN = int(readline())\nS = np.array(read().split(), np.int64)\n\n\ndef F(d):\n    # \u516c\u5dee\u3092\u56fa\u5b9a\n    L = S[:-d:d].cumsum()\n    R = S[::-1][:-d:d].cumsum()\n    if (N - 1) % d == 0:\n        n = (N - 1) \/\/ d\n        x = np.arange(1, n + 1)\n        bl = x + x <= n + 1\n        L = L[bl]\n        R = R[bl]\n    return (L + R).max()\n\n\ndef G(n):\n    # \u9805\u6570n+1\u3092\u56fa\u5b9a\n    D = (N - 1 - n) \/\/ n\n    L = np.zeros(D + 1, np.int64)\n    R = np.zeros(D + 1, np.int64)\n    for i in range(1, n + 1):\n        L += S[: i * (D + 1) : i]\n        R += S[::-1][: i * (D + 1) : i]\n    ok = np.ones(D + 1, np.bool)\n    overlap = np.arange(D + 1) * (n + n) >= N - 1\n    overlap[1:] &= (N - 1) % np.arange(1, D + 1) == 0\n    x = L + R\n    x[overlap] = 0\n    return x.max()\n\n\nL = int((N - 1) ** 0.5 + 10)\nL = min(N - 1, L)\nx = max(F(n) for n in range(1, L + 1))\ny = max(G(n) for n in range(1, L + 1))\nanswer = max(x, y)\nprint(answer)\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nimport itertools\n\nN = int(readline())\nS = list(map(int, read().split()))\nanswer = 0\nfor d in range(1, N):\n    n = (N - 1) \/\/ d\n    if (N - 1) % d == 0:\n        n = ((N - 1) \/\/ d + 1) \/\/ 2\n    if n <= 1:\n        continue\n    x = max(\n        itertools.accumulate(\n            x + y for x, y in zip(S[d : d * n : d], S[N - 1 - d : N - 1 - d * n : -d])\n        )\n    )\n    if answer < x:\n        answer = x\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":48.8372093023,"diff":["-import numpy as np","+import itertools","-S = np.array(read().split(), np.int64)","-","-","-def F(d):","-    # \u516c\u5dee\u3092\u56fa\u5b9a","-    L = S[:-d:d].cumsum()","-    R = S[::-1][:-d:d].cumsum()","+S = list(map(int, read().split()))","+answer = 0","+for d in range(1, N):","+    n = (N - 1) \/\/ d","-        n = (N - 1) \/\/ d","-        x = np.arange(1, n + 1)","-        bl = x + x <= n + 1","-        L = L[bl]","-        R = R[bl]","-    return (L + R).max()","-","-","-def G(n):","-    # \u9805\u6570n+1\u3092\u56fa\u5b9a","-    D = (N - 1 - n) \/\/ n","-    L = np.zeros(D + 1, np.int64)","-    R = np.zeros(D + 1, np.int64)","-    for i in range(1, n + 1):","-        L += S[: i * (D + 1) : i]","-        R += S[::-1][: i * (D + 1) : i]","-    ok = np.ones(D + 1, np.bool)","-    overlap = np.arange(D + 1) * (n + n) >= N - 1","-    overlap[1:] &= (N - 1) % np.arange(1, D + 1) == 0","-    x = L + R","-    x[overlap] = 0","-    return x.max()","-","-","-L = int((N - 1) ** 0.5 + 10)","-L = min(N - 1, L)","-x = max(F(n) for n in range(1, L + 1))","-y = max(G(n) for n in range(1, L + 1))","-answer = max(x, y)","+        n = ((N - 1) \/\/ d + 1) \/\/ 2","+    if n <= 1:","+        continue","+    x = max(","+        itertools.accumulate(","+            x + y for x, y in zip(S[d : d * n : d], S[N - 1 - d : N - 1 - d * n : -d])","+        )","+    )","+    if answer < x:","+        answer = x"],"diff_only_import_comment":false,"measured_runtime_v0":1.5818065369,"measured_runtime_v1":0.2384125237,"runtime_lift":6.634745994,"key":["s230699006","s911725590"]}
{"user_id":"u562016607","problem_id":"p03835","language":"python","submission_id_v0":"s390314187","submission_id_v1":"s016239384","cpu_time_v0":1476,"cpu_time_v1":282,"memory_v0":2940,"memory_v1":41180,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":80.89,"input":"K,S=list(map(int,input().split()))\n\nO=0\n\nfor X in range(K+1):\n\n  for Y in range(K+1):\n\n    Z=S-X-Y\n\n    if 0<=Z<=K:\n\n      O+=1\n\nprint(O)\n","target":"K,S=list(map(int,input().split()))\n\nans=0\n\nfor X in range(K+1):\n\n    for Y in range(K+1):\n\n        Z=S-X-Y\n\n        if 0<=Z<=K:\n\n            ans+=1\n\nprint(ans)\n","code_v0_loc":8,"code_v1_loc":8,"code_v0_num_chars":132,"code_v1_num_chars":154,"code_v0_no_empty_lines":"K, S = list(map(int, input().split()))\nO = 0\nfor X in range(K + 1):\n    for Y in range(K + 1):\n        Z = S - X - Y\n        if 0 <= Z <= K:\n            O += 1\nprint(O)\n","code_v1_no_empty_lines":"K, S = list(map(int, input().split()))\nans = 0\nfor X in range(K + 1):\n    for Y in range(K + 1):\n        Z = S - X - Y\n        if 0 <= Z <= K:\n            ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-O = 0","+ans = 0","-            O += 1","-print(O)","+            ans += 1","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2257852338,"measured_runtime_v1":0.0060590109,"runtime_lift":37.2643715379,"key":["s390314187","s016239384"]}
{"user_id":"u631277801","problem_id":"p04020","language":"python","submission_id_v0":"s879592559","submission_id_v1":"s107006666","cpu_time_v0":164,"cpu_time_v1":99,"memory_v0":19100,"memory_v1":7072,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":39.63,"input":"import sys\n\nstdin = sys.stdin\n\n \n\nsys.setrecursionlimit(10**8) \n\n \n\ndef li(): return list(map(int, stdin.readline().split()))\n\ndef li_(): return [int(x)-1 for x in stdin.readline().split()]\n\ndef lf(): return list(map(float, stdin.readline().split()))\n\ndef ls(): return stdin.readline().split()\n\ndef ns(): return stdin.readline().rstrip()\n\ndef lc(): return list(ns())\n\ndef ni(): return int(stdin.readline())\n\ndef nf(): return float(stdin.readline())\n\n\n\n\n\nn = ni()\n\na = [ni() for _ in range(n)]\n\n\n\ncnt = {i+1: ai for i, ai in enumerate(a)}\n\n\n\nprev = -100\n\ncur = 0\n\nans = 0\n\nfor key in sorted(cnt.keys()):\n\n    if cnt[key] == 0:\n\n        continue\n\n    \n\n    if prev == -100:\n\n        prev = key\n\n    \n\n    if (key-prev) < 2:\n\n        cur += cnt[key]\n\n    else:\n\n        cur = cnt[key]\n\n        \n\n    ans += cur \/\/ 2\n\n    cur -= 2 * (cur\/\/2)\n\n    \n\n    prev = key\n\n        \n\nprint(ans)","target":"import sys\n\nstdin = sys.stdin\n\n\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\ndef li(): return list(map(int, stdin.readline().split()))\n\ndef li_(): return [int(x) - 1 for x in stdin.readline().split()]\n\ndef lf(): return list(map(float, stdin.readline().split()))\n\ndef ls(): return stdin.readline().split()\n\ndef ns(): return stdin.readline().rstrip()\n\ndef lc(): return list(ns())\n\ndef ni(): return int(stdin.readline())\n\ndef nf(): return float(stdin.readline())\n\n\n\nn = ni()\n\n\n\nans = 0\n\nplus = 0\n\na = [ni() for _ in range(n)]\n\n\n\nfor ai in a:\n\n    ans += ((ai+plus) \/\/ 2)\n\n    plus = (ai+plus) % 2 if ai > 0 else 0\n\n\n\nprint(ans)","code_v0_loc":41,"code_v1_loc":25,"code_v0_num_chars":874,"code_v1_num_chars":607,"code_v0_no_empty_lines":"import sys\n\nstdin = sys.stdin\nsys.setrecursionlimit(10**8)\n\n\ndef li():\n    return list(map(int, stdin.readline().split()))\n\n\ndef li_():\n    return [int(x) - 1 for x in stdin.readline().split()]\n\n\ndef lf():\n    return list(map(float, stdin.readline().split()))\n\n\ndef ls():\n    return stdin.readline().split()\n\n\ndef ns():\n    return stdin.readline().rstrip()\n\n\ndef lc():\n    return list(ns())\n\n\ndef ni():\n    return int(stdin.readline())\n\n\ndef nf():\n    return float(stdin.readline())\n\n\nn = ni()\na = [ni() for _ in range(n)]\ncnt = {i + 1: ai for i, ai in enumerate(a)}\nprev = -100\ncur = 0\nans = 0\nfor key in sorted(cnt.keys()):\n    if cnt[key] == 0:\n        continue\n    if prev == -100:\n        prev = key\n    if (key - prev) < 2:\n        cur += cnt[key]\n    else:\n        cur = cnt[key]\n    ans += cur \/\/ 2\n    cur -= 2 * (cur \/\/ 2)\n    prev = key\nprint(ans)\n","code_v1_no_empty_lines":"import sys\n\nstdin = sys.stdin\nsys.setrecursionlimit(10**7)\n\n\ndef li():\n    return list(map(int, stdin.readline().split()))\n\n\ndef li_():\n    return [int(x) - 1 for x in stdin.readline().split()]\n\n\ndef lf():\n    return list(map(float, stdin.readline().split()))\n\n\ndef ls():\n    return stdin.readline().split()\n\n\ndef ns():\n    return stdin.readline().rstrip()\n\n\ndef lc():\n    return list(ns())\n\n\ndef ni():\n    return int(stdin.readline())\n\n\ndef nf():\n    return float(stdin.readline())\n\n\nn = ni()\nans = 0\nplus = 0\na = [ni() for _ in range(n)]\nfor ai in a:\n    ans += (ai + plus) \/\/ 2\n    plus = (ai + plus) % 2 if ai > 0 else 0\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":39.0243902439,"diff":["-sys.setrecursionlimit(10**8)","+sys.setrecursionlimit(10**7)","+ans = 0","+plus = 0","-cnt = {i + 1: ai for i, ai in enumerate(a)}","-prev = -100","-cur = 0","-ans = 0","-for key in sorted(cnt.keys()):","-    if cnt[key] == 0:","-        continue","-    if prev == -100:","-        prev = key","-    if (key - prev) < 2:","-        cur += cnt[key]","-    else:","-        cur = cnt[key]","-    ans += cur \/\/ 2","-    cur -= 2 * (cur \/\/ 2)","-    prev = key","+for ai in a:","+    ans += (ai + plus) \/\/ 2","+    plus = (ai + plus) % 2 if ai > 0 else 0"],"diff_only_import_comment":false,"measured_runtime_v0":0.2743015865,"measured_runtime_v1":0.1203746786,"runtime_lift":2.278731621,"key":["s879592559","s107006666"]}
{"user_id":"u761529120","problem_id":"p03164","language":"python","submission_id_v0":"s478711084","submission_id_v1":"s154638745","cpu_time_v0":1151,"cpu_time_v1":682,"memory_v0":312192,"memory_v1":334552,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":40.75,"input":"def main():\n\n    N, W = list(map(int, input().split()))\n\n    w = [0] * N\n\n    v = [0] * N\n\n    for i in range(N):\n\n        w[i], v[i] = list(map(int, input().split()))\n\n\n\n    max_v = max(v)\n\n    dp = [[float('inf')] * (max_v * N + 5) for _ in range(N + 5)]\n\n\n\n    dp[0][0] = 0\n\n\n\n    for i in range(N):\n\n        for j in range(max_v * N):\n\n            if j + v[i] <= max_v * N:\n\n                dp[i+1][j + v[i]] = min(dp[i+1][j + v[i]], dp[i][j] + w[i])\n\n            dp[i+1][j] = min(dp[i+1][j], dp[i][j]) \n\n\n\n    ans = 0\n\n    for j in range(max_v * N + 1):\n\n        if dp[N][j] <= W:\n\n            ans = j\n\n\n\n    print(ans)\n\n\n\nif __name__ == \"__main__\":\n\n    main()","target":"def main():\n\n    N, W = list(map(int, input().split()))\n\n    weight = [0] * N\n\n    value = [0] * N\n\n    for i in range(N):\n\n        weight[i], value[i] = list(map(int, input().split()))\n\n    V = sum(value)\n\n    dp = [[float('inf')] * (V + 5) for _ in range(N + 5)]\n\n    dp[0][0] = 0\n\n    for i in range(N):\n\n        for v in range(V+1):\n\n            if v - value[i] >= 0:\n\n                dp[i+1][v] = min(dp[i][v-value[i]] + weight[i], dp[i][v])\n\n            else:\n\n                dp[i+1][v] = dp[i][v]\n\n    ans = 0\n\n    for v in range(V+1):\n\n        if dp[N][v] <= W:\n\n            ans = v\n\n    print(ans)\n\n\n\nif __name__ == \"__main__\":\n\n    main()","code_v0_loc":27,"code_v1_loc":23,"code_v0_num_chars":654,"code_v1_num_chars":637,"code_v0_no_empty_lines":"def main():\n    N, W = list(map(int, input().split()))\n    w = [0] * N\n    v = [0] * N\n    for i in range(N):\n        w[i], v[i] = list(map(int, input().split()))\n    max_v = max(v)\n    dp = [[float(\"inf\")] * (max_v * N + 5) for _ in range(N + 5)]\n    dp[0][0] = 0\n    for i in range(N):\n        for j in range(max_v * N):\n            if j + v[i] <= max_v * N:\n                dp[i + 1][j + v[i]] = min(dp[i + 1][j + v[i]], dp[i][j] + w[i])\n            dp[i + 1][j] = min(dp[i + 1][j], dp[i][j])\n    ans = 0\n    for j in range(max_v * N + 1):\n        if dp[N][j] <= W:\n            ans = j\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def main():\n    N, W = list(map(int, input().split()))\n    weight = [0] * N\n    value = [0] * N\n    for i in range(N):\n        weight[i], value[i] = list(map(int, input().split()))\n    V = sum(value)\n    dp = [[float(\"inf\")] * (V + 5) for _ in range(N + 5)]\n    dp[0][0] = 0\n    for i in range(N):\n        for v in range(V + 1):\n            if v - value[i] >= 0:\n                dp[i + 1][v] = min(dp[i][v - value[i]] + weight[i], dp[i][v])\n            else:\n                dp[i + 1][v] = dp[i][v]\n    ans = 0\n    for v in range(V + 1):\n        if dp[N][v] <= W:\n            ans = v\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":14.8148148148,"diff":["-    w = [0] * N","-    v = [0] * N","+    weight = [0] * N","+    value = [0] * N","-        w[i], v[i] = list(map(int, input().split()))","-    max_v = max(v)","-    dp = [[float(\"inf\")] * (max_v * N + 5) for _ in range(N + 5)]","+        weight[i], value[i] = list(map(int, input().split()))","+    V = sum(value)","+    dp = [[float(\"inf\")] * (V + 5) for _ in range(N + 5)]","-        for j in range(max_v * N):","-            if j + v[i] <= max_v * N:","-                dp[i + 1][j + v[i]] = min(dp[i + 1][j + v[i]], dp[i][j] + w[i])","-            dp[i + 1][j] = min(dp[i + 1][j], dp[i][j])","+        for v in range(V + 1):","+            if v - value[i] >= 0:","+                dp[i + 1][v] = min(dp[i][v - value[i]] + weight[i], dp[i][v])","+            else:","+                dp[i + 1][v] = dp[i][v]","-    for j in range(max_v * N + 1):","-        if dp[N][j] <= W:","-            ans = j","+    for v in range(V + 1):","+        if dp[N][v] <= W:","+            ans = v"],"diff_only_import_comment":false,"measured_runtime_v0":0.2676751952,"measured_runtime_v1":0.1215952404,"runtime_lift":2.2013624416,"key":["s478711084","s154638745"]}
{"user_id":"u208713671","problem_id":"p03038","language":"python","submission_id_v0":"s801223812","submission_id_v1":"s234548187","cpu_time_v0":968,"cpu_time_v1":337,"memory_v0":44132,"memory_v1":115244,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":65.19,"input":"import numpy as np\n\nNM = list(map(int,input().split()))\n\nN = NM[0]\n\nM = NM[1]\n\nA = list(map(int,input().split()))\n\nlistBC =[]\n\nwhile True:\n\n    try:\n\n        listBC.append(list(map(int,input().split())))\n\n    except:\n\n        break;\n\nBC = np.array(listBC)\n\nBCnum = np.argsort(BC[:,1])[::-1]\n\nBC = BC[BCnum,:]\n\n\n\nA.sort()\n\nj=0\n\nfor i in range(len(A)):\n\n    times = BC[j,0]\n\n    if BC[j,0]==0:\n\n        j+=1\n\n        if j == BC.shape[0]:\n\n            break\n\n        times = BC[j,0]\n\n    if A[i]<BC[j,1]:\n\n        A[i]=BC[j,1]\n\n        BC[j,0] += -1\n\noutput = sum(A)\n\nprint(output)","target":"N,M = list(map(int,input().split()))\n\nA = list(map(int,input().split()))\n\n\n\nfrom collections import Counter\n\nD = dict(Counter(A))\n\n\n\nfor i in range(M):\n\n    B,C = list(map(int,input().split()))\n\n    D[C]=D.get(C,0)+B\n\n\n\nK = sorted(list(D.keys()),reverse=True)\n\n\n\nout = 0\n\ncnt = 0\n\nnow = 0\n\nwhile cnt<=N-1:\n\n    if D[K[now]]>0:\n\n        out += K[now]\n\n        D[K[now]] += -1\n\n        cnt+=1\n\n    else:\n\n        now+=1\n\nprint(out)","code_v0_loc":29,"code_v1_loc":23,"code_v0_num_chars":578,"code_v1_num_chars":429,"code_v0_no_empty_lines":"import numpy as np\n\nNM = list(map(int, input().split()))\nN = NM[0]\nM = NM[1]\nA = list(map(int, input().split()))\nlistBC = []\nwhile True:\n    try:\n        listBC.append(list(map(int, input().split())))\n    except:\n        break\nBC = np.array(listBC)\nBCnum = np.argsort(BC[:, 1])[::-1]\nBC = BC[BCnum, :]\nA.sort()\nj = 0\nfor i in range(len(A)):\n    times = BC[j, 0]\n    if BC[j, 0] == 0:\n        j += 1\n        if j == BC.shape[0]:\n            break\n        times = BC[j, 0]\n    if A[i] < BC[j, 1]:\n        A[i] = BC[j, 1]\n        BC[j, 0] += -1\noutput = sum(A)\nprint(output)\n","code_v1_no_empty_lines":"N, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\nfrom collections import Counter\n\nD = dict(Counter(A))\nfor i in range(M):\n    B, C = list(map(int, input().split()))\n    D[C] = D.get(C, 0) + B\nK = sorted(list(D.keys()), reverse=True)\nout = 0\ncnt = 0\nnow = 0\nwhile cnt <= N - 1:\n    if D[K[now]] > 0:\n        out += K[now]\n        D[K[now]] += -1\n        cnt += 1\n    else:\n        now += 1\nprint(out)\n","code_same":false,"relative_loc_diff_percent":20.6896551724,"diff":["-import numpy as np","+N, M = list(map(int, input().split()))","+A = list(map(int, input().split()))","+from collections import Counter","-NM = list(map(int, input().split()))","-N = NM[0]","-M = NM[1]","-A = list(map(int, input().split()))","-listBC = []","-while True:","-    try:","-        listBC.append(list(map(int, input().split())))","-    except:","-        break","-BC = np.array(listBC)","-BCnum = np.argsort(BC[:, 1])[::-1]","-BC = BC[BCnum, :]","-A.sort()","-j = 0","-for i in range(len(A)):","-    times = BC[j, 0]","-    if BC[j, 0] == 0:","-        j += 1","-        if j == BC.shape[0]:","-            break","-        times = BC[j, 0]","-    if A[i] < BC[j, 1]:","-        A[i] = BC[j, 1]","-        BC[j, 0] += -1","-output = sum(A)","-print(output)","+D = dict(Counter(A))","+for i in range(M):","+    B, C = list(map(int, input().split()))","+    D[C] = D.get(C, 0) + B","+K = sorted(list(D.keys()), reverse=True)","+out = 0","+cnt = 0","+now = 0","+while cnt <= N - 1:","+    if D[K[now]] > 0:","+        out += K[now]","+        D[K[now]] += -1","+        cnt += 1","+    else:","+        now += 1","+print(out)"],"diff_only_import_comment":false,"measured_runtime_v0":1.3117765622,"measured_runtime_v1":0.2034162543,"runtime_lift":6.4487302983,"key":["s801223812","s234548187"]}
{"user_id":"u812576525","problem_id":"p03309","language":"python","submission_id_v0":"s649374585","submission_id_v1":"s527849910","cpu_time_v0":249,"cpu_time_v1":171,"memory_v0":26180,"memory_v1":30980,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":31.33,"input":"n = int(eval(input()))\n\na = list(map(int,input().split()))\n\naa = []\n\nfor i in range(n):\n\n    aa.append(a[i]-(i+1))\n\nb = (sorted(aa)[n\/\/2])\n\n\n\nans = 0\n\nfor i in range(n):\n\n    ans += abs(a[i]-(b+i+1))\n\nprint(ans)","target":"N= int(eval(input()))\n\nA = list(map(int,input().split()))\n\n\n\nB = []\n\nfor i in range(N):\n\n    B.append(A[i]-(i+1))\n\n#print(B)\n\nb= (sorted(B)[N\/\/2])\n\n#print(b)\n\nans = 0\n\nfor i in range(N):\n\n    ans += abs(B[i]-b)\n\nprint(ans)","code_v0_loc":11,"code_v1_loc":13,"code_v0_num_chars":205,"code_v1_num_chars":216,"code_v0_no_empty_lines":"n = int(eval(input()))\na = list(map(int, input().split()))\naa = []\nfor i in range(n):\n    aa.append(a[i] - (i + 1))\nb = sorted(aa)[n \/\/ 2]\nans = 0\nfor i in range(n):\n    ans += abs(a[i] - (b + i + 1))\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = list(map(int, input().split()))\nB = []\nfor i in range(N):\n    B.append(A[i] - (i + 1))\n# print(B)\nb = sorted(B)[N \/\/ 2]\n# print(b)\nans = 0\nfor i in range(N):\n    ans += abs(B[i] - b)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":15.3846153846,"diff":["-n = int(eval(input()))","-a = list(map(int, input().split()))","-aa = []","-for i in range(n):","-    aa.append(a[i] - (i + 1))","-b = sorted(aa)[n \/\/ 2]","+N = int(eval(input()))","+A = list(map(int, input().split()))","+B = []","+for i in range(N):","+    B.append(A[i] - (i + 1))","+# print(B)","+b = sorted(B)[N \/\/ 2]","+# print(b)","-for i in range(n):","-    ans += abs(a[i] - (b + i + 1))","+for i in range(N):","+    ans += abs(B[i] - b)"],"diff_only_import_comment":false,"measured_runtime_v0":0.277994447,"measured_runtime_v1":0.0063325391,"runtime_lift":43.8993653214,"key":["s649374585","s527849910"]}
{"user_id":"u864197622","problem_id":"p02794","language":"python","submission_id_v0":"s167224132","submission_id_v1":"s245735210","cpu_time_v0":294,"cpu_time_v1":228,"memory_v0":50156,"memory_v1":49128,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":22.45,"input":"N = int(eval(input()))\n\nX = [[] for i in range(N)]\n\nfor i in range(N-1):\n\n    x, y = list(map(int, input().split()))\n\n    X[x-1].append(y-1)\n\n    X[y-1].append(x-1)\n\n\n\nP = [-1] * N\n\nDE = [0] * N\n\nQ = [0]\n\nwhile Q:\n\n    i = Q.pop()\n\n    for a in X[i][::-1]:\n\n        if a != P[i]:\n\n            P[a] = i\n\n            DE[a] = DE[i] + 1\n\n            X[a].remove(i)\n\n            Q.append(a)\n\n\n\ndef lp(u, v):\n\n    t = 0\n\n    while u != v:\n\n        if DE[u] > DE[v]:\n\n            t += 1 << u-1\n\n            u = P[u]\n\n        elif DE[u] < DE[v]:\n\n            t += 1 << v-1\n\n            v = P[v]\n\n        else:\n\n            t += 1 << u-1\n\n            t += 1 << v-1\n\n            u = P[u]\n\n            v = P[v]\n\n    \n\n    return t\n\n\n\nY = []\n\nM = int(eval(input()))\n\nfor _ in range(M):\n\n    a, b = list(map(int, input().split()))\n\n    a, b = a-1, b-1\n\n    Y.append(lp(a, b))\n\n\n\nD = {1<<i: i for i in range(50)}\n\nZ = [0] * (1<<M)\n\nans = 0\n\nCC = [0] * N\n\nBC = [0] * (1<<17)\n\nfor m in range(1, 1<<17):\n\n    a = m & (-m)\n\n    BC[m] = BC[m^a] + 1\n\nfor m in range(1<<M):\n\n    a = m & (-m)\n\n    if a == m:\n\n        if a == 0:\n\n            Z[m] = 0\n\n        else:\n\n            Z[m] = Y[D[a]]\n\n    else:\n\n        Z[m] = Z[m^a] | Y[D[a]]\n\n    \n\n    aa = Z[m]\n\n    bc = BC[aa % (1<<17)]\n\n    aa >>= 17\n\n    bc += BC[aa % (1<<17)]\n\n    aa >>= 17\n\n    bc += BC[aa]\n\n    CC[N - 1 - bc] += (1 if BC[m%1024] + BC[m>>10] & 1 == 0 else -1)\n\n\n\nprint((sum([2 ** i * CC[i] for i in range(N)])))","target":"N = int(eval(input()))\n\nX = [[] for i in range(N)]\n\nfor i in range(N-1):\n\n    x, y = list(map(int, input().split()))\n\n    X[x-1].append(y-1)\n\n    X[y-1].append(x-1)\n\n\n\nP = [-1] * N\n\nDE = [0] * N\n\nQ = [0]\n\nwhile Q:\n\n    i = Q.pop()\n\n    for a in X[i][::-1]:\n\n        if a != P[i]:\n\n            P[a] = i\n\n            DE[a] = DE[i] + 1\n\n            X[a].remove(i)\n\n            Q.append(a)\n\n\n\ndef lp(u, v):\n\n    t = 0\n\n    while u != v:\n\n        if DE[u] > DE[v]:\n\n            t += 1 << u-1\n\n            u = P[u]\n\n        elif DE[u] < DE[v]:\n\n            t += 1 << v-1\n\n            v = P[v]\n\n        else:\n\n            t += 1 << u-1\n\n            t += 1 << v-1\n\n            u = P[u]\n\n            v = P[v]\n\n    \n\n    return t\n\n\n\nY = []\n\nM = int(eval(input()))\n\nfor _ in range(M):\n\n    a, b = list(map(int, input().split()))\n\n    a, b = a-1, b-1\n\n    Y.append(lp(a, b))\n\n\n\ndef popcnt(n):\n\n    c = (n & 0x5555555555555555) + ((n>>1) & 0x5555555555555555)\n\n    c = (c & 0x3333333333333333) + ((c>>2) & 0x3333333333333333)\n\n    c = (c & 0x0f0f0f0f0f0f0f0f) + ((c>>4) & 0x0f0f0f0f0f0f0f0f)\n\n    c = (c & 0x00ff00ff00ff00ff) + ((c>>8) & 0x00ff00ff00ff00ff)\n\n    c = (c & 0x0000ffff0000ffff) + ((c>>16) & 0x0000ffff0000ffff)\n\n    c = (c & 0x00000000ffffffff) + ((c>>32) & 0x00000000ffffffff)\n\n    return c\n\n\n\nD = {1<<i: i for i in range(50)}\n\nZ = [0] * (1<<M)\n\nans = 0\n\nCC = [0] * N\n\nfor m in range(1<<M):\n\n    a = m & (-m)\n\n    if a == m:\n\n        if a == 0:\n\n            Z[m] = 0\n\n        else:\n\n            Z[m] = Y[D[a]]\n\n    else:\n\n        Z[m] = Z[m^a] | Y[D[a]]\n\n    \n\n    CC[N - 1 - popcnt(Z[m])] += (1 if popcnt(m) & 1 == 0 else -1)\n\n\n\nprint((sum([2 ** i * CC[i] for i in range(N)])))","code_v0_loc":70,"code_v1_loc":69,"code_v0_num_chars":1435,"code_v1_num_chars":1654,"code_v0_no_empty_lines":"N = int(eval(input()))\nX = [[] for i in range(N)]\nfor i in range(N - 1):\n    x, y = list(map(int, input().split()))\n    X[x - 1].append(y - 1)\n    X[y - 1].append(x - 1)\nP = [-1] * N\nDE = [0] * N\nQ = [0]\nwhile Q:\n    i = Q.pop()\n    for a in X[i][::-1]:\n        if a != P[i]:\n            P[a] = i\n            DE[a] = DE[i] + 1\n            X[a].remove(i)\n            Q.append(a)\n\n\ndef lp(u, v):\n    t = 0\n    while u != v:\n        if DE[u] > DE[v]:\n            t += 1 << u - 1\n            u = P[u]\n        elif DE[u] < DE[v]:\n            t += 1 << v - 1\n            v = P[v]\n        else:\n            t += 1 << u - 1\n            t += 1 << v - 1\n            u = P[u]\n            v = P[v]\n    return t\n\n\nY = []\nM = int(eval(input()))\nfor _ in range(M):\n    a, b = list(map(int, input().split()))\n    a, b = a - 1, b - 1\n    Y.append(lp(a, b))\nD = {1 << i: i for i in range(50)}\nZ = [0] * (1 << M)\nans = 0\nCC = [0] * N\nBC = [0] * (1 << 17)\nfor m in range(1, 1 << 17):\n    a = m & (-m)\n    BC[m] = BC[m ^ a] + 1\nfor m in range(1 << M):\n    a = m & (-m)\n    if a == m:\n        if a == 0:\n            Z[m] = 0\n        else:\n            Z[m] = Y[D[a]]\n    else:\n        Z[m] = Z[m ^ a] | Y[D[a]]\n    aa = Z[m]\n    bc = BC[aa % (1 << 17)]\n    aa >>= 17\n    bc += BC[aa % (1 << 17)]\n    aa >>= 17\n    bc += BC[aa]\n    CC[N - 1 - bc] += 1 if BC[m % 1024] + BC[m >> 10] & 1 == 0 else -1\nprint((sum([2**i * CC[i] for i in range(N)])))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nX = [[] for i in range(N)]\nfor i in range(N - 1):\n    x, y = list(map(int, input().split()))\n    X[x - 1].append(y - 1)\n    X[y - 1].append(x - 1)\nP = [-1] * N\nDE = [0] * N\nQ = [0]\nwhile Q:\n    i = Q.pop()\n    for a in X[i][::-1]:\n        if a != P[i]:\n            P[a] = i\n            DE[a] = DE[i] + 1\n            X[a].remove(i)\n            Q.append(a)\n\n\ndef lp(u, v):\n    t = 0\n    while u != v:\n        if DE[u] > DE[v]:\n            t += 1 << u - 1\n            u = P[u]\n        elif DE[u] < DE[v]:\n            t += 1 << v - 1\n            v = P[v]\n        else:\n            t += 1 << u - 1\n            t += 1 << v - 1\n            u = P[u]\n            v = P[v]\n    return t\n\n\nY = []\nM = int(eval(input()))\nfor _ in range(M):\n    a, b = list(map(int, input().split()))\n    a, b = a - 1, b - 1\n    Y.append(lp(a, b))\n\n\ndef popcnt(n):\n    c = (n & 0x5555555555555555) + ((n >> 1) & 0x5555555555555555)\n    c = (c & 0x3333333333333333) + ((c >> 2) & 0x3333333333333333)\n    c = (c & 0x0F0F0F0F0F0F0F0F) + ((c >> 4) & 0x0F0F0F0F0F0F0F0F)\n    c = (c & 0x00FF00FF00FF00FF) + ((c >> 8) & 0x00FF00FF00FF00FF)\n    c = (c & 0x0000FFFF0000FFFF) + ((c >> 16) & 0x0000FFFF0000FFFF)\n    c = (c & 0x00000000FFFFFFFF) + ((c >> 32) & 0x00000000FFFFFFFF)\n    return c\n\n\nD = {1 << i: i for i in range(50)}\nZ = [0] * (1 << M)\nans = 0\nCC = [0] * N\nfor m in range(1 << M):\n    a = m & (-m)\n    if a == m:\n        if a == 0:\n            Z[m] = 0\n        else:\n            Z[m] = Y[D[a]]\n    else:\n        Z[m] = Z[m ^ a] | Y[D[a]]\n    CC[N - 1 - popcnt(Z[m])] += 1 if popcnt(m) & 1 == 0 else -1\nprint((sum([2**i * CC[i] for i in range(N)])))\n","code_same":false,"relative_loc_diff_percent":1.4285714286,"diff":["+","+","+def popcnt(n):","+    c = (n & 0x5555555555555555) + ((n >> 1) & 0x5555555555555555)","+    c = (c & 0x3333333333333333) + ((c >> 2) & 0x3333333333333333)","+    c = (c & 0x0F0F0F0F0F0F0F0F) + ((c >> 4) & 0x0F0F0F0F0F0F0F0F)","+    c = (c & 0x00FF00FF00FF00FF) + ((c >> 8) & 0x00FF00FF00FF00FF)","+    c = (c & 0x0000FFFF0000FFFF) + ((c >> 16) & 0x0000FFFF0000FFFF)","+    c = (c & 0x00000000FFFFFFFF) + ((c >> 32) & 0x00000000FFFFFFFF)","+    return c","+","+","-BC = [0] * (1 << 17)","-for m in range(1, 1 << 17):","-    a = m & (-m)","-    BC[m] = BC[m ^ a] + 1","-    aa = Z[m]","-    bc = BC[aa % (1 << 17)]","-    aa >>= 17","-    bc += BC[aa % (1 << 17)]","-    aa >>= 17","-    bc += BC[aa]","-    CC[N - 1 - bc] += 1 if BC[m % 1024] + BC[m >> 10] & 1 == 0 else -1","+    CC[N - 1 - popcnt(Z[m])] += 1 if popcnt(m) & 1 == 0 else -1"],"diff_only_import_comment":false,"measured_runtime_v0":0.4825011034,"measured_runtime_v1":0.2223737774,"runtime_lift":2.1697751823,"key":["s167224132","s245735210"]}
{"user_id":"u638282348","problem_id":"p03720","language":"python","submission_id_v0":"s487647415","submission_id_v1":"s133103425","cpu_time_v0":149,"cpu_time_v1":18,"memory_v0":12500,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.92,"input":"import numpy as np\n\n\n\nncity, nlines = list(map(int, input().rstrip(\"\\n\").split()))\n\nmatrix = np.zeros((ncity, ncity), dtype=int)\n\nfor _ in range(nlines):\n\n    l, c = [int(x) - 1 for x in input().rstrip(\"\\n\").split()]\n\n    matrix[l][c] += 1\n\n    matrix[c][l] += 1\n\n\n\nfor list_ in matrix:\n\n    print((sum(list_)))","target":"n, m = map(int, input().split())\n\nroads = [0] * n\n\n[exec(\"roads[%d] += 1; roads[%d] += 1\" % tuple(map(lambda c: int(c) - 1, input().split()))) for _ in range(m)]\n\nprint(*roads, sep=\"\\n\", end=\"\")\n","code_v0_loc":11,"code_v1_loc":4,"code_v0_num_chars":308,"code_v1_num_chars":195,"code_v0_no_empty_lines":"import numpy as np\n\nncity, nlines = list(map(int, input().rstrip(\"\\n\").split()))\nmatrix = np.zeros((ncity, ncity), dtype=int)\nfor _ in range(nlines):\n    l, c = [int(x) - 1 for x in input().rstrip(\"\\n\").split()]\n    matrix[l][c] += 1\n    matrix[c][l] += 1\nfor list_ in matrix:\n    print((sum(list_)))\n","code_v1_no_empty_lines":"n, m = map(int, input().split())\nroads = [0] * n\n[\n    exec(\n        \"roads[%d] += 1; roads[%d] += 1\"\n        % tuple(map(lambda c: int(c) - 1, input().split()))\n    )\n    for _ in range(m)\n]\nprint(*roads, sep=\"\\n\", end=\"\")\n","code_same":false,"relative_loc_diff_percent":63.6363636364,"diff":["-import numpy as np","-","-ncity, nlines = list(map(int, input().rstrip(\"\\n\").split()))","-matrix = np.zeros((ncity, ncity), dtype=int)","-for _ in range(nlines):","-    l, c = [int(x) - 1 for x in input().rstrip(\"\\n\").split()]","-    matrix[l][c] += 1","-    matrix[c][l] += 1","-for list_ in matrix:","-    print((sum(list_)))","+n, m = map(int, input().split())","+roads = [0] * n","+[","+    exec(","+        \"roads[%d] += 1; roads[%d] += 1\"","+        % tuple(map(lambda c: int(c) - 1, input().split()))","+    )","+    for _ in range(m)","+]","+print(*roads, sep=\"\\n\", end=\"\")"],"diff_only_import_comment":false,"measured_runtime_v0":1.5392445521,"measured_runtime_v1":0.2919934719,"runtime_lift":5.2715033054,"key":["s487647415","s133103425"]}
{"user_id":"u732061897","problem_id":"p03273","language":"python","submission_id_v0":"s132976376","submission_id_v1":"s531161710","cpu_time_v0":40,"cpu_time_v1":32,"memory_v0":9468,"memory_v1":9364,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":20.0,"input":"H, W = list(map(int, input().split()))\n\nHW_list = [list(eval(input())) for i in range(H)]\n\nimport copy\n\n\n\ntmp = copy.deepcopy(HW_list)\n\nh_index = 0\n\nfor i, HW in enumerate(HW_list):\n\n    is_all_shiro = True\n\n    for hw in HW:\n\n        if hw == '#':\n\n            is_all_shiro = False\n\n            h_index += 1\n\n            break\n\n    if is_all_shiro:\n\n        tmp.pop(h_index)\n\nw_index = 0\n\nans = copy.deepcopy(tmp)\n\nfor w in range(W):\n\n    is_all_shiro = True\n\n    for t in tmp:\n\n        if t[w] == '#':\n\n            is_all_shiro = False\n\n            w_index += 1\n\n            break\n\n    if is_all_shiro:\n\n        for a in ans:\n\n            a.pop(w_index)\n\nfor A in ans:\n\n    print((''.join(A)))\n","target":"H, W = list(map(int, input().split()))\n\nHW_list = [list(eval(input())) for i in range(H)]\n\nimport copy\n\n\n\ntate = [False] * H\n\nyoko = [False] * W\n\n\n\nfor h in range(H):\n\n    for w in range(W):\n\n        if HW_list[h][w] == '#':\n\n            tate[h] = True\n\n            yoko[w] = True\n\n\n\nfor h in range(H):\n\n    tmp = ''\n\n    for w in range(W):\n\n        if tate[h] and yoko[w]:\n\n            tmp += HW_list[h][w]\n\n    if tmp == '':\n\n        continue\n\n    print(tmp)\n","code_v0_loc":29,"code_v1_loc":21,"code_v0_num_chars":682,"code_v1_num_chars":449,"code_v0_no_empty_lines":"H, W = list(map(int, input().split()))\nHW_list = [list(eval(input())) for i in range(H)]\nimport copy\n\ntmp = copy.deepcopy(HW_list)\nh_index = 0\nfor i, HW in enumerate(HW_list):\n    is_all_shiro = True\n    for hw in HW:\n        if hw == \"#\":\n            is_all_shiro = False\n            h_index += 1\n            break\n    if is_all_shiro:\n        tmp.pop(h_index)\nw_index = 0\nans = copy.deepcopy(tmp)\nfor w in range(W):\n    is_all_shiro = True\n    for t in tmp:\n        if t[w] == \"#\":\n            is_all_shiro = False\n            w_index += 1\n            break\n    if is_all_shiro:\n        for a in ans:\n            a.pop(w_index)\nfor A in ans:\n    print((\"\".join(A)))\n","code_v1_no_empty_lines":"H, W = list(map(int, input().split()))\nHW_list = [list(eval(input())) for i in range(H)]\nimport copy\n\ntate = [False] * H\nyoko = [False] * W\nfor h in range(H):\n    for w in range(W):\n        if HW_list[h][w] == \"#\":\n            tate[h] = True\n            yoko[w] = True\nfor h in range(H):\n    tmp = \"\"\n    for w in range(W):\n        if tate[h] and yoko[w]:\n            tmp += HW_list[h][w]\n    if tmp == \"\":\n        continue\n    print(tmp)\n","code_same":false,"relative_loc_diff_percent":27.5862068966,"diff":["-tmp = copy.deepcopy(HW_list)","-h_index = 0","-for i, HW in enumerate(HW_list):","-    is_all_shiro = True","-    for hw in HW:","-        if hw == \"#\":","-            is_all_shiro = False","-            h_index += 1","-            break","-    if is_all_shiro:","-        tmp.pop(h_index)","-w_index = 0","-ans = copy.deepcopy(tmp)","-for w in range(W):","-    is_all_shiro = True","-    for t in tmp:","-        if t[w] == \"#\":","-            is_all_shiro = False","-            w_index += 1","-            break","-    if is_all_shiro:","-        for a in ans:","-            a.pop(w_index)","-for A in ans:","-    print((\"\".join(A)))","+tate = [False] * H","+yoko = [False] * W","+for h in range(H):","+    for w in range(W):","+        if HW_list[h][w] == \"#\":","+            tate[h] = True","+            yoko[w] = True","+for h in range(H):","+    tmp = \"\"","+    for w in range(W):","+        if tate[h] and yoko[w]:","+            tmp += HW_list[h][w]","+    if tmp == \"\":","+        continue","+    print(tmp)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2898663879,"measured_runtime_v1":0.204775079,"runtime_lift":1.415535471,"key":["s132976376","s531161710"]}
{"user_id":"u057109575","problem_id":"p03078","language":"python","submission_id_v0":"s065985582","submission_id_v1":"s294135268","cpu_time_v0":153,"cpu_time_v1":124,"memory_v0":79232,"memory_v1":73392,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":18.95,"input":"\n\nfrom heapq import heappop, heappush\n\n\n\nX, Y, Z, K = list(map(int, input().split()))\n\nA = list(map(int, input().split()))\n\nB = list(map(int, input().split()))\n\nC = list(map(int, input().split()))\n\n\n\nA.sort(reverse=True)\n\nB.sort(reverse=True)\n\nC.sort(reverse=True)\n\n\n\npq = []\n\nheappush(pq, (-A[0] - B[0] - C[0], 0, 0, 0))\n\nappeared = set((0, 0, 0))\n\n\n\nfor _ in range(K):\n\n    # Pop maximum value\n\n    val, i, j, k = heappop(pq)\n\n    print((-val))\n\n\n\n    # Add next value\n\n    if i + 1 < X and (i + 1, j, k) not in appeared:\n\n        heappush(pq, (-A[i + 1] - B[j] - C[k], i + 1, j, k))\n\n        appeared.add((i + 1, j, k))\n\n\n\n    if j + 1 < Y and (i, j + 1, k) not in appeared:\n\n        heappush(pq, (-A[i] - B[j + 1] - C[k], i, j + 1, k))\n\n        appeared.add((i, j + 1, k))\n\n\n\n    if k + 1 < Z and (i, j, k + 1) not in appeared:\n\n        heappush(pq, (-A[i] - B[j] - C[k + 1], i, j, k + 1))\n\n        appeared.add((i, j, k + 1))\n","target":"\n\nX, Y, Z, K = list(map(int, input().split()))\n\nA = list(map(int, input().split()))\n\nB = list(map(int, input().split()))\n\nC = list(map(int, input().split()))\n\n\n\nA.sort(reverse=True)\n\nB.sort(reverse=True)\n\nC.sort(reverse=True)\n\n\n\nres = []\n\nfor i in range(X):\n\n    for j in range(Y):\n\n        for k in range(Z):\n\n            if (i + 1) * (j + 1) * (k + 1) <= K:\n\n                res.append(A[i] + B[j] + C[k])\n\n            else:\n\n                break\n\n\n\nres.sort(reverse=True)\n\nfor i in range(K):\n\n    print((res[i]))\n","code_v0_loc":33,"code_v1_loc":22,"code_v0_num_chars":923,"code_v1_num_chars":509,"code_v0_no_empty_lines":"from heapq import heappop, heappush\n\nX, Y, Z, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\nA.sort(reverse=True)\nB.sort(reverse=True)\nC.sort(reverse=True)\npq = []\nheappush(pq, (-A[0] - B[0] - C[0], 0, 0, 0))\nappeared = set((0, 0, 0))\nfor _ in range(K):\n    # Pop maximum value\n    val, i, j, k = heappop(pq)\n    print((-val))\n    # Add next value\n    if i + 1 < X and (i + 1, j, k) not in appeared:\n        heappush(pq, (-A[i + 1] - B[j] - C[k], i + 1, j, k))\n        appeared.add((i + 1, j, k))\n    if j + 1 < Y and (i, j + 1, k) not in appeared:\n        heappush(pq, (-A[i] - B[j + 1] - C[k], i, j + 1, k))\n        appeared.add((i, j + 1, k))\n    if k + 1 < Z and (i, j, k + 1) not in appeared:\n        heappush(pq, (-A[i] - B[j] - C[k + 1], i, j, k + 1))\n        appeared.add((i, j, k + 1))\n","code_v1_no_empty_lines":"X, Y, Z, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\nA.sort(reverse=True)\nB.sort(reverse=True)\nC.sort(reverse=True)\nres = []\nfor i in range(X):\n    for j in range(Y):\n        for k in range(Z):\n            if (i + 1) * (j + 1) * (k + 1) <= K:\n                res.append(A[i] + B[j] + C[k])\n            else:\n                break\nres.sort(reverse=True)\nfor i in range(K):\n    print((res[i]))\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-from heapq import heappop, heappush","-","-pq = []","-heappush(pq, (-A[0] - B[0] - C[0], 0, 0, 0))","-appeared = set((0, 0, 0))","-for _ in range(K):","-    # Pop maximum value","-    val, i, j, k = heappop(pq)","-    print((-val))","-    # Add next value","-    if i + 1 < X and (i + 1, j, k) not in appeared:","-        heappush(pq, (-A[i + 1] - B[j] - C[k], i + 1, j, k))","-        appeared.add((i + 1, j, k))","-    if j + 1 < Y and (i, j + 1, k) not in appeared:","-        heappush(pq, (-A[i] - B[j + 1] - C[k], i, j + 1, k))","-        appeared.add((i, j + 1, k))","-    if k + 1 < Z and (i, j, k + 1) not in appeared:","-        heappush(pq, (-A[i] - B[j] - C[k + 1], i, j, k + 1))","-        appeared.add((i, j, k + 1))","+res = []","+for i in range(X):","+    for j in range(Y):","+        for k in range(Z):","+            if (i + 1) * (j + 1) * (k + 1) <= K:","+                res.append(A[i] + B[j] + C[k])","+            else:","+                break","+res.sort(reverse=True)","+for i in range(K):","+    print((res[i]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3859105117,"measured_runtime_v1":0.2075348065,"runtime_lift":1.8594977789,"key":["s065985582","s294135268"]}
{"user_id":"u944325914","problem_id":"p02773","language":"python","submission_id_v0":"s220148525","submission_id_v1":"s009987907","cpu_time_v0":1010,"cpu_time_v1":521,"memory_v0":104656,"memory_v1":50176,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":48.42,"input":"import collections\n\nn = int(eval(input()))\n\na=[eval(input()) for _ in range(n)]\n\nanslist=[]\n\nb=collections.Counter(a)\n\nc=max(list(b.values()))\n\nfor i in b:\n\n    if b[i]==c:\n\n        anslist.append(i)\n\nd=sorted(anslist)\n\nfor i in tuple(d):\n\n    print(i)","target":"from collections import Counter\n\nn=int(eval(input()))\n\na=[]\n\nfor i in range(n):\n\n  a.append(eval(input()))\n\nac=Counter(a)\n\nacs=sorted(list(ac.items()),key=lambda x:x[1],reverse=1)\n\nz=len(acs)\n\ni=0\n\ntemp=[]\n\n\n\nwhile i<=z-1 and acs[i][1]==acs[0][1] :\n\n  temp.append(acs[i][0])\n\n  i+=1\n\ntemp.sort()\n\nfor i in temp:\n\n  print(i)","code_v0_loc":12,"code_v1_loc":17,"code_v0_num_chars":240,"code_v1_num_chars":305,"code_v0_no_empty_lines":"import collections\n\nn = int(eval(input()))\na = [eval(input()) for _ in range(n)]\nanslist = []\nb = collections.Counter(a)\nc = max(list(b.values()))\nfor i in b:\n    if b[i] == c:\n        anslist.append(i)\nd = sorted(anslist)\nfor i in tuple(d):\n    print(i)\n","code_v1_no_empty_lines":"from collections import Counter\n\nn = int(eval(input()))\na = []\nfor i in range(n):\n    a.append(eval(input()))\nac = Counter(a)\nacs = sorted(list(ac.items()), key=lambda x: x[1], reverse=1)\nz = len(acs)\ni = 0\ntemp = []\nwhile i <= z - 1 and acs[i][1] == acs[0][1]:\n    temp.append(acs[i][0])\n    i += 1\ntemp.sort()\nfor i in temp:\n    print(i)\n","code_same":false,"relative_loc_diff_percent":29.4117647059,"diff":["-import collections","+from collections import Counter","-a = [eval(input()) for _ in range(n)]","-anslist = []","-b = collections.Counter(a)","-c = max(list(b.values()))","-for i in b:","-    if b[i] == c:","-        anslist.append(i)","-d = sorted(anslist)","-for i in tuple(d):","+a = []","+for i in range(n):","+    a.append(eval(input()))","+ac = Counter(a)","+acs = sorted(list(ac.items()), key=lambda x: x[1], reverse=1)","+z = len(acs)","+i = 0","+temp = []","+while i <= z - 1 and acs[i][1] == acs[0][1]:","+    temp.append(acs[i][0])","+    i += 1","+temp.sort()","+for i in temp:"],"diff_only_import_comment":false,"measured_runtime_v0":0.3929853504,"measured_runtime_v1":0.3037585902,"runtime_lift":1.2937423435,"key":["s220148525","s009987907"]}
{"user_id":"u857759499","problem_id":"p03371","language":"python","submission_id_v0":"s203363465","submission_id_v1":"s893730989","cpu_time_v0":85,"cpu_time_v1":17,"memory_v0":7096,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":80.0,"input":"a,b,c,x,y = list(map(int,input().split()))\n\nxy = max(x,y)*2+1\n\nprint((min([c*i + max(0,a*(x-i\/\/2)) +max(0,b*(y-i\/\/2)) for i in range(0,xy,2)])))","target":"a,b,c,x,y = list(map(int,input().split()))\n\nif x < y:\n\n    a, b, x, y = b, a, y, x\n\nprint((min(a*x+b*y,2*c*y + a*(x-y),2*c*x)))","code_v0_loc":3,"code_v1_loc":4,"code_v0_num_chars":136,"code_v1_num_chars":119,"code_v0_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nxy = max(x, y) * 2 + 1\nprint(\n    (\n        min(\n            [\n                c * i + max(0, a * (x - i \/\/ 2)) + max(0, b * (y - i \/\/ 2))\n                for i in range(0, xy, 2)\n            ]\n        )\n    )\n)\n","code_v1_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nif x < y:\n    a, b, x, y = b, a, y, x\nprint((min(a * x + b * y, 2 * c * y + a * (x - y), 2 * c * x)))\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-xy = max(x, y) * 2 + 1","-print(","-    (","-        min(","-            [","-                c * i + max(0, a * (x - i \/\/ 2)) + max(0, b * (y - i \/\/ 2))","-                for i in range(0, xy, 2)","-            ]","-        )","-    )","-)","+if x < y:","+    a, b, x, y = b, a, y, x","+print((min(a * x + b * y, 2 * c * y + a * (x - y), 2 * c * x)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2887920134,"measured_runtime_v1":0.2046661584,"runtime_lift":1.4110394,"key":["s203363465","s893730989"]}
{"user_id":"u628732336","problem_id":"p02412","language":"python","submission_id_v0":"s343999289","submission_id_v1":"s206971885","cpu_time_v0":1010,"cpu_time_v1":530,"memory_v0":7716,"memory_v1":7724,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":47.52,"input":"while True:\n\n    n, x = [int(i) for i in input().split()]\n\n\n\n    if n == x == 0:\n\n        break\n\n\n\n    count = 0\n\n    for s in range(1, n - 1):\n\n        for m in range(s + 1, n):\n\n            for e in range(m + 1, n + 1):\n\n                if x == sum([s, m, e]):\n\n                    count += 1\n\n\n\n    print(count)","target":"while True:\n\n    n, x = [int(i) for i in input().split()]\n\n\n\n    if n == x == 0:\n\n        break\n\n\n\n    count = 0\n\n    for s in range(1, n - 1):\n\n        for m in range(s + 1, n):\n\n            for e in range(m + 1, n + 1):\n\n                if x == s+m+e:\n\n                    count += 1\n\n\n\n    print(count)","code_v0_loc":14,"code_v1_loc":14,"code_v0_num_chars":314,"code_v1_num_chars":305,"code_v0_no_empty_lines":"while True:\n    n, x = [int(i) for i in input().split()]\n    if n == x == 0:\n        break\n    count = 0\n    for s in range(1, n - 1):\n        for m in range(s + 1, n):\n            for e in range(m + 1, n + 1):\n                if x == sum([s, m, e]):\n                    count += 1\n    print(count)\n","code_v1_no_empty_lines":"while True:\n    n, x = [int(i) for i in input().split()]\n    if n == x == 0:\n        break\n    count = 0\n    for s in range(1, n - 1):\n        for m in range(s + 1, n):\n            for e in range(m + 1, n + 1):\n                if x == s + m + e:\n                    count += 1\n    print(count)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-                if x == sum([s, m, e]):","+                if x == s + m + e:"],"diff_only_import_comment":false,"measured_runtime_v0":0.3385973902,"measured_runtime_v1":0.2597145021,"runtime_lift":1.3037292389,"key":["s343999289","s206971885"]}
{"user_id":"u867826040","problem_id":"p02837","language":"python","submission_id_v0":"s705992872","submission_id_v1":"s870269222","cpu_time_v0":258,"cpu_time_v1":223,"memory_v0":9120,"memory_v1":9160,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.57,"input":"n = int(eval(input()))\n\nv = [[tuple(map(int, input().split()))for i in range(int(eval(input())))]\n\n     for i in range(n)]\n\n\n\nans = 0\n\nfor i in range(2**n):\n\n    f = [False] * n\n\n    xy = []\n\n    for j in range(n):\n\n        if (i >> j) & 1:\n\n            f[j] = True\n\n            xy.append(v[j])\n\n    flag = True\n\n    for xyi in xy:\n\n        for x, y in xyi:\n\n            if f[x - 1] is not bool(y):\n\n                flag = False\n\n                break\n\n    if flag:\n\n        ans = max(ans, len(xy))\n\nprint(ans)\n","target":"n = int(eval(input()))\n\nv = [[tuple(map(int, input().split()))for i in range(int(eval(input())))]\n\n     for i in range(n)]\n\n\n\nans = 0\n\nfor i in range(2**n):\n\n    f = [0] * n\n\n    xy = []\n\n    for j in range(n):\n\n        if (i >> j) & 1:\n\n            f[j] = 1\n\n            xy.append(v[j])\n\n    flag = True\n\n    for xyi in xy:\n\n        for x, y in xyi:\n\n            #print(f,x,y,bin(i))\n\n            if (i>>(x-1))&1 != y:\n\n                flag = False\n\n                break\n\n    if flag:\n\n        ans = max(ans, len(xy))\n\nprint(ans)\n","code_v0_loc":21,"code_v1_loc":22,"code_v0_num_chars":499,"code_v1_num_chars":520,"code_v0_no_empty_lines":"n = int(eval(input()))\nv = [\n    [tuple(map(int, input().split())) for i in range(int(eval(input())))]\n    for i in range(n)\n]\nans = 0\nfor i in range(2**n):\n    f = [False] * n\n    xy = []\n    for j in range(n):\n        if (i >> j) & 1:\n            f[j] = True\n            xy.append(v[j])\n    flag = True\n    for xyi in xy:\n        for x, y in xyi:\n            if f[x - 1] is not bool(y):\n                flag = False\n                break\n    if flag:\n        ans = max(ans, len(xy))\nprint(ans)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nv = [\n    [tuple(map(int, input().split())) for i in range(int(eval(input())))]\n    for i in range(n)\n]\nans = 0\nfor i in range(2**n):\n    f = [0] * n\n    xy = []\n    for j in range(n):\n        if (i >> j) & 1:\n            f[j] = 1\n            xy.append(v[j])\n    flag = True\n    for xyi in xy:\n        for x, y in xyi:\n            # print(f,x,y,bin(i))\n            if (i >> (x - 1)) & 1 != y:\n                flag = False\n                break\n    if flag:\n        ans = max(ans, len(xy))\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":4.5454545455,"diff":["-    f = [False] * n","+    f = [0] * n","-            f[j] = True","+            f[j] = 1","-            if f[x - 1] is not bool(y):","+            # print(f,x,y,bin(i))","+            if (i >> (x - 1)) & 1 != y:"],"diff_only_import_comment":false,"measured_runtime_v0":0.289290843,"measured_runtime_v1":0.2134317408,"runtime_lift":1.3554255893,"key":["s705992872","s870269222"]}
{"user_id":"u102461423","problem_id":"p03000","language":"python","submission_id_v0":"s091839409","submission_id_v1":"s096312338","cpu_time_v0":20,"cpu_time_v1":17,"memory_v0":3064,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.0,"input":"N,X = list(map(int,input().split()))\n\nL = [0] + [int(x) for x in input().split()]\n\n\n\nD = [0] * (N+2)\n\nanswer = 1\n\nfor n in range(2,N+2):\n\n  D[n] = D[n-1] + L[n-1]\n\n  if D[n] <= X:\n\n    answer += 1\n\n    \n\nprint(answer)","target":"import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nimport itertools\n\n\n\nN,X,*L = list(map(int,read().split()))\n\n\n\nanswer = sum(x <= X for x in itertools.accumulate([0]+L))\n\nprint(answer)","code_v0_loc":11,"code_v1_loc":11,"code_v0_num_chars":211,"code_v1_num_chars":250,"code_v0_no_empty_lines":"N, X = list(map(int, input().split()))\nL = [0] + [int(x) for x in input().split()]\nD = [0] * (N + 2)\nanswer = 1\nfor n in range(2, N + 2):\n    D[n] = D[n - 1] + L[n - 1]\n    if D[n] <= X:\n        answer += 1\nprint(answer)\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nimport itertools\n\nN, X, *L = list(map(int, read().split()))\nanswer = sum(x <= X for x in itertools.accumulate([0] + L))\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-N, X = list(map(int, input().split()))","-L = [0] + [int(x) for x in input().split()]","-D = [0] * (N + 2)","-answer = 1","-for n in range(2, N + 2):","-    D[n] = D[n - 1] + L[n - 1]","-    if D[n] <= X:","-        answer += 1","+import sys","+","+read = sys.stdin.buffer.read","+readline = sys.stdin.buffer.readline","+readlines = sys.stdin.buffer.readlines","+import itertools","+","+N, X, *L = list(map(int, read().split()))","+answer = sum(x <= X for x in itertools.accumulate([0] + L))"],"diff_only_import_comment":false,"measured_runtime_v0":0.4454345685,"measured_runtime_v1":0.3287086122,"runtime_lift":1.3551046487,"key":["s091839409","s096312338"]}
{"user_id":"u133936772","problem_id":"p02983","language":"python","submission_id_v0":"s915950177","submission_id_v1":"s423283368","cpu_time_v0":97,"cpu_time_v1":51,"memory_v0":3060,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":47.42,"input":"mod = 2019\n\nl, r = list(map(int, input().split()))\n\n\n\nif r\/\/mod - l\/\/mod > 0:\n\n  print((0))\n\nelse:\n\n  l %= mod\n\n  r %= mod\n\n  ans = mod\n\n  for i in range(l+1, r+1):\n\n    for j in range(l, i):\n\n      ans = min(i*j%mod, ans)\n\n    if ans == 0:\n\n      break\n\n  print(ans)","target":"mod = 2019\n\nl, r = list(map(int, input().split()))\n\n\n\nif r\/\/mod - l\/\/mod > 0:\n\n  print((0))\n\nelse:\n\n  l %= mod\n\n  r %= mod\n\n  ans = mod\n\n  for i in range(l, r):\n\n    for j in range(i+1, r+1):\n\n      ans = min(i*j%mod, ans)\n\n    if ans == 0:\n\n      break\n\n  print(ans)","code_v0_loc":15,"code_v1_loc":15,"code_v0_num_chars":259,"code_v1_num_chars":259,"code_v0_no_empty_lines":"mod = 2019\nl, r = list(map(int, input().split()))\nif r \/\/ mod - l \/\/ mod > 0:\n    print((0))\nelse:\n    l %= mod\n    r %= mod\n    ans = mod\n    for i in range(l + 1, r + 1):\n        for j in range(l, i):\n            ans = min(i * j % mod, ans)\n        if ans == 0:\n            break\n    print(ans)\n","code_v1_no_empty_lines":"mod = 2019\nl, r = list(map(int, input().split()))\nif r \/\/ mod - l \/\/ mod > 0:\n    print((0))\nelse:\n    l %= mod\n    r %= mod\n    ans = mod\n    for i in range(l, r):\n        for j in range(i + 1, r + 1):\n            ans = min(i * j % mod, ans)\n        if ans == 0:\n            break\n    print(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    for i in range(l + 1, r + 1):","-        for j in range(l, i):","+    for i in range(l, r):","+        for j in range(i + 1, r + 1):"],"diff_only_import_comment":false,"measured_runtime_v0":0.3490325066,"measured_runtime_v1":0.2693671175,"runtime_lift":1.2957502381,"key":["s915950177","s423283368"]}
{"user_id":"u998741086","problem_id":"p03425","language":"python","submission_id_v0":"s570150327","submission_id_v1":"s255248054","cpu_time_v0":227,"cpu_time_v1":144,"memory_v0":16268,"memory_v1":16064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":36.56,"input":"#!\/usr\/bin\/env python3\n\n\n\nn = int(eval(input()))\n\ns = [eval(input()) for _ in range(n)]\n\n\n\nc = [0 for _ in range(5)]\n\nt = 'MARCH'\n\n\n\nfor i in range(n):\n\n    for j in range(5):\n\n        if s[i][0] == t[j]:\n\n            c[j] += 1\n\nans = 0 \n\nfor i in range(5):\n\n    for j in range(i+1, 5): \n\n        for k in range(j+1, 5): \n\n            ans += c[i]*c[k]*c[j]\n\nprint(ans)\n","target":"#!\/usr\/bin\/env python3\n\n\n\nn = int(eval(input()))\n\ns = [eval(input()) for _ in range(n)]\n\nd = {}\n\n\n\nfor c in s:\n\n    if c[0] not in d:\n\n        d[c[0]] = 1 \n\n    else:\n\n        d[c[0]] += 1\n\n\n\ntmp = d.copy()\n\nt = ['M', 'A', 'R', 'C', 'H']\n\nfor c in tmp:\n\n    if c not in t:\n\n        d.pop(c)\n\n\n\nans = 0 \n\ndlist = list(d.items())\n\nfor i in range(len(dlist)):\n\n    for j in range(i+1, len(dlist)):\n\n        for k in range(j+1, len(dlist)):\n\n            ans += dlist[i][1]*dlist[j][1]*dlist[k][1]\n\nprint(ans)\n","code_v0_loc":18,"code_v1_loc":25,"code_v0_num_chars":357,"code_v1_num_chars":493,"code_v0_no_empty_lines":"#!\/usr\/bin\/env python3\nn = int(eval(input()))\ns = [eval(input()) for _ in range(n)]\nc = [0 for _ in range(5)]\nt = \"MARCH\"\nfor i in range(n):\n    for j in range(5):\n        if s[i][0] == t[j]:\n            c[j] += 1\nans = 0\nfor i in range(5):\n    for j in range(i + 1, 5):\n        for k in range(j + 1, 5):\n            ans += c[i] * c[k] * c[j]\nprint(ans)\n","code_v1_no_empty_lines":"#!\/usr\/bin\/env python3\nn = int(eval(input()))\ns = [eval(input()) for _ in range(n)]\nd = {}\nfor c in s:\n    if c[0] not in d:\n        d[c[0]] = 1\n    else:\n        d[c[0]] += 1\ntmp = d.copy()\nt = [\"M\", \"A\", \"R\", \"C\", \"H\"]\nfor c in tmp:\n    if c not in t:\n        d.pop(c)\nans = 0\ndlist = list(d.items())\nfor i in range(len(dlist)):\n    for j in range(i + 1, len(dlist)):\n        for k in range(j + 1, len(dlist)):\n            ans += dlist[i][1] * dlist[j][1] * dlist[k][1]\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":28.0,"diff":["-c = [0 for _ in range(5)]","-t = \"MARCH\"","-for i in range(n):","-    for j in range(5):","-        if s[i][0] == t[j]:","-            c[j] += 1","+d = {}","+for c in s:","+    if c[0] not in d:","+        d[c[0]] = 1","+    else:","+        d[c[0]] += 1","+tmp = d.copy()","+t = [\"M\", \"A\", \"R\", \"C\", \"H\"]","+for c in tmp:","+    if c not in t:","+        d.pop(c)","-for i in range(5):","-    for j in range(i + 1, 5):","-        for k in range(j + 1, 5):","-            ans += c[i] * c[k] * c[j]","+dlist = list(d.items())","+for i in range(len(dlist)):","+    for j in range(i + 1, len(dlist)):","+        for k in range(j + 1, len(dlist)):","+            ans += dlist[i][1] * dlist[j][1] * dlist[k][1]"],"diff_only_import_comment":false,"measured_runtime_v0":0.3218575408,"measured_runtime_v1":0.2488505929,"runtime_lift":1.2933766287,"key":["s570150327","s255248054"]}
{"user_id":"u661290476","problem_id":"p00053","language":"python","submission_id_v0":"s978814614","submission_id_v1":"s421101567","cpu_time_v0":420,"cpu_time_v1":210,"memory_v0":18368,"memory_v1":51028,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":50.0,"input":"prim=[True]*1000000\n\nprim[0],prim[1]=False,False\n\nfor i in range(2,1000):\n\n    if prim[i]:\n\n        for j in range(i*2,1000000,i):\n\n            prim[j]=False\n\nprime=[i for i,j in enumerate(prim) if j==True]\n\n\n\nwhile True:\n\n    n=int(eval(input()))\n\n    if n==0:\n\n        break\n\n    print((sum(prime[:n])))","target":"prim=[True]*1000000\n\nprim[0]=prim[1]=False\n\nfor i in range(2,350):\n\n    if prim[i]:\n\n        for j in range(i*2,110000,i):\n\n            prim[j]=False\n\nprime=[i for i,j in enumerate(prim) if j==True]\n\n\n\nwhile True:\n\n    n=int(eval(input()))\n\n    if n==0:\n\n        break\n\n    print((sum(prime[:n])))","code_v0_loc":13,"code_v1_loc":13,"code_v0_num_chars":297,"code_v1_num_chars":289,"code_v0_no_empty_lines":"prim = [True] * 1000000\nprim[0], prim[1] = False, False\nfor i in range(2, 1000):\n    if prim[i]:\n        for j in range(i * 2, 1000000, i):\n            prim[j] = False\nprime = [i for i, j in enumerate(prim) if j == True]\nwhile True:\n    n = int(eval(input()))\n    if n == 0:\n        break\n    print((sum(prime[:n])))\n","code_v1_no_empty_lines":"prim = [True] * 1000000\nprim[0] = prim[1] = False\nfor i in range(2, 350):\n    if prim[i]:\n        for j in range(i * 2, 110000, i):\n            prim[j] = False\nprime = [i for i, j in enumerate(prim) if j == True]\nwhile True:\n    n = int(eval(input()))\n    if n == 0:\n        break\n    print((sum(prime[:n])))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-prim[0], prim[1] = False, False","-for i in range(2, 1000):","+prim[0] = prim[1] = False","+for i in range(2, 350):","-        for j in range(i * 2, 1000000, i):","+        for j in range(i * 2, 110000, i):"],"diff_only_import_comment":false,"measured_runtime_v0":1.0302433112,"measured_runtime_v1":0.6551637814,"runtime_lift":1.5724973516,"key":["s978814614","s421101567"]}
{"user_id":"u113971909","problem_id":"p03162","language":"python","submission_id_v0":"s130783532","submission_id_v1":"s220078110","cpu_time_v0":1281,"cpu_time_v1":522,"memory_v0":14812,"memory_v1":22816,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":59.25,"input":"import sys\n\ninput = sys.stdin.readline\n\nimport numpy as np\n\nN = int(eval(input()))\n\ndp = np.zeros((N+1,3), dtype=np.int)\n\nX = list(map(int, input().split()))\n\nfor _ in range(3):\n\n  dp[1][_] = X[_]\n\nfor n in range(2,N+1):\n\n  X = list(map(int, input().split()))\n\n  dp[n][0] = max(dp[n-1][1],dp[n-1][2]) + X[0]\n\n  dp[n][1] = max(dp[n-1][2],dp[n-1][0]) + X[1]\n\n  dp[n][2] = max(dp[n-1][0],dp[n-1][1]) + X[2]\n\nprint((max(dp[N])))","target":"#!\/usr\/bin python3\n\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n\n    N = int(eval(input()))\n\n    dp = [[0]*3 for i in range(N+1)]\n\n    #dp[i][j] i\u307e\u3067\u3067\u3001j=0\u306fa\u3092\u9078\u3076,j=1\u306fb\u3092\u9078\u3076,j=2\u306fc\u3092\u9078\u3076\n\n    for i in range(1,N+1):\n\n        a, b, c=list(map(int,input().split()))\n\n        dp[i][0] = max(dp[i-1][1]+a, dp[i-1][2]+a, dp[i][0])\n\n        dp[i][1] = max(dp[i-1][2]+b, dp[i-1][0]+b, dp[i][1])\n\n        dp[i][2] = max(dp[i-1][0]+c, dp[i-1][1]+c, dp[i][2])\n\n\n\n    print((max(dp[N])))\n\n\n\nif __name__ == '__main__':\n\n    main()","code_v0_loc":14,"code_v1_loc":17,"code_v0_num_chars":416,"code_v1_num_chars":488,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nimport numpy as np\n\nN = int(eval(input()))\ndp = np.zeros((N + 1, 3), dtype=np.int)\nX = list(map(int, input().split()))\nfor _ in range(3):\n    dp[1][_] = X[_]\nfor n in range(2, N + 1):\n    X = list(map(int, input().split()))\n    dp[n][0] = max(dp[n - 1][1], dp[n - 1][2]) + X[0]\n    dp[n][1] = max(dp[n - 1][2], dp[n - 1][0]) + X[1]\n    dp[n][2] = max(dp[n - 1][0], dp[n - 1][1]) + X[2]\nprint((max(dp[N])))\n","code_v1_no_empty_lines":"#!\/usr\/bin python3\n# -*- coding: utf-8 -*-\ndef main():\n    N = int(eval(input()))\n    dp = [[0] * 3 for i in range(N + 1)]\n    # dp[i][j] i\u307e\u3067\u3067\u3001j=0\u306fa\u3092\u9078\u3076,j=1\u306fb\u3092\u9078\u3076,j=2\u306fc\u3092\u9078\u3076\n    for i in range(1, N + 1):\n        a, b, c = list(map(int, input().split()))\n        dp[i][0] = max(dp[i - 1][1] + a, dp[i - 1][2] + a, dp[i][0])\n        dp[i][1] = max(dp[i - 1][2] + b, dp[i - 1][0] + b, dp[i][1])\n        dp[i][2] = max(dp[i - 1][0] + c, dp[i - 1][1] + c, dp[i][2])\n    print((max(dp[N])))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":17.6470588235,"diff":["-import sys","+#!\/usr\/bin python3","+# -*- coding: utf-8 -*-","+def main():","+    N = int(eval(input()))","+    dp = [[0] * 3 for i in range(N + 1)]","+    # dp[i][j] i\u307e\u3067\u3067\u3001j=0\u306fa\u3092\u9078\u3076,j=1\u306fb\u3092\u9078\u3076,j=2\u306fc\u3092\u9078\u3076","+    for i in range(1, N + 1):","+        a, b, c = list(map(int, input().split()))","+        dp[i][0] = max(dp[i - 1][1] + a, dp[i - 1][2] + a, dp[i][0])","+        dp[i][1] = max(dp[i - 1][2] + b, dp[i - 1][0] + b, dp[i][1])","+        dp[i][2] = max(dp[i - 1][0] + c, dp[i - 1][1] + c, dp[i][2])","+    print((max(dp[N])))","-input = sys.stdin.readline","-import numpy as np","-N = int(eval(input()))","-dp = np.zeros((N + 1, 3), dtype=np.int)","-X = list(map(int, input().split()))","-for _ in range(3):","-    dp[1][_] = X[_]","-for n in range(2, N + 1):","-    X = list(map(int, input().split()))","-    dp[n][0] = max(dp[n - 1][1], dp[n - 1][2]) + X[0]","-    dp[n][1] = max(dp[n - 1][2], dp[n - 1][0]) + X[1]","-    dp[n][2] = max(dp[n - 1][0], dp[n - 1][1]) + X[2]","-print((max(dp[N])))","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":2.4970043278,"measured_runtime_v1":0.3113249114,"runtime_lift":8.02057348,"key":["s130783532","s220078110"]}
{"user_id":"u347600233","problem_id":"p03037","language":"python","submission_id_v0":"s661845965","submission_id_v1":"s817506416","cpu_time_v0":279,"cpu_time_v1":195,"memory_v0":7088,"memory_v1":16564,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":30.11,"input":"n, m = list(map(int, input().split()))\n\ngate = []\n\nl, r = list(map(int, input().split()))\n\nfor i in range(1, m):\n\n    m, s = list(map(int, input().split()))\n\n    if l < m:\n\n        l = m\n\n    if s < r:\n\n        r = s\n\nprint((len([i for i in range(l, r + 1)])))","target":"n, m = list(map(int, input().split()))\n\nl, r = [0] * m, [0] * m\n\nfor i in range(m):\n\n    l[i], r[i] = list(map(int, input().split()))\n\nprint((max(min(r) - max(l) + 1, 0)))","code_v0_loc":10,"code_v1_loc":5,"code_v0_num_chars":240,"code_v1_num_chars":157,"code_v0_no_empty_lines":"n, m = list(map(int, input().split()))\ngate = []\nl, r = list(map(int, input().split()))\nfor i in range(1, m):\n    m, s = list(map(int, input().split()))\n    if l < m:\n        l = m\n    if s < r:\n        r = s\nprint((len([i for i in range(l, r + 1)])))\n","code_v1_no_empty_lines":"n, m = list(map(int, input().split()))\nl, r = [0] * m, [0] * m\nfor i in range(m):\n    l[i], r[i] = list(map(int, input().split()))\nprint((max(min(r) - max(l) + 1, 0)))\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-gate = []","-l, r = list(map(int, input().split()))","-for i in range(1, m):","-    m, s = list(map(int, input().split()))","-    if l < m:","-        l = m","-    if s < r:","-        r = s","-print((len([i for i in range(l, r + 1)])))","+l, r = [0] * m, [0] * m","+for i in range(m):","+    l[i], r[i] = list(map(int, input().split()))","+print((max(min(r) - max(l) + 1, 0)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.317712152,"measured_runtime_v1":0.2449507949,"runtime_lift":1.2970447884,"key":["s661845965","s817506416"]}
{"user_id":"u585963734","problem_id":"p02596","language":"python","submission_id_v0":"s961921352","submission_id_v1":"s631804156","cpu_time_v0":290,"cpu_time_v1":180,"memory_v0":48468,"memory_v1":9168,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":37.93,"input":"K=int(eval(input()))\n\n\n\nif K%2==0:\n\n    print((-1))\n\n    exit(0)\n\n    \n\nans=[0]*(pow(10,6)+1)\n\nans[0]=0\n\n\n\nfor i in range(1,pow(10,6)):\n\n    ans[i]=(ans[i-1]*10+7)%K\n\n    if ans[i]==0:\n\n        print(i)\n\n        exit(0)\n\n\n\nprint((-1))","target":"import functools\n\n\n\nK=int(eval(input()))\n\n \n\nif K%2==0:\n\n    print((-1))\n\n    exit(0)\n\n\n\nmod=0\n\n\n\nfor i in range(1,pow(10,6)):\n\n    mod=(mod*10+7)%K\n\n    if mod==0:\n\n        print(i)\n\n        exit(0)\n\n        \n\nprint((-1))","code_v0_loc":16,"code_v1_loc":17,"code_v0_num_chars":224,"code_v1_num_chars":212,"code_v0_no_empty_lines":"K = int(eval(input()))\nif K % 2 == 0:\n    print((-1))\n    exit(0)\nans = [0] * (pow(10, 6) + 1)\nans[0] = 0\nfor i in range(1, pow(10, 6)):\n    ans[i] = (ans[i - 1] * 10 + 7) % K\n    if ans[i] == 0:\n        print(i)\n        exit(0)\nprint((-1))\n","code_v1_no_empty_lines":"import functools\n\nK = int(eval(input()))\nif K % 2 == 0:\n    print((-1))\n    exit(0)\nmod = 0\nfor i in range(1, pow(10, 6)):\n    mod = (mod * 10 + 7) % K\n    if mod == 0:\n        print(i)\n        exit(0)\nprint((-1))\n","code_same":false,"relative_loc_diff_percent":5.8823529412,"diff":["+import functools","+","-ans = [0] * (pow(10, 6) + 1)","-ans[0] = 0","+mod = 0","-    ans[i] = (ans[i - 1] * 10 + 7) % K","-    if ans[i] == 0:","+    mod = (mod * 10 + 7) % K","+    if mod == 0:"],"diff_only_import_comment":false,"measured_runtime_v0":0.7143074386,"measured_runtime_v1":0.5444337668,"runtime_lift":1.3120189858,"key":["s961921352","s631804156"]}
{"user_id":"u311379832","problem_id":"p02537","language":"python","submission_id_v0":"s277145927","submission_id_v1":"s770419806","cpu_time_v0":790,"cpu_time_v1":668,"memory_v0":119112,"memory_v1":103304,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.44,"input":"def segfunc(x, y): return max(x, y)\n\n\n\nclass SegmentTree:\n\n    def __init__(self, arr):\n\n        size = len(arr)\n\n        n = 2 ** (size - 1).bit_length()\n\n        self.n = n\n\n        self.node = [0] * (2*n)\n\n        for i in range(size):\n\n            self.node[i+n-1] = arr[i]\n\n        for i in reversed(list(range(n-2))):\n\n            self.node[i] = segfunc(self.node[2*i+1], self.node[2*i+2])\n\n\n\n    def update(self, i, x):\n\n        i += self.n - 1\n\n        self.node[i] = x\n\n        while i > 0:\n\n            i = (i - 1) \/\/ 2\n\n            self.node[i] = segfunc(self.node[i * 2 + 1], self.node[i * 2 + 2])\n\n\n\n    def update(self, x, val):\n\n        x += (self.n - 1)\n\n        self.node[x] = val\n\n        while x > 0:\n\n            x = (x - 1) \/\/ 2\n\n            self.node[x] = segfunc(self.node[2 * x + 1], self.node[2 * x + 2])\n\n\n\n    def query(self, a, b):\n\n        res = 0\n\n        l = self.n - 1 + a\n\n        r = self.n - 1 + (b - 1)\n\n\n\n        while l <= r:\n\n            if l == r:\n\n                res = segfunc(res, self.node[l])\n\n                break\n\n\n\n            if l % 2 == 0:\n\n                res = segfunc(res, self.node[l])\n\n            if r % 2 == 1:\n\n                res = segfunc(res, self.node[r])\n\n            l = l \/\/ 2\n\n            r = r \/\/ 2 - 1\n\n\n\n        return res\n\n\n\nN, K = list(map(int, input().split()))\n\nINF = 0\n\nseg = SegmentTree([0] * 300000)\n\nfor i in range(N):\n\n    a = int(eval(input()))\n\n    tmp = seg.query(max(a - K, 0), min(a + K, 300000) + 1) + 1\n\n    seg.update(a, tmp)\n\nprint((seg.query(0, 300000)))\n","target":"def segfunc(x, y): return max(x, y)\n\ndef update(i, x):\n\n    i += MAX_N-1\n\n    node[i] = x\n\n    while i:\n\n        i = (i-1)\/\/2\n\n        node[i] = segfunc(node[i*2+1], node[i*2+2])\n\n\n\ndef query(l, r):\n\n    L = l + MAX_N\n\n    R = r + MAX_N\n\n    s = INF\n\n    while L < R:\n\n        if R & 1:\n\n            R -= 1\n\n            s = segfunc(s, node[R - 1])\n\n        if L & 1:\n\n            s = segfunc(s, node[L - 1])\n\n            L += 1\n\n        L >>= 1\n\n        R >>= 1\n\n    return s\n\n\n\nN, K = list(map(int, input().split()))\n\nMAX_N = 2**(300005).bit_length()\n\na = [int(eval(input())) for _ in range(N)]\n\nnode = [0] * (2 * MAX_N)\n\nINF = 0\n\nans = 0\n\n\n\n#for i in range(N):\n\n#    update(i, a[i])\n\n\n\nfor i in a:\n\n    tmp = query(max(i - K, 0), min(300005, i + K) + 1)\n\n    update(i, tmp + 1)\n\n    ans = max(ans, tmp + 1)\n\nprint(ans)\n","code_v0_loc":54,"code_v1_loc":38,"code_v0_num_chars":1524,"code_v1_num_chars":809,"code_v0_no_empty_lines":"def segfunc(x, y):\n    return max(x, y)\n\n\nclass SegmentTree:\n    def __init__(self, arr):\n        size = len(arr)\n        n = 2 ** (size - 1).bit_length()\n        self.n = n\n        self.node = [0] * (2 * n)\n        for i in range(size):\n            self.node[i + n - 1] = arr[i]\n        for i in reversed(list(range(n - 2))):\n            self.node[i] = segfunc(self.node[2 * i + 1], self.node[2 * i + 2])\n\n    def update(self, i, x):\n        i += self.n - 1\n        self.node[i] = x\n        while i > 0:\n            i = (i - 1) \/\/ 2\n            self.node[i] = segfunc(self.node[i * 2 + 1], self.node[i * 2 + 2])\n\n    def update(self, x, val):\n        x += self.n - 1\n        self.node[x] = val\n        while x > 0:\n            x = (x - 1) \/\/ 2\n            self.node[x] = segfunc(self.node[2 * x + 1], self.node[2 * x + 2])\n\n    def query(self, a, b):\n        res = 0\n        l = self.n - 1 + a\n        r = self.n - 1 + (b - 1)\n        while l <= r:\n            if l == r:\n                res = segfunc(res, self.node[l])\n                break\n            if l % 2 == 0:\n                res = segfunc(res, self.node[l])\n            if r % 2 == 1:\n                res = segfunc(res, self.node[r])\n            l = l \/\/ 2\n            r = r \/\/ 2 - 1\n        return res\n\n\nN, K = list(map(int, input().split()))\nINF = 0\nseg = SegmentTree([0] * 300000)\nfor i in range(N):\n    a = int(eval(input()))\n    tmp = seg.query(max(a - K, 0), min(a + K, 300000) + 1) + 1\n    seg.update(a, tmp)\nprint((seg.query(0, 300000)))\n","code_v1_no_empty_lines":"def segfunc(x, y):\n    return max(x, y)\n\n\ndef update(i, x):\n    i += MAX_N - 1\n    node[i] = x\n    while i:\n        i = (i - 1) \/\/ 2\n        node[i] = segfunc(node[i * 2 + 1], node[i * 2 + 2])\n\n\ndef query(l, r):\n    L = l + MAX_N\n    R = r + MAX_N\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = segfunc(s, node[R - 1])\n        if L & 1:\n            s = segfunc(s, node[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\n\n\nN, K = list(map(int, input().split()))\nMAX_N = 2 ** (300005).bit_length()\na = [int(eval(input())) for _ in range(N)]\nnode = [0] * (2 * MAX_N)\nINF = 0\nans = 0\n# for i in range(N):\n#    update(i, a[i])\nfor i in a:\n    tmp = query(max(i - K, 0), min(300005, i + K) + 1)\n    update(i, tmp + 1)\n    ans = max(ans, tmp + 1)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":29.6296296296,"diff":["-class SegmentTree:","-    def __init__(self, arr):","-        size = len(arr)","-        n = 2 ** (size - 1).bit_length()","-        self.n = n","-        self.node = [0] * (2 * n)","-        for i in range(size):","-            self.node[i + n - 1] = arr[i]","-        for i in reversed(list(range(n - 2))):","-            self.node[i] = segfunc(self.node[2 * i + 1], self.node[2 * i + 2])","+def update(i, x):","+    i += MAX_N - 1","+    node[i] = x","+    while i:","+        i = (i - 1) \/\/ 2","+        node[i] = segfunc(node[i * 2 + 1], node[i * 2 + 2])","-    def update(self, i, x):","-        i += self.n - 1","-        self.node[i] = x","-        while i > 0:","-            i = (i - 1) \/\/ 2","-            self.node[i] = segfunc(self.node[i * 2 + 1], self.node[i * 2 + 2])","-    def update(self, x, val):","-        x += self.n - 1","-        self.node[x] = val","-        while x > 0:","-            x = (x - 1) \/\/ 2","-            self.node[x] = segfunc(self.node[2 * x + 1], self.node[2 * x + 2])","-","-    def query(self, a, b):","-        res = 0","-        l = self.n - 1 + a","-        r = self.n - 1 + (b - 1)","-        while l <= r:","-            if l == r:","-                res = segfunc(res, self.node[l])","-                break","-            if l % 2 == 0:","-                res = segfunc(res, self.node[l])","-            if r % 2 == 1:","-                res = segfunc(res, self.node[r])","-            l = l \/\/ 2","-            r = r \/\/ 2 - 1","-        return res","+def query(l, r):","+    L = l + MAX_N","+    R = r + MAX_N","+    s = INF","+    while L < R:","+        if R & 1:","+            R -= 1","+            s = segfunc(s, node[R - 1])","+        if L & 1:","+            s = segfunc(s, node[L - 1])","+            L += 1","+        L >>= 1","+        R >>= 1","+    return s","+MAX_N = 2 ** (300005).bit_length()","+a = [int(eval(input())) for _ in range(N)]","+node = [0] * (2 * MAX_N)","-seg = SegmentTree([0] * 300000)","-for i in range(N):","-    a = int(eval(input()))","-    tmp = seg.query(max(a - K, 0), min(a + K, 300000) + 1) + 1","-    seg.update(a, tmp)","-print((seg.query(0, 300000)))","+ans = 0","+# for i in range(N):","+#    update(i, a[i])","+for i in a:","+    tmp = query(max(i - K, 0), min(300005, i + K) + 1)","+    update(i, tmp + 1)","+    ans = max(ans, tmp + 1)","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":2.9777374048,"measured_runtime_v1":0.391063194,"runtime_lift":7.6144660253,"key":["s277145927","s770419806"]}
{"user_id":"u461833298","problem_id":"p02899","language":"python","submission_id_v0":"s458295975","submission_id_v1":"s339978019","cpu_time_v0":623,"cpu_time_v1":111,"memory_v0":29124,"memory_v1":13880,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":82.18,"input":"import numpy as np\n\nN = int(eval(input()))\n\nA = [int(x) for x in input().split()]\n\n\n\ntmp = [x for x in zip(A, list(range(1, N+1)))]\n\ntmp = np.array(sorted(tmp))\n\nprint((*tmp[:,1]))","target":"N = int(eval(input()))\n\nA = [int(x) for x in input().split()]\n\nB = [0 for _ in range(N)]\n\nfor i in range(N):\n\n    B[A[i]-1] = i+1\n\nprint((*B))","code_v0_loc":7,"code_v1_loc":6,"code_v0_num_chars":166,"code_v1_num_chars":134,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nA = [int(x) for x in input().split()]\ntmp = [x for x in zip(A, list(range(1, N + 1)))]\ntmp = np.array(sorted(tmp))\nprint((*tmp[:, 1]))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = [int(x) for x in input().split()]\nB = [0 for _ in range(N)]\nfor i in range(N):\n    B[A[i] - 1] = i + 1\nprint((*B))\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["-import numpy as np","-","-tmp = [x for x in zip(A, list(range(1, N + 1)))]","-tmp = np.array(sorted(tmp))","-print((*tmp[:, 1]))","+B = [0 for _ in range(N)]","+for i in range(N):","+    B[A[i] - 1] = i + 1","+print((*B))"],"diff_only_import_comment":false,"measured_runtime_v0":1.9516685504,"measured_runtime_v1":0.359870365,"runtime_lift":5.4232544271,"key":["s458295975","s339978019"]}
{"user_id":"u188827677","problem_id":"p03037","language":"python","submission_id_v0":"s698380012","submission_id_v1":"s714478978","cpu_time_v0":302,"cpu_time_v1":221,"memory_v0":11020,"memory_v1":9144,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":26.82,"input":"N,M = list(map(int, input().split()))\n\nL = []\n\nR = []\n\nfor _ in range(M):\n\n  l,r = list(map(int, input().split()))\n\n  L.append(l)\n\n  R.append(r)\n\n\n\nans = min(R)-max(L)+1\n\nif ans < 0:\n\n  print((0))\n\nelse:\n\n  print(ans)\n\n  ","target":"n,m = list(map(int, input().split()))\n\nmax_l = float(\"-inf\")\n\nmin_r = float(\"inf\")\n\nfor _ in range(m):\n\n  l,r = list(map(int, input().split()))\n\n  max_l = max(max_l, l)\n\n  min_r = min(min_r, r)\n\nans = min_r - max_l + 1\n\nif ans > 0:\n\n  print(ans)\n\nelse:\n\n  print((0))","code_v0_loc":14,"code_v1_loc":12,"code_v0_num_chars":207,"code_v1_num_chars":252,"code_v0_no_empty_lines":"N, M = list(map(int, input().split()))\nL = []\nR = []\nfor _ in range(M):\n    l, r = list(map(int, input().split()))\n    L.append(l)\n    R.append(r)\nans = min(R) - max(L) + 1\nif ans < 0:\n    print((0))\nelse:\n    print(ans)\n","code_v1_no_empty_lines":"n, m = list(map(int, input().split()))\nmax_l = float(\"-inf\")\nmin_r = float(\"inf\")\nfor _ in range(m):\n    l, r = list(map(int, input().split()))\n    max_l = max(max_l, l)\n    min_r = min(min_r, r)\nans = min_r - max_l + 1\nif ans > 0:\n    print(ans)\nelse:\n    print((0))\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["-N, M = list(map(int, input().split()))","-L = []","-R = []","-for _ in range(M):","+n, m = list(map(int, input().split()))","+max_l = float(\"-inf\")","+min_r = float(\"inf\")","+for _ in range(m):","-    L.append(l)","-    R.append(r)","-ans = min(R) - max(L) + 1","-if ans < 0:","+    max_l = max(max_l, l)","+    min_r = min(min_r, r)","+ans = min_r - max_l + 1","+if ans > 0:","+    print(ans)","+else:","-else:","-    print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2637555127,"measured_runtime_v1":0.1756164875,"runtime_lift":1.5018835444,"key":["s698380012","s714478978"]}
{"user_id":"u989345508","problem_id":"p03273","language":"python","submission_id_v0":"s593926411","submission_id_v1":"s601943768","cpu_time_v0":162,"cpu_time_v1":20,"memory_v0":14024,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.65,"input":"import numpy as np\n\nh,w=input().split()\n\nh,w=int(h),int(w)\n\nx3=[]\n\nfor i in range(h):\n\n    x1=input()\n\n    if x1 !=  w*\".\":\n\n        x3.append(list(x1))\n\n\n\nx3=np.array(x3).T.tolist()\n\nx4=[]\n\nfor i in range(w):\n\n    if x3[i] != [\".\" for i in range(len(x3[i]))]:\n\n        x4.append(x3[i])\n\n\n\nx4=np.array(x4).T.tolist()\n\nfor i in range(len(x4)):\n\n    for j in range(len(x4[0])):\n\n        print(x4[i][j],end=\"\")\n\n    print()\n","target":"h,w=list(map(int,input().split()))\n\na=[]\n\nfor i in range(h):\n\n    k=eval(input())\n\n    if k!=\".\"*w:\n\n        a.append(k)\n\nl=len(a)\n\n#print(a)\n\nans=[[] for i in range(l)]\n\nfor i in range(w):\n\n    for j in range(l):\n\n        if a[j][i]==\"#\":\n\n            for k in range(l):\n\n                ans[k].append(a[k][i])\n\n            break\n\nfor i in range(l):\n\n    print((\"\".join(ans[i])))","code_v0_loc":20,"code_v1_loc":17,"code_v0_num_chars":421,"code_v1_num_chars":366,"code_v0_no_empty_lines":"import numpy as np\n\nh, w = input().split()\nh, w = int(h), int(w)\nx3 = []\nfor i in range(h):\n    x1 = input()\n    if x1 != w * \".\":\n        x3.append(list(x1))\nx3 = np.array(x3).T.tolist()\nx4 = []\nfor i in range(w):\n    if x3[i] != [\".\" for i in range(len(x3[i]))]:\n        x4.append(x3[i])\nx4 = np.array(x4).T.tolist()\nfor i in range(len(x4)):\n    for j in range(len(x4[0])):\n        print(x4[i][j], end=\"\")\n    print()\n","code_v1_no_empty_lines":"h, w = list(map(int, input().split()))\na = []\nfor i in range(h):\n    k = eval(input())\n    if k != \".\" * w:\n        a.append(k)\nl = len(a)\n# print(a)\nans = [[] for i in range(l)]\nfor i in range(w):\n    for j in range(l):\n        if a[j][i] == \"#\":\n            for k in range(l):\n                ans[k].append(a[k][i])\n            break\nfor i in range(l):\n    print((\"\".join(ans[i])))\n","code_same":false,"relative_loc_diff_percent":15.0,"diff":["-import numpy as np","-","-h, w = input().split()","-h, w = int(h), int(w)","-x3 = []","+h, w = list(map(int, input().split()))","+a = []","-    x1 = input()","-    if x1 != w * \".\":","-        x3.append(list(x1))","-x3 = np.array(x3).T.tolist()","-x4 = []","+    k = eval(input())","+    if k != \".\" * w:","+        a.append(k)","+l = len(a)","+# print(a)","+ans = [[] for i in range(l)]","-    if x3[i] != [\".\" for i in range(len(x3[i]))]:","-        x4.append(x3[i])","-x4 = np.array(x4).T.tolist()","-for i in range(len(x4)):","-    for j in range(len(x4[0])):","-        print(x4[i][j], end=\"\")","-    print()","+    for j in range(l):","+        if a[j][i] == \"#\":","+            for k in range(l):","+                ans[k].append(a[k][i])","+            break","+for i in range(l):","+    print((\"\".join(ans[i])))"],"diff_only_import_comment":false,"measured_runtime_v0":1.2296837176,"measured_runtime_v1":0.215579181,"runtime_lift":5.7040930953,"key":["s593926411","s601943768"]}
{"user_id":"u945359338","problem_id":"p02595","language":"python","submission_id_v0":"s600709561","submission_id_v1":"s552125258","cpu_time_v0":840,"cpu_time_v1":755,"memory_v0":57424,"memory_v1":9988,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.12,"input":"from decimal import *\n\ngetcontext().prec = 14\n\n\n\nN, D = list(map(int, input().split()))\n\n\n\n\n\ndef distance(x1, x2, y1, y2):\n\n    dx = x2-x1\n\n    dy = y2-y1\n\n    return (dx*dx + dy*dy).sqrt()\n\n\n\n\n\nX = [0] * N\n\nY = [0] * N\n\nans = 0\n\nfor i in range(N):\n\n    X[i], Y[i] = list(map(Decimal, input().split()))\n\n    if (distance(0, X[i], 0, Y[i]) <= D):\n\n        ans += 1\n\n\n\nprint(ans)\n","target":"from decimal import *\n\ngetcontext().prec = 14  # \u3042\u3093\u307e\u308a\u5927\u304d\u3044\u3068\u8a08\u7b97\u9045\u3044\u304b\u3082\n\n\n\nN, D = list(map(int, input().split()))\n\n\n\ndef distance(x1, x2, y1, y2):\n\n    dx = x2-x1\n\n    dy = y2-y1\n\n    return (dx*dx + dy*dy).sqrt()\n\n\n\nans = 0\n\nfor i in range(N):\n\n    X, Y = list(map(Decimal, input().split()))\n\n    if (distance(0, X, 0, Y) <= D):\n\n        ans += 1\n\n\n\nprint(ans)\n","code_v0_loc":21,"code_v1_loc":17,"code_v0_num_chars":366,"code_v1_num_chars":342,"code_v0_no_empty_lines":"from decimal import *\n\ngetcontext().prec = 14\nN, D = list(map(int, input().split()))\n\n\ndef distance(x1, x2, y1, y2):\n    dx = x2 - x1\n    dy = y2 - y1\n    return (dx * dx + dy * dy).sqrt()\n\n\nX = [0] * N\nY = [0] * N\nans = 0\nfor i in range(N):\n    X[i], Y[i] = list(map(Decimal, input().split()))\n    if distance(0, X[i], 0, Y[i]) <= D:\n        ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"from decimal import *\n\ngetcontext().prec = 14  # \u3042\u3093\u307e\u308a\u5927\u304d\u3044\u3068\u8a08\u7b97\u9045\u3044\u304b\u3082\nN, D = list(map(int, input().split()))\n\n\ndef distance(x1, x2, y1, y2):\n    dx = x2 - x1\n    dy = y2 - y1\n    return (dx * dx + dy * dy).sqrt()\n\n\nans = 0\nfor i in range(N):\n    X, Y = list(map(Decimal, input().split()))\n    if distance(0, X, 0, Y) <= D:\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":19.0476190476,"diff":["-getcontext().prec = 14","+getcontext().prec = 14  # \u3042\u3093\u307e\u308a\u5927\u304d\u3044\u3068\u8a08\u7b97\u9045\u3044\u304b\u3082","-X = [0] * N","-Y = [0] * N","-    X[i], Y[i] = list(map(Decimal, input().split()))","-    if distance(0, X[i], 0, Y[i]) <= D:","+    X, Y = list(map(Decimal, input().split()))","+    if distance(0, X, 0, Y) <= D:"],"diff_only_import_comment":false,"measured_runtime_v0":0.4031279888,"measured_runtime_v1":0.2312259483,"runtime_lift":1.7434374978,"key":["s600709561","s552125258"]}
{"user_id":"u803617136","problem_id":"p03325","language":"python","submission_id_v0":"s116805601","submission_id_v1":"s513357045","cpu_time_v0":184,"cpu_time_v1":27,"memory_v0":40560,"memory_v1":4148,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":85.33,"input":"N = int(eval(input()))\n\n\n\nseq = list(map(int, input().split()))\n\n\n\ncnt = 0\n\n\n\nfor num in seq:\n\n    while num % 2 == 0:\n\n        cnt += 1\n\n        num \/= 2\n\n\n\nprint(cnt)\n","target":"n = int(eval(input()))\n\na = list(map(int, input().split()))\n\nans = 0\n\nfor num in a:\n\n    ans += format(num, 'b')[::-1].find('1')\n\nprint(ans)","code_v0_loc":12,"code_v1_loc":6,"code_v0_num_chars":163,"code_v1_num_chars":134,"code_v0_no_empty_lines":"N = int(eval(input()))\nseq = list(map(int, input().split()))\ncnt = 0\nfor num in seq:\n    while num % 2 == 0:\n        cnt += 1\n        num \/= 2\nprint(cnt)\n","code_v1_no_empty_lines":"n = int(eval(input()))\na = list(map(int, input().split()))\nans = 0\nfor num in a:\n    ans += format(num, \"b\")[::-1].find(\"1\")\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-N = int(eval(input()))","-seq = list(map(int, input().split()))","-cnt = 0","-for num in seq:","-    while num % 2 == 0:","-        cnt += 1","-        num \/= 2","-print(cnt)","+n = int(eval(input()))","+a = list(map(int, input().split()))","+ans = 0","+for num in a:","+    ans += format(num, \"b\")[::-1].find(\"1\")","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.1574799829,"measured_runtime_v1":0.0061847587,"runtime_lift":25.4625913758,"key":["s116805601","s513357045"]}
{"user_id":"u564589929","problem_id":"p03371","language":"python","submission_id_v0":"s501790970","submission_id_v1":"s324668886","cpu_time_v0":93,"cpu_time_v1":17,"memory_v0":3064,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":81.72,"input":"import sys\n\nsys.setrecursionlimit(10 ** 6)\n\n# input = sys.stdin.readline    ####\n\nint1 = lambda x: int(x) - 1\n\ndef II(): return int(eval(input()))\n\n\n\ndef MI(): return list(map(int, input().split()))\n\ndef MI1(): return list(map(int1, input().split()))\n\n\n\ndef LI(): return list(map(int, input().split()))\n\ndef LI1(): return list(map(int1, input().split()))\n\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\n\n\ndef printlist(lst, k='\\n'): print((k.join(list(map(str, lst)))))\n\nINF = float('inf')\n\n\n\ndef solve():\n\n    a, b, c, x, y = MI()\n\n\n\n    ans = INF\n\n    for k in range(100001):\n\n        yen = 2 * c * k + max(0, x-k) * a + max(0, y-k) * b\n\n        ans = min(ans, yen)\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    solve()\n","target":"import sys\n\nsys.setrecursionlimit(10 ** 6)\n\n# input = sys.stdin.readline    ####\n\nint1 = lambda x: int(x) - 1\n\ndef II(): return int(eval(input()))\n\n\n\ndef MI(): return list(map(int, input().split()))\n\ndef MI1(): return list(map(int1, input().split()))\n\n\n\ndef LI(): return list(map(int, input().split()))\n\ndef LI1(): return list(map(int1, input().split()))\n\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\n\n\ndef printlist(lst, k='\\n'): print((k.join(list(map(str, lst)))))\n\nINF = float('inf')\n\n\n\ndef solve():\n\n    a, b, c, x, y = MI()\n\n\n\n    ans = 0\n\n    if a + b <= 2 * c:\n\n        mn = min(x, y)\n\n        ans = a * mn + b * mn + max(0, x-mn) * min(a, 2*c) + max(0, y-mn) * min(b, 2*c)\n\n\n\n    else:\n\n        mn = min(x, y)\n\n        ans = mn * 2 * c + max(0, x-mn) * min(a, 2*c) + max(0, y-mn) * min(b, 2*c)\n\n\n\n    print(ans)\n\n\n\n\n\n\n\nif __name__ == '__main__':\n\n    solve()\n","code_v0_loc":28,"code_v1_loc":34,"code_v0_num_chars":727,"code_v1_num_chars":868,"code_v0_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10**6)\n# input = sys.stdin.readline    ####\nint1 = lambda x: int(x) - 1\n\n\ndef II():\n    return int(eval(input()))\n\n\ndef MI():\n    return list(map(int, input().split()))\n\n\ndef MI1():\n    return list(map(int1, input().split()))\n\n\ndef LI():\n    return list(map(int, input().split()))\n\n\ndef LI1():\n    return list(map(int1, input().split()))\n\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\n\ndef printlist(lst, k=\"\\n\"):\n    print((k.join(list(map(str, lst)))))\n\n\nINF = float(\"inf\")\n\n\ndef solve():\n    a, b, c, x, y = MI()\n    ans = INF\n    for k in range(100001):\n        yen = 2 * c * k + max(0, x - k) * a + max(0, y - k) * b\n        ans = min(ans, yen)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    solve()\n","code_v1_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10**6)\n# input = sys.stdin.readline    ####\nint1 = lambda x: int(x) - 1\n\n\ndef II():\n    return int(eval(input()))\n\n\ndef MI():\n    return list(map(int, input().split()))\n\n\ndef MI1():\n    return list(map(int1, input().split()))\n\n\ndef LI():\n    return list(map(int, input().split()))\n\n\ndef LI1():\n    return list(map(int1, input().split()))\n\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\n\ndef printlist(lst, k=\"\\n\"):\n    print((k.join(list(map(str, lst)))))\n\n\nINF = float(\"inf\")\n\n\ndef solve():\n    a, b, c, x, y = MI()\n    ans = 0\n    if a + b <= 2 * c:\n        mn = min(x, y)\n        ans = (\n            a * mn\n            + b * mn\n            + max(0, x - mn) * min(a, 2 * c)\n            + max(0, y - mn) * min(b, 2 * c)\n        )\n    else:\n        mn = min(x, y)\n        ans = (\n            mn * 2 * c + max(0, x - mn) * min(a, 2 * c) + max(0, y - mn) * min(b, 2 * c)\n        )\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    solve()\n","code_same":false,"relative_loc_diff_percent":17.6470588235,"diff":["-    ans = INF","-    for k in range(100001):","-        yen = 2 * c * k + max(0, x - k) * a + max(0, y - k) * b","-        ans = min(ans, yen)","+    ans = 0","+    if a + b <= 2 * c:","+        mn = min(x, y)","+        ans = (","+            a * mn","+            + b * mn","+            + max(0, x - mn) * min(a, 2 * c)","+            + max(0, y - mn) * min(b, 2 * c)","+        )","+    else:","+        mn = min(x, y)","+        ans = (","+            mn * 2 * c + max(0, x - mn) * min(a, 2 * c) + max(0, y - mn) * min(b, 2 * c)","+        )"],"diff_only_import_comment":false,"measured_runtime_v0":1.2337559407,"measured_runtime_v1":0.3123451986,"runtime_lift":3.9499756873,"key":["s501790970","s324668886"]}
{"user_id":"u186838327","problem_id":"p03796","language":"python","submission_id_v0":"s155084707","submission_id_v1":"s301395968","cpu_time_v0":231,"cpu_time_v1":177,"memory_v0":4104,"memory_v1":38640,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":23.38,"input":"import math\n\nn = int(eval(input()))\n\nprint((math.factorial(n)%(10**9+7)))","target":"n = int(eval(input()))\n\nans = 1\n\nmod = 10**9+7\n\nfor i in range(1, n+1):\n\n    ans *= i\n\n    ans %= mod\n\n\n\nans %= mod\n\nprint(ans)\n","code_v0_loc":3,"code_v1_loc":9,"code_v0_num_chars":65,"code_v1_num_chars":122,"code_v0_no_empty_lines":"import math\n\nn = int(eval(input()))\nprint((math.factorial(n) % (10**9 + 7)))\n","code_v1_no_empty_lines":"n = int(eval(input()))\nans = 1\nmod = 10**9 + 7\nfor i in range(1, n + 1):\n    ans *= i\n    ans %= mod\nans %= mod\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":66.6666666667,"diff":["-import math","-","-print((math.factorial(n) % (10**9 + 7)))","+ans = 1","+mod = 10**9 + 7","+for i in range(1, n + 1):","+    ans *= i","+    ans %= mod","+ans %= mod","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.5786725054,"measured_runtime_v1":0.2556207638,"runtime_lift":2.2637930378,"key":["s155084707","s301395968"]}
{"user_id":"u014333473","problem_id":"p03845","language":"python","submission_id_v0":"s045706452","submission_id_v1":"s705375036","cpu_time_v0":29,"cpu_time_v1":25,"memory_v0":9180,"memory_v1":9164,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.79,"input":"n,t=int(input()),list(map(int,input().split()));T=sum(t)\n\nprint(*[T-t[i-1]+j for i,j in [list(map(int,input().split())) for _ in range(int(input()))]],sep='\\n')\n","target":"input();t=list(map(int,input().split()));T=sum(t)\n\nprint(*[T-t[i-1]+j for i,j in [list(map(int,input().split())) for _ in range(int(input()))]],sep='\\n')\n","code_v0_loc":2,"code_v1_loc":2,"code_v0_num_chars":160,"code_v1_num_chars":153,"code_v0_no_empty_lines":"n, t = int(input()), list(map(int, input().split()))\nT = sum(t)\nprint(\n    *[\n        T - t[i - 1] + j\n        for i, j in [list(map(int, input().split())) for _ in range(int(input()))]\n    ],\n    sep=\"\\n\"\n)\n","code_v1_no_empty_lines":"input()\nt = list(map(int, input().split()))\nT = sum(t)\nprint(\n    *[\n        T - t[i - 1] + j\n        for i, j in [list(map(int, input().split())) for _ in range(int(input()))]\n    ],\n    sep=\"\\n\"\n)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-n, t = int(input()), list(map(int, input().split()))","+input()","+t = list(map(int, input().split()))"],"diff_only_import_comment":false,"measured_runtime_v0":0.308619008,"measured_runtime_v1":0.2417461898,"runtime_lift":1.2766240837,"key":["s045706452","s705375036"]}
{"user_id":"u906501980","problem_id":"p03363","language":"python","submission_id_v0":"s203042500","submission_id_v1":"s990747122","cpu_time_v0":316,"cpu_time_v1":264,"memory_v0":52496,"memory_v1":52544,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.46,"input":"n = int(eval(input()))\n\nA = [int(i) for i in input().split()]\n\nS = [0]*(n+1)\n\nnum={}\n\nfor i in range(n):\n\n    S[i+1] = S[i] + A[i]\n\nfor i in S:\n\n    if str(i) in list(num.keys()):\n\n        num[str(i)] += 1\n\n    else:\n\n        num[str(i)] = 1\n\nout = [i*(i-1)\/\/2 for i in list(num.values()) if i>1]\n\nprint((sum(out)))","target":"n = int(eval(input()))\n\nA = [int(i) for i in input().split()]\n\nS = [0]*(n+1)\n\nnum = {}\n\nfor i in range(n):\n\n    S[i+1] = S[i] + A[i]\n\nfor i in S:\n\n    s = str(i)\n\n    num[s] = 1 if s not in list(num.keys()) else num[s]+1\n\nout = [i*(i-1)\/\/2 for i in list(num.values()) if i > 1]\n\nprint((sum(out)))","code_v0_loc":13,"code_v1_loc":11,"code_v0_num_chars":295,"code_v1_num_chars":276,"code_v0_no_empty_lines":"n = int(eval(input()))\nA = [int(i) for i in input().split()]\nS = [0] * (n + 1)\nnum = {}\nfor i in range(n):\n    S[i + 1] = S[i] + A[i]\nfor i in S:\n    if str(i) in list(num.keys()):\n        num[str(i)] += 1\n    else:\n        num[str(i)] = 1\nout = [i * (i - 1) \/\/ 2 for i in list(num.values()) if i > 1]\nprint((sum(out)))\n","code_v1_no_empty_lines":"n = int(eval(input()))\nA = [int(i) for i in input().split()]\nS = [0] * (n + 1)\nnum = {}\nfor i in range(n):\n    S[i + 1] = S[i] + A[i]\nfor i in S:\n    s = str(i)\n    num[s] = 1 if s not in list(num.keys()) else num[s] + 1\nout = [i * (i - 1) \/\/ 2 for i in list(num.values()) if i > 1]\nprint((sum(out)))\n","code_same":false,"relative_loc_diff_percent":15.3846153846,"diff":["-    if str(i) in list(num.keys()):","-        num[str(i)] += 1","-    else:","-        num[str(i)] = 1","+    s = str(i)","+    num[s] = 1 if s not in list(num.keys()) else num[s] + 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.4443410683,"measured_runtime_v1":0.2339228122,"runtime_lift":1.8995200341,"key":["s203042500","s990747122"]}
{"user_id":"u805332733","problem_id":"p02555","language":"python","submission_id_v0":"s317659277","submission_id_v1":"s521440898","cpu_time_v0":89,"cpu_time_v1":65,"memory_v0":64652,"memory_v1":63416,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":26.97,"input":"def resolve():\n\n  base = 10**9+7\n\n  S = int(eval(input()))\n\n  dp = [0] * (S+1)\n\n  dp[0] = 1\n\n\n\n  for i in range(1, S+1):\n\n    for u in range(i-2):\n\n      dp[i] += dp[u]\n\n      dp[i] %= base\n\n  # print(dp)\n\n  print((dp[S]%base))\n\n\n\nif __name__ == \"__main__\":\n\n  resolve()\n","target":"def resolve():\n\n  base = 10**9+7\n\n  S = int(eval(input()))\n\n  dp = [0] * (S+1)\n\n  dp[0] = 1\n\n\n\n  for i in range(3, S+1):\n\n    dp[i] = dp[i-1] + dp[i-3]\n\n  # print(dp)\n\n  print((dp[S]%base))\n\n\n\nif __name__ == \"__main__\":\n\n  resolve()","code_v0_loc":15,"code_v1_loc":13,"code_v0_num_chars":263,"code_v1_num_chars":224,"code_v0_no_empty_lines":"def resolve():\n    base = 10**9 + 7\n    S = int(eval(input()))\n    dp = [0] * (S + 1)\n    dp[0] = 1\n    for i in range(1, S + 1):\n        for u in range(i - 2):\n            dp[i] += dp[u]\n            dp[i] %= base\n    # print(dp)\n    print((dp[S] % base))\n\n\nif __name__ == \"__main__\":\n    resolve()\n","code_v1_no_empty_lines":"def resolve():\n    base = 10**9 + 7\n    S = int(eval(input()))\n    dp = [0] * (S + 1)\n    dp[0] = 1\n    for i in range(3, S + 1):\n        dp[i] = dp[i - 1] + dp[i - 3]\n    # print(dp)\n    print((dp[S] % base))\n\n\nif __name__ == \"__main__\":\n    resolve()\n","code_same":false,"relative_loc_diff_percent":13.3333333333,"diff":["-    for i in range(1, S + 1):","-        for u in range(i - 2):","-            dp[i] += dp[u]","-            dp[i] %= base","+    for i in range(3, S + 1):","+        dp[i] = dp[i - 1] + dp[i - 3]"],"diff_only_import_comment":false,"measured_runtime_v0":0.5217176821,"measured_runtime_v1":0.2045270953,"runtime_lift":2.5508487337,"key":["s317659277","s521440898"]}
{"user_id":"u340781749","problem_id":"p02604","language":"python","submission_id_v0":"s339976577","submission_id_v1":"s349402655","cpu_time_v0":907,"cpu_time_v1":582,"memory_v0":96844,"memory_v1":96788,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":35.83,"input":"import os\n\nimport sys\n\n\n\nimport numpy as np\n\n\n\n\n\ndef solve(n, precalc_x, precalc_y):\n\n    ans = np.full(n + 1, 10 ** 18, dtype=np.int64)\n\n\n\n    def get_cost(v, bit):\n\n        cost = 0\n\n        pcx = precalc_x[v]\n\n        pcy = precalc_y[v ^ bit]\n\n        for i in range(n):\n\n            if v & (1 << i):\n\n                continue\n\n            cost += min(pcx[i], pcy[i])\n\n        return cost\n\n\n\n    for bit in range(1 << n):\n\n        k = (bit & 0x5555) + (bit >> 1 & 0x5555)\n\n        k = (k & 0x3333) + (k >> 2 & 0x3333)\n\n        k = (k & 0x0f0f) + (k >> 4 & 0x0f0f)\n\n        k = (k & 0x00ff) + (k >> 8 & 0x00ff)\n\n        v = bit\n\n        while v:\n\n            ans[k] = min(ans[k], get_cost(v, bit))\n\n            v = (v - 1) & bit\n\n        ans[k] = min(ans[k], get_cost(0, bit))\n\n\n\n    return ans\n\n\n\n\n\nif sys.argv[-1] == 'ONLINE_JUDGE':\n\n    from numba.pycc import CC\n\n\n\n    cc = CC('my_module')\n\n    cc.export('solve', '(i8, i8[:,:], i8[:,:])')(solve)\n\n    cc.compile()\n\n    exit()\n\n\n\nif os.name == 'posix':\n\n    # noinspection PyUnresolvedReferences\n\n    from my_module import solve\n\nelse:\n\n    from numba import njit\n\n\n\n    solve = njit('(i8, i8[:,:], i8[:,:])', cache=True)(solve)\n\n    print('compiled', file=sys.stderr)\n\n\n\ninp = np.fromstring(sys.stdin.read(), dtype=np.int64, sep=' ')\n\nn = inp[0]\n\nxxx = inp[1::3]\n\nyyy = inp[2::3]\n\nppp = inp[3::3]\n\n\n\nbit_d = (((np.arange(1 << n)[:, None] & (1 << np.arange(n)))) > 0).astype(np.int64)\n\nprecalc_x = abs((xxx[None, :] * bit_d)[..., None] - xxx[None, None, :]).min(axis=1) * ppp[None, :]\n\nprecalc_y = abs((yyy[None, :] * bit_d)[..., None] - yyy[None, None, :]).min(axis=1) * ppp[None, :]\n\n\n\nans = solve(n, precalc_x, precalc_y)\n\nprint('\\n'.join(map(str, ans)))\n","target":"import os\n\nimport sys\n\n\n\nimport numpy as np\n\n\n\n\n\ndef solve(n, precalc_x, precalc_y):\n\n    ans = np.full(n + 1, 10 ** 18, dtype=np.int64)\n\n\n\n    def get_cost(v, bit):\n\n        cost = 0\n\n        pcx = precalc_x[v]\n\n        pcy = precalc_y[v ^ bit]\n\n        for i in range(n):\n\n            cost += min(pcx[i], pcy[i])\n\n        return cost\n\n\n\n    for bit in range(1 << n):\n\n        k = (bit & 0x5555) + (bit >> 1 & 0x5555)\n\n        k = (k & 0x3333) + (k >> 2 & 0x3333)\n\n        k = (k & 0x0f0f) + (k >> 4 & 0x0f0f)\n\n        k = (k & 0x00ff) + (k >> 8 & 0x00ff)\n\n        v = bit\n\n        while v:\n\n            ans[k] = min(ans[k], get_cost(v, bit))\n\n            v = (v - 1) & bit\n\n        ans[k] = min(ans[k], get_cost(0, bit))\n\n\n\n    return ans\n\n\n\n\n\nif sys.argv[-1] == 'ONLINE_JUDGE':\n\n    from numba.pycc import CC\n\n\n\n    cc = CC('my_module')\n\n    cc.export('solve', '(i8, i8[:,:], i8[:,:])')(solve)\n\n    cc.compile()\n\n    exit()\n\n\n\nif os.name == 'posix':\n\n    # noinspection PyUnresolvedReferences\n\n    from my_module import solve\n\nelse:\n\n    from numba import njit\n\n\n\n    solve = njit('(i8, i8[:,:], i8[:,:])', cache=True)(solve)\n\n    print('compiled', file=sys.stderr)\n\n\n\ninp = np.fromstring(sys.stdin.read(), dtype=np.int64, sep=' ')\n\nn = inp[0]\n\nxxx = inp[1::3]\n\nyyy = inp[2::3]\n\nppp = inp[3::3]\n\n\n\nbit_d = (((np.arange(1 << n)[:, None] & (1 << np.arange(n)))) > 0).astype(np.int64)\n\nprecalc_x = abs((xxx[None, :] * bit_d)[..., None] - xxx[None, None, :]).min(axis=1) * ppp[None, :]\n\nprecalc_y = abs((yyy[None, :] * bit_d)[..., None] - yyy[None, None, :]).min(axis=1) * ppp[None, :]\n\n\n\nans = solve(n, precalc_x, precalc_y)\n\nprint('\\n'.join(map(str, ans)))\n","code_v0_loc":62,"code_v1_loc":60,"code_v0_num_chars":1714,"code_v1_num_chars":1658,"code_v0_no_empty_lines":"import os\nimport sys\nimport numpy as np\n\n\ndef solve(n, precalc_x, precalc_y):\n    ans = np.full(n + 1, 10**18, dtype=np.int64)\n\n    def get_cost(v, bit):\n        cost = 0\n        pcx = precalc_x[v]\n        pcy = precalc_y[v ^ bit]\n        for i in range(n):\n            if v & (1 << i):\n                continue\n            cost += min(pcx[i], pcy[i])\n        return cost\n\n    for bit in range(1 << n):\n        k = (bit & 0x5555) + (bit >> 1 & 0x5555)\n        k = (k & 0x3333) + (k >> 2 & 0x3333)\n        k = (k & 0x0F0F) + (k >> 4 & 0x0F0F)\n        k = (k & 0x00FF) + (k >> 8 & 0x00FF)\n        v = bit\n        while v:\n            ans[k] = min(ans[k], get_cost(v, bit))\n            v = (v - 1) & bit\n        ans[k] = min(ans[k], get_cost(0, bit))\n    return ans\n\n\nif sys.argv[-1] == \"ONLINE_JUDGE\":\n    from numba.pycc import CC\n\n    cc = CC(\"my_module\")\n    cc.export(\"solve\", \"(i8, i8[:,:], i8[:,:])\")(solve)\n    cc.compile()\n    exit()\nif os.name == \"posix\":\n    # noinspection PyUnresolvedReferences\n    from my_module import solve\nelse:\n    from numba import njit\n\n    solve = njit(\"(i8, i8[:,:], i8[:,:])\", cache=True)(solve)\n    print(\"compiled\", file=sys.stderr)\ninp = np.fromstring(sys.stdin.read(), dtype=np.int64, sep=\" \")\nn = inp[0]\nxxx = inp[1::3]\nyyy = inp[2::3]\nppp = inp[3::3]\nbit_d = (((np.arange(1 << n)[:, None] & (1 << np.arange(n)))) > 0).astype(np.int64)\nprecalc_x = (\n    abs((xxx[None, :] * bit_d)[..., None] - xxx[None, None, :]).min(axis=1)\n    * ppp[None, :]\n)\nprecalc_y = (\n    abs((yyy[None, :] * bit_d)[..., None] - yyy[None, None, :]).min(axis=1)\n    * ppp[None, :]\n)\nans = solve(n, precalc_x, precalc_y)\nprint(\"\\n\".join(map(str, ans)))\n","code_v1_no_empty_lines":"import os\nimport sys\nimport numpy as np\n\n\ndef solve(n, precalc_x, precalc_y):\n    ans = np.full(n + 1, 10**18, dtype=np.int64)\n\n    def get_cost(v, bit):\n        cost = 0\n        pcx = precalc_x[v]\n        pcy = precalc_y[v ^ bit]\n        for i in range(n):\n            cost += min(pcx[i], pcy[i])\n        return cost\n\n    for bit in range(1 << n):\n        k = (bit & 0x5555) + (bit >> 1 & 0x5555)\n        k = (k & 0x3333) + (k >> 2 & 0x3333)\n        k = (k & 0x0F0F) + (k >> 4 & 0x0F0F)\n        k = (k & 0x00FF) + (k >> 8 & 0x00FF)\n        v = bit\n        while v:\n            ans[k] = min(ans[k], get_cost(v, bit))\n            v = (v - 1) & bit\n        ans[k] = min(ans[k], get_cost(0, bit))\n    return ans\n\n\nif sys.argv[-1] == \"ONLINE_JUDGE\":\n    from numba.pycc import CC\n\n    cc = CC(\"my_module\")\n    cc.export(\"solve\", \"(i8, i8[:,:], i8[:,:])\")(solve)\n    cc.compile()\n    exit()\nif os.name == \"posix\":\n    # noinspection PyUnresolvedReferences\n    from my_module import solve\nelse:\n    from numba import njit\n\n    solve = njit(\"(i8, i8[:,:], i8[:,:])\", cache=True)(solve)\n    print(\"compiled\", file=sys.stderr)\ninp = np.fromstring(sys.stdin.read(), dtype=np.int64, sep=\" \")\nn = inp[0]\nxxx = inp[1::3]\nyyy = inp[2::3]\nppp = inp[3::3]\nbit_d = (((np.arange(1 << n)[:, None] & (1 << np.arange(n)))) > 0).astype(np.int64)\nprecalc_x = (\n    abs((xxx[None, :] * bit_d)[..., None] - xxx[None, None, :]).min(axis=1)\n    * ppp[None, :]\n)\nprecalc_y = (\n    abs((yyy[None, :] * bit_d)[..., None] - yyy[None, None, :]).min(axis=1)\n    * ppp[None, :]\n)\nans = solve(n, precalc_x, precalc_y)\nprint(\"\\n\".join(map(str, ans)))\n","code_same":false,"relative_loc_diff_percent":3.2258064516,"diff":["-            if v & (1 << i):","-                continue"],"diff_only_import_comment":false,"measured_runtime_v0":2.2792407084,"measured_runtime_v1":1.4276063459,"runtime_lift":1.5965470558,"key":["s339976577","s349402655"]}
{"user_id":"u490552503","problem_id":"p03494","language":"python","submission_id_v0":"s709803197","submission_id_v1":"s765235052","cpu_time_v0":161,"cpu_time_v1":18,"memory_v0":12392,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.82,"input":"import numpy as np\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\nA = np.array(A)\n\ncount = 0\n\nwhile 1:\n\n    x = 0\n\n    for i in range(N):\n\n        if A[i] % 2 == 1:\n\n            x = 1\n\n    if x == 1:\n\n        break\n\n    else:\n\n        A = A \/ 2\n\n        count+=1\n\nprint(count)","target":"import math\n\nn = eval(input())\n\na = list(map(int, input().split()))\n\nans = float('inf')\n\nfor i in a:\n\n    ans = min(ans, len(bin(i)) - bin(i).rfind('1') - 1)\n\nprint((round(ans)))","code_v0_loc":16,"code_v1_loc":7,"code_v0_num_chars":285,"code_v1_num_chars":170,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nA = list(map(int, input().split()))\nA = np.array(A)\ncount = 0\nwhile 1:\n    x = 0\n    for i in range(N):\n        if A[i] % 2 == 1:\n            x = 1\n    if x == 1:\n        break\n    else:\n        A = A \/ 2\n        count += 1\nprint(count)\n","code_v1_no_empty_lines":"import math\n\nn = eval(input())\na = list(map(int, input().split()))\nans = float(\"inf\")\nfor i in a:\n    ans = min(ans, len(bin(i)) - bin(i).rfind(\"1\") - 1)\nprint((round(ans)))\n","code_same":false,"relative_loc_diff_percent":56.25,"diff":["-import numpy as np","+import math","-N = int(eval(input()))","-A = list(map(int, input().split()))","-A = np.array(A)","-count = 0","-while 1:","-    x = 0","-    for i in range(N):","-        if A[i] % 2 == 1:","-            x = 1","-    if x == 1:","-        break","-    else:","-        A = A \/ 2","-        count += 1","-print(count)","+n = eval(input())","+a = list(map(int, input().split()))","+ans = float(\"inf\")","+for i in a:","+    ans = min(ans, len(bin(i)) - bin(i).rfind(\"1\") - 1)","+print((round(ans)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.4903787866,"measured_runtime_v1":0.2328151391,"runtime_lift":6.4015544373,"key":["s709803197","s765235052"]}
{"user_id":"u922449550","problem_id":"p02792","language":"python","submission_id_v0":"s475401488","submission_id_v1":"s941984259","cpu_time_v0":197,"cpu_time_v1":17,"memory_v0":3188,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":91.37,"input":"N = int(eval(input()))\n\n\n\ntable = [[0]*10 for i in range(10)]\n\n\n\nfor i in range(1, N+1):\n\n  s = str(i)\n\n  id1 = int(s[0])\n\n  id2 = int(s[-1])\n\n  table[id1][id2] += 1\n\n\n\nans = 0\n\nfor i in range(10):\n\n  for j in range(10):\n\n    ans += table[i][j]*table[j][i]\n\n\n\nprint(ans)","target":"N = eval(input())\n\nm = len(N)\n\n\n\na0 = int(N[0])\n\na1 = int(N[-1])\n\n\n\nans = 0\n\nif m == 1:\n\n  ans = int(N)\n\nelse:\n\n  mid = (int(N[1:]) - a1)\/\/10\n\n  t = 10**(m-2)\n\n  ans = 9\n\n  ans += ((a0-1)*t) * 2\n\n  ans += (mid + (a1>=a0)) * 2\n\n  ans += ((a0-1)*t)**2\n\n  ans += ((mid*(a0-1) + min(a0-1, a1))*t) * 2\n\n  ans += (mid + (a1>=a0))**2\n\n  if m >= 3:\n\n    ans += (t - 1) * 2\n\n    ans += ((a0-1)*(t - 1)*t) * 2\n\n    ans += (mid * (t - 1)) * 2\n\n    ans += (a1 * (t - 1)\/\/9) * 2\n\n    ans += (t - 1)**2\n\n\n\nprint(ans)","code_v0_loc":16,"code_v1_loc":26,"code_v0_num_chars":264,"code_v1_num_chars":496,"code_v0_no_empty_lines":"N = int(eval(input()))\ntable = [[0] * 10 for i in range(10)]\nfor i in range(1, N + 1):\n    s = str(i)\n    id1 = int(s[0])\n    id2 = int(s[-1])\n    table[id1][id2] += 1\nans = 0\nfor i in range(10):\n    for j in range(10):\n        ans += table[i][j] * table[j][i]\nprint(ans)\n","code_v1_no_empty_lines":"N = eval(input())\nm = len(N)\na0 = int(N[0])\na1 = int(N[-1])\nans = 0\nif m == 1:\n    ans = int(N)\nelse:\n    mid = (int(N[1:]) - a1) \/\/ 10\n    t = 10 ** (m - 2)\n    ans = 9\n    ans += ((a0 - 1) * t) * 2\n    ans += (mid + (a1 >= a0)) * 2\n    ans += ((a0 - 1) * t) ** 2\n    ans += ((mid * (a0 - 1) + min(a0 - 1, a1)) * t) * 2\n    ans += (mid + (a1 >= a0)) ** 2\n    if m >= 3:\n        ans += (t - 1) * 2\n        ans += ((a0 - 1) * (t - 1) * t) * 2\n        ans += (mid * (t - 1)) * 2\n        ans += (a1 * (t - 1) \/\/ 9) * 2\n        ans += (t - 1) ** 2\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":38.4615384615,"diff":["-N = int(eval(input()))","-table = [[0] * 10 for i in range(10)]","-for i in range(1, N + 1):","-    s = str(i)","-    id1 = int(s[0])","-    id2 = int(s[-1])","-    table[id1][id2] += 1","+N = eval(input())","+m = len(N)","+a0 = int(N[0])","+a1 = int(N[-1])","-for i in range(10):","-    for j in range(10):","-        ans += table[i][j] * table[j][i]","+if m == 1:","+    ans = int(N)","+else:","+    mid = (int(N[1:]) - a1) \/\/ 10","+    t = 10 ** (m - 2)","+    ans = 9","+    ans += ((a0 - 1) * t) * 2","+    ans += (mid + (a1 >= a0)) * 2","+    ans += ((a0 - 1) * t) ** 2","+    ans += ((mid * (a0 - 1) + min(a0 - 1, a1)) * t) * 2","+    ans += (mid + (a1 >= a0)) ** 2","+    if m >= 3:","+        ans += (t - 1) * 2","+        ans += ((a0 - 1) * (t - 1) * t) * 2","+        ans += (mid * (t - 1)) * 2","+        ans += (a1 * (t - 1) \/\/ 9) * 2","+        ans += (t - 1) ** 2"],"diff_only_import_comment":false,"measured_runtime_v0":0.589133962,"measured_runtime_v1":0.3507217311,"runtime_lift":1.6797760439,"key":["s475401488","s941984259"]}
{"user_id":"u450904670","problem_id":"p03796","language":"python","submission_id_v0":"s280545626","submission_id_v1":"s422534863","cpu_time_v0":73,"cpu_time_v1":40,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":45.21,"input":"n = int(eval(input()))\n\nres = 1\n\nfor num in range(1, n+1):\n\n  res = res * num\n\n  res = res % (pow(10,9) + 7)\n\nprint(res)","target":"n = int(eval(input()))\n\nres = 1\n\nfor num in range(1, n+1):\n\n    res = res * num\n\n    res = res % (10**9 + 7)\n\nprint(res)\n","code_v0_loc":6,"code_v1_loc":6,"code_v0_num_chars":114,"code_v1_num_chars":115,"code_v0_no_empty_lines":"n = int(eval(input()))\nres = 1\nfor num in range(1, n + 1):\n    res = res * num\n    res = res % (pow(10, 9) + 7)\nprint(res)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nres = 1\nfor num in range(1, n + 1):\n    res = res * num\n    res = res % (10**9 + 7)\nprint(res)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    res = res % (pow(10, 9) + 7)","+    res = res % (10**9 + 7)"],"diff_only_import_comment":false,"measured_runtime_v0":0.4279417639,"measured_runtime_v1":0.3313806841,"runtime_lift":1.2913901876,"key":["s280545626","s422534863"]}
{"user_id":"u333190709","problem_id":"p03371","language":"python","submission_id_v0":"s264866690","submission_id_v1":"s762683898","cpu_time_v0":127,"cpu_time_v1":17,"memory_v0":5304,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":86.61,"input":"#!\/usr\/bin\/env python3\n\nimport sys, math, fractions, itertools\n\n\n\n\n\ndef solve(A: int, B: int, C: int, X: int, Y: int):\n\n    mn = 1e9\n\n    for i in range(0, 2*(max(X, Y)+1), 2):\n\n        mn = min(mn, C*i+A*max(X-i\/\/2, 0)+B*max(Y-i\/\/2, 0))\n\n    print((int(mn)))\n\n    return\n\n\n\n\n\n# Generated by 1.1.4 https:\/\/github.com\/kyuridenamida\/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\n\ndef main():\n\n    def iterate_tokens():\n\n        for line in sys.stdin:\n\n            for word in line.split():\n\n                yield word\n\n    tokens = iterate_tokens()\n\n    A = int(next(tokens))  # type: int\n\n    B = int(next(tokens))  # type: int\n\n    C = int(next(tokens))  # type: int\n\n    X = int(next(tokens))  # type: int\n\n    Y = int(next(tokens))  # type: int\n\n    solve(A, B, C, X, Y)\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"#!\/usr\/bin\/env python3\n\nimport sys\n\n\n\n\n\ndef solve(A: int, B: int, C: int, X: int, Y: int):\n\n    c = 0\n\n    if (A + B < 2 * C):\n\n        c += min(X, Y) * (A + B)\n\n    else:\n\n        c += min(X, Y) * 2 * C\n\n    if X > Y:\n\n        c += (X - Y) * min(A, 2 * C)\n\n    else:\n\n        c += (Y - X) * min(B, 2 * C)\n\n    print(c)\n\n    return\n\n\n\n\n\n# Generated by 1.1.5 https:\/\/github.com\/kyuridenamida\/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\n\ndef main():\n\n    def iterate_tokens():\n\n        for line in sys.stdin:\n\n            for word in line.split():\n\n                yield word\n\n    tokens = iterate_tokens()\n\n    A = int(next(tokens))  # type: int\n\n    B = int(next(tokens))  # type: int\n\n    C = int(next(tokens))  # type: int\n\n    X = int(next(tokens))  # type: int\n\n    Y = int(next(tokens))  # type: int\n\n    solve(A, B, C, X, Y)\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":28,"code_v1_loc":34,"code_v0_num_chars":879,"code_v1_num_chars":941,"code_v0_no_empty_lines":"#!\/usr\/bin\/env python3\nimport sys, math, fractions, itertools\n\n\ndef solve(A: int, B: int, C: int, X: int, Y: int):\n    mn = 1e9\n    for i in range(0, 2 * (max(X, Y) + 1), 2):\n        mn = min(mn, C * i + A * max(X - i \/\/ 2, 0) + B * max(Y - i \/\/ 2, 0))\n    print((int(mn)))\n    return\n\n\n# Generated by 1.1.4 https:\/\/github.com\/kyuridenamida\/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n\n    tokens = iterate_tokens()\n    A = int(next(tokens))  # type: int\n    B = int(next(tokens))  # type: int\n    C = int(next(tokens))  # type: int\n    X = int(next(tokens))  # type: int\n    Y = int(next(tokens))  # type: int\n    solve(A, B, C, X, Y)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"#!\/usr\/bin\/env python3\nimport sys\n\n\ndef solve(A: int, B: int, C: int, X: int, Y: int):\n    c = 0\n    if A + B < 2 * C:\n        c += min(X, Y) * (A + B)\n    else:\n        c += min(X, Y) * 2 * C\n    if X > Y:\n        c += (X - Y) * min(A, 2 * C)\n    else:\n        c += (Y - X) * min(B, 2 * C)\n    print(c)\n    return\n\n\n# Generated by 1.1.5 https:\/\/github.com\/kyuridenamida\/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n\n    tokens = iterate_tokens()\n    A = int(next(tokens))  # type: int\n    B = int(next(tokens))  # type: int\n    C = int(next(tokens))  # type: int\n    X = int(next(tokens))  # type: int\n    Y = int(next(tokens))  # type: int\n    solve(A, B, C, X, Y)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":17.6470588235,"diff":["-import sys, math, fractions, itertools","+import sys","-    mn = 1e9","-    for i in range(0, 2 * (max(X, Y) + 1), 2):","-        mn = min(mn, C * i + A * max(X - i \/\/ 2, 0) + B * max(Y - i \/\/ 2, 0))","-    print((int(mn)))","+    c = 0","+    if A + B < 2 * C:","+        c += min(X, Y) * (A + B)","+    else:","+        c += min(X, Y) * 2 * C","+    if X > Y:","+        c += (X - Y) * min(A, 2 * C)","+    else:","+        c += (Y - X) * min(B, 2 * C)","+    print(c)","-# Generated by 1.1.4 https:\/\/github.com\/kyuridenamida\/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)","+# Generated by 1.1.5 https:\/\/github.com\/kyuridenamida\/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)"],"diff_only_import_comment":false,"measured_runtime_v0":0.4482344875,"measured_runtime_v1":0.3314408262,"runtime_lift":1.3523816383,"key":["s264866690","s762683898"]}
{"user_id":"u597455618","problem_id":"p03038","language":"python","submission_id_v0":"s109141472","submission_id_v1":"s852161134","cpu_time_v0":276,"cpu_time_v1":208,"memory_v0":28384,"memory_v1":31520,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":24.64,"input":"import sys\n\nfrom operator import itemgetter\n\n\n\nn, m = list(map(int, input().split()))\n\na = list(map(int, sys.stdin.readline().split()))\n\nbc = [ tuple(map(int, x.split())) for x in sys.stdin.readlines()]\n\nbc.sort(key = itemgetter(1), reverse=True)\n\nbc.append((n,0))\n\ndiff = []\n\nfor b, c in bc:\n\n    diff += [c] * b\n\n    if len(diff) > n:\n\n        break\n\n\n\na += diff\n\na.sort()\n\nprint((sum(a[-n:])))\n","target":"import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nfrom operator import itemgetter\n\n\n\nn, m = list(map(int, readline().split()))\n\na = list(map(int, readline().split()))\n\nm = list(map(int, read().split()))\n\nbc = list(zip(m,m))\n\n\n\nbc.sort(key = itemgetter(1), reverse=True)\n\nbc.append((n,0))\n\ndiff = []\n\nfor b, c in bc:\n\n    diff += [c] * b\n\n    if len(diff) > n:\n\n        break\n\n\n\na += diff\n\na.sort()\n\nprint((sum(a[-n:])))\n","code_v0_loc":17,"code_v1_loc":21,"code_v0_num_chars":389,"code_v1_num_chars":436,"code_v0_no_empty_lines":"import sys\nfrom operator import itemgetter\n\nn, m = list(map(int, input().split()))\na = list(map(int, sys.stdin.readline().split()))\nbc = [tuple(map(int, x.split())) for x in sys.stdin.readlines()]\nbc.sort(key=itemgetter(1), reverse=True)\nbc.append((n, 0))\ndiff = []\nfor b, c in bc:\n    diff += [c] * b\n    if len(diff) > n:\n        break\na += diff\na.sort()\nprint((sum(a[-n:])))\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nfrom operator import itemgetter\n\nn, m = list(map(int, readline().split()))\na = list(map(int, readline().split()))\nm = list(map(int, read().split()))\nbc = list(zip(m, m))\nbc.sort(key=itemgetter(1), reverse=True)\nbc.append((n, 0))\ndiff = []\nfor b, c in bc:\n    diff += [c] * b\n    if len(diff) > n:\n        break\na += diff\na.sort()\nprint((sum(a[-n:])))\n","code_same":false,"relative_loc_diff_percent":19.0476190476,"diff":["+","+read = sys.stdin.buffer.read","+readline = sys.stdin.buffer.readline","-n, m = list(map(int, input().split()))","-a = list(map(int, sys.stdin.readline().split()))","-bc = [tuple(map(int, x.split())) for x in sys.stdin.readlines()]","+n, m = list(map(int, readline().split()))","+a = list(map(int, readline().split()))","+m = list(map(int, read().split()))","+bc = list(zip(m, m))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2032662067,"measured_runtime_v1":0.0066151552,"runtime_lift":30.7273525221,"key":["s109141472","s852161134"]}
{"user_id":"u498487134","problem_id":"p02917","language":"python","submission_id_v0":"s303870321","submission_id_v1":"s766724876","cpu_time_v0":162,"cpu_time_v1":67,"memory_v0":38256,"memory_v1":61812,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":58.64,"input":"N = int(eval(input()))\n\nB =list(map(int,input().split()))\n\nA=[0]*N\n\n\n\nA[0]=B[0]\n\nfor i in range(1,N-1):\n\n    A[i]=min(B[i],B[i-1])\n\nA[-1]=B[-1]\n\nprint((sum(A)))","target":"import sys\n\ninput = sys.stdin.readline\n\n\n\ndef I(): return int(eval(input()))\n\ndef MI(): return list(map(int, input().split()))\n\ndef LI(): return list(map(int, input().split()))\n\n\n\ndef main():\n\n    mod=10**9+7\n\n    N=I()\n\n    B=LI()\n\n    A=[0]*N\n\n    A[0]=B[0]\n\n    A[-1]=B[-1]\n\n    for i in range(N-2):\n\n        A[i+1]=min(B[i],B[i+1])\n\n        \n\n    print((sum(A)))\n\n\n\nmain()\n","code_v0_loc":9,"code_v1_loc":20,"code_v0_num_chars":152,"code_v1_num_chars":363,"code_v0_no_empty_lines":"N = int(eval(input()))\nB = list(map(int, input().split()))\nA = [0] * N\nA[0] = B[0]\nfor i in range(1, N - 1):\n    A[i] = min(B[i], B[i - 1])\nA[-1] = B[-1]\nprint((sum(A)))\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\n\n\ndef I():\n    return int(eval(input()))\n\n\ndef MI():\n    return list(map(int, input().split()))\n\n\ndef LI():\n    return list(map(int, input().split()))\n\n\ndef main():\n    mod = 10**9 + 7\n    N = I()\n    B = LI()\n    A = [0] * N\n    A[0] = B[0]\n    A[-1] = B[-1]\n    for i in range(N - 2):\n        A[i + 1] = min(B[i], B[i + 1])\n    print((sum(A)))\n\n\nmain()\n","code_same":false,"relative_loc_diff_percent":55.0,"diff":["-N = int(eval(input()))","-B = list(map(int, input().split()))","-A = [0] * N","-A[0] = B[0]","-for i in range(1, N - 1):","-    A[i] = min(B[i], B[i - 1])","-A[-1] = B[-1]","-print((sum(A)))","+import sys","+","+input = sys.stdin.readline","+","+","+def I():","+    return int(eval(input()))","+","+","+def MI():","+    return list(map(int, input().split()))","+","+","+def LI():","+    return list(map(int, input().split()))","+","+","+def main():","+    mod = 10**9 + 7","+    N = I()","+    B = LI()","+    A = [0] * N","+    A[0] = B[0]","+    A[-1] = B[-1]","+    for i in range(N - 2):","+        A[i + 1] = min(B[i], B[i + 1])","+    print((sum(A)))","+","+","+main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.251366816,"measured_runtime_v1":0.147175539,"runtime_lift":1.7079388172,"key":["s303870321","s766724876"]}
{"user_id":"u047796752","problem_id":"p02700","language":"python","submission_id_v0":"s232689719","submission_id_v1":"s065315130","cpu_time_v0":74,"cpu_time_v1":57,"memory_v0":64716,"memory_v1":61776,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":22.97,"input":"import sys\n\ninput = sys.stdin.readline\n\nfrom collections import *\n\n\n\nA, B, C, D = list(map(int, input().split()))\n\n\n\nwhile True:\n\n    C -= B\n\n    \n\n    if C<=0:\n\n        print('Yes')\n\n        exit()\n\n    \n\n    A -= D\n\n    \n\n    if A<=0:\n\n        print('No')\n\n        exit()","target":"A, B, C, D = list(map(int, input().split()))\n\nc1 = (C+B-1)\/\/B\n\nc2 = (A+D-1)\/\/D\n\n\n\nif c1<=c2:\n\n    print('Yes')\n\nelse:\n\n    print('No')","code_v0_loc":18,"code_v1_loc":8,"code_v0_num_chars":267,"code_v1_num_chars":128,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nfrom collections import *\n\nA, B, C, D = list(map(int, input().split()))\nwhile True:\n    C -= B\n    if C <= 0:\n        print(\"Yes\")\n        exit()\n    A -= D\n    if A <= 0:\n        print(\"No\")\n        exit()\n","code_v1_no_empty_lines":"A, B, C, D = list(map(int, input().split()))\nc1 = (C + B - 1) \/\/ B\nc2 = (A + D - 1) \/\/ D\nif c1 <= c2:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","code_same":false,"relative_loc_diff_percent":55.5555555556,"diff":["-import sys","-","-input = sys.stdin.readline","-from collections import *","-","-while True:","-    C -= B","-    if C <= 0:","-        print(\"Yes\")","-        exit()","-    A -= D","-    if A <= 0:","-        print(\"No\")","-        exit()","+c1 = (C + B - 1) \/\/ B","+c2 = (A + D - 1) \/\/ D","+if c1 <= c2:","+    print(\"Yes\")","+else:","+    print(\"No\")"],"diff_only_import_comment":false,"measured_runtime_v0":0.2898896478,"measured_runtime_v1":0.0638447898,"runtime_lift":4.5405372711,"key":["s232689719","s065315130"]}
{"user_id":"u576432509","problem_id":"p03575","language":"python","submission_id_v0":"s579377069","submission_id_v1":"s043222526","cpu_time_v0":33,"cpu_time_v1":26,"memory_v0":3064,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":21.21,"input":"icase=0\n\nif icase==0:\n\n    n,m=list(map(int, input().split()))\n\n    a=[]\n\n    b=[]\n\n    for i in range(m):\n\n        ai,bi=list(map(int, input().split()))\n\n        a.append(ai)\n\n        b.append(bi)\n\nelif icase==1:\n\n    n=6\n\n    m=5\n\n#    a=[[1],[2],[3],[4],[5]]\n\n#    b=[[2],[3],[4],[5],[6]]\n\n    a=[1,2,3,4,5]\n\n    b=[2,3,4,5,6]\n\nelif icase==2:\n\n    n=7\n\n    m=7\n\n    a=[1,2,3,4,4,5,6]\n\n    b=[3,7,4,5,6,6,7]\n\n\n\n    \n\nvtx=[]\n\nfor i in range(n):\n\n    vtx.append([i+1])\n\nicnt=0\n\n\n\nfor j in range(m):    \n\n    vtx1=vtx.copy()\n\n    a1=a.copy()\n\n    b1=b.copy()\n\n    del a1[j]\n\n    del b1[j]\n\n    \n\n    for i in range(m-1):\n\n        for v1 in vtx1:\n\n            if a1[i] in v1:\n\n                if not b1[i] in v1:\n\n                    for v2 in vtx1:\n\n                        if v1!=v2:\n\n                            if b1[i] in v2:\n\n                                break\n\n                    vtx1.remove(v1)\n\n                    vtx1.remove(v2)\n\n                    v3=v1+v2\n\n                    vtx1.append(v3)\n\n#        print(a[i],b[i],len(vtx1),vtx1)\n\n#    print(len(vtx1),vtx1)\n\n    if len(vtx1)!=1:\n\n        icnt=icnt+1\n\nprint(icnt)        ","target":"limit=50\n\ngraph=[[False]*limit for i in range(limit)]\n\nvisited=[]*limit\n\n\n\ndef dfs(v,n,graph,visited):\n\n    visited[v]=True\n\n    for v2 in range(n):\n\n        if graph[v][v2]==False:\n\n            continue\n\n        if visited[v2]==True:\n\n            continue\n\n        dfs(v2,n,graph,visited)\n\n\n\nn,m=list(map(int,input().split()))\n\na=[0]*m\n\nb=[0]*m\n\nfor i in range(m):\n\n    ai,bi=list(map(int,input().split()))\n\n    a[i]=ai-1\n\n    b[i]=bi-1\n\n    graph[a[i]][b[i]]=True\n\n    graph[b[i]][a[i]]=True\n\n    \n\nans=0 \n\nfor i in range(m):\n\n    graph[a[i]][b[i]]=False\n\n    graph[b[i]][a[i]]=False\n\n    visited=[False]*n\n\n    dfs(0,n,graph,visited)\n\n    bridge=False\n\n    for j in range(n):\n\n        if visited[j]==False:\n\n            bridge=True\n\n    if bridge:\n\n        ans+=1\n\n    graph[a[i]][b[i]]=True\n\n    graph[b[i]][a[i]]=True\n\n    \n\nprint(ans)","code_v0_loc":52,"code_v1_loc":39,"code_v0_num_chars":1130,"code_v1_num_chars":828,"code_v0_no_empty_lines":"icase = 0\nif icase == 0:\n    n, m = list(map(int, input().split()))\n    a = []\n    b = []\n    for i in range(m):\n        ai, bi = list(map(int, input().split()))\n        a.append(ai)\n        b.append(bi)\nelif icase == 1:\n    n = 6\n    m = 5\n    #    a=[[1],[2],[3],[4],[5]]\n    #    b=[[2],[3],[4],[5],[6]]\n    a = [1, 2, 3, 4, 5]\n    b = [2, 3, 4, 5, 6]\nelif icase == 2:\n    n = 7\n    m = 7\n    a = [1, 2, 3, 4, 4, 5, 6]\n    b = [3, 7, 4, 5, 6, 6, 7]\nvtx = []\nfor i in range(n):\n    vtx.append([i + 1])\nicnt = 0\nfor j in range(m):\n    vtx1 = vtx.copy()\n    a1 = a.copy()\n    b1 = b.copy()\n    del a1[j]\n    del b1[j]\n    for i in range(m - 1):\n        for v1 in vtx1:\n            if a1[i] in v1:\n                if not b1[i] in v1:\n                    for v2 in vtx1:\n                        if v1 != v2:\n                            if b1[i] in v2:\n                                break\n                    vtx1.remove(v1)\n                    vtx1.remove(v2)\n                    v3 = v1 + v2\n                    vtx1.append(v3)\n    #        print(a[i],b[i],len(vtx1),vtx1)\n    #    print(len(vtx1),vtx1)\n    if len(vtx1) != 1:\n        icnt = icnt + 1\nprint(icnt)\n","code_v1_no_empty_lines":"limit = 50\ngraph = [[False] * limit for i in range(limit)]\nvisited = [] * limit\n\n\ndef dfs(v, n, graph, visited):\n    visited[v] = True\n    for v2 in range(n):\n        if graph[v][v2] == False:\n            continue\n        if visited[v2] == True:\n            continue\n        dfs(v2, n, graph, visited)\n\n\nn, m = list(map(int, input().split()))\na = [0] * m\nb = [0] * m\nfor i in range(m):\n    ai, bi = list(map(int, input().split()))\n    a[i] = ai - 1\n    b[i] = bi - 1\n    graph[a[i]][b[i]] = True\n    graph[b[i]][a[i]] = True\nans = 0\nfor i in range(m):\n    graph[a[i]][b[i]] = False\n    graph[b[i]][a[i]] = False\n    visited = [False] * n\n    dfs(0, n, graph, visited)\n    bridge = False\n    for j in range(n):\n        if visited[j] == False:\n            bridge = True\n    if bridge:\n        ans += 1\n    graph[a[i]][b[i]] = True\n    graph[b[i]][a[i]] = True\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-icase = 0","-if icase == 0:","-    n, m = list(map(int, input().split()))","-    a = []","-    b = []","-    for i in range(m):","-        ai, bi = list(map(int, input().split()))","-        a.append(ai)","-        b.append(bi)","-elif icase == 1:","-    n = 6","-    m = 5","-    #    a=[[1],[2],[3],[4],[5]]","-    #    b=[[2],[3],[4],[5],[6]]","-    a = [1, 2, 3, 4, 5]","-    b = [2, 3, 4, 5, 6]","-elif icase == 2:","-    n = 7","-    m = 7","-    a = [1, 2, 3, 4, 4, 5, 6]","-    b = [3, 7, 4, 5, 6, 6, 7]","-vtx = []","-for i in range(n):","-    vtx.append([i + 1])","-icnt = 0","-for j in range(m):","-    vtx1 = vtx.copy()","-    a1 = a.copy()","-    b1 = b.copy()","-    del a1[j]","-    del b1[j]","-    for i in range(m - 1):","-        for v1 in vtx1:","-            if a1[i] in v1:","-                if not b1[i] in v1:","-                    for v2 in vtx1:","-                        if v1 != v2:","-                            if b1[i] in v2:","-                                break","-                    vtx1.remove(v1)","-                    vtx1.remove(v2)","-                    v3 = v1 + v2","-                    vtx1.append(v3)","-    #        print(a[i],b[i],len(vtx1),vtx1)","-    #    print(len(vtx1),vtx1)","-    if len(vtx1) != 1:","-        icnt = icnt + 1","-print(icnt)","+limit = 50","+graph = [[False] * limit for i in range(limit)]","+visited = [] * limit","+","+","+def dfs(v, n, graph, visited):","+    visited[v] = True","+    for v2 in range(n):","+        if graph[v][v2] == False:","+            continue","+        if visited[v2] == True:","+            continue","+        dfs(v2, n, graph, visited)","+","+","+n, m = list(map(int, input().split()))","+a = [0] * m","+b = [0] * m","+for i in range(m):","+    ai, bi = list(map(int, input().split()))","+    a[i] = ai - 1","+    b[i] = bi - 1","+    graph[a[i]][b[i]] = True","+    graph[b[i]][a[i]] = True","+ans = 0","+for i in range(m):","+    graph[a[i]][b[i]] = False","+    graph[b[i]][a[i]] = False","+    visited = [False] * n","+    dfs(0, n, graph, visited)","+    bridge = False","+    for j in range(n):","+        if visited[j] == False:","+            bridge = True","+    if bridge:","+        ans += 1","+    graph[a[i]][b[i]] = True","+    graph[b[i]][a[i]] = True","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3351877429,"measured_runtime_v1":0.2583705549,"runtime_lift":1.2973140188,"key":["s579377069","s043222526"]}
{"user_id":"u086503932","problem_id":"p02814","language":"python","submission_id_v0":"s657535199","submission_id_v1":"s415753878","cpu_time_v0":500,"cpu_time_v1":202,"memory_v0":16280,"memory_v1":91128,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":59.6,"input":"#!\/usr\/bin\/env python3\n\nimport sys\n\nfrom fractions import gcd\n\nimport math\n\n\n\ndef main():\n\n    N, M = list(map(int, input().split()))\n\n    a = list(map(int, input().split()))\n\n    tmp = 1\n\n    count = None\n\n    for i in range(N):\n\n      tmp = (tmp * a[i]\/\/2) \/\/ gcd(tmp,a[i]\/\/2)\n\n      c = 0\n\n      n = a[i]\/\/2\n\n      while n % 2 == 0:\n\n        c += 1\n\n        n \/\/= 2\n\n      if i == 0:\n\n        count = c\n\n      elif count != c:\n\n        print((0))\n\n        exit()\n\n    print(((M\/\/tmp +1)\/\/2))\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"from math import gcd\n\n\n\nN, M = list(map(int, input().split()))\n\nA = list(map(int, input().split()))\n\nB = [a\/\/2 for a in A]\n\nLCM = 1\n\nfor i in range(N):\n\n    LCM = LCM * B[i] \/\/ gcd(LCM, B[i])\n\nfor i in range(N):\n\n    if LCM \/\/ B[i] % 2 == 0:\n\n        print((0))\n\n        exit()\n\nprint(((M\/\/LCM + 1)\/\/2))","code_v0_loc":26,"code_v1_loc":13,"code_v0_num_chars":527,"code_v1_num_chars":293,"code_v0_no_empty_lines":"#!\/usr\/bin\/env python3\nimport sys\nfrom fractions import gcd\nimport math\n\n\ndef main():\n    N, M = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    tmp = 1\n    count = None\n    for i in range(N):\n        tmp = (tmp * a[i] \/\/ 2) \/\/ gcd(tmp, a[i] \/\/ 2)\n        c = 0\n        n = a[i] \/\/ 2\n        while n % 2 == 0:\n            c += 1\n            n \/\/= 2\n        if i == 0:\n            count = c\n        elif count != c:\n            print((0))\n            exit()\n    print(((M \/\/ tmp + 1) \/\/ 2))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"from math import gcd\n\nN, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\nB = [a \/\/ 2 for a in A]\nLCM = 1\nfor i in range(N):\n    LCM = LCM * B[i] \/\/ gcd(LCM, B[i])\nfor i in range(N):\n    if LCM \/\/ B[i] % 2 == 0:\n        print((0))\n        exit()\nprint(((M \/\/ LCM + 1) \/\/ 2))\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-#!\/usr\/bin\/env python3","-import sys","-from fractions import gcd","-import math","+from math import gcd","-","-def main():","-    N, M = list(map(int, input().split()))","-    a = list(map(int, input().split()))","-    tmp = 1","-    count = None","-    for i in range(N):","-        tmp = (tmp * a[i] \/\/ 2) \/\/ gcd(tmp, a[i] \/\/ 2)","-        c = 0","-        n = a[i] \/\/ 2","-        while n % 2 == 0:","-            c += 1","-            n \/\/= 2","-        if i == 0:","-            count = c","-        elif count != c:","-            print((0))","-            exit()","-    print(((M \/\/ tmp + 1) \/\/ 2))","-","-","-if __name__ == \"__main__\":","-    main()","+N, M = list(map(int, input().split()))","+A = list(map(int, input().split()))","+B = [a \/\/ 2 for a in A]","+LCM = 1","+for i in range(N):","+    LCM = LCM * B[i] \/\/ gcd(LCM, B[i])","+for i in range(N):","+    if LCM \/\/ B[i] % 2 == 0:","+        print((0))","+        exit()","+print(((M \/\/ LCM + 1) \/\/ 2))"],"diff_only_import_comment":false,"measured_runtime_v0":0.4621698339,"measured_runtime_v1":0.3237110667,"runtime_lift":1.4277233045,"key":["s657535199","s415753878"]}
{"user_id":"u098982053","problem_id":"p03060","language":"python","submission_id_v0":"s481970450","submission_id_v1":"s543533896","cpu_time_v0":153,"cpu_time_v1":17,"memory_v0":12496,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.89,"input":"import numpy as np\n\nN = int(eval(input()))\n\nV = np.array([int(i) for i in input().split(\" \")])\n\nC = np.array([int(i) for i in input().split(\" \")])\n\n\n\nvc = V-C\n\n\n\nval = 0\n\n\n\nfor i in range(N):\n\n    if vc[i]>0:\n\n        val+=vc[i]\n\nprint(val)","target":"N = int(eval(input()))\n\nV = [int(i) for i in input().split(\" \")]\n\nC = [int(i) for i in input().split(\" \")]\n\n\n\nval = 0\n\n\n\nfor i in range(N):\n\n    vc=V[i]-C[i]\n\n    if vc>0:\n\n        val+=vc\n\nprint(val)","code_v0_loc":13,"code_v1_loc":11,"code_v0_num_chars":234,"code_v1_num_chars":194,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nV = np.array([int(i) for i in input().split(\" \")])\nC = np.array([int(i) for i in input().split(\" \")])\nvc = V - C\nval = 0\nfor i in range(N):\n    if vc[i] > 0:\n        val += vc[i]\nprint(val)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nV = [int(i) for i in input().split(\" \")]\nC = [int(i) for i in input().split(\" \")]\nval = 0\nfor i in range(N):\n    vc = V[i] - C[i]\n    if vc > 0:\n        val += vc\nprint(val)\n","code_same":false,"relative_loc_diff_percent":15.3846153846,"diff":["-import numpy as np","-","-V = np.array([int(i) for i in input().split(\" \")])","-C = np.array([int(i) for i in input().split(\" \")])","-vc = V - C","+V = [int(i) for i in input().split(\" \")]","+C = [int(i) for i in input().split(\" \")]","-    if vc[i] > 0:","-        val += vc[i]","+    vc = V[i] - C[i]","+    if vc > 0:","+        val += vc"],"diff_only_import_comment":false,"measured_runtime_v0":1.2125604842,"measured_runtime_v1":0.1993146646,"runtime_lift":6.083649121,"key":["s481970450","s543533896"]}
{"user_id":"u433181015","problem_id":"p02394","language":"python","submission_id_v0":"s560769298","submission_id_v1":"s595626547","cpu_time_v0":30,"cpu_time_v1":20,"memory_v0":7680,"memory_v1":7728,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":33.33,"input":"a=input().split()\n\nb=list(map(int,a))\n\nW=b[0]\n\nH=b[1]\n\nx=b[2]\n\ny=b[3]\n\nr=b[4]\n\nif (r <= x <= (W - r)) and (r <= y <= (H - r)):\n\n  print('Yes')\n\nelse:\n\n  print('No')","target":"W,H,x,y,r = [int(i) for i in input().split()]\n\nif (r <= x <= (W - r)) and (r <= y <= (H - r)):\n\n  print('Yes')\n\nelse:\n\n  print('No')","code_v0_loc":11,"code_v1_loc":5,"code_v0_num_chars":164,"code_v1_num_chars":132,"code_v0_no_empty_lines":"a = input().split()\nb = list(map(int, a))\nW = b[0]\nH = b[1]\nx = b[2]\ny = b[3]\nr = b[4]\nif (r <= x <= (W - r)) and (r <= y <= (H - r)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","code_v1_no_empty_lines":"W, H, x, y, r = [int(i) for i in input().split()]\nif (r <= x <= (W - r)) and (r <= y <= (H - r)):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","code_same":false,"relative_loc_diff_percent":54.5454545455,"diff":["-a = input().split()","-b = list(map(int, a))","-W = b[0]","-H = b[1]","-x = b[2]","-y = b[3]","-r = b[4]","+W, H, x, y, r = [int(i) for i in input().split()]"],"diff_only_import_comment":false,"measured_runtime_v0":0.3832537071,"measured_runtime_v1":0.2996923448,"runtime_lift":1.2788238128,"key":["s560769298","s595626547"]}
{"user_id":"u454022848","problem_id":"p02394","language":"python","submission_id_v0":"s949778573","submission_id_v1":"s992404688","cpu_time_v0":40,"cpu_time_v1":30,"memory_v0":6724,"memory_v1":6432,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":25.0,"input":"ia = [int(i) for i in input().split(\" \")]\n\nW=ia[0]\n\nH=ia[1]\n\nx=ia[2]\n\ny=ia[3]\n\nr=ia[4]\n\nprint((\"Yes\" if 0<=x-r and x+r<=W and 0<=y-r and y+r<=H else \"No\"))","target":"# encoding:utf-8\n\n\n\ninput = list(map(int, input().split()))\n\nW, H, x, y, r = input\n\n\n\nif x - r < 0 or x + r > W:\n\n\tprint(\"No\")\n\nelif y - r < 0 or y + r > H:\n\n\tprint(\"No\")\n\nelse:\n\n\tprint(\"Yes\")","code_v0_loc":7,"code_v1_loc":11,"code_v0_num_chars":153,"code_v1_num_chars":190,"code_v0_no_empty_lines":"ia = [int(i) for i in input().split(\" \")]\nW = ia[0]\nH = ia[1]\nx = ia[2]\ny = ia[3]\nr = ia[4]\nprint((\"Yes\" if 0 <= x - r and x + r <= W and 0 <= y - r and y + r <= H else \"No\"))\n","code_v1_no_empty_lines":"# encoding:utf-8\ninput = list(map(int, input().split()))\nW, H, x, y, r = input\nif x - r < 0 or x + r > W:\n    print(\"No\")\nelif y - r < 0 or y + r > H:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n","code_same":false,"relative_loc_diff_percent":36.3636363636,"diff":["-ia = [int(i) for i in input().split(\" \")]","-W = ia[0]","-H = ia[1]","-x = ia[2]","-y = ia[3]","-r = ia[4]","-print((\"Yes\" if 0 <= x - r and x + r <= W and 0 <= y - r and y + r <= H else \"No\"))","+# encoding:utf-8","+input = list(map(int, input().split()))","+W, H, x, y, r = input","+if x - r < 0 or x + r > W:","+    print(\"No\")","+elif y - r < 0 or y + r > H:","+    print(\"No\")","+else:","+    print(\"Yes\")"],"diff_only_import_comment":false,"measured_runtime_v0":0.354291319,"measured_runtime_v1":0.2815986323,"runtime_lift":1.2581428969,"key":["s949778573","s992404688"]}
{"user_id":"u310381103","problem_id":"p03457","language":"python","submission_id_v0":"s861400279","submission_id_v1":"s171825130","cpu_time_v0":647,"cpu_time_v1":294,"memory_v0":63064,"memory_v1":27216,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":54.56,"input":"N=eval(input())\n\na=[]\n\nt=True\n\nfor _ in range(int(N)):\n\n    a+=[list(map(int,input().split()))]\n\nfor i in range(int(N)):\n\n    if a[i][0]%2==0:\n\n        if abs(a[i][1]+a[i][2])<=a[i][0] and (a[i][1]+a[i][2])%2==0:\n\n            continue\n\n        else:\n\n            print('No')\n\n            t=False\n\n            break\n\n    else:\n\n        if abs(a[i][1]+a[i][2]<=a[i][0]) and (a[i][1]+a[i][2])%2==1:\n\n            continue\n\n        else:\n\n            print('No')\n\n            t=False\n\n            break\n\nif t:\n\n    print('Yes')","target":"import sys\n\nn=int(eval(input()))\n\nt=[]\n\nfor i in range(n):\n\n    t.append(list(map(int,input().split())))\n\nfor i,d in enumerate(t):\n\n    if i>0:\n\n        b=d[0]-a\n\n        c=abs(d[1]+d[2]-aa)\n\n    a=d[0]\n\n    aa=d[1]+d[2]\n\n    if i==0:\n\n        if not (a >= aa and a % 2 == aa % 2):\n\n            print('No')\n\n            sys.exit()\n\n        else:\n\n            continue\n\n    if not (b>=c and b%2==c%2):\n\n        print('No')\n\n        sys.exit()\n\nprint('Yes')","code_v0_loc":22,"code_v1_loc":21,"code_v0_num_chars":516,"code_v1_num_chars":449,"code_v0_no_empty_lines":"N = eval(input())\na = []\nt = True\nfor _ in range(int(N)):\n    a += [list(map(int, input().split()))]\nfor i in range(int(N)):\n    if a[i][0] % 2 == 0:\n        if abs(a[i][1] + a[i][2]) <= a[i][0] and (a[i][1] + a[i][2]) % 2 == 0:\n            continue\n        else:\n            print(\"No\")\n            t = False\n            break\n    else:\n        if abs(a[i][1] + a[i][2] <= a[i][0]) and (a[i][1] + a[i][2]) % 2 == 1:\n            continue\n        else:\n            print(\"No\")\n            t = False\n            break\nif t:\n    print(\"Yes\")\n","code_v1_no_empty_lines":"import sys\n\nn = int(eval(input()))\nt = []\nfor i in range(n):\n    t.append(list(map(int, input().split())))\nfor i, d in enumerate(t):\n    if i > 0:\n        b = d[0] - a\n        c = abs(d[1] + d[2] - aa)\n    a = d[0]\n    aa = d[1] + d[2]\n    if i == 0:\n        if not (a >= aa and a % 2 == aa % 2):\n            print(\"No\")\n            sys.exit()\n        else:\n            continue\n    if not (b >= c and b % 2 == c % 2):\n        print(\"No\")\n        sys.exit()\nprint(\"Yes\")\n","code_same":false,"relative_loc_diff_percent":4.5454545455,"diff":["-N = eval(input())","-a = []","-t = True","-for _ in range(int(N)):","-    a += [list(map(int, input().split()))]","-for i in range(int(N)):","-    if a[i][0] % 2 == 0:","-        if abs(a[i][1] + a[i][2]) <= a[i][0] and (a[i][1] + a[i][2]) % 2 == 0:","+import sys","+","+n = int(eval(input()))","+t = []","+for i in range(n):","+    t.append(list(map(int, input().split())))","+for i, d in enumerate(t):","+    if i > 0:","+        b = d[0] - a","+        c = abs(d[1] + d[2] - aa)","+    a = d[0]","+    aa = d[1] + d[2]","+    if i == 0:","+        if not (a >= aa and a % 2 == aa % 2):","+            print(\"No\")","+            sys.exit()","+        else:","-        else:","-            print(\"No\")","-            t = False","-            break","-    else:","-        if abs(a[i][1] + a[i][2] <= a[i][0]) and (a[i][1] + a[i][2]) % 2 == 1:","-            continue","-        else:","-            print(\"No\")","-            t = False","-            break","-if t:","-    print(\"Yes\")","+    if not (b >= c and b % 2 == c % 2):","+        print(\"No\")","+        sys.exit()","+print(\"Yes\")"],"diff_only_import_comment":false,"measured_runtime_v0":0.2371032157,"measured_runtime_v1":0.0063223619,"runtime_lift":37.5023159605,"key":["s861400279","s171825130"]}
{"user_id":"u633450100","problem_id":"p04012","language":"python","submission_id_v0":"s292377539","submission_id_v1":"s830942060","cpu_time_v0":254,"cpu_time_v1":17,"memory_v0":17816,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":93.31,"input":"import numpy as np\n\n\n\nw = eval(input())\n\nanal = np.array([])\n\n\n\nfor i in range(ord('a'),ord('z')+1):\n\n    anal = np.append(anal,w.count(chr(i)))\n\nif np.all(anal % 2 == 0):\n\n    #ans = np.sum(anal)\n\n    print(\"Yes\")\n\nelse:\n\n    print(\"No\")","target":"w = str(eval(input()))\n\ncount = int()\n\n\n\nfor i in range(len(w)):\n\n    if w.count(w[i]) % 2 == 0:\n\n        count += 1\n\n\n\nif count == len(w):\n\n    print('Yes')\n\nelse:\n\n    print('No')","code_v0_loc":12,"code_v1_loc":11,"code_v0_num_chars":232,"code_v1_num_chars":175,"code_v0_no_empty_lines":"import numpy as np\n\nw = eval(input())\nanal = np.array([])\nfor i in range(ord(\"a\"), ord(\"z\") + 1):\n    anal = np.append(anal, w.count(chr(i)))\nif np.all(anal % 2 == 0):\n    # ans = np.sum(anal)\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","code_v1_no_empty_lines":"w = str(eval(input()))\ncount = int()\nfor i in range(len(w)):\n    if w.count(w[i]) % 2 == 0:\n        count += 1\nif count == len(w):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","code_same":false,"relative_loc_diff_percent":8.3333333333,"diff":["-import numpy as np","-","-w = eval(input())","-anal = np.array([])","-for i in range(ord(\"a\"), ord(\"z\") + 1):","-    anal = np.append(anal, w.count(chr(i)))","-if np.all(anal % 2 == 0):","-    # ans = np.sum(anal)","+w = str(eval(input()))","+count = int()","+for i in range(len(w)):","+    if w.count(w[i]) % 2 == 0:","+        count += 1","+if count == len(w):"],"diff_only_import_comment":false,"measured_runtime_v0":1.9986827209,"measured_runtime_v1":0.2783588209,"runtime_lift":7.1802384931,"key":["s292377539","s830942060"]}
{"user_id":"u620868411","problem_id":"p03436","language":"python","submission_id_v0":"s808760844","submission_id_v1":"s833213139","cpu_time_v0":54,"cpu_time_v1":26,"memory_v0":4080,"memory_v1":3316,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":51.85,"input":"# -*- coding: utf-8 -*-\n\nfrom queue import Queue\n\nh,w = list(map(int, input().split()))\n\nd = []\n\nfor _ in range(h):\n\n    d.append(eval(input()))\n\ncost = [[0]*w for _ in range(h)]\n\n\n\nq = Queue()\n\nq.put((0,0))\n\nwhile not q.empty():\n\n    hi,wi = q.get()\n\n    if hi==h-1 and wi==w-1:\n\n        break\n\n\n\n    for dh,dw in [[0,1],[1,0],[0,-1],[-1,0]]:\n\n        if h>dh+hi>=0 and w>dw+wi>=0 and d[dh+hi][dw+wi]==\".\":\n\n            if cost[dh+hi][dw+wi]==0 or cost[dh+hi][dw+wi]>cost[hi][wi]+1:\n\n                cost[dh+hi][dw+wi] = cost[hi][wi]+1\n\n                q.put((dh+hi, dw+wi))\n\n\n\nif cost[h-1][w-1]==0:\n\n    print((-1))\n\n    exit()\n\n\n\nres = 0\n\nfor hi in range(h):\n\n    for wi in range(w):\n\n        if (hi==0 and wi==0) or (hi==h-1 and wi==-1):\n\n            continue\n\n        if d[hi][wi]==\".\":\n\n            res += 1\n\n\n\nprint((res - cost[h-1][w-1]))\n","target":"# -*- coding: utf-8 -*-\n\nfrom collections import deque\n\nh,w = list(map(int, input().split()))\n\nm = [\"#\"*(w+2)] + [\"#\"+eval(input())+\"#\" for _ in range(h)] + [\"#\"*(w+2)]\n\n\n\ncnt = 0\n\nfor hi in range(1,h+1):\n\n    for wi in range(1,w+1):\n\n        if m[hi][wi]==\".\":\n\n            cnt += 1\n\n\n\ninf = 10**9\n\nd = [[inf]*(w+2) for _ in range(h+2)]\n\nq = deque([(1,1,1)])\n\nd[1][1] = 1\n\nwhile len(q):\n\n    ch,cw,r = q.popleft()\n\n\n\n    for hi,wi in [[ch+1,cw],[ch,cw+1],[ch-1,cw],[ch,cw-1]]:\n\n        if m[hi][wi]==\".\" and d[hi][wi]>r+1:\n\n            d[hi][wi]=r+1\n\n            q.append((hi,wi,r+1))\n\n\n\nif d[h][w]==inf:\n\n    print((-1))\n\nelse:\n\n    print((cnt-d[h][w]))","code_v0_loc":34,"code_v1_loc":27,"code_v0_num_chars":831,"code_v1_num_chars":639,"code_v0_no_empty_lines":"# -*- coding: utf-8 -*-\nfrom queue import Queue\n\nh, w = list(map(int, input().split()))\nd = []\nfor _ in range(h):\n    d.append(eval(input()))\ncost = [[0] * w for _ in range(h)]\nq = Queue()\nq.put((0, 0))\nwhile not q.empty():\n    hi, wi = q.get()\n    if hi == h - 1 and wi == w - 1:\n        break\n    for dh, dw in [[0, 1], [1, 0], [0, -1], [-1, 0]]:\n        if h > dh + hi >= 0 and w > dw + wi >= 0 and d[dh + hi][dw + wi] == \".\":\n            if cost[dh + hi][dw + wi] == 0 or cost[dh + hi][dw + wi] > cost[hi][wi] + 1:\n                cost[dh + hi][dw + wi] = cost[hi][wi] + 1\n                q.put((dh + hi, dw + wi))\nif cost[h - 1][w - 1] == 0:\n    print((-1))\n    exit()\nres = 0\nfor hi in range(h):\n    for wi in range(w):\n        if (hi == 0 and wi == 0) or (hi == h - 1 and wi == -1):\n            continue\n        if d[hi][wi] == \".\":\n            res += 1\nprint((res - cost[h - 1][w - 1]))\n","code_v1_no_empty_lines":"# -*- coding: utf-8 -*-\nfrom collections import deque\n\nh, w = list(map(int, input().split()))\nm = [\"#\" * (w + 2)] + [\"#\" + eval(input()) + \"#\" for _ in range(h)] + [\"#\" * (w + 2)]\ncnt = 0\nfor hi in range(1, h + 1):\n    for wi in range(1, w + 1):\n        if m[hi][wi] == \".\":\n            cnt += 1\ninf = 10**9\nd = [[inf] * (w + 2) for _ in range(h + 2)]\nq = deque([(1, 1, 1)])\nd[1][1] = 1\nwhile len(q):\n    ch, cw, r = q.popleft()\n    for hi, wi in [[ch + 1, cw], [ch, cw + 1], [ch - 1, cw], [ch, cw - 1]]:\n        if m[hi][wi] == \".\" and d[hi][wi] > r + 1:\n            d[hi][wi] = r + 1\n            q.append((hi, wi, r + 1))\nif d[h][w] == inf:\n    print((-1))\nelse:\n    print((cnt - d[h][w]))\n","code_same":false,"relative_loc_diff_percent":20.5882352941,"diff":["-from queue import Queue","+from collections import deque","-d = []","-for _ in range(h):","-    d.append(eval(input()))","-cost = [[0] * w for _ in range(h)]","-q = Queue()","-q.put((0, 0))","-while not q.empty():","-    hi, wi = q.get()","-    if hi == h - 1 and wi == w - 1:","-        break","-    for dh, dw in [[0, 1], [1, 0], [0, -1], [-1, 0]]:","-        if h > dh + hi >= 0 and w > dw + wi >= 0 and d[dh + hi][dw + wi] == \".\":","-            if cost[dh + hi][dw + wi] == 0 or cost[dh + hi][dw + wi] > cost[hi][wi] + 1:","-                cost[dh + hi][dw + wi] = cost[hi][wi] + 1","-                q.put((dh + hi, dw + wi))","-if cost[h - 1][w - 1] == 0:","+m = [\"#\" * (w + 2)] + [\"#\" + eval(input()) + \"#\" for _ in range(h)] + [\"#\" * (w + 2)]","+cnt = 0","+for hi in range(1, h + 1):","+    for wi in range(1, w + 1):","+        if m[hi][wi] == \".\":","+            cnt += 1","+inf = 10**9","+d = [[inf] * (w + 2) for _ in range(h + 2)]","+q = deque([(1, 1, 1)])","+d[1][1] = 1","+while len(q):","+    ch, cw, r = q.popleft()","+    for hi, wi in [[ch + 1, cw], [ch, cw + 1], [ch - 1, cw], [ch, cw - 1]]:","+        if m[hi][wi] == \".\" and d[hi][wi] > r + 1:","+            d[hi][wi] = r + 1","+            q.append((hi, wi, r + 1))","+if d[h][w] == inf:","-    exit()","-res = 0","-for hi in range(h):","-    for wi in range(w):","-        if (hi == 0 and wi == 0) or (hi == h - 1 and wi == -1):","-            continue","-        if d[hi][wi] == \".\":","-            res += 1","-print((res - cost[h - 1][w - 1]))","+else:","+    print((cnt - d[h][w]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.297110918,"measured_runtime_v1":0.2054588807,"runtime_lift":1.4460845745,"key":["s808760844","s833213139"]}
{"user_id":"u576432509","problem_id":"p03371","language":"python","submission_id_v0":"s537618501","submission_id_v1":"s493344814","cpu_time_v0":215,"cpu_time_v1":122,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":43.26,"input":"a,b,c,x,y=list(map(int,input().split()))\n\n\n\nyenmin=a*x+b*y\n\nfor zz in range(2*10**5+1):\n\n    xx=max(x-zz\/\/2,0)\n\n    yy=max(y-zz\/\/2,0)\n\n    yen=a*xx+b*yy+c*zz\n\n    if yen<yenmin:\n\n        yenmin=yen\n\nprint(yenmin)\n\n#print(xx,yy,zz)","target":"a,b,c,x,y=list(map(int,input().split()))\n\n\n\ncmax=max(x,y)*2\n\nzmin=(a+b)*10**5\n\nfor nc in range(0,cmax+1,2):\n\n    na=max(x-nc\/\/2,0)\n\n    nb=max(y-nc\/\/2,0)\n\n    z=a*na+b*nb+c*nc\n\n    zmin=min(zmin,z)\n\n    \n\nprint(zmin)\n","code_v0_loc":11,"code_v1_loc":11,"code_v0_num_chars":224,"code_v1_num_chars":211,"code_v0_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nyenmin = a * x + b * y\nfor zz in range(2 * 10**5 + 1):\n    xx = max(x - zz \/\/ 2, 0)\n    yy = max(y - zz \/\/ 2, 0)\n    yen = a * xx + b * yy + c * zz\n    if yen < yenmin:\n        yenmin = yen\nprint(yenmin)\n# print(xx,yy,zz)\n","code_v1_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\ncmax = max(x, y) * 2\nzmin = (a + b) * 10**5\nfor nc in range(0, cmax + 1, 2):\n    na = max(x - nc \/\/ 2, 0)\n    nb = max(y - nc \/\/ 2, 0)\n    z = a * na + b * nb + c * nc\n    zmin = min(zmin, z)\nprint(zmin)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-yenmin = a * x + b * y","-for zz in range(2 * 10**5 + 1):","-    xx = max(x - zz \/\/ 2, 0)","-    yy = max(y - zz \/\/ 2, 0)","-    yen = a * xx + b * yy + c * zz","-    if yen < yenmin:","-        yenmin = yen","-print(yenmin)","-# print(xx,yy,zz)","+cmax = max(x, y) * 2","+zmin = (a + b) * 10**5","+for nc in range(0, cmax + 1, 2):","+    na = max(x - nc \/\/ 2, 0)","+    nb = max(y - nc \/\/ 2, 0)","+    z = a * na + b * nb + c * nc","+    zmin = min(zmin, z)","+print(zmin)"],"diff_only_import_comment":false,"measured_runtime_v0":1.3375756431,"measured_runtime_v1":0.266468925,"runtime_lift":5.0196308745,"key":["s537618501","s493344814"]}
{"user_id":"u116348130","problem_id":"p02772","language":"python","submission_id_v0":"s819852741","submission_id_v1":"s529440144","cpu_time_v0":147,"cpu_time_v1":17,"memory_v0":12488,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.44,"input":"import sys\n\nimport numpy as np\n\nn = int(eval(input()))\n\ninput = sys.stdin.readline\n\na = np.array(list(map(int, input().split())))\n\nfor i in a:\n\n    if i % 2 == 0:\n\n        if i % 3 != 0 and i % 5 != 0:\n\n            print('DENIED')\n\n            exit()\n\nprint('APPROVED')\n","target":"#import sys\n\n#import numpy as np\n\nn = int(eval(input()))\n\n#input = sys.stdin.readline\n\n#a = np.array(list(map(int, input().split())))\n\na = list(map(int, input().split()))\n\nfor i in a:\n\n    if i % 2 == 0:\n\n        if i % 3 != 0 and i % 5 != 0:\n\n            print('DENIED')\n\n            exit()\n\nprint('APPROVED')\n","code_v0_loc":11,"code_v1_loc":12,"code_v0_num_chars":264,"code_v1_num_chars":305,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nn = int(eval(input()))\ninput = sys.stdin.readline\na = np.array(list(map(int, input().split())))\nfor i in a:\n    if i % 2 == 0:\n        if i % 3 != 0 and i % 5 != 0:\n            print(\"DENIED\")\n            exit()\nprint(\"APPROVED\")\n","code_v1_no_empty_lines":"# import sys\n# import numpy as np\nn = int(eval(input()))\n# input = sys.stdin.readline\n# a = np.array(list(map(int, input().split())))\na = list(map(int, input().split()))\nfor i in a:\n    if i % 2 == 0:\n        if i % 3 != 0 and i % 5 != 0:\n            print(\"DENIED\")\n            exit()\nprint(\"APPROVED\")\n","code_same":false,"relative_loc_diff_percent":8.3333333333,"diff":["-import sys","-import numpy as np","-","+# import sys","+# import numpy as np","-input = sys.stdin.readline","-a = np.array(list(map(int, input().split())))","+# input = sys.stdin.readline","+# a = np.array(list(map(int, input().split())))","+a = list(map(int, input().split()))"],"diff_only_import_comment":false,"measured_runtime_v0":1.601757371,"measured_runtime_v1":0.2577495209,"runtime_lift":6.2143951447,"key":["s819852741","s529440144"]}
{"user_id":"u696805736","problem_id":"p03837","language":"python","submission_id_v0":"s032580281","submission_id_v1":"s724625000","cpu_time_v0":677,"cpu_time_v1":276,"memory_v0":62548,"memory_v1":41072,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":59.23,"input":"import queue\n\n\n\nINF = 123456789\n\n\n\ndef main():\n\n    n,m = list(map(int,input().split()))\n\n\n\n    G = [[] for _ in range(n)]\n\n    for _ in range(m):\n\n        a,b,c = list(map(int,input().split()))\n\n        a -= 1\n\n        b -= 1\n\n        G[a].append((b,c))\n\n        G[b].append((a,c))\n\n\n\n    used = set()\n\n    for i in range(n):\n\n        d = [INF for _ in range(n)]\n\n        par = [-1 for _ in range(n)]\n\n\n\n        # dijkstra\n\n        que = queue.PriorityQueue()\n\n        d[i] = 0\n\n        que.put((0,i))\n\n        while not que.empty():\n\n            p = que.get()\n\n            v = p[1]\n\n            if d[v] < p[0]:\n\n                continue\n\n            for (to,cost) in G[v]:\n\n                if d[to] > d[v]+cost:\n\n                    d[to] = d[v]+cost\n\n                    par[to] = v\n\n                    que.put((d[to],to))\n\n\n\n        for j in range(n):\n\n            if i != j:\n\n                a,b = j,par[j]\n\n                if a>b:\n\n                    a,b = b,a\n\n                used.add((a,b))\n\n\n\n    print((m - len(used)))\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"INF = 123456789\n\n\n\ndef main():\n\n    n,m = list(map(int,input().split()))\n\n\n\n    d = [ [INF for i in range(n)] for j in range(n) ]\n\n    for i in range(n):\n\n        d[i][i] = 0\n\n\n\n    a = [0 for _ in range(m)]\n\n    b = [0 for _ in range(m)]\n\n    c = [0 for _ in range(m)]\n\n    for i in range(m):\n\n        a[i],b[i],c[i] = list(map(int,input().split()))\n\n        a[i] -= 1\n\n        b[i] -= 1\n\n        d[a[i]][b[i]] = min(d[a[i]][b[i]], c[i])\n\n        d[b[i]][a[i]] = min(d[b[i]][a[i]], c[i])\n\n\n\n    # Warshall-Floyd\n\n    for k in range(n):\n\n        for i in range(n):\n\n            for j in range(n):\n\n                d[i][j] = min(d[i][j], d[i][k]+d[k][j])\n\n\n\n    ans = 0\n\n    for i in range(m):\n\n        found = 1\n\n        for j in range(n):\n\n            if d[j][a[i]] + c[i] == d[j][b[i]]:\n\n                found = 0\n\n                break\n\n        ans += found\n\n    print(ans)\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":46,"code_v1_loc":37,"code_v0_num_chars":1060,"code_v1_num_chars":907,"code_v0_no_empty_lines":"import queue\n\nINF = 123456789\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    G = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b, c = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        G[a].append((b, c))\n        G[b].append((a, c))\n    used = set()\n    for i in range(n):\n        d = [INF for _ in range(n)]\n        par = [-1 for _ in range(n)]\n        # dijkstra\n        que = queue.PriorityQueue()\n        d[i] = 0\n        que.put((0, i))\n        while not que.empty():\n            p = que.get()\n            v = p[1]\n            if d[v] < p[0]:\n                continue\n            for (to, cost) in G[v]:\n                if d[to] > d[v] + cost:\n                    d[to] = d[v] + cost\n                    par[to] = v\n                    que.put((d[to], to))\n        for j in range(n):\n            if i != j:\n                a, b = j, par[j]\n                if a > b:\n                    a, b = b, a\n                used.add((a, b))\n    print((m - len(used)))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"INF = 123456789\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    d = [[INF for i in range(n)] for j in range(n)]\n    for i in range(n):\n        d[i][i] = 0\n    a = [0 for _ in range(m)]\n    b = [0 for _ in range(m)]\n    c = [0 for _ in range(m)]\n    for i in range(m):\n        a[i], b[i], c[i] = list(map(int, input().split()))\n        a[i] -= 1\n        b[i] -= 1\n        d[a[i]][b[i]] = min(d[a[i]][b[i]], c[i])\n        d[b[i]][a[i]] = min(d[b[i]][a[i]], c[i])\n    # Warshall-Floyd\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                d[i][j] = min(d[i][j], d[i][k] + d[k][j])\n    ans = 0\n    for i in range(m):\n        found = 1\n        for j in range(n):\n            if d[j][a[i]] + c[i] == d[j][b[i]]:\n                found = 0\n                break\n        ans += found\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":19.5652173913,"diff":["-import queue","-","-    G = [[] for _ in range(n)]","-    for _ in range(m):","-        a, b, c = list(map(int, input().split()))","-        a -= 1","-        b -= 1","-        G[a].append((b, c))","-        G[b].append((a, c))","-    used = set()","+    d = [[INF for i in range(n)] for j in range(n)]","-        d = [INF for _ in range(n)]","-        par = [-1 for _ in range(n)]","-        # dijkstra","-        que = queue.PriorityQueue()","-        d[i] = 0","-        que.put((0, i))","-        while not que.empty():","-            p = que.get()","-            v = p[1]","-            if d[v] < p[0]:","-                continue","-            for (to, cost) in G[v]:","-                if d[to] > d[v] + cost:","-                    d[to] = d[v] + cost","-                    par[to] = v","-                    que.put((d[to], to))","+        d[i][i] = 0","+    a = [0 for _ in range(m)]","+    b = [0 for _ in range(m)]","+    c = [0 for _ in range(m)]","+    for i in range(m):","+        a[i], b[i], c[i] = list(map(int, input().split()))","+        a[i] -= 1","+        b[i] -= 1","+        d[a[i]][b[i]] = min(d[a[i]][b[i]], c[i])","+        d[b[i]][a[i]] = min(d[b[i]][a[i]], c[i])","+    # Warshall-Floyd","+    for k in range(n):","+        for i in range(n):","+            for j in range(n):","+                d[i][j] = min(d[i][j], d[i][k] + d[k][j])","+    ans = 0","+    for i in range(m):","+        found = 1","-            if i != j:","-                a, b = j, par[j]","-                if a > b:","-                    a, b = b, a","-                used.add((a, b))","-    print((m - len(used)))","+            if d[j][a[i]] + c[i] == d[j][b[i]]:","+                found = 0","+                break","+        ans += found","+    print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3167709551,"measured_runtime_v1":0.2522355395,"runtime_lift":1.2558537773,"key":["s032580281","s724625000"]}
{"user_id":"u581187895","problem_id":"p03575","language":"python","submission_id_v0":"s060994907","submission_id_v1":"s021977851","cpu_time_v0":271,"cpu_time_v1":22,"memory_v0":18640,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":91.88,"input":"# \u5168\u90e8\u8a66\u3059\n\n# 1\u3064\u3042\u305f\u308aO(M)\n\n# O(M^2) = 10^6\u304f\u3089\u3044\n\nimport numpy as np\n\nfrom scipy.sparse.csgraph import dijkstra\n\n\n\nN,M = list(map(int,input().split()))\n\nedge = [list(map(int, input().split())) for _ in range(M)]\n\n\n\ngraph = np.zeros((N+1, N+1))\n\n\n\nfor a, b in edge:\n\n  graph[a, b] = 1\n\n  \n\nans = 0\n\nfor a, b in edge:\n\n  graph[a, b] = np.inf \n\n  # directed=False -> \u7121\u5411\u30b0\u30e9\u30d5\n\n  dist = dijkstra(graph, indices=a, directed=False)\n\n  if dist[b] == np.inf:\n\n    ans += 1\n\n  graph[a, b] = 1 # \u5143\u306b\u623b\u3059\n\n  \n\nprint(ans)  ","target":"class UnionFind():\n\n    def __init__(self, N):\n\n        \"\"\" N\u500b\u306e\u30ce\u30fc\u30c9\u306eUnion-Find\u6728\u3092\u4f5c\u6210\u3059\u308b \"\"\"\n\n        # \u89aa\u306e\u756a\u53f7\u3092\u683c\u7d0d\u3059\u308b\u3002\u81ea\u5206\u304c\u89aa\u3060\u3063\u305f\u5834\u5408\u306f\u3001\u81ea\u5206\u306e\u756a\u53f7\u306b\u306a\u308a\u3001\u305d\u308c\u304c\u305d\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u756a\u53f7\u306b\u306a\u308b\n\n        self.parent = [n for n in range(0, N)]\n\n        # \u30b0\u30eb\u30fc\u30d7\u306e\u6df1\u3055\n\n        self.depth = [1] * N\n\n \n\n    def find(self, x):\n\n        \"\"\" \u6728\u306e\u6839(\u3069\u306e\u30b0\u30eb\u30fc\u30d7\u304b)\u3092\u6c42\u3081\u308b \"\"\"\n\n        if self.parent[x] == x: return x\n\n        self.parent[x] = self.find(self.parent[x]) # \u7e2e\u7d04\n\n        return self.parent[x]\n\n \n\n    def unite(self, x, y):\n\n        \"\"\" x\u3068y\u306e\u5c5e\u3059\u308b\u96c6\u5408\u3092\u4f75\u5408\u3059\u308b \"\"\"\n\n        gx = self.find(x)\n\n        gy = self.find(y)\n\n        if gx == gy: return\n\n \n\n        # \u5c0f\u3055\u3044\u65b9\u3092\u5927\u304d\u3044\u65b9\u306b\u4f75\u5408\u3055\u305b\u308b\uff08\u6728\u306e\u504f\u308a\u304c\u6e1b\u308b\u306e\u3067\uff09\n\n        if self.depth[gx] < self.depth[gy]:\n\n            self.parent[gx] = gy\n\n        else:\n\n            self.parent[gy] = gx\n\n            if self.depth[gx] == self.depth[gy]: self.depth[gx] += 1\n\n \n\n    def is_same_group(self, x, y):\n\n        \"\"\" x\u3068y\u304c\u540c\u3058\u96c6\u5408\u306b\u5c5e\u3059\u308b\u304b\u5426\u304b \"\"\"\n\n        return self.find(x) == self.find(y)\n\n      \n\nN, M = list(map(int, input().split()))\n\nE = [[int(x)-1 for x in input().split()] for _ in range(M)]\n\n\n\n# \u5404\u8fba\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u8fba\u304c\u5b58\u5728\u3057\u306a\u3044\u6642\u3001a\u3068b\u304c\u9023\u7d50\u306b\u306a\u308b\u304b\u3092Union-Find\u3067\u5224\u5b9a\u3059\u308b\n\nans = 0\n\nfor i in range(M):\n\n  uf = UnionFind(N)\n\n  for j, e in enumerate(E):\n\n    if i==j: continue\n\n        \n\n    a, b = e\n\n    uf.unite(a, b)\n\n      \n\n  # i\u756a\u76ee\u306e\u8fba\u3092\u9664\u304f\u3059\u3079\u3066\u306e\u8fba\u3092\u3064\u306a\u3044\u3060\u3042\u3068\u3067\u3001i\u756a\u76ee\u306e\u8fba(a, b)\u304c\u3064\u306a\u304c\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\n\n  # \u3064\u306a\u304c\u3089\u306a\u3044\u306a\u3089\u3070\u3001\u305d\u306ei\u756a\u76ee\u306e\u8fba\u306f\u6a4b\u3067\u3042\u308b\n\n  a, b = E[i]\n\n  if not uf.is_same_group(a, b):\n\n    ans += 1\n\n\n\nprint(ans)      \n","code_v0_loc":24,"code_v1_loc":51,"code_v0_num_chars":490,"code_v1_num_chars":1409,"code_v0_no_empty_lines":"# \u5168\u90e8\u8a66\u3059\n# 1\u3064\u3042\u305f\u308aO(M)\n# O(M^2) = 10^6\u304f\u3089\u3044\nimport numpy as np\nfrom scipy.sparse.csgraph import dijkstra\n\nN, M = list(map(int, input().split()))\nedge = [list(map(int, input().split())) for _ in range(M)]\ngraph = np.zeros((N + 1, N + 1))\nfor a, b in edge:\n    graph[a, b] = 1\nans = 0\nfor a, b in edge:\n    graph[a, b] = np.inf\n    # directed=False -> \u7121\u5411\u30b0\u30e9\u30d5\n    dist = dijkstra(graph, indices=a, directed=False)\n    if dist[b] == np.inf:\n        ans += 1\n    graph[a, b] = 1  # \u5143\u306b\u623b\u3059\nprint(ans)\n","code_v1_no_empty_lines":"class UnionFind:\n    def __init__(self, N):\n        \"\"\"N\u500b\u306e\u30ce\u30fc\u30c9\u306eUnion-Find\u6728\u3092\u4f5c\u6210\u3059\u308b\"\"\"\n        # \u89aa\u306e\u756a\u53f7\u3092\u683c\u7d0d\u3059\u308b\u3002\u81ea\u5206\u304c\u89aa\u3060\u3063\u305f\u5834\u5408\u306f\u3001\u81ea\u5206\u306e\u756a\u53f7\u306b\u306a\u308a\u3001\u305d\u308c\u304c\u305d\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u756a\u53f7\u306b\u306a\u308b\n        self.parent = [n for n in range(0, N)]\n        # \u30b0\u30eb\u30fc\u30d7\u306e\u6df1\u3055\n        self.depth = [1] * N\n\n    def find(self, x):\n        \"\"\"\u6728\u306e\u6839(\u3069\u306e\u30b0\u30eb\u30fc\u30d7\u304b)\u3092\u6c42\u3081\u308b\"\"\"\n        if self.parent[x] == x:\n            return x\n        self.parent[x] = self.find(self.parent[x])  # \u7e2e\u7d04\n        return self.parent[x]\n\n    def unite(self, x, y):\n        \"\"\"x\u3068y\u306e\u5c5e\u3059\u308b\u96c6\u5408\u3092\u4f75\u5408\u3059\u308b\"\"\"\n        gx = self.find(x)\n        gy = self.find(y)\n        if gx == gy:\n            return\n        # \u5c0f\u3055\u3044\u65b9\u3092\u5927\u304d\u3044\u65b9\u306b\u4f75\u5408\u3055\u305b\u308b\uff08\u6728\u306e\u504f\u308a\u304c\u6e1b\u308b\u306e\u3067\uff09\n        if self.depth[gx] < self.depth[gy]:\n            self.parent[gx] = gy\n        else:\n            self.parent[gy] = gx\n            if self.depth[gx] == self.depth[gy]:\n                self.depth[gx] += 1\n\n    def is_same_group(self, x, y):\n        \"\"\"x\u3068y\u304c\u540c\u3058\u96c6\u5408\u306b\u5c5e\u3059\u308b\u304b\u5426\u304b\"\"\"\n        return self.find(x) == self.find(y)\n\n\nN, M = list(map(int, input().split()))\nE = [[int(x) - 1 for x in input().split()] for _ in range(M)]\n# \u5404\u8fba\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u8fba\u304c\u5b58\u5728\u3057\u306a\u3044\u6642\u3001a\u3068b\u304c\u9023\u7d50\u306b\u306a\u308b\u304b\u3092Union-Find\u3067\u5224\u5b9a\u3059\u308b\nans = 0\nfor i in range(M):\n    uf = UnionFind(N)\n    for j, e in enumerate(E):\n        if i == j:\n            continue\n        a, b = e\n        uf.unite(a, b)\n    # i\u756a\u76ee\u306e\u8fba\u3092\u9664\u304f\u3059\u3079\u3066\u306e\u8fba\u3092\u3064\u306a\u3044\u3060\u3042\u3068\u3067\u3001i\u756a\u76ee\u306e\u8fba(a, b)\u304c\u3064\u306a\u304c\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\n    # \u3064\u306a\u304c\u3089\u306a\u3044\u306a\u3089\u3070\u3001\u305d\u306ei\u756a\u76ee\u306e\u8fba\u306f\u6a4b\u3067\u3042\u308b\n    a, b = E[i]\n    if not uf.is_same_group(a, b):\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":52.9411764706,"diff":["-# \u5168\u90e8\u8a66\u3059","-# 1\u3064\u3042\u305f\u308aO(M)","-# O(M^2) = 10^6\u304f\u3089\u3044","-import numpy as np","-from scipy.sparse.csgraph import dijkstra","+class UnionFind:","+    def __init__(self, N):","+        \"\"\"N\u500b\u306e\u30ce\u30fc\u30c9\u306eUnion-Find\u6728\u3092\u4f5c\u6210\u3059\u308b\"\"\"","+        # \u89aa\u306e\u756a\u53f7\u3092\u683c\u7d0d\u3059\u308b\u3002\u81ea\u5206\u304c\u89aa\u3060\u3063\u305f\u5834\u5408\u306f\u3001\u81ea\u5206\u306e\u756a\u53f7\u306b\u306a\u308a\u3001\u305d\u308c\u304c\u305d\u306e\u30b0\u30eb\u30fc\u30d7\u306e\u756a\u53f7\u306b\u306a\u308b","+        self.parent = [n for n in range(0, N)]","+        # \u30b0\u30eb\u30fc\u30d7\u306e\u6df1\u3055","+        self.depth = [1] * N","+","+    def find(self, x):","+        \"\"\"\u6728\u306e\u6839(\u3069\u306e\u30b0\u30eb\u30fc\u30d7\u304b)\u3092\u6c42\u3081\u308b\"\"\"","+        if self.parent[x] == x:","+            return x","+        self.parent[x] = self.find(self.parent[x])  # \u7e2e\u7d04","+        return self.parent[x]","+","+    def unite(self, x, y):","+        \"\"\"x\u3068y\u306e\u5c5e\u3059\u308b\u96c6\u5408\u3092\u4f75\u5408\u3059\u308b\"\"\"","+        gx = self.find(x)","+        gy = self.find(y)","+        if gx == gy:","+            return","+        # \u5c0f\u3055\u3044\u65b9\u3092\u5927\u304d\u3044\u65b9\u306b\u4f75\u5408\u3055\u305b\u308b\uff08\u6728\u306e\u504f\u308a\u304c\u6e1b\u308b\u306e\u3067\uff09","+        if self.depth[gx] < self.depth[gy]:","+            self.parent[gx] = gy","+        else:","+            self.parent[gy] = gx","+            if self.depth[gx] == self.depth[gy]:","+                self.depth[gx] += 1","+","+    def is_same_group(self, x, y):","+        \"\"\"x\u3068y\u304c\u540c\u3058\u96c6\u5408\u306b\u5c5e\u3059\u308b\u304b\u5426\u304b\"\"\"","+        return self.find(x) == self.find(y)","+","-edge = [list(map(int, input().split())) for _ in range(M)]","-graph = np.zeros((N + 1, N + 1))","-for a, b in edge:","-    graph[a, b] = 1","+E = [[int(x) - 1 for x in input().split()] for _ in range(M)]","+# \u5404\u8fba\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u8fba\u304c\u5b58\u5728\u3057\u306a\u3044\u6642\u3001a\u3068b\u304c\u9023\u7d50\u306b\u306a\u308b\u304b\u3092Union-Find\u3067\u5224\u5b9a\u3059\u308b","-for a, b in edge:","-    graph[a, b] = np.inf","-    # directed=False -> \u7121\u5411\u30b0\u30e9\u30d5","-    dist = dijkstra(graph, indices=a, directed=False)","-    if dist[b] == np.inf:","+for i in range(M):","+    uf = UnionFind(N)","+    for j, e in enumerate(E):","+        if i == j:","+            continue","+        a, b = e","+        uf.unite(a, b)","+    # i\u756a\u76ee\u306e\u8fba\u3092\u9664\u304f\u3059\u3079\u3066\u306e\u8fba\u3092\u3064\u306a\u3044\u3060\u3042\u3068\u3067\u3001i\u756a\u76ee\u306e\u8fba(a, b)\u304c\u3064\u306a\u304c\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b","+    # \u3064\u306a\u304c\u3089\u306a\u3044\u306a\u3089\u3070\u3001\u305d\u306ei\u756a\u76ee\u306e\u8fba\u306f\u6a4b\u3067\u3042\u308b","+    a, b = E[i]","+    if not uf.is_same_group(a, b):","-    graph[a, b] = 1  # \u5143\u306b\u623b\u3059"],"diff_only_import_comment":false,"measured_runtime_v0":2.1378849642,"measured_runtime_v1":0.2154630218,"runtime_lift":9.922282472,"key":["s060994907","s021977851"]}
{"user_id":"u282228874","problem_id":"p03416","language":"python","submission_id_v0":"s105404887","submission_id_v1":"s977655968","cpu_time_v0":128,"cpu_time_v1":48,"memory_v0":3060,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":62.5,"input":"a,b = list(map(int,input().split()))\n\ncount = 0\n\nfor i in range(a,b+1):\n\n    s = str(i)\n\n    l = len(s)\n\n    if all(s[j] == s[l-j-1] for j in range(l)):\n\n            count += 1\n\nprint(count)","target":"a,b = list(map(int,input().split()))\n\ncount = 0\n\nfor i in range(a,b+1):\n\n    s = str(i)\n\n    if s == s[::-1]:\n\n         count += 1\n\nprint(count)","code_v0_loc":8,"code_v1_loc":7,"code_v0_num_chars":184,"code_v1_num_chars":138,"code_v0_no_empty_lines":"a, b = list(map(int, input().split()))\ncount = 0\nfor i in range(a, b + 1):\n    s = str(i)\n    l = len(s)\n    if all(s[j] == s[l - j - 1] for j in range(l)):\n        count += 1\nprint(count)\n","code_v1_no_empty_lines":"a, b = list(map(int, input().split()))\ncount = 0\nfor i in range(a, b + 1):\n    s = str(i)\n    if s == s[::-1]:\n        count += 1\nprint(count)\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-    l = len(s)","-    if all(s[j] == s[l - j - 1] for j in range(l)):","+    if s == s[::-1]:"],"diff_only_import_comment":false,"measured_runtime_v0":0.5951726662,"measured_runtime_v1":0.34452695,"runtime_lift":1.72750685,"key":["s105404887","s977655968"]}
{"user_id":"u375616706","problem_id":"p03575","language":"python","submission_id_v0":"s865425208","submission_id_v1":"s683198450","cpu_time_v0":30,"cpu_time_v1":21,"memory_v0":3064,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":30.0,"input":"\n\nclass UnionFind:\n\n    def __init__(self, size):\n\n        self.table = [i for i in range(size)]\n\n\n\n    def find(self, x):\n\n        return self.table[x]\n\n\n\n    def union(self, x, y):\n\n        x1 = self.find(x)\n\n        y1 = self.find(y)\n\n\n\n        if x1 == y1:\n\n            return False\n\n\n\n        for i in range(len(self.table)):\n\n            if self.table[i] == y1:\n\n                self.table[i] = x1\n\n        return True\n\n\n\n\n\nN, M = list(map(int, input().split()))\n\n\n\nedges = []\n\nfor _ in range(M):\n\n    a, b = list(map(int, input().split()))\n\n    edges.append([a-1, b-1])\n\n\n\nmat = [[0]*N for _ in range(N)]\n\nfor s, g in edges:\n\n    mat[s][g] = 1\n\n    mat[g][s] = 1\n\n\n\nans = 0\n\n\n\nfor i in range(M):\n\n    uni = UnionFind(N)\n\n\n\n    for j in range(M):\n\n        if i != j:\n\n            uni.union(edges[j][0], edges[j][1])\n\n\n\n    if not all(uni.find(0) == uni.find(x) for x in range(N)):\n\n        ans += 1\n\nprint(ans)\n","target":"# python template for atcoder1\n\nimport sys\n\nsys.setrecursionlimit(10**9)\n\ninput = sys.stdin.readline\n\n\n\n\n\nclass UnionFind:\n\n    def __init__(self, size):\n\n        \"\"\"\n\n        size:\u9802\u70b9\u306e\u6570\n\n        \"\"\"\n\n        self.parent = [i for i in range(size)]\n\n        self.rank = [0 for _ in range(size)]\n\n\n\n    def find(self, x):\n\n        \"\"\"\n\n        x\u306eroot\u3092\u8fd4\u3059\n\n        \"\"\"\n\n        if self.parent[x] == x:\n\n            return x\n\n        else:\n\n            return self.find(self.parent[x])\n\n\n\n    def union(self, x, y):\n\n        \"\"\"\n\n        x,y\u3092\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u3068\u3057\u3066\u307e\u3068\u3081\u308b\n\n        \"\"\"\n\n        x = self.find(x)\n\n        y = self.find(y)\n\n        if x == y:\n\n            return\n\n\n\n        if self.rank[x] < self.rank[y]:\n\n            self.parent[x] = y\n\n        else:\n\n            self.parent[y] = x\n\n            if self.rank[x] == self.rank[y]:\n\n                self.rank[x] += 1\n\n\n\n    def same(self, x, y):\n\n        \"\"\"\n\n        x\u3068y\u304c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306a\u3089True\n\n        \"\"\"\n\n        return self.find(x) == self.find(y)\n\n\n\n    def component(self):\n\n        \"\"\"\n\n        \u5404\u9023\u7d50\u6210\u5206\u306eroot\u306e\u96c6\u5408\u3092\u8fd4\u3059\n\n        len()\u3092\u3068\u308c\u3070\u9023\u7d50\u6210\u5206\u306e\u6570\u304c\u6c42\u3081\u3089\u308c\u308b\n\n        return-> set()\n\n        \"\"\"\n\n        comp = set()\n\n        for i in self.parent:\n\n            p = self.find(i)\n\n            comp.add(p)\n\n        return comp\n\n\n\n    def __str__(self):\n\n        \"\"\"\n\n        for debug\n\n        \u30af\u30e9\u30b9\u306elist\u306e\u60c5\u5831\u3092\u51fa\u529b\n\n        \"\"\"\n\n        ret = \"parents\\n\"\n\n        ret += \" \".join(map(str, self.parent))\n\n        ret += '\\n'\n\n        ret += \" \".join(map(str, self.rank))\n\n        return ret\n\n\n\n\n\nN, M = list(map(int, input().split()))\n\nedges = []\n\n\n\nfor _ in range(M):\n\n    a, b = [int(x)-1 for x in input().split()]\n\n    edges.append([a, b])\n\n\n\nans = 0\n\nfor e in edges:\n\n    Un = UnionFind(N)\n\n    for g in edges:\n\n        if e == g:\n\n            continue\n\n        else:\n\n            Un.union(g[0], g[1])\n\n    if not Un.same(e[0], e[1]):\n\n        ans += 1\n\nprint(ans)\n","code_v0_loc":45,"code_v1_loc":87,"code_v0_num_chars":905,"code_v1_num_chars":1882,"code_v0_no_empty_lines":"class UnionFind:\n    def __init__(self, size):\n        self.table = [i for i in range(size)]\n\n    def find(self, x):\n        return self.table[x]\n\n    def union(self, x, y):\n        x1 = self.find(x)\n        y1 = self.find(y)\n        if x1 == y1:\n            return False\n        for i in range(len(self.table)):\n            if self.table[i] == y1:\n                self.table[i] = x1\n        return True\n\n\nN, M = list(map(int, input().split()))\nedges = []\nfor _ in range(M):\n    a, b = list(map(int, input().split()))\n    edges.append([a - 1, b - 1])\nmat = [[0] * N for _ in range(N)]\nfor s, g in edges:\n    mat[s][g] = 1\n    mat[g][s] = 1\nans = 0\nfor i in range(M):\n    uni = UnionFind(N)\n    for j in range(M):\n        if i != j:\n            uni.union(edges[j][0], edges[j][1])\n    if not all(uni.find(0) == uni.find(x) for x in range(N)):\n        ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"# python template for atcoder1\nimport sys\n\nsys.setrecursionlimit(10**9)\ninput = sys.stdin.readline\n\n\nclass UnionFind:\n    def __init__(self, size):\n        \"\"\"\n        size:\u9802\u70b9\u306e\u6570\n        \"\"\"\n        self.parent = [i for i in range(size)]\n        self.rank = [0 for _ in range(size)]\n\n    def find(self, x):\n        \"\"\"\n        x\u306eroot\u3092\u8fd4\u3059\n        \"\"\"\n        if self.parent[x] == x:\n            return x\n        else:\n            return self.find(self.parent[x])\n\n    def union(self, x, y):\n        \"\"\"\n        x,y\u3092\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u3068\u3057\u3066\u307e\u3068\u3081\u308b\n        \"\"\"\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return\n        if self.rank[x] < self.rank[y]:\n            self.parent[x] = y\n        else:\n            self.parent[y] = x\n            if self.rank[x] == self.rank[y]:\n                self.rank[x] += 1\n\n    def same(self, x, y):\n        \"\"\"\n        x\u3068y\u304c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306a\u3089True\n        \"\"\"\n        return self.find(x) == self.find(y)\n\n    def component(self):\n        \"\"\"\n        \u5404\u9023\u7d50\u6210\u5206\u306eroot\u306e\u96c6\u5408\u3092\u8fd4\u3059\n        len()\u3092\u3068\u308c\u3070\u9023\u7d50\u6210\u5206\u306e\u6570\u304c\u6c42\u3081\u3089\u308c\u308b\n        return-> set()\n        \"\"\"\n        comp = set()\n        for i in self.parent:\n            p = self.find(i)\n            comp.add(p)\n        return comp\n\n    def __str__(self):\n        \"\"\"\n        for debug\n        \u30af\u30e9\u30b9\u306elist\u306e\u60c5\u5831\u3092\u51fa\u529b\n        \"\"\"\n        ret = \"parents\\n\"\n        ret += \" \".join(map(str, self.parent))\n        ret += \"\\n\"\n        ret += \" \".join(map(str, self.rank))\n        return ret\n\n\nN, M = list(map(int, input().split()))\nedges = []\nfor _ in range(M):\n    a, b = [int(x) - 1 for x in input().split()]\n    edges.append([a, b])\nans = 0\nfor e in edges:\n    Un = UnionFind(N)\n    for g in edges:\n        if e == g:\n            continue\n        else:\n            Un.union(g[0], g[1])\n    if not Un.same(e[0], e[1]):\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":48.275862069,"diff":["+# python template for atcoder1","+import sys","+","+sys.setrecursionlimit(10**9)","+input = sys.stdin.readline","+","+","-        self.table = [i for i in range(size)]","+        \"\"\"","+        size:\u9802\u70b9\u306e\u6570","+        \"\"\"","+        self.parent = [i for i in range(size)]","+        self.rank = [0 for _ in range(size)]","-        return self.table[x]","+        \"\"\"","+        x\u306eroot\u3092\u8fd4\u3059","+        \"\"\"","+        if self.parent[x] == x:","+            return x","+        else:","+            return self.find(self.parent[x])","-        x1 = self.find(x)","-        y1 = self.find(y)","-        if x1 == y1:","-            return False","-        for i in range(len(self.table)):","-            if self.table[i] == y1:","-                self.table[i] = x1","-        return True","+        \"\"\"","+        x,y\u3092\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u3068\u3057\u3066\u307e\u3068\u3081\u308b","+        \"\"\"","+        x = self.find(x)","+        y = self.find(y)","+        if x == y:","+            return","+        if self.rank[x] < self.rank[y]:","+            self.parent[x] = y","+        else:","+            self.parent[y] = x","+            if self.rank[x] == self.rank[y]:","+                self.rank[x] += 1","+","+    def same(self, x, y):","+        \"\"\"","+        x\u3068y\u304c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u306a\u3089True","+        \"\"\"","+        return self.find(x) == self.find(y)","+","+    def component(self):","+        \"\"\"","+        \u5404\u9023\u7d50\u6210\u5206\u306eroot\u306e\u96c6\u5408\u3092\u8fd4\u3059","+        len()\u3092\u3068\u308c\u3070\u9023\u7d50\u6210\u5206\u306e\u6570\u304c\u6c42\u3081\u3089\u308c\u308b","+        return-> set()","+        \"\"\"","+        comp = set()","+        for i in self.parent:","+            p = self.find(i)","+            comp.add(p)","+        return comp","+","+    def __str__(self):","+        \"\"\"","+        for debug","+        \u30af\u30e9\u30b9\u306elist\u306e\u60c5\u5831\u3092\u51fa\u529b","+        \"\"\"","+        ret = \"parents\\n\"","+        ret += \" \".join(map(str, self.parent))","+        ret += \"\\n\"","+        ret += \" \".join(map(str, self.rank))","+        return ret","-    a, b = list(map(int, input().split()))","-    edges.append([a - 1, b - 1])","-mat = [[0] * N for _ in range(N)]","-for s, g in edges:","-    mat[s][g] = 1","-    mat[g][s] = 1","+    a, b = [int(x) - 1 for x in input().split()]","+    edges.append([a, b])","-for i in range(M):","-    uni = UnionFind(N)","-    for j in range(M):","-        if i != j:","-            uni.union(edges[j][0], edges[j][1])","-    if not all(uni.find(0) == uni.find(x) for x in range(N)):","+for e in edges:","+    Un = UnionFind(N)","+    for g in edges:","+        if e == g:","+            continue","+        else:","+            Un.union(g[0], g[1])","+    if not Un.same(e[0], e[1]):"],"diff_only_import_comment":false,"measured_runtime_v0":0.3550173998,"measured_runtime_v1":0.2645738666,"runtime_lift":1.3418460573,"key":["s865425208","s683198450"]}
{"user_id":"u060896757","problem_id":"p02688","language":"python","submission_id_v0":"s916854343","submission_id_v1":"s774123468","cpu_time_v0":116,"cpu_time_v1":60,"memory_v0":27092,"memory_v1":67788,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":48.28,"input":"import numpy as np\n\nN, K = list(map(int, input().split()))\n\n \n\nA = np.zeros(N, dtype=int)\n\n \n\nfor _ in range(K):\n\n    eval(input())\n\n    for i in input().split():\n\n        A[int(i) - 1] += 1\n\n \n\nans = 0\n\nfor i in A:\n\n    if i == 0:\n\n        ans += 1\n\nprint(ans)\n\n ","target":"N, K = list(map(int, input().split()))\n\n\n\nA = [0] * N\n\n\n\nfor _ in range(K):\n\n    eval(input())\n\n    for i in map(int, input().split()):\n\n        A[i - 1] += 1\n\n\n\nprint((A.count(0)))\n","code_v0_loc":16,"code_v1_loc":10,"code_v0_num_chars":252,"code_v1_num_chars":168,"code_v0_no_empty_lines":"import numpy as np\n\nN, K = list(map(int, input().split()))\nA = np.zeros(N, dtype=int)\nfor _ in range(K):\n    eval(input())\n    for i in input().split():\n        A[int(i) - 1] += 1\nans = 0\nfor i in A:\n    if i == 0:\n        ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"N, K = list(map(int, input().split()))\nA = [0] * N\nfor _ in range(K):\n    eval(input())\n    for i in map(int, input().split()):\n        A[i - 1] += 1\nprint((A.count(0)))\n","code_same":false,"relative_loc_diff_percent":37.5,"diff":["-import numpy as np","-","-A = np.zeros(N, dtype=int)","+A = [0] * N","-    for i in input().split():","-        A[int(i) - 1] += 1","-ans = 0","-for i in A:","-    if i == 0:","-        ans += 1","-print(ans)","+    for i in map(int, input().split()):","+        A[i - 1] += 1","+print((A.count(0)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.6720787771,"measured_runtime_v1":0.288313632,"runtime_lift":5.7995134165,"key":["s916854343","s774123468"]}
{"user_id":"u156815136","problem_id":"p02921","language":"python","submission_id_v0":"s427233353","submission_id_v1":"s366680967","cpu_time_v0":35,"cpu_time_v1":17,"memory_v0":5048,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":51.43,"input":"import itertools\n\nimport fractions\n\ndef main():\n\n  s = eval(input())\n\n  t = eval(input())\n\n  cnt = 0\n\n  for i in range(3):\n\n    if s[i] == t[i]:\n\n      cnt += 1\n\n  print(cnt)\n\nif __name__ == '__main__':\n\n  main()","target":"s = eval(input())\n\nt = eval(input())\n\nans = 0\n\nfor i in range(3):\n\n    if s[i] == t[i]:\n\n        ans += 1\n\nprint(ans)\n","code_v0_loc":12,"code_v1_loc":7,"code_v0_num_chars":200,"code_v1_num_chars":106,"code_v0_no_empty_lines":"import itertools\nimport fractions\n\n\ndef main():\n    s = eval(input())\n    t = eval(input())\n    cnt = 0\n    for i in range(3):\n        if s[i] == t[i]:\n            cnt += 1\n    print(cnt)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"s = eval(input())\nt = eval(input())\nans = 0\nfor i in range(3):\n    if s[i] == t[i]:\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":41.6666666667,"diff":["-import itertools","-import fractions","-","-","-def main():","-    s = eval(input())","-    t = eval(input())","-    cnt = 0","-    for i in range(3):","-        if s[i] == t[i]:","-            cnt += 1","-    print(cnt)","-","-","-if __name__ == \"__main__\":","-    main()","+s = eval(input())","+t = eval(input())","+ans = 0","+for i in range(3):","+    if s[i] == t[i]:","+        ans += 1","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.370313344,"measured_runtime_v1":0.278846802,"runtime_lift":1.3280171813,"key":["s427233353","s366680967"]}
{"user_id":"u190405389","problem_id":"p03575","language":"python","submission_id_v0":"s242823115","submission_id_v1":"s505533510","cpu_time_v0":397,"cpu_time_v1":55,"memory_v0":21148,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":86.15,"input":"import numpy as np\n\n\n\nn,m = list(map(int, input().split()))\n\n\n\nconnect = np.zeros((n,n))\n\n\n\nfor i in range(m):\n\n    a, b = list(map(int, input().split()))\n\n    connect[a-1, b-1] = 1\n\n    connect[b-1, a-1] = 1\n\n\n\nnotbridge = 0\n\n\n\n\n\nfor i in range(n):\n\n    for j in range(n):\n\n        if connect[i,j] == 1:\n\n            connect[i,j] = 0\n\n            connect[j,i] = 0\n\n            stack =[1]\n\n            visited = [1]\n\n            while stack:\n\n                p = stack.pop()\n\n                for k in range(n):\n\n                    if connect[p,k] == 1:\n\n                        if k not in visited:\n\n                            stack.append(k)\n\n                            visited.append(k)\n\n            if len(visited) == n:\n\n                notbridge += 1\n\n            connect[i,j] = 1\n\n            connect[j,i] = 1\n\n\n\n\n\n\n\nprint((m-notbridge\/\/2))\n\n\n\n\n","target":"n,m = list(map(int, input().split()))\n\n\n\nconnect = [[0 for i in range(n)] for j in range(n)]\n\n\n\nfor i in range(m):\n\n    a, b = list(map(int, input().split()))\n\n    connect[a-1][b-1] = 1\n\n    connect[b-1][a-1] = 1\n\n\n\nnotbridge = 0\n\n\n\n\n\nfor i in range(n):\n\n    for j in range(n):\n\n        if connect[i][j] == 1:\n\n            connect[i][j] = 0\n\n            connect[j][i] = 0\n\n            stack =[1]\n\n            visited = [1]\n\n            while stack:\n\n                p = stack.pop()\n\n                for k in range(n):\n\n                    if connect[p][k] == 1:\n\n                        if k not in visited:\n\n                            stack.append(k)\n\n                            visited.append(k)\n\n            if len(visited) == n:\n\n                notbridge += 1\n\n            connect[i][j] = 1\n\n            connect[j][i] = 1\n\n\n\n\n\n\n\nprint((m-notbridge\/\/2))\n\n\n\n\n","code_v0_loc":38,"code_v1_loc":36,"code_v0_num_chars":840,"code_v1_num_chars":850,"code_v0_no_empty_lines":"import numpy as np\n\nn, m = list(map(int, input().split()))\nconnect = np.zeros((n, n))\nfor i in range(m):\n    a, b = list(map(int, input().split()))\n    connect[a - 1, b - 1] = 1\n    connect[b - 1, a - 1] = 1\nnotbridge = 0\nfor i in range(n):\n    for j in range(n):\n        if connect[i, j] == 1:\n            connect[i, j] = 0\n            connect[j, i] = 0\n            stack = [1]\n            visited = [1]\n            while stack:\n                p = stack.pop()\n                for k in range(n):\n                    if connect[p, k] == 1:\n                        if k not in visited:\n                            stack.append(k)\n                            visited.append(k)\n            if len(visited) == n:\n                notbridge += 1\n            connect[i, j] = 1\n            connect[j, i] = 1\nprint((m - notbridge \/\/ 2))\n","code_v1_no_empty_lines":"n, m = list(map(int, input().split()))\nconnect = [[0 for i in range(n)] for j in range(n)]\nfor i in range(m):\n    a, b = list(map(int, input().split()))\n    connect[a - 1][b - 1] = 1\n    connect[b - 1][a - 1] = 1\nnotbridge = 0\nfor i in range(n):\n    for j in range(n):\n        if connect[i][j] == 1:\n            connect[i][j] = 0\n            connect[j][i] = 0\n            stack = [1]\n            visited = [1]\n            while stack:\n                p = stack.pop()\n                for k in range(n):\n                    if connect[p][k] == 1:\n                        if k not in visited:\n                            stack.append(k)\n                            visited.append(k)\n            if len(visited) == n:\n                notbridge += 1\n            connect[i][j] = 1\n            connect[j][i] = 1\nprint((m - notbridge \/\/ 2))\n","code_same":false,"relative_loc_diff_percent":5.2631578947,"diff":["-import numpy as np","-","-connect = np.zeros((n, n))","+connect = [[0 for i in range(n)] for j in range(n)]","-    connect[a - 1, b - 1] = 1","-    connect[b - 1, a - 1] = 1","+    connect[a - 1][b - 1] = 1","+    connect[b - 1][a - 1] = 1","-        if connect[i, j] == 1:","-            connect[i, j] = 0","-            connect[j, i] = 0","+        if connect[i][j] == 1:","+            connect[i][j] = 0","+            connect[j][i] = 0","-                    if connect[p, k] == 1:","+                    if connect[p][k] == 1:","-            connect[i, j] = 1","-            connect[j, i] = 1","+            connect[i][j] = 1","+            connect[j][i] = 1"],"diff_only_import_comment":false,"measured_runtime_v0":1.6713217747,"measured_runtime_v1":0.2783439574,"runtime_lift":6.0045196962,"key":["s242823115","s505533510"]}
{"user_id":"u057109575","problem_id":"p03579","language":"python","submission_id_v0":"s986959512","submission_id_v1":"s945473888","cpu_time_v0":918,"cpu_time_v1":684,"memory_v0":108376,"memory_v1":76248,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":25.49,"input":"import sys\n\nsys.setrecursionlimit(100000)\n\nN, M = list(map(int, input().split()))\n\nedges = [list(map(int, input().split())) for _ in range(M)]\n\n\n\ngraph = [[] for _ in range(N)]\n\nfor x, y in edges:\n\n    graph[x - 1].append(y - 1)\n\n    graph[y - 1].append(x - 1)\n\n\n\ndef dfs(v, c):\n\n    # c: color = 1 or -1\n\n    node[v] = c\n\n    for i in graph[v]:\n\n        if node[i] == c:\n\n            return False\n\n        \n\n        if node[i] == 0 and not dfs(i, -c):\n\n            return False\n\n        \n\n    return True\n\n\n\nnode = [0] * N\n\nif dfs(0, 1):\n\n    x = sum(v + 1 for v in node) \/\/ 2\n\n    print((x * (N - x) - M))\n\nelse:\n\n    print((N * (N - 1) \/\/ 2 - M))\n","target":"from collections import deque\n\nN, M = list(map(int, input().split()))\n\nedges = [list(map(int, input().split())) for _ in range(M)]\n\n\n\ngraph = [[] for _ in range(N)]\n\nfor x, y in edges:\n\n    graph[x - 1].append(y - 1)\n\n    graph[y - 1].append(x - 1)\n\n\n\ndef dfs(s, c):\n\n    q = deque()\n\n    q.append(s)\n\n    visited[s] = True\n\n    color[s] = c\n\n    \n\n    while len(q) > 0:\n\n        v = q.pop()\n\n        for i in graph[v]:\n\n            if visited[i] and color[i] == color[v]:\n\n                return False\n\n            \n\n            if not visited[i]:\n\n                visited[i] = True\n\n                color[i] = -color[v]\n\n                q.append(i)\n\n                \n\n    return True\n\n\n\nvisited = [False] * N\n\ncolor = [0] * N\n\n\n\nif dfs(0, 1):\n\n    x = sum(v + 1 for v in color) \/\/ 2\n\n    print((x * (N - x) - M))\n\nelse:\n\n    print((N * (N - 1) \/\/ 2 - M))\n\n    \n\n    ","code_v0_loc":28,"code_v1_loc":38,"code_v0_num_chars":640,"code_v1_num_chars":858,"code_v0_no_empty_lines":"import sys\n\nsys.setrecursionlimit(100000)\nN, M = list(map(int, input().split()))\nedges = [list(map(int, input().split())) for _ in range(M)]\ngraph = [[] for _ in range(N)]\nfor x, y in edges:\n    graph[x - 1].append(y - 1)\n    graph[y - 1].append(x - 1)\n\n\ndef dfs(v, c):\n    # c: color = 1 or -1\n    node[v] = c\n    for i in graph[v]:\n        if node[i] == c:\n            return False\n        if node[i] == 0 and not dfs(i, -c):\n            return False\n    return True\n\n\nnode = [0] * N\nif dfs(0, 1):\n    x = sum(v + 1 for v in node) \/\/ 2\n    print((x * (N - x) - M))\nelse:\n    print((N * (N - 1) \/\/ 2 - M))\n","code_v1_no_empty_lines":"from collections import deque\n\nN, M = list(map(int, input().split()))\nedges = [list(map(int, input().split())) for _ in range(M)]\ngraph = [[] for _ in range(N)]\nfor x, y in edges:\n    graph[x - 1].append(y - 1)\n    graph[y - 1].append(x - 1)\n\n\ndef dfs(s, c):\n    q = deque()\n    q.append(s)\n    visited[s] = True\n    color[s] = c\n    while len(q) > 0:\n        v = q.pop()\n        for i in graph[v]:\n            if visited[i] and color[i] == color[v]:\n                return False\n            if not visited[i]:\n                visited[i] = True\n                color[i] = -color[v]\n                q.append(i)\n    return True\n\n\nvisited = [False] * N\ncolor = [0] * N\nif dfs(0, 1):\n    x = sum(v + 1 for v in color) \/\/ 2\n    print((x * (N - x) - M))\nelse:\n    print((N * (N - 1) \/\/ 2 - M))\n","code_same":false,"relative_loc_diff_percent":26.3157894737,"diff":["-import sys","+from collections import deque","-sys.setrecursionlimit(100000)","-def dfs(v, c):","-    # c: color = 1 or -1","-    node[v] = c","-    for i in graph[v]:","-        if node[i] == c:","-            return False","-        if node[i] == 0 and not dfs(i, -c):","-            return False","+def dfs(s, c):","+    q = deque()","+    q.append(s)","+    visited[s] = True","+    color[s] = c","+    while len(q) > 0:","+        v = q.pop()","+        for i in graph[v]:","+            if visited[i] and color[i] == color[v]:","+                return False","+            if not visited[i]:","+                visited[i] = True","+                color[i] = -color[v]","+                q.append(i)","-node = [0] * N","+visited = [False] * N","+color = [0] * N","-    x = sum(v + 1 for v in node) \/\/ 2","+    x = sum(v + 1 for v in color) \/\/ 2"],"diff_only_import_comment":false,"measured_runtime_v0":0.2537954175,"measured_runtime_v1":0.006062909,"runtime_lift":41.8603372027,"key":["s986959512","s945473888"]}
{"user_id":"u426534722","problem_id":"p02248","language":"python","submission_id_v0":"s909106276","submission_id_v1":"s961733692","cpu_time_v0":910,"cpu_time_v1":790,"memory_v0":117852,"memory_v1":117860,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.19,"input":"def kmpTable(w):\n\n    lw = len(w)\n\n    nx = [-1] * (lw + 1)\n\n    j = -1\n\n    for i in range(lw):\n\n        while j >= 0 and w[i] != w[j]:\n\n            j = nx[j]\n\n        j += 1\n\n        nx[i + 1] = j\n\n    return nx\n\ndef kmpSearch(s, w):\n\n    ls = len(s)\n\n    start = 0\n\n    w_idx = 0\n\n    ret = []\n\n    nx = kmpTable(w)\n\n    while start + w_idx < ls:\n\n        if s[start + w_idx] == w[w_idx]:\n\n            w_idx += 1\n\n            if w_idx == len(w):\n\n                ret.append(start)\n\n                start = start + w_idx - nx[w_idx]\n\n                w_idx = nx[w_idx]\n\n        else:\n\n            if w_idx == 0:\n\n                start += 1\n\n            else:\n\n                start = start + w_idx - nx[w_idx]\n\n                w_idx = nx[w_idx]\n\n    return ret\n\nT = eval(input())\n\nP = eval(input())\n\nans = kmpSearch(T, P)\n\nif ans:\n\n    print((\"\\n\".join(map(str, ans))))\t\n\n\n","target":"def kmpTable(w):\n\n    lw = len(w)\n\n    nx = [-1] * (lw + 1)\n\n    j = -1\n\n    for i in range(lw):\n\n        while j >= 0 and w[i] != w[j]:\n\n            j = nx[j]\n\n        j += 1\n\n        nx[i + 1] = j\n\n    return tuple(nx)\n\ndef kmpSearch(s, w):\n\n    ls = len(s)\n\n    start = 0\n\n    w_idx = 0\n\n    ret = []\n\n    nx = kmpTable(w)\n\n    while start + w_idx < ls:\n\n        if s[start + w_idx] == w[w_idx]:\n\n            w_idx += 1\n\n            if w_idx == len(w):\n\n                ret.append(start)\n\n                start = start + w_idx - nx[w_idx]\n\n                w_idx = nx[w_idx]\n\n        else:\n\n            if w_idx == 0:\n\n                start += 1\n\n            else:\n\n                start = start + w_idx - nx[w_idx]\n\n                w_idx = nx[w_idx]\n\n    return ret\n\nT = eval(input())\n\nP = eval(input())\n\nans = kmpSearch(T, P)\n\nif ans:\n\n    print((\"\\n\".join(map(str, ans))))\t\n\n\n","code_v0_loc":36,"code_v1_loc":36,"code_v0_num_chars":860,"code_v1_num_chars":867,"code_v0_no_empty_lines":"def kmpTable(w):\n    lw = len(w)\n    nx = [-1] * (lw + 1)\n    j = -1\n    for i in range(lw):\n        while j >= 0 and w[i] != w[j]:\n            j = nx[j]\n        j += 1\n        nx[i + 1] = j\n    return nx\n\n\ndef kmpSearch(s, w):\n    ls = len(s)\n    start = 0\n    w_idx = 0\n    ret = []\n    nx = kmpTable(w)\n    while start + w_idx < ls:\n        if s[start + w_idx] == w[w_idx]:\n            w_idx += 1\n            if w_idx == len(w):\n                ret.append(start)\n                start = start + w_idx - nx[w_idx]\n                w_idx = nx[w_idx]\n        else:\n            if w_idx == 0:\n                start += 1\n            else:\n                start = start + w_idx - nx[w_idx]\n                w_idx = nx[w_idx]\n    return ret\n\n\nT = eval(input())\nP = eval(input())\nans = kmpSearch(T, P)\nif ans:\n    print((\"\\n\".join(map(str, ans))))\n","code_v1_no_empty_lines":"def kmpTable(w):\n    lw = len(w)\n    nx = [-1] * (lw + 1)\n    j = -1\n    for i in range(lw):\n        while j >= 0 and w[i] != w[j]:\n            j = nx[j]\n        j += 1\n        nx[i + 1] = j\n    return tuple(nx)\n\n\ndef kmpSearch(s, w):\n    ls = len(s)\n    start = 0\n    w_idx = 0\n    ret = []\n    nx = kmpTable(w)\n    while start + w_idx < ls:\n        if s[start + w_idx] == w[w_idx]:\n            w_idx += 1\n            if w_idx == len(w):\n                ret.append(start)\n                start = start + w_idx - nx[w_idx]\n                w_idx = nx[w_idx]\n        else:\n            if w_idx == 0:\n                start += 1\n            else:\n                start = start + w_idx - nx[w_idx]\n                w_idx = nx[w_idx]\n    return ret\n\n\nT = eval(input())\nP = eval(input())\nans = kmpSearch(T, P)\nif ans:\n    print((\"\\n\".join(map(str, ans))))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    return nx","+    return tuple(nx)"],"diff_only_import_comment":false,"measured_runtime_v0":0.215319014,"measured_runtime_v1":0.1265300495,"runtime_lift":1.7017223565,"key":["s909106276","s961733692"]}
{"user_id":"u326609687","problem_id":"p02537","language":"python","submission_id_v0":"s641106335","submission_id_v1":"s059113462","cpu_time_v0":1304,"cpu_time_v1":183,"memory_v0":131040,"memory_v1":40944,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":85.97,"input":"import sys\n\nif sys.argv[-1] == 'ONLINE_JUDGE':\n\n    import os\n\n    import re\n\n    with open(__file__) as f:\n\n        source = f.read().split('###''nbacl')\n\n    for s in source[1:]:\n\n        s = re.sub(\"'''.*\", '', s)\n\n        sp = s.split(maxsplit=1)\n\n        if os.path.dirname(sp[0]):\n\n            os.makedirs(os.path.dirname(sp[0]), exist_ok=True)\n\n        with open(sp[0], 'w') as f:\n\n            f.write(sp[1])\n\n    from nbmodule import cc\n\n    cc.compile()\n\nimport numpy as np\n\nfrom numpy import int64\n\nfrom nbmodule import solve\n\n\n\n\n\nf = open(0)\n\nN, K = [int(x) for x in f.readline().split()]\n\nA = np.fromstring(f.read(), dtype=int64, sep=' ')\n\nans = solve(N, K, A)\n\nprint(ans)\n\n\n\n'''\n\n###nbacl nbmodule.py\n\nimport numpy as np\n\nfrom numpy import int64\n\nfrom numba import njit\n\nfrom numba.types import i8\n\nfrom numba.pycc import CC\n\nimport nbacl.segtree as seg\n\ncc = CC('my_module')\n\n\n\n\n\n@cc.export('solve', (i8, i8, i8[:]))\n\n@njit\n\ndef solve(N, K, A):\n\n    dp = np.zeros(300_001, dtype=int64)\n\n    d = seg.segtree(dp, max, 0)\n\n    for i in range(N):\n\n        x = seg.prod(d, max, (A[i] - K) if A[i] > K else 0, (A[i] + K + 1) if A[i] + K < 300_000 else 300_001) + 1\n\n        seg.set(d, max, A[i], x)\n\n    return seg.all_prod(d)\n\n\n\n\n\nif __name__ == '__main__':\n\n    cc.compile()\n\n###nbacl nbacl\/segtree.py\n\nimport numpy as np\n\nfrom numba import njit\n\nfrom numba.types import i8\n\n\n\n\n\n@njit\n\ndef ceil_pow2(n):\n\n    x = 0\n\n    while (1 << x) < n:\n\n        x += 1\n\n    return x\n\n\n\n\n\n@njit\n\ndef segtree(a, op, e):\n\n    log = ceil_pow2(a.shape[0])\n\n    size = 1 << log\n\n    d = np.empty(size * 2, dtype=a.dtype)\n\n    d[size:size + len(a)] = a\n\n    d[size + len(a):] = e\n\n    # e\n\n    d[0] = e\n\n    for i in range(size - 1, 0, -1):\n\n        update(d, i, op)\n\n    return d\n\n\n\n\n\n@njit\n\ndef update(d, k, op):\n\n    d[k] = op(d[2 * k], d[2 * k + 1])\n\n\n\n\n\n@njit\n\ndef set(d, op, p, x):\n\n    p += d.shape[0] \/\/ 2\n\n    d[p] = x\n\n    while p > 1:\n\n        p >>= 1\n\n        update(d, p, op)\n\n\n\n\n\n@njit\n\ndef get(d, p):\n\n    return d[p + d.shape[0] \/\/ 2]\n\n\n\n\n\n@njit\n\ndef prod(d, op, left, right):\n\n    size = d.shape[0] \/\/ 2\n\n    sml = d[0]\n\n    smr = d[0]\n\n    left += size\n\n    right += size\n\n\n\n    while left < right:\n\n        if left & 1:\n\n            sml = op(sml, d[left])\n\n            left += 1\n\n        if right & 1:\n\n            right -= 1\n\n            smr = op(d[right], smr)\n\n        left >>= 1\n\n        right >>= 1\n\n\n\n    return op(sml, smr)\n\n\n\n\n\n@njit\n\ndef all_prod(d):\n\n    return d[1]\n\n\n\n'''\n","target":"import sys\n\nif sys.argv[-1] == 'ONLINE_JUDGE':\n\n    import os\n\n    import re\n\n    with open(__file__) as f:\n\n        source = f.read().split('###''nbacl')\n\n    for s in source[1:]:\n\n        s = re.sub(\"'''.*\", '', s)\n\n        sp = s.split(maxsplit=1)\n\n        if os.path.dirname(sp[0]):\n\n            os.makedirs(os.path.dirname(sp[0]), exist_ok=True)\n\n        with open(sp[0], 'w') as f:\n\n            f.write(sp[1])\n\n    from nbmodule import cc\n\n    cc.compile()\n\nimport numpy as np\n\nfrom numpy import int64\n\nfrom nbmodule import solve\n\n\n\n\n\nf = open(0)\n\nN, K = [int(x) for x in f.readline().split()]\n\nA = np.fromstring(f.read(), dtype=int64, sep=' ')\n\nans = solve(N, K, A)\n\nprint(ans)\n\n\n\n'''\n\n###nbacl nbmodule.py\n\nimport numpy as np\n\nfrom numpy import int64\n\nfrom numba import njit\n\nfrom numba.types import i8\n\nfrom numba.pycc import CC\n\nimport nbacl.segtree as seg\n\ncc = CC('nbmodule')\n\n\n\n\n\n@cc.export('solve', (i8, i8, i8[:]))\n\n@njit\n\ndef solve(N, K, A):\n\n    dp = np.zeros(300_001, dtype=int64)\n\n    d = seg.segtree(dp, max, 0)\n\n    for i in range(N):\n\n        x = seg.prod(d, max, (A[i] - K) if A[i] > K else 0, (A[i] + K + 1) if A[i] + K < 300_000 else 300_001) + 1\n\n        seg.set(d, max, A[i], x)\n\n    return seg.all_prod(d)\n\n\n\n\n\nif __name__ == '__main__':\n\n    cc.compile()\n\n###nbacl nbacl\/segtree.py\n\nimport numpy as np\n\nfrom numba import njit\n\nfrom numba.types import i8\n\n\n\n\n\n@njit\n\ndef ceil_pow2(n):\n\n    x = 0\n\n    while (1 << x) < n:\n\n        x += 1\n\n    return x\n\n\n\n\n\n@njit\n\ndef segtree(a, op, e):\n\n    log = ceil_pow2(a.shape[0])\n\n    size = 1 << log\n\n    d = np.empty(size * 2, dtype=a.dtype)\n\n    d[size:size + len(a)] = a\n\n    d[size + len(a):] = e\n\n    # e\n\n    d[0] = e\n\n    for i in range(size - 1, 0, -1):\n\n        update(d, i, op)\n\n    return d\n\n\n\n\n\n@njit\n\ndef update(d, k, op):\n\n    d[k] = op(d[2 * k], d[2 * k + 1])\n\n\n\n\n\n@njit\n\ndef set(d, op, p, x):\n\n    p += d.shape[0] \/\/ 2\n\n    d[p] = x\n\n    while p > 1:\n\n        p >>= 1\n\n        update(d, p, op)\n\n\n\n\n\n@njit\n\ndef get(d, p):\n\n    return d[p + d.shape[0] \/\/ 2]\n\n\n\n\n\n@njit\n\ndef prod(d, op, left, right):\n\n    size = d.shape[0] \/\/ 2\n\n    sml = d[0]\n\n    smr = d[0]\n\n    left += size\n\n    right += size\n\n\n\n    while left < right:\n\n        if left & 1:\n\n            sml = op(sml, d[left])\n\n            left += 1\n\n        if right & 1:\n\n            right -= 1\n\n            smr = op(d[right], smr)\n\n        left >>= 1\n\n        right >>= 1\n\n\n\n    return op(sml, smr)\n\n\n\n\n\n@njit\n\ndef all_prod(d):\n\n    return d[1]\n\n\n\n'''\n","code_v0_loc":123,"code_v1_loc":123,"code_v0_num_chars":2493,"code_v1_num_chars":2492,"code_v0_no_empty_lines":"import sys\n\nif sys.argv[-1] == \"ONLINE_JUDGE\":\n    import os\n    import re\n\n    with open(__file__) as f:\n        source = f.read().split(\"###\" \"nbacl\")\n    for s in source[1:]:\n        s = re.sub(\"'''.*\", \"\", s)\n        sp = s.split(maxsplit=1)\n        if os.path.dirname(sp[0]):\n            os.makedirs(os.path.dirname(sp[0]), exist_ok=True)\n        with open(sp[0], \"w\") as f:\n            f.write(sp[1])\n    from nbmodule import cc\n\n    cc.compile()\nimport numpy as np\nfrom numpy import int64\nfrom nbmodule import solve\n\nf = open(0)\nN, K = [int(x) for x in f.readline().split()]\nA = np.fromstring(f.read(), dtype=int64, sep=\" \")\nans = solve(N, K, A)\nprint(ans)\n\"\"\"\n###nbacl nbmodule.py\nimport numpy as np\nfrom numpy import int64\nfrom numba import njit\nfrom numba.types import i8\nfrom numba.pycc import CC\nimport nbacl.segtree as seg\ncc = CC('my_module')\n@cc.export('solve', (i8, i8, i8[:]))\n@njit\ndef solve(N, K, A):\n    dp = np.zeros(300_001, dtype=int64)\n    d = seg.segtree(dp, max, 0)\n    for i in range(N):\n        x = seg.prod(d, max, (A[i] - K) if A[i] > K else 0, (A[i] + K + 1) if A[i] + K < 300_000 else 300_001) + 1\n        seg.set(d, max, A[i], x)\n    return seg.all_prod(d)\nif __name__ == '__main__':\n    cc.compile()\n###nbacl nbacl\/segtree.py\nimport numpy as np\nfrom numba import njit\nfrom numba.types import i8\n@njit\ndef ceil_pow2(n):\n    x = 0\n    while (1 << x) < n:\n        x += 1\n    return x\n@njit\ndef segtree(a, op, e):\n    log = ceil_pow2(a.shape[0])\n    size = 1 << log\n    d = np.empty(size * 2, dtype=a.dtype)\n    d[size:size + len(a)] = a\n    d[size + len(a):] = e\n    # e\n    d[0] = e\n    for i in range(size - 1, 0, -1):\n        update(d, i, op)\n    return d\n@njit\ndef update(d, k, op):\n    d[k] = op(d[2 * k], d[2 * k + 1])\n@njit\ndef set(d, op, p, x):\n    p += d.shape[0] \/\/ 2\n    d[p] = x\n    while p > 1:\n        p >>= 1\n        update(d, p, op)\n@njit\ndef get(d, p):\n    return d[p + d.shape[0] \/\/ 2]\n@njit\ndef prod(d, op, left, right):\n    size = d.shape[0] \/\/ 2\n    sml = d[0]\n    smr = d[0]\n    left += size\n    right += size\n    while left < right:\n        if left & 1:\n            sml = op(sml, d[left])\n            left += 1\n        if right & 1:\n            right -= 1\n            smr = op(d[right], smr)\n        left >>= 1\n        right >>= 1\n    return op(sml, smr)\n@njit\ndef all_prod(d):\n    return d[1]\n\"\"\"\n","code_v1_no_empty_lines":"import sys\n\nif sys.argv[-1] == \"ONLINE_JUDGE\":\n    import os\n    import re\n\n    with open(__file__) as f:\n        source = f.read().split(\"###\" \"nbacl\")\n    for s in source[1:]:\n        s = re.sub(\"'''.*\", \"\", s)\n        sp = s.split(maxsplit=1)\n        if os.path.dirname(sp[0]):\n            os.makedirs(os.path.dirname(sp[0]), exist_ok=True)\n        with open(sp[0], \"w\") as f:\n            f.write(sp[1])\n    from nbmodule import cc\n\n    cc.compile()\nimport numpy as np\nfrom numpy import int64\nfrom nbmodule import solve\n\nf = open(0)\nN, K = [int(x) for x in f.readline().split()]\nA = np.fromstring(f.read(), dtype=int64, sep=\" \")\nans = solve(N, K, A)\nprint(ans)\n\"\"\"\n###nbacl nbmodule.py\nimport numpy as np\nfrom numpy import int64\nfrom numba import njit\nfrom numba.types import i8\nfrom numba.pycc import CC\nimport nbacl.segtree as seg\ncc = CC('nbmodule')\n@cc.export('solve', (i8, i8, i8[:]))\n@njit\ndef solve(N, K, A):\n    dp = np.zeros(300_001, dtype=int64)\n    d = seg.segtree(dp, max, 0)\n    for i in range(N):\n        x = seg.prod(d, max, (A[i] - K) if A[i] > K else 0, (A[i] + K + 1) if A[i] + K < 300_000 else 300_001) + 1\n        seg.set(d, max, A[i], x)\n    return seg.all_prod(d)\nif __name__ == '__main__':\n    cc.compile()\n###nbacl nbacl\/segtree.py\nimport numpy as np\nfrom numba import njit\nfrom numba.types import i8\n@njit\ndef ceil_pow2(n):\n    x = 0\n    while (1 << x) < n:\n        x += 1\n    return x\n@njit\ndef segtree(a, op, e):\n    log = ceil_pow2(a.shape[0])\n    size = 1 << log\n    d = np.empty(size * 2, dtype=a.dtype)\n    d[size:size + len(a)] = a\n    d[size + len(a):] = e\n    # e\n    d[0] = e\n    for i in range(size - 1, 0, -1):\n        update(d, i, op)\n    return d\n@njit\ndef update(d, k, op):\n    d[k] = op(d[2 * k], d[2 * k + 1])\n@njit\ndef set(d, op, p, x):\n    p += d.shape[0] \/\/ 2\n    d[p] = x\n    while p > 1:\n        p >>= 1\n        update(d, p, op)\n@njit\ndef get(d, p):\n    return d[p + d.shape[0] \/\/ 2]\n@njit\ndef prod(d, op, left, right):\n    size = d.shape[0] \/\/ 2\n    sml = d[0]\n    smr = d[0]\n    left += size\n    right += size\n    while left < right:\n        if left & 1:\n            sml = op(sml, d[left])\n            left += 1\n        if right & 1:\n            right -= 1\n            smr = op(d[right], smr)\n        left >>= 1\n        right >>= 1\n    return op(sml, smr)\n@njit\ndef all_prod(d):\n    return d[1]\n\"\"\"\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-cc = CC('my_module')","+cc = CC('nbmodule')"],"diff_only_import_comment":false,"measured_runtime_v0":2.061239439,"measured_runtime_v1":1.5234250698,"runtime_lift":1.3530297485,"key":["s641106335","s059113462"]}
{"user_id":"u312025627","problem_id":"p03457","language":"python","submission_id_v0":"s103328073","submission_id_v1":"s130173321","cpu_time_v0":250,"cpu_time_v1":183,"memory_v0":55644,"memory_v1":21108,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":26.8,"input":"def main():\n\n    import sys\n\n    input = sys.stdin.buffer.readline\n\n    N = int(input())\n\n    TXY = [[int(i) for i in input().split()] for j in range(N)]\n\n    time, px, py = 0, 0, 0\n\n    for t, x, y in TXY:\n\n        move = abs(x-px) + abs(y-py)\n\n        # print(move, t-time)\n\n        if (t - time) % 2 != move % 2 or t - time < move:\n\n            return print(\"No\")\n\n        time, px, py = t, x, y\n\n    print(\"Yes\")\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"def main():\n\n    import sys\n\n    input = sys.stdin.buffer.readline\n\n    N = int(input())\n\n    TXY = [[int(i) for i in input().split()] for j in range(N)]\n\n    time = 0\n\n    px = 0\n\n    py = 0\n\n    for t, x, y in TXY:\n\n        move = abs(py-y) + abs(px - x)\n\n        if (t-time) < move or (t - time) % 2 != move % 2:\n\n            return print(\"No\")\n\n        time = t\n\n        px = x\n\n        py = y\n\n    print(\"Yes\")\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":17,"code_v1_loc":20,"code_v0_num_chars":461,"code_v1_num_chars":460,"code_v0_no_empty_lines":"def main():\n    import sys\n\n    input = sys.stdin.buffer.readline\n    N = int(input())\n    TXY = [[int(i) for i in input().split()] for j in range(N)]\n    time, px, py = 0, 0, 0\n    for t, x, y in TXY:\n        move = abs(x - px) + abs(y - py)\n        # print(move, t-time)\n        if (t - time) % 2 != move % 2 or t - time < move:\n            return print(\"No\")\n        time, px, py = t, x, y\n    print(\"Yes\")\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def main():\n    import sys\n\n    input = sys.stdin.buffer.readline\n    N = int(input())\n    TXY = [[int(i) for i in input().split()] for j in range(N)]\n    time = 0\n    px = 0\n    py = 0\n    for t, x, y in TXY:\n        move = abs(py - y) + abs(px - x)\n        if (t - time) < move or (t - time) % 2 != move % 2:\n            return print(\"No\")\n        time = t\n        px = x\n        py = y\n    print(\"Yes\")\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":15.0,"diff":["-    time, px, py = 0, 0, 0","+    time = 0","+    px = 0","+    py = 0","-        move = abs(x - px) + abs(y - py)","-        # print(move, t-time)","-        if (t - time) % 2 != move % 2 or t - time < move:","+        move = abs(py - y) + abs(px - x)","+        if (t - time) < move or (t - time) % 2 != move % 2:","-        time, px, py = t, x, y","+        time = t","+        px = x","+        py = y"],"diff_only_import_comment":false,"measured_runtime_v0":0.3387642326,"measured_runtime_v1":0.1945750663,"runtime_lift":1.7410464712,"key":["s103328073","s130173321"]}
{"user_id":"u102461423","problem_id":"p02624","language":"python","submission_id_v0":"s575776489","submission_id_v1":"s814917437","cpu_time_v0":1604,"cpu_time_v1":222,"memory_v0":105124,"memory_v1":26992,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":86.16,"input":"import sys\n\nimport numpy as np\n\n\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\ndef main(N):\n\n    div = np.zeros(N+1, np.int64)\n\n    for n in range(1, N+1):\n\n      for m in range(n, N+1, n):\n\n        div[m] += m\n\n    return div.sum()\n\n\n\nif sys.argv[-1] == 'ONLINE_JUDGE':\n\n    import numba\n\n    from numba.pycc import CC\n\n    i8 = numba.int64\n\n    cc = CC('my_module')\n\n\n\n    def cc_export(f, signature):\n\n        cc.export(f.__name__, signature)(f)\n\n        return numba.njit(f)\n\n\n\n    main = cc_export(main, (i8, ))\n\n    cc.compile()\n\n\n\nfrom my_module import main\n\n\n\nN = int(read())\n\nprint((main(N)))\n","target":"import sys\n\nimport numpy as np\n\n\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\ndef main(N):\n\n    x = 0\n\n    for a in range(1, N+1):\n\n        for b in range(1, N\/\/a+1):\n\n            x += a*b\n\n    return x\n\n\n\nif sys.argv[-1] == 'ONLINE_JUDGE':\n\n    import numba\n\n    from numba.pycc import CC\n\n    i8 = numba.int64\n\n    cc = CC('my_module')\n\n\n\n    def cc_export(f, signature):\n\n        cc.export(f.__name__, signature)(f)\n\n        return numba.njit(f)\n\n\n\n    main = cc_export(main, (i8, ))\n\n    cc.compile()\n\n\n\nfrom my_module import main\n\n\n\nN = int(read())\n\nprint((main(N)))\n","code_v0_loc":31,"code_v1_loc":31,"code_v0_num_chars":665,"code_v1_num_chars":636,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\n\ndef main(N):\n    div = np.zeros(N + 1, np.int64)\n    for n in range(1, N + 1):\n        for m in range(n, N + 1, n):\n            div[m] += m\n    return div.sum()\n\n\nif sys.argv[-1] == \"ONLINE_JUDGE\":\n    import numba\n    from numba.pycc import CC\n\n    i8 = numba.int64\n    cc = CC(\"my_module\")\n\n    def cc_export(f, signature):\n        cc.export(f.__name__, signature)(f)\n        return numba.njit(f)\n\n    main = cc_export(main, (i8,))\n    cc.compile()\nfrom my_module import main\n\nN = int(read())\nprint((main(N)))\n","code_v1_no_empty_lines":"import sys\nimport numpy as np\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\n\ndef main(N):\n    x = 0\n    for a in range(1, N + 1):\n        for b in range(1, N \/\/ a + 1):\n            x += a * b\n    return x\n\n\nif sys.argv[-1] == \"ONLINE_JUDGE\":\n    import numba\n    from numba.pycc import CC\n\n    i8 = numba.int64\n    cc = CC(\"my_module\")\n\n    def cc_export(f, signature):\n        cc.export(f.__name__, signature)(f)\n        return numba.njit(f)\n\n    main = cc_export(main, (i8,))\n    cc.compile()\nfrom my_module import main\n\nN = int(read())\nprint((main(N)))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    div = np.zeros(N + 1, np.int64)","-    for n in range(1, N + 1):","-        for m in range(n, N + 1, n):","-            div[m] += m","-    return div.sum()","+    x = 0","+    for a in range(1, N + 1):","+        for b in range(1, N \/\/ a + 1):","+            x += a * b","+    return x"],"diff_only_import_comment":false,"measured_runtime_v0":1.5076009564,"measured_runtime_v1":0.2714631007,"runtime_lift":5.5536128212,"key":["s575776489","s814917437"]}
{"user_id":"u683134447","problem_id":"p03309","language":"python","submission_id_v0":"s609480946","submission_id_v1":"s469579435","cpu_time_v0":529,"cpu_time_v1":230,"memory_v0":34168,"memory_v1":27248,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":56.52,"input":"import numpy as np\n\nn = int(eval(input()))\n\nal = list(map(int,input().split()))\n\n\n\nfor i in range(n):\n\n    al[i] -= i + 1\n\n\n\nmed = np.median(np.array(al))\n\n\n\nans = 0\n\nfor a in al:\n\n    ans += abs(a-med)\n\nprint((int(ans)))","target":"import statistics\n\nn = int(eval(input()))\n\nal = list(map(int,input().split()))\n\n\n\nfor i in range(n):\n\n    al[i] -= i + 1\n\n\n\nmedian = statistics.median(al)\n\n\n\nans = 0\n\nfor a in al:\n\n    ans += abs(median - a)\n\n\n\nprint((int(ans)))\n","code_v0_loc":13,"code_v1_loc":14,"code_v0_num_chars":213,"code_v1_num_chars":221,"code_v0_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\nal = list(map(int, input().split()))\nfor i in range(n):\n    al[i] -= i + 1\nmed = np.median(np.array(al))\nans = 0\nfor a in al:\n    ans += abs(a - med)\nprint((int(ans)))\n","code_v1_no_empty_lines":"import statistics\n\nn = int(eval(input()))\nal = list(map(int, input().split()))\nfor i in range(n):\n    al[i] -= i + 1\nmedian = statistics.median(al)\nans = 0\nfor a in al:\n    ans += abs(median - a)\nprint((int(ans)))\n","code_same":false,"relative_loc_diff_percent":7.1428571429,"diff":["-import numpy as np","+import statistics","-med = np.median(np.array(al))","+median = statistics.median(al)","-    ans += abs(a - med)","+    ans += abs(median - a)"],"diff_only_import_comment":false,"measured_runtime_v0":1.7668625765,"measured_runtime_v1":0.4307871597,"runtime_lift":4.1014745605,"key":["s609480946","s469579435"]}
{"user_id":"u404676457","problem_id":"p03287","language":"python","submission_id_v0":"s015457447","submission_id_v1":"s379753461","cpu_time_v0":295,"cpu_time_v1":119,"memory_v0":23108,"memory_v1":14224,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":59.66,"input":"import numpy as np\n\n(n, m) = list(map(int, input().split()))\n\na = np.array(list(map(int, input().split()))).astype(\"int64\") \n\na = np.cumsum(a)\n\na %= m\n\ncount = np.sum(a == 0)\n\na.sort()\n\ntc = 1\n\nfor i in range(1, n):\n\n    if a[i - 1] == a[i]:\n\n        tc += 1\n\n    else:\n\n        count += tc * (tc - 1) \/\/ 2\n\n        tc = 1\n\nelse:\n\n    count += tc * (tc - 1) \/\/ 2\n\nprint(count)","target":"(n, m) = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nunique_a = {a[0] % m: 1}\n\nfor i in range(1, n):\n\n    a[i] += a[i - 1]\n\n    a[i] %= m\n\n    if a[i] in unique_a:\n\n        unique_a[a[i]] += 1\n\n    else:\n\n        unique_a[a[i]] = 1\n\ncount = 0\n\nif 0 in unique_a:\n\n    count += unique_a[0]\n\nfor k in unique_a:\n\n    count += unique_a[k] * (unique_a[k] - 1) \/\/ 2\n\nprint(count)","code_v0_loc":17,"code_v1_loc":16,"code_v0_num_chars":376,"code_v1_num_chars":398,"code_v0_no_empty_lines":"import numpy as np\n\n(n, m) = list(map(int, input().split()))\na = np.array(list(map(int, input().split()))).astype(\"int64\")\na = np.cumsum(a)\na %= m\ncount = np.sum(a == 0)\na.sort()\ntc = 1\nfor i in range(1, n):\n    if a[i - 1] == a[i]:\n        tc += 1\n    else:\n        count += tc * (tc - 1) \/\/ 2\n        tc = 1\nelse:\n    count += tc * (tc - 1) \/\/ 2\nprint(count)\n","code_v1_no_empty_lines":"(n, m) = list(map(int, input().split()))\na = list(map(int, input().split()))\nunique_a = {a[0] % m: 1}\nfor i in range(1, n):\n    a[i] += a[i - 1]\n    a[i] %= m\n    if a[i] in unique_a:\n        unique_a[a[i]] += 1\n    else:\n        unique_a[a[i]] = 1\ncount = 0\nif 0 in unique_a:\n    count += unique_a[0]\nfor k in unique_a:\n    count += unique_a[k] * (unique_a[k] - 1) \/\/ 2\nprint(count)\n","code_same":false,"relative_loc_diff_percent":5.8823529412,"diff":["-import numpy as np","-","-a = np.array(list(map(int, input().split()))).astype(\"int64\")","-a = np.cumsum(a)","-a %= m","-count = np.sum(a == 0)","-a.sort()","-tc = 1","+a = list(map(int, input().split()))","+unique_a = {a[0] % m: 1}","-    if a[i - 1] == a[i]:","-        tc += 1","+    a[i] += a[i - 1]","+    a[i] %= m","+    if a[i] in unique_a:","+        unique_a[a[i]] += 1","-        count += tc * (tc - 1) \/\/ 2","-        tc = 1","-else:","-    count += tc * (tc - 1) \/\/ 2","+        unique_a[a[i]] = 1","+count = 0","+if 0 in unique_a:","+    count += unique_a[0]","+for k in unique_a:","+    count += unique_a[k] * (unique_a[k] - 1) \/\/ 2"],"diff_only_import_comment":false,"measured_runtime_v0":1.3542102392,"measured_runtime_v1":0.1979701376,"runtime_lift":6.8404773343,"key":["s015457447","s379753461"]}
{"user_id":"u080364835","problem_id":"p03273","language":"python","submission_id_v0":"s686787991","submission_id_v1":"s327798112","cpu_time_v0":165,"cpu_time_v1":27,"memory_v0":13912,"memory_v1":4468,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":83.64,"input":"import numpy as np\n\n\n\nh, w = map(int, input().split())\n\nal = list(list(input()) for _ in range(h))\n\nal_n = np.array(al)\n\nrow = [0]*w\n\ncol = [0]*h\n\nfor i in range(h):\n\n    for j in range(w):\n\n        if al_n[i][j] == '.':\n\n            row[j] += 1\n\n            col[i] += 1\n\nrow_ = []\n\ncol_ = []\n\nfor i in range(w):\n\n    if row[i] == h:\n\n        row_.append(i)\n\n\n\nfor j in range(h):\n\n    if col[j] == w:\n\n        col_.append(j)\n\n\n\nif len(col_) > 0:\n\n    al_n = np.delete(al_n, col_, axis=0)\n\n\n\nif len(row_) > 0:\n\n    al_n = np.delete(al_n, row_, axis=1)\n\n\n\nfor a in al_n:\n\n    print(*a, sep='')\n","target":"h, w = map(int, input().split())\n\nal = list(list(input()) for _ in range(h))\n\nrow = [0]*w\n\ncol = [0]*h\n\n\n\nfor i in range(h):\n\n    for j in range(w):\n\n        if al[i][j] == '#':\n\n            col[i] += 1\n\n            row[j] += 1\n\nans = []\n\nw_len = len(row) - row.count(0)\n\nfor i in range(h):\n\n    tmp = ''\n\n    if col[i] != 0:\n\n        for j in range(w):\n\n            if row[j] != 0:\n\n                tmp += al[i][j]\n\n        ans.append(tmp)\n\n\n\nfor a in ans:\n\n    print(*a, sep='')\n","code_v0_loc":30,"code_v1_loc":22,"code_v0_num_chars":591,"code_v1_num_chars":480,"code_v0_no_empty_lines":"import numpy as np\n\nh, w = map(int, input().split())\nal = list(list(input()) for _ in range(h))\nal_n = np.array(al)\nrow = [0] * w\ncol = [0] * h\nfor i in range(h):\n    for j in range(w):\n        if al_n[i][j] == \".\":\n            row[j] += 1\n            col[i] += 1\nrow_ = []\ncol_ = []\nfor i in range(w):\n    if row[i] == h:\n        row_.append(i)\nfor j in range(h):\n    if col[j] == w:\n        col_.append(j)\nif len(col_) > 0:\n    al_n = np.delete(al_n, col_, axis=0)\nif len(row_) > 0:\n    al_n = np.delete(al_n, row_, axis=1)\nfor a in al_n:\n    print(*a, sep=\"\")\n","code_v1_no_empty_lines":"h, w = map(int, input().split())\nal = list(list(input()) for _ in range(h))\nrow = [0] * w\ncol = [0] * h\nfor i in range(h):\n    for j in range(w):\n        if al[i][j] == \"#\":\n            col[i] += 1\n            row[j] += 1\nans = []\nw_len = len(row) - row.count(0)\nfor i in range(h):\n    tmp = \"\"\n    if col[i] != 0:\n        for j in range(w):\n            if row[j] != 0:\n                tmp += al[i][j]\n        ans.append(tmp)\nfor a in ans:\n    print(*a, sep=\"\")\n","code_same":false,"relative_loc_diff_percent":26.6666666667,"diff":["-import numpy as np","-","-al_n = np.array(al)","-        if al_n[i][j] == \".\":","+        if al[i][j] == \"#\":","+            col[i] += 1","-            col[i] += 1","-row_ = []","-col_ = []","-for i in range(w):","-    if row[i] == h:","-        row_.append(i)","-for j in range(h):","-    if col[j] == w:","-        col_.append(j)","-if len(col_) > 0:","-    al_n = np.delete(al_n, col_, axis=0)","-if len(row_) > 0:","-    al_n = np.delete(al_n, row_, axis=1)","-for a in al_n:","+ans = []","+w_len = len(row) - row.count(0)","+for i in range(h):","+    tmp = \"\"","+    if col[i] != 0:","+        for j in range(w):","+            if row[j] != 0:","+                tmp += al[i][j]","+        ans.append(tmp)","+for a in ans:"],"diff_only_import_comment":false,"measured_runtime_v0":0.7321008713,"measured_runtime_v1":0.1549179929,"runtime_lift":4.7257317083,"key":["s686787991","s327798112"]}
{"user_id":"u637175065","problem_id":"p03553","language":"python","submission_id_v0":"s305170925","submission_id_v1":"s833575440","cpu_time_v0":88,"cpu_time_v1":46,"memory_v0":7240,"memory_v1":10956,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":47.73,"input":"import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\n\n\nsys.setrecursionlimit(10**7)\n\ninf = 10**20\n\neps = 1.0 \/ 10**15\n\nmod = 10**9+7\n\n\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\n\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\n\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\n\ndef LS(): return sys.stdin.readline().split()\n\ndef I(): return int(sys.stdin.readline())\n\ndef F(): return float(sys.stdin.readline())\n\ndef S(): return input()\n\ndef pf(s): return print(s, flush=True)\n\ndef divisions(n):\n\n    sq = int(math.sqrt(n)+1)\n\n    d = collections.defaultdict(int)\n\n    while n % 2 == 0:\n\n        n \/\/= 2\n\n        d[2] += 1\n\n    i = 3\n\n    while n > 1 and sq >= i:\n\n        if n % i == 0:\n\n            n \/\/= i\n\n            d[i] += 1\n\n        else:\n\n            i += 2\n\n\n\n    if n > 1:\n\n        d[n] += 1\n\n\n\n    r = [1]\n\n    for k, v in d.items():\n\n        for c in r[:]:\n\n            for i in range(1,v+1):\n\n                r.append(c*(k**i))\n\n\n\n    return sorted(r)\n\n\n\ndef main():\n\n    n = I()\n\n    a = LI()\n\n    s = set()\n\n    for i in range(n,0,-1):\n\n        d = divisions(i)\n\n        ld = len(d)\n\n        for j in range(1,2**ld):\n\n            c = []\n\n            ff = True\n\n            for k in range(ld):\n\n                if j & (1<<k):\n\n                    f = True\n\n                    for e in c:\n\n                        if d[k] % e == 0:\n\n                            f = False\n\n                            ff = False\n\n                            break\n\n                    if f:\n\n                        c.append(d[k])\n\n                if not ff:\n\n                    break\n\n            if ff:\n\n                s.add(tuple(c + [n+1]))\n\n    b = sorted(list(s), reverse=True)\n\n    for c in b:\n\n        t = 0\n\n        for j in range(1,n+1):\n\n            f = False\n\n            for e in c:\n\n                if j%e == 0:\n\n                    f = True\n\n                    break\n\n            if f:\n\n                t += a[j-1]\n\n        if t < 0:\n\n            for j in range(1,n+1):\n\n                f = False\n\n                for e in c:\n\n                    if j%e == 0:\n\n                        f = True\n\n                        break\n\n                if f:\n\n                    a[j-1] = 0\n\n\n\n    return sum(a)\n\n\n\n\n\n\n\nprint(main())\n\n\n\n\n","target":"import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,copy,functools\n\nimport time,random\n\n\n\nsys.setrecursionlimit(10**7)\n\ninf = 10**20\n\neps = 1.0 \/ 10**10\n\nmod = 10**9+7\n\nmod2 = 998244353\n\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\n\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\n\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(): return [list(map(int, l.split())) for l in sys.stdin.readlines()]\n\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\n\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\n\ndef LS(): return sys.stdin.readline().split()\n\ndef I(): return int(sys.stdin.readline())\n\ndef F(): return float(sys.stdin.readline())\n\ndef S(): return input()\n\ndef pf(s): return print(s, flush=True)\n\ndef pe(s): return print(str(s), file=sys.stderr)\n\ndef JA(a, sep): return sep.join(map(str, a))\n\ndef JAA(a, s, t): return s.join(t.join(map(str, b)) for b in a)\n\n\n\n\n\nclass Flow():\n\n    def __init__(self, e, N):\n\n        self.E = e\n\n        self.N = N\n\n\n\n    def max_flow(self, s, t):\n\n        r = 0\n\n        e = self.E\n\n\n\n        def f(c, cap):\n\n            v = self.v\n\n            v[c] = 1\n\n            if c == t:\n\n                return cap\n\n            for i in range(self.N):\n\n                if v[i] or e[c][i] <= 0:\n\n                    continue\n\n                cp = min(cap, e[c][i])\n\n                k = f(i, cp)\n\n                if k > 0:\n\n                    e[c][i] -= k\n\n                    e[i][c] += k\n\n                    return k\n\n            return 0\n\n\n\n        while True:\n\n            self.v = [None] * self.N\n\n            fs = f(s, inf)\n\n            if fs == 0:\n\n                break\n\n            r += fs\n\n\n\n        return r\n\n\n\n\n\ndef main():\n\n    n = I()\n\n    a = LI()\n\n\n\n    s = n\n\n    t = n + 1\n\n    e = [[0] * (n+2) for _ in range(n+2)]\n\n    for i in range(n):\n\n        c = a[i]\n\n        if c < 0:\n\n            e[s][i] = -c\n\n            ii = i + 1\n\n            for j in range(ii*2, n+1, ii):\n\n                e[i][j-1] = inf\n\n        else:\n\n            e[i][t] = c\n\n\n\n\n\n    fl = Flow(e, n+2)\n\n    r = fl.max_flow(s,t)\n\n\n\n    return sum(map(lambda x: max(0,x), a)) - r\n\n\n\n# start = time.time()\n\nprint(main())\n\n# pe(time.time() - start)\n\n\n\n\n\n\n","code_v0_loc":92,"code_v1_loc":89,"code_v0_num_chars":2351,"code_v1_num_chars":2252,"code_v0_no_empty_lines":"import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time, copy, functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 \/ 10**15\nmod = 10**9 + 7\n\n\ndef LI():\n    return [int(x) for x in sys.stdin.readline().split()]\n\n\ndef LI_():\n    return [int(x) - 1 for x in sys.stdin.readline().split()]\n\n\ndef LF():\n    return [float(x) for x in sys.stdin.readline().split()]\n\n\ndef LS():\n    return sys.stdin.readline().split()\n\n\ndef I():\n    return int(sys.stdin.readline())\n\n\ndef F():\n    return float(sys.stdin.readline())\n\n\ndef S():\n    return input()\n\n\ndef pf(s):\n    return print(s, flush=True)\n\n\ndef divisions(n):\n    sq = int(math.sqrt(n) + 1)\n    d = collections.defaultdict(int)\n    while n % 2 == 0:\n        n \/\/= 2\n        d[2] += 1\n    i = 3\n    while n > 1 and sq >= i:\n        if n % i == 0:\n            n \/\/= i\n            d[i] += 1\n        else:\n            i += 2\n    if n > 1:\n        d[n] += 1\n    r = [1]\n    for k, v in d.items():\n        for c in r[:]:\n            for i in range(1, v + 1):\n                r.append(c * (k**i))\n    return sorted(r)\n\n\ndef main():\n    n = I()\n    a = LI()\n    s = set()\n    for i in range(n, 0, -1):\n        d = divisions(i)\n        ld = len(d)\n        for j in range(1, 2**ld):\n            c = []\n            ff = True\n            for k in range(ld):\n                if j & (1 << k):\n                    f = True\n                    for e in c:\n                        if d[k] % e == 0:\n                            f = False\n                            ff = False\n                            break\n                    if f:\n                        c.append(d[k])\n                if not ff:\n                    break\n            if ff:\n                s.add(tuple(c + [n + 1]))\n    b = sorted(list(s), reverse=True)\n    for c in b:\n        t = 0\n        for j in range(1, n + 1):\n            f = False\n            for e in c:\n                if j % e == 0:\n                    f = True\n                    break\n            if f:\n                t += a[j - 1]\n        if t < 0:\n            for j in range(1, n + 1):\n                f = False\n                for e in c:\n                    if j % e == 0:\n                        f = True\n                        break\n                if f:\n                    a[j - 1] = 0\n    return sum(a)\n\n\nprint(main())\n","code_v1_no_empty_lines":"import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, copy, functools\nimport time, random\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 \/ 10**10\nmod = 10**9 + 7\nmod2 = 998244353\ndd = [(-1, 0), (0, 1), (1, 0), (0, -1)]\nddn = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef LLI():\n    return [list(map(int, l.split())) for l in sys.stdin.readlines()]\n\n\ndef LI_():\n    return [int(x) - 1 for x in sys.stdin.readline().split()]\n\n\ndef LF():\n    return [float(x) for x in sys.stdin.readline().split()]\n\n\ndef LS():\n    return sys.stdin.readline().split()\n\n\ndef I():\n    return int(sys.stdin.readline())\n\n\ndef F():\n    return float(sys.stdin.readline())\n\n\ndef S():\n    return input()\n\n\ndef pf(s):\n    return print(s, flush=True)\n\n\ndef pe(s):\n    return print(str(s), file=sys.stderr)\n\n\ndef JA(a, sep):\n    return sep.join(map(str, a))\n\n\ndef JAA(a, s, t):\n    return s.join(t.join(map(str, b)) for b in a)\n\n\nclass Flow:\n    def __init__(self, e, N):\n        self.E = e\n        self.N = N\n\n    def max_flow(self, s, t):\n        r = 0\n        e = self.E\n\n        def f(c, cap):\n            v = self.v\n            v[c] = 1\n            if c == t:\n                return cap\n            for i in range(self.N):\n                if v[i] or e[c][i] <= 0:\n                    continue\n                cp = min(cap, e[c][i])\n                k = f(i, cp)\n                if k > 0:\n                    e[c][i] -= k\n                    e[i][c] += k\n                    return k\n            return 0\n\n        while True:\n            self.v = [None] * self.N\n            fs = f(s, inf)\n            if fs == 0:\n                break\n            r += fs\n        return r\n\n\ndef main():\n    n = I()\n    a = LI()\n    s = n\n    t = n + 1\n    e = [[0] * (n + 2) for _ in range(n + 2)]\n    for i in range(n):\n        c = a[i]\n        if c < 0:\n            e[s][i] = -c\n            ii = i + 1\n            for j in range(ii * 2, n + 1, ii):\n                e[i][j - 1] = inf\n        else:\n            e[i][t] = c\n    fl = Flow(e, n + 2)\n    r = fl.max_flow(s, t)\n    return sum(map(lambda x: max(0, x), a)) - r\n\n\n# start = time.time()\nprint(main())\n# pe(time.time() - start)\n","code_same":false,"relative_loc_diff_percent":3.2608695652,"diff":["-import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, random, time, copy, functools","+import math, string, itertools, fractions, heapq, collections, re, array, bisect, sys, copy, functools","+import time, random","-eps = 1.0 \/ 10**15","+eps = 1.0 \/ 10**10","+mod2 = 998244353","+dd = [(-1, 0), (0, 1), (1, 0), (0, -1)]","+ddn = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]","-    return [int(x) for x in sys.stdin.readline().split()]","+    return list(map(int, sys.stdin.readline().split()))","+","+","+def LLI():","+    return [list(map(int, l.split())) for l in sys.stdin.readlines()]","-def divisions(n):","-    sq = int(math.sqrt(n) + 1)","-    d = collections.defaultdict(int)","-    while n % 2 == 0:","-        n \/\/= 2","-        d[2] += 1","-    i = 3","-    while n > 1 and sq >= i:","-        if n % i == 0:","-            n \/\/= i","-            d[i] += 1","-        else:","-            i += 2","-    if n > 1:","-        d[n] += 1","-    r = [1]","-    for k, v in d.items():","-        for c in r[:]:","-            for i in range(1, v + 1):","-                r.append(c * (k**i))","-    return sorted(r)","+def pe(s):","+    return print(str(s), file=sys.stderr)","+","+","+def JA(a, sep):","+    return sep.join(map(str, a))","+","+","+def JAA(a, s, t):","+    return s.join(t.join(map(str, b)) for b in a)","+","+","+class Flow:","+    def __init__(self, e, N):","+        self.E = e","+        self.N = N","+","+    def max_flow(self, s, t):","+        r = 0","+        e = self.E","+","+        def f(c, cap):","+            v = self.v","+            v[c] = 1","+            if c == t:","+                return cap","+            for i in range(self.N):","+                if v[i] or e[c][i] <= 0:","+                    continue","+                cp = min(cap, e[c][i])","+                k = f(i, cp)","+                if k > 0:","+                    e[c][i] -= k","+                    e[i][c] += k","+                    return k","+            return 0","+","+        while True:","+            self.v = [None] * self.N","+            fs = f(s, inf)","+            if fs == 0:","+                break","+            r += fs","+        return r","-    s = set()","-    for i in range(n, 0, -1):","-        d = divisions(i)","-        ld = len(d)","-        for j in range(1, 2**ld):","-            c = []","-            ff = True","-            for k in range(ld):","-                if j & (1 << k):","-                    f = True","-                    for e in c:","-                        if d[k] % e == 0:","-                            f = False","-                            ff = False","-                            break","-                    if f:","-                        c.append(d[k])","-                if not ff:","-                    break","-            if ff:","-                s.add(tuple(c + [n + 1]))","-    b = sorted(list(s), reverse=True)","-    for c in b:","-        t = 0","-        for j in range(1, n + 1):","-            f = False","-            for e in c:","-                if j % e == 0:","-                    f = True","-                    break","-            if f:","-                t += a[j - 1]","-        if t < 0:","-            for j in range(1, n + 1):","-                f = False","-                for e in c:","-                    if j % e == 0:","-                        f = True","-                        break","-                if f:","-                    a[j - 1] = 0","-    return sum(a)","+    s = n","+    t = n + 1","+    e = [[0] * (n + 2) for _ in range(n + 2)]","+    for i in range(n):","+        c = a[i]","+        if c < 0:","+            e[s][i] = -c","+            ii = i + 1","+            for j in range(ii * 2, n + 1, ii):","+                e[i][j - 1] = inf","+        else:","+            e[i][t] = c","+    fl = Flow(e, n + 2)","+    r = fl.max_flow(s, t)","+    return sum(map(lambda x: max(0, x), a)) - r","+# start = time.time()","+# pe(time.time() - start)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2170818343,"measured_runtime_v1":0.0062613072,"runtime_lift":34.670369248,"key":["s305170925","s833575440"]}
{"user_id":"u096128910","problem_id":"p02881","language":"python","submission_id_v0":"s987616882","submission_id_v1":"s695744152","cpu_time_v0":126,"cpu_time_v1":81,"memory_v0":66508,"memory_v1":64160,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":35.71,"input":"N = int(eval(input()))\n\nans = N - 1\n\np = 1\n\nfor i in range(2, int((N ** 0.5) + 1)):\n\n    if p % 2 == 1 and i > (N ** 0.5):\n\n        break\n\n    if N % i == 0:\n\n        p = i\n\n        j = N \/\/ i\n\n        m = i + j - 2\n\n        if m < ans:\n\n            ans = m\n\n        else:\n\n            continue\n\n    else:\n\n        continue\n\nprint(ans)\n","target":"N = int(eval(input()))\n\nans = N - 1\n\nfor i in range(2, int((N ** 0.5) + 1)):\n\n    if N % i == 0:\n\n        j = N \/\/ i\n\n        m = i + j - 2\n\n        ans = min(ans, m)\n\nprint(ans)\n","code_v0_loc":17,"code_v1_loc":8,"code_v0_num_chars":330,"code_v1_num_chars":173,"code_v0_no_empty_lines":"N = int(eval(input()))\nans = N - 1\np = 1\nfor i in range(2, int((N**0.5) + 1)):\n    if p % 2 == 1 and i > (N**0.5):\n        break\n    if N % i == 0:\n        p = i\n        j = N \/\/ i\n        m = i + j - 2\n        if m < ans:\n            ans = m\n        else:\n            continue\n    else:\n        continue\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nans = N - 1\nfor i in range(2, int((N**0.5) + 1)):\n    if N % i == 0:\n        j = N \/\/ i\n        m = i + j - 2\n        ans = min(ans, m)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":52.9411764706,"diff":["-p = 1","-    if p % 2 == 1 and i > (N**0.5):","-        break","-        p = i","-        if m < ans:","-            ans = m","-        else:","-            continue","-    else:","-        continue","+        ans = min(ans, m)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3775834899,"measured_runtime_v1":0.2214011464,"runtime_lift":1.7054269863,"key":["s987616882","s695744152"]}
{"user_id":"u408071652","problem_id":"p03078","language":"python","submission_id_v0":"s229462844","submission_id_v1":"s240353408","cpu_time_v0":159,"cpu_time_v1":114,"memory_v0":72796,"memory_v1":80804,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":28.3,"input":"import sys\n\nimport heapq\n\n\n\n\n\n# \\n\n\ndef input():\n\n    return sys.stdin.readline().rstrip()\n\n\n\n\n\ndef main():\n\n    X, Y, Z, K = list(map(int, input().split()))\n\n    A = list(map(int, input().split()))\n\n    B = list(map(int, input().split()))\n\n    C = list(map(int, input().split()))\n\n\n\n    A.sort(reverse=True)\n\n    B.sort(reverse=True)\n\n    C.sort(reverse=True)\n\n\n\n    Q = []\n\n    S = set()\n\n    heapq.heapify(Q)\n\n    heapq.heappush(Q, (-A[0] - B[0] - C[0], 0, 0, 0))\n\n    for i in range(K):\n\n        m, a, b, c = heapq.heappop(Q)\n\n        print((-m))\n\n        if (a + 1, b, c) not in S and a + 1 < X:\n\n            heapq.heappush(Q, (-A[a + 1] - B[b] - C[c], a + 1, b, c))\n\n            S.add((a + 1, b, c))\n\n        if (a, b + 1, c) not in S and b + 1 < Y:\n\n            heapq.heappush(Q, (-A[a] - B[b + 1] - C[c], a, b + 1, c))\n\n            S.add((a, b + 1, c))\n\n        if (a, b, c + 1) not in S and c + 1 < Z:\n\n            heapq.heappush(Q, (-A[a ] - B[b] - C[c+1], a, b, c + 1))\n\n            S.add((a, b, c + 1))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"import sys\n\n\n\n\n\n# \\n\n\ndef input():\n\n    return sys.stdin.readline().rstrip()\n\n\n\n\n\ndef main():\n\n    X, Y, Z, K = list(map(int, input().split()))\n\n    A = list(map(int, input().split()))\n\n    B = list(map(int, input().split()))\n\n    C = list(map(int, input().split()))\n\n\n\n    A.sort(reverse=True)\n\n    B.sort(reverse=True)\n\n    C.sort(reverse=True)\n\n\n\n    L = []\n\n\n\n    for i in range(X):\n\n        for j in range(min(Y, K \/\/ (i + 1) + 1)):\n\n            for k in range(min(Z, K \/\/ (i + 1) \/\/ (j + 1) + 1)):\n\n                L.append(A[i] + B[j] + C[k])\n\n\n\n    L.sort(reverse=True)\n\n\n\n    for i in range(K):\n\n        print((L[i]))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":39,"code_v1_loc":33,"code_v0_num_chars":1051,"code_v1_num_chars":663,"code_v0_no_empty_lines":"import sys\nimport heapq\n\n# \\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    X, Y, Z, K = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    A.sort(reverse=True)\n    B.sort(reverse=True)\n    C.sort(reverse=True)\n    Q = []\n    S = set()\n    heapq.heapify(Q)\n    heapq.heappush(Q, (-A[0] - B[0] - C[0], 0, 0, 0))\n    for i in range(K):\n        m, a, b, c = heapq.heappop(Q)\n        print((-m))\n        if (a + 1, b, c) not in S and a + 1 < X:\n            heapq.heappush(Q, (-A[a + 1] - B[b] - C[c], a + 1, b, c))\n            S.add((a + 1, b, c))\n        if (a, b + 1, c) not in S and b + 1 < Y:\n            heapq.heappush(Q, (-A[a] - B[b + 1] - C[c], a, b + 1, c))\n            S.add((a, b + 1, c))\n        if (a, b, c + 1) not in S and c + 1 < Z:\n            heapq.heappush(Q, (-A[a] - B[b] - C[c + 1], a, b, c + 1))\n            S.add((a, b, c + 1))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\n# \\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    X, Y, Z, K = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    A.sort(reverse=True)\n    B.sort(reverse=True)\n    C.sort(reverse=True)\n    L = []\n    for i in range(X):\n        for j in range(min(Y, K \/\/ (i + 1) + 1)):\n            for k in range(min(Z, K \/\/ (i + 1) \/\/ (j + 1) + 1)):\n                L.append(A[i] + B[j] + C[k])\n    L.sort(reverse=True)\n    for i in range(K):\n        print((L[i]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":15.3846153846,"diff":["-import heapq","-    Q = []","-    S = set()","-    heapq.heapify(Q)","-    heapq.heappush(Q, (-A[0] - B[0] - C[0], 0, 0, 0))","+    L = []","+    for i in range(X):","+        for j in range(min(Y, K \/\/ (i + 1) + 1)):","+            for k in range(min(Z, K \/\/ (i + 1) \/\/ (j + 1) + 1)):","+                L.append(A[i] + B[j] + C[k])","+    L.sort(reverse=True)","-        m, a, b, c = heapq.heappop(Q)","-        print((-m))","-        if (a + 1, b, c) not in S and a + 1 < X:","-            heapq.heappush(Q, (-A[a + 1] - B[b] - C[c], a + 1, b, c))","-            S.add((a + 1, b, c))","-        if (a, b + 1, c) not in S and b + 1 < Y:","-            heapq.heappush(Q, (-A[a] - B[b + 1] - C[c], a, b + 1, c))","-            S.add((a, b + 1, c))","-        if (a, b, c + 1) not in S and c + 1 < Z:","-            heapq.heappush(Q, (-A[a] - B[b] - C[c + 1], a, b, c + 1))","-            S.add((a, b, c + 1))","+        print((L[i]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3053240893,"measured_runtime_v1":0.1252524042,"runtime_lift":2.4376704877,"key":["s229462844","s240353408"]}
{"user_id":"u599547273","problem_id":"p03494","language":"python","submission_id_v0":"s252753387","submission_id_v1":"s505612116","cpu_time_v0":21,"cpu_time_v1":18,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.29,"input":"def two_count(x):\n\n\tif int(str(x)[-1]) % 2 == 0:\n\n\t\treturn 1 + two_count(x\/\/2)\n\n\telse:\n\n\t\treturn 0\n\n\n\nn = int(eval(input()))\n\nn_list = [int(n) for n in input().split(\" \")]\n\n\n\nn_two_count_list = [two_count(n) for n in n_list]\n\n\n\nprint((min(n_two_count_list)))","target":"def two_count(x):\n\n\tif x % 2 == 0:\n\n\t\treturn 1 + two_count(x\/\/2)\n\n\telse:\n\n\t\treturn 0\n\n\n\nn = int(eval(input()))\n\nn_list = [int(n) for n in input().split(\" \")]\n\n\n\nn_two_count_list = [two_count(n) for n in n_list]\n\n\n\nprint((min(n_two_count_list)))","code_v0_loc":12,"code_v1_loc":12,"code_v0_num_chars":250,"code_v1_num_chars":236,"code_v0_no_empty_lines":"def two_count(x):\n    if int(str(x)[-1]) % 2 == 0:\n        return 1 + two_count(x \/\/ 2)\n    else:\n        return 0\n\n\nn = int(eval(input()))\nn_list = [int(n) for n in input().split(\" \")]\nn_two_count_list = [two_count(n) for n in n_list]\nprint((min(n_two_count_list)))\n","code_v1_no_empty_lines":"def two_count(x):\n    if x % 2 == 0:\n        return 1 + two_count(x \/\/ 2)\n    else:\n        return 0\n\n\nn = int(eval(input()))\nn_list = [int(n) for n in input().split(\" \")]\nn_two_count_list = [two_count(n) for n in n_list]\nprint((min(n_two_count_list)))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    if int(str(x)[-1]) % 2 == 0:","+    if x % 2 == 0:"],"diff_only_import_comment":false,"measured_runtime_v0":0.3392717605,"measured_runtime_v1":0.2706325946,"runtime_lift":1.2536249042,"key":["s252753387","s505612116"]}
{"user_id":"u648881683","problem_id":"p02814","language":"python","submission_id_v0":"s824836675","submission_id_v1":"s558243892","cpu_time_v0":799,"cpu_time_v1":244,"memory_v0":24192,"memory_v1":16272,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":69.46,"input":"from functools import reduce\n\nimport fractions\n\nimport numpy as np\n\n\n\nN, M = list(map(int, input().split()))\n\na = np.array(list(map(int, input().split())))\n\n\n\na = a \/\/ 2\n\n\n\ndef lcm_base(x, y):\n\n    return (x * y) \/\/ fractions.gcd(x, y)\n\n\n\ndef lcm(*numbers):\n\n    return reduce(lcm_base, numbers, 1)\n\n\n\nl = lcm(*a)\n\nexist = not 0 in ((l\/\/a)%2)\n\n\n\nif exist:\n\n    print(((M \/\/ l + 1 ) \/\/ 2))\n\nelse:\n\n    print((0))","target":"import sys, fractions, functools\n\ninput = lambda: sys.stdin.readline().rstrip() \n\nsys.setrecursionlimit(10**7)\n\nINF = 10**20\n\ndef I(): return int(eval(input()))\n\ndef F(): return float(eval(input()))\n\ndef S(): return eval(input())\n\ndef LI(): return [int(x) for x in input().split()]\n\ndef LI_(): return [int(x)-1 for x in input().split()]\n\ndef LF(): return [float(x) for x in input().split()]\n\ndef LS(): return input().split()\n\n\n\ndef lcm_base(x, y):\n\n    return (x * y) \/\/ fractions.gcd(x, y)\n\n\n\ndef lcm_list(numbers):\n\n    return functools.reduce(lcm_base, numbers, 1)\n\n\n\ndef resolve():\n\n    N, M = LI()\n\n    a = LI()\n\n\n\n    a_half = [i\/\/2 for i in a]\n\n    a_half_lcm = lcm_list(a_half)\n\n    has_scm = not 0 in [a_half_lcm\/\/i%2 for i in a_half]\n\n\n\n    if has_scm:\n\n        print(((M-a_half_lcm)\/\/(2*a_half_lcm)+1))\n\n    else:\n\n        print((0))\n\n\n\nif __name__ == '__main__':\n\n    resolve()","code_v0_loc":22,"code_v1_loc":33,"code_v0_num_chars":401,"code_v1_num_chars":867,"code_v0_no_empty_lines":"from functools import reduce\nimport fractions\nimport numpy as np\n\nN, M = list(map(int, input().split()))\na = np.array(list(map(int, input().split())))\na = a \/\/ 2\n\n\ndef lcm_base(x, y):\n    return (x * y) \/\/ fractions.gcd(x, y)\n\n\ndef lcm(*numbers):\n    return reduce(lcm_base, numbers, 1)\n\n\nl = lcm(*a)\nexist = not 0 in ((l \/\/ a) % 2)\nif exist:\n    print(((M \/\/ l + 1) \/\/ 2))\nelse:\n    print((0))\n","code_v1_no_empty_lines":"import sys, fractions, functools\n\ninput = lambda: sys.stdin.readline().rstrip()\nsys.setrecursionlimit(10**7)\nINF = 10**20\n\n\ndef I():\n    return int(eval(input()))\n\n\ndef F():\n    return float(eval(input()))\n\n\ndef S():\n    return eval(input())\n\n\ndef LI():\n    return [int(x) for x in input().split()]\n\n\ndef LI_():\n    return [int(x) - 1 for x in input().split()]\n\n\ndef LF():\n    return [float(x) for x in input().split()]\n\n\ndef LS():\n    return input().split()\n\n\ndef lcm_base(x, y):\n    return (x * y) \/\/ fractions.gcd(x, y)\n\n\ndef lcm_list(numbers):\n    return functools.reduce(lcm_base, numbers, 1)\n\n\ndef resolve():\n    N, M = LI()\n    a = LI()\n    a_half = [i \/\/ 2 for i in a]\n    a_half_lcm = lcm_list(a_half)\n    has_scm = not 0 in [a_half_lcm \/\/ i % 2 for i in a_half]\n    if has_scm:\n        print(((M - a_half_lcm) \/\/ (2 * a_half_lcm) + 1))\n    else:\n        print((0))\n\n\nif __name__ == \"__main__\":\n    resolve()\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-from functools import reduce","-import fractions","-import numpy as np","+import sys, fractions, functools","-N, M = list(map(int, input().split()))","-a = np.array(list(map(int, input().split())))","-a = a \/\/ 2","+input = lambda: sys.stdin.readline().rstrip()","+sys.setrecursionlimit(10**7)","+INF = 10**20","+","+","+def I():","+    return int(eval(input()))","+","+","+def F():","+    return float(eval(input()))","+","+","+def S():","+    return eval(input())","+","+","+def LI():","+    return [int(x) for x in input().split()]","+","+","+def LI_():","+    return [int(x) - 1 for x in input().split()]","+","+","+def LF():","+    return [float(x) for x in input().split()]","+","+","+def LS():","+    return input().split()","-def lcm(*numbers):","-    return reduce(lcm_base, numbers, 1)","+def lcm_list(numbers):","+    return functools.reduce(lcm_base, numbers, 1)","-l = lcm(*a)","-exist = not 0 in ((l \/\/ a) % 2)","-if exist:","-    print(((M \/\/ l + 1) \/\/ 2))","-else:","-    print((0))","+def resolve():","+    N, M = LI()","+    a = LI()","+    a_half = [i \/\/ 2 for i in a]","+    a_half_lcm = lcm_list(a_half)","+    has_scm = not 0 in [a_half_lcm \/\/ i % 2 for i in a_half]","+    if has_scm:","+        print(((M - a_half_lcm) \/\/ (2 * a_half_lcm) + 1))","+    else:","+        print((0))","+","+","+if __name__ == \"__main__\":","+    resolve()"],"diff_only_import_comment":false,"measured_runtime_v0":1.2936481755,"measured_runtime_v1":0.2801775889,"runtime_lift":4.6172435859,"key":["s824836675","s558243892"]}
{"user_id":"u260216890","problem_id":"p02883","language":"python","submission_id_v0":"s662154758","submission_id_v1":"s660978012","cpu_time_v0":569,"cpu_time_v1":344,"memory_v0":43644,"memory_v1":122364,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":39.54,"input":"import numpy as np\n\nN, K= list(map(int, input().split()))\n\nA=[int(i) for i in input().split()]\n\nF=[int(i) for i in input().split()]\n\n\n\nA=np.array(sorted(A, reverse=True))\n\nF=np.array(sorted(F))\n\n\n\nlower_bound=0\n\nupper_bound=np.max(A*F)\n\nK_tmp=0\n\n\n\nwhile upper_bound>=lower_bound:\n\n    mid=(lower_bound+upper_bound)\/\/2\n\n    K_tmp=np.sum(np.maximum(A-mid\/\/F, 0))\n\n    if K_tmp<=K:\n\n        upper_bound=mid-1\n\n    else:\n\n        lower_bound=mid+1\n\n\n\nprint(lower_bound)","target":"n,k=list(map(int,input().split()))\n\n*a,= list(map(int,input().split()))\n\n*f,= list(map(int,input().split()))\n\na=sorted(a)\n\nf=sorted(f, reverse=True)\n\n\n\ndef is_ok(arg):\n\n    cnt=0\n\n    for i in range(n):\n\n        cnt+=max(a[i]-arg\/\/f[i], 0)\n\n    return cnt<=k\n\n\n\ndef meguru_bisect(ng, ok):\n\n    while (abs(ok - ng) > 1):\n\n        mid = (ok + ng) \/\/ 2\n\n        if is_ok(mid):\n\n            ok = mid\n\n        else:\n\n            ng = mid\n\n    return ok\n\n\n\nprint((meguru_bisect(-1, 10**12)))","code_v0_loc":21,"code_v1_loc":22,"code_v0_num_chars":459,"code_v1_num_chars":465,"code_v0_no_empty_lines":"import numpy as np\n\nN, K = list(map(int, input().split()))\nA = [int(i) for i in input().split()]\nF = [int(i) for i in input().split()]\nA = np.array(sorted(A, reverse=True))\nF = np.array(sorted(F))\nlower_bound = 0\nupper_bound = np.max(A * F)\nK_tmp = 0\nwhile upper_bound >= lower_bound:\n    mid = (lower_bound + upper_bound) \/\/ 2\n    K_tmp = np.sum(np.maximum(A - mid \/\/ F, 0))\n    if K_tmp <= K:\n        upper_bound = mid - 1\n    else:\n        lower_bound = mid + 1\nprint(lower_bound)\n","code_v1_no_empty_lines":"n, k = list(map(int, input().split()))\n(*a,) = list(map(int, input().split()))\n(*f,) = list(map(int, input().split()))\na = sorted(a)\nf = sorted(f, reverse=True)\n\n\ndef is_ok(arg):\n    cnt = 0\n    for i in range(n):\n        cnt += max(a[i] - arg \/\/ f[i], 0)\n    return cnt <= k\n\n\ndef meguru_bisect(ng, ok):\n    while abs(ok - ng) > 1:\n        mid = (ok + ng) \/\/ 2\n        if is_ok(mid):\n            ok = mid\n        else:\n            ng = mid\n    return ok\n\n\nprint((meguru_bisect(-1, 10**12)))\n","code_same":false,"relative_loc_diff_percent":4.5454545455,"diff":["-import numpy as np","+n, k = list(map(int, input().split()))","+(*a,) = list(map(int, input().split()))","+(*f,) = list(map(int, input().split()))","+a = sorted(a)","+f = sorted(f, reverse=True)","-N, K = list(map(int, input().split()))","-A = [int(i) for i in input().split()]","-F = [int(i) for i in input().split()]","-A = np.array(sorted(A, reverse=True))","-F = np.array(sorted(F))","-lower_bound = 0","-upper_bound = np.max(A * F)","-K_tmp = 0","-while upper_bound >= lower_bound:","-    mid = (lower_bound + upper_bound) \/\/ 2","-    K_tmp = np.sum(np.maximum(A - mid \/\/ F, 0))","-    if K_tmp <= K:","-        upper_bound = mid - 1","-    else:","-        lower_bound = mid + 1","-print(lower_bound)","+","+def is_ok(arg):","+    cnt = 0","+    for i in range(n):","+        cnt += max(a[i] - arg \/\/ f[i], 0)","+    return cnt <= k","+","+","+def meguru_bisect(ng, ok):","+    while abs(ok - ng) > 1:","+        mid = (ok + ng) \/\/ 2","+        if is_ok(mid):","+            ok = mid","+        else:","+            ng = mid","+    return ok","+","+","+print((meguru_bisect(-1, 10**12)))"],"diff_only_import_comment":false,"measured_runtime_v0":2.029960073,"measured_runtime_v1":0.3428780406,"runtime_lift":5.9203560242,"key":["s662154758","s660978012"]}
{"user_id":"u532966492","problem_id":"p02635","language":"python","submission_id_v0":"s441445233","submission_id_v1":"s346774769","cpu_time_v0":1975,"cpu_time_v1":1651,"memory_v0":87172,"memory_v1":88224,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.41,"input":"def main():\n\n    mod = 998244353\n\n    s, k = input().split()\n\n    k = int(k)\n\n    n = len(s)\n\n\n\n    one = s.count(\"1\")\n\n\n\n    cnt = 0\n\n    zero_list = []\n\n    for i in range(n):\n\n        if s[i] == \"0\":\n\n            zero_list.append(cnt)\n\n            cnt = 0\n\n        else:\n\n            cnt += 1\n\n\n\n    z = 0\n\n    mm = min(one, k)\n\n\n\n    dp = [[0]*(one+1) for _ in [0]*(one+1)]\n\n    dp[0][0] = 1\n\n\n\n    for i in range(len(zero_list)):\n\n        dp2 = [[0]*(mm+1) for _ in [0]*(one+1)]\n\n        base = zero_list[i]\n\n        # j:\u4f55\u500b\u4eca\u307e\u3067\u306b\u5165\u308c\u305f\u304b\n\n        for j in range(one+1):\n\n            # l:\u4f55\u500b\u5165\u308c\u308b\u304b\n\n            for l in range(one+1-j):\n\n                if l < z+base-j:\n\n                    continue\n\n                ml = max(l-base, 0)\n\n                # p:\u3053\u308c\u307e\u3067\u306e\u30da\u30ca\u30eb\u30c6\u30a3\n\n                for p in range(min(one, k)+1):\n\n                    q = p+ml\n\n                    if q <= mm:\n\n                        dp2[j+l][q] = (dp2[j+l][q]+dp[j][p]) % mod\n\n                    else:\n\n                        break\n\n        z += base\n\n        dp = dp2\n\n    print((sum([sum(i) for i in dp]) % mod))\n\n\n\n\n\nmain()","target":"def main():\n\n    mod = 998244353\n\n    s, k = input().split()\n\n    k, n, one, cnt, z, zero_list = int(k), len(s), s.count(\"1\")+1, 0, 0, []\n\n    for i in range(n):\n\n        if s[i] == \"0\":\n\n            zero_list.append(cnt)\n\n            cnt = 0\n\n        else:\n\n            cnt += 1\n\n    mm = min(one-1, k)\n\n\n\n    dp = [[0]*(mm+1) for _ in [0]*one]\n\n    dp[0][0] = 1\n\n\n\n    for i in zero_list:\n\n        dp2 = [[0]*(mm+1) for _ in [0]*one]\n\n        for j in range(one):\n\n            for l in range(max(z+i-j, 0), one-j):\n\n                ml = max(l-i, 0)\n\n                for p in range(min(j, mm-ml)+1):\n\n                    dp2[j+l][p+ml] = (dp2[j+l][p+ml]+dp[j][p]) % mod\n\n        z += i\n\n        dp = dp2\n\n    print((sum([sum(i) for i in dp]) % mod))\n\n\n\n\n\nmain()","code_v0_loc":46,"code_v1_loc":28,"code_v0_num_chars":1093,"code_v1_num_chars":760,"code_v0_no_empty_lines":"def main():\n    mod = 998244353\n    s, k = input().split()\n    k = int(k)\n    n = len(s)\n    one = s.count(\"1\")\n    cnt = 0\n    zero_list = []\n    for i in range(n):\n        if s[i] == \"0\":\n            zero_list.append(cnt)\n            cnt = 0\n        else:\n            cnt += 1\n    z = 0\n    mm = min(one, k)\n    dp = [[0] * (one + 1) for _ in [0] * (one + 1)]\n    dp[0][0] = 1\n    for i in range(len(zero_list)):\n        dp2 = [[0] * (mm + 1) for _ in [0] * (one + 1)]\n        base = zero_list[i]\n        # j:\u4f55\u500b\u4eca\u307e\u3067\u306b\u5165\u308c\u305f\u304b\n        for j in range(one + 1):\n            # l:\u4f55\u500b\u5165\u308c\u308b\u304b\n            for l in range(one + 1 - j):\n                if l < z + base - j:\n                    continue\n                ml = max(l - base, 0)\n                # p:\u3053\u308c\u307e\u3067\u306e\u30da\u30ca\u30eb\u30c6\u30a3\n                for p in range(min(one, k) + 1):\n                    q = p + ml\n                    if q <= mm:\n                        dp2[j + l][q] = (dp2[j + l][q] + dp[j][p]) % mod\n                    else:\n                        break\n        z += base\n        dp = dp2\n    print((sum([sum(i) for i in dp]) % mod))\n\n\nmain()\n","code_v1_no_empty_lines":"def main():\n    mod = 998244353\n    s, k = input().split()\n    k, n, one, cnt, z, zero_list = int(k), len(s), s.count(\"1\") + 1, 0, 0, []\n    for i in range(n):\n        if s[i] == \"0\":\n            zero_list.append(cnt)\n            cnt = 0\n        else:\n            cnt += 1\n    mm = min(one - 1, k)\n    dp = [[0] * (mm + 1) for _ in [0] * one]\n    dp[0][0] = 1\n    for i in zero_list:\n        dp2 = [[0] * (mm + 1) for _ in [0] * one]\n        for j in range(one):\n            for l in range(max(z + i - j, 0), one - j):\n                ml = max(l - i, 0)\n                for p in range(min(j, mm - ml) + 1):\n                    dp2[j + l][p + ml] = (dp2[j + l][p + ml] + dp[j][p]) % mod\n        z += i\n        dp = dp2\n    print((sum([sum(i) for i in dp]) % mod))\n\n\nmain()\n","code_same":false,"relative_loc_diff_percent":39.1304347826,"diff":["-    k = int(k)","-    n = len(s)","-    one = s.count(\"1\")","-    cnt = 0","-    zero_list = []","+    k, n, one, cnt, z, zero_list = int(k), len(s), s.count(\"1\") + 1, 0, 0, []","-    z = 0","-    mm = min(one, k)","-    dp = [[0] * (one + 1) for _ in [0] * (one + 1)]","+    mm = min(one - 1, k)","+    dp = [[0] * (mm + 1) for _ in [0] * one]","-    for i in range(len(zero_list)):","-        dp2 = [[0] * (mm + 1) for _ in [0] * (one + 1)]","-        base = zero_list[i]","-        # j:\u4f55\u500b\u4eca\u307e\u3067\u306b\u5165\u308c\u305f\u304b","-        for j in range(one + 1):","-            # l:\u4f55\u500b\u5165\u308c\u308b\u304b","-            for l in range(one + 1 - j):","-                if l < z + base - j:","-                    continue","-                ml = max(l - base, 0)","-                # p:\u3053\u308c\u307e\u3067\u306e\u30da\u30ca\u30eb\u30c6\u30a3","-                for p in range(min(one, k) + 1):","-                    q = p + ml","-                    if q <= mm:","-                        dp2[j + l][q] = (dp2[j + l][q] + dp[j][p]) % mod","-                    else:","-                        break","-        z += base","+    for i in zero_list:","+        dp2 = [[0] * (mm + 1) for _ in [0] * one]","+        for j in range(one):","+            for l in range(max(z + i - j, 0), one - j):","+                ml = max(l - i, 0)","+                for p in range(min(j, mm - ml) + 1):","+                    dp2[j + l][p + ml] = (dp2[j + l][p + ml] + dp[j][p]) % mod","+        z += i"],"diff_only_import_comment":false,"measured_runtime_v0":0.3745533221,"measured_runtime_v1":0.2971069293,"runtime_lift":1.2606684164,"key":["s441445233","s346774769"]}
{"user_id":"u150984829","problem_id":"p02386","language":"python","submission_id_v0":"s799017760","submission_id_v1":"s414241098","cpu_time_v0":150,"cpu_time_v1":130,"memory_v0":5608,"memory_v1":5608,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.33,"input":"n=int(eval(input()))\n\na=[list(map(int,input().split()))for _ in range(n)]\n\ndef f():\n\n for i in range(n-1):\n\n  d=a[i][:];d[3],d[4]=d[4],d[3]\n\n  for j in range(i+1,n):\n\n   e=a[j][:];e[3],e[4]=e[4],e[3]\n\n   for p in('012345','152043','215304','302541','410352','514320'):\n\n    f=[d[int(k)]for k in p]\n\n    g=f[1:5]*2\n\n    for k in range(4):\n\n     if(g[k:k+4]==e[1:5])*(f[0]==e[0])*(f[5]==e[5]):return 'No'\n\n return 'Yes'\n\nprint((f()))\n","target":"n=int(eval(input()))\n\na=[list(map(int,input().split()))for _ in range(n)]\n\ndef f():\n\n for i in range(n-1):\n\n  d=a[i][:];d[3],d[4]=d[4],d[3]\n\n  for j in range(i+1,n):\n\n   e=a[j][:];e[3],e[4]=e[4],e[3]\n\n   for p in('012345','152043','215304','302541','410352','514320'):\n\n    f=[d[int(k)]for k in p]\n\n    g=f[1:5]*2\n\n    for k in range(4):\n\n     if g[k:k+4]==e[1:5]:\n\n      if f[0]==e[0]:\n\n       if f[5]==e[5]:return 'No'\n\n return 'Yes'\n\nprint((f()))\n","code_v0_loc":14,"code_v1_loc":16,"code_v0_num_chars":424,"code_v1_num_chars":442,"code_v0_no_empty_lines":"n = int(eval(input()))\na = [list(map(int, input().split())) for _ in range(n)]\n\n\ndef f():\n    for i in range(n - 1):\n        d = a[i][:]\n        d[3], d[4] = d[4], d[3]\n        for j in range(i + 1, n):\n            e = a[j][:]\n            e[3], e[4] = e[4], e[3]\n            for p in (\"012345\", \"152043\", \"215304\", \"302541\", \"410352\", \"514320\"):\n                f = [d[int(k)] for k in p]\n                g = f[1:5] * 2\n                for k in range(4):\n                    if (g[k : k + 4] == e[1:5]) * (f[0] == e[0]) * (f[5] == e[5]):\n                        return \"No\"\n    return \"Yes\"\n\n\nprint((f()))\n","code_v1_no_empty_lines":"n = int(eval(input()))\na = [list(map(int, input().split())) for _ in range(n)]\n\n\ndef f():\n    for i in range(n - 1):\n        d = a[i][:]\n        d[3], d[4] = d[4], d[3]\n        for j in range(i + 1, n):\n            e = a[j][:]\n            e[3], e[4] = e[4], e[3]\n            for p in (\"012345\", \"152043\", \"215304\", \"302541\", \"410352\", \"514320\"):\n                f = [d[int(k)] for k in p]\n                g = f[1:5] * 2\n                for k in range(4):\n                    if g[k : k + 4] == e[1:5]:\n                        if f[0] == e[0]:\n                            if f[5] == e[5]:\n                                return \"No\"\n    return \"Yes\"\n\n\nprint((f()))\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-                    if (g[k : k + 4] == e[1:5]) * (f[0] == e[0]) * (f[5] == e[5]):","-                        return \"No\"","+                    if g[k : k + 4] == e[1:5]:","+                        if f[0] == e[0]:","+                            if f[5] == e[5]:","+                                return \"No\""],"diff_only_import_comment":false,"measured_runtime_v0":0.3438470016,"measured_runtime_v1":0.1932190149,"runtime_lift":1.7795712385,"key":["s799017760","s414241098"]}
{"user_id":"u923270446","problem_id":"p02814","language":"python","submission_id_v0":"s885010221","submission_id_v1":"s420231524","cpu_time_v0":220,"cpu_time_v1":172,"memory_v0":16320,"memory_v1":20208,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":21.82,"input":"from fractions import gcd\n\nn, m = list(map(int, input().split()))\n\na = [int(i) \/\/ 2 for i in input().split()]\n\nx = 1\n\nfor i in range(n):\n\n    x *= a[i] \/\/ gcd(x, a[i])\n\nfor i in a:\n\n    if x \/\/ i % 2 == 0:\n\n        print((0))\n\n        exit()\n\nprint(((m \/\/ x + 1) \/\/ 2))","target":"from math import gcd, ceil\n\nn, m = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\na = [i \/\/ 2 for i in a]\n\nl = 1\n\nfor i in a:\n\n    l *= i \/\/ gcd(l, i)\n\nfor i in a:\n\n    if l \/\/ i % 2 == 0:\n\n        print((0))\n\n        exit()\n\nprint((ceil((m \/\/ l) \/ 2)))","code_v0_loc":11,"code_v1_loc":12,"code_v0_num_chars":259,"code_v1_num_chars":266,"code_v0_no_empty_lines":"from fractions import gcd\n\nn, m = list(map(int, input().split()))\na = [int(i) \/\/ 2 for i in input().split()]\nx = 1\nfor i in range(n):\n    x *= a[i] \/\/ gcd(x, a[i])\nfor i in a:\n    if x \/\/ i % 2 == 0:\n        print((0))\n        exit()\nprint(((m \/\/ x + 1) \/\/ 2))\n","code_v1_no_empty_lines":"from math import gcd, ceil\n\nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))\na = [i \/\/ 2 for i in a]\nl = 1\nfor i in a:\n    l *= i \/\/ gcd(l, i)\nfor i in a:\n    if l \/\/ i % 2 == 0:\n        print((0))\n        exit()\nprint((ceil((m \/\/ l) \/ 2)))\n","code_same":false,"relative_loc_diff_percent":8.3333333333,"diff":["-from fractions import gcd","+from math import gcd, ceil","-a = [int(i) \/\/ 2 for i in input().split()]","-x = 1","-for i in range(n):","-    x *= a[i] \/\/ gcd(x, a[i])","+a = list(map(int, input().split()))","+a = [i \/\/ 2 for i in a]","+l = 1","-    if x \/\/ i % 2 == 0:","+    l *= i \/\/ gcd(l, i)","+for i in a:","+    if l \/\/ i % 2 == 0:","-print(((m \/\/ x + 1) \/\/ 2))","+print((ceil((m \/\/ l) \/ 2)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2764406667,"measured_runtime_v1":0.214073961,"runtime_lift":1.2913325159,"key":["s885010221","s420231524"]}
{"user_id":"u716530146","problem_id":"p03038","language":"python","submission_id_v0":"s839494003","submission_id_v1":"s928697183","cpu_time_v0":613,"cpu_time_v1":410,"memory_v0":89216,"memory_v1":43704,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":33.12,"input":"import sys\n\ninput = lambda: sys.stdin.readline()[:-1]\n\nn,m=list(map(int,input().split()))\n\na0=list(map(int,input().split()))\n\ndata=[list(map(int,input().split())) for i in range(m)]\n\nfor i in a0:\n\n\tdata.append([1,i])\n\ndata.sort(key=lambda tup:-tup[1])\n\nans=0\n\nfor num,val in data:\n\n\tif n>=num:\n\n\t\tn-=num\n\n\t\tans+=val*num\n\n\telse:\n\n\t\tans+=val*n\n\n\t\tbreak\n\nprint(ans)\n","target":"#!\/usr\/bin\/env python3\n\nimport sys\n\nfrom collections import Counter\n\ninput = lambda: sys.stdin.readline()[:-1]\n\nsys.setrecursionlimit(10**8)\n\n\n\nans=0\n\nn,m=list(map(int,input().split()))\n\nA=list(map(int,input().split()))\n\nbc=[]\n\nfor i in range(m):\n\n    b,c=list(map(int,input().split()))\n\n    bc.append((c,b))\n\nC=Counter(A)\n\nbc+=list(C.items())\n\nbc.sort(key=lambda tup:-tup[0])\n\n# print(bc)\n\nfor c,b in bc:\n\n    if n>=b:\n\n        n-=b\n\n        ans+=c*b\n\n    else:\n\n        ans+=c*n\n\n        break\n\nprint(ans)\n\n\n","code_v0_loc":17,"code_v1_loc":26,"code_v0_num_chars":357,"code_v1_num_chars":498,"code_v0_no_empty_lines":"import sys\n\ninput = lambda: sys.stdin.readline()[:-1]\nn, m = list(map(int, input().split()))\na0 = list(map(int, input().split()))\ndata = [list(map(int, input().split())) for i in range(m)]\nfor i in a0:\n    data.append([1, i])\ndata.sort(key=lambda tup: -tup[1])\nans = 0\nfor num, val in data:\n    if n >= num:\n        n -= num\n        ans += val * num\n    else:\n        ans += val * n\n        break\nprint(ans)\n","code_v1_no_empty_lines":"#!\/usr\/bin\/env python3\nimport sys\nfrom collections import Counter\n\ninput = lambda: sys.stdin.readline()[:-1]\nsys.setrecursionlimit(10**8)\nans = 0\nn, m = list(map(int, input().split()))\nA = list(map(int, input().split()))\nbc = []\nfor i in range(m):\n    b, c = list(map(int, input().split()))\n    bc.append((c, b))\nC = Counter(A)\nbc += list(C.items())\nbc.sort(key=lambda tup: -tup[0])\n# print(bc)\nfor c, b in bc:\n    if n >= b:\n        n -= b\n        ans += c * b\n    else:\n        ans += c * n\n        break\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":34.6153846154,"diff":["+#!\/usr\/bin\/env python3","+from collections import Counter","+sys.setrecursionlimit(10**8)","+ans = 0","-a0 = list(map(int, input().split()))","-data = [list(map(int, input().split())) for i in range(m)]","-for i in a0:","-    data.append([1, i])","-data.sort(key=lambda tup: -tup[1])","-ans = 0","-for num, val in data:","-    if n >= num:","-        n -= num","-        ans += val * num","+A = list(map(int, input().split()))","+bc = []","+for i in range(m):","+    b, c = list(map(int, input().split()))","+    bc.append((c, b))","+C = Counter(A)","+bc += list(C.items())","+bc.sort(key=lambda tup: -tup[0])","+# print(bc)","+for c, b in bc:","+    if n >= b:","+        n -= b","+        ans += c * b","-        ans += val * n","+        ans += c * n"],"diff_only_import_comment":false,"measured_runtime_v0":0.2703684399,"measured_runtime_v1":0.1342513988,"runtime_lift":2.013896632,"key":["s839494003","s928697183"]}
{"user_id":"u860002137","problem_id":"p03434","language":"python","submission_id_v0":"s569031277","submission_id_v1":"s835944153","cpu_time_v0":154,"cpu_time_v1":29,"memory_v0":12396,"memory_v1":8924,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":81.17,"input":"import numpy as np\n\n\n\nN = int(eval(input()))\n\na = np.array(list(map(int, input().split())))\n\n\n\na.sort()\n\na = a[::-1]\n\n\n\nprint((a[0::2].sum() - a[1::2].sum()))","target":"n = int(eval(input()))\n\narr = list(map(int, input().split()))\n\n\n\narr.sort(reverse=True)\n\n\n\nprint((sum(arr[0::2]) - sum(arr[1::2])))","code_v0_loc":9,"code_v1_loc":6,"code_v0_num_chars":150,"code_v1_num_chars":123,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\na = np.array(list(map(int, input().split())))\na.sort()\na = a[::-1]\nprint((a[0::2].sum() - a[1::2].sum()))\n","code_v1_no_empty_lines":"n = int(eval(input()))\narr = list(map(int, input().split()))\narr.sort(reverse=True)\nprint((sum(arr[0::2]) - sum(arr[1::2])))\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-import numpy as np","-","-N = int(eval(input()))","-a = np.array(list(map(int, input().split())))","-a.sort()","-a = a[::-1]","-print((a[0::2].sum() - a[1::2].sum()))","+n = int(eval(input()))","+arr = list(map(int, input().split()))","+arr.sort(reverse=True)","+print((sum(arr[0::2]) - sum(arr[1::2])))"],"diff_only_import_comment":false,"measured_runtime_v0":1.4327047536,"measured_runtime_v1":0.1933466868,"runtime_lift":7.410030019,"key":["s569031277","s835944153"]}
{"user_id":"u846634344","problem_id":"p03200","language":"python","submission_id_v0":"s951894178","submission_id_v1":"s605042414","cpu_time_v0":58,"cpu_time_v1":51,"memory_v0":5932,"memory_v1":3500,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":12.07,"input":"import sys\n\nsys.setrecursionlimit(10**6)\n\nif sys.platform in (['ios','darwin','win32']):\n\n\tsys.stdin=open('Untitled.txt')\n\ninput = sys.stdin.readline\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return [int(s) for s in input().split()]\n\n\n\ndef main():\n\n\tS = input().rstrip()\n\n\tbcnt = 0\n\n\tA = []\n\n\tfor i in range(len(S)):\n\n\t\tif S[i] == 'B': bcnt += 1\n\n\t\tif S[i] == 'W': A.append(bcnt)\n\n\t\n\n\tprint((sum(A)))\n\n\n\nif __name__ == '__main__':\n\n\tmain()","target":"import sys\n\nsys.setrecursionlimit(10**6)\n\nif sys.platform in (['ios','darwin','win32']):\n\n\tsys.stdin=open('Untitled.txt')\n\ninput = sys.stdin.readline\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return [int(s) for s in input().split()]\n\n\n\ndef main():\n\n\tS = input().rstrip()\n\n\tbcnt = 0\n\n\tans = 0\n\n\tfor i in range(len(S)):\n\n\t\tif S[i] == 'B': bcnt += 1\n\n\t\tif S[i] == 'W': ans += bcnt\n\n\t\n\n\tprint(ans)\n\n\n\nif __name__ == '__main__':\n\n\tmain()","code_v0_loc":20,"code_v1_loc":20,"code_v0_num_chars":439,"code_v1_num_chars":434,"code_v0_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10**6)\nif sys.platform in ([\"ios\", \"darwin\", \"win32\"]):\n    sys.stdin = open(\"Untitled.txt\")\ninput = sys.stdin.readline\n\n\ndef INT():\n    return int(eval(input()))\n\n\ndef MAP():\n    return [int(s) for s in input().split()]\n\n\ndef main():\n    S = input().rstrip()\n    bcnt = 0\n    A = []\n    for i in range(len(S)):\n        if S[i] == \"B\":\n            bcnt += 1\n        if S[i] == \"W\":\n            A.append(bcnt)\n    print((sum(A)))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10**6)\nif sys.platform in ([\"ios\", \"darwin\", \"win32\"]):\n    sys.stdin = open(\"Untitled.txt\")\ninput = sys.stdin.readline\n\n\ndef INT():\n    return int(eval(input()))\n\n\ndef MAP():\n    return [int(s) for s in input().split()]\n\n\ndef main():\n    S = input().rstrip()\n    bcnt = 0\n    ans = 0\n    for i in range(len(S)):\n        if S[i] == \"B\":\n            bcnt += 1\n        if S[i] == \"W\":\n            ans += bcnt\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    A = []","+    ans = 0","-            A.append(bcnt)","-    print((sum(A)))","+            ans += bcnt","+    print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2057990801,"measured_runtime_v1":0.0065612807,"runtime_lift":31.365687324,"key":["s951894178","s605042414"]}
{"user_id":"u981931040","problem_id":"p02873","language":"python","submission_id_v0":"s351782639","submission_id_v1":"s125422304","cpu_time_v0":1362,"cpu_time_v1":407,"memory_v0":22568,"memory_v1":27056,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":70.12,"input":"import numpy as np\n\nS = list(eval(input()))\n\nS_len = len(S)\n\nnum_lst = np.zeros(S_len + 1)\n\nfor i in range(S_len):\n\n    if S[i] == \"<\":\n\n        num_lst[i + 1] = max(num_lst[i] + 1, num_lst[i + 1])\n\n\n\n\n\nfor i in range(S_len - 1, -1 , -1):\n\n    if S[i] == \">\":\n\n        num_lst[i] = max(num_lst[i], num_lst[i + 1] + 1)\n\nprint((int(np.sum(num_lst))))","target":"S = list(eval(input()))\n\nnumList = [0] * (len(S) + 1)\n\nfor i in range(len(S)):\n\n    if S[i] == '<':\n\n        numList[i + 1] = numList[i] + 1\n\n\n\nfor i in range(len(S) - 1 , -1 , -1):\n\n    if S[i] == '>':\n\n        numList[i] = max(numList[i + 1] + 1 ,numList[i])\n\nprint((sum(numList)))","code_v0_loc":13,"code_v1_loc":10,"code_v0_num_chars":340,"code_v1_num_chars":275,"code_v0_no_empty_lines":"import numpy as np\n\nS = list(eval(input()))\nS_len = len(S)\nnum_lst = np.zeros(S_len + 1)\nfor i in range(S_len):\n    if S[i] == \"<\":\n        num_lst[i + 1] = max(num_lst[i] + 1, num_lst[i + 1])\nfor i in range(S_len - 1, -1, -1):\n    if S[i] == \">\":\n        num_lst[i] = max(num_lst[i], num_lst[i + 1] + 1)\nprint((int(np.sum(num_lst))))\n","code_v1_no_empty_lines":"S = list(eval(input()))\nnumList = [0] * (len(S) + 1)\nfor i in range(len(S)):\n    if S[i] == \"<\":\n        numList[i + 1] = numList[i] + 1\nfor i in range(len(S) - 1, -1, -1):\n    if S[i] == \">\":\n        numList[i] = max(numList[i + 1] + 1, numList[i])\nprint((sum(numList)))\n","code_same":false,"relative_loc_diff_percent":23.0769230769,"diff":["-import numpy as np","-","-S_len = len(S)","-num_lst = np.zeros(S_len + 1)","-for i in range(S_len):","+numList = [0] * (len(S) + 1)","+for i in range(len(S)):","-        num_lst[i + 1] = max(num_lst[i] + 1, num_lst[i + 1])","-for i in range(S_len - 1, -1, -1):","+        numList[i + 1] = numList[i] + 1","+for i in range(len(S) - 1, -1, -1):","-        num_lst[i] = max(num_lst[i], num_lst[i + 1] + 1)","-print((int(np.sum(num_lst))))","+        numList[i] = max(numList[i + 1] + 1, numList[i])","+print((sum(numList)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.7631940264,"measured_runtime_v1":0.252567987,"runtime_lift":6.9810669474,"key":["s351782639","s125422304"]}
{"user_id":"u813098295","problem_id":"p02780","language":"python","submission_id_v0":"s187757761","submission_id_v1":"s900380040","cpu_time_v0":568,"cpu_time_v1":432,"memory_v0":111624,"memory_v1":111624,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":23.94,"input":"class SegmentTree:\n\n    seg_len = 1\n\n    node = []\n\n    def __init__(self, n):\n\n        while self.seg_len < n:\n\n            self.seg_len <<= 1\n\n        self.node = [ 0 for _ in range(self.seg_len*2) ]\n\n\n\n    def add(self, idx, v):\n\n        idx += self.seg_len\n\n        self.node[idx] += v\n\n        while True:\n\n            idx \/\/= 2\n\n            if idx == 0:\n\n                break\n\n            self.node[idx] = self.node[idx*2] + self.node[idx*2+1]\n\n\n\n    def sum(self, l, r):\n\n        l += self.seg_len\n\n        r += self.seg_len\n\n        ret = 0\n\n        while l < r:\n\n            if l & 1 == 1:\n\n                ret += self.node[l]\n\n                l += 1\n\n            if r & 1 == 1:\n\n                ret += self.node[r-1]\n\n                r -= 1\n\n            l \/\/= 2; r \/\/= 2;\n\n        return ret\n\n\n\n\n\nn, k = list(map(int, input().split()))\n\np = [ int(x) for x in input().split() ]\n\n\n\nseg_tree = SegmentTree(n)\n\nfor i in range(n):\n\n    seg_tree.add(i, (1+p[i])\/2)\n\n\n\nans = 0\n\nfor i in range(n-k+1):\n\n    ans = max(ans, seg_tree.sum(i, i+k))\n\n\n\nprint(ans)\n","target":"class SegmentTree:\n\n    seg_len = 1\n\n    node = []\n\n    def __init__(self, n):\n\n        while self.seg_len < n:\n\n            self.seg_len <<= 1\n\n        self.node = [ 0 for _ in range(self.seg_len*2) ]\n\n\n\n    def add(self, idx, v):\n\n        idx += self.seg_len\n\n        self.node[idx] += v\n\n        while True:\n\n            idx >>= 1\n\n            if idx == 0:\n\n                break\n\n            self.node[idx] = self.node[idx*2] + self.node[idx*2+1]\n\n\n\n    def sum(self, l, r):\n\n        l += self.seg_len\n\n        r += self.seg_len\n\n        ret = 0\n\n        while l < r:\n\n            if l & 1 == 1:\n\n                ret += self.node[l]\n\n                l += 1\n\n            if r & 1 == 1:\n\n                ret += self.node[r-1]\n\n                r -= 1\n\n            l >>= 1; r >>= 1;\n\n        return ret\n\n\n\n\n\nn, k = list(map(int, input().split()))\n\np = [ int(x) for x in input().split() ]\n\n\n\nseg_tree = SegmentTree(n)\n\nfor i in range(n):\n\n    seg_tree.add(i, (1+p[i])\/2)\n\n\n\nans = 0\n\nfor i in range(n-k+1):\n\n    ans = max(ans, seg_tree.sum(i, i+k))\n\n\n\nprint(ans)\n","code_v0_loc":44,"code_v1_loc":44,"code_v0_num_chars":1055,"code_v1_num_chars":1055,"code_v0_no_empty_lines":"class SegmentTree:\n    seg_len = 1\n    node = []\n\n    def __init__(self, n):\n        while self.seg_len < n:\n            self.seg_len <<= 1\n        self.node = [0 for _ in range(self.seg_len * 2)]\n\n    def add(self, idx, v):\n        idx += self.seg_len\n        self.node[idx] += v\n        while True:\n            idx \/\/= 2\n            if idx == 0:\n                break\n            self.node[idx] = self.node[idx * 2] + self.node[idx * 2 + 1]\n\n    def sum(self, l, r):\n        l += self.seg_len\n        r += self.seg_len\n        ret = 0\n        while l < r:\n            if l & 1 == 1:\n                ret += self.node[l]\n                l += 1\n            if r & 1 == 1:\n                ret += self.node[r - 1]\n                r -= 1\n            l \/\/= 2\n            r \/\/= 2\n        return ret\n\n\nn, k = list(map(int, input().split()))\np = [int(x) for x in input().split()]\nseg_tree = SegmentTree(n)\nfor i in range(n):\n    seg_tree.add(i, (1 + p[i]) \/ 2)\nans = 0\nfor i in range(n - k + 1):\n    ans = max(ans, seg_tree.sum(i, i + k))\nprint(ans)\n","code_v1_no_empty_lines":"class SegmentTree:\n    seg_len = 1\n    node = []\n\n    def __init__(self, n):\n        while self.seg_len < n:\n            self.seg_len <<= 1\n        self.node = [0 for _ in range(self.seg_len * 2)]\n\n    def add(self, idx, v):\n        idx += self.seg_len\n        self.node[idx] += v\n        while True:\n            idx >>= 1\n            if idx == 0:\n                break\n            self.node[idx] = self.node[idx * 2] + self.node[idx * 2 + 1]\n\n    def sum(self, l, r):\n        l += self.seg_len\n        r += self.seg_len\n        ret = 0\n        while l < r:\n            if l & 1 == 1:\n                ret += self.node[l]\n                l += 1\n            if r & 1 == 1:\n                ret += self.node[r - 1]\n                r -= 1\n            l >>= 1\n            r >>= 1\n        return ret\n\n\nn, k = list(map(int, input().split()))\np = [int(x) for x in input().split()]\nseg_tree = SegmentTree(n)\nfor i in range(n):\n    seg_tree.add(i, (1 + p[i]) \/ 2)\nans = 0\nfor i in range(n - k + 1):\n    ans = max(ans, seg_tree.sum(i, i + k))\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-            idx \/\/= 2","+            idx >>= 1","-            l \/\/= 2","-            r \/\/= 2","+            l >>= 1","+            r >>= 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.3662393868,"measured_runtime_v1":0.2843342848,"runtime_lift":1.2880591838,"key":["s187757761","s900380040"]}
{"user_id":"u930705402","problem_id":"p03723","language":"python","submission_id_v0":"s632911465","submission_id_v1":"s017275362","cpu_time_v0":1018,"cpu_time_v1":18,"memory_v0":3064,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":98.23,"input":"import time\n\nt=time.time()\n\nA,B,C=list(map(int,input().split()))\n\ncnt=0\n\nwhile(A%2==B%2==C%2==0):\n\n    a,b,c=A,B,C\n\n    A=b\/\/2+c\/\/2;B=a\/\/2+c\/\/2;C=a\/\/2+b\/\/2\n\n    cnt+=1\n\n    if(time.time()-t>=1):\n\n        print((-1))\n\n        exit()\n\nprint(cnt)","target":"A,B,C=list(map(int,input().split()))\n\ncnt=0\n\nif(A==B==C):\n\n    if A%2!=0:\n\n        print((0))\n\n    else:\n\n        print((-1))\n\n    exit()\n\nwhile(A%2==B%2==C%2==0):\n\n    a,b,c=A,B,C\n\n    A=b\/\/2+c\/\/2;B=a\/\/2+c\/\/2;C=a\/\/2+b\/\/2\n\n    cnt+=1\n\nprint(cnt)","code_v0_loc":12,"code_v1_loc":13,"code_v0_num_chars":235,"code_v1_num_chars":235,"code_v0_no_empty_lines":"import time\n\nt = time.time()\nA, B, C = list(map(int, input().split()))\ncnt = 0\nwhile A % 2 == B % 2 == C % 2 == 0:\n    a, b, c = A, B, C\n    A = b \/\/ 2 + c \/\/ 2\n    B = a \/\/ 2 + c \/\/ 2\n    C = a \/\/ 2 + b \/\/ 2\n    cnt += 1\n    if time.time() - t >= 1:\n        print((-1))\n        exit()\nprint(cnt)\n","code_v1_no_empty_lines":"A, B, C = list(map(int, input().split()))\ncnt = 0\nif A == B == C:\n    if A % 2 != 0:\n        print((0))\n    else:\n        print((-1))\n    exit()\nwhile A % 2 == B % 2 == C % 2 == 0:\n    a, b, c = A, B, C\n    A = b \/\/ 2 + c \/\/ 2\n    B = a \/\/ 2 + c \/\/ 2\n    C = a \/\/ 2 + b \/\/ 2\n    cnt += 1\nprint(cnt)\n","code_same":false,"relative_loc_diff_percent":7.6923076923,"diff":["-import time","-","-t = time.time()","+if A == B == C:","+    if A % 2 != 0:","+        print((0))","+    else:","+        print((-1))","+    exit()","-    if time.time() - t >= 1:","-        print((-1))","-        exit()"],"diff_only_import_comment":false,"measured_runtime_v0":0.4561348832,"measured_runtime_v1":0.2831880744,"runtime_lift":1.6107136015,"key":["s632911465","s017275362"]}
{"user_id":"u780475861","problem_id":"p03416","language":"python","submission_id_v0":"s789877064","submission_id_v1":"s762526319","cpu_time_v0":111,"cpu_time_v1":17,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":84.68,"input":"a,b = list(map(int, input().split()))\n\nn = 0\n\nfor i in range(a, b + 1):\n\n    f = True\n\n    s = str(i)\n\n    l = len(s)\n\n    for j in range(l\/\/2 + 1):\n\n        if s[j] != s[- j - 1]:\n\n            f = False\n\n            break\n\n    if f:\n\n        n += 1\n\nprint(n)","target":"a,b = list(map(int, input().split()))\n\nn = 0\n\nfor i in range(1, 10):\n\n    for j in range(10):\n\n        for k in range(10):\n\n            s = 10000 * i + 1000 * j + 100 * k + 10 * j + i\n\n            if a <= s <= b:\n\n                n += 1\n\nprint(n)","code_v0_loc":13,"code_v1_loc":9,"code_v0_num_chars":253,"code_v1_num_chars":240,"code_v0_no_empty_lines":"a, b = list(map(int, input().split()))\nn = 0\nfor i in range(a, b + 1):\n    f = True\n    s = str(i)\n    l = len(s)\n    for j in range(l \/\/ 2 + 1):\n        if s[j] != s[-j - 1]:\n            f = False\n            break\n    if f:\n        n += 1\nprint(n)\n","code_v1_no_empty_lines":"a, b = list(map(int, input().split()))\nn = 0\nfor i in range(1, 10):\n    for j in range(10):\n        for k in range(10):\n            s = 10000 * i + 1000 * j + 100 * k + 10 * j + i\n            if a <= s <= b:\n                n += 1\nprint(n)\n","code_same":false,"relative_loc_diff_percent":30.7692307692,"diff":["-for i in range(a, b + 1):","-    f = True","-    s = str(i)","-    l = len(s)","-    for j in range(l \/\/ 2 + 1):","-        if s[j] != s[-j - 1]:","-            f = False","-            break","-    if f:","-        n += 1","+for i in range(1, 10):","+    for j in range(10):","+        for k in range(10):","+            s = 10000 * i + 1000 * j + 100 * k + 10 * j + i","+            if a <= s <= b:","+                n += 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.319382349,"measured_runtime_v1":0.1601409102,"runtime_lift":1.99438325,"key":["s789877064","s762526319"]}
{"user_id":"u021548497","problem_id":"p03723","language":"python","submission_id_v0":"s378337044","submission_id_v1":"s805175233","cpu_time_v0":287,"cpu_time_v1":17,"memory_v0":18992,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":94.08,"input":"import numpy as np\n\ncookies = np.array([int(x) for x in input().split()])\n\n\n\nif any(cookies%2):\n\n  ans = 0\n\nelif cookies[0] == cookies[1] == cookies[2]:\n\n  ans = -1\n\nelse:\n\n  ans = 0\n\n  while True:\n\n    if not any(cookies%2):\n\n      cookies = cookies\/\/2\n\n      ans += 1\n\n      continue\n\n    if all(cookies%2):\n\n      ans += 1\n\n    break\n\nprint(ans)","target":"a, b, c = list(map(int, input().split()))\n\nif a == b == c and a%2 == 0:\n\n  print((-1))\n\nelif a%2 or b%2 or c%2:\n\n  print((0))\n\nelse:\n\n  ans = 0\n\n  while a%2 == b%2 == c%2 == 0:\n\n    a, b, c = (b+c)\/\/2, (a+c)\/\/2, (a+b)\/\/2\n\n    ans += 1\n\n  print(ans)","code_v0_loc":18,"code_v1_loc":11,"code_v0_num_chars":348,"code_v1_num_chars":238,"code_v0_no_empty_lines":"import numpy as np\n\ncookies = np.array([int(x) for x in input().split()])\nif any(cookies % 2):\n    ans = 0\nelif cookies[0] == cookies[1] == cookies[2]:\n    ans = -1\nelse:\n    ans = 0\n    while True:\n        if not any(cookies % 2):\n            cookies = cookies \/\/ 2\n            ans += 1\n            continue\n        if all(cookies % 2):\n            ans += 1\n        break\nprint(ans)\n","code_v1_no_empty_lines":"a, b, c = list(map(int, input().split()))\nif a == b == c and a % 2 == 0:\n    print((-1))\nelif a % 2 or b % 2 or c % 2:\n    print((0))\nelse:\n    ans = 0\n    while a % 2 == b % 2 == c % 2 == 0:\n        a, b, c = (b + c) \/\/ 2, (a + c) \/\/ 2, (a + b) \/\/ 2\n        ans += 1\n    print(ans)\n","code_same":false,"relative_loc_diff_percent":38.8888888889,"diff":["-import numpy as np","-","-cookies = np.array([int(x) for x in input().split()])","-if any(cookies % 2):","-    ans = 0","-elif cookies[0] == cookies[1] == cookies[2]:","-    ans = -1","+a, b, c = list(map(int, input().split()))","+if a == b == c and a % 2 == 0:","+    print((-1))","+elif a % 2 or b % 2 or c % 2:","+    print((0))","-    while True:","-        if not any(cookies % 2):","-            cookies = cookies \/\/ 2","-            ans += 1","-            continue","-        if all(cookies % 2):","-            ans += 1","-        break","-print(ans)","+    while a % 2 == b % 2 == c % 2 == 0:","+        a, b, c = (b + c) \/\/ 2, (a + c) \/\/ 2, (a + b) \/\/ 2","+        ans += 1","+    print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.4413467925,"measured_runtime_v1":0.1942887537,"runtime_lift":7.4185806671,"key":["s378337044","s805175233"]}
{"user_id":"u968166680","problem_id":"p03752","language":"python","submission_id_v0":"s863090450","submission_id_v1":"s059435285","cpu_time_v0":32,"cpu_time_v1":24,"memory_v0":3064,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":25.0,"input":"import sys\n\n\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = 1 << 60\n\n\n\n\n\ndef main():\n\n    N, K, *A = list(map(int, read().split()))\n\n\n\n    ans = INF\n\n    for bit in range(1 << N):\n\n        if (not (bit & 1)) or bin(bit).count('1') != K:\n\n            continue\n\n\n\n        total = 0\n\n        max_height = A[0]\n\n        for i, a in enumerate(A[1:], 1):\n\n            if a <= max_height:\n\n                if bit & (1 << i):\n\n                    total += max_height - a + 1\n\n                    max_height += 1\n\n            else:\n\n                max_height = a\n\n\n\n        if ans > total:\n\n            ans = total\n\n\n\n    print(ans)\n\n\n\n    return\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"import sys\n\nfrom itertools import combinations\n\n\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = 1 << 60\n\n\n\n\n\ndef main():\n\n    N, K, *A = list(map(int, read().split()))\n\n\n\n    ans = INF\n\n    for comb in combinations(list(range(1, N)), K - 1):\n\n        included = [False] * N\n\n        for i in comb:\n\n            included[i] = True\n\n\n\n        total = 0\n\n        max_height = A[0]\n\n        for i, a in enumerate(A[1:], 1):\n\n            if a <= max_height:\n\n                if included[i]:\n\n                    total += max_height - a + 1\n\n                    max_height += 1\n\n            else:\n\n                max_height = a\n\n\n\n        if ans > total:\n\n            ans = total\n\n\n\n    print(ans)\n\n\n\n    return\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":37,"code_v1_loc":39,"code_v0_num_chars":756,"code_v1_num_chars":818,"code_v0_no_empty_lines":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10**9)\nINF = 1 << 60\n\n\ndef main():\n    N, K, *A = list(map(int, read().split()))\n    ans = INF\n    for bit in range(1 << N):\n        if (not (bit & 1)) or bin(bit).count(\"1\") != K:\n            continue\n        total = 0\n        max_height = A[0]\n        for i, a in enumerate(A[1:], 1):\n            if a <= max_height:\n                if bit & (1 << i):\n                    total += max_height - a + 1\n                    max_height += 1\n            else:\n                max_height = a\n        if ans > total:\n            ans = total\n    print(ans)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\nfrom itertools import combinations\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10**9)\nINF = 1 << 60\n\n\ndef main():\n    N, K, *A = list(map(int, read().split()))\n    ans = INF\n    for comb in combinations(list(range(1, N)), K - 1):\n        included = [False] * N\n        for i in comb:\n            included[i] = True\n        total = 0\n        max_height = A[0]\n        for i, a in enumerate(A[1:], 1):\n            if a <= max_height:\n                if included[i]:\n                    total += max_height - a + 1\n                    max_height += 1\n            else:\n                max_height = a\n        if ans > total:\n            ans = total\n    print(ans)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":5.1282051282,"diff":["+from itertools import combinations","-    for bit in range(1 << N):","-        if (not (bit & 1)) or bin(bit).count(\"1\") != K:","-            continue","+    for comb in combinations(list(range(1, N)), K - 1):","+        included = [False] * N","+        for i in comb:","+            included[i] = True","-                if bit & (1 << i):","+                if included[i]:"],"diff_only_import_comment":false,"measured_runtime_v0":0.4393207397,"measured_runtime_v1":0.2213684809,"runtime_lift":1.9845677122,"key":["s863090450","s059435285"]}
{"user_id":"u347600233","problem_id":"p02952","language":"python","submission_id_v0":"s073920837","submission_id_v1":"s426081507","cpu_time_v0":75,"cpu_time_v1":58,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":22.67,"input":"import math\n\nn = int(eval(input()))\n\ncnt = 0\n\nfor i in range(1, n + 1):\n\n    if math.floor(math.log10(i) + 1) % 2:\n\n        cnt += 1\n\nprint(cnt)","target":"n = int(eval(input()))\n\ncnt = 0\n\nfor i in range(1, n + 1):\n\n    if len(str(i)) % 2:\n\n        cnt += 1\n\nprint(cnt)","code_v0_loc":7,"code_v1_loc":6,"code_v0_num_chars":138,"code_v1_num_chars":107,"code_v0_no_empty_lines":"import math\n\nn = int(eval(input()))\ncnt = 0\nfor i in range(1, n + 1):\n    if math.floor(math.log10(i) + 1) % 2:\n        cnt += 1\nprint(cnt)\n","code_v1_no_empty_lines":"n = int(eval(input()))\ncnt = 0\nfor i in range(1, n + 1):\n    if len(str(i)) % 2:\n        cnt += 1\nprint(cnt)\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["-import math","-","-    if math.floor(math.log10(i) + 1) % 2:","+    if len(str(i)) % 2:"],"diff_only_import_comment":false,"measured_runtime_v0":0.3655955575,"measured_runtime_v1":0.2850201683,"runtime_lift":1.282700658,"key":["s073920837","s426081507"]}
{"user_id":"u423966555","problem_id":"p02773","language":"python","submission_id_v0":"s252908207","submission_id_v1":"s096619437","cpu_time_v0":859,"cpu_time_v1":768,"memory_v0":46080,"memory_v1":48888,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.59,"input":"from collections import defaultdict\n\nn = int(eval(input()))\n\n\n\nd = defaultdict(int)\n\nfor _ in range(n):\n\n    key = eval(input())\n\n    d[key] += 1\n\n\n\ndict = sorted(list(d.items()), key=lambda x:x[1], reverse=True)\n\nmax_v = max(d.values())\n\n\n\ndict_li = []\n\nfor a in dict:\n\n    if a[1]==max_v:\n\n        dict_li.append(a[0])\n\n\n\ndict_li.sort()\n\nfor s in dict_li:\n\n    print(s)\n","target":"from collections import defaultdict\n\nn = int(input())\n\n\n\nd = defaultdict(int)\n\nfor _ in range(n):\n\n    key = input()\n\n    d[key] += 1\n\n\n\ndict = sorted(d.items(), key=lambda x:x[1], reverse=True)\n\nmax_v = max(d.values())\n\n\n\ndict_li = []\n\nfor a in dict:\n\n    if a[1]==max_v:\n\n        dict_li.append(a[0])\n\n\n\ndict_li.sort()\n\nprint(*dict_li, sep='\\n')\n","code_v0_loc":19,"code_v1_loc":18,"code_v0_num_chars":354,"code_v1_num_chars":348,"code_v0_no_empty_lines":"from collections import defaultdict\n\nn = int(eval(input()))\nd = defaultdict(int)\nfor _ in range(n):\n    key = eval(input())\n    d[key] += 1\ndict = sorted(list(d.items()), key=lambda x: x[1], reverse=True)\nmax_v = max(d.values())\ndict_li = []\nfor a in dict:\n    if a[1] == max_v:\n        dict_li.append(a[0])\ndict_li.sort()\nfor s in dict_li:\n    print(s)\n","code_v1_no_empty_lines":"from collections import defaultdict\n\nn = int(input())\nd = defaultdict(int)\nfor _ in range(n):\n    key = input()\n    d[key] += 1\ndict = sorted(d.items(), key=lambda x: x[1], reverse=True)\nmax_v = max(d.values())\ndict_li = []\nfor a in dict:\n    if a[1] == max_v:\n        dict_li.append(a[0])\ndict_li.sort()\nprint(*dict_li, sep=\"\\n\")\n","code_same":false,"relative_loc_diff_percent":5.2631578947,"diff":["-n = int(eval(input()))","+n = int(input())","-    key = eval(input())","+    key = input()","-dict = sorted(list(d.items()), key=lambda x: x[1], reverse=True)","+dict = sorted(d.items(), key=lambda x: x[1], reverse=True)","-for s in dict_li:","-    print(s)","+print(*dict_li, sep=\"\\n\")"],"diff_only_import_comment":false,"measured_runtime_v0":0.2625157752,"measured_runtime_v1":0.2092528682,"runtime_lift":1.2545384801,"key":["s252908207","s096619437"]}
{"user_id":"u933622697","problem_id":"p03273","language":"python","submission_id_v0":"s043120968","submission_id_v1":"s898487040","cpu_time_v0":153,"cpu_time_v1":19,"memory_v0":12484,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.58,"input":"# Use numpy if you use column operation\n\nimport numpy as np\n\nh, w =  list(map(int, input().split()))\n\n\n\n# Get grid colors\n\ngird_colors = np.array([])\n\nfor _ in range(h):\n\n    tmp_row = np.array(list(eval(input())))\n\n    if \"#\" in tmp_row: # If the row includes black\n\n        gird_colors = np.concatenate((gird_colors, tmp_row))\n\ngird_colors = gird_colors.reshape(-1, w)\n\n\n\n# Search and delete white line\n\ndel_count = 0\n\nfor wi in range(w):\n\n    if \"#\" not in gird_colors[:, wi - del_count]:\n\n        gird_colors = np.delete(gird_colors, wi - del_count, 1)\n\n        del_count += 1\n\n\n\n# Print result\n\nfor line_val in gird_colors:\n\n    print((\"\".join(line_val))) ","target":"h, w = list(map(int, input().split()))\n\ngrid = [list(eval(input())) for _ in range(h)]\n\n\n\n# Filtering the data if any \"#\" are existed in the each row or col\n\n# Usage: filter(lambda row: <filtering condition>, grid or zip(*grid)) \n\n# If true, the row is not be deleted\n\n# (Do not use if statement!)\n\nrow_compressed_grid = list([row for row in grid if any(x == \"#\" for x in row)])\n\ncompressed_grid = list([col for col in zip(*row_compressed_grid) if any(x == \"#\" for x in col)])\n\n# list -> string and out\n\nfor row in zip(*compressed_grid):\n\n    print((\"\".join(row)))","code_v0_loc":22,"code_v1_loc":12,"code_v0_num_chars":647,"code_v1_num_chars":552,"code_v0_no_empty_lines":"# Use numpy if you use column operation\nimport numpy as np\n\nh, w = list(map(int, input().split()))\n# Get grid colors\ngird_colors = np.array([])\nfor _ in range(h):\n    tmp_row = np.array(list(eval(input())))\n    if \"#\" in tmp_row:  # If the row includes black\n        gird_colors = np.concatenate((gird_colors, tmp_row))\ngird_colors = gird_colors.reshape(-1, w)\n# Search and delete white line\ndel_count = 0\nfor wi in range(w):\n    if \"#\" not in gird_colors[:, wi - del_count]:\n        gird_colors = np.delete(gird_colors, wi - del_count, 1)\n        del_count += 1\n# Print result\nfor line_val in gird_colors:\n    print((\"\".join(line_val)))\n","code_v1_no_empty_lines":"h, w = list(map(int, input().split()))\ngrid = [list(eval(input())) for _ in range(h)]\n# Filtering the data if any \"#\" are existed in the each row or col\n# Usage: filter(lambda row: <filtering condition>, grid or zip(*grid))\n# If true, the row is not be deleted\n# (Do not use if statement!)\nrow_compressed_grid = list([row for row in grid if any(x == \"#\" for x in row)])\ncompressed_grid = list(\n    [col for col in zip(*row_compressed_grid) if any(x == \"#\" for x in col)]\n)\n# list -> string and out\nfor row in zip(*compressed_grid):\n    print((\"\".join(row)))\n","code_same":false,"relative_loc_diff_percent":45.4545454545,"diff":["-# Use numpy if you use column operation","-import numpy as np","-","-# Get grid colors","-gird_colors = np.array([])","-for _ in range(h):","-    tmp_row = np.array(list(eval(input())))","-    if \"#\" in tmp_row:  # If the row includes black","-        gird_colors = np.concatenate((gird_colors, tmp_row))","-gird_colors = gird_colors.reshape(-1, w)","-# Search and delete white line","-del_count = 0","-for wi in range(w):","-    if \"#\" not in gird_colors[:, wi - del_count]:","-        gird_colors = np.delete(gird_colors, wi - del_count, 1)","-        del_count += 1","-# Print result","-for line_val in gird_colors:","-    print((\"\".join(line_val)))","+grid = [list(eval(input())) for _ in range(h)]","+# Filtering the data if any \"#\" are existed in the each row or col","+# Usage: filter(lambda row: <filtering condition>, grid or zip(*grid))","+# If true, the row is not be deleted","+# (Do not use if statement!)","+row_compressed_grid = list([row for row in grid if any(x == \"#\" for x in row)])","+compressed_grid = list(","+    [col for col in zip(*row_compressed_grid) if any(x == \"#\" for x in col)]","+)","+# list -> string and out","+for row in zip(*compressed_grid):","+    print((\"\".join(row)))"],"diff_only_import_comment":false,"measured_runtime_v0":2.0488239424,"measured_runtime_v1":0.3252195714,"runtime_lift":6.2998174844,"key":["s043120968","s898487040"]}
{"user_id":"u867826040","problem_id":"p03721","language":"python","submission_id_v0":"s719602965","submission_id_v1":"s173376033","cpu_time_v0":194,"cpu_time_v1":151,"memory_v0":76876,"memory_v1":16524,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":22.16,"input":"n,k = list(map(int,input().split()))\n\nl = [0]*(10**5+1)\n\nfor i in range(n):\n\n    ai,bi = list(map(int,input().split()))\n\n    l[ai]+=bi\n\nfor index,i in enumerate(l):\n\n    if i:\n\n        k-=i\n\n        if k<=0:\n\n            break\n\nprint(index)","target":"from collections import defaultdict\n\nfrom sys import stdin\n\ninput = stdin.readline\n\nd = defaultdict(int)\n\nn,k = list(map(int,input().split()))\n\nfor _ in range(n):\n\n    a,b = list(map(int,input().split()))\n\n    d[a]+=b\n\nfor key in sorted(d.keys()):\n\n    v = d[key]\n\n    k-=v\n\n    if k <= 0:\n\n        break\n\nprint(key)","code_v0_loc":11,"code_v1_loc":14,"code_v0_num_chars":228,"code_v1_num_chars":304,"code_v0_no_empty_lines":"n, k = list(map(int, input().split()))\nl = [0] * (10**5 + 1)\nfor i in range(n):\n    ai, bi = list(map(int, input().split()))\n    l[ai] += bi\nfor index, i in enumerate(l):\n    if i:\n        k -= i\n        if k <= 0:\n            break\nprint(index)\n","code_v1_no_empty_lines":"from collections import defaultdict\nfrom sys import stdin\n\ninput = stdin.readline\nd = defaultdict(int)\nn, k = list(map(int, input().split()))\nfor _ in range(n):\n    a, b = list(map(int, input().split()))\n    d[a] += b\nfor key in sorted(d.keys()):\n    v = d[key]\n    k -= v\n    if k <= 0:\n        break\nprint(key)\n","code_same":false,"relative_loc_diff_percent":21.4285714286,"diff":["+from collections import defaultdict","+from sys import stdin","+","+input = stdin.readline","+d = defaultdict(int)","-l = [0] * (10**5 + 1)","-for i in range(n):","-    ai, bi = list(map(int, input().split()))","-    l[ai] += bi","-for index, i in enumerate(l):","-    if i:","-        k -= i","-        if k <= 0:","-            break","-print(index)","+for _ in range(n):","+    a, b = list(map(int, input().split()))","+    d[a] += b","+for key in sorted(d.keys()):","+    v = d[key]","+    k -= v","+    if k <= 0:","+        break","+print(key)"],"diff_only_import_comment":false,"measured_runtime_v0":0.5501943195,"measured_runtime_v1":0.4111647634,"runtime_lift":1.3381358727,"key":["s719602965","s173376033"]}
{"user_id":"u271934630","problem_id":"p03416","language":"python","submission_id_v0":"s986292698","submission_id_v1":"s820058882","cpu_time_v0":225,"cpu_time_v1":186,"memory_v0":40684,"memory_v1":40300,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.33,"input":"A, B = list(map(int, input().split()))\n\ncnt = 0\n\nfor i in range(A, B+1):\n\n    l = list(str(i))\n\n\n\n    if l == list(reversed(l)):\n\n        cnt += 1\n\n\n\nprint(cnt)\n","target":"A, B = list(map(int, input().split()))\n\ncnt = 0\n\nfor i in range(A, B+1):\n\n    l = str(i)\n\n    if l == l[::-1]:\n\n        cnt += 1\n\n\n\nprint(cnt)\n","code_v0_loc":9,"code_v1_loc":8,"code_v0_num_chars":155,"code_v1_num_chars":137,"code_v0_no_empty_lines":"A, B = list(map(int, input().split()))\ncnt = 0\nfor i in range(A, B + 1):\n    l = list(str(i))\n    if l == list(reversed(l)):\n        cnt += 1\nprint(cnt)\n","code_v1_no_empty_lines":"A, B = list(map(int, input().split()))\ncnt = 0\nfor i in range(A, B + 1):\n    l = str(i)\n    if l == l[::-1]:\n        cnt += 1\nprint(cnt)\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["-    l = list(str(i))","-    if l == list(reversed(l)):","+    l = str(i)","+    if l == l[::-1]:"],"diff_only_import_comment":false,"measured_runtime_v0":0.3457211592,"measured_runtime_v1":0.2683477015,"runtime_lift":1.2883328503,"key":["s986292698","s820058882"]}
{"user_id":"u680851063","problem_id":"p03363","language":"python","submission_id_v0":"s954809041","submission_id_v1":"s284059915","cpu_time_v0":905,"cpu_time_v1":166,"memory_v0":44692,"memory_v1":44492,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":81.66,"input":"n = int(eval(input()))\n\nary = list(map(int, input().split()))\n\n#print(n,ary)\n\n\n\nary_2 = [ary[0]]\n\nfor i in range(1, n):\n\n    ary_2.append(ary[i] + ary_2[i-1])\n\nary_2 = [0] + ary_2\n\n#print(ary_2)\n\n\n\nfrom collections import Counter\n\nc = Counter(ary_2)\n\nv = (list(c.values()))\n\n#print(v)\n\n\n\nfrom math import factorial\n\ndef combinations_count(n, r):\n\n    return factorial(n) \/\/ (factorial(n - r) * factorial(r))\n\n\n\nans = 0\n\nfor j in v:\n\n    if j >1:\n\n        ans += combinations_count(j,2)\n\n\n\nprint(ans)","target":"n = int(eval(input()))\n\nary = list(map(int, input().split()))\n\n#print(n,ary)\n\n\n\nary_2 = [ary[0]]\n\nfor i in range(1, n):\n\n    ary_2.append(ary[i] + ary_2[i-1])\n\nary_2 = [0] + ary_2\n\n#print(ary_2)\n\n\n\nfrom collections import Counter\n\nc = Counter(ary_2)\n\nv = (list(c.values()))\n\n#print(v)\n\n\n\nans = 0\n\nfor j in v:\n\n    if j >1:\n\n        ans += j * (j-1) \/\/ 2\n\n\n\nprint(ans)\n","code_v0_loc":25,"code_v1_loc":21,"code_v0_num_chars":487,"code_v1_num_chars":356,"code_v0_no_empty_lines":"n = int(eval(input()))\nary = list(map(int, input().split()))\n# print(n,ary)\nary_2 = [ary[0]]\nfor i in range(1, n):\n    ary_2.append(ary[i] + ary_2[i - 1])\nary_2 = [0] + ary_2\n# print(ary_2)\nfrom collections import Counter\n\nc = Counter(ary_2)\nv = list(c.values())\n# print(v)\nfrom math import factorial\n\n\ndef combinations_count(n, r):\n    return factorial(n) \/\/ (factorial(n - r) * factorial(r))\n\n\nans = 0\nfor j in v:\n    if j > 1:\n        ans += combinations_count(j, 2)\nprint(ans)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nary = list(map(int, input().split()))\n# print(n,ary)\nary_2 = [ary[0]]\nfor i in range(1, n):\n    ary_2.append(ary[i] + ary_2[i - 1])\nary_2 = [0] + ary_2\n# print(ary_2)\nfrom collections import Counter\n\nc = Counter(ary_2)\nv = list(c.values())\n# print(v)\nans = 0\nfor j in v:\n    if j > 1:\n        ans += j * (j - 1) \/\/ 2\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":16.0,"diff":["-from math import factorial","-","-","-def combinations_count(n, r):","-    return factorial(n) \/\/ (factorial(n - r) * factorial(r))","-","-","-        ans += combinations_count(j, 2)","+        ans += j * (j - 1) \/\/ 2"],"diff_only_import_comment":false,"measured_runtime_v0":0.2075043974,"measured_runtime_v1":0.0060842175,"runtime_lift":34.1053546165,"key":["s954809041","s284059915"]}
{"user_id":"u437215432","problem_id":"p02983","language":"python","submission_id_v0":"s509898718","submission_id_v1":"s212066250","cpu_time_v0":170,"cpu_time_v1":37,"memory_v0":12504,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":78.24,"input":"import numpy as np\n\n\n\ndef ABC133C(l, r):\n\n    Min = np.inf\n\n    for i in range(l, r):\n\n        for j in range(i+1, r+1):\n\n            a = (i * j) % 2019\n\n            if a < Min:\n\n                Min = a\n\n                if a == 0: # \u3053\u3053\u306b\u6ce8\u76ee\n\n                    print(Min)\n\n                    return\n\n    print(Min)\n\n\n\nl, r = list(map(int, input().split()))\n\nABC133C(l, r)\n","target":"def ABC133C(l, r):\n\n    Min = 1e10\n\n    for i in range(l, r):\n\n        for j in range(i+1, r+1):\n\n            a = (i * j) % 2019\n\n            if a < Min:\n\n                Min = a\n\n                if a == 0: # \u3053\u3053\u306b\u6ce8\u76ee\n\n                    print(Min)\n\n                    return\n\n    print(Min)\n\n\n\nl, r = list(map(int, input().split()))\n\nABC133C(l, r)\n","code_v0_loc":16,"code_v1_loc":14,"code_v0_num_chars":366,"code_v1_num_chars":342,"code_v0_no_empty_lines":"import numpy as np\n\n\ndef ABC133C(l, r):\n    Min = np.inf\n    for i in range(l, r):\n        for j in range(i + 1, r + 1):\n            a = (i * j) % 2019\n            if a < Min:\n                Min = a\n                if a == 0:  # \u3053\u3053\u306b\u6ce8\u76ee\n                    print(Min)\n                    return\n    print(Min)\n\n\nl, r = list(map(int, input().split()))\nABC133C(l, r)\n","code_v1_no_empty_lines":"def ABC133C(l, r):\n    Min = 1e10\n    for i in range(l, r):\n        for j in range(i + 1, r + 1):\n            a = (i * j) % 2019\n            if a < Min:\n                Min = a\n                if a == 0:  # \u3053\u3053\u306b\u6ce8\u76ee\n                    print(Min)\n                    return\n    print(Min)\n\n\nl, r = list(map(int, input().split()))\nABC133C(l, r)\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-import numpy as np","-","-","-    Min = np.inf","+    Min = 1e10"],"diff_only_import_comment":false,"measured_runtime_v0":3.2830341155,"measured_runtime_v1":0.4719189459,"runtime_lift":6.956775403,"key":["s509898718","s212066250"]}
{"user_id":"u761320129","problem_id":"p02792","language":"python","submission_id_v0":"s858070624","submission_id_v1":"s144947075","cpu_time_v0":459,"cpu_time_v1":184,"memory_v0":3064,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":59.91,"input":"N = int(eval(input()))\n\nmem = [[0]*10 for i in range(10)]\n\n\n\nfor i in range(1,N+1):\n\n    a = int(str(i)[0])\n\n    b = int(str(i)[-1])\n\n    mem[a][b] += 1\n\n\n\nans = 0\n\nfor i in range(1,N+1):\n\n    a = int(str(i)[0])\n\n    b = int(str(i)[-1])\n\n    ans += mem[b][a]\n\nprint(ans)","target":"N = int(eval(input()))\n\n\n\nd = [[0]*10 for i in range(10)]\n\nfor n in range(1,N+1):\n\n    s = str(n)\n\n    d[int(s[0])][int(s[-1])] += 1\n\nans = 0\n\nfor i in range(10):\n\n    for j in range(10):\n\n        ans += d[i][j] * d[j][i]\n\nprint(ans)","code_v0_loc":14,"code_v1_loc":11,"code_v0_num_chars":264,"code_v1_num_chars":227,"code_v0_no_empty_lines":"N = int(eval(input()))\nmem = [[0] * 10 for i in range(10)]\nfor i in range(1, N + 1):\n    a = int(str(i)[0])\n    b = int(str(i)[-1])\n    mem[a][b] += 1\nans = 0\nfor i in range(1, N + 1):\n    a = int(str(i)[0])\n    b = int(str(i)[-1])\n    ans += mem[b][a]\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nd = [[0] * 10 for i in range(10)]\nfor n in range(1, N + 1):\n    s = str(n)\n    d[int(s[0])][int(s[-1])] += 1\nans = 0\nfor i in range(10):\n    for j in range(10):\n        ans += d[i][j] * d[j][i]\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":21.4285714286,"diff":["-mem = [[0] * 10 for i in range(10)]","-for i in range(1, N + 1):","-    a = int(str(i)[0])","-    b = int(str(i)[-1])","-    mem[a][b] += 1","+d = [[0] * 10 for i in range(10)]","+for n in range(1, N + 1):","+    s = str(n)","+    d[int(s[0])][int(s[-1])] += 1","-for i in range(1, N + 1):","-    a = int(str(i)[0])","-    b = int(str(i)[-1])","-    ans += mem[b][a]","+for i in range(10):","+    for j in range(10):","+        ans += d[i][j] * d[j][i]"],"diff_only_import_comment":false,"measured_runtime_v0":0.4986082915,"measured_runtime_v1":0.3140420772,"runtime_lift":1.5877117355,"key":["s858070624","s144947075"]}
{"user_id":"u790012205","problem_id":"p03796","language":"python","submission_id_v0":"s234232673","submission_id_v1":"s468100683","cpu_time_v0":175,"cpu_time_v1":49,"memory_v0":38512,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":72.0,"input":"N = int(eval(input()))\n\np = 1\n\nfor i in range(N):\n\n    p *= (i + 1)\n\n    p %= (1e9 + 7)\n\nprint((int(p)))","target":"N = int(eval(input()))\n\np = 1\n\nfor i in range(N):\n\n    p = p * (i + 1) % (1e9 + 7)\n\nprint((int(p)))","code_v0_loc":6,"code_v1_loc":5,"code_v0_num_chars":96,"code_v1_num_chars":91,"code_v0_no_empty_lines":"N = int(eval(input()))\np = 1\nfor i in range(N):\n    p *= i + 1\n    p %= 1e9 + 7\nprint((int(p)))\n","code_v1_no_empty_lines":"N = int(eval(input()))\np = 1\nfor i in range(N):\n    p = p * (i + 1) % (1e9 + 7)\nprint((int(p)))\n","code_same":false,"relative_loc_diff_percent":16.6666666667,"diff":["-    p *= i + 1","-    p %= 1e9 + 7","+    p = p * (i + 1) % (1e9 + 7)"],"diff_only_import_comment":false,"measured_runtime_v0":0.4166263335,"measured_runtime_v1":0.2939343722,"runtime_lift":1.4174127727,"key":["s234232673","s468100683"]}
{"user_id":"u771634798","problem_id":"p02725","language":"python","submission_id_v0":"s591694965","submission_id_v1":"s705639429","cpu_time_v0":110,"cpu_time_v1":85,"memory_v0":32148,"memory_v1":32380,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":22.73,"input":"k, n = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\n\n\ndiff = []\n\n\n\nfor i in range(n - 1):\n\n    diff.append(a[i + 1] - a[i])\n\ndiff.append(k - a[-1] + a[0])\n\n\n\nprint((k - max(diff)))\n","target":"k, n = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\n\n\na.append(k + a[0])\n\ndiff = [a1 - a0 for a0, a1 in zip(a, a[1:])]\n\n\n\nprint((k - max(diff)))\n","code_v0_loc":10,"code_v1_loc":7,"code_v0_num_chars":198,"code_v1_num_chars":162,"code_v0_no_empty_lines":"k, n = list(map(int, input().split()))\na = list(map(int, input().split()))\ndiff = []\nfor i in range(n - 1):\n    diff.append(a[i + 1] - a[i])\ndiff.append(k - a[-1] + a[0])\nprint((k - max(diff)))\n","code_v1_no_empty_lines":"k, n = list(map(int, input().split()))\na = list(map(int, input().split()))\na.append(k + a[0])\ndiff = [a1 - a0 for a0, a1 in zip(a, a[1:])]\nprint((k - max(diff)))\n","code_same":false,"relative_loc_diff_percent":30.0,"diff":["-diff = []","-for i in range(n - 1):","-    diff.append(a[i + 1] - a[i])","-diff.append(k - a[-1] + a[0])","+a.append(k + a[0])","+diff = [a1 - a0 for a0, a1 in zip(a, a[1:])]"],"diff_only_import_comment":false,"measured_runtime_v0":0.3387992765,"measured_runtime_v1":0.2554280306,"runtime_lift":1.3263981864,"key":["s591694965","s705639429"]}
{"user_id":"u562935282","problem_id":"p03253","language":"python","submission_id_v0":"s242343005","submission_id_v1":"s569938093","cpu_time_v0":72,"cpu_time_v1":23,"memory_v0":11380,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":68.06,"input":"class Calc:\n\n    def __init__(self, max_value, mod):\n\n        \"\"\"combination(max_value, all)\"\"\"\n\n        fact = [-1] * (max_value + 1)\n\n        fact[0] = 1\n\n        fact[1] = 1\n\n        for x in range(2, max_value + 1):\n\n            fact[x] = x * fact[x - 1] % mod\n\n\n\n        invs = [1] * (max_value + 1)\n\n        invs[max_value] = pow(fact[max_value], mod - 2, mod)\n\n        for x in range(max_value - 1, 0, -1):\n\n            invs[x] = invs[x + 1] * (x + 1) % mod\n\n\n\n        self.fact = fact\n\n        self.invs = invs\n\n        self.mod = mod\n\n\n\n    def combination(self, n, r):\n\n        if n - r < r:\n\n            return self.combination(n, n - r)\n\n        if r < 0:\n\n            return 0\n\n        if r == 0:\n\n            return 1\n\n        if r == 1:\n\n            return n\n\n        return self.fact[n] * self.invs[r] * self.invs[n - r] % self.mod\n\n\n\n\n\ndef gen(n):\n\n    x = n\n\n    d = 2\n\n    cnt = 0\n\n    while x % d == 0:\n\n        x \/\/= d\n\n        cnt += 1\n\n    yield cnt\n\n\n\n    d = 3\n\n    ma = d * d\n\n    while ma <= n:\n\n        cnt = 0\n\n        while x % d == 0:\n\n            x \/\/= d\n\n            cnt += 1\n\n        yield cnt\n\n        ma += d * 4 + 4\n\n        d += 2\n\n\n\n    if x > 1:\n\n        yield 1\n\n\n\n\n\ndef main():\n\n    MOD = 10 ** 9 + 7\n\n\n\n    N, M = list(map(int, input().split()))\n\n\n\n    cal = Calc(max_value=N + 30, mod=MOD)\n\n\n\n    ans = 1\n\n    for cnt in gen(M):\n\n        ans = (ans * cal.combination(N + cnt - 1, cnt)) % MOD\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"def gen(n):\n\n    x = n\n\n    d = 2\n\n    cnt = 0\n\n    while x % d == 0:\n\n        x \/\/= d\n\n        cnt += 1\n\n    yield cnt\n\n\n\n    d = 3\n\n    while d * d <= n:\n\n        cnt = 0\n\n        while x % d == 0:\n\n            x \/\/= d\n\n            cnt += 1\n\n        yield cnt\n\n        d += 2\n\n\n\n    if x > 1:\n\n        yield 1\n\n\n\n\n\ndef main():\n\n    MOD = 10 ** 9 + 7\n\n\n\n    N, M = list(map(int, input().split()))\n\n\n\n    ans = 1\n\n    for cnt in gen(M):\n\n        for d in range(cnt):\n\n            ans = (ans * (N - 1 + cnt - d) % MOD) * pow(d + 1, MOD - 2, MOD) % MOD\n\n            \n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":69,"code_v1_loc":37,"code_v0_num_chars":1490,"code_v1_num_chars":619,"code_v0_no_empty_lines":"class Calc:\n    def __init__(self, max_value, mod):\n        \"\"\"combination(max_value, all)\"\"\"\n        fact = [-1] * (max_value + 1)\n        fact[0] = 1\n        fact[1] = 1\n        for x in range(2, max_value + 1):\n            fact[x] = x * fact[x - 1] % mod\n        invs = [1] * (max_value + 1)\n        invs[max_value] = pow(fact[max_value], mod - 2, mod)\n        for x in range(max_value - 1, 0, -1):\n            invs[x] = invs[x + 1] * (x + 1) % mod\n        self.fact = fact\n        self.invs = invs\n        self.mod = mod\n\n    def combination(self, n, r):\n        if n - r < r:\n            return self.combination(n, n - r)\n        if r < 0:\n            return 0\n        if r == 0:\n            return 1\n        if r == 1:\n            return n\n        return self.fact[n] * self.invs[r] * self.invs[n - r] % self.mod\n\n\ndef gen(n):\n    x = n\n    d = 2\n    cnt = 0\n    while x % d == 0:\n        x \/\/= d\n        cnt += 1\n    yield cnt\n    d = 3\n    ma = d * d\n    while ma <= n:\n        cnt = 0\n        while x % d == 0:\n            x \/\/= d\n            cnt += 1\n        yield cnt\n        ma += d * 4 + 4\n        d += 2\n    if x > 1:\n        yield 1\n\n\ndef main():\n    MOD = 10**9 + 7\n    N, M = list(map(int, input().split()))\n    cal = Calc(max_value=N + 30, mod=MOD)\n    ans = 1\n    for cnt in gen(M):\n        ans = (ans * cal.combination(N + cnt - 1, cnt)) % MOD\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def gen(n):\n    x = n\n    d = 2\n    cnt = 0\n    while x % d == 0:\n        x \/\/= d\n        cnt += 1\n    yield cnt\n    d = 3\n    while d * d <= n:\n        cnt = 0\n        while x % d == 0:\n            x \/\/= d\n            cnt += 1\n        yield cnt\n        d += 2\n    if x > 1:\n        yield 1\n\n\ndef main():\n    MOD = 10**9 + 7\n    N, M = list(map(int, input().split()))\n    ans = 1\n    for cnt in gen(M):\n        for d in range(cnt):\n            ans = (ans * (N - 1 + cnt - d) % MOD) * pow(d + 1, MOD - 2, MOD) % MOD\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":46.3768115942,"diff":["-class Calc:","-    def __init__(self, max_value, mod):","-        \"\"\"combination(max_value, all)\"\"\"","-        fact = [-1] * (max_value + 1)","-        fact[0] = 1","-        fact[1] = 1","-        for x in range(2, max_value + 1):","-            fact[x] = x * fact[x - 1] % mod","-        invs = [1] * (max_value + 1)","-        invs[max_value] = pow(fact[max_value], mod - 2, mod)","-        for x in range(max_value - 1, 0, -1):","-            invs[x] = invs[x + 1] * (x + 1) % mod","-        self.fact = fact","-        self.invs = invs","-        self.mod = mod","-","-    def combination(self, n, r):","-        if n - r < r:","-            return self.combination(n, n - r)","-        if r < 0:","-            return 0","-        if r == 0:","-            return 1","-        if r == 1:","-            return n","-        return self.fact[n] * self.invs[r] * self.invs[n - r] % self.mod","-","-","-    ma = d * d","-    while ma <= n:","+    while d * d <= n:","-        ma += d * 4 + 4","-    cal = Calc(max_value=N + 30, mod=MOD)","-        ans = (ans * cal.combination(N + cnt - 1, cnt)) % MOD","+        for d in range(cnt):","+            ans = (ans * (N - 1 + cnt - d) % MOD) * pow(d + 1, MOD - 2, MOD) % MOD"],"diff_only_import_comment":false,"measured_runtime_v0":0.5542220466,"measured_runtime_v1":0.3755235486,"runtime_lift":1.4758649588,"key":["s242343005","s569938093"]}
{"user_id":"u952708174","problem_id":"p02983","language":"python","submission_id_v0":"s271837395","submission_id_v1":"s778364451","cpu_time_v0":612,"cpu_time_v1":51,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":91.67,"input":"def c_remainder_minimization_2019(L, R):\n\n    ans = float('inf')\n\n    for i in range(L, min(R, L + 2019)):\n\n        for j in range(i + 1, min(R + 1, L + 2020)):\n\n            ans = min(ans, (i * j) % 2019)\n\n    return ans\n\n\n\nL, R = [int(i) for i in input().split()]\n\nprint((c_remainder_minimization_2019(L, R)))","target":"def c_remainder_minimization_2019(L, R):\n\n    ans = float('inf')\n\n    for i in range(L, min(R, L + 2019)):\n\n        for j in range(i + 1, min(R + 1, L + 2020)):\n\n            ans = min(ans, (i * j) % 2019)\n\n            if ans == 0:\n\n                return 0\n\n    return ans\n\n\n\nL, R = [int(i) for i in input().split()]\n\nprint((c_remainder_minimization_2019(L, R)))","code_v0_loc":9,"code_v1_loc":11,"code_v0_num_chars":308,"code_v1_num_chars":360,"code_v0_no_empty_lines":"def c_remainder_minimization_2019(L, R):\n    ans = float(\"inf\")\n    for i in range(L, min(R, L + 2019)):\n        for j in range(i + 1, min(R + 1, L + 2020)):\n            ans = min(ans, (i * j) % 2019)\n    return ans\n\n\nL, R = [int(i) for i in input().split()]\nprint((c_remainder_minimization_2019(L, R)))\n","code_v1_no_empty_lines":"def c_remainder_minimization_2019(L, R):\n    ans = float(\"inf\")\n    for i in range(L, min(R, L + 2019)):\n        for j in range(i + 1, min(R + 1, L + 2020)):\n            ans = min(ans, (i * j) % 2019)\n            if ans == 0:\n                return 0\n    return ans\n\n\nL, R = [int(i) for i in input().split()]\nprint((c_remainder_minimization_2019(L, R)))\n","code_same":false,"relative_loc_diff_percent":18.1818181818,"diff":["+            if ans == 0:","+                return 0"],"diff_only_import_comment":false,"measured_runtime_v0":0.3551982943,"measured_runtime_v1":0.2038855975,"runtime_lift":1.7421450986,"key":["s271837395","s778364451"]}
{"user_id":"u562935282","problem_id":"p03371","language":"python","submission_id_v0":"s950527789","submission_id_v1":"s848046688","cpu_time_v0":119,"cpu_time_v1":19,"memory_v0":3060,"memory_v1":3316,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":84.03,"input":"a, b, c, x, y = list(map(int, input().split()))\n\nval = float('inf')\n\nfor k in range(10 ** 5 + 1):\n\n    val = min(val, 2 * c * k + max(x - k, 0) * a + max(y - k, 0) * b)\n\nprint(val)","target":"A, B, C, X, Y = list(map(int, input().split()))\n\n\n\nans = 0\n\nans += min(A + B, 2 * C) * min(X, Y)\n\nif X > Y:\n\n    ans += min(A, 2 * C) * (X - Y)\n\nelif X < Y:\n\n    ans += min(B, 2 * C) * (Y - X)\n\nprint(ans)\n","code_v0_loc":5,"code_v1_loc":9,"code_v0_num_chars":174,"code_v1_num_chars":199,"code_v0_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nval = float(\"inf\")\nfor k in range(10**5 + 1):\n    val = min(val, 2 * c * k + max(x - k, 0) * a + max(y - k, 0) * b)\nprint(val)\n","code_v1_no_empty_lines":"A, B, C, X, Y = list(map(int, input().split()))\nans = 0\nans += min(A + B, 2 * C) * min(X, Y)\nif X > Y:\n    ans += min(A, 2 * C) * (X - Y)\nelif X < Y:\n    ans += min(B, 2 * C) * (Y - X)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":44.4444444444,"diff":["-a, b, c, x, y = list(map(int, input().split()))","-val = float(\"inf\")","-for k in range(10**5 + 1):","-    val = min(val, 2 * c * k + max(x - k, 0) * a + max(y - k, 0) * b)","-print(val)","+A, B, C, X, Y = list(map(int, input().split()))","+ans = 0","+ans += min(A + B, 2 * C) * min(X, Y)","+if X > Y:","+    ans += min(A, 2 * C) * (X - Y)","+elif X < Y:","+    ans += min(B, 2 * C) * (Y - X)","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.3470396991,"measured_runtime_v1":0.2883047278,"runtime_lift":4.6722775216,"key":["s950527789","s848046688"]}
{"user_id":"u163320134","problem_id":"p02690","language":"python","submission_id_v0":"s506243349","submission_id_v1":"s621495959","cpu_time_v0":131,"cpu_time_v1":40,"memory_v0":38348,"memory_v1":9100,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":69.47,"input":"x=int(eval(input()))\n\ndic={}\n\nfor i in range(10**5):\n\n  dic[i**5]=i\n\n  dic[(-i)**5]=-i\n\nfor i in range(10**5):\n\n    if i**5+x in dic:\n\n      print((dic[i**5+x],i))\n\n      break\n\n    if (-i)**5+x in dic:\n\n      print((dic[(-i)**5+x],-i))\n\n      break","target":"x=int(eval(input()))\n\nfor a in range(-118,120):\n\n  for b in range(-119,119):\n\n    if a**5-b**5==x:\n\n      print((a,b))\n\n      exit()","code_v0_loc":12,"code_v1_loc":6,"code_v0_num_chars":239,"code_v1_num_chars":124,"code_v0_no_empty_lines":"x = int(eval(input()))\ndic = {}\nfor i in range(10**5):\n    dic[i**5] = i\n    dic[(-i) ** 5] = -i\nfor i in range(10**5):\n    if i**5 + x in dic:\n        print((dic[i**5 + x], i))\n        break\n    if (-i) ** 5 + x in dic:\n        print((dic[(-i) ** 5 + x], -i))\n        break\n","code_v1_no_empty_lines":"x = int(eval(input()))\nfor a in range(-118, 120):\n    for b in range(-119, 119):\n        if a**5 - b**5 == x:\n            print((a, b))\n            exit()\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-dic = {}","-for i in range(10**5):","-    dic[i**5] = i","-    dic[(-i) ** 5] = -i","-for i in range(10**5):","-    if i**5 + x in dic:","-        print((dic[i**5 + x], i))","-        break","-    if (-i) ** 5 + x in dic:","-        print((dic[(-i) ** 5 + x], -i))","-        break","+for a in range(-118, 120):","+    for b in range(-119, 119):","+        if a**5 - b**5 == x:","+            print((a, b))","+            exit()"],"diff_only_import_comment":false,"measured_runtime_v0":1.2600205839,"measured_runtime_v1":0.3441586594,"runtime_lift":3.6611619365,"key":["s506243349","s621495959"]}
{"user_id":"u869919400","problem_id":"p03796","language":"python","submission_id_v0":"s127994042","submission_id_v1":"s163960956","cpu_time_v0":229,"cpu_time_v1":37,"memory_v0":3984,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":83.84,"input":"from math import factorial as f\n\nn = int(eval(input()))\n\nprint((f(n) % (10 ** 9 + 7)))","target":"n = int(eval(input()))\n\np = 1\n\nfor i in range(n):\n\n    p = (p * (i+1)) % (10 ** 9 + 7)\n\nprint(p)","code_v0_loc":3,"code_v1_loc":5,"code_v0_num_chars":78,"code_v1_num_chars":90,"code_v0_no_empty_lines":"from math import factorial as f\n\nn = int(eval(input()))\nprint((f(n) % (10**9 + 7)))\n","code_v1_no_empty_lines":"n = int(eval(input()))\np = 1\nfor i in range(n):\n    p = (p * (i + 1)) % (10**9 + 7)\nprint(p)\n","code_same":false,"relative_loc_diff_percent":40.0,"diff":["-from math import factorial as f","-","-print((f(n) % (10**9 + 7)))","+p = 1","+for i in range(n):","+    p = (p * (i + 1)) % (10**9 + 7)","+print(p)"],"diff_only_import_comment":false,"measured_runtime_v0":0.8111317687,"measured_runtime_v1":0.3589184887,"runtime_lift":2.2599330882,"key":["s127994042","s163960956"]}
{"user_id":"u102461423","problem_id":"p02649","language":"python","submission_id_v0":"s280841683","submission_id_v1":"s122055425","cpu_time_v0":644,"cpu_time_v1":575,"memory_v0":110324,"memory_v1":110580,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.71,"input":"import sys\n\nimport numpy as np\n\nfrom numba import njit\n\n\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\n@njit('(i4[::1],i4,i8[::1])', cache=True)\n\ndef main(A, B, C):\n\n    counts = np.zeros(1 << 18, np.int32)\n\n    popcount = np.zeros(1 << B, np.int32)\n\n    for i in range(B):\n\n        popcount[1 << i:1 << i + 1] = popcount[:1 << i] + 1\n\n\n\n    answer = 0\n\n    for i in range(1 << B):\n\n        k = popcount[i]\n\n        t = 0\n\n        for x in A & i:\n\n            n = counts[x]\n\n            counts[x] += 1\n\n            t -= C[n]\n\n            t += C[n + 1]\n\n        for x in A & i:\n\n            counts[x] = 0\n\n        if k & 1:\n\n            t = -t\n\n        answer += t\n\n    return answer\n\n\n\nN, K, S, T = list(map(int, readline().split()))\n\nA = np.array(readline().split(), np.int32)\n\n\n\ndef convert_problem(S, T, A):\n\n    ng = np.zeros(len(A), np.bool)\n\n    B = np.zeros_like(A)\n\n    n = 0\n\n    for i in range(18):\n\n        s, t = (S >> i) & 1, (T >> i) & 1\n\n        if (s, t) == (0, 0):\n\n            ng |= ((A >> i) & 1) == 1\n\n        elif (s, t) == (1, 1):\n\n            ng |= ((A >> i) & 1) == 0\n\n        elif (s, t) == (1, 0):\n\n            print((0))\n\n            exit()\n\n        else:\n\n            B += ((A >> i) & 1) << n\n\n            n += 1\n\n    return B[~ng], n\n\n\n\nA, B = convert_problem(S, T, A)\n\n\n\nC = np.zeros((100, 100), np.int64)\n\nC[0, 0] = 1\n\nfor n in range(1, 100):\n\n    C[n, :-1] += C[n - 1, :-1]\n\n    C[n, 1:] += C[n - 1, :-1]\n\nC = C[:, 1:K + 1].sum(axis=1)\n\n\n\nprint((main(A, B, C)))","target":"import sys\n\nimport numpy as np\n\nfrom numba import njit\n\n\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\n@njit('(i4[::1],i4,i8[::1])', cache=True)\n\ndef main(A, B, C):\n\n    counts = np.zeros(1 << 18, np.int32)\n\n    popcount = np.zeros(1 << B, np.int32)\n\n    for i in range(B):\n\n        popcount[1 << i:1 << i + 1] = popcount[:1 << i] + 1\n\n\n\n    answer = 0\n\n    for i in range(1 << B):\n\n        k = popcount[i]\n\n        t = 0\n\n        for x in A & i:\n\n            n = counts[x]\n\n            counts[x] += 1\n\n            t -= C[n]\n\n            t += C[n + 1]\n\n        for x in A & i:\n\n            counts[x] = 0\n\n        if k & 1:\n\n            t = -t\n\n        answer += t\n\n    return answer\n\n  \n\nif sys.argv[-1] == 'ONLINE_JUDGE':\n\n    from numba.pycc import CC\n\n    cc = CC('my_module')\n\n    cc.export('main', '(i4[::1],i4,i8[::1])')(main)\n\n    cc.compile()\n\n    exit()\n\nfrom my_module import main\n\n\n\nN, K, S, T = list(map(int, readline().split()))\n\nA = np.array(readline().split(), np.int32)\n\n\n\ndef convert_problem(S, T, A):\n\n    ng = np.zeros(len(A), np.bool)\n\n    B = np.zeros_like(A)\n\n    n = 0\n\n    for i in range(18):\n\n        s, t = (S >> i) & 1, (T >> i) & 1\n\n        if (s, t) == (0, 0):\n\n            ng |= ((A >> i) & 1) == 1\n\n        elif (s, t) == (1, 1):\n\n            ng |= ((A >> i) & 1) == 0\n\n        elif (s, t) == (1, 0):\n\n            print((0))\n\n            exit()\n\n        else:\n\n            B += ((A >> i) & 1) << n\n\n            n += 1\n\n    return B[~ng], n\n\n\n\nA, B = convert_problem(S, T, A)\n\n\n\nC = np.zeros((100, 100), np.int64)\n\nC[0, 0] = 1\n\nfor n in range(1, 100):\n\n    C[n, :-1] += C[n - 1, :-1]\n\n    C[n, 1:] += C[n - 1, :-1]\n\nC = C[:, 1:K + 1].sum(axis=1)\n\n\n\nprint((main(A, B, C)))","code_v0_loc":62,"code_v1_loc":70,"code_v0_num_chars":1548,"code_v1_num_chars":1756,"code_v0_no_empty_lines":"import sys\nimport numpy as np\nfrom numba import njit\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\n\n@njit(\"(i4[::1],i4,i8[::1])\", cache=True)\ndef main(A, B, C):\n    counts = np.zeros(1 << 18, np.int32)\n    popcount = np.zeros(1 << B, np.int32)\n    for i in range(B):\n        popcount[1 << i : 1 << i + 1] = popcount[: 1 << i] + 1\n    answer = 0\n    for i in range(1 << B):\n        k = popcount[i]\n        t = 0\n        for x in A & i:\n            n = counts[x]\n            counts[x] += 1\n            t -= C[n]\n            t += C[n + 1]\n        for x in A & i:\n            counts[x] = 0\n        if k & 1:\n            t = -t\n        answer += t\n    return answer\n\n\nN, K, S, T = list(map(int, readline().split()))\nA = np.array(readline().split(), np.int32)\n\n\ndef convert_problem(S, T, A):\n    ng = np.zeros(len(A), np.bool)\n    B = np.zeros_like(A)\n    n = 0\n    for i in range(18):\n        s, t = (S >> i) & 1, (T >> i) & 1\n        if (s, t) == (0, 0):\n            ng |= ((A >> i) & 1) == 1\n        elif (s, t) == (1, 1):\n            ng |= ((A >> i) & 1) == 0\n        elif (s, t) == (1, 0):\n            print((0))\n            exit()\n        else:\n            B += ((A >> i) & 1) << n\n            n += 1\n    return B[~ng], n\n\n\nA, B = convert_problem(S, T, A)\nC = np.zeros((100, 100), np.int64)\nC[0, 0] = 1\nfor n in range(1, 100):\n    C[n, :-1] += C[n - 1, :-1]\n    C[n, 1:] += C[n - 1, :-1]\nC = C[:, 1 : K + 1].sum(axis=1)\nprint((main(A, B, C)))\n","code_v1_no_empty_lines":"import sys\nimport numpy as np\nfrom numba import njit\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\n\n@njit(\"(i4[::1],i4,i8[::1])\", cache=True)\ndef main(A, B, C):\n    counts = np.zeros(1 << 18, np.int32)\n    popcount = np.zeros(1 << B, np.int32)\n    for i in range(B):\n        popcount[1 << i : 1 << i + 1] = popcount[: 1 << i] + 1\n    answer = 0\n    for i in range(1 << B):\n        k = popcount[i]\n        t = 0\n        for x in A & i:\n            n = counts[x]\n            counts[x] += 1\n            t -= C[n]\n            t += C[n + 1]\n        for x in A & i:\n            counts[x] = 0\n        if k & 1:\n            t = -t\n        answer += t\n    return answer\n\n\nif sys.argv[-1] == \"ONLINE_JUDGE\":\n    from numba.pycc import CC\n\n    cc = CC(\"my_module\")\n    cc.export(\"main\", \"(i4[::1],i4,i8[::1])\")(main)\n    cc.compile()\n    exit()\nfrom my_module import main\n\nN, K, S, T = list(map(int, readline().split()))\nA = np.array(readline().split(), np.int32)\n\n\ndef convert_problem(S, T, A):\n    ng = np.zeros(len(A), np.bool)\n    B = np.zeros_like(A)\n    n = 0\n    for i in range(18):\n        s, t = (S >> i) & 1, (T >> i) & 1\n        if (s, t) == (0, 0):\n            ng |= ((A >> i) & 1) == 1\n        elif (s, t) == (1, 1):\n            ng |= ((A >> i) & 1) == 0\n        elif (s, t) == (1, 0):\n            print((0))\n            exit()\n        else:\n            B += ((A >> i) & 1) << n\n            n += 1\n    return B[~ng], n\n\n\nA, B = convert_problem(S, T, A)\nC = np.zeros((100, 100), np.int64)\nC[0, 0] = 1\nfor n in range(1, 100):\n    C[n, :-1] += C[n - 1, :-1]\n    C[n, 1:] += C[n - 1, :-1]\nC = C[:, 1 : K + 1].sum(axis=1)\nprint((main(A, B, C)))\n","code_same":false,"relative_loc_diff_percent":11.4285714286,"diff":["+if sys.argv[-1] == \"ONLINE_JUDGE\":","+    from numba.pycc import CC","+","+    cc = CC(\"my_module\")","+    cc.export(\"main\", \"(i4[::1],i4,i8[::1])\")(main)","+    cc.compile()","+    exit()","+from my_module import main","+"],"diff_only_import_comment":false,"measured_runtime_v0":1.8857788267,"measured_runtime_v1":1.3703739867,"runtime_lift":1.3761052421,"key":["s280841683","s122055425"]}
{"user_id":"u227082700","problem_id":"p03039","language":"python","submission_id_v0":"s481435936","submission_id_v1":"s241948863","cpu_time_v0":1746,"cpu_time_v1":149,"memory_v0":11052,"memory_v1":16752,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":91.47,"input":"n,m,k=list(map(int,input().split()))\n\nmod=10**9+7\n\nf=[1]\n\nfor i in range(2*10**5+7):f+=[f[-1]*(i+1)%mod]\n\ndef comb(a,b):return f[a]*pow(f[b],mod-2,mod)*pow(f[a-b],mod-2,mod)%mod\n\nans=0\n\nfor i in range(1,n):\n\n  ans+=(i*(n-i)*m**2)*(comb(n*m-2,k-2))\n\n  ans%=mod\n\nfor i in range(1,m):\n\n  ans+=(i*(m-i)*n**2)*(comb(n*m-2,k-2))\n\n  ans%=mod\n\nprint(ans)","target":"n,m,k=list(map(int,input().split()))\n\n\n\nmod = 10**9+7\n\nf = [1]\n\nfor i in range(n*m):\n\n  f += [f[-1]*(i+1) % mod]\n\ndef comb(a, b):\n\n  return f[a]*pow(f[b], mod-2, mod)*pow(f[a-b], mod-2, mod) % mod\n\n\n\nans=0\n\nfor dist in range(1,n):\n\n  c=n-dist\n\n  p=(c*m*m)%mod\n\n  ans+=p*dist\n\nfor dist in range(1,m):\n\n  c=m-dist\n\n  p=(c*n*n)%mod\n\n  ans+=p*dist\n\nans%=mod\n\nprint((ans*comb(n*m-2,k-2)%mod))","code_v0_loc":13,"code_v1_loc":20,"code_v0_num_chars":340,"code_v1_num_chars":379,"code_v0_no_empty_lines":"n, m, k = list(map(int, input().split()))\nmod = 10**9 + 7\nf = [1]\nfor i in range(2 * 10**5 + 7):\n    f += [f[-1] * (i + 1) % mod]\n\n\ndef comb(a, b):\n    return f[a] * pow(f[b], mod - 2, mod) * pow(f[a - b], mod - 2, mod) % mod\n\n\nans = 0\nfor i in range(1, n):\n    ans += (i * (n - i) * m**2) * (comb(n * m - 2, k - 2))\n    ans %= mod\nfor i in range(1, m):\n    ans += (i * (m - i) * n**2) * (comb(n * m - 2, k - 2))\n    ans %= mod\nprint(ans)\n","code_v1_no_empty_lines":"n, m, k = list(map(int, input().split()))\nmod = 10**9 + 7\nf = [1]\nfor i in range(n * m):\n    f += [f[-1] * (i + 1) % mod]\n\n\ndef comb(a, b):\n    return f[a] * pow(f[b], mod - 2, mod) * pow(f[a - b], mod - 2, mod) % mod\n\n\nans = 0\nfor dist in range(1, n):\n    c = n - dist\n    p = (c * m * m) % mod\n    ans += p * dist\nfor dist in range(1, m):\n    c = m - dist\n    p = (c * n * n) % mod\n    ans += p * dist\nans %= mod\nprint((ans * comb(n * m - 2, k - 2) % mod))\n","code_same":false,"relative_loc_diff_percent":35.0,"diff":["-for i in range(2 * 10**5 + 7):","+for i in range(n * m):","-for i in range(1, n):","-    ans += (i * (n - i) * m**2) * (comb(n * m - 2, k - 2))","-    ans %= mod","-for i in range(1, m):","-    ans += (i * (m - i) * n**2) * (comb(n * m - 2, k - 2))","-    ans %= mod","-print(ans)","+for dist in range(1, n):","+    c = n - dist","+    p = (c * m * m) % mod","+    ans += p * dist","+for dist in range(1, m):","+    c = m - dist","+    p = (c * n * n) % mod","+    ans += p * dist","+ans %= mod","+print((ans * comb(n * m - 2, k - 2) % mod))"],"diff_only_import_comment":false,"measured_runtime_v0":0.907170742,"measured_runtime_v1":0.2339973826,"runtime_lift":3.8768414063,"key":["s481435936","s241948863"]}
{"user_id":"u987164499","problem_id":"p03273","language":"python","submission_id_v0":"s696147047","submission_id_v1":"s878437113","cpu_time_v0":159,"cpu_time_v1":23,"memory_v0":12512,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":85.53,"input":"from sys import stdin\n\nimport numpy as np\n\n\n\nh,w= [int(x) for x in stdin.readline().rstrip().split()]\n\n\n\nli = [[\"\" for i in range(w)]for j in range(h)]\n\n\n\nfor i in range(h):\n\n    s = stdin.readline().rstrip()\n\n    for j in range(w):\n\n        li[i][j] = s[j]\n\n\n\nli = np.asarray([s for s in li if s != ['.']*w]).T.tolist()\n\nli = np.asarray([s for s in li if s != ['.']*len(li[0])]).T.tolist()\n\n\n\nfor i in li:\n\n    s = \"\"\n\n    for j in range(len(li[0])):\n\n        s += i[j]\n\n    print(s)","target":"from sys import stdin,setrecursionlimit\n\nsetrecursionlimit(10 ** 7)\n\nh,w = list(map(int,stdin.readline().rstrip().split()))\n\nli = [[\"\" for i in range(w)]for j in range(h)]\n\nfor i in range(h):\n\n    s = stdin.readline().rstrip()\n\n    for j in range(w):\n\n        li[i][j] = s[j]\n\nlin = []\n\nfor i in li:\n\n    if i != [\".\"]*w:\n\n        lin.append(i)\n\nout = []\n\nfor i in range(w):\n\n    flag = True\n\n    for j in range(len(lin)):\n\n        if lin[j][i] == \"#\":\n\n            flag = False\n\n    if flag:\n\n        out.append(i)\n\n\n\nlis = []\n\nfor i in lin:\n\n    case = []\n\n    for j,k in enumerate(i):\n\n        if j in out:\n\n            continue\n\n        case.append(k)\n\n    lis.append(case)\n\n\n\nfor i in lis:\n\n    print((\"\".join(i)))","code_v0_loc":20,"code_v1_loc":32,"code_v0_num_chars":484,"code_v1_num_chars":711,"code_v0_no_empty_lines":"from sys import stdin\nimport numpy as np\n\nh, w = [int(x) for x in stdin.readline().rstrip().split()]\nli = [[\"\" for i in range(w)] for j in range(h)]\nfor i in range(h):\n    s = stdin.readline().rstrip()\n    for j in range(w):\n        li[i][j] = s[j]\nli = np.asarray([s for s in li if s != [\".\"] * w]).T.tolist()\nli = np.asarray([s for s in li if s != [\".\"] * len(li[0])]).T.tolist()\nfor i in li:\n    s = \"\"\n    for j in range(len(li[0])):\n        s += i[j]\n    print(s)\n","code_v1_no_empty_lines":"from sys import stdin, setrecursionlimit\n\nsetrecursionlimit(10**7)\nh, w = list(map(int, stdin.readline().rstrip().split()))\nli = [[\"\" for i in range(w)] for j in range(h)]\nfor i in range(h):\n    s = stdin.readline().rstrip()\n    for j in range(w):\n        li[i][j] = s[j]\nlin = []\nfor i in li:\n    if i != [\".\"] * w:\n        lin.append(i)\nout = []\nfor i in range(w):\n    flag = True\n    for j in range(len(lin)):\n        if lin[j][i] == \"#\":\n            flag = False\n    if flag:\n        out.append(i)\nlis = []\nfor i in lin:\n    case = []\n    for j, k in enumerate(i):\n        if j in out:\n            continue\n        case.append(k)\n    lis.append(case)\nfor i in lis:\n    print((\"\".join(i)))\n","code_same":false,"relative_loc_diff_percent":37.5,"diff":["-from sys import stdin","-import numpy as np","+from sys import stdin, setrecursionlimit","-h, w = [int(x) for x in stdin.readline().rstrip().split()]","+setrecursionlimit(10**7)","+h, w = list(map(int, stdin.readline().rstrip().split()))","-li = np.asarray([s for s in li if s != [\".\"] * w]).T.tolist()","-li = np.asarray([s for s in li if s != [\".\"] * len(li[0])]).T.tolist()","+lin = []","-    s = \"\"","-    for j in range(len(li[0])):","-        s += i[j]","-    print(s)","+    if i != [\".\"] * w:","+        lin.append(i)","+out = []","+for i in range(w):","+    flag = True","+    for j in range(len(lin)):","+        if lin[j][i] == \"#\":","+            flag = False","+    if flag:","+        out.append(i)","+lis = []","+for i in lin:","+    case = []","+    for j, k in enumerate(i):","+        if j in out:","+            continue","+        case.append(k)","+    lis.append(case)","+for i in lis:","+    print((\"\".join(i)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.5214503652,"measured_runtime_v1":0.1999706806,"runtime_lift":7.6083671913,"key":["s696147047","s878437113"]}
{"user_id":"u617203831","problem_id":"p03796","language":"python","submission_id_v0":"s015060265","submission_id_v1":"s192076282","cpu_time_v0":230,"cpu_time_v1":40,"memory_v0":3980,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":82.61,"input":"import math\n\nprint((math.factorial(int(eval(input())))%(10**9+7)))","target":"ans=1\n\nn=int(eval(input()))\n\nfor i in range(1,n+1):\n\n  ans*=i\n\n  ans=ans%(10**9+7)\n\nprint(ans)","code_v0_loc":2,"code_v1_loc":6,"code_v0_num_chars":58,"code_v1_num_chars":88,"code_v0_no_empty_lines":"import math\n\nprint((math.factorial(int(eval(input()))) % (10**9 + 7)))\n","code_v1_no_empty_lines":"ans = 1\nn = int(eval(input()))\nfor i in range(1, n + 1):\n    ans *= i\n    ans = ans % (10**9 + 7)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":66.6666666667,"diff":["-import math","-","-print((math.factorial(int(eval(input()))) % (10**9 + 7)))","+ans = 1","+n = int(eval(input()))","+for i in range(1, n + 1):","+    ans *= i","+    ans = ans % (10**9 + 7)","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.7955839839,"measured_runtime_v1":0.4261377716,"runtime_lift":1.866964247,"key":["s015060265","s192076282"]}
{"user_id":"u844789719","problem_id":"p03371","language":"python","submission_id_v0":"s272710522","submission_id_v1":"s867287513","cpu_time_v0":94,"cpu_time_v1":17,"memory_v0":3064,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":81.91,"input":"A, B, C, X, Y = [int(_) for _ in input().split()]\n\nans = A * X + B * Y\n\nfor i in range(max(X, Y) + 1):\n\n    cost = 2 * C * i\n\n    if X > i:\n\n        cost += A * (X - i)\n\n    if Y > i:\n\n        cost += B * (Y - i)\n\n    ans = min(ans, cost)\n\nprint(ans)","target":"A, B, C, X, Y = [int(_) for _ in input().split()]\n\nM = max(X, Y)\n\nprint((min(2 * C * M, 2 * C * (X + Y - M) + A *\n\n          (M - Y) + B * (M - X), A * X + B * Y)))\n","code_v0_loc":10,"code_v1_loc":4,"code_v0_num_chars":250,"code_v1_num_chars":163,"code_v0_no_empty_lines":"A, B, C, X, Y = [int(_) for _ in input().split()]\nans = A * X + B * Y\nfor i in range(max(X, Y) + 1):\n    cost = 2 * C * i\n    if X > i:\n        cost += A * (X - i)\n    if Y > i:\n        cost += B * (Y - i)\n    ans = min(ans, cost)\nprint(ans)\n","code_v1_no_empty_lines":"A, B, C, X, Y = [int(_) for _ in input().split()]\nM = max(X, Y)\nprint((min(2 * C * M, 2 * C * (X + Y - M) + A * (M - Y) + B * (M - X), A * X + B * Y)))\n","code_same":false,"relative_loc_diff_percent":60.0,"diff":["-ans = A * X + B * Y","-for i in range(max(X, Y) + 1):","-    cost = 2 * C * i","-    if X > i:","-        cost += A * (X - i)","-    if Y > i:","-        cost += B * (Y - i)","-    ans = min(ans, cost)","-print(ans)","+M = max(X, Y)","+print((min(2 * C * M, 2 * C * (X + Y - M) + A * (M - Y) + B * (M - X), A * X + B * Y)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.5275072498,"measured_runtime_v1":0.332789422,"runtime_lift":1.5851082243,"key":["s272710522","s867287513"]}
{"user_id":"u678167152","problem_id":"p02899","language":"python","submission_id_v0":"s907108803","submission_id_v1":"s636537863","cpu_time_v0":642,"cpu_time_v1":86,"memory_v0":23368,"memory_v1":20468,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":86.6,"input":"import numpy\n\nN = int(input())\n\nA = list(map(int, input().split()))\n\ninds = numpy.argsort(A)\n\ninds+=1\n\nfor ind in inds:\n\n  print(ind, end=' ')\n","target":"N = int(eval(input()))\n\nA = list(map(int, input().split()))\n\nans = [0]*N\n\nfor i,a in enumerate(A):\n\n  ans[a-1] = i+1\n\nprint((*ans))","code_v0_loc":7,"code_v1_loc":6,"code_v0_num_chars":142,"code_v1_num_chars":123,"code_v0_no_empty_lines":"import numpy\n\nN = int(input())\nA = list(map(int, input().split()))\ninds = numpy.argsort(A)\ninds += 1\nfor ind in inds:\n    print(ind, end=\" \")\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = list(map(int, input().split()))\nans = [0] * N\nfor i, a in enumerate(A):\n    ans[a - 1] = i + 1\nprint((*ans))\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["-import numpy","-","-N = int(input())","+N = int(eval(input()))","-inds = numpy.argsort(A)","-inds += 1","-for ind in inds:","-    print(ind, end=\" \")","+ans = [0] * N","+for i, a in enumerate(A):","+    ans[a - 1] = i + 1","+print((*ans))"],"diff_only_import_comment":false,"measured_runtime_v0":1.787777245,"measured_runtime_v1":0.2704045452,"runtime_lift":6.6114911046,"key":["s907108803","s636537863"]}
{"user_id":"u691018832","problem_id":"p03945","language":"python","submission_id_v0":"s808413359","submission_id_v1":"s766599872","cpu_time_v0":84,"cpu_time_v1":46,"memory_v0":3188,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":45.24,"input":"s = eval(input())\n\nlen_s = len(s)\n\ncnt = [0, 0]\n\nfor i in range(1, len(s)):\n\n    memo_0 = s[i - 1]\n\n    memo_1 = s[len_s - i]\n\n    if s[i] != memo_0:\n\n        cnt[0] += 1\n\n    if s[len_s - i - 1] != memo_1:\n\n        cnt[1] += 1\n\nprint((min(cnt)))\n","target":"s = eval(input())\n\nlen_s = len(s)\n\ncnt = 0\n\nfor i in range(1, len(s)):\n\n    memo_0 = s[i - 1]\n\n    if s[i] != memo_0:\n\n        cnt += 1\n\nprint(cnt)\n","code_v0_loc":11,"code_v1_loc":8,"code_v0_num_chars":239,"code_v1_num_chars":142,"code_v0_no_empty_lines":"s = eval(input())\nlen_s = len(s)\ncnt = [0, 0]\nfor i in range(1, len(s)):\n    memo_0 = s[i - 1]\n    memo_1 = s[len_s - i]\n    if s[i] != memo_0:\n        cnt[0] += 1\n    if s[len_s - i - 1] != memo_1:\n        cnt[1] += 1\nprint((min(cnt)))\n","code_v1_no_empty_lines":"s = eval(input())\nlen_s = len(s)\ncnt = 0\nfor i in range(1, len(s)):\n    memo_0 = s[i - 1]\n    if s[i] != memo_0:\n        cnt += 1\nprint(cnt)\n","code_same":false,"relative_loc_diff_percent":27.2727272727,"diff":["-cnt = [0, 0]","+cnt = 0","-    memo_1 = s[len_s - i]","-        cnt[0] += 1","-    if s[len_s - i - 1] != memo_1:","-        cnt[1] += 1","-print((min(cnt)))","+        cnt += 1","+print(cnt)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3379861441,"measured_runtime_v1":0.264947257,"runtime_lift":1.2756733088,"key":["s808413359","s766599872"]}
{"user_id":"u832039789","problem_id":"p03371","language":"python","submission_id_v0":"s033280454","submission_id_v1":"s671785140","cpu_time_v0":346,"cpu_time_v1":137,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":60.4,"input":"import math\n\n\n\na,b,c,x,y = list(map(int,input().split()))\n\n\n\n# c\u3092\u5168\u63a2\u7d22\uff1f\n\nres = float('inf')\n\nfor i in range(max(x,y)*2+1):\n\n    money = i * c\n\n    if i\/2<x:\n\n        money += math.ceil(x-i\/2) * a\n\n    if i\/2<y:\n\n        money += math.ceil(y-i\/2) * b\n\n    res = min(res,money)\n\n\n\nprint(res)\n","target":"res = 10**30\n\na,b,c,x,y = list(map(int,input().split()))\n\nfor i in range(0,max(x,y)+1):\n\n    # AB\u30922*i\u307e\u3044\u8cb7\u3046\n\n    tmp = 2 * i * c\n\n    xx,yy = x - i, y - i\n\n    tmp += max(0,xx) * a\n\n    tmp += max(0,yy) * b\n\n    res = min(res, tmp)\n\nprint(res)\n","code_v0_loc":15,"code_v1_loc":10,"code_v0_num_chars":282,"code_v1_num_chars":236,"code_v0_no_empty_lines":"import math\n\na, b, c, x, y = list(map(int, input().split()))\n# c\u3092\u5168\u63a2\u7d22\uff1f\nres = float(\"inf\")\nfor i in range(max(x, y) * 2 + 1):\n    money = i * c\n    if i \/ 2 < x:\n        money += math.ceil(x - i \/ 2) * a\n    if i \/ 2 < y:\n        money += math.ceil(y - i \/ 2) * b\n    res = min(res, money)\nprint(res)\n","code_v1_no_empty_lines":"res = 10**30\na, b, c, x, y = list(map(int, input().split()))\nfor i in range(0, max(x, y) + 1):\n    # AB\u30922*i\u307e\u3044\u8cb7\u3046\n    tmp = 2 * i * c\n    xx, yy = x - i, y - i\n    tmp += max(0, xx) * a\n    tmp += max(0, yy) * b\n    res = min(res, tmp)\nprint(res)\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-import math","-","+res = 10**30","-# c\u3092\u5168\u63a2\u7d22\uff1f","-res = float(\"inf\")","-for i in range(max(x, y) * 2 + 1):","-    money = i * c","-    if i \/ 2 < x:","-        money += math.ceil(x - i \/ 2) * a","-    if i \/ 2 < y:","-        money += math.ceil(y - i \/ 2) * b","-    res = min(res, money)","+for i in range(0, max(x, y) + 1):","+    # AB\u30922*i\u307e\u3044\u8cb7\u3046","+    tmp = 2 * i * c","+    xx, yy = x - i, y - i","+    tmp += max(0, xx) * a","+    tmp += max(0, yy) * b","+    res = min(res, tmp)"],"diff_only_import_comment":false,"measured_runtime_v0":0.5334089909,"measured_runtime_v1":0.3933609753,"runtime_lift":1.3560292566,"key":["s033280454","s671785140"]}
{"user_id":"u644907318","problem_id":"p03640","language":"python","submission_id_v0":"s119147613","submission_id_v1":"s968932958","cpu_time_v0":239,"cpu_time_v1":124,"memory_v0":45168,"memory_v1":74520,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":48.12,"input":"H,W = list(map(int,input().split()))\n\nN = int(eval(input()))\n\nA = list(map(int,input().split()))\n\nA.insert(0,0)\n\nC = [[0 for _ in range(W)] for _ in range(H)]\n\ncur = [0,0,\"R\"]\n\nfor k in range(1,N+1):\n\n#     ipdb.set_trace()\n\n    a = A[k]\n\n    cnt = 0\n\n    y,x,d = cur\n\n    for i in range(y,H):\n\n        y = i\n\n        if d==\"R\":\n\n            for j in range(x,W):\n\n                C[i][j]=str(k)\n\n                cnt += 1\n\n                if j+1<W:\n\n                    x = j+1\n\n                else:\n\n                    x = j\n\n                if cnt==a:break\n\n            if cnt==a:break\n\n            d=\"L\"\n\n        else:\n\n            for j in range(x,-1,-1):\n\n                C[i][j]=str(k)\n\n                cnt += 1\n\n                if j>=1:\n\n                    x = j-1\n\n                else:\n\n                    x = 0\n\n                if cnt==a:break\n\n            if cnt==a:break\n\n            d=\"R\"\n\n    if x==W-1:\n\n        if C[y][x]!=0:\n\n            y += 1\n\n            d=\"L\"\n\n    elif x==0:\n\n        if C[y][x]!=0:\n\n            y += 1\n\n            d=\"R\"\n\n    cur = [y,x,d]                \n\nfor i in range(H):\n\n    print((*C[i]))","target":"H,W = list(map(int,input().split()))\n\nN = int(eval(input()))\n\nA = list(map(int,input().split()))\n\nA.insert(0,0)\n\nB = [[0 for _ in range(W)] for _ in range(H)]\n\ncol = 1\n\ncnt = 0\n\ny = 0\n\nx = 0\n\nd = \"R\"\n\nwhile y<H:\n\n    if cnt<A[col]:\n\n        B[y][x] = col\n\n        cnt += 1\n\n    else:\n\n        col += 1\n\n        cnt = 0\n\n        B[y][x] = col\n\n        cnt += 1\n\n    if x<W-1 and d==\"R\":\n\n        x += 1\n\n    elif x==W-1 and d==\"R\":\n\n        y += 1\n\n        d = \"L\"\n\n    elif d==\"L\" and x>0:\n\n        x -= 1\n\n    elif d==\"L\" and x==0:\n\n        y += 1\n\n        d = \"R\"\n\nfor i in range(H):\n\n    print((*B[i]))","code_v0_loc":46,"code_v1_loc":31,"code_v0_num_chars":1123,"code_v1_num_chars":591,"code_v0_no_empty_lines":"H, W = list(map(int, input().split()))\nN = int(eval(input()))\nA = list(map(int, input().split()))\nA.insert(0, 0)\nC = [[0 for _ in range(W)] for _ in range(H)]\ncur = [0, 0, \"R\"]\nfor k in range(1, N + 1):\n    #     ipdb.set_trace()\n    a = A[k]\n    cnt = 0\n    y, x, d = cur\n    for i in range(y, H):\n        y = i\n        if d == \"R\":\n            for j in range(x, W):\n                C[i][j] = str(k)\n                cnt += 1\n                if j + 1 < W:\n                    x = j + 1\n                else:\n                    x = j\n                if cnt == a:\n                    break\n            if cnt == a:\n                break\n            d = \"L\"\n        else:\n            for j in range(x, -1, -1):\n                C[i][j] = str(k)\n                cnt += 1\n                if j >= 1:\n                    x = j - 1\n                else:\n                    x = 0\n                if cnt == a:\n                    break\n            if cnt == a:\n                break\n            d = \"R\"\n    if x == W - 1:\n        if C[y][x] != 0:\n            y += 1\n            d = \"L\"\n    elif x == 0:\n        if C[y][x] != 0:\n            y += 1\n            d = \"R\"\n    cur = [y, x, d]\nfor i in range(H):\n    print((*C[i]))\n","code_v1_no_empty_lines":"H, W = list(map(int, input().split()))\nN = int(eval(input()))\nA = list(map(int, input().split()))\nA.insert(0, 0)\nB = [[0 for _ in range(W)] for _ in range(H)]\ncol = 1\ncnt = 0\ny = 0\nx = 0\nd = \"R\"\nwhile y < H:\n    if cnt < A[col]:\n        B[y][x] = col\n        cnt += 1\n    else:\n        col += 1\n        cnt = 0\n        B[y][x] = col\n        cnt += 1\n    if x < W - 1 and d == \"R\":\n        x += 1\n    elif x == W - 1 and d == \"R\":\n        y += 1\n        d = \"L\"\n    elif d == \"L\" and x > 0:\n        x -= 1\n    elif d == \"L\" and x == 0:\n        y += 1\n        d = \"R\"\nfor i in range(H):\n    print((*B[i]))\n","code_same":false,"relative_loc_diff_percent":32.6086956522,"diff":["-C = [[0 for _ in range(W)] for _ in range(H)]","-cur = [0, 0, \"R\"]","-for k in range(1, N + 1):","-    #     ipdb.set_trace()","-    a = A[k]","-    cnt = 0","-    y, x, d = cur","-    for i in range(y, H):","-        y = i","-        if d == \"R\":","-            for j in range(x, W):","-                C[i][j] = str(k)","-                cnt += 1","-                if j + 1 < W:","-                    x = j + 1","-                else:","-                    x = j","-                if cnt == a:","-                    break","-            if cnt == a:","-                break","-            d = \"L\"","-        else:","-            for j in range(x, -1, -1):","-                C[i][j] = str(k)","-                cnt += 1","-                if j >= 1:","-                    x = j - 1","-                else:","-                    x = 0","-                if cnt == a:","-                    break","-            if cnt == a:","-                break","-            d = \"R\"","-    if x == W - 1:","-        if C[y][x] != 0:","-            y += 1","-            d = \"L\"","-    elif x == 0:","-        if C[y][x] != 0:","-            y += 1","-            d = \"R\"","-    cur = [y, x, d]","+B = [[0 for _ in range(W)] for _ in range(H)]","+col = 1","+cnt = 0","+y = 0","+x = 0","+d = \"R\"","+while y < H:","+    if cnt < A[col]:","+        B[y][x] = col","+        cnt += 1","+    else:","+        col += 1","+        cnt = 0","+        B[y][x] = col","+        cnt += 1","+    if x < W - 1 and d == \"R\":","+        x += 1","+    elif x == W - 1 and d == \"R\":","+        y += 1","+        d = \"L\"","+    elif d == \"L\" and x > 0:","+        x -= 1","+    elif d == \"L\" and x == 0:","+        y += 1","+        d = \"R\"","-    print((*C[i]))","+    print((*B[i]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3307979391,"measured_runtime_v1":0.2498238492,"runtime_lift":1.3241247387,"key":["s119147613","s968932958"]}
{"user_id":"u095021077","problem_id":"p03000","language":"python","submission_id_v0":"s539723186","submission_id_v1":"s999737072","cpu_time_v0":153,"cpu_time_v1":18,"memory_v0":12468,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.24,"input":"import numpy as np\n\n\n\ntemp=list(map(int, input().split()))\n\n\n\nN=temp[0]\n\nX=temp[1]\n\n\n\nL=list(map(int, input().split()))\n\n\n\nind=1\n\nwhile np.sum(L[:ind])<=X and ind<=N:\n\n  ind+=1\n\n  \n\nprint(ind)","target":"N, X=list(map(int, input().split()))\n\nL=list(map(int, input().split()))\n\nL=[0]+L\n\n \n\nl=int(0)\n\ncounter=int(0)\n\nwhile l+L[counter]<=X and counter<=N:\n\n  l+=L[counter]\n\n  counter+=int(1)\n\n  if counter==N+1:\n\n    break\n\n  \n\nprint(counter)","code_v0_loc":14,"code_v1_loc":13,"code_v0_num_chars":192,"code_v1_num_chars":229,"code_v0_no_empty_lines":"import numpy as np\n\ntemp = list(map(int, input().split()))\nN = temp[0]\nX = temp[1]\nL = list(map(int, input().split()))\nind = 1\nwhile np.sum(L[:ind]) <= X and ind <= N:\n    ind += 1\nprint(ind)\n","code_v1_no_empty_lines":"N, X = list(map(int, input().split()))\nL = list(map(int, input().split()))\nL = [0] + L\nl = int(0)\ncounter = int(0)\nwhile l + L[counter] <= X and counter <= N:\n    l += L[counter]\n    counter += int(1)\n    if counter == N + 1:\n        break\nprint(counter)\n","code_same":false,"relative_loc_diff_percent":7.1428571429,"diff":["-import numpy as np","-","-temp = list(map(int, input().split()))","-N = temp[0]","-X = temp[1]","+N, X = list(map(int, input().split()))","-ind = 1","-while np.sum(L[:ind]) <= X and ind <= N:","-    ind += 1","-print(ind)","+L = [0] + L","+l = int(0)","+counter = int(0)","+while l + L[counter] <= X and counter <= N:","+    l += L[counter]","+    counter += int(1)","+    if counter == N + 1:","+        break","+print(counter)"],"diff_only_import_comment":false,"measured_runtime_v0":1.2074212677,"measured_runtime_v1":0.1849545254,"runtime_lift":6.5282061368,"key":["s539723186","s999737072"]}
{"user_id":"u492447501","problem_id":"p02988","language":"python","submission_id_v0":"s007840106","submission_id_v1":"s122872076","cpu_time_v0":150,"cpu_time_v1":18,"memory_v0":12508,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.0,"input":"import copy\n\nimport numpy as np\n\n\n\nS = eval(input())\n\n\n\nN = int(S)\n\n\n\nS = eval(input())\n\n\n\nP = list(map(int, S.split()))\n\n\n\ncheck = []\n\n\n\ncount = 0\n\n\n\nfor i in range(0, N-2, 1):\n\n\n\n    check = P[i:i+3]\n\n    check = np.array(check)\n\n    check = check.argsort()\n\n    if check[1] == 1:\n\n        count = count + 1\n\n\n\nprint(count)\n","target":"n = int(eval(input()))\n\nP = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(n-2):\n\n\n\n    P_temp = [P[i], P[i+1], P[i+2]]\n\n    P_temp.sort()\n\n    if P_temp[1] == P[i+1]:\n\n        count = count + 1\n\n\n\nprint(count)\n","code_v0_loc":24,"code_v1_loc":11,"code_v0_num_chars":314,"code_v1_num_chars":217,"code_v0_no_empty_lines":"import copy\nimport numpy as np\n\nS = eval(input())\nN = int(S)\nS = eval(input())\nP = list(map(int, S.split()))\ncheck = []\ncount = 0\nfor i in range(0, N - 2, 1):\n    check = P[i : i + 3]\n    check = np.array(check)\n    check = check.argsort()\n    if check[1] == 1:\n        count = count + 1\nprint(count)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nP = list(map(int, input().split()))\ncount = 0\nfor i in range(n - 2):\n    P_temp = [P[i], P[i + 1], P[i + 2]]\n    P_temp.sort()\n    if P_temp[1] == P[i + 1]:\n        count = count + 1\nprint(count)\n","code_same":false,"relative_loc_diff_percent":54.1666666667,"diff":["-import copy","-import numpy as np","-","-S = eval(input())","-N = int(S)","-S = eval(input())","-P = list(map(int, S.split()))","-check = []","+n = int(eval(input()))","+P = list(map(int, input().split()))","-for i in range(0, N - 2, 1):","-    check = P[i : i + 3]","-    check = np.array(check)","-    check = check.argsort()","-    if check[1] == 1:","+for i in range(n - 2):","+    P_temp = [P[i], P[i + 1], P[i + 2]]","+    P_temp.sort()","+    if P_temp[1] == P[i + 1]:"],"diff_only_import_comment":false,"measured_runtime_v0":1.5926496607,"measured_runtime_v1":0.1723277428,"runtime_lift":9.2419806274,"key":["s007840106","s122872076"]}
{"user_id":"u562016607","problem_id":"p03558","language":"python","submission_id_v0":"s159640382","submission_id_v1":"s651180421","cpu_time_v0":376,"cpu_time_v1":167,"memory_v0":8948,"memory_v1":6060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":55.59,"input":"import heapq\n\nK=int(eval(input()))\n\ndist=[10**15 for i in range(K)]\n\ndist[1]=1\n\nq=[]\n\nheapq.heappush(q,(0,1))\n\nwhile (len(q)!=0):\n\n    prc,src=heapq.heappop(q)\n\n    if dist[src]<prc:\n\n        continue\n\n    if dist[(src+1)%K]>dist[src]+1:\n\n        dist[(src+1)%K]=dist[src]+1\n\n        heapq.heappush(q,(dist[(src+1)%K],(src+1)%K))\n\n    if dist[(10*src)%K]>dist[src]:\n\n        dist[(10*src)%K]=dist[src]\n\n        heapq.heappush(q,(dist[(src*10)%K],(src*10)%K))\n\nprint((dist[0]))\n","target":"from collections import deque\n\nK=int(eval(input()))\n\ndist=[10**15 for i in range(K)]\n\ndist[1]=1\n\nq=deque([1])\n\nwhile(len(q)>0):\n\n    r=q.popleft()\n\n    s=(r+1)%K\n\n    if dist[r]+1<dist[s]:\n\n        dist[s]=dist[r]+1\n\n        q.append(s)\n\n    t=(r*10)%K\n\n    if dist[r]<dist[t]:\n\n        dist[t]=dist[r]\n\n        q.appendleft(t)\n\nprint((dist[0]))\n","code_v0_loc":17,"code_v1_loc":16,"code_v0_num_chars":469,"code_v1_num_chars":338,"code_v0_no_empty_lines":"import heapq\n\nK = int(eval(input()))\ndist = [10**15 for i in range(K)]\ndist[1] = 1\nq = []\nheapq.heappush(q, (0, 1))\nwhile len(q) != 0:\n    prc, src = heapq.heappop(q)\n    if dist[src] < prc:\n        continue\n    if dist[(src + 1) % K] > dist[src] + 1:\n        dist[(src + 1) % K] = dist[src] + 1\n        heapq.heappush(q, (dist[(src + 1) % K], (src + 1) % K))\n    if dist[(10 * src) % K] > dist[src]:\n        dist[(10 * src) % K] = dist[src]\n        heapq.heappush(q, (dist[(src * 10) % K], (src * 10) % K))\nprint((dist[0]))\n","code_v1_no_empty_lines":"from collections import deque\n\nK = int(eval(input()))\ndist = [10**15 for i in range(K)]\ndist[1] = 1\nq = deque([1])\nwhile len(q) > 0:\n    r = q.popleft()\n    s = (r + 1) % K\n    if dist[r] + 1 < dist[s]:\n        dist[s] = dist[r] + 1\n        q.append(s)\n    t = (r * 10) % K\n    if dist[r] < dist[t]:\n        dist[t] = dist[r]\n        q.appendleft(t)\nprint((dist[0]))\n","code_same":false,"relative_loc_diff_percent":5.8823529412,"diff":["-import heapq","+from collections import deque","-q = []","-heapq.heappush(q, (0, 1))","-while len(q) != 0:","-    prc, src = heapq.heappop(q)","-    if dist[src] < prc:","-        continue","-    if dist[(src + 1) % K] > dist[src] + 1:","-        dist[(src + 1) % K] = dist[src] + 1","-        heapq.heappush(q, (dist[(src + 1) % K], (src + 1) % K))","-    if dist[(10 * src) % K] > dist[src]:","-        dist[(10 * src) % K] = dist[src]","-        heapq.heappush(q, (dist[(src * 10) % K], (src * 10) % K))","+q = deque([1])","+while len(q) > 0:","+    r = q.popleft()","+    s = (r + 1) % K","+    if dist[r] + 1 < dist[s]:","+        dist[s] = dist[r] + 1","+        q.append(s)","+    t = (r * 10) % K","+    if dist[r] < dist[t]:","+        dist[t] = dist[r]","+        q.appendleft(t)"],"diff_only_import_comment":false,"measured_runtime_v0":0.4453229659,"measured_runtime_v1":0.2901842129,"runtime_lift":1.5346216162,"key":["s159640382","s651180421"]}
{"user_id":"u531220228","problem_id":"p02994","language":"python","submission_id_v0":"s833148158","submission_id_v1":"s512634929","cpu_time_v0":155,"cpu_time_v1":19,"memory_v0":12404,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.74,"input":"import numpy as np\n\nN,L = list(map(int, input().split()))\n\ntaste = np.array([L+i-1 for i in range(1,N+1)])\n\nif taste[-1] < 0:\n\n  print((sum(taste) + min(np.abs(taste))))\n\nelse:\n\n  print((sum(taste) - min(np.abs(taste))))","target":"N,L = list(map(int, input().split()))\n\ntaste = [L+i-1 for i in range(1,N+1)]\n\nif taste[-1] < 0:\n\n  print((sum(taste) + min([abs(x) for x in taste])))\n\nelse:\n\n  print((sum(taste) - min([abs(x) for x in taste])))","code_v0_loc":7,"code_v1_loc":6,"code_v0_num_chars":210,"code_v1_num_chars":200,"code_v0_no_empty_lines":"import numpy as np\n\nN, L = list(map(int, input().split()))\ntaste = np.array([L + i - 1 for i in range(1, N + 1)])\nif taste[-1] < 0:\n    print((sum(taste) + min(np.abs(taste))))\nelse:\n    print((sum(taste) - min(np.abs(taste))))\n","code_v1_no_empty_lines":"N, L = list(map(int, input().split()))\ntaste = [L + i - 1 for i in range(1, N + 1)]\nif taste[-1] < 0:\n    print((sum(taste) + min([abs(x) for x in taste])))\nelse:\n    print((sum(taste) - min([abs(x) for x in taste])))\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["-import numpy as np","-","-taste = np.array([L + i - 1 for i in range(1, N + 1)])","+taste = [L + i - 1 for i in range(1, N + 1)]","-    print((sum(taste) + min(np.abs(taste))))","+    print((sum(taste) + min([abs(x) for x in taste])))","-    print((sum(taste) - min(np.abs(taste))))","+    print((sum(taste) - min([abs(x) for x in taste])))"],"diff_only_import_comment":false,"measured_runtime_v0":1.945645529,"measured_runtime_v1":0.3334629779,"runtime_lift":5.8346672884,"key":["s833148158","s512634929"]}
{"user_id":"u645250356","problem_id":"p02899","language":"python","submission_id_v0":"s344747010","submission_id_v1":"s621981799","cpu_time_v0":434,"cpu_time_v1":102,"memory_v0":70376,"memory_v1":21544,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":76.5,"input":"from collections import Counter,defaultdict,deque\n\nimport sys,heapq,bisect,math,itertools,string,queue\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\ndef inp(): return int(sys.stdin.readline())\n\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\ndef inpl_str(): return list(sys.stdin.readline().split())\n\ndef inpln(n): return list(int(sys.stdin.readline()) for i in range(n))\n\n\n\nn = inp()\n\na = inpl()\n\naa = []\n\nfor i in range(n):\n\n    aa.append([i+1,a[i]])\n\naa.sort(key=lambda x:x[1])\n\nfor i in range(n):\n\n    print((aa[i][0]))\n\n\n","target":"from collections import Counter,defaultdict,deque\n\nfrom heapq import heappop,heappush\n\nfrom bisect import bisect_left,bisect_right \n\nimport sys,math,itertools,fractions\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\nINF = float('inf')\n\ndef inp(): return int(sys.stdin.readline())\n\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\n\n\nn = inp()\n\na = inpl()\n\nres = [0] * n\n\nfor i,x in enumerate(a):\n\n    res[x-1] = i+1\n\nprint((*res))\n","code_v0_loc":18,"code_v1_loc":16,"code_v0_num_chars":541,"code_v1_num_chars":443,"code_v0_no_empty_lines":"from collections import Counter, defaultdict, deque\nimport sys, heapq, bisect, math, itertools, string, queue\n\nsys.setrecursionlimit(10**8)\nmod = 10**9 + 7\n\n\ndef inp():\n    return int(sys.stdin.readline())\n\n\ndef inpl():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef inpl_str():\n    return list(sys.stdin.readline().split())\n\n\ndef inpln(n):\n    return list(int(sys.stdin.readline()) for i in range(n))\n\n\nn = inp()\na = inpl()\naa = []\nfor i in range(n):\n    aa.append([i + 1, a[i]])\naa.sort(key=lambda x: x[1])\nfor i in range(n):\n    print((aa[i][0]))\n","code_v1_no_empty_lines":"from collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush\nfrom bisect import bisect_left, bisect_right\nimport sys, math, itertools, fractions\n\nsys.setrecursionlimit(10**8)\nmod = 10**9 + 7\nINF = float(\"inf\")\n\n\ndef inp():\n    return int(sys.stdin.readline())\n\n\ndef inpl():\n    return list(map(int, sys.stdin.readline().split()))\n\n\nn = inp()\na = inpl()\nres = [0] * n\nfor i, x in enumerate(a):\n    res[x - 1] = i + 1\nprint((*res))\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["-import sys, heapq, bisect, math, itertools, string, queue","+from heapq import heappop, heappush","+from bisect import bisect_left, bisect_right","+import sys, math, itertools, fractions","+INF = float(\"inf\")","-def inpl_str():","-    return list(sys.stdin.readline().split())","-","-","-def inpln(n):","-    return list(int(sys.stdin.readline()) for i in range(n))","-","-","-aa = []","-for i in range(n):","-    aa.append([i + 1, a[i]])","-aa.sort(key=lambda x: x[1])","-for i in range(n):","-    print((aa[i][0]))","+res = [0] * n","+for i, x in enumerate(a):","+    res[x - 1] = i + 1","+print((*res))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2881344714,"measured_runtime_v1":0.207670383,"runtime_lift":1.3874605868,"key":["s344747010","s621981799"]}
{"user_id":"u049979154","problem_id":"p03371","language":"python","submission_id_v0":"s167074309","submission_id_v1":"s223988235","cpu_time_v0":207,"cpu_time_v1":20,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":90.34,"input":"a, b, c, x, y = list(map(int, input().split()))\n\n\n\nans = float('inf')\n\n\n\nfor i in range(2 * 10**5 + 1):\n\n    ans = min(ans, a * max(x - i, 0) + b * max(y - i, 0) + 2 * c * i)\n\n\n\nprint(ans)","target":"A,B,C,X,Y = list(map(int,input().split()))\n\nmin_xy = min(X,Y)\n\nmax_xy = max(X,Y)\n\nans1 = 2 * C * min_xy + A * (X-min_xy) + B * (Y-min_xy) # \u7121\u99c4\u306b\u306a\u3089\u306a\u3044\u7bc4\u56f2\u3067AB\u30d4\u30b6\u3092\u8cb7\u3044\u3001\u6b8b\u308a\u3092\u8cb7\u3046\n\nans2 = A*X + B*Y # AB\u30d4\u30b6\u3092\u8cb7\u308f\u306a\u3044\n\nans3 = 2 * C * max_xy # AB\u30d4\u30b6\u3060\u3051\u3092\u8cb7\u3046\n\nprint((min(ans1,ans2,ans3)))","code_v0_loc":8,"code_v1_loc":7,"code_v0_num_chars":182,"code_v1_num_chars":251,"code_v0_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nans = float(\"inf\")\nfor i in range(2 * 10**5 + 1):\n    ans = min(ans, a * max(x - i, 0) + b * max(y - i, 0) + 2 * c * i)\nprint(ans)\n","code_v1_no_empty_lines":"A, B, C, X, Y = list(map(int, input().split()))\nmin_xy = min(X, Y)\nmax_xy = max(X, Y)\nans1 = 2 * C * min_xy + A * (X - min_xy) + B * (Y - min_xy)  # \u7121\u99c4\u306b\u306a\u3089\u306a\u3044\u7bc4\u56f2\u3067AB\u30d4\u30b6\u3092\u8cb7\u3044\u3001\u6b8b\u308a\u3092\u8cb7\u3046\nans2 = A * X + B * Y  # AB\u30d4\u30b6\u3092\u8cb7\u308f\u306a\u3044\nans3 = 2 * C * max_xy  # AB\u30d4\u30b6\u3060\u3051\u3092\u8cb7\u3046\nprint((min(ans1, ans2, ans3)))\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-a, b, c, x, y = list(map(int, input().split()))","-ans = float(\"inf\")","-for i in range(2 * 10**5 + 1):","-    ans = min(ans, a * max(x - i, 0) + b * max(y - i, 0) + 2 * c * i)","-print(ans)","+A, B, C, X, Y = list(map(int, input().split()))","+min_xy = min(X, Y)","+max_xy = max(X, Y)","+ans1 = 2 * C * min_xy + A * (X - min_xy) + B * (Y - min_xy)  # \u7121\u99c4\u306b\u306a\u3089\u306a\u3044\u7bc4\u56f2\u3067AB\u30d4\u30b6\u3092\u8cb7\u3044\u3001\u6b8b\u308a\u3092\u8cb7\u3046","+ans2 = A * X + B * Y  # AB\u30d4\u30b6\u3092\u8cb7\u308f\u306a\u3044","+ans3 = 2 * C * max_xy  # AB\u30d4\u30b6\u3060\u3051\u3092\u8cb7\u3046","+print((min(ans1, ans2, ans3)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.9003799064,"measured_runtime_v1":0.2384188967,"runtime_lift":7.9707604256,"key":["s167074309","s223988235"]}
{"user_id":"u287132915","problem_id":"p02792","language":"python","submission_id_v0":"s161079550","submission_id_v1":"s476355973","cpu_time_v0":369,"cpu_time_v1":198,"memory_v0":46468,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":46.34,"input":"n = int(eval(input()))\n\n\n\ncnt = 0\n\nfor i in range(1, n+1):\n\n    i_str = str(i)\n\n    if len(i_str) == 1:\n\n        cnt += 1\n\n        continue\n\n    if len(i_str) == 2:\n\n        if int(i_str[0]) == int(i_str[1]):\n\n            cnt += 3\n\n        elif int(i_str[1]) != 0 and int(i_str[0]) > int(i_str[1]):\n\n            cnt += 2\n\n        continue\n\n    if len(i_str) == 3:\n\n        if int(i_str[0]) == int(i_str[2]):\n\n            cnt += 4 + (2 * (int(i_str[1])+1) - 1)\n\n        elif int(i_str[2]) != 0 and int(i_str[0]) > int(i_str[2]):\n\n            cnt += 22\n\n        elif int(i_str[0]) < int(i_str[2]):\n\n            cnt += 2\n\n        continue\n\n    if len(i_str) == 4:\n\n        if int(i_str[0]) == int(i_str[3]):\n\n            cnt += 24 + 20 * int(i_str[1]) + 2 * (int(i_str[2])+1) - 1\n\n        elif int(i_str[3]) != 0 and int(i_str[0]) > int(i_str[3]):\n\n            cnt += 222\n\n        elif int(i_str[0]) < int(i_str[3]):\n\n            cnt += 22\n\n        continue\n\n    if len(i_str) == 5:\n\n        if int(i_str[0]) == int(i_str[4]):\n\n            cnt += 224 + 200 * int(i_str[1]) + 20 * int(i_str[2]) + 2 * (int(i_str[3])+1) - 1\n\n        elif int(i_str[4]) != 0 and int(i_str[0]) > int(i_str[4]):\n\n            cnt += 2222\n\n        elif int(i_str[0]) < int(i_str[4]):\n\n            cnt += 222\n\n        continue\n\n    if len(i_str) == 6:\n\n        if int(i_str[0]) == int(i_str[5]):\n\n            cnt += 2224 + 2000 * int(i_str[1]) + 200 * int(i_str[2]) + 20 * int(i_str[3]) + 2 * (int(i_str[4])+1) - 1\n\n        elif int(i_str[5]) != 0 and int(i_str[0]) > int(i_str[5]):\n\n            cnt += 22222\n\n        elif int(i_str[0]) < int(i_str[5]):\n\n            cnt += 2222\n\n        continue\n\n\n\nprint(cnt)","target":"n = int(eval(input()))\n\n\n\nc = [[0 for _ in range(10)] for __ in range(10)]\n\nfor i in range(1, n+1):\n\n    str_i = str(i)\n\n    head = int(str_i[0])\n\n    tail = int(str_i[-1])\n\n    c[head][tail] += 1\n\n\n\ncnt = 0\n\nfor i in range(10):\n\n    for j in range(10):\n\n        cnt += c[i][j] * c[j][i]\n\n\n\nprint(cnt)","code_v0_loc":48,"code_v1_loc":15,"code_v0_num_chars":1676,"code_v1_num_chars":295,"code_v0_no_empty_lines":"n = int(eval(input()))\ncnt = 0\nfor i in range(1, n + 1):\n    i_str = str(i)\n    if len(i_str) == 1:\n        cnt += 1\n        continue\n    if len(i_str) == 2:\n        if int(i_str[0]) == int(i_str[1]):\n            cnt += 3\n        elif int(i_str[1]) != 0 and int(i_str[0]) > int(i_str[1]):\n            cnt += 2\n        continue\n    if len(i_str) == 3:\n        if int(i_str[0]) == int(i_str[2]):\n            cnt += 4 + (2 * (int(i_str[1]) + 1) - 1)\n        elif int(i_str[2]) != 0 and int(i_str[0]) > int(i_str[2]):\n            cnt += 22\n        elif int(i_str[0]) < int(i_str[2]):\n            cnt += 2\n        continue\n    if len(i_str) == 4:\n        if int(i_str[0]) == int(i_str[3]):\n            cnt += 24 + 20 * int(i_str[1]) + 2 * (int(i_str[2]) + 1) - 1\n        elif int(i_str[3]) != 0 and int(i_str[0]) > int(i_str[3]):\n            cnt += 222\n        elif int(i_str[0]) < int(i_str[3]):\n            cnt += 22\n        continue\n    if len(i_str) == 5:\n        if int(i_str[0]) == int(i_str[4]):\n            cnt += (\n                224\n                + 200 * int(i_str[1])\n                + 20 * int(i_str[2])\n                + 2 * (int(i_str[3]) + 1)\n                - 1\n            )\n        elif int(i_str[4]) != 0 and int(i_str[0]) > int(i_str[4]):\n            cnt += 2222\n        elif int(i_str[0]) < int(i_str[4]):\n            cnt += 222\n        continue\n    if len(i_str) == 6:\n        if int(i_str[0]) == int(i_str[5]):\n            cnt += (\n                2224\n                + 2000 * int(i_str[1])\n                + 200 * int(i_str[2])\n                + 20 * int(i_str[3])\n                + 2 * (int(i_str[4]) + 1)\n                - 1\n            )\n        elif int(i_str[5]) != 0 and int(i_str[0]) > int(i_str[5]):\n            cnt += 22222\n        elif int(i_str[0]) < int(i_str[5]):\n            cnt += 2222\n        continue\nprint(cnt)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nc = [[0 for _ in range(10)] for __ in range(10)]\nfor i in range(1, n + 1):\n    str_i = str(i)\n    head = int(str_i[0])\n    tail = int(str_i[-1])\n    c[head][tail] += 1\ncnt = 0\nfor i in range(10):\n    for j in range(10):\n        cnt += c[i][j] * c[j][i]\nprint(cnt)\n","code_same":false,"relative_loc_diff_percent":68.75,"diff":["+c = [[0 for _ in range(10)] for __ in range(10)]","+for i in range(1, n + 1):","+    str_i = str(i)","+    head = int(str_i[0])","+    tail = int(str_i[-1])","+    c[head][tail] += 1","-for i in range(1, n + 1):","-    i_str = str(i)","-    if len(i_str) == 1:","-        cnt += 1","-        continue","-    if len(i_str) == 2:","-        if int(i_str[0]) == int(i_str[1]):","-            cnt += 3","-        elif int(i_str[1]) != 0 and int(i_str[0]) > int(i_str[1]):","-            cnt += 2","-        continue","-    if len(i_str) == 3:","-        if int(i_str[0]) == int(i_str[2]):","-            cnt += 4 + (2 * (int(i_str[1]) + 1) - 1)","-        elif int(i_str[2]) != 0 and int(i_str[0]) > int(i_str[2]):","-            cnt += 22","-        elif int(i_str[0]) < int(i_str[2]):","-            cnt += 2","-        continue","-    if len(i_str) == 4:","-        if int(i_str[0]) == int(i_str[3]):","-            cnt += 24 + 20 * int(i_str[1]) + 2 * (int(i_str[2]) + 1) - 1","-        elif int(i_str[3]) != 0 and int(i_str[0]) > int(i_str[3]):","-            cnt += 222","-        elif int(i_str[0]) < int(i_str[3]):","-            cnt += 22","-        continue","-    if len(i_str) == 5:","-        if int(i_str[0]) == int(i_str[4]):","-            cnt += (","-                224","-                + 200 * int(i_str[1])","-                + 20 * int(i_str[2])","-                + 2 * (int(i_str[3]) + 1)","-                - 1","-            )","-        elif int(i_str[4]) != 0 and int(i_str[0]) > int(i_str[4]):","-            cnt += 2222","-        elif int(i_str[0]) < int(i_str[4]):","-            cnt += 222","-        continue","-    if len(i_str) == 6:","-        if int(i_str[0]) == int(i_str[5]):","-            cnt += (","-                2224","-                + 2000 * int(i_str[1])","-                + 200 * int(i_str[2])","-                + 20 * int(i_str[3])","-                + 2 * (int(i_str[4]) + 1)","-                - 1","-            )","-        elif int(i_str[5]) != 0 and int(i_str[0]) > int(i_str[5]):","-            cnt += 22222","-        elif int(i_str[0]) < int(i_str[5]):","-            cnt += 2222","-        continue","+for i in range(10):","+    for j in range(10):","+        cnt += c[i][j] * c[j][i]"],"diff_only_import_comment":false,"measured_runtime_v0":0.528624272,"measured_runtime_v1":0.3498814137,"runtime_lift":1.5108669718,"key":["s161079550","s476355973"]}
{"user_id":"u285681431","problem_id":"p03796","language":"python","submission_id_v0":"s922366861","submission_id_v1":"s031671477","cpu_time_v0":154,"cpu_time_v1":82,"memory_v0":9940,"memory_v1":62860,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":46.75,"input":"import math\n\n\n\nN = int(eval(input()))\n\nans = math.factorial(N) % (10**9 + 7)\n\nprint(ans)","target":"N = int(eval(input()))\n\nmod = 10**9 + 7\n\nans = 1\n\nfor i in range(1, N + 1):\n\n    ans *= i\n\n    ans %= mod\n\nprint(ans)\n","code_v0_loc":5,"code_v1_loc":7,"code_v0_num_chars":82,"code_v1_num_chars":112,"code_v0_no_empty_lines":"import math\n\nN = int(eval(input()))\nans = math.factorial(N) % (10**9 + 7)\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nmod = 10**9 + 7\nans = 1\nfor i in range(1, N + 1):\n    ans *= i\n    ans %= mod\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":28.5714285714,"diff":["-import math","-","-ans = math.factorial(N) % (10**9 + 7)","+mod = 10**9 + 7","+ans = 1","+for i in range(1, N + 1):","+    ans *= i","+    ans %= mod"],"diff_only_import_comment":false,"measured_runtime_v0":0.599384095,"measured_runtime_v1":0.2730524833,"runtime_lift":2.1951241301,"key":["s922366861","s031671477"]}
{"user_id":"u562935282","problem_id":"p03038","language":"python","submission_id_v0":"s653342727","submission_id_v1":"s579349204","cpu_time_v0":535,"cpu_time_v1":476,"memory_v0":31964,"memory_v1":42656,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.03,"input":"from heapq import heappop, heappush\n\n\n\nn, m = list(map(int, input().split()))\n\na = tuple(map(int, input().split()))\n\n\n\nhq = []\n\nfor aa in a:\n\n    heappush(hq, (-aa, 1))\n\n\n\nfor _ in range(m):\n\n    b, c = list(map(int, input().split()))\n\n    heappush(hq, (-c, b))\n\n\n\nrest = n\n\nans = 0\n\nwhile rest > 0:\n\n    num, cnt = heappop(hq)\n\n\n\n    num *= (-1)\n\n    use = min(rest, cnt)\n\n    ans += use * num\n\n    rest -= use\n\n\n\nprint(ans)\n","target":"def main():\n\n    from collections import Counter\n\n    from operator import itemgetter\n\n\n\n    import sys\n\n    input = sys.stdin.readline\n\n\n\n    N, M = list(map(int, input().split()))\n\n    a = list(map(int, input().split()))\n\n\n\n    ctr = Counter(a)\n\n    for _ in range(M):\n\n        b, c = list(map(int, input().split()))\n\n        ctr[c] += b\n\n\n\n    ans = 0\n\n    rest = N\n\n    for integer, count in sorted(list(ctr.items()), key=itemgetter(0), reverse=True):\n\n        take = min(rest, count)\n\n        ans += take * integer\n\n        rest -= take\n\n        if not rest:\n\n            break\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n\n\n\n# import sys\n\n# input = sys.stdin.readline\n\n# \n\n# sys.setrecursionlimit(10 ** 7)\n\n# \n\n# (int(x)-1 for x in input().split())\n\n# rstrip()\n","code_v0_loc":24,"code_v1_loc":37,"code_v0_num_chars":414,"code_v1_num_chars":760,"code_v0_no_empty_lines":"from heapq import heappop, heappush\n\nn, m = list(map(int, input().split()))\na = tuple(map(int, input().split()))\nhq = []\nfor aa in a:\n    heappush(hq, (-aa, 1))\nfor _ in range(m):\n    b, c = list(map(int, input().split()))\n    heappush(hq, (-c, b))\nrest = n\nans = 0\nwhile rest > 0:\n    num, cnt = heappop(hq)\n    num *= -1\n    use = min(rest, cnt)\n    ans += use * num\n    rest -= use\nprint(ans)\n","code_v1_no_empty_lines":"def main():\n    from collections import Counter\n    from operator import itemgetter\n    import sys\n\n    input = sys.stdin.readline\n    N, M = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    ctr = Counter(a)\n    for _ in range(M):\n        b, c = list(map(int, input().split()))\n        ctr[c] += b\n    ans = 0\n    rest = N\n    for integer, count in sorted(list(ctr.items()), key=itemgetter(0), reverse=True):\n        take = min(rest, count)\n        ans += take * integer\n        rest -= take\n        if not rest:\n            break\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n# import sys\n# input = sys.stdin.readline\n#\n# sys.setrecursionlimit(10 ** 7)\n#\n# (int(x)-1 for x in input().split())\n# rstrip()\n","code_same":false,"relative_loc_diff_percent":35.1351351351,"diff":["-from heapq import heappop, heappush","+def main():","+    from collections import Counter","+    from operator import itemgetter","+    import sys","-n, m = list(map(int, input().split()))","-a = tuple(map(int, input().split()))","-hq = []","-for aa in a:","-    heappush(hq, (-aa, 1))","-for _ in range(m):","-    b, c = list(map(int, input().split()))","-    heappush(hq, (-c, b))","-rest = n","-ans = 0","-while rest > 0:","-    num, cnt = heappop(hq)","-    num *= -1","-    use = min(rest, cnt)","-    ans += use * num","-    rest -= use","-print(ans)","+    input = sys.stdin.readline","+    N, M = list(map(int, input().split()))","+    a = list(map(int, input().split()))","+    ctr = Counter(a)","+    for _ in range(M):","+        b, c = list(map(int, input().split()))","+        ctr[c] += b","+    ans = 0","+    rest = N","+    for integer, count in sorted(list(ctr.items()), key=itemgetter(0), reverse=True):","+        take = min(rest, count)","+        ans += take * integer","+        rest -= take","+        if not rest:","+            break","+    print(ans)","+","+","+if __name__ == \"__main__\":","+    main()","+# import sys","+# input = sys.stdin.readline","+#","+# sys.setrecursionlimit(10 ** 7)","+#","+# (int(x)-1 for x in input().split())","+# rstrip()"],"diff_only_import_comment":false,"measured_runtime_v0":0.3003652287,"measured_runtime_v1":0.218658349,"runtime_lift":1.3736737242,"key":["s653342727","s579349204"]}
{"user_id":"u808806124","problem_id":"p03837","language":"python","submission_id_v0":"s131974158","submission_id_v1":"s793289076","cpu_time_v0":1652,"cpu_time_v1":347,"memory_v0":14552,"memory_v1":3556,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":79.0,"input":"import numpy as np\n\n\n\nn, m = list(map(int, input().split()))\n\n\n\nd = np.ones((n, n)) * 1001\n\n\n\nes = []\n\nfor i in range(m):\n\n    es.append(list(map(int, input().split())))\n\n\n\nfor (i, j, w) in es:\n\n    d[i - 1][j - 1] = w\n\n    d[j - 1][i - 1] = w\n\n\n\n\n\nfor k in range(n):\n\n    for i in range(n):\n\n        for j in range(n):\n\n            l = d[i][k] + d[k][j]\n\n            if d[i][j] > l:\n\n                d[i][j] = l\n\n\n\nc = 0\n\nfor (i, j, w) in es:\n\n    if d[i - 1][j - 1] < w:\n\n        c += 1\n\n\n\nprint(c)\n","target":"n, m = list(map(int, input().split()))\n\n\n\nd = [[1001] * n for i in range(n)]\n\n\n\nes = []\n\nfor i in range(m):\n\n    es.append(list(map(int, input().split())))\n\n\n\nfor (i, j, w) in es:\n\n    d[i - 1][j - 1] = w\n\n    d[j - 1][i - 1] = w\n\n\n\n\n\nfor k in range(n):\n\n    for i in range(n):\n\n        for j in range(n):\n\n            l = d[i][k] + d[k][j]\n\n            if d[i][j] > l:\n\n                d[i][j] = l\n\n\n\nc = 0\n\nfor (i, j, w) in es:\n\n    if d[i - 1][j - 1] < w:\n\n        c += 1\n\n\n\nprint(c)","code_v0_loc":28,"code_v1_loc":26,"code_v0_num_chars":495,"code_v1_num_chars":480,"code_v0_no_empty_lines":"import numpy as np\n\nn, m = list(map(int, input().split()))\nd = np.ones((n, n)) * 1001\nes = []\nfor i in range(m):\n    es.append(list(map(int, input().split())))\nfor (i, j, w) in es:\n    d[i - 1][j - 1] = w\n    d[j - 1][i - 1] = w\nfor k in range(n):\n    for i in range(n):\n        for j in range(n):\n            l = d[i][k] + d[k][j]\n            if d[i][j] > l:\n                d[i][j] = l\nc = 0\nfor (i, j, w) in es:\n    if d[i - 1][j - 1] < w:\n        c += 1\nprint(c)\n","code_v1_no_empty_lines":"n, m = list(map(int, input().split()))\nd = [[1001] * n for i in range(n)]\nes = []\nfor i in range(m):\n    es.append(list(map(int, input().split())))\nfor (i, j, w) in es:\n    d[i - 1][j - 1] = w\n    d[j - 1][i - 1] = w\nfor k in range(n):\n    for i in range(n):\n        for j in range(n):\n            l = d[i][k] + d[k][j]\n            if d[i][j] > l:\n                d[i][j] = l\nc = 0\nfor (i, j, w) in es:\n    if d[i - 1][j - 1] < w:\n        c += 1\nprint(c)\n","code_same":false,"relative_loc_diff_percent":7.1428571429,"diff":["-import numpy as np","-","-d = np.ones((n, n)) * 1001","+d = [[1001] * n for i in range(n)]"],"diff_only_import_comment":false,"measured_runtime_v0":2.1350366999,"measured_runtime_v1":0.2769060681,"runtime_lift":7.710328324,"key":["s131974158","s793289076"]}
{"user_id":"u170201762","problem_id":"p03371","language":"python","submission_id_v0":"s850530798","submission_id_v1":"s933367975","cpu_time_v0":94,"cpu_time_v1":18,"memory_v0":7096,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":80.85,"input":"A,B,C,X,Y = list(map(int,input().split()))\n\nl = []\n\nfor i in range(max(X,Y)+1):\n\n    T = i * C * 2\n\n    if i < X: \n\n        T += (X-i)*A\n\n    if i < Y:\n\n        T += (Y-i)*B\n\n    l.append(T)\n\nl.sort()\n\nprint((l[0]))","target":"A,B,C,X,Y = list(map(int,input().split()))\n\nans = 0\n\nif 2*C <= A+B:\n\n    Z = min(X,Y)\n\n    ans = 2*C*Z\n\n    X -= Z\n\n    Y -= Z\n\nans += min(2*C*X,A*X)\n\nans += min(2*C*Y,B*Y)\n\nprint(ans)","code_v0_loc":11,"code_v1_loc":10,"code_v0_num_chars":207,"code_v1_num_chars":178,"code_v0_no_empty_lines":"A, B, C, X, Y = list(map(int, input().split()))\nl = []\nfor i in range(max(X, Y) + 1):\n    T = i * C * 2\n    if i < X:\n        T += (X - i) * A\n    if i < Y:\n        T += (Y - i) * B\n    l.append(T)\nl.sort()\nprint((l[0]))\n","code_v1_no_empty_lines":"A, B, C, X, Y = list(map(int, input().split()))\nans = 0\nif 2 * C <= A + B:\n    Z = min(X, Y)\n    ans = 2 * C * Z\n    X -= Z\n    Y -= Z\nans += min(2 * C * X, A * X)\nans += min(2 * C * Y, B * Y)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":9.0909090909,"diff":["-l = []","-for i in range(max(X, Y) + 1):","-    T = i * C * 2","-    if i < X:","-        T += (X - i) * A","-    if i < Y:","-        T += (Y - i) * B","-    l.append(T)","-l.sort()","-print((l[0]))","+ans = 0","+if 2 * C <= A + B:","+    Z = min(X, Y)","+    ans = 2 * C * Z","+    X -= Z","+    Y -= Z","+ans += min(2 * C * X, A * X)","+ans += min(2 * C * Y, B * Y)","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.290536653,"measured_runtime_v1":0.1943999538,"runtime_lift":1.494530463,"key":["s850530798","s933367975"]}
{"user_id":"u426764965","problem_id":"p02983","language":"python","submission_id_v0":"s922780742","submission_id_v1":"s448047238","cpu_time_v0":151,"cpu_time_v1":48,"memory_v0":14312,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":68.21,"input":"# \u53c2\u8003 https:\/\/atcoder.jp\/contests\/abc133\/submissions\/7966658\n\n\n\nimport numpy as np\n\n\n\ndef abc133_c():\n\n    L, R = list(map(int, input().split()))\n\n    if R - L > 673: return 0\n\n    x = np.arange(L, R+1, dtype=np.int64)\n\n    #y = x[:, None] * x[None, :] % 2019\n\n    y = x.reshape(-1, 1) * x.reshape(1, -1)  # \u533a\u9593\u5185\u306e\u3059\u3079\u3066\u306e\u7d44\u5408\u305b\u306e\u7a4d\n\n    y %= 2019\n\n    np.fill_diagonal(y, 2019)  # \u5bfe\u89d2\u6210\u5206\u306f\u7121\u8996\u3059\u308b (\u540c\u3058\u6570\u30922\u56de\u9078\u3079\u306a\u3044) \u306e\u3067inf\u5024\u3067\u57cb\u3081\u308b\n\n    return y.min()\n\n\n\nprint((abc133_c()))","target":"def abc133_c():\n\n    L, R = list(map(int, input().split()))\n\n    # \u533a\u9593\u306e\u5e45\u304c673\u3042\u308c\u3070\u3001673\u306e\u500d\u6570\u30683\u306e\u500d\u6570\u304c\u542b\u307e\u308c\u3066\u30012019\u306e\u500d\u6570\u304c\u4f5c\u308c\u308b\n\n    if R - L > 673: return 0\n\n    # \u305d\u308c\u4ee5\u5916\u306f\u8a66\u3059\n\n    ans = 2019\n\n    for i in range(L, R+1):\n\n        for j in range(L, i):\n\n            m = i * j % 2019\n\n            ans = min(m, ans)\n\n    return ans\n\n\n\nprint((abc133_c()))","code_v0_loc":15,"code_v1_loc":13,"code_v0_num_chars":438,"code_v1_num_chars":320,"code_v0_no_empty_lines":"# \u53c2\u8003 https:\/\/atcoder.jp\/contests\/abc133\/submissions\/7966658\nimport numpy as np\n\n\ndef abc133_c():\n    L, R = list(map(int, input().split()))\n    if R - L > 673:\n        return 0\n    x = np.arange(L, R + 1, dtype=np.int64)\n    # y = x[:, None] * x[None, :] % 2019\n    y = x.reshape(-1, 1) * x.reshape(1, -1)  # \u533a\u9593\u5185\u306e\u3059\u3079\u3066\u306e\u7d44\u5408\u305b\u306e\u7a4d\n    y %= 2019\n    np.fill_diagonal(y, 2019)  # \u5bfe\u89d2\u6210\u5206\u306f\u7121\u8996\u3059\u308b (\u540c\u3058\u6570\u30922\u56de\u9078\u3079\u306a\u3044) \u306e\u3067inf\u5024\u3067\u57cb\u3081\u308b\n    return y.min()\n\n\nprint((abc133_c()))\n","code_v1_no_empty_lines":"def abc133_c():\n    L, R = list(map(int, input().split()))\n    # \u533a\u9593\u306e\u5e45\u304c673\u3042\u308c\u3070\u3001673\u306e\u500d\u6570\u30683\u306e\u500d\u6570\u304c\u542b\u307e\u308c\u3066\u30012019\u306e\u500d\u6570\u304c\u4f5c\u308c\u308b\n    if R - L > 673:\n        return 0\n    # \u305d\u308c\u4ee5\u5916\u306f\u8a66\u3059\n    ans = 2019\n    for i in range(L, R + 1):\n        for j in range(L, i):\n            m = i * j % 2019\n            ans = min(m, ans)\n    return ans\n\n\nprint((abc133_c()))\n","code_same":false,"relative_loc_diff_percent":13.3333333333,"diff":["-# \u53c2\u8003 https:\/\/atcoder.jp\/contests\/abc133\/submissions\/7966658","-import numpy as np","-","-","+    # \u533a\u9593\u306e\u5e45\u304c673\u3042\u308c\u3070\u3001673\u306e\u500d\u6570\u30683\u306e\u500d\u6570\u304c\u542b\u307e\u308c\u3066\u30012019\u306e\u500d\u6570\u304c\u4f5c\u308c\u308b","-    x = np.arange(L, R + 1, dtype=np.int64)","-    # y = x[:, None] * x[None, :] % 2019","-    y = x.reshape(-1, 1) * x.reshape(1, -1)  # \u533a\u9593\u5185\u306e\u3059\u3079\u3066\u306e\u7d44\u5408\u305b\u306e\u7a4d","-    y %= 2019","-    np.fill_diagonal(y, 2019)  # \u5bfe\u89d2\u6210\u5206\u306f\u7121\u8996\u3059\u308b (\u540c\u3058\u6570\u30922\u56de\u9078\u3079\u306a\u3044) \u306e\u3067inf\u5024\u3067\u57cb\u3081\u308b","-    return y.min()","+    # \u305d\u308c\u4ee5\u5916\u306f\u8a66\u3059","+    ans = 2019","+    for i in range(L, R + 1):","+        for j in range(L, i):","+            m = i * j % 2019","+            ans = min(m, ans)","+    return ans"],"diff_only_import_comment":false,"measured_runtime_v0":1.2400364937,"measured_runtime_v1":0.302429297,"runtime_lift":4.1002525409,"key":["s922780742","s448047238"]}
{"user_id":"u708211626","problem_id":"p04012","language":"python","submission_id_v0":"s951351679","submission_id_v1":"s246688975","cpu_time_v0":32,"cpu_time_v1":26,"memory_v0":9372,"memory_v1":9000,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":18.75,"input":"import collections\n\nimport sys\n\na=eval(input())\n\nb=[]\n\n\n\nfor i in a:\n\n  b.append(i)\n\n  \n\nb.sort()\n\nc=collections.Counter(b)\n\nc=list(c.values())\n\n\n\nfor i in range(len(c)):\n\n  if int(c[i])%2==0:\n\n    q=0\n\n  else:\n\n    q=1\n\n    print('No')\n\n    sys.exit()\n\n    \n\nprint('Yes')\n","target":"w = list(eval(input()))\n\ns = set(w)\n\nfor i in s:\n\n  if w.count(i)%2 != 0:\n\n    print(\"No\")\n\n    break\n\nelse:\n\n  print(\"Yes\")\n\n  ","code_v0_loc":21,"code_v1_loc":9,"code_v0_num_chars":267,"code_v1_num_chars":122,"code_v0_no_empty_lines":"import collections\nimport sys\n\na = eval(input())\nb = []\nfor i in a:\n    b.append(i)\nb.sort()\nc = collections.Counter(b)\nc = list(c.values())\nfor i in range(len(c)):\n    if int(c[i]) % 2 == 0:\n        q = 0\n    else:\n        q = 1\n        print(\"No\")\n        sys.exit()\nprint(\"Yes\")\n","code_v1_no_empty_lines":"w = list(eval(input()))\ns = set(w)\nfor i in s:\n    if w.count(i) % 2 != 0:\n        print(\"No\")\n        break\nelse:\n    print(\"Yes\")\n","code_same":false,"relative_loc_diff_percent":57.1428571429,"diff":["-import collections","-import sys","-","-a = eval(input())","-b = []","-for i in a:","-    b.append(i)","-b.sort()","-c = collections.Counter(b)","-c = list(c.values())","-for i in range(len(c)):","-    if int(c[i]) % 2 == 0:","-        q = 0","-    else:","-        q = 1","+w = list(eval(input()))","+s = set(w)","+for i in s:","+    if w.count(i) % 2 != 0:","-        sys.exit()","-print(\"Yes\")","+        break","+else:","+    print(\"Yes\")"],"diff_only_import_comment":false,"measured_runtime_v0":0.2393270415,"measured_runtime_v1":0.1892163638,"runtime_lift":1.2648326847,"key":["s951351679","s246688975"]}
{"user_id":"u379959788","problem_id":"p03835","language":"python","submission_id_v0":"s258964318","submission_id_v1":"s303783261","cpu_time_v0":1751,"cpu_time_v1":1557,"memory_v0":2940,"memory_v1":3444,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.08,"input":"#ABC951B\/Sum_of_Three_Integers\n\n\n\nK, S = list(map(int, input().split()))\n\nans = 0\n\nfor x in range(0, K+1):\n\n    for y in range(0, K+1):\n\n        z = S - x - y\n\n        if 0 <= z and z <= K:\n\n            ans += 1\n\nprint(ans)","target":"K, S = list(map(int, input().split()))\n\nans = 0\n\nfor X in range(K+1):\n\n    for Y in range(K+1):\n\n        Z = S - X - Y\n\n        if Z >= 0 and Z <= K:\n\n            ans += 1\n\nprint(ans)       ","code_v0_loc":10,"code_v1_loc":8,"code_v0_num_chars":217,"code_v1_num_chars":184,"code_v0_no_empty_lines":"# ABC951B\/Sum_of_Three_Integers\nK, S = list(map(int, input().split()))\nans = 0\nfor x in range(0, K + 1):\n    for y in range(0, K + 1):\n        z = S - x - y\n        if 0 <= z and z <= K:\n            ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"K, S = list(map(int, input().split()))\nans = 0\nfor X in range(K + 1):\n    for Y in range(K + 1):\n        Z = S - X - Y\n        if Z >= 0 and Z <= K:\n            ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["-# ABC951B\/Sum_of_Three_Integers","-for x in range(0, K + 1):","-    for y in range(0, K + 1):","-        z = S - x - y","-        if 0 <= z and z <= K:","+for X in range(K + 1):","+    for Y in range(K + 1):","+        Z = S - X - Y","+        if Z >= 0 and Z <= K:"],"diff_only_import_comment":false,"measured_runtime_v0":0.2646004359,"measured_runtime_v1":0.0728798735,"runtime_lift":3.6306379676,"key":["s258964318","s303783261"]}
{"user_id":"u150984829","problem_id":"p02276","language":"python","submission_id_v0":"s439916574","submission_id_v1":"s927428389","cpu_time_v0":80,"cpu_time_v1":60,"memory_v0":16392,"memory_v1":16388,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":25.0,"input":"n=int(eval(input()))-1\n\nA=list(map(int,input().split()))\n\ni=0\n\nfor j in range(n):\n\n if A[j]<=A[-1]:A[i],A[j]=A[j],A[i];i+=1\n\nA[i],A[n]=A[n],A[i]\n\nprint((\" \".join(map(str,A[:i]))+\" [\"+str(A[i])+\"] \"+\" \".join(map(str,A[i+1:]))))\n","target":"def s():\n\n n=int(eval(input()))-1\n\n A=list(map(int,input().split()))\n\n i=0\n\n for j in range(n):\n\n  if A[j]<=A[-1]:A[i],A[j]=A[j],A[i];i+=1\n\n A[i],A[n]=A[n],A[i]\n\n print((\" \".join(map(str,A[:i]))+\" [\"+str(A[i])+\"] \"+\" \".join(map(str,A[i+1:]))))\n\nif'__main__'==__name__:s()\n","code_v0_loc":7,"code_v1_loc":9,"code_v0_num_chars":219,"code_v1_num_chars":264,"code_v0_no_empty_lines":"n = int(eval(input())) - 1\nA = list(map(int, input().split()))\ni = 0\nfor j in range(n):\n    if A[j] <= A[-1]:\n        A[i], A[j] = A[j], A[i]\n        i += 1\nA[i], A[n] = A[n], A[i]\nprint(\n    (\n        \" \".join(map(str, A[:i]))\n        + \" [\"\n        + str(A[i])\n        + \"] \"\n        + \" \".join(map(str, A[i + 1 :]))\n    )\n)\n","code_v1_no_empty_lines":"def s():\n    n = int(eval(input())) - 1\n    A = list(map(int, input().split()))\n    i = 0\n    for j in range(n):\n        if A[j] <= A[-1]:\n            A[i], A[j] = A[j], A[i]\n            i += 1\n    A[i], A[n] = A[n], A[i]\n    print(\n        (\n            \" \".join(map(str, A[:i]))\n            + \" [\"\n            + str(A[i])\n            + \"] \"\n            + \" \".join(map(str, A[i + 1 :]))\n        )\n    )\n\n\nif \"__main__\" == __name__:\n    s()\n","code_same":false,"relative_loc_diff_percent":22.2222222222,"diff":["-n = int(eval(input())) - 1","-A = list(map(int, input().split()))","-i = 0","-for j in range(n):","-    if A[j] <= A[-1]:","-        A[i], A[j] = A[j], A[i]","-        i += 1","-A[i], A[n] = A[n], A[i]","-print(","-    (","-        \" \".join(map(str, A[:i]))","-        + \" [\"","-        + str(A[i])","-        + \"] \"","-        + \" \".join(map(str, A[i + 1 :]))","+def s():","+    n = int(eval(input())) - 1","+    A = list(map(int, input().split()))","+    i = 0","+    for j in range(n):","+        if A[j] <= A[-1]:","+            A[i], A[j] = A[j], A[i]","+            i += 1","+    A[i], A[n] = A[n], A[i]","+    print(","+        (","+            \" \".join(map(str, A[:i]))","+            + \" [\"","+            + str(A[i])","+            + \"] \"","+            + \" \".join(map(str, A[i + 1 :]))","+        )","-)","+","+","+if \"__main__\" == __name__:","+    s()"],"diff_only_import_comment":false,"measured_runtime_v0":0.2844968953,"measured_runtime_v1":0.0927553341,"runtime_lift":3.0671755746,"key":["s439916574","s927428389"]}
{"user_id":"u580404776","problem_id":"p02792","language":"python","submission_id_v0":"s545080507","submission_id_v1":"s376438645","cpu_time_v0":492,"cpu_time_v1":192,"memory_v0":3060,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":60.98,"input":"N = int(eval(input()))\n\nmem = [[0]*10 for _ in range(10)]\n\n\n\nfor i in range(1,N+1):\n\n    a = int(str(i)[0])\n\n    b = int(str(i)[-1])\n\n    mem[a][b] += 1\n\n\n\nans = 0\n\nfor i in range(1,N+1):\n\n    a = int(str(i)[0])\n\n    b = int(str(i)[-1])\n\n    ans += mem[b][a]\n\nprint(ans)\n","target":"N = int(eval(input()))\n\nmem=[[0] * 10 for _ in range(10)]\n\n\n\nfor i in range(1, N+1):\n\n    s = str(i)\n\n    mem[int(s[0])][int(s[-1])] += 1 \n\n    \n\nans = 0\n\nfor i in range(1, 10):\n\n    for j in range(1, 10):\n\n        ans += mem[i][j] * mem[j][i]\n\nprint(ans)","code_v0_loc":14,"code_v1_loc":12,"code_v0_num_chars":265,"code_v1_num_chars":249,"code_v0_no_empty_lines":"N = int(eval(input()))\nmem = [[0] * 10 for _ in range(10)]\nfor i in range(1, N + 1):\n    a = int(str(i)[0])\n    b = int(str(i)[-1])\n    mem[a][b] += 1\nans = 0\nfor i in range(1, N + 1):\n    a = int(str(i)[0])\n    b = int(str(i)[-1])\n    ans += mem[b][a]\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nmem = [[0] * 10 for _ in range(10)]\nfor i in range(1, N + 1):\n    s = str(i)\n    mem[int(s[0])][int(s[-1])] += 1\nans = 0\nfor i in range(1, 10):\n    for j in range(1, 10):\n        ans += mem[i][j] * mem[j][i]\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["-    a = int(str(i)[0])","-    b = int(str(i)[-1])","-    mem[a][b] += 1","+    s = str(i)","+    mem[int(s[0])][int(s[-1])] += 1","-for i in range(1, N + 1):","-    a = int(str(i)[0])","-    b = int(str(i)[-1])","-    ans += mem[b][a]","+for i in range(1, 10):","+    for j in range(1, 10):","+        ans += mem[i][j] * mem[j][i]"],"diff_only_import_comment":false,"measured_runtime_v0":0.4534644659,"measured_runtime_v1":0.3052516449,"runtime_lift":1.4855430706,"key":["s545080507","s376438645"]}
{"user_id":"u107077660","problem_id":"p04012","language":"python","submission_id_v0":"s204906128","submission_id_v1":"s764910207","cpu_time_v0":38,"cpu_time_v1":29,"memory_v0":3064,"memory_v1":3444,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":23.68,"input":"w = eval(input())\n\nfor l in w:\n\n\tif w.count(l) % 2 == 1:\n\n\t\tprint(\"No\")\n\n\t\tbreak\n\nelse:\n\n\tprint(\"Yes\")","target":"from collections import Counter\n\ns = eval(input())\n\nc = list(Counter(s).values())\n\nfor n in c:\n\n\tif n & 1 == 1:\n\n\t\tprint(\"No\")\n\n\t\tbreak\n\nelse:\n\n\tprint(\"Yes\")\n\n\n","code_v0_loc":7,"code_v1_loc":10,"code_v0_num_chars":96,"code_v1_num_chars":148,"code_v0_no_empty_lines":"w = eval(input())\nfor l in w:\n    if w.count(l) % 2 == 1:\n        print(\"No\")\n        break\nelse:\n    print(\"Yes\")\n","code_v1_no_empty_lines":"from collections import Counter\n\ns = eval(input())\nc = list(Counter(s).values())\nfor n in c:\n    if n & 1 == 1:\n        print(\"No\")\n        break\nelse:\n    print(\"Yes\")\n","code_same":false,"relative_loc_diff_percent":30.0,"diff":["-w = eval(input())","-for l in w:","-    if w.count(l) % 2 == 1:","+from collections import Counter","+","+s = eval(input())","+c = list(Counter(s).values())","+for n in c:","+    if n & 1 == 1:"],"diff_only_import_comment":false,"measured_runtime_v0":0.3070713311,"measured_runtime_v1":0.212444066,"runtime_lift":1.44542202,"key":["s204906128","s764910207"]}
{"user_id":"u391875425","problem_id":"p03416","language":"python","submission_id_v0":"s339057919","submission_id_v1":"s254043060","cpu_time_v0":204,"cpu_time_v1":57,"memory_v0":2940,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":72.06,"input":"a, b = list(map(int, input().split()))\n\ntmp=str(a)\n\nc=0\n\nfor i in range(a,b+1):\n\n    tmp=str(i)\n\n    tmp2=\"\"\n\n    for s in range(len(tmp)):\n\n        tmp2=tmp2+tmp[len(tmp)-1-s]\n\n    if tmp==tmp2:\n\n        c=c+1\n\nprint(c)","target":"def main():\n\n    #1. input\n\n    a, b = list(map(int, input().split()))\n\n\n\n    ans = 0\n\n\n\n    #2. from A to B\n\n    for i in range(a, b+1):\n\n        #2.1. judge if the number is palindromic\n\n        if (str(i)[0]==str(i)[4]) and (str(i)[1]==str(i)[3]):\n\n            ans = ans+1\n\n\n\n    #3. output\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()","code_v0_loc":11,"code_v1_loc":18,"code_v0_num_chars":214,"code_v1_num_chars":347,"code_v0_no_empty_lines":"a, b = list(map(int, input().split()))\ntmp = str(a)\nc = 0\nfor i in range(a, b + 1):\n    tmp = str(i)\n    tmp2 = \"\"\n    for s in range(len(tmp)):\n        tmp2 = tmp2 + tmp[len(tmp) - 1 - s]\n    if tmp == tmp2:\n        c = c + 1\nprint(c)\n","code_v1_no_empty_lines":"def main():\n    # 1. input\n    a, b = list(map(int, input().split()))\n    ans = 0\n    # 2. from A to B\n    for i in range(a, b + 1):\n        # 2.1. judge if the number is palindromic\n        if (str(i)[0] == str(i)[4]) and (str(i)[1] == str(i)[3]):\n            ans = ans + 1\n    # 3. output\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":38.8888888889,"diff":["-a, b = list(map(int, input().split()))","-tmp = str(a)","-c = 0","-for i in range(a, b + 1):","-    tmp = str(i)","-    tmp2 = \"\"","-    for s in range(len(tmp)):","-        tmp2 = tmp2 + tmp[len(tmp) - 1 - s]","-    if tmp == tmp2:","-        c = c + 1","-print(c)","+def main():","+    # 1. input","+    a, b = list(map(int, input().split()))","+    ans = 0","+    # 2. from A to B","+    for i in range(a, b + 1):","+        # 2.1. judge if the number is palindromic","+        if (str(i)[0] == str(i)[4]) and (str(i)[1] == str(i)[3]):","+            ans = ans + 1","+    # 3. output","+    print(ans)","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.5203332471,"measured_runtime_v1":0.2634068646,"runtime_lift":1.9753974444,"key":["s339057919","s254043060"]}
{"user_id":"u505420467","problem_id":"p03835","language":"python","submission_id_v0":"s014481361","submission_id_v1":"s844546698","cpu_time_v0":1491,"cpu_time_v1":1254,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.9,"input":"k,s=list(map(int,input().split()))\n\nans=0\n\nfor i in range(k+1):\n\n    for j in range(k+1):\n\n        z=s-i-j\n\n        if 0<=z<=k:\n\n            ans+=1\n\nprint(ans)\n","target":"k,s=list(map(int,input().split()))\n\nans=0\n\nfor i in range(k+1):\n\n    for j in range(k+1):\n\n        if 0<=s-i-j<=k:\n\n            ans+=1\n\nprint(ans)\n","code_v0_loc":8,"code_v1_loc":7,"code_v0_num_chars":154,"code_v1_num_chars":141,"code_v0_no_empty_lines":"k, s = list(map(int, input().split()))\nans = 0\nfor i in range(k + 1):\n    for j in range(k + 1):\n        z = s - i - j\n        if 0 <= z <= k:\n            ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"k, s = list(map(int, input().split()))\nans = 0\nfor i in range(k + 1):\n    for j in range(k + 1):\n        if 0 <= s - i - j <= k:\n            ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-        z = s - i - j","-        if 0 <= z <= k:","+        if 0 <= s - i - j <= k:"],"diff_only_import_comment":false,"measured_runtime_v0":0.2451675486,"measured_runtime_v1":0.0064913454,"runtime_lift":37.7683720217,"key":["s014481361","s844546698"]}
{"user_id":"u285891772","problem_id":"p03078","language":"python","submission_id_v0":"s323914382","submission_id_v1":"s323368336","cpu_time_v0":910,"cpu_time_v1":524,"memory_v0":69644,"memory_v1":18184,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":42.42,"input":"import sys, re\n\nfrom collections import deque, defaultdict, Counter\n\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees, log2, gcd\n\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\n\nfrom operator import itemgetter, mul\n\nfrom copy import deepcopy\n\nfrom string import ascii_lowercase, ascii_uppercase, digits\n\nfrom bisect import bisect, bisect_left, insort, insort_left\n\nfrom heapq import heappush, heappop\n\nfrom functools import reduce, lru_cache\n\ndef input(): return sys.stdin.readline().strip()\n\ndef INT(): return int(input())\n\ndef MAP(): return map(int, input().split())\n\ndef LIST(): return list(map(int, input().split()))\n\ndef TUPLE(): return tuple(map(int, input().split()))\n\ndef ZIP(n): return zip(*(MAP() for _ in range(n)))\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = float('inf')\n\nmod = 10 ** 9 + 7 \n\n#mod = 998244353\n\nfrom decimal import *\n\n#import numpy as np\n\n#decimal.getcontext().prec = 10\n\n\n\nX, Y, Z, K = MAP()\n\nA = sorted(LIST(), reverse = True)\n\nB = sorted(LIST(), reverse = True)\n\nC = sorted(LIST(), reverse = True)\n\n\n\nAB = []\n\nfor i in range(X):\n\n\tfor j in range(Y):\n\n\t\tAB.append(A[i]+B[j])\n\n\n\nAB.sort(reverse = True)\n\nAB = AB[:3000]\n\nABC = sorted([C[0]+AB[i] for i in range(min(3000, X*Y))], reverse = True)\n\n\n\nfor j in range(1, Z):\n\n\tABC_tmp = sorted([C[j]+AB[i] for i in range(min(3000, X*Y))])\n\n\tABC += ABC_tmp\n\n\tABC.sort(reverse = True)\n\n\tABC = ABC[:3000]\n\n\n\nprint(*ABC[:K], sep= \"\\n\")\n\n\n","target":"import sys, re\n\nfrom collections import deque, defaultdict, Counter\n\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees, log2, gcd\n\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\n\nfrom operator import itemgetter, mul\n\nfrom copy import deepcopy\n\nfrom string import ascii_lowercase, ascii_uppercase, digits\n\nfrom bisect import bisect, bisect_left, insort, insort_left\n\nfrom heapq import heappush, heappop\n\nfrom functools import reduce, lru_cache\n\ndef input(): return sys.stdin.readline().strip()\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(): return list(map(int, input().split()))\n\ndef TUPLE(): return tuple(map(int, input().split()))\n\ndef ZIP(n): return list(zip(*(MAP() for _ in range(n))))\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = float('inf')\n\nmod = 10 ** 9 + 7 \n\n#mod = 998244353\n\nfrom decimal import *\n\n#import numpy as np\n\n#decimal.getcontext().prec = 10\n\n\n\nX, Y, Z, K = MAP()\n\nA = sorted(LIST(), reverse = True)\n\nB = sorted(LIST(), reverse = True)\n\nC = sorted(LIST(), reverse = True)\n\n\n\nans = []\n\nfor i in range(X):\n\n\tfor j in range(Y):\n\n\t\tfor k in range(Z):\n\n\t\t\tif (i+1)*(j+1)*(k+1) <= K:\n\n\t\t\t\tans.append(A[i]+B[j]+C[k])\n\n\t\t\telse:\n\n\t\t\t\tbreak\n\n\n\nfor a in sorted(ans)[::-1][:K]:\n\n\tprint(a)\n","code_v0_loc":46,"code_v1_loc":40,"code_v0_num_chars":1517,"code_v1_num_chars":1344,"code_v0_no_empty_lines":"import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import (\n    ceil,\n    sqrt,\n    hypot,\n    factorial,\n    pi,\n    sin,\n    cos,\n    tan,\n    asin,\n    acos,\n    atan,\n    radians,\n    degrees,\n    log2,\n    gcd,\n)\nfrom itertools import (\n    accumulate,\n    permutations,\n    combinations,\n    combinations_with_replacement,\n    product,\n    groupby,\n)\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom heapq import heappush, heappop\nfrom functools import reduce, lru_cache\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef INT():\n    return int(input())\n\n\ndef MAP():\n    return map(int, input().split())\n\n\ndef LIST():\n    return list(map(int, input().split()))\n\n\ndef TUPLE():\n    return tuple(map(int, input().split()))\n\n\ndef ZIP(n):\n    return zip(*(MAP() for _ in range(n)))\n\n\nsys.setrecursionlimit(10**9)\nINF = float(\"inf\")\nmod = 10**9 + 7\n# mod = 998244353\nfrom decimal import *\n\n# import numpy as np\n# decimal.getcontext().prec = 10\nX, Y, Z, K = MAP()\nA = sorted(LIST(), reverse=True)\nB = sorted(LIST(), reverse=True)\nC = sorted(LIST(), reverse=True)\nAB = []\nfor i in range(X):\n    for j in range(Y):\n        AB.append(A[i] + B[j])\nAB.sort(reverse=True)\nAB = AB[:3000]\nABC = sorted([C[0] + AB[i] for i in range(min(3000, X * Y))], reverse=True)\nfor j in range(1, Z):\n    ABC_tmp = sorted([C[j] + AB[i] for i in range(min(3000, X * Y))])\n    ABC += ABC_tmp\n    ABC.sort(reverse=True)\n    ABC = ABC[:3000]\nprint(*ABC[:K], sep=\"\\n\")\n","code_v1_no_empty_lines":"import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import (\n    ceil,\n    sqrt,\n    hypot,\n    factorial,\n    pi,\n    sin,\n    cos,\n    tan,\n    asin,\n    acos,\n    atan,\n    radians,\n    degrees,\n    log2,\n    gcd,\n)\nfrom itertools import (\n    accumulate,\n    permutations,\n    combinations,\n    combinations_with_replacement,\n    product,\n    groupby,\n)\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom heapq import heappush, heappop\nfrom functools import reduce, lru_cache\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef INT():\n    return int(eval(input()))\n\n\ndef MAP():\n    return list(map(int, input().split()))\n\n\ndef LIST():\n    return list(map(int, input().split()))\n\n\ndef TUPLE():\n    return tuple(map(int, input().split()))\n\n\ndef ZIP(n):\n    return list(zip(*(MAP() for _ in range(n))))\n\n\nsys.setrecursionlimit(10**9)\nINF = float(\"inf\")\nmod = 10**9 + 7\n# mod = 998244353\nfrom decimal import *\n\n# import numpy as np\n# decimal.getcontext().prec = 10\nX, Y, Z, K = MAP()\nA = sorted(LIST(), reverse=True)\nB = sorted(LIST(), reverse=True)\nC = sorted(LIST(), reverse=True)\nans = []\nfor i in range(X):\n    for j in range(Y):\n        for k in range(Z):\n            if (i + 1) * (j + 1) * (k + 1) <= K:\n                ans.append(A[i] + B[j] + C[k])\n            else:\n                break\nfor a in sorted(ans)[::-1][:K]:\n    print(a)\n","code_same":false,"relative_loc_diff_percent":13.0434782609,"diff":["-    return int(input())","+    return int(eval(input()))","-    return map(int, input().split())","+    return list(map(int, input().split()))","-    return zip(*(MAP() for _ in range(n)))","+    return list(zip(*(MAP() for _ in range(n))))","-AB = []","+ans = []","-        AB.append(A[i] + B[j])","-AB.sort(reverse=True)","-AB = AB[:3000]","-ABC = sorted([C[0] + AB[i] for i in range(min(3000, X * Y))], reverse=True)","-for j in range(1, Z):","-    ABC_tmp = sorted([C[j] + AB[i] for i in range(min(3000, X * Y))])","-    ABC += ABC_tmp","-    ABC.sort(reverse=True)","-    ABC = ABC[:3000]","-print(*ABC[:K], sep=\"\\n\")","+        for k in range(Z):","+            if (i + 1) * (j + 1) * (k + 1) <= K:","+                ans.append(A[i] + B[j] + C[k])","+            else:","+                break","+for a in sorted(ans)[::-1][:K]:","+    print(a)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3039683881,"measured_runtime_v1":0.2292593994,"runtime_lift":1.3258709952,"key":["s323914382","s323368336"]}
{"user_id":"u498487134","problem_id":"p02814","language":"python","submission_id_v0":"s444255215","submission_id_v1":"s830443344","cpu_time_v0":445,"cpu_time_v1":157,"memory_v0":85440,"memory_v1":85732,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":64.72,"input":"import fractions\n\nimport sys\n\ninput = sys.stdin.readline\n\n\n\nN,M=list(map(int,input().split()))\n\na = list(map(int, input().split()))\n\n\n\n\n\nlcm = a[0]\n\nfor i in range(1, N):\n\n    g= fractions.gcd(lcm, a[i])\n\n    lcm = lcm * a[i] \/\/ g\n\n\n\n\n\ng=a[0]\n\nfor i in range(N):\n\n    g=fractions.gcd(g,a[i])\n\n\n\nfor i in range(N):\n\n    if (a[i]\/\/g)%2==0:\n\n        lcm=0\n\n        break    \n\n    \n\n    \n\nans=0\n\nl=lcm\/\/2\n\nif l:\n\n    ans=(M\/\/l)-(M\/\/(l+l))\n\nprint(ans)\n\n\n","target":"import sys\n\ninput = sys.stdin.readline\n\n\n\ndef I(): return int(eval(input()))\n\ndef MI(): return list(map(int, input().split()))\n\ndef LI(): return list(map(int, input().split()))\n\n\n\n\"\"\"\n\n2X = ak * (2p+1)\n\n\u57fa\u672c\u7684\u306b\u306f\u6700\u5c0f\u516c\u500d\u6570\/2\u3092\u57fa\u672c\u3068\u3057\uff0c\u3053\u308c\u306e\u5947\u6570\u500d\u304b\uff0e\n\n\n\nX  = (ak\/\/2) * (2p+1)\n\n\u3068\u66f8\u3051\u308b\uff0e\u7b2c\u4e8c\u9805\u304c\u5947\u6570\u306a\u306e\u3067\uff0c\u5404ak\u304c2\u3067\u5272\u308a\u5207\u308c\u308c\u3046\u56de\u6570\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\n\na=[2,4]\u3060\u3068\u7121\u7406\n\n\"\"\"\n\ndef main():\n\n    from math import gcd\n\n    N,M=MI()\n\n    A=LI()\n\n    \n\n    def count(X):\n\n        cnt=0\n\n        while X%2==0:\n\n            cnt+=1\n\n            X=X\/\/2\n\n        return cnt\n\n    \n\n    C=count(A[0])\n\n    for i in range(1,N):\n\n        if count(A[i])!=C:\n\n            print((0))\n\n            exit()\n\n            \n\n    lca=1\n\n    for i in range(N):\n\n        g=gcd(lca,A[i])\n\n        lca=(lca*A[i])\/\/g\n\n        \n\n    lca2=lca\/\/2\n\n    ans=M\/\/lca2 - M\/\/lca\n\n    \n\n    print(ans)\n\n    \n\n            \n\n    \n\n\n\nmain()\n","code_v0_loc":30,"code_v1_loc":47,"code_v0_num_chars":443,"code_v1_num_chars":825,"code_v0_no_empty_lines":"import fractions\nimport sys\n\ninput = sys.stdin.readline\nN, M = list(map(int, input().split()))\na = list(map(int, input().split()))\nlcm = a[0]\nfor i in range(1, N):\n    g = fractions.gcd(lcm, a[i])\n    lcm = lcm * a[i] \/\/ g\ng = a[0]\nfor i in range(N):\n    g = fractions.gcd(g, a[i])\nfor i in range(N):\n    if (a[i] \/\/ g) % 2 == 0:\n        lcm = 0\n        break\nans = 0\nl = lcm \/\/ 2\nif l:\n    ans = (M \/\/ l) - (M \/\/ (l + l))\nprint(ans)\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\n\n\ndef I():\n    return int(eval(input()))\n\n\ndef MI():\n    return list(map(int, input().split()))\n\n\ndef LI():\n    return list(map(int, input().split()))\n\n\n\"\"\"\n2X = ak * (2p+1)\n\u57fa\u672c\u7684\u306b\u306f\u6700\u5c0f\u516c\u500d\u6570\/2\u3092\u57fa\u672c\u3068\u3057\uff0c\u3053\u308c\u306e\u5947\u6570\u500d\u304b\uff0e\nX  = (ak\/\/2) * (2p+1)\n\u3068\u66f8\u3051\u308b\uff0e\u7b2c\u4e8c\u9805\u304c\u5947\u6570\u306a\u306e\u3067\uff0c\u5404ak\u304c2\u3067\u5272\u308a\u5207\u308c\u308c\u3046\u56de\u6570\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\na=[2,4]\u3060\u3068\u7121\u7406\n\"\"\"\n\n\ndef main():\n    from math import gcd\n\n    N, M = MI()\n    A = LI()\n\n    def count(X):\n        cnt = 0\n        while X % 2 == 0:\n            cnt += 1\n            X = X \/\/ 2\n        return cnt\n\n    C = count(A[0])\n    for i in range(1, N):\n        if count(A[i]) != C:\n            print((0))\n            exit()\n    lca = 1\n    for i in range(N):\n        g = gcd(lca, A[i])\n        lca = (lca * A[i]) \/\/ g\n    lca2 = lca \/\/ 2\n    ans = M \/\/ lca2 - M \/\/ lca\n    print(ans)\n\n\nmain()\n","code_same":false,"relative_loc_diff_percent":36.170212766,"diff":["-import fractions","-N, M = list(map(int, input().split()))","-a = list(map(int, input().split()))","-lcm = a[0]","-for i in range(1, N):","-    g = fractions.gcd(lcm, a[i])","-    lcm = lcm * a[i] \/\/ g","-g = a[0]","-for i in range(N):","-    g = fractions.gcd(g, a[i])","-for i in range(N):","-    if (a[i] \/\/ g) % 2 == 0:","-        lcm = 0","-        break","-ans = 0","-l = lcm \/\/ 2","-if l:","-    ans = (M \/\/ l) - (M \/\/ (l + l))","-print(ans)","+","+","+def I():","+    return int(eval(input()))","+","+","+def MI():","+    return list(map(int, input().split()))","+","+","+def LI():","+    return list(map(int, input().split()))","+","+","+\"\"\"","+2X = ak * (2p+1)","+\u57fa\u672c\u7684\u306b\u306f\u6700\u5c0f\u516c\u500d\u6570\/2\u3092\u57fa\u672c\u3068\u3057\uff0c\u3053\u308c\u306e\u5947\u6570\u500d\u304b\uff0e","+X  = (ak\/\/2) * (2p+1)","+\u3068\u66f8\u3051\u308b\uff0e\u7b2c\u4e8c\u9805\u304c\u5947\u6570\u306a\u306e\u3067\uff0c\u5404ak\u304c2\u3067\u5272\u308a\u5207\u308c\u308c\u3046\u56de\u6570\u304c\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044","+a=[2,4]\u3060\u3068\u7121\u7406","+\"\"\"","+","+","+def main():","+    from math import gcd","+","+    N, M = MI()","+    A = LI()","+","+    def count(X):","+        cnt = 0","+        while X % 2 == 0:","+            cnt += 1","+            X = X \/\/ 2","+        return cnt","+","+    C = count(A[0])","+    for i in range(1, N):","+        if count(A[i]) != C:","+            print((0))","+            exit()","+    lca = 1","+    for i in range(N):","+        g = gcd(lca, A[i])","+        lca = (lca * A[i]) \/\/ g","+    lca2 = lca \/\/ 2","+    ans = M \/\/ lca2 - M \/\/ lca","+    print(ans)","+","+","+main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.4226276507,"measured_runtime_v1":0.3026728499,"runtime_lift":1.396318338,"key":["s444255215","s830443344"]}
{"user_id":"u408260374","problem_id":"p00744","language":"python","submission_id_v0":"s226218538","submission_id_v1":"s459214194","cpu_time_v0":30250,"cpu_time_v1":21820,"memory_v0":106708,"memory_v1":188428,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":27.87,"input":"import collections\n\nimport math\n\n\n\n\n\nclass Dinic:\n\n    \"\"\"Dinic Algorithm: find max-flow\n\n       complexity: O(EV^2)\n\n       used in GRL6A(AOJ)\n\n    \"\"\"\n\n    class edge:\n\n        def __init__(self, to, cap, rev):\n\n            self.to, self.cap, self.rev = to, cap, rev\n\n\n\n    def __init__(self, V, E, source, sink):\n\n        \"\"\" V: the number of vertexes\n\n            E: adjacency list\n\n            source: start point\n\n            sink: goal point\n\n        \"\"\"\n\n        self.V = V\n\n        self.E = [[] for _ in range(V)]\n\n        for fr in range(V):\n\n            for to, cap in E[fr]:\n\n                self.E[fr].append(self.edge(to, cap, len(self.E[to])))\n\n                self.E[to].append(self.edge(fr, 0, len(self.E[fr])-1))\n\n        self.maxflow = self.dinic(source, sink)\n\n\n\n    def dinic(self, source, sink):\n\n        \"\"\"find max-flow\"\"\"\n\n        INF = float('inf')\n\n        maxflow = 0\n\n        while True:\n\n            self.bfs(source)\n\n            if self.level[sink] < 0:\n\n                return maxflow\n\n            self.itr = [0] * self.V\n\n            while True:\n\n                flow = self.dfs(source, sink, INF)\n\n                if flow > 0:\n\n                    maxflow += flow\n\n                else:\n\n                    break\n\n\n\n    def dfs(self, vertex, sink, flow):\n\n        \"\"\"find augmenting path\"\"\"\n\n        if vertex == sink:\n\n            return flow\n\n        for i in range(self.itr[vertex], len(self.E[vertex])):\n\n            self.itr[vertex] = i\n\n            e = self.E[vertex][i]\n\n            if e.cap > 0 and self.level[vertex] < self.level[e.to]:\n\n                d = self.dfs(e.to, sink, min(flow, e.cap))\n\n                if d > 0:\n\n                    e.cap -= d\n\n                    self.E[e.to][e.rev].cap += d\n\n                    return d\n\n        return 0\n\n\n\n    def bfs(self, start):\n\n        \"\"\"find shortest path from start\"\"\"\n\n        que = collections.deque()\n\n        self.level = [-1] * self.V\n\n        que.append(start)\n\n        self.level[start] = 0\n\n\n\n        while que:\n\n            fr = que.popleft()\n\n            for e in self.E[fr]:\n\n                if e.cap > 0 and self.level[e.to] < 0:\n\n                    self.level[e.to] = self.level[fr] + 1\n\n                    que.append(e.to)\n\n\n\nwhile True:\n\n    M, N = list(map(int, input().split()))\n\n    if M == 0 and N == 0:\n\n        break\n\n    blue, red = [], []\n\n    while True:\n\n        for x in input().split():\n\n            blue.append(int(x))\n\n        if len(blue) == M:\n\n            break\n\n    while True:\n\n        for x in input().split():\n\n            red.append(int(x))\n\n        if len(red) == N:\n\n            break\n\n    V = M + N + 2\n\n    edge = [set() for _ in range(V)]\n\n    for i, b in enumerate(blue):\n\n        if b != 1:\n\n            for j, r in enumerate(red):\n\n                if r % b == 0:\n\n                    edge[i].add((M+j, 1))\n\n        for j in range(2, int(math.sqrt(b)) + 1):\n\n            if b % j == 0:\n\n                for k, r in enumerate(red):\n\n                    if r % j == 0 or r % (b \/\/ j) == 0:\n\n                        edge[i].add((M+k, 1))\n\n    for i in range(M):\n\n        edge[M+N].add((i, 1))\n\n    for j in range(N):\n\n        edge[M+j].add((M+N+1, 1))\n\n    d = Dinic(V, edge, M+N, M+N+1)\n\n    print((d.maxflow))","target":"import collections\n\nimport math\n\nrange = xrange; input = raw_input\n\n\n\n\n\nclass Dinic:\n\n    \"\"\"Dinic Algorithm: find max-flow\n\n       complexity: O(EV^2)\n\n       used in GRL6A(AOJ)\n\n    \"\"\"\n\n    class edge:\n\n        def __init__(self, to, cap, rev):\n\n            self.to, self.cap, self.rev = to, cap, rev\n\n\n\n    def __init__(self, V, E, source, sink):\n\n        \"\"\" V: the number of vertexes\n\n            E: adjacency list\n\n            source: start point\n\n            sink: goal point\n\n        \"\"\"\n\n        self.V = V\n\n        self.E = [[] for _ in range(V)]\n\n        for fr in range(V):\n\n            for to, cap in E[fr]:\n\n                self.E[fr].append(self.edge(to, cap, len(self.E[to])))\n\n                self.E[to].append(self.edge(fr, 0, len(self.E[fr])-1))\n\n        self.maxflow = self.dinic(source, sink)\n\n\n\n    def dinic(self, source, sink):\n\n        \"\"\"find max-flow\"\"\"\n\n        INF = float('inf')\n\n        maxflow = 0\n\n        while True:\n\n            self.bfs(source)\n\n            if self.level[sink] < 0:\n\n                return maxflow\n\n            self.itr = [0] * self.V\n\n            while True:\n\n                flow = self.dfs(source, sink, INF)\n\n                if flow > 0:\n\n                    maxflow += flow\n\n                else:\n\n                    break\n\n\n\n    def dfs(self, vertex, sink, flow):\n\n        \"\"\"find augmenting path\"\"\"\n\n        if vertex == sink:\n\n            return flow\n\n        for i in range(self.itr[vertex], len(self.E[vertex])):\n\n            self.itr[vertex] = i\n\n            e = self.E[vertex][i]\n\n            if e.cap > 0 and self.level[vertex] < self.level[e.to]:\n\n                d = self.dfs(e.to, sink, min(flow, e.cap))\n\n                if d > 0:\n\n                    e.cap -= d\n\n                    self.E[e.to][e.rev].cap += d\n\n                    return d\n\n        return 0\n\n\n\n    def bfs(self, start):\n\n        \"\"\"find shortest path from start\"\"\"\n\n        que = collections.deque()\n\n        self.level = [-1] * self.V\n\n        que.append(start)\n\n        self.level[start] = 0\n\n\n\n        while que:\n\n            fr = que.popleft()\n\n            for e in self.E[fr]:\n\n                if e.cap > 0 and self.level[e.to] < 0:\n\n                    self.level[e.to] = self.level[fr] + 1\n\n                    que.append(e.to)\n\n\n\nwhile True:\n\n    M, N = list(map(int, input().split()))\n\n    if M == 0 and N == 0:\n\n        break\n\n    blue, red = [], []\n\n    while True:\n\n        for x in input().split():\n\n            blue.append(int(x))\n\n        if len(blue) == M:\n\n            break\n\n    while True:\n\n        for x in input().split():\n\n            red.append(int(x))\n\n        if len(red) == N:\n\n            break\n\n    V = M + N + 2\n\n    edge = [set() for _ in range(V)]\n\n    for i, b in enumerate(blue):\n\n        if b != 1:\n\n            for j, r in enumerate(red):\n\n                if r % b == 0:\n\n                    edge[i].add((M+j, 1))\n\n        for j in range(2, int(math.sqrt(b)) + 1):\n\n            if b % j == 0:\n\n                for k, r in enumerate(red):\n\n                    if r % j == 0 or r % (b \/\/ j) == 0:\n\n                        edge[i].add((M+k, 1))\n\n    for i in range(M):\n\n        edge[M+N].add((i, 1))\n\n    for j in range(N):\n\n        edge[M+j].add((M+N+1, 1))\n\n    d = Dinic(V, edge, M+N, M+N+1)\n\n    print((d.maxflow))","code_v0_loc":105,"code_v1_loc":106,"code_v0_num_chars":3249,"code_v1_num_chars":3284,"code_v0_no_empty_lines":"import collections\nimport math\n\n\nclass Dinic:\n    \"\"\"Dinic Algorithm: find max-flow\n    complexity: O(EV^2)\n    used in GRL6A(AOJ)\n    \"\"\"\n\n    class edge:\n        def __init__(self, to, cap, rev):\n            self.to, self.cap, self.rev = to, cap, rev\n\n    def __init__(self, V, E, source, sink):\n        \"\"\"V: the number of vertexes\n        E: adjacency list\n        source: start point\n        sink: goal point\n        \"\"\"\n        self.V = V\n        self.E = [[] for _ in range(V)]\n        for fr in range(V):\n            for to, cap in E[fr]:\n                self.E[fr].append(self.edge(to, cap, len(self.E[to])))\n                self.E[to].append(self.edge(fr, 0, len(self.E[fr]) - 1))\n        self.maxflow = self.dinic(source, sink)\n\n    def dinic(self, source, sink):\n        \"\"\"find max-flow\"\"\"\n        INF = float(\"inf\")\n        maxflow = 0\n        while True:\n            self.bfs(source)\n            if self.level[sink] < 0:\n                return maxflow\n            self.itr = [0] * self.V\n            while True:\n                flow = self.dfs(source, sink, INF)\n                if flow > 0:\n                    maxflow += flow\n                else:\n                    break\n\n    def dfs(self, vertex, sink, flow):\n        \"\"\"find augmenting path\"\"\"\n        if vertex == sink:\n            return flow\n        for i in range(self.itr[vertex], len(self.E[vertex])):\n            self.itr[vertex] = i\n            e = self.E[vertex][i]\n            if e.cap > 0 and self.level[vertex] < self.level[e.to]:\n                d = self.dfs(e.to, sink, min(flow, e.cap))\n                if d > 0:\n                    e.cap -= d\n                    self.E[e.to][e.rev].cap += d\n                    return d\n        return 0\n\n    def bfs(self, start):\n        \"\"\"find shortest path from start\"\"\"\n        que = collections.deque()\n        self.level = [-1] * self.V\n        que.append(start)\n        self.level[start] = 0\n        while que:\n            fr = que.popleft()\n            for e in self.E[fr]:\n                if e.cap > 0 and self.level[e.to] < 0:\n                    self.level[e.to] = self.level[fr] + 1\n                    que.append(e.to)\n\n\nwhile True:\n    M, N = list(map(int, input().split()))\n    if M == 0 and N == 0:\n        break\n    blue, red = [], []\n    while True:\n        for x in input().split():\n            blue.append(int(x))\n        if len(blue) == M:\n            break\n    while True:\n        for x in input().split():\n            red.append(int(x))\n        if len(red) == N:\n            break\n    V = M + N + 2\n    edge = [set() for _ in range(V)]\n    for i, b in enumerate(blue):\n        if b != 1:\n            for j, r in enumerate(red):\n                if r % b == 0:\n                    edge[i].add((M + j, 1))\n        for j in range(2, int(math.sqrt(b)) + 1):\n            if b % j == 0:\n                for k, r in enumerate(red):\n                    if r % j == 0 or r % (b \/\/ j) == 0:\n                        edge[i].add((M + k, 1))\n    for i in range(M):\n        edge[M + N].add((i, 1))\n    for j in range(N):\n        edge[M + j].add((M + N + 1, 1))\n    d = Dinic(V, edge, M + N, M + N + 1)\n    print((d.maxflow))\n","code_v1_no_empty_lines":"import collections\nimport math\n\nrange = xrange\ninput = raw_input\n\n\nclass Dinic:\n    \"\"\"Dinic Algorithm: find max-flow\n    complexity: O(EV^2)\n    used in GRL6A(AOJ)\n    \"\"\"\n\n    class edge:\n        def __init__(self, to, cap, rev):\n            self.to, self.cap, self.rev = to, cap, rev\n\n    def __init__(self, V, E, source, sink):\n        \"\"\"V: the number of vertexes\n        E: adjacency list\n        source: start point\n        sink: goal point\n        \"\"\"\n        self.V = V\n        self.E = [[] for _ in range(V)]\n        for fr in range(V):\n            for to, cap in E[fr]:\n                self.E[fr].append(self.edge(to, cap, len(self.E[to])))\n                self.E[to].append(self.edge(fr, 0, len(self.E[fr]) - 1))\n        self.maxflow = self.dinic(source, sink)\n\n    def dinic(self, source, sink):\n        \"\"\"find max-flow\"\"\"\n        INF = float(\"inf\")\n        maxflow = 0\n        while True:\n            self.bfs(source)\n            if self.level[sink] < 0:\n                return maxflow\n            self.itr = [0] * self.V\n            while True:\n                flow = self.dfs(source, sink, INF)\n                if flow > 0:\n                    maxflow += flow\n                else:\n                    break\n\n    def dfs(self, vertex, sink, flow):\n        \"\"\"find augmenting path\"\"\"\n        if vertex == sink:\n            return flow\n        for i in range(self.itr[vertex], len(self.E[vertex])):\n            self.itr[vertex] = i\n            e = self.E[vertex][i]\n            if e.cap > 0 and self.level[vertex] < self.level[e.to]:\n                d = self.dfs(e.to, sink, min(flow, e.cap))\n                if d > 0:\n                    e.cap -= d\n                    self.E[e.to][e.rev].cap += d\n                    return d\n        return 0\n\n    def bfs(self, start):\n        \"\"\"find shortest path from start\"\"\"\n        que = collections.deque()\n        self.level = [-1] * self.V\n        que.append(start)\n        self.level[start] = 0\n        while que:\n            fr = que.popleft()\n            for e in self.E[fr]:\n                if e.cap > 0 and self.level[e.to] < 0:\n                    self.level[e.to] = self.level[fr] + 1\n                    que.append(e.to)\n\n\nwhile True:\n    M, N = list(map(int, input().split()))\n    if M == 0 and N == 0:\n        break\n    blue, red = [], []\n    while True:\n        for x in input().split():\n            blue.append(int(x))\n        if len(blue) == M:\n            break\n    while True:\n        for x in input().split():\n            red.append(int(x))\n        if len(red) == N:\n            break\n    V = M + N + 2\n    edge = [set() for _ in range(V)]\n    for i, b in enumerate(blue):\n        if b != 1:\n            for j, r in enumerate(red):\n                if r % b == 0:\n                    edge[i].add((M + j, 1))\n        for j in range(2, int(math.sqrt(b)) + 1):\n            if b % j == 0:\n                for k, r in enumerate(red):\n                    if r % j == 0 or r % (b \/\/ j) == 0:\n                        edge[i].add((M + k, 1))\n    for i in range(M):\n        edge[M + N].add((i, 1))\n    for j in range(N):\n        edge[M + j].add((M + N + 1, 1))\n    d = Dinic(V, edge, M + N, M + N + 1)\n    print((d.maxflow))\n","code_same":false,"relative_loc_diff_percent":0.9433962264,"diff":["+","+range = xrange","+input = raw_input"],"diff_only_import_comment":false,"measured_runtime_v0":0.4880815578,"measured_runtime_v1":0.2093546903,"runtime_lift":2.3313619437,"key":["s226218538","s459214194"]}
{"user_id":"u759934006","problem_id":"p00174","language":"python","submission_id_v0":"s437122774","submission_id_v1":"s723923476","cpu_time_v0":20,"cpu_time_v1":10,"memory_v0":4228,"memory_v1":4232,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":50.0,"input":"while True:\n\n    try:\n\n        for i in range(3):\n\n            line = input().strip()\n\n            if line == '0':\n\n                raise Exception\n\n\n\n            a = b = 0\n\n            for i, s in enumerate(line):\n\n                if i != 0:\n\n                    if s == 'A':\n\n                        a += 1\n\n                    else:\n\n                        b += 1\n\n            if a > b:\n\n                a += 1\n\n            else:\n\n                b += 1\n\n            print(a, b)\n\n\n\n    except:\n\n        break","target":"while True:\n\n    try:\n\n        for i in range(3):\n\n            line = input().strip()\n\n            if line == '0':\n\n                raise Exception\n\n\n\n            if line[0] == 'A':\n\n                a = -1\n\n                b = 0\n\n            else:\n\n                a = 0\n\n                b = -1\n\n            for i, s in enumerate(line):\n\n                if s == 'A':\n\n                    a += 1\n\n                else:\n\n                    b += 1\n\n            if a > b:\n\n                a += 1\n\n            else:\n\n                b += 1\n\n            print(a, b)\n\n\n\n    except:\n\n        break","code_v0_loc":22,"code_v1_loc":26,"code_v0_num_chars":515,"code_v1_num_chars":593,"code_v0_no_empty_lines":"while True:\n    try:\n        for i in range(3):\n            line = input().strip()\n            if line == \"0\":\n                raise Exception\n            a = b = 0\n            for i, s in enumerate(line):\n                if i != 0:\n                    if s == \"A\":\n                        a += 1\n                    else:\n                        b += 1\n            if a > b:\n                a += 1\n            else:\n                b += 1\n            print(a, b)\n    except:\n        break\n","code_v1_no_empty_lines":"while True:\n    try:\n        for i in range(3):\n            line = input().strip()\n            if line == \"0\":\n                raise Exception\n            if line[0] == \"A\":\n                a = -1\n                b = 0\n            else:\n                a = 0\n                b = -1\n            for i, s in enumerate(line):\n                if s == \"A\":\n                    a += 1\n                else:\n                    b += 1\n            if a > b:\n                a += 1\n            else:\n                b += 1\n            print(a, b)\n    except:\n        break\n","code_same":false,"relative_loc_diff_percent":15.3846153846,"diff":["-            a = b = 0","+            if line[0] == \"A\":","+                a = -1","+                b = 0","+            else:","+                a = 0","+                b = -1","-                if i != 0:","-                    if s == \"A\":","-                        a += 1","-                    else:","-                        b += 1","+                if s == \"A\":","+                    a += 1","+                else:","+                    b += 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.1803158569,"measured_runtime_v1":0.0065688469,"runtime_lift":27.4501534712,"key":["s437122774","s723923476"]}
{"user_id":"u867848444","problem_id":"p03559","language":"python","submission_id_v0":"s912886810","submission_id_v1":"s338115037","cpu_time_v0":472,"cpu_time_v1":254,"memory_v0":106340,"memory_v1":29384,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":46.19,"input":"from bisect import *\n\nn = int(eval(input()))\n\na = list(map(int,input().split()))\n\nb = list(map(int,input().split()))\n\nc = list(map(int,input().split()))\n\n\n\na = sorted(a)\n\nc = sorted(c)\n\n\n\nrec = 0\n\nfor i in range(n):\n\n    temp = b[i]\n\n    l = bisect_left(a, temp)\n\n    r = bisect_right(c, temp)\n\n    rec += l * (n - r)\n\nprint(rec)","target":"from bisect import *\n\nn = int(eval(input()))\n\na = list(map(int,input().split()))\n\nb = list(map(int,input().split()))\n\nc = list(map(int,input().split()))\n\n\n\na.sort()\n\nc.sort()\n\nres = 0\n\nfor i in b:\n\n    temp_a = bisect_left(a, i)\n\n    temp_c = n - bisect_right(c, i)\n\n    res += temp_a*temp_c\n\nprint(res)","code_v0_loc":16,"code_v1_loc":14,"code_v0_num_chars":323,"code_v1_num_chars":297,"code_v0_no_empty_lines":"from bisect import *\n\nn = int(eval(input()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\na = sorted(a)\nc = sorted(c)\nrec = 0\nfor i in range(n):\n    temp = b[i]\n    l = bisect_left(a, temp)\n    r = bisect_right(c, temp)\n    rec += l * (n - r)\nprint(rec)\n","code_v1_no_empty_lines":"from bisect import *\n\nn = int(eval(input()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\na.sort()\nc.sort()\nres = 0\nfor i in b:\n    temp_a = bisect_left(a, i)\n    temp_c = n - bisect_right(c, i)\n    res += temp_a * temp_c\nprint(res)\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-a = sorted(a)","-c = sorted(c)","-rec = 0","-for i in range(n):","-    temp = b[i]","-    l = bisect_left(a, temp)","-    r = bisect_right(c, temp)","-    rec += l * (n - r)","-print(rec)","+a.sort()","+c.sort()","+res = 0","+for i in b:","+    temp_a = bisect_left(a, i)","+    temp_c = n - bisect_right(c, i)","+    res += temp_a * temp_c","+print(res)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2357759671,"measured_runtime_v1":0.1661899195,"runtime_lift":1.4187140102,"key":["s912886810","s338115037"]}
{"user_id":"u784022244","problem_id":"p02837","language":"python","submission_id_v0":"s559335403","submission_id_v1":"s607948233","cpu_time_v0":1624,"cpu_time_v1":1457,"memory_v0":3064,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.28,"input":"N=int(eval(input()))\n\n\n\nS=[[-1]*N for _ in range(N)]\n\nfor i in range(N):\n\n  A=int(eval(input()))\n\n  for _ in range(A):\n\n    x, y=list(map(int, input().split()))\n\n    S[i][x-1]=y\n\nans=0   \n\nfor s in range(2**N):\n\n  ok=True\n\n  for i in range(N):\n\n    #\u6b63\u76f4\u8005\u306b\u3064\u3044\u3066\u898b\u3066\u3044\u304f\n\n    if (s>>i&1)==1:\n\n      for j in range(N):\n\n        #\u305d\u308c\u305e\u308c\u6b63\u76f4\u8005\u306e\u8a3c\u8a00\u304c\u77db\u76fe\u306a\u3044\u304b\n\n        if S[i][j]!=-1 and (s>>j&1)!=S[i][j]:\n\n          ok=False\n\n  if ok:\n\n    ans=max(ans, bin(s).count(\"1\"))\n\n    \n\nprint(ans)\n","target":"N=int(eval(input()))\n\n\n\nA=[[-1]*N for _ in range(N)]\n\nfor i in range(N):\n\n  a=int(eval(input()))\n\n  for j in range(a):\n\n    x,y=list(map(int, input().split()))\n\n    A[i][x-1]=y\n\n#\u6b63\u76f4\u8005\u304c\u6b63\u76f4\u8005\u306b\u4e0d\u89aa\u5207\u3068\u8a00\u308f\u308c\u3066\u3044\u306a\u3044\n\n#\u2192\u6b63\u76f4\u3082\u306e\u304c\u4e0d\u89aa\u5207\u3092\u6b63\u76f4\u8005\u3068\u8a00\u3063\u3066\u3044\u306a\u3044\u304b\n\nans=0\n\nfor i in range(2**N):\n\n  ok=True\n\n  for j in range(N):\n\n    if (i>>j&1)==1:\n\n      for k in range(N):\n\n        if A[j][k]!=-1 and (i>>k&1)!=A[j][k]:\n\n          ok=False\n\n  if ok:\n\n    ans=max(ans, bin(i).count(\"1\"))\n\n  \n\nprint(ans)","code_v0_loc":22,"code_v1_loc":22,"code_v0_num_chars":450,"code_v1_num_chars":444,"code_v0_no_empty_lines":"N = int(eval(input()))\nS = [[-1] * N for _ in range(N)]\nfor i in range(N):\n    A = int(eval(input()))\n    for _ in range(A):\n        x, y = list(map(int, input().split()))\n        S[i][x - 1] = y\nans = 0\nfor s in range(2**N):\n    ok = True\n    for i in range(N):\n        # \u6b63\u76f4\u8005\u306b\u3064\u3044\u3066\u898b\u3066\u3044\u304f\n        if (s >> i & 1) == 1:\n            for j in range(N):\n                # \u305d\u308c\u305e\u308c\u6b63\u76f4\u8005\u306e\u8a3c\u8a00\u304c\u77db\u76fe\u306a\u3044\u304b\n                if S[i][j] != -1 and (s >> j & 1) != S[i][j]:\n                    ok = False\n    if ok:\n        ans = max(ans, bin(s).count(\"1\"))\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = [[-1] * N for _ in range(N)]\nfor i in range(N):\n    a = int(eval(input()))\n    for j in range(a):\n        x, y = list(map(int, input().split()))\n        A[i][x - 1] = y\n# \u6b63\u76f4\u8005\u304c\u6b63\u76f4\u8005\u306b\u4e0d\u89aa\u5207\u3068\u8a00\u308f\u308c\u3066\u3044\u306a\u3044\n# \u2192\u6b63\u76f4\u3082\u306e\u304c\u4e0d\u89aa\u5207\u3092\u6b63\u76f4\u8005\u3068\u8a00\u3063\u3066\u3044\u306a\u3044\u304b\nans = 0\nfor i in range(2**N):\n    ok = True\n    for j in range(N):\n        if (i >> j & 1) == 1:\n            for k in range(N):\n                if A[j][k] != -1 and (i >> k & 1) != A[j][k]:\n                    ok = False\n    if ok:\n        ans = max(ans, bin(i).count(\"1\"))\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-S = [[-1] * N for _ in range(N)]","+A = [[-1] * N for _ in range(N)]","-    A = int(eval(input()))","-    for _ in range(A):","+    a = int(eval(input()))","+    for j in range(a):","-        S[i][x - 1] = y","+        A[i][x - 1] = y","+# \u6b63\u76f4\u8005\u304c\u6b63\u76f4\u8005\u306b\u4e0d\u89aa\u5207\u3068\u8a00\u308f\u308c\u3066\u3044\u306a\u3044","+# \u2192\u6b63\u76f4\u3082\u306e\u304c\u4e0d\u89aa\u5207\u3092\u6b63\u76f4\u8005\u3068\u8a00\u3063\u3066\u3044\u306a\u3044\u304b","-for s in range(2**N):","+for i in range(2**N):","-    for i in range(N):","-        # \u6b63\u76f4\u8005\u306b\u3064\u3044\u3066\u898b\u3066\u3044\u304f","-        if (s >> i & 1) == 1:","-            for j in range(N):","-                # \u305d\u308c\u305e\u308c\u6b63\u76f4\u8005\u306e\u8a3c\u8a00\u304c\u77db\u76fe\u306a\u3044\u304b","-                if S[i][j] != -1 and (s >> j & 1) != S[i][j]:","+    for j in range(N):","+        if (i >> j & 1) == 1:","+            for k in range(N):","+                if A[j][k] != -1 and (i >> k & 1) != A[j][k]:","-        ans = max(ans, bin(s).count(\"1\"))","+        ans = max(ans, bin(i).count(\"1\"))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3389718752,"measured_runtime_v1":0.2550898321,"runtime_lift":1.3288333464,"key":["s559335403","s607948233"]}
{"user_id":"u842747358","problem_id":"p02899","language":"python","submission_id_v0":"s407352029","submission_id_v1":"s941706304","cpu_time_v0":381,"cpu_time_v1":79,"memory_v0":55248,"memory_v1":21068,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":79.27,"input":"import numpy as np\n\nfrom copy import deepcopy\n\n\n\nN = int(eval(input()))\n\nA = []\n\nA.append(list(map(int, input().split())))\n\na = deepcopy(A[0])\n\na.sort()\n\nA.append(a)\n\nA_t = np.array(A).T.tolist()\n\nA_t.sort()\n\n\n\nout = []\n\nfor i in range(N):\n\n    out.append(str(A_t[i][1]))\n\nprint((\" \".join(out)))\n","target":"N = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n\n\nrev = [\"\"] * N\n\nfor i in range(N):\n\n    rev[A[i]-1] = str(i+1)\n\nprint((\" \".join(rev)))\n","code_v0_loc":16,"code_v1_loc":7,"code_v0_num_chars":288,"code_v1_num_chars":142,"code_v0_no_empty_lines":"import numpy as np\nfrom copy import deepcopy\n\nN = int(eval(input()))\nA = []\nA.append(list(map(int, input().split())))\na = deepcopy(A[0])\na.sort()\nA.append(a)\nA_t = np.array(A).T.tolist()\nA_t.sort()\nout = []\nfor i in range(N):\n    out.append(str(A_t[i][1]))\nprint((\" \".join(out)))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = list(map(int, input().split()))\nrev = [\"\"] * N\nfor i in range(N):\n    rev[A[i] - 1] = str(i + 1)\nprint((\" \".join(rev)))\n","code_same":false,"relative_loc_diff_percent":56.25,"diff":["-import numpy as np","-from copy import deepcopy","-","-A = []","-A.append(list(map(int, input().split())))","-a = deepcopy(A[0])","-a.sort()","-A.append(a)","-A_t = np.array(A).T.tolist()","-A_t.sort()","-out = []","+A = list(map(int, input().split()))","+rev = [\"\"] * N","-    out.append(str(A_t[i][1]))","-print((\" \".join(out)))","+    rev[A[i] - 1] = str(i + 1)","+print((\" \".join(rev)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3604369454,"measured_runtime_v1":0.1764305278,"runtime_lift":7.7108931321,"key":["s407352029","s941706304"]}
{"user_id":"u761320129","problem_id":"p03592","language":"python","submission_id_v0":"s651607907","submission_id_v1":"s022339691","cpu_time_v0":277,"cpu_time_v1":242,"memory_v0":9168,"memory_v1":9152,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":12.64,"input":"N,M,K = list(map(int,input().split()))\n\n\n\nfor i in range(N+1):\n\n    for j in range(M+1):\n\n        t = i*M + j*N - i*j*2\n\n        if t==K:\n\n            print('Yes')\n\n            exit()\n\nprint('No')","target":"N,M,K = list(map(int,input().split()))\n\n\n\nfor i in range(N+1):\n\n    for j in range(M+1):\n\n        if i*(M-j) + j*(N-i) == K:\n\n            print('Yes')\n\n            exit()\n\nprint('No')","code_v0_loc":9,"code_v1_loc":8,"code_v0_num_chars":190,"code_v1_num_chars":177,"code_v0_no_empty_lines":"N, M, K = list(map(int, input().split()))\nfor i in range(N + 1):\n    for j in range(M + 1):\n        t = i * M + j * N - i * j * 2\n        if t == K:\n            print(\"Yes\")\n            exit()\nprint(\"No\")\n","code_v1_no_empty_lines":"N, M, K = list(map(int, input().split()))\nfor i in range(N + 1):\n    for j in range(M + 1):\n        if i * (M - j) + j * (N - i) == K:\n            print(\"Yes\")\n            exit()\nprint(\"No\")\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["-        t = i * M + j * N - i * j * 2","-        if t == K:","+        if i * (M - j) + j * (N - i) == K:"],"diff_only_import_comment":false,"measured_runtime_v0":0.2590724151,"measured_runtime_v1":0.2069754691,"runtime_lift":1.2517058964,"key":["s651607907","s022339691"]}
{"user_id":"u078042885","problem_id":"p00542","language":"python","submission_id_v0":"s237799080","submission_id_v1":"s666902384","cpu_time_v0":30,"cpu_time_v1":20,"memory_v0":7744,"memory_v1":7736,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":33.33,"input":"a,b,c,d,e,f=[int(eval(input())) for _ in range(6)]\n\nprint((sum([a,b,c,d,max(e,f)])-min([a,b,c,d])))","target":"print((sum(sorted(int(eval(input())) for _ in range(4))[1:])+max([int(eval(input())) for _ in range(2)])))","code_v0_loc":2,"code_v1_loc":1,"code_v0_num_chars":91,"code_v1_num_chars":92,"code_v0_no_empty_lines":"a, b, c, d, e, f = [int(eval(input())) for _ in range(6)]\nprint((sum([a, b, c, d, max(e, f)]) - min([a, b, c, d])))\n","code_v1_no_empty_lines":"print(\n    (\n        sum(sorted(int(eval(input())) for _ in range(4))[1:])\n        + max([int(eval(input())) for _ in range(2)])\n    )\n)\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-a, b, c, d, e, f = [int(eval(input())) for _ in range(6)]","-print((sum([a, b, c, d, max(e, f)]) - min([a, b, c, d])))","+print(","+    (","+        sum(sorted(int(eval(input())) for _ in range(4))[1:])","+        + max([int(eval(input())) for _ in range(2)])","+    )","+)"],"diff_only_import_comment":false,"measured_runtime_v0":0.1785885925,"measured_runtime_v1":0.1362432997,"runtime_lift":1.3108064241,"key":["s237799080","s666902384"]}
{"user_id":"u135454978","problem_id":"p03371","language":"python","submission_id_v0":"s681762997","submission_id_v1":"s948041496","cpu_time_v0":154,"cpu_time_v1":17,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.96,"input":"# AtCoder Beginner Contest 095 C - Half and Half\n\nimport sys\n\n\n\nA, B, C, X, Y = list(map(int, sys.stdin.readline().strip().split()))\n\n\n\nans = A * X + B * Y\n\nfor z in range(2, 2 * 10 ** 5 + 1, 2):\n\n    x = max(X - int(z \/ 2), 0)\n\n    y = max(Y - int(z \/ 2), 0)\n\n\n\n    price = A * x + B * y + C * z\n\n    ans = min(price, ans)\n\n\n\nprint(ans)\n","target":"# AtCoder Beginner Contest 095 C - Half and Half\n\nimport sys\n\n\n\nA, B, C, X, Y = list(map(int, sys.stdin.readline().strip().split()))\n\n\n\n\"\"\"\n\nans = A * X + B * Y\n\nfor z in range(2, 2 * 10 ** 5 + 1, 2):\n\n    x = max(X - int(z \/ 2), 0)\n\n    y = max(Y - int(z \/ 2), 0)\n\n\n\n    price = A * x + B * y + C * z\n\n    ans = min(price, ans)\n\n\n\nprint(ans)\n\n\"\"\"\n\n\n\nprice1 = A * X + B * Y\n\nprice2 = C * 2 * X + B * max(Y - X, 0)\n\nprice3 = A * max(X - Y, 0) + C * 2 * Y\n\nprint((min(price1, price2, price3)))\n\n\n","code_v0_loc":14,"code_v1_loc":22,"code_v0_num_chars":332,"code_v1_num_chars":486,"code_v0_no_empty_lines":"# AtCoder Beginner Contest 095 C - Half and Half\nimport sys\n\nA, B, C, X, Y = list(map(int, sys.stdin.readline().strip().split()))\nans = A * X + B * Y\nfor z in range(2, 2 * 10**5 + 1, 2):\n    x = max(X - int(z \/ 2), 0)\n    y = max(Y - int(z \/ 2), 0)\n    price = A * x + B * y + C * z\n    ans = min(price, ans)\nprint(ans)\n","code_v1_no_empty_lines":"# AtCoder Beginner Contest 095 C - Half and Half\nimport sys\n\nA, B, C, X, Y = list(map(int, sys.stdin.readline().strip().split()))\n\"\"\"\nans = A * X + B * Y\nfor z in range(2, 2 * 10 ** 5 + 1, 2):\n    x = max(X - int(z \/ 2), 0)\n    y = max(Y - int(z \/ 2), 0)\n    price = A * x + B * y + C * z\n    ans = min(price, ans)\nprint(ans)\n\"\"\"\nprice1 = A * X + B * Y\nprice2 = C * 2 * X + B * max(Y - X, 0)\nprice3 = A * max(X - Y, 0) + C * 2 * Y\nprint((min(price1, price2, price3)))\n","code_same":false,"relative_loc_diff_percent":36.3636363636,"diff":["+\"\"\"","-for z in range(2, 2 * 10**5 + 1, 2):","+for z in range(2, 2 * 10 ** 5 + 1, 2):","+\"\"\"","+price1 = A * X + B * Y","+price2 = C * 2 * X + B * max(Y - X, 0)","+price3 = A * max(X - Y, 0) + C * 2 * Y","+print((min(price1, price2, price3)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.7125969741,"measured_runtime_v1":0.2827094927,"runtime_lift":6.0577979106,"key":["s681762997","s948041496"]}
{"user_id":"u545368057","problem_id":"p02773","language":"python","submission_id_v0":"s347160213","submission_id_v1":"s313812634","cpu_time_v0":801,"cpu_time_v1":714,"memory_v0":32480,"memory_v1":35572,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.86,"input":"from collections import defaultdict\n\nN = int(eval(input()))\n\nd = defaultdict(int)\n\n\n\nfor i in range(N):\n\n    S = eval(input())\n\n    d[S] += 1\n\n\n\nm = 0\n\nfor k in list(d.keys()):\n\n    m = max(d[k],m)\n\n\n\nli = []\n\nfor k in list(d.keys()):\n\n    if d[k] == m:\n\n        li.append(k)\n\n\n\nli.sort()\n\nfor l in li:\n\n    print(l)","target":"from collections import defaultdict\n\nN = int(eval(input()))\n\nSs = [eval(input()) for i in range(N)]\n\n\n\nd = defaultdict(int)\n\nfor S in Ss:\n\n    d[S] += 1\n\n\n\nmx = max([d[k] for k in list(d.keys())])\n\n\n\nans = []\n\nfor k in list(d.keys()):\n\n    if d[k] == mx:\n\n       ans.append(k)\n\n       \n\nfor a in sorted(ans):\n\n    print(a)","code_v0_loc":20,"code_v1_loc":17,"code_v0_num_chars":292,"code_v1_num_chars":298,"code_v0_no_empty_lines":"from collections import defaultdict\n\nN = int(eval(input()))\nd = defaultdict(int)\nfor i in range(N):\n    S = eval(input())\n    d[S] += 1\nm = 0\nfor k in list(d.keys()):\n    m = max(d[k], m)\nli = []\nfor k in list(d.keys()):\n    if d[k] == m:\n        li.append(k)\nli.sort()\nfor l in li:\n    print(l)\n","code_v1_no_empty_lines":"from collections import defaultdict\n\nN = int(eval(input()))\nSs = [eval(input()) for i in range(N)]\nd = defaultdict(int)\nfor S in Ss:\n    d[S] += 1\nmx = max([d[k] for k in list(d.keys())])\nans = []\nfor k in list(d.keys()):\n    if d[k] == mx:\n        ans.append(k)\nfor a in sorted(ans):\n    print(a)\n","code_same":false,"relative_loc_diff_percent":15.0,"diff":["+Ss = [eval(input()) for i in range(N)]","-for i in range(N):","-    S = eval(input())","+for S in Ss:","-m = 0","+mx = max([d[k] for k in list(d.keys())])","+ans = []","-    m = max(d[k], m)","-li = []","-for k in list(d.keys()):","-    if d[k] == m:","-        li.append(k)","-li.sort()","-for l in li:","-    print(l)","+    if d[k] == mx:","+        ans.append(k)","+for a in sorted(ans):","+    print(a)"],"diff_only_import_comment":false,"measured_runtime_v0":0.1866922059,"measured_runtime_v1":0.0060809708,"runtime_lift":30.7010529798,"key":["s347160213","s313812634"]}
{"user_id":"u600402037","problem_id":"p03037","language":"python","submission_id_v0":"s181457641","submission_id_v1":"s911516772","cpu_time_v0":300,"cpu_time_v1":197,"memory_v0":11012,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":34.33,"input":"N,M = list(map(int,input().split()))\n\nL,R = [],[]\n\nfor i in range(M):\n\n    l,r = list(map(int,input().split()))\n\n    L.append(l)\n\n    R.append(r)\n\nans = min(R)-max(L)+1\n\nprint((ans if ans >= 0 else 0))","target":"# coding: utf-8\n\nimport sys\n\n\n\nsr = lambda: sys.stdin.readline().rstrip()\n\nir = lambda: int(sr())\n\nlr = lambda: list(map(int, sr().split()))\n\n\n\nN, M = lr()\n\nL = 0; R = 10 ** 6\n\nfor _ in range(M):\n\n    l, r = lr()\n\n    if l > L:\n\n        L = l\n\n    if r < R:\n\n        R = r\n\n\n\nanswer = max(0, R - L + 1)\n\nprint(answer)\n","code_v0_loc":8,"code_v1_loc":18,"code_v0_num_chars":187,"code_v1_num_chars":318,"code_v0_no_empty_lines":"N, M = list(map(int, input().split()))\nL, R = [], []\nfor i in range(M):\n    l, r = list(map(int, input().split()))\n    L.append(l)\n    R.append(r)\nans = min(R) - max(L) + 1\nprint((ans if ans >= 0 else 0))\n","code_v1_no_empty_lines":"# coding: utf-8\nimport sys\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\nN, M = lr()\nL = 0\nR = 10**6\nfor _ in range(M):\n    l, r = lr()\n    if l > L:\n        L = l\n    if r < R:\n        R = r\nanswer = max(0, R - L + 1)\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":55.5555555556,"diff":["-N, M = list(map(int, input().split()))","-L, R = [], []","-for i in range(M):","-    l, r = list(map(int, input().split()))","-    L.append(l)","-    R.append(r)","-ans = min(R) - max(L) + 1","-print((ans if ans >= 0 else 0))","+# coding: utf-8","+import sys","+","+sr = lambda: sys.stdin.readline().rstrip()","+ir = lambda: int(sr())","+lr = lambda: list(map(int, sr().split()))","+N, M = lr()","+L = 0","+R = 10**6","+for _ in range(M):","+    l, r = lr()","+    if l > L:","+        L = l","+    if r < R:","+        R = r","+answer = max(0, R - L + 1)","+print(answer)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2034662783,"measured_runtime_v1":0.0060762894,"runtime_lift":33.4852842041,"key":["s181457641","s911516772"]}
{"user_id":"u554953477","problem_id":"p02555","language":"python","submission_id_v0":"s871406737","submission_id_v1":"s010236218","cpu_time_v0":390,"cpu_time_v1":26,"memory_v0":9068,"memory_v1":8996,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":93.33,"input":"MOD = 1000000007\n\n\n\n\n\nS = int(eval(input()))\n\n\n\n#dp[i]:=i\u6841\u306e\u6570\u5217\u3067\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u306e\u6570\n\ndp = [0]*(S+1)\n\n\n\nfor i in range(3,S+1):\n\n    #dp[i]=sum(dp[0],..,dp[i-3])+1\n\n    for j in range(i-3+1):\n\n        dp[i] = (dp[i]+dp[j])%MOD\n\n    dp[i] = (dp[i]+1)%MOD\n\n\n\nprint((dp[S]))","target":"MOD = 1000000007\n\n\n\n\n\nS = int(eval(input()))\n\n\n\n#dp[i]:=i\u6841\u306e\u6570\u5217\u3067\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u306e\u6570\n\ndp = [0]*(S+1)\n\ndp_sum = [0]*(S+1)\n\n\n\nfor i in range(3,S+1):\n\n    #dp[i]=sum(dp[0],..,dp[i-3])+1\n\n    \n\n    dp[i] = (dp_sum[i-3]+1)%MOD\n\n    dp_sum[i] = (dp[i]+dp_sum[i-1])%MOD\n\n\n\nprint((dp[S]))","code_v0_loc":15,"code_v1_loc":16,"code_v0_num_chars":250,"code_v1_num_chars":260,"code_v0_no_empty_lines":"MOD = 1000000007\nS = int(eval(input()))\n# dp[i]:=i\u6841\u306e\u6570\u5217\u3067\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u306e\u6570\ndp = [0] * (S + 1)\nfor i in range(3, S + 1):\n    # dp[i]=sum(dp[0],..,dp[i-3])+1\n    for j in range(i - 3 + 1):\n        dp[i] = (dp[i] + dp[j]) % MOD\n    dp[i] = (dp[i] + 1) % MOD\nprint((dp[S]))\n","code_v1_no_empty_lines":"MOD = 1000000007\nS = int(eval(input()))\n# dp[i]:=i\u6841\u306e\u6570\u5217\u3067\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u306e\u6570\ndp = [0] * (S + 1)\ndp_sum = [0] * (S + 1)\nfor i in range(3, S + 1):\n    # dp[i]=sum(dp[0],..,dp[i-3])+1\n    dp[i] = (dp_sum[i - 3] + 1) % MOD\n    dp_sum[i] = (dp[i] + dp_sum[i - 1]) % MOD\nprint((dp[S]))\n","code_same":false,"relative_loc_diff_percent":6.25,"diff":["+dp_sum = [0] * (S + 1)","-    for j in range(i - 3 + 1):","-        dp[i] = (dp[i] + dp[j]) % MOD","-    dp[i] = (dp[i] + 1) % MOD","+    dp[i] = (dp_sum[i - 3] + 1) % MOD","+    dp_sum[i] = (dp[i] + dp_sum[i - 1]) % MOD"],"diff_only_import_comment":false,"measured_runtime_v0":0.581069243,"measured_runtime_v1":0.1960333576,"runtime_lift":2.9641345227,"key":["s871406737","s010236218"]}
{"user_id":"u952708174","problem_id":"p03273","language":"python","submission_id_v0":"s363239082","submission_id_v1":"s852466512","cpu_time_v0":1303,"cpu_time_v1":18,"memory_v0":21264,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":98.62,"input":"import numpy\n\nH, W = [int(i) for i in input().split()]\n\nA = numpy.array([list(input().strip()) for _ in range(H)])\n\n\n\nrow_space = []\n\ncol_space = []\n\n\n\nfor k, row in enumerate(A):\n\n    if '#' not in row:\n\n        row_space.append(k)\n\n\n\nA_rot = numpy.rot90(A, k=-1)\n\nfor k, row in enumerate(A_rot):\n\n    if '#' not in row:\n\n        col_space.append(k)\n\n\n\nA = numpy.delete(A, row_space, axis=0)\n\nA = numpy.delete(A, col_space, axis=1)\n\nans = '\\n'.join([''.join(row) for row in A])\n\nprint(ans)","target":"def rotate_clockwise(matrix):\n\n    tmp = list(map(list, list(zip(*matrix))))[::-1]\n\n    return list(''.join(row) for row in tmp)\n\n    # \u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3092\u5165\u308c\u308b\u306e\u3067\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3067\u8fd4\u3059\n\n\n\n\n\ndef rotate_counterclockwise(matrix):\n\n    tmp = list([list(x[::-1]) for x in zip(*matrix)])\n\n    return list(''.join(row) for row in tmp)\n\n    # \u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3092\u5165\u308c\u308b\u306e\u3067\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3067\u8fd4\u3059\n\n\n\n\n\nH, W = [int(i) for i in input().split()]\n\nA = [eval(input()) for _ in range(H)]\n\n\n\nrow_remove_count = 0\n\nwhile '.' * W in A:\n\n    A.remove('.' * W)  # \u884c\u307e\u308b\u3054\u3068\u767d\u306a\u3089\u3001\u56de\u6570\u3092\u8a18\u9332\u3057\u3066\u9664\u304f\n\n    row_remove_count += 1\n\n\n\nA = rotate_clockwise(A)  # \u53cd\u6642\u8a08\u56de\u308a\u306b\u56de\u3059\n\nwhile '.' * (H - row_remove_count) in A:\n\n    A.remove('.' * (H - row_remove_count))\n\n\n\nA = rotate_counterclockwise(A)  # \u6642\u8a08\u56de\u308a\u306b\u56de\u3057\u3066\u5143\u306b\u623b\u3059\n\nprint(('\\n'.join(A)))","code_v0_loc":20,"code_v1_loc":26,"code_v0_num_chars":490,"code_v1_num_chars":724,"code_v0_no_empty_lines":"import numpy\n\nH, W = [int(i) for i in input().split()]\nA = numpy.array([list(input().strip()) for _ in range(H)])\nrow_space = []\ncol_space = []\nfor k, row in enumerate(A):\n    if \"#\" not in row:\n        row_space.append(k)\nA_rot = numpy.rot90(A, k=-1)\nfor k, row in enumerate(A_rot):\n    if \"#\" not in row:\n        col_space.append(k)\nA = numpy.delete(A, row_space, axis=0)\nA = numpy.delete(A, col_space, axis=1)\nans = \"\\n\".join([\"\".join(row) for row in A])\nprint(ans)\n","code_v1_no_empty_lines":"def rotate_clockwise(matrix):\n    tmp = list(map(list, list(zip(*matrix))))[::-1]\n    return list(\"\".join(row) for row in tmp)\n    # \u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3092\u5165\u308c\u308b\u306e\u3067\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3067\u8fd4\u3059\n\n\ndef rotate_counterclockwise(matrix):\n    tmp = list([list(x[::-1]) for x in zip(*matrix)])\n    return list(\"\".join(row) for row in tmp)\n    # \u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3092\u5165\u308c\u308b\u306e\u3067\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3067\u8fd4\u3059\n\n\nH, W = [int(i) for i in input().split()]\nA = [eval(input()) for _ in range(H)]\nrow_remove_count = 0\nwhile \".\" * W in A:\n    A.remove(\".\" * W)  # \u884c\u307e\u308b\u3054\u3068\u767d\u306a\u3089\u3001\u56de\u6570\u3092\u8a18\u9332\u3057\u3066\u9664\u304f\n    row_remove_count += 1\nA = rotate_clockwise(A)  # \u53cd\u6642\u8a08\u56de\u308a\u306b\u56de\u3059\nwhile \".\" * (H - row_remove_count) in A:\n    A.remove(\".\" * (H - row_remove_count))\nA = rotate_counterclockwise(A)  # \u6642\u8a08\u56de\u308a\u306b\u56de\u3057\u3066\u5143\u306b\u623b\u3059\nprint((\"\\n\".join(A)))\n","code_same":false,"relative_loc_diff_percent":23.0769230769,"diff":["-import numpy","+def rotate_clockwise(matrix):","+    tmp = list(map(list, list(zip(*matrix))))[::-1]","+    return list(\"\".join(row) for row in tmp)","+    # \u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3092\u5165\u308c\u308b\u306e\u3067\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3067\u8fd4\u3059","+","+","+def rotate_counterclockwise(matrix):","+    tmp = list([list(x[::-1]) for x in zip(*matrix)])","+    return list(\"\".join(row) for row in tmp)","+    # \u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3092\u5165\u308c\u308b\u306e\u3067\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3067\u8fd4\u3059","+","-A = numpy.array([list(input().strip()) for _ in range(H)])","-row_space = []","-col_space = []","-for k, row in enumerate(A):","-    if \"#\" not in row:","-        row_space.append(k)","-A_rot = numpy.rot90(A, k=-1)","-for k, row in enumerate(A_rot):","-    if \"#\" not in row:","-        col_space.append(k)","-A = numpy.delete(A, row_space, axis=0)","-A = numpy.delete(A, col_space, axis=1)","-ans = \"\\n\".join([\"\".join(row) for row in A])","-print(ans)","+A = [eval(input()) for _ in range(H)]","+row_remove_count = 0","+while \".\" * W in A:","+    A.remove(\".\" * W)  # \u884c\u307e\u308b\u3054\u3068\u767d\u306a\u3089\u3001\u56de\u6570\u3092\u8a18\u9332\u3057\u3066\u9664\u304f","+    row_remove_count += 1","+A = rotate_clockwise(A)  # \u53cd\u6642\u8a08\u56de\u308a\u306b\u56de\u3059","+while \".\" * (H - row_remove_count) in A:","+    A.remove(\".\" * (H - row_remove_count))","+A = rotate_counterclockwise(A)  # \u6642\u8a08\u56de\u308a\u306b\u56de\u3057\u3066\u5143\u306b\u623b\u3059","+print((\"\\n\".join(A)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3900156258,"measured_runtime_v1":0.2221083821,"runtime_lift":6.2582763077,"key":["s363239082","s852466512"]}
{"user_id":"u175590965","problem_id":"p02881","language":"python","submission_id_v0":"s837964487","submission_id_v1":"s558772824","cpu_time_v0":232,"cpu_time_v1":167,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":28.02,"input":"n = int(eval(input()))\n\nl = []\n\nfor i in range(1,1000001):\n\n    a = n \/ i\n\n    if a.is_integer():\n\n        l.append(i+n\/i)\n\nprint((int(min(l)-2)))","target":"n = int(eval(input()))\n\na = 10**20\n\nfor i in range(1,int(n**0.5)+1):\n\n    if n%i==0:\n\n        a = min(a,i+n\/\/i)\n\nprint((a-2))","code_v0_loc":7,"code_v1_loc":6,"code_v0_num_chars":138,"code_v1_num_chars":117,"code_v0_no_empty_lines":"n = int(eval(input()))\nl = []\nfor i in range(1, 1000001):\n    a = n \/ i\n    if a.is_integer():\n        l.append(i + n \/ i)\nprint((int(min(l) - 2)))\n","code_v1_no_empty_lines":"n = int(eval(input()))\na = 10**20\nfor i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n        a = min(a, i + n \/\/ i)\nprint((a - 2))\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["-l = []","-for i in range(1, 1000001):","-    a = n \/ i","-    if a.is_integer():","-        l.append(i + n \/ i)","-print((int(min(l) - 2)))","+a = 10**20","+for i in range(1, int(n**0.5) + 1):","+    if n % i == 0:","+        a = min(a, i + n \/\/ i)","+print((a - 2))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3549120984,"measured_runtime_v1":0.219868273,"runtime_lift":6.1623811373,"key":["s837964487","s558772824"]}
{"user_id":"u597455618","problem_id":"p03640","language":"python","submission_id_v0":"s574129545","submission_id_v1":"s549640590","cpu_time_v0":121,"cpu_time_v1":34,"memory_v0":27292,"memory_v1":9536,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":71.9,"input":"import sys\n\nimport numpy as np\n\n\n\n\n\ndef main():\n\n    h, w = list(map(int, sys.stdin.buffer.readline().split()))\n\n    n = int(sys.stdin.buffer.readline())\n\n    a = list(map(int, sys.stdin.buffer.readline().split()))\n\n    ans = np.zeros(w*h, np.int64)\n\n    now = 0\n\n    for i, x in enumerate(a):\n\n        for j in range(x):\n\n            ans[now + j] = i+1\n\n        now += x\n\n\n\n    ans = ans.reshape(h, w)\n\n    for i in range(h):\n\n        if i % 2:\n\n            print((*ans[i, ::-1]))\n\n        else:\n\n            print((*ans[i]))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"import sys\n\n\n\n\n\ndef main():\n\n    h, w = list(map(int, sys.stdin.buffer.readline().split()))\n\n    n = int(sys.stdin.buffer.readline())\n\n    a = list(map(int, sys.stdin.buffer.readline().split()))\n\n    ans = [0]*(w*h)\n\n    now = 0\n\n    for i, x in enumerate(a):\n\n        for j in range(x):\n\n            ans[now + j] = i+1\n\n        now += x\n\n\n\n    for i in range(h):\n\n        if i % 2:\n\n            print((*reversed(ans[i*w:(i+1)*w])))\n\n        else:\n\n            print((*ans[i*w:(i+1)*w]))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":25,"code_v1_loc":23,"code_v0_num_chars":561,"code_v1_num_chars":522,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\n\ndef main():\n    h, w = list(map(int, sys.stdin.buffer.readline().split()))\n    n = int(sys.stdin.buffer.readline())\n    a = list(map(int, sys.stdin.buffer.readline().split()))\n    ans = np.zeros(w * h, np.int64)\n    now = 0\n    for i, x in enumerate(a):\n        for j in range(x):\n            ans[now + j] = i + 1\n        now += x\n    ans = ans.reshape(h, w)\n    for i in range(h):\n        if i % 2:\n            print((*ans[i, ::-1]))\n        else:\n            print((*ans[i]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\n\ndef main():\n    h, w = list(map(int, sys.stdin.buffer.readline().split()))\n    n = int(sys.stdin.buffer.readline())\n    a = list(map(int, sys.stdin.buffer.readline().split()))\n    ans = [0] * (w * h)\n    now = 0\n    for i, x in enumerate(a):\n        for j in range(x):\n            ans[now + j] = i + 1\n        now += x\n    for i in range(h):\n        if i % 2:\n            print((*reversed(ans[i * w : (i + 1) * w])))\n        else:\n            print((*ans[i * w : (i + 1) * w]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":8.0,"diff":["-import numpy as np","-    ans = np.zeros(w * h, np.int64)","+    ans = [0] * (w * h)","-    ans = ans.reshape(h, w)","-            print((*ans[i, ::-1]))","+            print((*reversed(ans[i * w : (i + 1) * w])))","-            print((*ans[i]))","+            print((*ans[i * w : (i + 1) * w]))"],"diff_only_import_comment":false,"measured_runtime_v0":1.4232974133,"measured_runtime_v1":0.1936318126,"runtime_lift":7.3505349889,"key":["s574129545","s549640590"]}
{"user_id":"u186838327","problem_id":"p02881","language":"python","submission_id_v0":"s806961932","submission_id_v1":"s386327339","cpu_time_v0":218,"cpu_time_v1":179,"memory_v0":40428,"memory_v1":39280,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.89,"input":"n = int(eval(input()))\n\nimport math\n\nm = int(math.sqrt(n))+1\n\nanss = []\n\nfor x in range(1, m+1):\n\n  y = n\/\/x\n\n  z = n%x\n\n  if z == 0:\n\n    anss.append(abs(x-1)+abs(y-1))\n\nprint((min(anss)))\n","target":"n = int(eval(input()))\n\ndef make_divisors(n):\n\n    divisors = []\n\n    for i in range(1, int(n**0.5)+1):\n\n        if n % i == 0:\n\n            divisors.append(i)\n\n            if i != n \/\/ i:\n\n                divisors.append(n\/\/i)\n\n\n\n    #divisors.sort(reverse=True)\n\n    return divisors\n\n\n\nl = make_divisors(n)\n\nmin_ = float('inf')\n\nfor i in range(len(l)):\n\n    min_ = min(min_, l[i]-1+n\/\/l[i]-1)\n\nprint(min_)\n","code_v0_loc":10,"code_v1_loc":17,"code_v0_num_chars":182,"code_v1_num_chars":402,"code_v0_no_empty_lines":"n = int(eval(input()))\nimport math\n\nm = int(math.sqrt(n)) + 1\nanss = []\nfor x in range(1, m + 1):\n    y = n \/\/ x\n    z = n % x\n    if z == 0:\n        anss.append(abs(x - 1) + abs(y - 1))\nprint((min(anss)))\n","code_v1_no_empty_lines":"n = int(eval(input()))\n\n\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n \/\/ i:\n                divisors.append(n \/\/ i)\n    # divisors.sort(reverse=True)\n    return divisors\n\n\nl = make_divisors(n)\nmin_ = float(\"inf\")\nfor i in range(len(l)):\n    min_ = min(min_, l[i] - 1 + n \/\/ l[i] - 1)\nprint(min_)\n","code_same":false,"relative_loc_diff_percent":41.1764705882,"diff":["-import math","-m = int(math.sqrt(n)) + 1","-anss = []","-for x in range(1, m + 1):","-    y = n \/\/ x","-    z = n % x","-    if z == 0:","-        anss.append(abs(x - 1) + abs(y - 1))","-print((min(anss)))","+","+def make_divisors(n):","+    divisors = []","+    for i in range(1, int(n**0.5) + 1):","+        if n % i == 0:","+            divisors.append(i)","+            if i != n \/\/ i:","+                divisors.append(n \/\/ i)","+    # divisors.sort(reverse=True)","+    return divisors","+","+","+l = make_divisors(n)","+min_ = float(\"inf\")","+for i in range(len(l)):","+    min_ = min(min_, l[i] - 1 + n \/\/ l[i] - 1)","+print(min_)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3428507342,"measured_runtime_v1":0.2632945333,"runtime_lift":1.302156676,"key":["s806961932","s386327339"]}
{"user_id":"u348868667","problem_id":"p02994","language":"python","submission_id_v0":"s647144203","submission_id_v1":"s608787131","cpu_time_v0":154,"cpu_time_v1":17,"memory_v0":12508,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.96,"input":"import numpy as np\n\nN,L = list(map(int,input().split()))\n\napple = np.array(list(range(N))) + 1\n\ntaste = apple + L - 1\n\ntaste_applepie = sum(taste)\n\nif L <= 0 and abs(N) > abs(L):\n\n    print(taste_applepie)\n\nelif L > 0:\n\n    print((taste_applepie - L))\n\nelse:\n\n    print((taste_applepie - (N+L-1)))","target":"N,L = list(map(int,input().split()))\n\nt = [L+i-1 for i in range(1,N+1)]\n\nabst = list(map(abs,t))\n\nminind = abst.index(min(abst))\n\nprint((sum(t)-t[minind]))","code_v0_loc":11,"code_v1_loc":5,"code_v0_num_chars":281,"code_v1_num_chars":147,"code_v0_no_empty_lines":"import numpy as np\n\nN, L = list(map(int, input().split()))\napple = np.array(list(range(N))) + 1\ntaste = apple + L - 1\ntaste_applepie = sum(taste)\nif L <= 0 and abs(N) > abs(L):\n    print(taste_applepie)\nelif L > 0:\n    print((taste_applepie - L))\nelse:\n    print((taste_applepie - (N + L - 1)))\n","code_v1_no_empty_lines":"N, L = list(map(int, input().split()))\nt = [L + i - 1 for i in range(1, N + 1)]\nabst = list(map(abs, t))\nminind = abst.index(min(abst))\nprint((sum(t) - t[minind]))\n","code_same":false,"relative_loc_diff_percent":54.5454545455,"diff":["-import numpy as np","-","-apple = np.array(list(range(N))) + 1","-taste = apple + L - 1","-taste_applepie = sum(taste)","-if L <= 0 and abs(N) > abs(L):","-    print(taste_applepie)","-elif L > 0:","-    print((taste_applepie - L))","-else:","-    print((taste_applepie - (N + L - 1)))","+t = [L + i - 1 for i in range(1, N + 1)]","+abst = list(map(abs, t))","+minind = abst.index(min(abst))","+print((sum(t) - t[minind]))"],"diff_only_import_comment":false,"measured_runtime_v0":1.7270206907,"measured_runtime_v1":0.2688547273,"runtime_lift":6.4236203252,"key":["s647144203","s608787131"]}
{"user_id":"u104282757","problem_id":"p02850","language":"python","submission_id_v0":"s359310316","submission_id_v1":"s846229505","cpu_time_v0":784,"cpu_time_v1":653,"memory_v0":59328,"memory_v1":59280,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.71,"input":"from collections import deque\n\n\n\nn = int(eval(input()))\n\n\n\ng = {i: dict() for i in range(n)}\n\n\n\na_list = [0] * (n - 1)\n\nb_list = [0] * (n - 1)\n\nfor i in range(n - 1):\n\n    a, b = list(map(int, input().split()))\n\n    a_list[i] = a - 1\n\n    b_list[i] = b - 1\n\n    g[a - 1][b - 1] = -1\n\n    g[b - 1][a - 1] = -1\n\n\n\nk = max([len(g[a]) for a in range(n)])\n\n\n\nused_color = [-1] * n\n\nused_color[0] = k - 1\n\n# BFS\n\nqueue = deque([0])\n\nwhile len(queue) > 0:\n\n    p = queue.popleft()\n\n    c = used_color[p]\n\n    for q in list(g[p].keys()):\n\n        if used_color[q] != -1:\n\n            continue\n\n        c += 1\n\n        c %= k\n\n        # print(p, q, c)\n\n        g[p][q] = c\n\n        g[q][p] = c\n\n        used_color[q] = c\n\n        queue.append(q)\n\n\n\nprint(k)\n\nfor i in range(n - 1):\n\n    print((g[a_list[i]][b_list[i]] + 1))\n","target":"from collections import deque\n\n\n\n\n\ndef solve(n, a_list, b_list):\n\n\n\n    # create graph\n\n    g = {i: dict() for i in range(n)}\n\n    for i in range(n - 1):\n\n        a, b = a_list[i] - 1, b_list[i] - 1\n\n        g[a][b] = -1\n\n        g[b][a] = -1\n\n\n\n    k = max([len(g[a]) for a in range(n)])\n\n\n\n    used_color = [-1] * n\n\n    used_color[0] = k - 1\n\n    # BFS\n\n    queue = deque([0])\n\n    while len(queue) > 0:\n\n        p = queue.popleft()\n\n        c = used_color[p]\n\n        for q in list(g[p].keys()):\n\n            if used_color[q] != -1:\n\n                continue\n\n            c += 1\n\n            c %= k\n\n            # print(p, q, c)\n\n            g[p][q] = c\n\n            g[q][p] = c\n\n            used_color[q] = c\n\n            queue.append(q)\n\n\n\n    res_list = [0] * (n - 1)\n\n    for i in range(n - 1):\n\n        res_list[i] = g[a_list[i] - 1][b_list[i] - 1] + 1\n\n\n\n    return k, res_list\n\n\n\n\n\ndef main():\n\n    n = int(eval(input()))\n\n    a_list = [0] * (n - 1)\n\n    b_list = [0] * (n - 1)\n\n    for i in range(n - 1):\n\n        a, b = list(map(int, input().split()))\n\n        a_list[i] = a\n\n        b_list[i] = b\n\n\n\n    k, res_list = solve(n, a_list, b_list)\n\n    print(k)\n\n    for i in range(n - 1):\n\n        print((res_list[i]))\n\n\n\n\n\ndef test():\n\n    print((solve(3, [1, 2], [2, 3])))\n\n    print((solve(8, [1, 2, 2, 2, 4, 5, 6], [2, 3, 4, 5, 7, 6, 8])))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    # test()\n\n    main()\n","code_v0_loc":38,"code_v1_loc":62,"code_v0_num_chars":795,"code_v1_num_chars":1388,"code_v0_no_empty_lines":"from collections import deque\n\nn = int(eval(input()))\ng = {i: dict() for i in range(n)}\na_list = [0] * (n - 1)\nb_list = [0] * (n - 1)\nfor i in range(n - 1):\n    a, b = list(map(int, input().split()))\n    a_list[i] = a - 1\n    b_list[i] = b - 1\n    g[a - 1][b - 1] = -1\n    g[b - 1][a - 1] = -1\nk = max([len(g[a]) for a in range(n)])\nused_color = [-1] * n\nused_color[0] = k - 1\n# BFS\nqueue = deque([0])\nwhile len(queue) > 0:\n    p = queue.popleft()\n    c = used_color[p]\n    for q in list(g[p].keys()):\n        if used_color[q] != -1:\n            continue\n        c += 1\n        c %= k\n        # print(p, q, c)\n        g[p][q] = c\n        g[q][p] = c\n        used_color[q] = c\n        queue.append(q)\nprint(k)\nfor i in range(n - 1):\n    print((g[a_list[i]][b_list[i]] + 1))\n","code_v1_no_empty_lines":"from collections import deque\n\n\ndef solve(n, a_list, b_list):\n    # create graph\n    g = {i: dict() for i in range(n)}\n    for i in range(n - 1):\n        a, b = a_list[i] - 1, b_list[i] - 1\n        g[a][b] = -1\n        g[b][a] = -1\n    k = max([len(g[a]) for a in range(n)])\n    used_color = [-1] * n\n    used_color[0] = k - 1\n    # BFS\n    queue = deque([0])\n    while len(queue) > 0:\n        p = queue.popleft()\n        c = used_color[p]\n        for q in list(g[p].keys()):\n            if used_color[q] != -1:\n                continue\n            c += 1\n            c %= k\n            # print(p, q, c)\n            g[p][q] = c\n            g[q][p] = c\n            used_color[q] = c\n            queue.append(q)\n    res_list = [0] * (n - 1)\n    for i in range(n - 1):\n        res_list[i] = g[a_list[i] - 1][b_list[i] - 1] + 1\n    return k, res_list\n\n\ndef main():\n    n = int(eval(input()))\n    a_list = [0] * (n - 1)\n    b_list = [0] * (n - 1)\n    for i in range(n - 1):\n        a, b = list(map(int, input().split()))\n        a_list[i] = a\n        b_list[i] = b\n    k, res_list = solve(n, a_list, b_list)\n    print(k)\n    for i in range(n - 1):\n        print((res_list[i]))\n\n\ndef test():\n    print((solve(3, [1, 2], [2, 3])))\n    print((solve(8, [1, 2, 2, 2, 4, 5, 6], [2, 3, 4, 5, 7, 6, 8])))\n\n\nif __name__ == \"__main__\":\n    # test()\n    main()\n","code_same":false,"relative_loc_diff_percent":38.7096774194,"diff":["-n = int(eval(input()))","-g = {i: dict() for i in range(n)}","-a_list = [0] * (n - 1)","-b_list = [0] * (n - 1)","-for i in range(n - 1):","-    a, b = list(map(int, input().split()))","-    a_list[i] = a - 1","-    b_list[i] = b - 1","-    g[a - 1][b - 1] = -1","-    g[b - 1][a - 1] = -1","-k = max([len(g[a]) for a in range(n)])","-used_color = [-1] * n","-used_color[0] = k - 1","-# BFS","-queue = deque([0])","-while len(queue) > 0:","-    p = queue.popleft()","-    c = used_color[p]","-    for q in list(g[p].keys()):","-        if used_color[q] != -1:","-            continue","-        c += 1","-        c %= k","-        # print(p, q, c)","-        g[p][q] = c","-        g[q][p] = c","-        used_color[q] = c","-        queue.append(q)","-print(k)","-for i in range(n - 1):","-    print((g[a_list[i]][b_list[i]] + 1))","+","+def solve(n, a_list, b_list):","+    # create graph","+    g = {i: dict() for i in range(n)}","+    for i in range(n - 1):","+        a, b = a_list[i] - 1, b_list[i] - 1","+        g[a][b] = -1","+        g[b][a] = -1","+    k = max([len(g[a]) for a in range(n)])","+    used_color = [-1] * n","+    used_color[0] = k - 1","+    # BFS","+    queue = deque([0])","+    while len(queue) > 0:","+        p = queue.popleft()","+        c = used_color[p]","+        for q in list(g[p].keys()):","+            if used_color[q] != -1:","+                continue","+            c += 1","+            c %= k","+            # print(p, q, c)","+            g[p][q] = c","+            g[q][p] = c","+            used_color[q] = c","+            queue.append(q)","+    res_list = [0] * (n - 1)","+    for i in range(n - 1):","+        res_list[i] = g[a_list[i] - 1][b_list[i] - 1] + 1","+    return k, res_list","+","+","+def main():","+    n = int(eval(input()))","+    a_list = [0] * (n - 1)","+    b_list = [0] * (n - 1)","+    for i in range(n - 1):","+        a, b = list(map(int, input().split()))","+        a_list[i] = a","+        b_list[i] = b","+    k, res_list = solve(n, a_list, b_list)","+    print(k)","+    for i in range(n - 1):","+        print((res_list[i]))","+","+","+def test():","+    print((solve(3, [1, 2], [2, 3])))","+    print((solve(8, [1, 2, 2, 2, 4, 5, 6], [2, 3, 4, 5, 7, 6, 8])))","+","+","+if __name__ == \"__main__\":","+    # test()","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.2052914531,"measured_runtime_v1":0.0066894548,"runtime_lift":30.6888168229,"key":["s359310316","s846229505"]}
{"user_id":"u784022244","problem_id":"p03774","language":"python","submission_id_v0":"s225721289","submission_id_v1":"s121271513","cpu_time_v0":149,"cpu_time_v1":19,"memory_v0":12448,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.25,"input":"import numpy as np\n\nN,M=list(map(int, input().split()))\n\nhuman=[]\n\nfor i in range(N):\n\n  a,b=list(map(int, input().split()))\n\n  human.append((a,b))\n\nC=[]\n\nfor i in range(M):\n\n  c,d=list(map(int, input().split()))\n\n  C.append((c,d))\n\n  \n\nfor h in human:\n\n  a,b=h\n\n  now=0\n\n  mini=np.inf\n\n  for i,ch in enumerate(C):\n\n    c,d=ch\n\n    L=abs(a-c)+abs(b-d)\n\n    if mini>L:\n\n      mini=L\n\n      now=i+1\n\n  print(now)","target":"N,M=list(map(int, input().split()))\n\nS=[]\n\nfor i in range(N):\n\n    a,b=list(map(int, input().split()))\n\n    S.append((a,b))\n\n\n\nC=[]\n\nfor i in range(M):\n\n    c,d=list(map(int, input().split()))\n\n    C.append((c,d,i+1))\n\n#print(C)\n\nfor s in S:\n\n    a,b=s\n\n    now=0\n\n    dis=10**9\n\n\n\n    for t in C:\n\n        c,d,n=t\n\n        D=abs(c-a)+abs(d-b)\n\n        \n\n        if D<dis:\n\n            dis=D\n\n            now=n\n\n    print(now)","code_v0_loc":22,"code_v1_loc":24,"code_v0_num_chars":392,"code_v1_num_chars":408,"code_v0_no_empty_lines":"import numpy as np\n\nN, M = list(map(int, input().split()))\nhuman = []\nfor i in range(N):\n    a, b = list(map(int, input().split()))\n    human.append((a, b))\nC = []\nfor i in range(M):\n    c, d = list(map(int, input().split()))\n    C.append((c, d))\nfor h in human:\n    a, b = h\n    now = 0\n    mini = np.inf\n    for i, ch in enumerate(C):\n        c, d = ch\n        L = abs(a - c) + abs(b - d)\n        if mini > L:\n            mini = L\n            now = i + 1\n    print(now)\n","code_v1_no_empty_lines":"N, M = list(map(int, input().split()))\nS = []\nfor i in range(N):\n    a, b = list(map(int, input().split()))\n    S.append((a, b))\nC = []\nfor i in range(M):\n    c, d = list(map(int, input().split()))\n    C.append((c, d, i + 1))\n# print(C)\nfor s in S:\n    a, b = s\n    now = 0\n    dis = 10**9\n    for t in C:\n        c, d, n = t\n        D = abs(c - a) + abs(d - b)\n        if D < dis:\n            dis = D\n            now = n\n    print(now)\n","code_same":false,"relative_loc_diff_percent":8.3333333333,"diff":["-import numpy as np","-","-human = []","+S = []","-    human.append((a, b))","+    S.append((a, b))","-    C.append((c, d))","-for h in human:","-    a, b = h","+    C.append((c, d, i + 1))","+# print(C)","+for s in S:","+    a, b = s","-    mini = np.inf","-    for i, ch in enumerate(C):","-        c, d = ch","-        L = abs(a - c) + abs(b - d)","-        if mini > L:","-            mini = L","-            now = i + 1","+    dis = 10**9","+    for t in C:","+        c, d, n = t","+        D = abs(c - a) + abs(d - b)","+        if D < dis:","+            dis = D","+            now = n"],"diff_only_import_comment":false,"measured_runtime_v0":1.7596903191,"measured_runtime_v1":0.2910071514,"runtime_lift":6.0468971664,"key":["s225721289","s121271513"]}
{"user_id":"u850516963","problem_id":"p03455","language":"python","submission_id_v0":"s887829630","submission_id_v1":"s071542109","cpu_time_v0":67,"cpu_time_v1":30,"memory_v0":61732,"memory_v1":9060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":55.22,"input":"a, b = list(map(int, input().split()))\n\nif a*b%2 == 1:\n\n    print(\"Odd\")\n\nelse:\n\n    print(\"Even\")","target":"a, b = list(map(int, input().split()))\n\nprint(('Odd'if a&b&1 else 'Even'))","code_v0_loc":5,"code_v1_loc":2,"code_v0_num_chars":92,"code_v1_num_chars":66,"code_v0_no_empty_lines":"a, b = list(map(int, input().split()))\nif a * b % 2 == 1:\n    print(\"Odd\")\nelse:\n    print(\"Even\")\n","code_v1_no_empty_lines":"a, b = list(map(int, input().split()))\nprint((\"Odd\" if a & b & 1 else \"Even\"))\n","code_same":false,"relative_loc_diff_percent":60.0,"diff":["-if a * b % 2 == 1:","-    print(\"Odd\")","-else:","-    print(\"Even\")","+print((\"Odd\" if a & b & 1 else \"Even\"))"],"diff_only_import_comment":false,"measured_runtime_v0":0.1895228839,"measured_runtime_v1":0.0064490705,"runtime_lift":29.3876276628,"key":["s887829630","s071542109"]}
{"user_id":"u634079249","problem_id":"p02555","language":"python","submission_id_v0":"s319738471","submission_id_v1":"s179019070","cpu_time_v0":343,"cpu_time_v1":55,"memory_v0":9820,"memory_v1":9920,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":83.97,"input":"import sys, os, math, bisect, itertools, collections, heapq, queue, copy, array\n\n\n\n# from scipy.sparse.csgraph import csgraph_from_dense, floyd_warshall\n\n# from decimal import Decimal\n\n# from collections import defaultdict, deque\n\n\n\nsys.setrecursionlimit(10000000)\n\n\n\nii = lambda: int(sys.stdin.buffer.readline().rstrip())\n\nil = lambda: list(map(int, sys.stdin.buffer.readline().split()))\n\nfl = lambda: list(map(float, sys.stdin.buffer.readline().split()))\n\niln = lambda n: [int(sys.stdin.buffer.readline().rstrip()) for _ in range(n)]\n\n\n\niss = lambda: sys.stdin.buffer.readline().decode().rstrip()\n\nsl = lambda: list(map(str, sys.stdin.buffer.readline().decode().split()))\n\nisn = lambda n: [sys.stdin.buffer.readline().decode().rstrip() for _ in range(n)]\n\n\n\nlcm = lambda x, y: (x * y) \/\/ math.gcd(x, y)\n\n\n\nMOD = 10 ** 9 + 7\n\nINF = float('inf')\n\n\n\n\n\ndef main():\n\n    if os.getenv(\"LOCAL\"):\n\n        sys.stdin = open(\"input.txt\", \"r\")\n\n\n\n    S = ii()\n\n    dp = [0] * (S + 1)\n\n\n\n    dp[0] = 1\n\n    # 0 <= i <= S\u306e\u7bc4\u56f2\u3092\u63a2\u7d22\n\n    for i in range(1, S + 1):\n\n        # 0 <= j <= i - 3\u306e\u7bc4\u56f2\u3067\u3001\n\n        # \u9593\u4ed5\u5207\u308a\u3092\u7f6e\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u500b\u6570\u306e\u5408\u8a08\u3092\u96c6\u8a08\n\n        for j in range(0, i - 3 + 1):\n\n            dp[i] += dp[j]\n\n            dp[i] %= MOD\n\n    print((dp[-1]))\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"import sys, os, math, bisect, itertools, collections, heapq, queue, copy, array\n\n\n\n# from scipy.sparse.csgraph import csgraph_from_dense, floyd_warshall\n\n# from decimal import Decimal\n\n# from collections import defaultdict, deque\n\n\n\nsys.setrecursionlimit(10000000)\n\n\n\nii = lambda: int(sys.stdin.buffer.readline().rstrip())\n\nil = lambda: list(map(int, sys.stdin.buffer.readline().split()))\n\nfl = lambda: list(map(float, sys.stdin.buffer.readline().split()))\n\niln = lambda n: [int(sys.stdin.buffer.readline().rstrip()) for _ in range(n)]\n\n\n\niss = lambda: sys.stdin.buffer.readline().decode().rstrip()\n\nsl = lambda: list(map(str, sys.stdin.buffer.readline().decode().split()))\n\nisn = lambda n: [sys.stdin.buffer.readline().decode().rstrip() for _ in range(n)]\n\n\n\nlcm = lambda x, y: (x * y) \/\/ math.gcd(x, y)\n\n\n\nMOD = 10 ** 9 + 7\n\nINF = float('inf')\n\n\n\n\n\ndef main():\n\n    if os.getenv(\"LOCAL\"):\n\n        sys.stdin = open(\"input.txt\", \"r\")\n\n\n\n    S = ii()\n\n    dp = [0] * (S + 1)\n\n\n\n    dp[0] = 1\n\n    # 0 <= i <= S\u306e\u7bc4\u56f2\u3092\u63a2\u7d22\n\n    for i in range(1, S + 1):\n\n        # 0 <= j <= i - 3\u306e\u7bc4\u56f2\u3067\u3001\n\n        # \u9593\u4ed5\u5207\u308a\u3092\u7f6e\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u500b\u6570\u306e\u5408\u8a08\u3092\u96c6\u8a08\n\n        if i > 2:\n\n            dp[i] = sum(dp[0:i - 2])\n\n            dp[i] %= MOD\n\n    print((dp[-1]))\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":43,"code_v1_loc":43,"code_v0_num_chars":1269,"code_v1_num_chars":1259,"code_v0_no_empty_lines":"import sys, os, math, bisect, itertools, collections, heapq, queue, copy, array\n\n# from scipy.sparse.csgraph import csgraph_from_dense, floyd_warshall\n# from decimal import Decimal\n# from collections import defaultdict, deque\nsys.setrecursionlimit(10000000)\nii = lambda: int(sys.stdin.buffer.readline().rstrip())\nil = lambda: list(map(int, sys.stdin.buffer.readline().split()))\nfl = lambda: list(map(float, sys.stdin.buffer.readline().split()))\niln = lambda n: [int(sys.stdin.buffer.readline().rstrip()) for _ in range(n)]\niss = lambda: sys.stdin.buffer.readline().decode().rstrip()\nsl = lambda: list(map(str, sys.stdin.buffer.readline().decode().split()))\nisn = lambda n: [sys.stdin.buffer.readline().decode().rstrip() for _ in range(n)]\nlcm = lambda x, y: (x * y) \/\/ math.gcd(x, y)\nMOD = 10**9 + 7\nINF = float(\"inf\")\n\n\ndef main():\n    if os.getenv(\"LOCAL\"):\n        sys.stdin = open(\"input.txt\", \"r\")\n    S = ii()\n    dp = [0] * (S + 1)\n    dp[0] = 1\n    # 0 <= i <= S\u306e\u7bc4\u56f2\u3092\u63a2\u7d22\n    for i in range(1, S + 1):\n        # 0 <= j <= i - 3\u306e\u7bc4\u56f2\u3067\u3001\n        # \u9593\u4ed5\u5207\u308a\u3092\u7f6e\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u500b\u6570\u306e\u5408\u8a08\u3092\u96c6\u8a08\n        for j in range(0, i - 3 + 1):\n            dp[i] += dp[j]\n            dp[i] %= MOD\n    print((dp[-1]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys, os, math, bisect, itertools, collections, heapq, queue, copy, array\n\n# from scipy.sparse.csgraph import csgraph_from_dense, floyd_warshall\n# from decimal import Decimal\n# from collections import defaultdict, deque\nsys.setrecursionlimit(10000000)\nii = lambda: int(sys.stdin.buffer.readline().rstrip())\nil = lambda: list(map(int, sys.stdin.buffer.readline().split()))\nfl = lambda: list(map(float, sys.stdin.buffer.readline().split()))\niln = lambda n: [int(sys.stdin.buffer.readline().rstrip()) for _ in range(n)]\niss = lambda: sys.stdin.buffer.readline().decode().rstrip()\nsl = lambda: list(map(str, sys.stdin.buffer.readline().decode().split()))\nisn = lambda n: [sys.stdin.buffer.readline().decode().rstrip() for _ in range(n)]\nlcm = lambda x, y: (x * y) \/\/ math.gcd(x, y)\nMOD = 10**9 + 7\nINF = float(\"inf\")\n\n\ndef main():\n    if os.getenv(\"LOCAL\"):\n        sys.stdin = open(\"input.txt\", \"r\")\n    S = ii()\n    dp = [0] * (S + 1)\n    dp[0] = 1\n    # 0 <= i <= S\u306e\u7bc4\u56f2\u3092\u63a2\u7d22\n    for i in range(1, S + 1):\n        # 0 <= j <= i - 3\u306e\u7bc4\u56f2\u3067\u3001\n        # \u9593\u4ed5\u5207\u308a\u3092\u7f6e\u304f\u3053\u3068\u304c\u3067\u304d\u308b\u500b\u6570\u306e\u5408\u8a08\u3092\u96c6\u8a08\n        if i > 2:\n            dp[i] = sum(dp[0 : i - 2])\n            dp[i] %= MOD\n    print((dp[-1]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-        for j in range(0, i - 3 + 1):","-            dp[i] += dp[j]","+        if i > 2:","+            dp[i] = sum(dp[0 : i - 2])"],"diff_only_import_comment":false,"measured_runtime_v0":0.530304636,"measured_runtime_v1":0.2333806806,"runtime_lift":2.2722730721,"key":["s319738471","s179019070"]}
{"user_id":"u503228842","problem_id":"p02555","language":"python","submission_id_v0":"s264986040","submission_id_v1":"s936814116","cpu_time_v0":455,"cpu_time_v1":29,"memory_v0":9180,"memory_v1":9188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":93.63,"input":"n = int(eval(input()))\n\nm = 10**9 + 7\n\n# ans = [0] * (n + 1)\n\nans = [0] * 2200\n\nans[0] = 1\n\n# ans[3] = 1\n\n# ans[4] = 1\n\n# ans[5] = 1\n\nfor i in range(3, n + 1):\n\n    for j in range(i - 2):\n\n        ans[i] += ans[j]\n\n        ans[i] %= m\n\nprint((ans[n]))\n\n# print(ans[:10])\n","target":"n = int(eval(input()))\n\nm = 10**9 + 7\n\n# ans = [0] * (n + 1)\n\nans = [0] * 2200\n\nans[0] = 1\n\n# ans[3] = 1\n\n# ans[4] = 1\n\n# ans[5] = 1\n\nfor i in range(3, n + 1):\n\n    ans[i] = ans[i - 1] + ans[i - 3]\n\n    ans[i] %= m\n\n    # for j in range(i - 2):\n\n    #     ans[i] += ans[j]\n\n    #     ans[i] %= m\n\nprint((ans[n]))\n\n# print(ans[:10])\n","code_v0_loc":14,"code_v1_loc":16,"code_v0_num_chars":263,"code_v1_num_chars":324,"code_v0_no_empty_lines":"n = int(eval(input()))\nm = 10**9 + 7\n# ans = [0] * (n + 1)\nans = [0] * 2200\nans[0] = 1\n# ans[3] = 1\n# ans[4] = 1\n# ans[5] = 1\nfor i in range(3, n + 1):\n    for j in range(i - 2):\n        ans[i] += ans[j]\n        ans[i] %= m\nprint((ans[n]))\n# print(ans[:10])\n","code_v1_no_empty_lines":"n = int(eval(input()))\nm = 10**9 + 7\n# ans = [0] * (n + 1)\nans = [0] * 2200\nans[0] = 1\n# ans[3] = 1\n# ans[4] = 1\n# ans[5] = 1\nfor i in range(3, n + 1):\n    ans[i] = ans[i - 1] + ans[i - 3]\n    ans[i] %= m\n    # for j in range(i - 2):\n    #     ans[i] += ans[j]\n    #     ans[i] %= m\nprint((ans[n]))\n# print(ans[:10])\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-    for j in range(i - 2):","-        ans[i] += ans[j]","-        ans[i] %= m","+    ans[i] = ans[i - 1] + ans[i - 3]","+    ans[i] %= m","+    # for j in range(i - 2):","+    #     ans[i] += ans[j]","+    #     ans[i] %= m"],"diff_only_import_comment":false,"measured_runtime_v0":0.6218082716,"measured_runtime_v1":0.188438025,"runtime_lift":3.2998025299,"key":["s264986040","s936814116"]}
{"user_id":"u678167152","problem_id":"p03608","language":"python","submission_id_v0":"s000797516","submission_id_v1":"s627408472","cpu_time_v0":303,"cpu_time_v1":214,"memory_v0":70760,"memory_v1":74992,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":29.37,"input":"N, M, R = list(map(int, input().split()))\n\nr = list(map(int, input().split()))\n\nd = [[float('inf')]*N for _ in range(N)]\n\nfor i in range(M): #\u3072\u3068\u307e\u305a\u679d\u304c\u3042\u308b\u30da\u30a2\u306f\u679d\u306e\u9577\u3055\u3092\u30bb\u30c3\u30c8\n\n  a,b,t = list(map(int, input().split()))\n\n  d[a-1][b-1] = t\n\n  d[b-1][a-1] = t\n\n\n\nfor i in range(N):\n\n  d[i][i] = 0 #\u81ea\u8eab\u3078\u306e\u6700\u77ed\u7d4c\u8def\u306f0\n\n#\u4e09\u91cd\u30eb\u30fc\u30d7\n\nfor k in range(N):\n\n  for i in range(N):\n\n    for j in range(N):\n\n      d[i][j] = min(d[i][j], d[i][k]+d[k][j])\n\n\n\nfrom itertools import groupby, accumulate, product, permutations, combinations\n\n\n\nans = float('inf')\n\nfor p in permutations(r,R):\n\n  cnt = 0\n\n  for i in range(1,R):\n\n    cnt += d[p[i-1]-1][p[i]-1]\n\n  ans = min(ans,cnt)\n\nprint(ans)","target":"N, M, r = list(map(int, input().split()))\n\nR = list([int(x)-1 for x in input().split()])\n\nd = [[1<<30]*N for _ in range(N)]\n\nfor i in range(M): #\u3072\u3068\u307e\u305a\u679d\u304c\u3042\u308b\u30da\u30a2\u306f\u679d\u306e\u9577\u3055\u3092\u30bb\u30c3\u30c8\n\n  a,b,t = list(map(int, input().split()))\n\n  d[a-1][b-1] = t\n\n  d[b-1][a-1] = t\n\n\n\nfor i in range(N):\n\n  d[i][i] = 0 #\u81ea\u8eab\u3078\u306e\u6700\u77ed\u7d4c\u8def\u306f0\n\n#\u4e09\u91cd\u30eb\u30fc\u30d7\n\nfor k in range(N):\n\n  for i in range(N):\n\n    for j in range(N):\n\n      d[i][j] = min(d[i][j], d[i][k]+d[k][j])\n\nfrom itertools import groupby, accumulate, product, permutations, combinations\n\nans = 1<<30\n\nfor per in permutations(R,r):\n\n  cnt = 0\n\n  for i in range(r-1):\n\n    cnt += d[per[i]][per[i+1]]\n\n  ans = min(ans, cnt)\n\nprint(ans)","code_v0_loc":25,"code_v1_loc":23,"code_v0_num_chars":634,"code_v1_num_chars":633,"code_v0_no_empty_lines":"N, M, R = list(map(int, input().split()))\nr = list(map(int, input().split()))\nd = [[float(\"inf\")] * N for _ in range(N)]\nfor i in range(M):  # \u3072\u3068\u307e\u305a\u679d\u304c\u3042\u308b\u30da\u30a2\u306f\u679d\u306e\u9577\u3055\u3092\u30bb\u30c3\u30c8\n    a, b, t = list(map(int, input().split()))\n    d[a - 1][b - 1] = t\n    d[b - 1][a - 1] = t\nfor i in range(N):\n    d[i][i] = 0  # \u81ea\u8eab\u3078\u306e\u6700\u77ed\u7d4c\u8def\u306f0\n# \u4e09\u91cd\u30eb\u30fc\u30d7\nfor k in range(N):\n    for i in range(N):\n        for j in range(N):\n            d[i][j] = min(d[i][j], d[i][k] + d[k][j])\nfrom itertools import groupby, accumulate, product, permutations, combinations\n\nans = float(\"inf\")\nfor p in permutations(r, R):\n    cnt = 0\n    for i in range(1, R):\n        cnt += d[p[i - 1] - 1][p[i] - 1]\n    ans = min(ans, cnt)\nprint(ans)\n","code_v1_no_empty_lines":"N, M, r = list(map(int, input().split()))\nR = list([int(x) - 1 for x in input().split()])\nd = [[1 << 30] * N for _ in range(N)]\nfor i in range(M):  # \u3072\u3068\u307e\u305a\u679d\u304c\u3042\u308b\u30da\u30a2\u306f\u679d\u306e\u9577\u3055\u3092\u30bb\u30c3\u30c8\n    a, b, t = list(map(int, input().split()))\n    d[a - 1][b - 1] = t\n    d[b - 1][a - 1] = t\nfor i in range(N):\n    d[i][i] = 0  # \u81ea\u8eab\u3078\u306e\u6700\u77ed\u7d4c\u8def\u306f0\n# \u4e09\u91cd\u30eb\u30fc\u30d7\nfor k in range(N):\n    for i in range(N):\n        for j in range(N):\n            d[i][j] = min(d[i][j], d[i][k] + d[k][j])\nfrom itertools import groupby, accumulate, product, permutations, combinations\n\nans = 1 << 30\nfor per in permutations(R, r):\n    cnt = 0\n    for i in range(r - 1):\n        cnt += d[per[i]][per[i + 1]]\n    ans = min(ans, cnt)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":8.0,"diff":["-N, M, R = list(map(int, input().split()))","-r = list(map(int, input().split()))","-d = [[float(\"inf\")] * N for _ in range(N)]","+N, M, r = list(map(int, input().split()))","+R = list([int(x) - 1 for x in input().split()])","+d = [[1 << 30] * N for _ in range(N)]","-ans = float(\"inf\")","-for p in permutations(r, R):","+ans = 1 << 30","+for per in permutations(R, r):","-    for i in range(1, R):","-        cnt += d[p[i - 1] - 1][p[i] - 1]","+    for i in range(r - 1):","+        cnt += d[per[i]][per[i + 1]]"],"diff_only_import_comment":false,"measured_runtime_v0":0.2899598975,"measured_runtime_v1":0.2122670105,"runtime_lift":1.3660148927,"key":["s000797516","s627408472"]}
{"user_id":"u046187684","problem_id":"p02982","language":"python","submission_id_v0":"s670004614","submission_id_v1":"s451570283","cpu_time_v0":341,"cpu_time_v1":18,"memory_v0":19892,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":94.72,"input":"from scipy.spatial import distance\n\n\n\n\n\ndef solve(string):\n\n    n, d, *x = list(map(int, string.split()))\n\n    x = [tuple(c) for c in zip(*[iter(x)] * d)]\n\n    dist = distance.cdist(x, x)\n\n    return str(((dist == dist.astype(\"int32\")).sum() - n) \/\/ 2)\n\n\n\n\n\nif __name__ == '__main__':\n\n    n, m = list(map(int, input().split()))\n\n    print((solve('{} {}\\n'.format(n, m)+'\\n'.join([eval(input()) for _ in range(n)]))))\n","target":"import math\n\nN,D = list(map(int,input().split()))\n\nX = [list(map(float, input().split())) for i in range(N)]\n\ncounter = 0\n\nfor i, x0 in enumerate(X): \n\n    for x1 in X[i+1:]:\n\n        if math.sqrt(sum([(a-b)**2 for a, b in zip(x0,x1)])).is_integer():\n\n            counter+=1\n\nprint(counter)\n","code_v0_loc":13,"code_v1_loc":9,"code_v0_num_chars":398,"code_v1_num_chars":285,"code_v0_no_empty_lines":"from scipy.spatial import distance\n\n\ndef solve(string):\n    n, d, *x = list(map(int, string.split()))\n    x = [tuple(c) for c in zip(*[iter(x)] * d)]\n    dist = distance.cdist(x, x)\n    return str(((dist == dist.astype(\"int32\")).sum() - n) \/\/ 2)\n\n\nif __name__ == \"__main__\":\n    n, m = list(map(int, input().split()))\n    print(\n        (solve(\"{} {}\\n\".format(n, m) + \"\\n\".join([eval(input()) for _ in range(n)])))\n    )\n","code_v1_no_empty_lines":"import math\n\nN, D = list(map(int, input().split()))\nX = [list(map(float, input().split())) for i in range(N)]\ncounter = 0\nfor i, x0 in enumerate(X):\n    for x1 in X[i + 1 :]:\n        if math.sqrt(sum([(a - b) ** 2 for a, b in zip(x0, x1)])).is_integer():\n            counter += 1\nprint(counter)\n","code_same":false,"relative_loc_diff_percent":30.7692307692,"diff":["-from scipy.spatial import distance","+import math","-","-def solve(string):","-    n, d, *x = list(map(int, string.split()))","-    x = [tuple(c) for c in zip(*[iter(x)] * d)]","-    dist = distance.cdist(x, x)","-    return str(((dist == dist.astype(\"int32\")).sum() - n) \/\/ 2)","-","-","-if __name__ == \"__main__\":","-    n, m = list(map(int, input().split()))","-    print(","-        (solve(\"{} {}\\n\".format(n, m) + \"\\n\".join([eval(input()) for _ in range(n)])))","-    )","+N, D = list(map(int, input().split()))","+X = [list(map(float, input().split())) for i in range(N)]","+counter = 0","+for i, x0 in enumerate(X):","+    for x1 in X[i + 1 :]:","+        if math.sqrt(sum([(a - b) ** 2 for a, b in zip(x0, x1)])).is_integer():","+            counter += 1","+print(counter)"],"diff_only_import_comment":false,"measured_runtime_v0":2.3489351194,"measured_runtime_v1":0.198756752,"runtime_lift":11.8181399901,"key":["s670004614","s451570283"]}
{"user_id":"u219494936","problem_id":"p02615","language":"python","submission_id_v0":"s106486265","submission_id_v1":"s107268546","cpu_time_v0":790,"cpu_time_v1":143,"memory_v0":70788,"memory_v1":31436,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":81.9,"input":"import numpy as np\n\nimport heapq\n\n\n\nN = int(eval(input()))\n\nA =  np.sort([int(x) for x in input().split(\" \")])[::-1]\n\n\n\nq = [(-A[1], (0, 1)), (-A[1], (0, 1))]\n\nconfort = A[0]\n\nheapq.heapify(q)\n\n\n\ni = 2\n\nwhile N > i:\n\n    m = heapq.heappop(q)\n\n    # print(f\"{m[1][0]}\u3068{m[1][1]}\u306e\u9593\u306b\u5272\u308a\u8fbc\u3080. \u6c17\u6301\u3061\u826f\u3055 {-m[0]}\")\n\n    confort -= m[0]\n\n    heapq.heappush(q, (-A[i], (i, m[1][0])))\n\n    heapq.heappush(q, (-A[i], (i, m[1][1])))\n\n    i += 1\n\nprint(confort)\n","target":"N = int(eval(input()))\n\nA = sorted([int(x) for x in input().split(\" \")])[::-1]\n\n\n\nN -= 2\n\nS = A[0]\n\n\n\ni = 1\n\nwhile 1:\n\n    if N == 0:\n\n        break \n\n    if N == 1:\n\n        S += A[i]\n\n        break\n\n    S += 2 * A[i]\n\n    N -= 2\n\n    i += 1\n\nprint(S)","code_v0_loc":19,"code_v1_loc":17,"code_v0_num_chars":436,"code_v1_num_chars":246,"code_v0_no_empty_lines":"import numpy as np\nimport heapq\n\nN = int(eval(input()))\nA = np.sort([int(x) for x in input().split(\" \")])[::-1]\nq = [(-A[1], (0, 1)), (-A[1], (0, 1))]\nconfort = A[0]\nheapq.heapify(q)\ni = 2\nwhile N > i:\n    m = heapq.heappop(q)\n    # print(f\"{m[1][0]}\u3068{m[1][1]}\u306e\u9593\u306b\u5272\u308a\u8fbc\u3080. \u6c17\u6301\u3061\u826f\u3055 {-m[0]}\")\n    confort -= m[0]\n    heapq.heappush(q, (-A[i], (i, m[1][0])))\n    heapq.heappush(q, (-A[i], (i, m[1][1])))\n    i += 1\nprint(confort)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = sorted([int(x) for x in input().split(\" \")])[::-1]\nN -= 2\nS = A[0]\ni = 1\nwhile 1:\n    if N == 0:\n        break\n    if N == 1:\n        S += A[i]\n        break\n    S += 2 * A[i]\n    N -= 2\n    i += 1\nprint(S)\n","code_same":false,"relative_loc_diff_percent":10.5263157895,"diff":["-import numpy as np","-import heapq","-","-A = np.sort([int(x) for x in input().split(\" \")])[::-1]","-q = [(-A[1], (0, 1)), (-A[1], (0, 1))]","-confort = A[0]","-heapq.heapify(q)","-i = 2","-while N > i:","-    m = heapq.heappop(q)","-    # print(f\"{m[1][0]}\u3068{m[1][1]}\u306e\u9593\u306b\u5272\u308a\u8fbc\u3080. \u6c17\u6301\u3061\u826f\u3055 {-m[0]}\")","-    confort -= m[0]","-    heapq.heappush(q, (-A[i], (i, m[1][0])))","-    heapq.heappush(q, (-A[i], (i, m[1][1])))","+A = sorted([int(x) for x in input().split(\" \")])[::-1]","+N -= 2","+S = A[0]","+i = 1","+while 1:","+    if N == 0:","+        break","+    if N == 1:","+        S += A[i]","+        break","+    S += 2 * A[i]","+    N -= 2","-print(confort)","+print(S)"],"diff_only_import_comment":false,"measured_runtime_v0":1.866351433,"measured_runtime_v1":0.2910247389,"runtime_lift":6.4130336141,"key":["s106486265","s107268546"]}
{"user_id":"u754022296","problem_id":"p04021","language":"python","submission_id_v0":"s724849949","submission_id_v1":"s422278370","cpu_time_v0":219,"cpu_time_v1":182,"memory_v0":23552,"memory_v1":23552,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.89,"input":"import sys\n\ninput = sys.stdin.readline\n\nread = sys.stdin.read\n\n\n\nn = int(eval(input()))\n\nA = list(map(int, read().split()))\n\nL = sorted([(j, i) for i, j in enumerate(A)])\n\ncount = 0\n\nfor i in range(n):\n\n  if (L[i][1]-i)%2:\n\n    count += 1\n\nans = (count+1) \/\/ 2\n\nprint(ans)","target":"import sys\n\ninput = sys.stdin.readline\n\nread = sys.stdin.read\n\n\n\nn = int(eval(input()))\n\nA = list(map(int, read().split()))\n\nL = sorted([(j, i) for i, j in enumerate(A)])\n\ncount = 0\n\nfor i in range(n):\n\n  count += (L[i][1]-i)%2\n\nans = (count+1) \/\/ 2\n\nprint(ans)\n","code_v0_loc":13,"code_v1_loc":12,"code_v0_num_chars":260,"code_v1_num_chars":250,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nread = sys.stdin.read\nn = int(eval(input()))\nA = list(map(int, read().split()))\nL = sorted([(j, i) for i, j in enumerate(A)])\ncount = 0\nfor i in range(n):\n    if (L[i][1] - i) % 2:\n        count += 1\nans = (count + 1) \/\/ 2\nprint(ans)\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nread = sys.stdin.read\nn = int(eval(input()))\nA = list(map(int, read().split()))\nL = sorted([(j, i) for i, j in enumerate(A)])\ncount = 0\nfor i in range(n):\n    count += (L[i][1] - i) % 2\nans = (count + 1) \/\/ 2\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":7.6923076923,"diff":["-    if (L[i][1] - i) % 2:","-        count += 1","+    count += (L[i][1] - i) % 2"],"diff_only_import_comment":false,"measured_runtime_v0":0.2933020202,"measured_runtime_v1":0.2201511685,"runtime_lift":1.3322755547,"key":["s724849949","s422278370"]}
{"user_id":"u072053884","problem_id":"p02378","language":"python","submission_id_v0":"s432486243","submission_id_v1":"s242092393","cpu_time_v0":350,"cpu_time_v1":120,"memory_v0":8348,"memory_v1":8420,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":65.71,"input":"# Acceptance of input\n\n\n\nimport sys\n\n\n\nfile_input = sys.stdin\n\n\n\nX, Y, E = list(map(int, file_input.readline().split()))\n\n\n\nv_num = X + Y + 2\n\n\n\nadj_mat = [[0] * (v_num) for i in range(v_num)]\n\n\n\nfor line in file_input:\n\n    x, y = list(map(int, line.split()))\n\n    adj_mat[x][X + y] = 1\n\n\n\ns = X + Y\n\nt = s + 1\n\n\n\nfor i in range(X):\n\n    adj_mat[s][i] = 1\n\n\n\nfor i in range(X, s):\n\n    adj_mat[i][t] = 1\n\n\n\n# Dinic's algorithm\n\n\n\nimport collections\n\n\n\n# BFS for residual capacity network to construct level graph\n\ndef bfs(start, goal, parent):\n\n    unvisited = [True] * v_num\n\n    queue = collections.deque()\n\n    queue.append(start)\n\n    unvisited[start] = False\n\n    while queue:\n\n        u = queue.popleft()\n\n        for v, r_capacity in enumerate(adj_mat[u]):\n\n            if unvisited[v] and (r_capacity > 0):\n\n                parent[v].append(u)\n\n                queue.append(v)\n\n                unvisited[v] = False\n\n    return unvisited[goal]\n\n\n\n# DFS for level graph and construct blocking flow\n\ndef dfs(goal, path, parent, blocking_flow):\n\n    v = path[-1]\n\n    if v == goal:\n\n        aug_path_flow = 10000\n\n        for x, y in zip(path[1:], path[:-1]):\n\n            aug_path_flow = min(aug_path_flow, adj_mat[x][y])\n\n        for x, y in zip(path[1:], path[:-1]):\n\n            adj_mat[x][y] -= aug_path_flow\n\n            adj_mat[y][x] += aug_path_flow\n\n        blocking_flow[0] += aug_path_flow\n\n    else:\n\n        for u in parent[v]:\n\n            path.append(u)\n\n            dfs(goal, path, parent, blocking_flow)\n\n            path.pop()\n\n\n\ndef dinic(source, sink):\n\n    max_flow = 0\n\n    parent = [[] for i in range(v_num)]\n\n    while not bfs(source, sink, parent):\n\n        blocking_flow = [0]\n\n        path = [sink]\n\n        # search in reverse direction from sink\n\n        dfs(source, path, parent, blocking_flow)\n\n        max_flow += blocking_flow[0]\n\n        parent = [[] for i in range(v_num)]\n\n    return max_flow\n\n\n\n# output\n\nprint((dinic(s, t)))","target":"# Acceptance of input\n\n\n\nimport sys\n\n\n\nfile_input = sys.stdin\n\n\n\nX, Y, E = list(map(int, file_input.readline().split()))\n\n\n\nv_num = X + Y + 2\n\n\n\nadj_mat = [[0] * (v_num) for i in range(v_num)]\n\n\n\nfor line in file_input:\n\n    x, y = list(map(int, line.split()))\n\n    adj_mat[x][X + y] = 1\n\n\n\ns = X + Y\n\nt = s + 1\n\n\n\nfor i in range(X):\n\n    adj_mat[s][i] = 1\n\n\n\nfor i in range(X, s):\n\n    adj_mat[i][t] = 1\n\n\n\n# Dinic's algorithm\n\n\n\nimport collections\n\n\n\n# BFS for residual capacity network to construct level graph\n\ndef bfs(start, goal, parent):\n\n    level = [v_num] * v_num\n\n    unvisited = [True] * v_num\n\n    queue = collections.deque()\n\n    queue.append(start)\n\n    level[start] = 0\n\n    unvisited[start] = False\n\n    while queue:\n\n        u = queue.popleft()\n\n        next_level = level[u] + 1\n\n        for v, r_capacity in enumerate(adj_mat[u]):\n\n            if (level[v] >= next_level) and (r_capacity > 0):\n\n                level[v] = next_level\n\n                parent[v].append(u)\n\n                if unvisited[v]:\n\n                    queue.append(v)\n\n                    unvisited[v] = False\n\n    return level[goal]\n\n\n\n# DFS for level graph and construct blocking flow\n\ndef dfs(goal, path, parent, blocking_flow):\n\n    v = path[-1]\n\n    if v == goal:\n\n        aug_path_flow = 10000\n\n        for x, y in zip(path[1:], path[:-1]):\n\n            aug_path_flow = min(aug_path_flow, adj_mat[x][y])\n\n        for x, y in zip(path[1:], path[:-1]):\n\n            adj_mat[x][y] -= aug_path_flow\n\n            adj_mat[y][x] += aug_path_flow\n\n        blocking_flow[0] += aug_path_flow\n\n    else:\n\n        for u in parent[v]:\n\n            path.append(u)\n\n            dfs(goal, path, parent, blocking_flow)\n\n            path.pop()\n\n\n\ndef dinic(source, sink):\n\n    max_flow = 0\n\n    parent = [[] for i in range(v_num)]\n\n    while bfs(source, sink, parent) != v_num:\n\n        blocking_flow = [0]\n\n        path = [sink]\n\n        # search in reverse direction from sink\n\n        dfs(source, path, parent, blocking_flow)\n\n        max_flow += blocking_flow[0]\n\n        parent = [[] for i in range(v_num)]\n\n    return max_flow\n\n\n\n# output\n\nprint((dinic(s, t)))","code_v0_loc":75,"code_v1_loc":80,"code_v0_num_chars":1953,"code_v1_num_chars":2133,"code_v0_no_empty_lines":"# Acceptance of input\nimport sys\n\nfile_input = sys.stdin\nX, Y, E = list(map(int, file_input.readline().split()))\nv_num = X + Y + 2\nadj_mat = [[0] * (v_num) for i in range(v_num)]\nfor line in file_input:\n    x, y = list(map(int, line.split()))\n    adj_mat[x][X + y] = 1\ns = X + Y\nt = s + 1\nfor i in range(X):\n    adj_mat[s][i] = 1\nfor i in range(X, s):\n    adj_mat[i][t] = 1\n# Dinic's algorithm\nimport collections\n\n# BFS for residual capacity network to construct level graph\ndef bfs(start, goal, parent):\n    unvisited = [True] * v_num\n    queue = collections.deque()\n    queue.append(start)\n    unvisited[start] = False\n    while queue:\n        u = queue.popleft()\n        for v, r_capacity in enumerate(adj_mat[u]):\n            if unvisited[v] and (r_capacity > 0):\n                parent[v].append(u)\n                queue.append(v)\n                unvisited[v] = False\n    return unvisited[goal]\n\n\n# DFS for level graph and construct blocking flow\ndef dfs(goal, path, parent, blocking_flow):\n    v = path[-1]\n    if v == goal:\n        aug_path_flow = 10000\n        for x, y in zip(path[1:], path[:-1]):\n            aug_path_flow = min(aug_path_flow, adj_mat[x][y])\n        for x, y in zip(path[1:], path[:-1]):\n            adj_mat[x][y] -= aug_path_flow\n            adj_mat[y][x] += aug_path_flow\n        blocking_flow[0] += aug_path_flow\n    else:\n        for u in parent[v]:\n            path.append(u)\n            dfs(goal, path, parent, blocking_flow)\n            path.pop()\n\n\ndef dinic(source, sink):\n    max_flow = 0\n    parent = [[] for i in range(v_num)]\n    while not bfs(source, sink, parent):\n        blocking_flow = [0]\n        path = [sink]\n        # search in reverse direction from sink\n        dfs(source, path, parent, blocking_flow)\n        max_flow += blocking_flow[0]\n        parent = [[] for i in range(v_num)]\n    return max_flow\n\n\n# output\nprint((dinic(s, t)))\n","code_v1_no_empty_lines":"# Acceptance of input\nimport sys\n\nfile_input = sys.stdin\nX, Y, E = list(map(int, file_input.readline().split()))\nv_num = X + Y + 2\nadj_mat = [[0] * (v_num) for i in range(v_num)]\nfor line in file_input:\n    x, y = list(map(int, line.split()))\n    adj_mat[x][X + y] = 1\ns = X + Y\nt = s + 1\nfor i in range(X):\n    adj_mat[s][i] = 1\nfor i in range(X, s):\n    adj_mat[i][t] = 1\n# Dinic's algorithm\nimport collections\n\n# BFS for residual capacity network to construct level graph\ndef bfs(start, goal, parent):\n    level = [v_num] * v_num\n    unvisited = [True] * v_num\n    queue = collections.deque()\n    queue.append(start)\n    level[start] = 0\n    unvisited[start] = False\n    while queue:\n        u = queue.popleft()\n        next_level = level[u] + 1\n        for v, r_capacity in enumerate(adj_mat[u]):\n            if (level[v] >= next_level) and (r_capacity > 0):\n                level[v] = next_level\n                parent[v].append(u)\n                if unvisited[v]:\n                    queue.append(v)\n                    unvisited[v] = False\n    return level[goal]\n\n\n# DFS for level graph and construct blocking flow\ndef dfs(goal, path, parent, blocking_flow):\n    v = path[-1]\n    if v == goal:\n        aug_path_flow = 10000\n        for x, y in zip(path[1:], path[:-1]):\n            aug_path_flow = min(aug_path_flow, adj_mat[x][y])\n        for x, y in zip(path[1:], path[:-1]):\n            adj_mat[x][y] -= aug_path_flow\n            adj_mat[y][x] += aug_path_flow\n        blocking_flow[0] += aug_path_flow\n    else:\n        for u in parent[v]:\n            path.append(u)\n            dfs(goal, path, parent, blocking_flow)\n            path.pop()\n\n\ndef dinic(source, sink):\n    max_flow = 0\n    parent = [[] for i in range(v_num)]\n    while bfs(source, sink, parent) != v_num:\n        blocking_flow = [0]\n        path = [sink]\n        # search in reverse direction from sink\n        dfs(source, path, parent, blocking_flow)\n        max_flow += blocking_flow[0]\n        parent = [[] for i in range(v_num)]\n    return max_flow\n\n\n# output\nprint((dinic(s, t)))\n","code_same":false,"relative_loc_diff_percent":6.25,"diff":["+    level = [v_num] * v_num","+    level[start] = 0","+        next_level = level[u] + 1","-            if unvisited[v] and (r_capacity > 0):","+            if (level[v] >= next_level) and (r_capacity > 0):","+                level[v] = next_level","-                queue.append(v)","-                unvisited[v] = False","-    return unvisited[goal]","+                if unvisited[v]:","+                    queue.append(v)","+                    unvisited[v] = False","+    return level[goal]","-    while not bfs(source, sink, parent):","+    while bfs(source, sink, parent) != v_num:"],"diff_only_import_comment":false,"measured_runtime_v0":0.2959556043,"measured_runtime_v1":0.2352844019,"runtime_lift":1.2578632579,"key":["s432486243","s242092393"]}
{"user_id":"u285891772","problem_id":"p02837","language":"python","submission_id_v0":"s234390283","submission_id_v1":"s698943579","cpu_time_v0":281,"cpu_time_v1":125,"memory_v0":5204,"memory_v1":5964,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":55.52,"input":"import sys, re\n\nfrom collections import deque, defaultdict, Counter\n\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees#, log2, log\n\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\n\nfrom operator import itemgetter, mul\n\nfrom copy import deepcopy\n\nfrom string import ascii_lowercase, ascii_uppercase, digits\n\nfrom bisect import bisect, bisect_left, insort, insort_left\n\nfrom fractions import gcd\n\nfrom heapq import heappush, heappop\n\nfrom functools import reduce\n\nfrom decimal import Decimal\n\ndef input(): return sys.stdin.readline().strip()\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(): return list(map(int, input().split()))\n\ndef ZIP(n): return list(zip(*(MAP() for _ in range(n))))\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = float('inf')\n\nmod = 10**9 + 7\n\nfrom decimal import *\n\n\n\nN = INT()\n\nxy = []\n\n\n\nfor i in range(N):\n\n\tA = INT()\n\n\txy.append([LIST() for _ in range(A)])\n\n\n\nans = 0\n\nfor i in range(1<<N):\n\n\ti = list(\"{:b}\".format(i).zfill(N))\n\n\tfor j in range(N):\n\n\t\tif i[j] == \"1\":\n\n\t\t\tfor x, y in xy[j]:\n\n\t\t\t\tif y != int(i[x-1]):\n\n\t\t\t\t\tbreak\n\n\t\t\telse:\n\n\t\t\t\tcontinue\n\n\t\t\tbreak\n\n\telse:\n\n\t\ttmp = sum([int(x) for x in i])\n\n\t\tans = max(ans, tmp)\n\nprint(ans)\n","target":"import sys, re\n\nfrom collections import deque, defaultdict, Counter\n\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, tan, asin, acos, atan, radians, degrees#, log2, log\n\nfrom itertools import accumulate, permutations, combinations, combinations_with_replacement, product, groupby\n\nfrom operator import itemgetter, mul\n\nfrom copy import deepcopy\n\nfrom string import ascii_lowercase, ascii_uppercase, digits\n\nfrom bisect import bisect, bisect_left, insort, insort_left\n\nfrom fractions import gcd\n\nfrom heapq import heappush, heappop\n\nfrom functools import reduce\n\nfrom decimal import Decimal\n\ndef input(): return sys.stdin.readline().strip()\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(): return list(map(int, input().split()))\n\ndef ZIP(n): return list(zip(*(MAP() for _ in range(n))))\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = float('inf')\n\nmod = 10**9 + 7\n\nfrom decimal import *\n\n\n\nN = INT()\n\nxy = []\n\n\n\nfor i in range(N):\n\n\tA = INT()\n\n\txy.append([LIST() for _ in range(A)])\n\n\n\nans = 0\n\nfor X in product((0, 1), repeat=N):\n\n\tfor j in range(N):\n\n\t\tif X[j] == 1:\n\n\t\t\tfor x, y in xy[j]:\n\n\t\t\t\tif X[x-1] != y:\n\n\t\t\t\t\tbreak\n\n\t\t\telse:\n\n\t\t\t\tcontinue\n\n\t\t\tbreak\n\n\telse:\n\n\t\tans = max(ans, sum(X))\n\n\n\nprint(ans)","code_v0_loc":44,"code_v1_loc":43,"code_v0_num_chars":1306,"code_v1_num_chars":1245,"code_v0_no_empty_lines":"import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import (\n    ceil,\n    sqrt,\n    hypot,\n    factorial,\n    pi,\n    sin,\n    cos,\n    tan,\n    asin,\n    acos,\n    atan,\n    radians,\n    degrees,\n)  # , log2, log\nfrom itertools import (\n    accumulate,\n    permutations,\n    combinations,\n    combinations_with_replacement,\n    product,\n    groupby,\n)\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\nfrom decimal import Decimal\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef INT():\n    return int(eval(input()))\n\n\ndef MAP():\n    return list(map(int, input().split()))\n\n\ndef LIST():\n    return list(map(int, input().split()))\n\n\ndef ZIP(n):\n    return list(zip(*(MAP() for _ in range(n))))\n\n\nsys.setrecursionlimit(10**9)\nINF = float(\"inf\")\nmod = 10**9 + 7\nfrom decimal import *\n\nN = INT()\nxy = []\nfor i in range(N):\n    A = INT()\n    xy.append([LIST() for _ in range(A)])\nans = 0\nfor i in range(1 << N):\n    i = list(\"{:b}\".format(i).zfill(N))\n    for j in range(N):\n        if i[j] == \"1\":\n            for x, y in xy[j]:\n                if y != int(i[x - 1]):\n                    break\n            else:\n                continue\n            break\n    else:\n        tmp = sum([int(x) for x in i])\n        ans = max(ans, tmp)\nprint(ans)\n","code_v1_no_empty_lines":"import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import (\n    ceil,\n    sqrt,\n    hypot,\n    factorial,\n    pi,\n    sin,\n    cos,\n    tan,\n    asin,\n    acos,\n    atan,\n    radians,\n    degrees,\n)  # , log2, log\nfrom itertools import (\n    accumulate,\n    permutations,\n    combinations,\n    combinations_with_replacement,\n    product,\n    groupby,\n)\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left, insort, insort_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\nfrom decimal import Decimal\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef INT():\n    return int(eval(input()))\n\n\ndef MAP():\n    return list(map(int, input().split()))\n\n\ndef LIST():\n    return list(map(int, input().split()))\n\n\ndef ZIP(n):\n    return list(zip(*(MAP() for _ in range(n))))\n\n\nsys.setrecursionlimit(10**9)\nINF = float(\"inf\")\nmod = 10**9 + 7\nfrom decimal import *\n\nN = INT()\nxy = []\nfor i in range(N):\n    A = INT()\n    xy.append([LIST() for _ in range(A)])\nans = 0\nfor X in product((0, 1), repeat=N):\n    for j in range(N):\n        if X[j] == 1:\n            for x, y in xy[j]:\n                if X[x - 1] != y:\n                    break\n            else:\n                continue\n            break\n    else:\n        ans = max(ans, sum(X))\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":2.2727272727,"diff":["-for i in range(1 << N):","-    i = list(\"{:b}\".format(i).zfill(N))","+for X in product((0, 1), repeat=N):","-        if i[j] == \"1\":","+        if X[j] == 1:","-                if y != int(i[x - 1]):","+                if X[x - 1] != y:","-        tmp = sum([int(x) for x in i])","-        ans = max(ans, tmp)","+        ans = max(ans, sum(X))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3856115754,"measured_runtime_v1":0.3001698344,"runtime_lift":1.2846446618,"key":["s234390283","s698943579"]}
{"user_id":"u357751375","problem_id":"p04012","language":"python","submission_id_v0":"s590976745","submission_id_v1":"s361487799","cpu_time_v0":31,"cpu_time_v1":26,"memory_v0":9044,"memory_v1":9092,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.13,"input":"w = eval(input())\n\ny = list(set(w))\n\n\n\nfor i in range(len(y)):\n\n    if w.count(y[i]) % 2 != 0:\n\n        print('No')\n\n        exit(0)\n\n\n\nprint('Yes')","target":"w = list(eval(input()))\n\nx = list(set(w))\n\nfor i in x:\n\n    y = w.count(i)\n\n    if y % 2 != 0:\n\n        print('No')\n\n        exit(0)\n\nprint('Yes')","code_v0_loc":9,"code_v1_loc":8,"code_v0_num_chars":142,"code_v1_num_chars":140,"code_v0_no_empty_lines":"w = eval(input())\ny = list(set(w))\nfor i in range(len(y)):\n    if w.count(y[i]) % 2 != 0:\n        print(\"No\")\n        exit(0)\nprint(\"Yes\")\n","code_v1_no_empty_lines":"w = list(eval(input()))\nx = list(set(w))\nfor i in x:\n    y = w.count(i)\n    if y % 2 != 0:\n        print(\"No\")\n        exit(0)\nprint(\"Yes\")\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["-w = eval(input())","-y = list(set(w))","-for i in range(len(y)):","-    if w.count(y[i]) % 2 != 0:","+w = list(eval(input()))","+x = list(set(w))","+for i in x:","+    y = w.count(i)","+    if y % 2 != 0:"],"diff_only_import_comment":false,"measured_runtime_v0":0.2480834422,"measured_runtime_v1":0.172200387,"runtime_lift":1.4406671583,"key":["s590976745","s361487799"]}
{"user_id":"u775681539","problem_id":"p03752","language":"python","submission_id_v0":"s912626788","submission_id_v1":"s563152491","cpu_time_v0":311,"cpu_time_v1":25,"memory_v0":12484,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":91.96,"input":"import numpy as np\n\nfrom itertools import combinations \n\nINF = int(1e9)*15\n\ndef main():\n\n    n, k = list(map(int, input().split())) \n\n    a = np.array(input().split(), np.int32)\n\n    c = np.array([int(i) for i in range(1, n)])\n\n    ans = INF\n\n    for comb in combinations(c, k-1):\n\n        s = set(comb)\n\n        mx = a[0]\n\n        cost = 0\n\n        for i in range(n):\n\n            if i in s:\n\n                if a[i] > mx:\n\n                    mx = a[i]\n\n                    continue\n\n                else:\n\n                    mx += 1\n\n                    cost += mx-a[i] \n\n                    continue\n\n            mx = max(mx, a[i])\n\n        ans = min(cost, ans)\n\n    print(ans)\n\nif __name__ == '__main__':\n\n    main()\n","target":"from itertools import combinations \n\nINF = int(1e9)*15\n\ndef main():\n\n    n, k = list(map(int, input().split())) \n\n    a = [int(i) for i in input().split()]\n\n    c = [int(i) for i in range(1, n)]\n\n    ans = INF\n\n    for comb in combinations(c, k-1):\n\n        s = set(comb)\n\n        mx = a[0]\n\n        cost = 0\n\n        for i in range(n):\n\n            if i in s:\n\n                if a[i] > mx:\n\n                    mx = a[i]\n\n                    continue\n\n                else:\n\n                    mx += 1\n\n                    cost += mx-a[i] \n\n                    continue\n\n            mx = max(mx, a[i])\n\n        ans = min(cost, ans)\n\n    print(ans)\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":26,"code_v1_loc":25,"code_v0_num_chars":717,"code_v1_num_chars":685,"code_v0_no_empty_lines":"import numpy as np\nfrom itertools import combinations\n\nINF = int(1e9) * 15\n\n\ndef main():\n    n, k = list(map(int, input().split()))\n    a = np.array(input().split(), np.int32)\n    c = np.array([int(i) for i in range(1, n)])\n    ans = INF\n    for comb in combinations(c, k - 1):\n        s = set(comb)\n        mx = a[0]\n        cost = 0\n        for i in range(n):\n            if i in s:\n                if a[i] > mx:\n                    mx = a[i]\n                    continue\n                else:\n                    mx += 1\n                    cost += mx - a[i]\n                    continue\n            mx = max(mx, a[i])\n        ans = min(cost, ans)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"from itertools import combinations\n\nINF = int(1e9) * 15\n\n\ndef main():\n    n, k = list(map(int, input().split()))\n    a = [int(i) for i in input().split()]\n    c = [int(i) for i in range(1, n)]\n    ans = INF\n    for comb in combinations(c, k - 1):\n        s = set(comb)\n        mx = a[0]\n        cost = 0\n        for i in range(n):\n            if i in s:\n                if a[i] > mx:\n                    mx = a[i]\n                    continue\n                else:\n                    mx += 1\n                    cost += mx - a[i]\n                    continue\n            mx = max(mx, a[i])\n        ans = min(cost, ans)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":3.8461538462,"diff":["-import numpy as np","-    a = np.array(input().split(), np.int32)","-    c = np.array([int(i) for i in range(1, n)])","+    a = [int(i) for i in input().split()]","+    c = [int(i) for i in range(1, n)]"],"diff_only_import_comment":false,"measured_runtime_v0":1.8447637084,"measured_runtime_v1":0.2996491623,"runtime_lift":6.1564120326,"key":["s912626788","s563152491"]}
{"user_id":"u600402037","problem_id":"p02772","language":"python","submission_id_v0":"s645978955","submission_id_v1":"s362972720","cpu_time_v0":1475,"cpu_time_v1":17,"memory_v0":21396,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":98.85,"input":"import sys\n\nimport numpy as np\n\n\n\nsr = lambda: sys.stdin.readline().rstrip()\n\nir = lambda: int(sr())\n\nlr = lambda: list(map(int, sr().split()))\n\n\n\nN = ir()\n\nA = np.array(lr())\n\nA = A[A%2==0].tolist()\n\nbool = True\n\nfor a in A:\n\n    if a%3 != 0 and a%5 != 0:\n\n        bool = False\n\n\n\nprint(('APPROVED' if bool else 'DENIED'))\n","target":"# coding: utf-8\n\nimport sys\n\n\n\nsr = lambda: sys.stdin.readline().rstrip()\n\nir = lambda: int(sr())\n\nlr = lambda: list(map(int, sr().split()))\n\n\n\nN = ir()\n\nA = lr()\n\nbl = all(x % 3 == 0 or x % 5 == 0 for x in A if x % 2 == 0)\n\nprint(('APPROVED' if bl else 'DENIED'))\n","code_v0_loc":16,"code_v1_loc":11,"code_v0_num_chars":322,"code_v1_num_chars":263,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\nN = ir()\nA = np.array(lr())\nA = A[A % 2 == 0].tolist()\nbool = True\nfor a in A:\n    if a % 3 != 0 and a % 5 != 0:\n        bool = False\nprint((\"APPROVED\" if bool else \"DENIED\"))\n","code_v1_no_empty_lines":"# coding: utf-8\nimport sys\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\nN = ir()\nA = lr()\nbl = all(x % 3 == 0 or x % 5 == 0 for x in A if x % 2 == 0)\nprint((\"APPROVED\" if bl else \"DENIED\"))\n","code_same":false,"relative_loc_diff_percent":31.25,"diff":["+# coding: utf-8","-import numpy as np","-A = np.array(lr())","-A = A[A % 2 == 0].tolist()","-bool = True","-for a in A:","-    if a % 3 != 0 and a % 5 != 0:","-        bool = False","-print((\"APPROVED\" if bool else \"DENIED\"))","+A = lr()","+bl = all(x % 3 == 0 or x % 5 == 0 for x in A if x % 2 == 0)","+print((\"APPROVED\" if bl else \"DENIED\"))"],"diff_only_import_comment":false,"measured_runtime_v0":1.4299331548,"measured_runtime_v1":0.2156274381,"runtime_lift":6.6314990663,"key":["s645978955","s362972720"]}
{"user_id":"u057109575","problem_id":"p02851","language":"python","submission_id_v0":"s203769987","submission_id_v1":"s522861811","cpu_time_v0":293,"cpu_time_v1":166,"memory_v0":103224,"memory_v1":144972,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":43.34,"input":"from collections import defaultdict\n\n\n\nN, K, *A = list(map(int, open(0).read().split()))\n\n\n\nS = [0] * (N + 1)\n\nfor i in range(N):\n\n    S[i + 1] = S[i] + A[i]\n\n\n\nd = defaultdict(int)\n\nans = 0\n\nfor j in range(N + 1):\n\n    v = (S[j] - j) % K\n\n    ans += d[v]\n\n    d[v] += 1\n\n    if j >= K - 1:\n\n        d[(S[j - K + 1] - (j - K + 1)) % K] -= 1\n\n        \n\nprint(ans)\n","target":"from collections import defaultdict\n\n\n\nN, K, *A = list(map(int, open(0).read().split()))\n\n\n\nx = [0] * (N + 1)\n\nfor i in range(N):\n\n    x[i + 1] = x[i] + A[i]\n\n    \n\ny = [(x[i] - i) % K for i in range(N + 1)]\n\n\n\nctr = defaultdict(int)\n\nans = 0\n\nfor j in range(N + 1):\n\n    ans += ctr[y[j]]\n\n    ctr[y[j]] += 1\n\n    if j - K + 1 >= 0:\n\n        ctr[y[j - K + 1]] -= 1\n\nprint(ans)\n","code_v0_loc":18,"code_v1_loc":18,"code_v0_num_chars":357,"code_v1_num_chars":371,"code_v0_no_empty_lines":"from collections import defaultdict\n\nN, K, *A = list(map(int, open(0).read().split()))\nS = [0] * (N + 1)\nfor i in range(N):\n    S[i + 1] = S[i] + A[i]\nd = defaultdict(int)\nans = 0\nfor j in range(N + 1):\n    v = (S[j] - j) % K\n    ans += d[v]\n    d[v] += 1\n    if j >= K - 1:\n        d[(S[j - K + 1] - (j - K + 1)) % K] -= 1\nprint(ans)\n","code_v1_no_empty_lines":"from collections import defaultdict\n\nN, K, *A = list(map(int, open(0).read().split()))\nx = [0] * (N + 1)\nfor i in range(N):\n    x[i + 1] = x[i] + A[i]\ny = [(x[i] - i) % K for i in range(N + 1)]\nctr = defaultdict(int)\nans = 0\nfor j in range(N + 1):\n    ans += ctr[y[j]]\n    ctr[y[j]] += 1\n    if j - K + 1 >= 0:\n        ctr[y[j - K + 1]] -= 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-S = [0] * (N + 1)","+x = [0] * (N + 1)","-    S[i + 1] = S[i] + A[i]","-d = defaultdict(int)","+    x[i + 1] = x[i] + A[i]","+y = [(x[i] - i) % K for i in range(N + 1)]","+ctr = defaultdict(int)","-    v = (S[j] - j) % K","-    ans += d[v]","-    d[v] += 1","-    if j >= K - 1:","-        d[(S[j - K + 1] - (j - K + 1)) % K] -= 1","+    ans += ctr[y[j]]","+    ctr[y[j]] += 1","+    if j - K + 1 >= 0:","+        ctr[y[j - K + 1]] -= 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.2436300242,"measured_runtime_v1":0.1409657106,"runtime_lift":1.7282928102,"key":["s203769987","s522861811"]}
{"user_id":"u576432509","problem_id":"p02767","language":"python","submission_id_v0":"s320006452","submission_id_v1":"s025352649","cpu_time_v0":403,"cpu_time_v1":21,"memory_v0":3188,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":94.79,"input":"n=int(eval(input()))\n\nx=list(map(int,input().split()))\n\n\n\nx.sort()\n\n\n\nfor p in range(x[0],x[len(x)-1]+1):\n\n    psum=0\n\n    for i in range(len(x)):\n\n        psum=psum+(x[0]-x[i])**2\n\n#    print(psum)\n\n    pmin=psum    \n\n    for j in range(x[0]+1,x[len(x)-1]):\n\n        psum=0\n\n        for i in range(len(x)):\n\n            psum=psum+(j-x[i])**2\n\n#        print(psum)\n\n        if pmin>psum:\n\n            pmin=psum\n\nprint(pmin)    ","target":"n=int(eval(input()))\n\nx=list(map(int,input().split()))\n\n\n\nx.sort()\n\n\n\npsum=0\n\nfor i in range(len(x)):\n\n    psum=psum+(x[0]-x[i])**2\n\n#    print(psum)\n\npmin=psum    \n\nfor j in range(x[0]+1,x[len(x)-1]):\n\n    psum=0\n\n    for i in range(len(x)):\n\n        psum=psum+(j-x[i])**2\n\n#        print(psum)\n\n    if pmin>psum:\n\n        pmin=psum\n\nprint(pmin)            \n","code_v0_loc":19,"code_v1_loc":18,"code_v0_num_chars":421,"code_v1_num_chars":353,"code_v0_no_empty_lines":"n = int(eval(input()))\nx = list(map(int, input().split()))\nx.sort()\nfor p in range(x[0], x[len(x) - 1] + 1):\n    psum = 0\n    for i in range(len(x)):\n        psum = psum + (x[0] - x[i]) ** 2\n    #    print(psum)\n    pmin = psum\n    for j in range(x[0] + 1, x[len(x) - 1]):\n        psum = 0\n        for i in range(len(x)):\n            psum = psum + (j - x[i]) ** 2\n        #        print(psum)\n        if pmin > psum:\n            pmin = psum\nprint(pmin)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nx = list(map(int, input().split()))\nx.sort()\npsum = 0\nfor i in range(len(x)):\n    psum = psum + (x[0] - x[i]) ** 2\n#    print(psum)\npmin = psum\nfor j in range(x[0] + 1, x[len(x) - 1]):\n    psum = 0\n    for i in range(len(x)):\n        psum = psum + (j - x[i]) ** 2\n    #        print(psum)\n    if pmin > psum:\n        pmin = psum\nprint(pmin)\n","code_same":false,"relative_loc_diff_percent":5.2631578947,"diff":["-for p in range(x[0], x[len(x) - 1] + 1):","+psum = 0","+for i in range(len(x)):","+    psum = psum + (x[0] - x[i]) ** 2","+#    print(psum)","+pmin = psum","+for j in range(x[0] + 1, x[len(x) - 1]):","-        psum = psum + (x[0] - x[i]) ** 2","-    #    print(psum)","-    pmin = psum","-    for j in range(x[0] + 1, x[len(x) - 1]):","-        psum = 0","-        for i in range(len(x)):","-            psum = psum + (j - x[i]) ** 2","-        #        print(psum)","-        if pmin > psum:","-            pmin = psum","+        psum = psum + (j - x[i]) ** 2","+    #        print(psum)","+    if pmin > psum:","+        pmin = psum"],"diff_only_import_comment":false,"measured_runtime_v0":0.298344056,"measured_runtime_v1":0.1876089347,"runtime_lift":1.59024439,"key":["s320006452","s025352649"]}
{"user_id":"u797106134","problem_id":"p02880","language":"python","submission_id_v0":"s138475257","submission_id_v1":"s540944662","cpu_time_v0":150,"cpu_time_v1":29,"memory_v0":12484,"memory_v1":9040,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":80.67,"input":"N = int(eval(input()))\n\n# N>81\u306e\u3068\u304d\u306fn*n\u3067\u8868\u305b\u306a\u3044\u306e\u3067\u4e0d\u6575\n\nif N>81:\n\n    print('No')\n\nelse:\n\n    import numpy as np\n\n    n=np.array([1,2,3,4,5,6,7,8,9])\n\n    amari=N%n\n\n    shou=N\/\/n\n\n    if np.any((amari==0)*(shou<=9)):\n\n        print('Yes')\n\n    else:\n\n        print('No')\n","target":"N = int(eval(input()))\n\nfor i in range(1,10):\n\n    if not N%i == 0:\n\n        continue\n\n    rest = N\/i\n\n    if rest<10:\n\n        print('Yes')\n\n        exit()\n\n\n\nprint('No')","code_v0_loc":13,"code_v1_loc":10,"code_v0_num_chars":258,"code_v1_num_chars":165,"code_v0_no_empty_lines":"N = int(eval(input()))\n# N>81\u306e\u3068\u304d\u306fn*n\u3067\u8868\u305b\u306a\u3044\u306e\u3067\u4e0d\u6575\nif N > 81:\n    print(\"No\")\nelse:\n    import numpy as np\n\n    n = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])\n    amari = N % n\n    shou = N \/\/ n\n    if np.any((amari == 0) * (shou <= 9)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n","code_v1_no_empty_lines":"N = int(eval(input()))\nfor i in range(1, 10):\n    if not N % i == 0:\n        continue\n    rest = N \/ i\n    if rest < 10:\n        print(\"Yes\")\n        exit()\nprint(\"No\")\n","code_same":false,"relative_loc_diff_percent":23.0769230769,"diff":["-# N>81\u306e\u3068\u304d\u306fn*n\u3067\u8868\u305b\u306a\u3044\u306e\u3067\u4e0d\u6575","-if N > 81:","-    print(\"No\")","-else:","-    import numpy as np","-","-    n = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])","-    amari = N % n","-    shou = N \/\/ n","-    if np.any((amari == 0) * (shou <= 9)):","+for i in range(1, 10):","+    if not N % i == 0:","+        continue","+    rest = N \/ i","+    if rest < 10:","-    else:","-        print(\"No\")","+        exit()","+print(\"No\")"],"diff_only_import_comment":false,"measured_runtime_v0":1.2369615827,"measured_runtime_v1":0.1891755185,"runtime_lift":6.5386979897,"key":["s138475257","s540944662"]}
{"user_id":"u542605091","problem_id":"p02880","language":"python","submission_id_v0":"s300843143","submission_id_v1":"s824414586","cpu_time_v0":148,"cpu_time_v1":17,"memory_v0":12496,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.51,"input":"import numpy as np\n\nimport math\n\n\n\ndef bigger_devisor(n):\n\n  s = np.sqrt(n)\n\n  i = math.ceil(s)\n\n  while(n % i != 0):\n\n    i += 1\n\n  return i\n\n\n\nn = int(eval(input()))\n\nif bigger_devisor(n) > 9:\n\n  print('No')\n\nelse:\n\n  print('Yes')","target":"n = int(eval(input()))\n\nans = 0\n\nfor i in range(1, 10):\n\n  if n % i == 0:\n\n    if n \/ i < 10:\n\n      ans = 1\n\nif ans == 0:\n\n  print('No')\n\nelse:\n\n  print('Yes')","code_v0_loc":15,"code_v1_loc":10,"code_v0_num_chars":226,"code_v1_num_chars":154,"code_v0_no_empty_lines":"import numpy as np\nimport math\n\n\ndef bigger_devisor(n):\n    s = np.sqrt(n)\n    i = math.ceil(s)\n    while n % i != 0:\n        i += 1\n    return i\n\n\nn = int(eval(input()))\nif bigger_devisor(n) > 9:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n","code_v1_no_empty_lines":"n = int(eval(input()))\nans = 0\nfor i in range(1, 10):\n    if n % i == 0:\n        if n \/ i < 10:\n            ans = 1\nif ans == 0:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-import numpy as np","-import math","-","-","-def bigger_devisor(n):","-    s = np.sqrt(n)","-    i = math.ceil(s)","-    while n % i != 0:","-        i += 1","-    return i","-","-","-if bigger_devisor(n) > 9:","+ans = 0","+for i in range(1, 10):","+    if n % i == 0:","+        if n \/ i < 10:","+            ans = 1","+if ans == 0:"],"diff_only_import_comment":false,"measured_runtime_v0":1.5299629567,"measured_runtime_v1":0.1968936365,"runtime_lift":7.7705048475,"key":["s300843143","s824414586"]}
{"user_id":"u682672120","problem_id":"p03172","language":"python","submission_id_v0":"s523132470","submission_id_v1":"s175761939","cpu_time_v0":314,"cpu_time_v1":131,"memory_v0":146396,"memory_v1":67544,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":58.28,"input":"n, k = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nmod = 10 ** 9 + 7\n\n\n\ndp = [[0] * (k + 1) for _ in range(n + 1)]\n\ndp[0][0] = 1\n\nfor i in range(n):\n\n    dp[i + 1][0] = dp[i][0]\n\n    for j in range(1, k+1):\n\n        dp[i + 1][j] = (dp[i + 1][j - 1] + dp[i][j]) % mod\n\n    for j in range(k, a[i], -1):\n\n        dp[i + 1][j] = (dp[i + 1][j] - dp[i + 1][j - a[i] - 1]) % mod\n\nprint((dp[n][-1]))","target":"n, k = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nmod = 10 ** 9 + 7\n\n\n\nf = [0] * (k + 1)\n\nf[0] = 1\n\nfor i in range(n):\n\n    for j in range(1, k+1):\n\n        f[j] = (f[j] + f[j - 1]) % mod # 1\/(1-x):\u7d2f\u7a4d\u548c\n\n    for j in range(k, a[i], -1): # 1-x^(a[i]+1) a[i]+1\u6b21\u3057\u305f\u306e\u9805\u3092\u5f15\u304f\n\n        f[j] = (f[j] - f[j - a[i] - 1]) % mod\n\nprint((f[-1]))","code_v0_loc":13,"code_v1_loc":12,"code_v0_num_chars":409,"code_v1_num_chars":347,"code_v0_no_empty_lines":"n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nmod = 10**9 + 7\ndp = [[0] * (k + 1) for _ in range(n + 1)]\ndp[0][0] = 1\nfor i in range(n):\n    dp[i + 1][0] = dp[i][0]\n    for j in range(1, k + 1):\n        dp[i + 1][j] = (dp[i + 1][j - 1] + dp[i][j]) % mod\n    for j in range(k, a[i], -1):\n        dp[i + 1][j] = (dp[i + 1][j] - dp[i + 1][j - a[i] - 1]) % mod\nprint((dp[n][-1]))\n","code_v1_no_empty_lines":"n, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nmod = 10**9 + 7\nf = [0] * (k + 1)\nf[0] = 1\nfor i in range(n):\n    for j in range(1, k + 1):\n        f[j] = (f[j] + f[j - 1]) % mod  # 1\/(1-x):\u7d2f\u7a4d\u548c\n    for j in range(k, a[i], -1):  # 1-x^(a[i]+1) a[i]+1\u6b21\u3057\u305f\u306e\u9805\u3092\u5f15\u304f\n        f[j] = (f[j] - f[j - a[i] - 1]) % mod\nprint((f[-1]))\n","code_same":false,"relative_loc_diff_percent":7.6923076923,"diff":["-dp = [[0] * (k + 1) for _ in range(n + 1)]","-dp[0][0] = 1","+f = [0] * (k + 1)","+f[0] = 1","-    dp[i + 1][0] = dp[i][0]","-        dp[i + 1][j] = (dp[i + 1][j - 1] + dp[i][j]) % mod","-    for j in range(k, a[i], -1):","-        dp[i + 1][j] = (dp[i + 1][j] - dp[i + 1][j - a[i] - 1]) % mod","-print((dp[n][-1]))","+        f[j] = (f[j] + f[j - 1]) % mod  # 1\/(1-x):\u7d2f\u7a4d\u548c","+    for j in range(k, a[i], -1):  # 1-x^(a[i]+1) a[i]+1\u6b21\u3057\u305f\u306e\u9805\u3092\u5f15\u304f","+        f[j] = (f[j] - f[j - a[i] - 1]) % mod","+print((f[-1]))"],"diff_only_import_comment":false,"measured_runtime_v0":1.165174345,"measured_runtime_v1":0.7766242659,"runtime_lift":1.5003063851,"key":["s523132470","s175761939"]}
{"user_id":"u438662618","problem_id":"p03086","language":"python","submission_id_v0":"s956521892","submission_id_v1":"s325345686","cpu_time_v0":20,"cpu_time_v1":17,"memory_v0":3188,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.0,"input":"import re\n\n\n\nS = eval(input())\n\nmax = 0\n\n\n\nfor i in range(len(S)) :\n\n    for j in range(i + 1, len(S) + 1) :\n\n        pattern = re.compile(r'[A|T|C|G]{%d}' % int(j - i))\n\n        subStr = S[i:j]\n\n\n\n        if pattern.match(subStr) and j - i > max :\n\n            max = j - i\n\n\n\nprint(max)\n","target":"S = eval(input())\n\n\n\nans = 0\n\n\n\nfor i in range(len(S)) :\n\n    for j in range(i, len(S)) :\n\n        if all('ACGT'.count(c) == 1 for c in S[i : j + 1]) :\n\n            ans = max(ans, j - i + 1)\n\n\n\n\n\nprint(ans)\n","code_v0_loc":14,"code_v1_loc":11,"code_v0_num_chars":282,"code_v1_num_chars":201,"code_v0_no_empty_lines":"import re\n\nS = eval(input())\nmax = 0\nfor i in range(len(S)):\n    for j in range(i + 1, len(S) + 1):\n        pattern = re.compile(r\"[A|T|C|G]{%d}\" % int(j - i))\n        subStr = S[i:j]\n        if pattern.match(subStr) and j - i > max:\n            max = j - i\nprint(max)\n","code_v1_no_empty_lines":"S = eval(input())\nans = 0\nfor i in range(len(S)):\n    for j in range(i, len(S)):\n        if all(\"ACGT\".count(c) == 1 for c in S[i : j + 1]):\n            ans = max(ans, j - i + 1)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":21.4285714286,"diff":["-import re","-","-max = 0","+ans = 0","-    for j in range(i + 1, len(S) + 1):","-        pattern = re.compile(r\"[A|T|C|G]{%d}\" % int(j - i))","-        subStr = S[i:j]","-        if pattern.match(subStr) and j - i > max:","-            max = j - i","-print(max)","+    for j in range(i, len(S)):","+        if all(\"ACGT\".count(c) == 1 for c in S[i : j + 1]):","+            ans = max(ans, j - i + 1)","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3271781678,"measured_runtime_v1":0.2537176473,"runtime_lift":1.2895365036,"key":["s956521892","s325345686"]}
{"user_id":"u207097826","problem_id":"p02792","language":"python","submission_id_v0":"s736173164","submission_id_v1":"s628306332","cpu_time_v0":499,"cpu_time_v1":86,"memory_v0":3064,"memory_v1":68180,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":82.77,"input":"import itertools\n\nN = int(eval(input()))\n\nNketa = len(str(N))\n\n\n\nrange_count = [[0 for j in range(10)]for i in range(10)]\n\n\n\n\n\nfor p in range(1,N+1):\n\n    mae = int(str(p)[0])\n\n    ato = int(str(p)[-1])\n\n    range_count[mae][ato] += 1\n\n\n\n    \n\n\n\ncount = 0\n\nfor j in range(1,N+1):\n\n    a_mae = int(str(j)[0])\n\n    a_ato = int(str(j)[-1])\n\n    \n\n    b_mae = a_ato\n\n    b_ato = a_mae\n\n    \n\n    if b_mae == 0:\n\n        continue\n\n    else:\n\n        count += range_count[b_mae][b_ato]\n\nprint(count)\n\n  ","target":"n = int(eval(input()))\n\n\n\nall_count = 0\n\noptions = [str(i) for i in range(10)]\n\n\n\nmaeato = [[0 for i in range(10)] for j in range(10)]\n\n\n\nfor i in range(n+1):\n\n    checking = str(i)\n\n    maeato[int(checking[0])][int(checking[-1])]+=1\n\nall_count = 0\n\nfor i in range(1,10):\n\n    for j in range(1,10):\n\n        for k in range(1,10):\n\n            for p in range(1,10):\n\n                if i == p and j == k:\n\n                    all_count+=maeato[i][j]*maeato[k][p]\n\nprint(all_count)","code_v0_loc":28,"code_v1_loc":18,"code_v0_num_chars":491,"code_v1_num_chars":473,"code_v0_no_empty_lines":"import itertools\n\nN = int(eval(input()))\nNketa = len(str(N))\nrange_count = [[0 for j in range(10)] for i in range(10)]\nfor p in range(1, N + 1):\n    mae = int(str(p)[0])\n    ato = int(str(p)[-1])\n    range_count[mae][ato] += 1\ncount = 0\nfor j in range(1, N + 1):\n    a_mae = int(str(j)[0])\n    a_ato = int(str(j)[-1])\n    b_mae = a_ato\n    b_ato = a_mae\n    if b_mae == 0:\n        continue\n    else:\n        count += range_count[b_mae][b_ato]\nprint(count)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nall_count = 0\noptions = [str(i) for i in range(10)]\nmaeato = [[0 for i in range(10)] for j in range(10)]\nfor i in range(n + 1):\n    checking = str(i)\n    maeato[int(checking[0])][int(checking[-1])] += 1\nall_count = 0\nfor i in range(1, 10):\n    for j in range(1, 10):\n        for k in range(1, 10):\n            for p in range(1, 10):\n                if i == p and j == k:\n                    all_count += maeato[i][j] * maeato[k][p]\nprint(all_count)\n","code_same":false,"relative_loc_diff_percent":35.7142857143,"diff":["-import itertools","-","-N = int(eval(input()))","-Nketa = len(str(N))","-range_count = [[0 for j in range(10)] for i in range(10)]","-for p in range(1, N + 1):","-    mae = int(str(p)[0])","-    ato = int(str(p)[-1])","-    range_count[mae][ato] += 1","-count = 0","-for j in range(1, N + 1):","-    a_mae = int(str(j)[0])","-    a_ato = int(str(j)[-1])","-    b_mae = a_ato","-    b_ato = a_mae","-    if b_mae == 0:","-        continue","-    else:","-        count += range_count[b_mae][b_ato]","-print(count)","+n = int(eval(input()))","+all_count = 0","+options = [str(i) for i in range(10)]","+maeato = [[0 for i in range(10)] for j in range(10)]","+for i in range(n + 1):","+    checking = str(i)","+    maeato[int(checking[0])][int(checking[-1])] += 1","+all_count = 0","+for i in range(1, 10):","+    for j in range(1, 10):","+        for k in range(1, 10):","+            for p in range(1, 10):","+                if i == p and j == k:","+                    all_count += maeato[i][j] * maeato[k][p]","+print(all_count)"],"diff_only_import_comment":false,"measured_runtime_v0":0.5609512657,"measured_runtime_v1":0.4347667047,"runtime_lift":1.2902351069,"key":["s736173164","s628306332"]}
{"user_id":"u074220993","problem_id":"p03436","language":"python","submission_id_v0":"s307409656","submission_id_v1":"s939897094","cpu_time_v0":134,"cpu_time_v1":37,"memory_v0":26588,"memory_v1":9536,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":72.39,"input":"H, W = list(map(int, input().split()))\n\nimport numpy as np\n\nGrid = np.array([[0 if x == '.' else -1 for x in eval(input())] for _ in range(H)],dtype='int64')\n\n\n\ndef solveMase(Grid, start, goal): #bfs\u3067\u8ff7\u8def\u3092\u89e3\u304d\u3001\u30b9\u30bf\u30fc\u30c8-\u30b4\u30fc\u30eb\u9593\u306e\u6700\u4f4e\u5fc5\u8981\u767d\u30de\u30b9\u6570\u3092\u8fd4\u3059\n\n    seen = {start}\n\n    V = [start]\n\n    while len(V) != 0: #bfs\n\n        v = V.pop(0)\n\n        if v == goal:\n\n            return Grid[goal]\n\n        #\u79fb\u52d5\u5148nv\u3092\u30ea\u30b9\u30c8\u306b\u307e\u3068\u3081\u308b\n\n        y,x = v\n\n        nV = []\n\n        if x > 0: nV.append((y,x-1))\n\n        if y > 0: nV.append((y-1,x))\n\n        if x < W-1: nV.append((y,x+1))\n\n        if y < H-1: nV.append((y+1,x))\n\n        #bfs\n\n        for nv in nV:\n\n            if Grid[nv] == -1 or nv in seen:\n\n                continue\n\n            Grid[nv] = Grid[v] + 1\n\n            V.append(nv)\n\n            seen.add(nv)\n\n    return 0\n\n\n\nwhite = len(Grid[Grid == 0])-1\n\nnes_white = solveMase(Grid, (0,0), (H-1,W-1))\n\nprint((white-nes_white if nes_white > 0 else -1))","target":"from collections import deque, Counter\n\n\n\ndef main():\n\n    with open(0) as f:\n\n        H, W = list(map(int, f.readline().split()))\n\n        maze = [list(line) for line in f.readlines()]\n\n\n\n    rank = [[None]*W for _ in range(H)]\n\n    rank[0][0] = 0\n\n    #bfs\n\n    reserved = deque([(0,0)])\n\n    while len(reserved) > 0:\n\n        x, y = reserved.popleft()\n\n        for u,v in [(s,t) for s,t in [(x-1,y), (x+1,y), (x,y-1), (x,y+1)] if 0<=s<H and 0<=t<W]:\n\n            if rank[u][v] is not None:\n\n                continue\n\n            if maze[u][v] == '.':\n\n                rank[u][v] = rank[x][y] + 1\n\n                reserved.append((u,v))\n\n\n\n    if rank[H-1][W-1] is None:\n\n        print((-1))\n\n    else:\n\n        counter = Counter()\n\n        for line in maze:\n\n            counter.update(line)\n\n        print((counter['.'] - rank[H-1][W-1]-1))\n\n\n\nmain()","code_v0_loc":30,"code_v1_loc":29,"code_v0_num_chars":913,"code_v1_num_chars":844,"code_v0_no_empty_lines":"H, W = list(map(int, input().split()))\nimport numpy as np\n\nGrid = np.array(\n    [[0 if x == \".\" else -1 for x in eval(input())] for _ in range(H)], dtype=\"int64\"\n)\n\n\ndef solveMase(Grid, start, goal):  # bfs\u3067\u8ff7\u8def\u3092\u89e3\u304d\u3001\u30b9\u30bf\u30fc\u30c8-\u30b4\u30fc\u30eb\u9593\u306e\u6700\u4f4e\u5fc5\u8981\u767d\u30de\u30b9\u6570\u3092\u8fd4\u3059\n    seen = {start}\n    V = [start]\n    while len(V) != 0:  # bfs\n        v = V.pop(0)\n        if v == goal:\n            return Grid[goal]\n        # \u79fb\u52d5\u5148nv\u3092\u30ea\u30b9\u30c8\u306b\u307e\u3068\u3081\u308b\n        y, x = v\n        nV = []\n        if x > 0:\n            nV.append((y, x - 1))\n        if y > 0:\n            nV.append((y - 1, x))\n        if x < W - 1:\n            nV.append((y, x + 1))\n        if y < H - 1:\n            nV.append((y + 1, x))\n        # bfs\n        for nv in nV:\n            if Grid[nv] == -1 or nv in seen:\n                continue\n            Grid[nv] = Grid[v] + 1\n            V.append(nv)\n            seen.add(nv)\n    return 0\n\n\nwhite = len(Grid[Grid == 0]) - 1\nnes_white = solveMase(Grid, (0, 0), (H - 1, W - 1))\nprint((white - nes_white if nes_white > 0 else -1))\n","code_v1_no_empty_lines":"from collections import deque, Counter\n\n\ndef main():\n    with open(0) as f:\n        H, W = list(map(int, f.readline().split()))\n        maze = [list(line) for line in f.readlines()]\n    rank = [[None] * W for _ in range(H)]\n    rank[0][0] = 0\n    # bfs\n    reserved = deque([(0, 0)])\n    while len(reserved) > 0:\n        x, y = reserved.popleft()\n        for u, v in [\n            (s, t)\n            for s, t in [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]\n            if 0 <= s < H and 0 <= t < W\n        ]:\n            if rank[u][v] is not None:\n                continue\n            if maze[u][v] == \".\":\n                rank[u][v] = rank[x][y] + 1\n                reserved.append((u, v))\n    if rank[H - 1][W - 1] is None:\n        print((-1))\n    else:\n        counter = Counter()\n        for line in maze:\n            counter.update(line)\n        print((counter[\".\"] - rank[H - 1][W - 1] - 1))\n\n\nmain()\n","code_same":false,"relative_loc_diff_percent":3.3333333333,"diff":["-H, W = list(map(int, input().split()))","-import numpy as np","-","-Grid = np.array(","-    [[0 if x == \".\" else -1 for x in eval(input())] for _ in range(H)], dtype=\"int64\"","-)","+from collections import deque, Counter","-def solveMase(Grid, start, goal):  # bfs\u3067\u8ff7\u8def\u3092\u89e3\u304d\u3001\u30b9\u30bf\u30fc\u30c8-\u30b4\u30fc\u30eb\u9593\u306e\u6700\u4f4e\u5fc5\u8981\u767d\u30de\u30b9\u6570\u3092\u8fd4\u3059","-    seen = {start}","-    V = [start]","-    while len(V) != 0:  # bfs","-        v = V.pop(0)","-        if v == goal:","-            return Grid[goal]","-        # \u79fb\u52d5\u5148nv\u3092\u30ea\u30b9\u30c8\u306b\u307e\u3068\u3081\u308b","-        y, x = v","-        nV = []","-        if x > 0:","-            nV.append((y, x - 1))","-        if y > 0:","-            nV.append((y - 1, x))","-        if x < W - 1:","-            nV.append((y, x + 1))","-        if y < H - 1:","-            nV.append((y + 1, x))","-        # bfs","-        for nv in nV:","-            if Grid[nv] == -1 or nv in seen:","+def main():","+    with open(0) as f:","+        H, W = list(map(int, f.readline().split()))","+        maze = [list(line) for line in f.readlines()]","+    rank = [[None] * W for _ in range(H)]","+    rank[0][0] = 0","+    # bfs","+    reserved = deque([(0, 0)])","+    while len(reserved) > 0:","+        x, y = reserved.popleft()","+        for u, v in [","+            (s, t)","+            for s, t in [(x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)]","+            if 0 <= s < H and 0 <= t < W","+        ]:","+            if rank[u][v] is not None:","-            Grid[nv] = Grid[v] + 1","-            V.append(nv)","-            seen.add(nv)","-    return 0","+            if maze[u][v] == \".\":","+                rank[u][v] = rank[x][y] + 1","+                reserved.append((u, v))","+    if rank[H - 1][W - 1] is None:","+        print((-1))","+    else:","+        counter = Counter()","+        for line in maze:","+            counter.update(line)","+        print((counter[\".\"] - rank[H - 1][W - 1] - 1))","-white = len(Grid[Grid == 0]) - 1","-nes_white = solveMase(Grid, (0, 0), (H - 1, W - 1))","-print((white - nes_white if nes_white > 0 else -1))","+main()"],"diff_only_import_comment":false,"measured_runtime_v0":2.0024964819,"measured_runtime_v1":0.2990579379,"runtime_lift":6.6960151473,"key":["s307409656","s939897094"]}
{"user_id":"u671446913","problem_id":"p02916","language":"python","submission_id_v0":"s992896151","submission_id_v1":"s662353537","cpu_time_v0":309,"cpu_time_v1":17,"memory_v0":21428,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":94.5,"input":"import numpy as np\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\nA = list(np.array(A) - 1)\n\nB = list(map(int, input().split()))\n\nC = list(map(int, input().split()))\n\n\n\nsum_ = 0\n\ndiff = list(np.array(A[1:]) - np.array(A[:-1]))\n\ndiff.insert(0, -1)\n\nfor i in range(N):\n\n  sum_ += B[A[i]]\n\n  \n\n  if diff[i] == 1:\n\n    sum_ += C[A[i-1]]\n\n  \n\nprint(sum_)","target":"N = int(eval(input()))\n\nA = list(map(int, input().split()))\n\nB = list(map(int, input().split()))\n\nC = list(map(int, input().split()))\n\n\n\nans = 0\n\nfor i in range(len(A)):\n\n  ans += B[A[i]-1]\n\n\n\n  if i != 0:\n\n    if A[i-1] + 1 == A[i]:\n\n      ans += C[A[i-1]-1]\n\n\n\nprint(ans)","code_v0_loc":17,"code_v1_loc":14,"code_v0_num_chars":358,"code_v1_num_chars":267,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nA = list(map(int, input().split()))\nA = list(np.array(A) - 1)\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\nsum_ = 0\ndiff = list(np.array(A[1:]) - np.array(A[:-1]))\ndiff.insert(0, -1)\nfor i in range(N):\n    sum_ += B[A[i]]\n    if diff[i] == 1:\n        sum_ += C[A[i - 1]]\nprint(sum_)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\nans = 0\nfor i in range(len(A)):\n    ans += B[A[i] - 1]\n    if i != 0:\n        if A[i - 1] + 1 == A[i]:\n            ans += C[A[i - 1] - 1]\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":17.6470588235,"diff":["-import numpy as np","-","-A = list(np.array(A) - 1)","-sum_ = 0","-diff = list(np.array(A[1:]) - np.array(A[:-1]))","-diff.insert(0, -1)","-for i in range(N):","-    sum_ += B[A[i]]","-    if diff[i] == 1:","-        sum_ += C[A[i - 1]]","-print(sum_)","+ans = 0","+for i in range(len(A)):","+    ans += B[A[i] - 1]","+    if i != 0:","+        if A[i - 1] + 1 == A[i]:","+            ans += C[A[i - 1] - 1]","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.4381271441,"measured_runtime_v1":0.189556915,"runtime_lift":7.5867828071,"key":["s992896151","s662353537"]}
{"user_id":"u075012704","problem_id":"p02863","language":"python","submission_id_v0":"s881828060","submission_id_v1":"s407504441","cpu_time_v0":601,"cpu_time_v1":526,"memory_v0":119000,"memory_v1":119000,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":12.48,"input":"N, W = list(map(int, input().split()))\n\nitems = sorted([list(map(int, input().split())) for i in range(N)])\n\n\n\n# dp1[i][j] := \u5546\u54c10 ~ i \u304c\u5bfe\u8c61\n\ndp = [[0] * (W + 1) for i in range(N + 1)]\n\n\n\n# dp\u30c6\u30fc\u30d6\u30eb\u3092\u57cb\u3081\u308b\n\nfor i in range(N):\n\n    wi, vi = items[i]\n\n    for j in range(W + 1):\n\n        if j + wi <= W:\n\n            dp[i + 1][j + wi] = max(dp[i + 1][j + wi], dp[i][j] + vi)\n\n        dp[i + 1][j] = max(dp[i][j], dp[i + 1][j])\n\n\n\n\n\nans = 0\n\nfor i, (wi, vi) in enumerate(items):\n\n    for j in range(W):\n\n        ans = max(ans, dp[i][j] + vi)\n\n\n\nprint(ans)\n","target":"N, W = list(map(int, input().split()))\n\nitems = sorted([list(map(int, input().split())) for i in range(N)])\n\n\n\n# dp1[i][j] := \u5546\u54c10 ~ i \u304c\u5bfe\u8c61\n\ndp = [[0] * (W + 1) for i in range(N + 1)]\n\n\n\n# dp\u30c6\u30fc\u30d6\u30eb\u3092\u57cb\u3081\u308b\n\nfor i in range(N):\n\n    wi, vi = items[i]\n\n    for j in range(W + 1):\n\n        if j + wi <= W:\n\n            dp[i + 1][j + wi] = max(dp[i + 1][j + wi], dp[i][j] + vi)\n\n        dp[i + 1][j] = max(dp[i][j], dp[i + 1][j])\n\n\n\n\n\nans = 0\n\nfor i, (wi, vi) in enumerate(items):\n\n    ans = max(ans, dp[i][W - 1] + vi)\n\n\n\nprint(ans)\n","code_v0_loc":21,"code_v1_loc":20,"code_v0_num_chars":539,"code_v1_num_chars":515,"code_v0_no_empty_lines":"N, W = list(map(int, input().split()))\nitems = sorted([list(map(int, input().split())) for i in range(N)])\n# dp1[i][j] := \u5546\u54c10 ~ i \u304c\u5bfe\u8c61\ndp = [[0] * (W + 1) for i in range(N + 1)]\n# dp\u30c6\u30fc\u30d6\u30eb\u3092\u57cb\u3081\u308b\nfor i in range(N):\n    wi, vi = items[i]\n    for j in range(W + 1):\n        if j + wi <= W:\n            dp[i + 1][j + wi] = max(dp[i + 1][j + wi], dp[i][j] + vi)\n        dp[i + 1][j] = max(dp[i][j], dp[i + 1][j])\nans = 0\nfor i, (wi, vi) in enumerate(items):\n    for j in range(W):\n        ans = max(ans, dp[i][j] + vi)\nprint(ans)\n","code_v1_no_empty_lines":"N, W = list(map(int, input().split()))\nitems = sorted([list(map(int, input().split())) for i in range(N)])\n# dp1[i][j] := \u5546\u54c10 ~ i \u304c\u5bfe\u8c61\ndp = [[0] * (W + 1) for i in range(N + 1)]\n# dp\u30c6\u30fc\u30d6\u30eb\u3092\u57cb\u3081\u308b\nfor i in range(N):\n    wi, vi = items[i]\n    for j in range(W + 1):\n        if j + wi <= W:\n            dp[i + 1][j + wi] = max(dp[i + 1][j + wi], dp[i][j] + vi)\n        dp[i + 1][j] = max(dp[i][j], dp[i + 1][j])\nans = 0\nfor i, (wi, vi) in enumerate(items):\n    ans = max(ans, dp[i][W - 1] + vi)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":4.7619047619,"diff":["-    for j in range(W):","-        ans = max(ans, dp[i][j] + vi)","+    ans = max(ans, dp[i][W - 1] + vi)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2747145832,"measured_runtime_v1":0.2133797197,"runtime_lift":1.2874446713,"key":["s881828060","s407504441"]}
{"user_id":"u971091945","problem_id":"p02690","language":"python","submission_id_v0":"s227979120","submission_id_v1":"s776767072","cpu_time_v0":40,"cpu_time_v1":33,"memory_v0":9172,"memory_v1":9132,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.5,"input":"x = int(eval(input()))\n\n\n\nfor a in range(-118, 120):\n\n    for b in range(-119, 119):\n\n        if a**5-b**5 == x:\n\n            print((a, b))\n\n            exit()","target":"x = int(eval(input()))\n\n\n\nfor a in range(1, 120):\n\n    for b in range(-119, 119):\n\n        if a**5-b**5 == x:\n\n            print((a, b))\n\n            exit()","code_v0_loc":7,"code_v1_loc":7,"code_v0_num_chars":151,"code_v1_num_chars":148,"code_v0_no_empty_lines":"x = int(eval(input()))\nfor a in range(-118, 120):\n    for b in range(-119, 119):\n        if a**5 - b**5 == x:\n            print((a, b))\n            exit()\n","code_v1_no_empty_lines":"x = int(eval(input()))\nfor a in range(1, 120):\n    for b in range(-119, 119):\n        if a**5 - b**5 == x:\n            print((a, b))\n            exit()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-for a in range(-118, 120):","+for a in range(1, 120):"],"diff_only_import_comment":false,"measured_runtime_v0":0.3259610315,"measured_runtime_v1":0.2110695004,"runtime_lift":1.5443303311,"key":["s227979120","s776767072"]}
{"user_id":"u379136995","problem_id":"p02921","language":"python","submission_id_v0":"s545345968","submission_id_v1":"s346622706","cpu_time_v0":27,"cpu_time_v1":17,"memory_v0":3064,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":37.04,"input":"s=eval(input())\n\nt=eval(input())\n\nans=0\n\nif s[0]==t[0]:\n\n    ans+=1\n\nif s[1]==t[1]:\n\n    ans+=1\n\nif s[2]==t[2]:\n\n    ans+=1\n\nprint(ans)\n","target":"s=eval(input())\n\nt=eval(input())\n\nans=0\n\nfor i in range(0,3):\n\n    if s[i]==t[i]:\n\n        ans+=1\n\nprint(ans)\n","code_v0_loc":10,"code_v1_loc":7,"code_v0_num_chars":124,"code_v1_num_chars":98,"code_v0_no_empty_lines":"s = eval(input())\nt = eval(input())\nans = 0\nif s[0] == t[0]:\n    ans += 1\nif s[1] == t[1]:\n    ans += 1\nif s[2] == t[2]:\n    ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"s = eval(input())\nt = eval(input())\nans = 0\nfor i in range(0, 3):\n    if s[i] == t[i]:\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":30.0,"diff":["-if s[0] == t[0]:","-    ans += 1","-if s[1] == t[1]:","-    ans += 1","-if s[2] == t[2]:","-    ans += 1","+for i in range(0, 3):","+    if s[i] == t[i]:","+        ans += 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.3561623907,"measured_runtime_v1":0.2681128595,"runtime_lift":1.3284047299,"key":["s545345968","s346622706"]}
{"user_id":"u179169725","problem_id":"p03013","language":"python","submission_id_v0":"s455496434","submission_id_v1":"s062412783","cpu_time_v0":438,"cpu_time_v1":334,"memory_v0":17820,"memory_v1":19904,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":23.74,"input":"# https:\/\/atcoder.jp\/contests\/abc129\/tasks\/abc129_c\n\n# \u5178\u578b\u7684\u306aDP\n\n\n\nMOD = 10**9 + 7\n\nimport numpy as np\n\n# dp[i]\u3092i\u6bb5\u76ee\u307e\u3067\u306e\u901a\u308a\u306e\u6570\u3068\u3059\u308b\u3002\n\nN, M = list(map(int, input().split()))\n\nto_zero = np.full((N + 1), False, dtype=bool)\n\nfor _ in range(M):\n\n    to_zero[int(eval(input()))] = True  # \u5e8a\u304c\u629c\u3051\u3066\u3044\u308b\u3068\u3053\u308d\n\n\n\n# dp\u30c6\u30fc\u30d6\u30eb\u306e\u7528\u610f\n\ndp = np.full((N + 1), -1, dtype='int64')\n\ndp[0] = 1\n\ndp[1] = 0 if to_zero[1] else 1\n\nfor i in range(2, N + 1):\n\n    dp[i] = 0 if to_zero[i] else dp[i - 2] + dp[i - 1]\n\n    if dp[i] > MOD:\n\n        dp[i] %= MOD\n\n\n\nprint((dp[-1]))\n","target":"# https:\/\/atcoder.jp\/contests\/abc129\/tasks\/abc129_c\n\n# \u5178\u578b\u7684\u306aDP\n\n\n\nMOD = 10**9 + 7\n\nimport numpy as np\n\n# dp[i]\u3092i\u6bb5\u76ee\u307e\u3067\u306e\u901a\u308a\u306e\u6570\u3068\u3059\u308b\u3002\n\nN, M = list(map(int, input().split()))\n\nto_zero = np.full((N + 1), False).tolist()\n\nfor _ in range(M):\n\n    to_zero[int(eval(input()))] = True  # \u5e8a\u304c\u629c\u3051\u3066\u3044\u308b\u3068\u3053\u308d\n\n\n\n# dp\u30c6\u30fc\u30d6\u30eb\u306e\u7528\u610f\n\ndp = np.full((N + 1), -1).tolist()\n\ndp[0] = 1\n\ndp[1] = 0 if to_zero[1] else 1\n\nfor i in range(2, N + 1):\n\n    dp[i] = 0 if to_zero[i] else dp[i - 2] + dp[i - 1]\n\n    if dp[i] > MOD:\n\n        dp[i] %= MOD\n\n\n\nprint((dp[-1]))\n","code_v0_loc":21,"code_v1_loc":21,"code_v0_num_chars":523,"code_v1_num_chars":514,"code_v0_no_empty_lines":"# https:\/\/atcoder.jp\/contests\/abc129\/tasks\/abc129_c\n# \u5178\u578b\u7684\u306aDP\nMOD = 10**9 + 7\nimport numpy as np\n\n# dp[i]\u3092i\u6bb5\u76ee\u307e\u3067\u306e\u901a\u308a\u306e\u6570\u3068\u3059\u308b\u3002\nN, M = list(map(int, input().split()))\nto_zero = np.full((N + 1), False, dtype=bool)\nfor _ in range(M):\n    to_zero[int(eval(input()))] = True  # \u5e8a\u304c\u629c\u3051\u3066\u3044\u308b\u3068\u3053\u308d\n# dp\u30c6\u30fc\u30d6\u30eb\u306e\u7528\u610f\ndp = np.full((N + 1), -1, dtype=\"int64\")\ndp[0] = 1\ndp[1] = 0 if to_zero[1] else 1\nfor i in range(2, N + 1):\n    dp[i] = 0 if to_zero[i] else dp[i - 2] + dp[i - 1]\n    if dp[i] > MOD:\n        dp[i] %= MOD\nprint((dp[-1]))\n","code_v1_no_empty_lines":"# https:\/\/atcoder.jp\/contests\/abc129\/tasks\/abc129_c\n# \u5178\u578b\u7684\u306aDP\nMOD = 10**9 + 7\nimport numpy as np\n\n# dp[i]\u3092i\u6bb5\u76ee\u307e\u3067\u306e\u901a\u308a\u306e\u6570\u3068\u3059\u308b\u3002\nN, M = list(map(int, input().split()))\nto_zero = np.full((N + 1), False).tolist()\nfor _ in range(M):\n    to_zero[int(eval(input()))] = True  # \u5e8a\u304c\u629c\u3051\u3066\u3044\u308b\u3068\u3053\u308d\n# dp\u30c6\u30fc\u30d6\u30eb\u306e\u7528\u610f\ndp = np.full((N + 1), -1).tolist()\ndp[0] = 1\ndp[1] = 0 if to_zero[1] else 1\nfor i in range(2, N + 1):\n    dp[i] = 0 if to_zero[i] else dp[i - 2] + dp[i - 1]\n    if dp[i] > MOD:\n        dp[i] %= MOD\nprint((dp[-1]))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-to_zero = np.full((N + 1), False, dtype=bool)","+to_zero = np.full((N + 1), False).tolist()","-dp = np.full((N + 1), -1, dtype=\"int64\")","+dp = np.full((N + 1), -1).tolist()"],"diff_only_import_comment":false,"measured_runtime_v0":1.9272715452,"measured_runtime_v1":1.3572561545,"runtime_lift":1.4199762799,"key":["s455496434","s062412783"]}
{"user_id":"u735069283","problem_id":"p03494","language":"python","submission_id_v0":"s562092829","submission_id_v1":"s247847404","cpu_time_v0":151,"cpu_time_v1":19,"memory_v0":12468,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.42,"input":"import numpy as np\n\neval(input())\n\nx = np.array(input().split(),dtype=np.int32)\n\n\n\nans = 0\n\nwhile (x%2 == 0).all():\n\n  x = x\/\/2\n\n  ans += 1\n\nprint(ans)","target":"N = int(eval(input()))\n\nA = [int(x) for x in input().split()]\n\nresult = float('inf')\n\nfor i in range(N):\n\n  r=0\n\n  while A[i]%2==0:\n\n    A[i]=A[i]\/2\n\n    r +=1\n\n  result=min(result,r)\n\nprint(result)","code_v0_loc":9,"code_v1_loc":10,"code_v0_num_chars":145,"code_v1_num_chars":192,"code_v0_no_empty_lines":"import numpy as np\n\neval(input())\nx = np.array(input().split(), dtype=np.int32)\nans = 0\nwhile (x % 2 == 0).all():\n    x = x \/\/ 2\n    ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = [int(x) for x in input().split()]\nresult = float(\"inf\")\nfor i in range(N):\n    r = 0\n    while A[i] % 2 == 0:\n        A[i] = A[i] \/ 2\n        r += 1\n    result = min(result, r)\nprint(result)\n","code_same":false,"relative_loc_diff_percent":10.0,"diff":["-import numpy as np","-","-eval(input())","-x = np.array(input().split(), dtype=np.int32)","-ans = 0","-while (x % 2 == 0).all():","-    x = x \/\/ 2","-    ans += 1","-print(ans)","+N = int(eval(input()))","+A = [int(x) for x in input().split()]","+result = float(\"inf\")","+for i in range(N):","+    r = 0","+    while A[i] % 2 == 0:","+        A[i] = A[i] \/ 2","+        r += 1","+    result = min(result, r)","+print(result)"],"diff_only_import_comment":false,"measured_runtime_v0":1.2939765534,"measured_runtime_v1":0.2053932648,"runtime_lift":6.2999950598,"key":["s562092829","s247847404"]}
{"user_id":"u074220993","problem_id":"p03416","language":"python","submission_id_v0":"s333786892","submission_id_v1":"s249043055","cpu_time_v0":109,"cpu_time_v1":88,"memory_v0":19168,"memory_v1":9452,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":19.27,"input":"N = {} #10000\u4ee5\u4e0akey\u4ee5\u4e0b\u306e\u56de\u6587\u6570\u306e\u500b\u6570\n\ncnt = 0\n\nfor i in range(10000, 100000):\n\n    L = list(str(i))\n\n    if L == list(reversed(L)):\n\n        cnt += 1\n\n    N[i] = cnt\n\nA, B = list(map(int, input().split()))\n\nprint((N[B]-N[A-1] if A > 10000 else N[B]))","target":"A, B =list(map(int, input().split()))\n\nnum_palin = [0] * (B+1)\n\nfor i in range(1,B+1):\n\n    if str(i) == str(i)[::-1]:\n\n        num_palin[i] = num_palin[i-1] + 1\n\n    else:\n\n        num_palin[i] = num_palin[i-1]\n\nprint((num_palin[B]-num_palin[A-1]))\n","code_v0_loc":9,"code_v1_loc":8,"code_v0_num_chars":233,"code_v1_num_chars":242,"code_v0_no_empty_lines":"N = {}  # 10000\u4ee5\u4e0akey\u4ee5\u4e0b\u306e\u56de\u6587\u6570\u306e\u500b\u6570\ncnt = 0\nfor i in range(10000, 100000):\n    L = list(str(i))\n    if L == list(reversed(L)):\n        cnt += 1\n    N[i] = cnt\nA, B = list(map(int, input().split()))\nprint((N[B] - N[A - 1] if A > 10000 else N[B]))\n","code_v1_no_empty_lines":"A, B = list(map(int, input().split()))\nnum_palin = [0] * (B + 1)\nfor i in range(1, B + 1):\n    if str(i) == str(i)[::-1]:\n        num_palin[i] = num_palin[i - 1] + 1\n    else:\n        num_palin[i] = num_palin[i - 1]\nprint((num_palin[B] - num_palin[A - 1]))\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["-N = {}  # 10000\u4ee5\u4e0akey\u4ee5\u4e0b\u306e\u56de\u6587\u6570\u306e\u500b\u6570","-cnt = 0","-for i in range(10000, 100000):","-    L = list(str(i))","-    if L == list(reversed(L)):","-        cnt += 1","-    N[i] = cnt","-print((N[B] - N[A - 1] if A > 10000 else N[B]))","+num_palin = [0] * (B + 1)","+for i in range(1, B + 1):","+    if str(i) == str(i)[::-1]:","+        num_palin[i] = num_palin[i - 1] + 1","+    else:","+        num_palin[i] = num_palin[i - 1]","+print((num_palin[B] - num_palin[A - 1]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.9776612727,"measured_runtime_v1":0.3707281357,"runtime_lift":2.6371380497,"key":["s333786892","s249043055"]}
{"user_id":"u263753244","problem_id":"p03835","language":"python","submission_id_v0":"s871403539","submission_id_v1":"s899034376","cpu_time_v0":1228,"cpu_time_v1":261,"memory_v0":2940,"memory_v1":42092,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":78.75,"input":"k,s=list(map(int,input().split()))\n\ncnt=0\n\nfor i in range(k+1):\n\n    for j in range(k+1):\n\n        if 0 <= s-i-j <= k:\n\n            cnt+=1\n\nprint(cnt)","target":"k,s=list(map(int,input().split()))\n\na=0\n\nfor i in range(0,k+1):\n\n    for j in range(0,k+1):\n\n        if 0<=s-i-j<=k:\n\n            a+=1\n\nprint(a)","code_v0_loc":7,"code_v1_loc":7,"code_v0_num_chars":144,"code_v1_num_chars":138,"code_v0_no_empty_lines":"k, s = list(map(int, input().split()))\ncnt = 0\nfor i in range(k + 1):\n    for j in range(k + 1):\n        if 0 <= s - i - j <= k:\n            cnt += 1\nprint(cnt)\n","code_v1_no_empty_lines":"k, s = list(map(int, input().split()))\na = 0\nfor i in range(0, k + 1):\n    for j in range(0, k + 1):\n        if 0 <= s - i - j <= k:\n            a += 1\nprint(a)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-cnt = 0","-for i in range(k + 1):","-    for j in range(k + 1):","+a = 0","+for i in range(0, k + 1):","+    for j in range(0, k + 1):","-            cnt += 1","-print(cnt)","+            a += 1","+print(a)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2440719529,"measured_runtime_v1":0.12879462,"runtime_lift":1.8950477354,"key":["s871403539","s899034376"]}
{"user_id":"u761529120","problem_id":"p03806","language":"python","submission_id_v0":"s948329967","submission_id_v1":"s910945254","cpu_time_v0":1465,"cpu_time_v1":943,"memory_v0":59504,"memory_v1":59504,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":35.63,"input":"N,Ma,Mb = list(map(int, input().split()))\n\narr=[list(map(int,input().split())) for _ in range(N)]\n\ndp=[[[5000]*401 for _ in range(401)] for _ in range(41)]\n\ndp[0][0][0] = 0\n\nfor i in range(N):\n\n    a,b,c=arr[i]\n\n    for j in range(10*N+1):\n\n        for k in range(10*N+1):\n\n            if dp[i][j][k] == 5000:\n\n                continue\n\n            dp[i+1][j][k]=min(dp[i+1][j][k],dp[i][j][k])\n\n            dp[i+1][j+a][k+b]=min(dp[i+1][j+a][k+b],dp[i][j][k]+c)\n\n\n\nans=5000\n\nfor i in range(1,401):\n\n        if i*Ma>400 or i*Mb>400:\n\n            break\n\n        ans = min(ans, dp[N][i*Ma][i*Mb])\n\nif ans == 5000:\n\n    print((-1))\n\nelse:\n\n    print(ans)","target":"def calc():\n\n    N,Ma,Mb = list(map(int, input().split()))\n\n    arr=[list(map(int,input().split())) for _ in range(N)]\n\n    dp=[[[5000]*401 for _ in range(401)] for _ in range(41)]\n\n    dp[0][0][0] = 0\n\n    for i in range(N):\n\n        a,b,c=arr[i]\n\n        for j in range(10*N+1):\n\n            for k in range(10*N+1):\n\n                if dp[i][j][k] == 5000:\n\n                    continue\n\n                dp[i+1][j][k]=min(dp[i+1][j][k],dp[i][j][k])\n\n                dp[i+1][j+a][k+b]=min(dp[i+1][j+a][k+b],dp[i][j][k]+c)\n\n\n\n    ans=5000\n\n    for i in range(1,401):\n\n            if i*Ma>400 or i*Mb>400:\n\n                break\n\n            ans = min(ans, dp[N][i*Ma][i*Mb])\n\n    if ans == 5000:\n\n        print((-1))\n\n    else:\n\n        print(ans)\n\n\n\ncalc()","code_v0_loc":22,"code_v1_loc":25,"code_v0_num_chars":642,"code_v1_num_chars":749,"code_v0_no_empty_lines":"N, Ma, Mb = list(map(int, input().split()))\narr = [list(map(int, input().split())) for _ in range(N)]\ndp = [[[5000] * 401 for _ in range(401)] for _ in range(41)]\ndp[0][0][0] = 0\nfor i in range(N):\n    a, b, c = arr[i]\n    for j in range(10 * N + 1):\n        for k in range(10 * N + 1):\n            if dp[i][j][k] == 5000:\n                continue\n            dp[i + 1][j][k] = min(dp[i + 1][j][k], dp[i][j][k])\n            dp[i + 1][j + a][k + b] = min(dp[i + 1][j + a][k + b], dp[i][j][k] + c)\nans = 5000\nfor i in range(1, 401):\n    if i * Ma > 400 or i * Mb > 400:\n        break\n    ans = min(ans, dp[N][i * Ma][i * Mb])\nif ans == 5000:\n    print((-1))\nelse:\n    print(ans)\n","code_v1_no_empty_lines":"def calc():\n    N, Ma, Mb = list(map(int, input().split()))\n    arr = [list(map(int, input().split())) for _ in range(N)]\n    dp = [[[5000] * 401 for _ in range(401)] for _ in range(41)]\n    dp[0][0][0] = 0\n    for i in range(N):\n        a, b, c = arr[i]\n        for j in range(10 * N + 1):\n            for k in range(10 * N + 1):\n                if dp[i][j][k] == 5000:\n                    continue\n                dp[i + 1][j][k] = min(dp[i + 1][j][k], dp[i][j][k])\n                dp[i + 1][j + a][k + b] = min(dp[i + 1][j + a][k + b], dp[i][j][k] + c)\n    ans = 5000\n    for i in range(1, 401):\n        if i * Ma > 400 or i * Mb > 400:\n            break\n        ans = min(ans, dp[N][i * Ma][i * Mb])\n    if ans == 5000:\n        print((-1))\n    else:\n        print(ans)\n\n\ncalc()\n","code_same":false,"relative_loc_diff_percent":12.0,"diff":["-N, Ma, Mb = list(map(int, input().split()))","-arr = [list(map(int, input().split())) for _ in range(N)]","-dp = [[[5000] * 401 for _ in range(401)] for _ in range(41)]","-dp[0][0][0] = 0","-for i in range(N):","-    a, b, c = arr[i]","-    for j in range(10 * N + 1):","-        for k in range(10 * N + 1):","-            if dp[i][j][k] == 5000:","-                continue","-            dp[i + 1][j][k] = min(dp[i + 1][j][k], dp[i][j][k])","-            dp[i + 1][j + a][k + b] = min(dp[i + 1][j + a][k + b], dp[i][j][k] + c)","-ans = 5000","-for i in range(1, 401):","-    if i * Ma > 400 or i * Mb > 400:","-        break","-    ans = min(ans, dp[N][i * Ma][i * Mb])","-if ans == 5000:","-    print((-1))","-else:","-    print(ans)","+def calc():","+    N, Ma, Mb = list(map(int, input().split()))","+    arr = [list(map(int, input().split())) for _ in range(N)]","+    dp = [[[5000] * 401 for _ in range(401)] for _ in range(41)]","+    dp[0][0][0] = 0","+    for i in range(N):","+        a, b, c = arr[i]","+        for j in range(10 * N + 1):","+            for k in range(10 * N + 1):","+                if dp[i][j][k] == 5000:","+                    continue","+                dp[i + 1][j][k] = min(dp[i + 1][j][k], dp[i][j][k])","+                dp[i + 1][j + a][k + b] = min(dp[i + 1][j + a][k + b], dp[i][j][k] + c)","+    ans = 5000","+    for i in range(1, 401):","+        if i * Ma > 400 or i * Mb > 400:","+            break","+        ans = min(ans, dp[N][i * Ma][i * Mb])","+    if ans == 5000:","+        print((-1))","+    else:","+        print(ans)","+","+","+calc()"],"diff_only_import_comment":false,"measured_runtime_v0":1.7420692999,"measured_runtime_v1":1.3671779791,"runtime_lift":1.2742081328,"key":["s948329967","s910945254"]}
{"user_id":"u936985471","problem_id":"p03608","language":"python","submission_id_v0":"s080314510","submission_id_v1":"s650231829","cpu_time_v0":661,"cpu_time_v1":174,"memory_v0":18216,"memory_v1":74412,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":73.68,"input":"# \u30ef\u30fc\u30b7\u30e3\u30eb\u30d5\u30ed\u30a4\u30c9\u3067\u3001\u5404\u753a\u9593\u306e\u6700\u77ed\u8ddd\u96e2\u306e\u66f4\u65b0\u306f200^3 = 8,000,000\n\n# \u8a2a\u308c\u308b\u3079\u304d\u753aR\u306f\u305f\u304b\u3060\u304b8\u500b\u306a\u306e\u3067\u3001\u9806\u756a\u306e\u5168\u901a\u308a\u3092\u8a66\u3057\u30668! = \u7d0440000\u901a\u308a\n\n\n\nimport numpy as np\n\nfrom scipy.sparse.csgraph import shortest_path, floyd_warshall\n\nfrom scipy.sparse import csr_matrix\n\n\n\nN,M,R = list(map(int,input().split()))\n\nr = list(map(int,input().split()))\n\nr = list([x-1 for x in r])\n\n\n\nE = [[0 for j in range(N)] for i in range(N)]\n\nfor i in range(M):\n\n  a,b,c = list(map(int,input().split()))\n\n  E[a-1][b-1] = c\n\n  E[b-1][a-1] = c\n\n\n\nE = np.array(E)\n\nE = shortest_path(E,method = \"FW\")\n\n\n\n# DFS\u3067\u3059\u3079\u3066\u306e\u6570\u3092\u8a66\u3059\n\nstack = []\n\nfor i in range(len(r)):\n\n  stack.append([r[i],[],0])\n\nans = 10 ** 18\n\nwhile stack:\n\n  v,visited,dist = stack.pop()\n\n  if len(visited) != 0:\n\n    dist += E[visited[-1]][v]\n\n  visited2 = visited.copy()\n\n  visited2.append(v)\n\n  if len(visited2) == len(r):\n\n    if dist < ans:\n\n      ans = dist\n\n    continue\n\n  for i in range(len(r)):\n\n    if r[i] not in visited2:\n\n      stack.append([r[i],visited2,dist])\n\n    \n\nprint((int(ans)))","target":"import sys\n\nreadline = sys.stdin.readline\n\n\n\nN,M,R = list(map(int,readline().split()))\n\nr = list(map(int,readline().split()))\n\nINF = 10 ** 10\n\n\n\nG = [[INF] * N for i in range(N)]\n\nfor i in range(M):\n\n  a,b,c = list(map(int,readline().split()))\n\n  G[a - 1][b - 1] = c\n\n  G[b - 1][a - 1] = c\n\n  \n\nfor i in range(N):\n\n  G[i][i] = 0\n\n  \n\nfor k in range(N):\n\n  for i in range(N):\n\n    for j in range(N):\n\n      G[i][j] = min(G[i][j], G[i][k] + G[k][j])\n\n      \n\nimport itertools\n\nans = INF\n\nfor perm in itertools.permutations(list(range(R))):\n\n  dist = 0\n\n  for i in range(1, len(perm)):\n\n    dist += G[r[perm[i - 1]] - 1][r[perm[i]] - 1]\n\n  if ans > dist:\n\n    ans = dist\n\n    \n\nprint(ans)\n","code_v0_loc":40,"code_v1_loc":31,"code_v0_num_chars":969,"code_v1_num_chars":668,"code_v0_no_empty_lines":"# \u30ef\u30fc\u30b7\u30e3\u30eb\u30d5\u30ed\u30a4\u30c9\u3067\u3001\u5404\u753a\u9593\u306e\u6700\u77ed\u8ddd\u96e2\u306e\u66f4\u65b0\u306f200^3 = 8,000,000\n# \u8a2a\u308c\u308b\u3079\u304d\u753aR\u306f\u305f\u304b\u3060\u304b8\u500b\u306a\u306e\u3067\u3001\u9806\u756a\u306e\u5168\u901a\u308a\u3092\u8a66\u3057\u30668! = \u7d0440000\u901a\u308a\nimport numpy as np\nfrom scipy.sparse.csgraph import shortest_path, floyd_warshall\nfrom scipy.sparse import csr_matrix\n\nN, M, R = list(map(int, input().split()))\nr = list(map(int, input().split()))\nr = list([x - 1 for x in r])\nE = [[0 for j in range(N)] for i in range(N)]\nfor i in range(M):\n    a, b, c = list(map(int, input().split()))\n    E[a - 1][b - 1] = c\n    E[b - 1][a - 1] = c\nE = np.array(E)\nE = shortest_path(E, method=\"FW\")\n# DFS\u3067\u3059\u3079\u3066\u306e\u6570\u3092\u8a66\u3059\nstack = []\nfor i in range(len(r)):\n    stack.append([r[i], [], 0])\nans = 10**18\nwhile stack:\n    v, visited, dist = stack.pop()\n    if len(visited) != 0:\n        dist += E[visited[-1]][v]\n    visited2 = visited.copy()\n    visited2.append(v)\n    if len(visited2) == len(r):\n        if dist < ans:\n            ans = dist\n        continue\n    for i in range(len(r)):\n        if r[i] not in visited2:\n            stack.append([r[i], visited2, dist])\nprint((int(ans)))\n","code_v1_no_empty_lines":"import sys\n\nreadline = sys.stdin.readline\nN, M, R = list(map(int, readline().split()))\nr = list(map(int, readline().split()))\nINF = 10**10\nG = [[INF] * N for i in range(N)]\nfor i in range(M):\n    a, b, c = list(map(int, readline().split()))\n    G[a - 1][b - 1] = c\n    G[b - 1][a - 1] = c\nfor i in range(N):\n    G[i][i] = 0\nfor k in range(N):\n    for i in range(N):\n        for j in range(N):\n            G[i][j] = min(G[i][j], G[i][k] + G[k][j])\nimport itertools\n\nans = INF\nfor perm in itertools.permutations(list(range(R))):\n    dist = 0\n    for i in range(1, len(perm)):\n        dist += G[r[perm[i - 1]] - 1][r[perm[i]] - 1]\n    if ans > dist:\n        ans = dist\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":22.5,"diff":["-# \u30ef\u30fc\u30b7\u30e3\u30eb\u30d5\u30ed\u30a4\u30c9\u3067\u3001\u5404\u753a\u9593\u306e\u6700\u77ed\u8ddd\u96e2\u306e\u66f4\u65b0\u306f200^3 = 8,000,000","-# \u8a2a\u308c\u308b\u3079\u304d\u753aR\u306f\u305f\u304b\u3060\u304b8\u500b\u306a\u306e\u3067\u3001\u9806\u756a\u306e\u5168\u901a\u308a\u3092\u8a66\u3057\u30668! = \u7d0440000\u901a\u308a","-import numpy as np","-from scipy.sparse.csgraph import shortest_path, floyd_warshall","-from scipy.sparse import csr_matrix","+import sys","-N, M, R = list(map(int, input().split()))","-r = list(map(int, input().split()))","-r = list([x - 1 for x in r])","-E = [[0 for j in range(N)] for i in range(N)]","+readline = sys.stdin.readline","+N, M, R = list(map(int, readline().split()))","+r = list(map(int, readline().split()))","+INF = 10**10","+G = [[INF] * N for i in range(N)]","-    a, b, c = list(map(int, input().split()))","-    E[a - 1][b - 1] = c","-    E[b - 1][a - 1] = c","-E = np.array(E)","-E = shortest_path(E, method=\"FW\")","-# DFS\u3067\u3059\u3079\u3066\u306e\u6570\u3092\u8a66\u3059","-stack = []","-for i in range(len(r)):","-    stack.append([r[i], [], 0])","-ans = 10**18","-while stack:","-    v, visited, dist = stack.pop()","-    if len(visited) != 0:","-        dist += E[visited[-1]][v]","-    visited2 = visited.copy()","-    visited2.append(v)","-    if len(visited2) == len(r):","-        if dist < ans:","-            ans = dist","-        continue","-    for i in range(len(r)):","-        if r[i] not in visited2:","-            stack.append([r[i], visited2, dist])","-print((int(ans)))","+    a, b, c = list(map(int, readline().split()))","+    G[a - 1][b - 1] = c","+    G[b - 1][a - 1] = c","+for i in range(N):","+    G[i][i] = 0","+for k in range(N):","+    for i in range(N):","+        for j in range(N):","+            G[i][j] = min(G[i][j], G[i][k] + G[k][j])","+import itertools","+","+ans = INF","+for perm in itertools.permutations(list(range(R))):","+    dist = 0","+    for i in range(1, len(perm)):","+        dist += G[r[perm[i - 1]] - 1][r[perm[i]] - 1]","+    if ans > dist:","+        ans = dist","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.8536462879,"measured_runtime_v1":0.2095541062,"runtime_lift":8.8456691264,"key":["s080314510","s650231829"]}
{"user_id":"u750990077","problem_id":"p02690","language":"python","submission_id_v0":"s458163886","submission_id_v1":"s605160476","cpu_time_v0":47,"cpu_time_v1":42,"memory_v0":9036,"memory_v1":8860,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.64,"input":"def main():\n\n    x = int(eval(input()))\n\n    for a in range(-120, 121):\n\n        for b in range(-120, 121):\n\n            if a**5 - b**5 == x:\n\n                print((a, b))\n\n                return\n\n\n\nif __name__ == \"__main__\":\n\n    main()","target":"def main():\n\n    x = int(eval(input()))\n\n    for i in range(-120, 121):\n\n        for j in range(-120, 121):\n\n            if i**5 - j**5 == x:\n\n                print((i, j))\n\n                return\n\n\n\nif __name__ == \"__main__\":\n\n    main()","code_v0_loc":10,"code_v1_loc":10,"code_v0_num_chars":230,"code_v1_num_chars":230,"code_v0_no_empty_lines":"def main():\n    x = int(eval(input()))\n    for a in range(-120, 121):\n        for b in range(-120, 121):\n            if a**5 - b**5 == x:\n                print((a, b))\n                return\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def main():\n    x = int(eval(input()))\n    for i in range(-120, 121):\n        for j in range(-120, 121):\n            if i**5 - j**5 == x:\n                print((i, j))\n                return\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    for a in range(-120, 121):","-        for b in range(-120, 121):","-            if a**5 - b**5 == x:","-                print((a, b))","+    for i in range(-120, 121):","+        for j in range(-120, 121):","+            if i**5 - j**5 == x:","+                print((i, j))"],"diff_only_import_comment":false,"measured_runtime_v0":0.47585452,"measured_runtime_v1":0.3591731171,"runtime_lift":1.3248611807,"key":["s458163886","s605160476"]}
{"user_id":"u457901067","problem_id":"p02814","language":"python","submission_id_v0":"s285073705","submission_id_v1":"s453740847","cpu_time_v0":523,"cpu_time_v1":158,"memory_v0":21860,"memory_v1":97668,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":69.79,"input":"from fractions import gcd\n\nN, M = list(map(int, input().split()))\n\nA = list([int(x) for x in input().split()])\n\n\n\ncnt = [0 for _ in range(N)]\n\nfor i in range(N):\n\n  a = A[i]\n\n  while a%2 == 0:\n\n    a = a \/\/ 2\n\n    cnt[i] += 1\n\n\n\nif max(cnt) > min(cnt):\n\n  print((0))\n\n  exit(0)\n\nC = max(cnt)\n\n\n\nA = list([x \/\/ pow(2,C) for x in A])\n\ndef gcd(a,b):\n\n  if a<b:\n\n    a,b = b,a\n\n  while a%b > 0:\n\n    a,b = b,a%b\n\n  return b\n\n\n\ndef lcm(a,b):\n\n  return a*b\/\/gcd(a,b)\n\n\n\nx = A[0]\n\nfor a in A[1:]:\n\n  x = lcm(x,a)\n\nx = x * pow(2,C-1)\n\n\n\nprint(((M \/\/ x + 1) \/\/ 2))","target":"N, M = list(map(int, input().split()))\n\nA = list([int(x) for x in input().split()])\n\n\n\ncnt = [0 for _ in range(N)]\n\nfor i in range(N):\n\n  a = A[i]\n\n  while a%2 == 0:\n\n    a = a \/\/ 2\n\n    cnt[i] += 1\n\n\n\nif max(cnt) > min(cnt):\n\n  print((0))\n\n  exit(0)\n\nC = max(cnt)\n\n\n\nA = list([x \/\/ pow(2,C) for x in A])\n\ndef gcd(a,b):\n\n  if a<b:\n\n    a,b = b,a\n\n  while a%b > 0:\n\n    a,b = b,a%b\n\n  return b\n\n\n\ndef lcm(a,b):\n\n  return a*b\/\/gcd(a,b)\n\n\n\nx = A[0]\n\nfor a in A[1:]:\n\n  x = lcm(x,a)\n\nx = x * pow(2,C-1)\n\n\n\nprint(((M \/\/ x + 1) \/\/ 2))","code_v0_loc":33,"code_v1_loc":32,"code_v0_num_chars":560,"code_v1_num_chars":533,"code_v0_no_empty_lines":"from fractions import gcd\n\nN, M = list(map(int, input().split()))\nA = list([int(x) for x in input().split()])\ncnt = [0 for _ in range(N)]\nfor i in range(N):\n    a = A[i]\n    while a % 2 == 0:\n        a = a \/\/ 2\n        cnt[i] += 1\nif max(cnt) > min(cnt):\n    print((0))\n    exit(0)\nC = max(cnt)\nA = list([x \/\/ pow(2, C) for x in A])\n\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while a % b > 0:\n        a, b = b, a % b\n    return b\n\n\ndef lcm(a, b):\n    return a * b \/\/ gcd(a, b)\n\n\nx = A[0]\nfor a in A[1:]:\n    x = lcm(x, a)\nx = x * pow(2, C - 1)\nprint(((M \/\/ x + 1) \/\/ 2))\n","code_v1_no_empty_lines":"N, M = list(map(int, input().split()))\nA = list([int(x) for x in input().split()])\ncnt = [0 for _ in range(N)]\nfor i in range(N):\n    a = A[i]\n    while a % 2 == 0:\n        a = a \/\/ 2\n        cnt[i] += 1\nif max(cnt) > min(cnt):\n    print((0))\n    exit(0)\nC = max(cnt)\nA = list([x \/\/ pow(2, C) for x in A])\n\n\ndef gcd(a, b):\n    if a < b:\n        a, b = b, a\n    while a % b > 0:\n        a, b = b, a % b\n    return b\n\n\ndef lcm(a, b):\n    return a * b \/\/ gcd(a, b)\n\n\nx = A[0]\nfor a in A[1:]:\n    x = lcm(x, a)\nx = x * pow(2, C - 1)\nprint(((M \/\/ x + 1) \/\/ 2))\n","code_same":false,"relative_loc_diff_percent":3.0303030303,"diff":["-from fractions import gcd","-"],"diff_only_import_comment":false,"measured_runtime_v0":0.2484916873,"measured_runtime_v1":0.192324806,"runtime_lift":1.2920417937,"key":["s285073705","s453740847"]}
{"user_id":"u027685417","problem_id":"p03038","language":"python","submission_id_v0":"s124992398","submission_id_v1":"s099446399","cpu_time_v0":678,"cpu_time_v1":544,"memory_v0":33104,"memory_v1":28888,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":19.76,"input":"from heapq import *\n\n\n\n\n\nn, m = list(map(int, input().split()))\n\nPAIRS = [[-a, -1] for a in map(int, input().split())]\n\nheapify(PAIRS)\n\n\n\nfor _ in range(m):\n\n    b, c = list(map(int, input().split()))\n\n    heappush(PAIRS, [-c, -b])\n\n\n\nanswer = 0\n\nfor _ in range(n):\n\n    pair = heappop(PAIRS)\n\n    answer += -pair[0]\n\n    pair[1] += 1\n\n    if pair[1] != 0:\n\n        heappush(PAIRS, pair)\n\n\n\nprint(answer)\n","target":"n, m = list(map(int, input().split()))\n\nPAIRS = [(a, 1) for a in map(int, input().split())]\n\n\n\nfor _ in range(m):\n\n    b, c = list(map(int, input().split()))\n\n    PAIRS.append((c, b))\n\nPAIRS.sort(reverse = True)\n\n\n\nanswer, count = 0, 0\n\nfor pair in PAIRS:\n\n    answer += pair[0] * pair[1]\n\n    count += pair[1]\n\n    if count > n:\n\n        answer -= pair[0] * (count - n)\n\n        break\n\n\n\nprint(answer)\n","code_v0_loc":20,"code_v1_loc":17,"code_v0_num_chars":393,"code_v1_num_chars":391,"code_v0_no_empty_lines":"from heapq import *\n\nn, m = list(map(int, input().split()))\nPAIRS = [[-a, -1] for a in map(int, input().split())]\nheapify(PAIRS)\nfor _ in range(m):\n    b, c = list(map(int, input().split()))\n    heappush(PAIRS, [-c, -b])\nanswer = 0\nfor _ in range(n):\n    pair = heappop(PAIRS)\n    answer += -pair[0]\n    pair[1] += 1\n    if pair[1] != 0:\n        heappush(PAIRS, pair)\nprint(answer)\n","code_v1_no_empty_lines":"n, m = list(map(int, input().split()))\nPAIRS = [(a, 1) for a in map(int, input().split())]\nfor _ in range(m):\n    b, c = list(map(int, input().split()))\n    PAIRS.append((c, b))\nPAIRS.sort(reverse=True)\nanswer, count = 0, 0\nfor pair in PAIRS:\n    answer += pair[0] * pair[1]\n    count += pair[1]\n    if count > n:\n        answer -= pair[0] * (count - n)\n        break\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":15.0,"diff":["-from heapq import *","-","-PAIRS = [[-a, -1] for a in map(int, input().split())]","-heapify(PAIRS)","+PAIRS = [(a, 1) for a in map(int, input().split())]","-    heappush(PAIRS, [-c, -b])","-answer = 0","-for _ in range(n):","-    pair = heappop(PAIRS)","-    answer += -pair[0]","-    pair[1] += 1","-    if pair[1] != 0:","-        heappush(PAIRS, pair)","+    PAIRS.append((c, b))","+PAIRS.sort(reverse=True)","+answer, count = 0, 0","+for pair in PAIRS:","+    answer += pair[0] * pair[1]","+    count += pair[1]","+    if count > n:","+        answer -= pair[0] * (count - n)","+        break"],"diff_only_import_comment":false,"measured_runtime_v0":0.2969929054,"measured_runtime_v1":0.0828762929,"runtime_lift":3.5835688928,"key":["s124992398","s099446399"]}
{"user_id":"u277448038","problem_id":"p04012","language":"python","submission_id_v0":"s508164374","submission_id_v1":"s917345627","cpu_time_v0":169,"cpu_time_v1":17,"memory_v0":13048,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":89.94,"input":"import numpy as np\n\nimport sys\n\nw = eval(input())\n\ncountn = np.zeros(26)\n\new = \"abcdefghijklmnopqrstuvwxyz\"\n\ni = 0\n\nwhile i < 26:\n\n    countn[i] = w.count(ew[i])\n\n    if countn[i] %2 != 0:\n\n        print(\"No\")\n\n        sys.exit()\n\n    i +=1\n\n  \n\nprint(\"Yes\")\n\n    \n\n    ","target":"#ABC044B\n\nw = eval(input())\n\nl = len(w)\n\nsig = 0\n\n\n\nfor i in range(l):\n\n    if w.count(w[i])%2 !=0:\n\n        sig = 1\n\n        break\n\n\n\nif sig == 1:\n\n    print(\"No\")\n\nelse:\n\n    print(\"Yes\")","code_v0_loc":16,"code_v1_loc":14,"code_v0_num_chars":264,"code_v1_num_chars":183,"code_v0_no_empty_lines":"import numpy as np\nimport sys\n\nw = eval(input())\ncountn = np.zeros(26)\new = \"abcdefghijklmnopqrstuvwxyz\"\ni = 0\nwhile i < 26:\n    countn[i] = w.count(ew[i])\n    if countn[i] % 2 != 0:\n        print(\"No\")\n        sys.exit()\n    i += 1\nprint(\"Yes\")\n","code_v1_no_empty_lines":"# ABC044B\nw = eval(input())\nl = len(w)\nsig = 0\nfor i in range(l):\n    if w.count(w[i]) % 2 != 0:\n        sig = 1\n        break\nif sig == 1:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-import numpy as np","-import sys","-","+# ABC044B","-countn = np.zeros(26)","-ew = \"abcdefghijklmnopqrstuvwxyz\"","-i = 0","-while i < 26:","-    countn[i] = w.count(ew[i])","-    if countn[i] % 2 != 0:","-        print(\"No\")","-        sys.exit()","-    i += 1","-print(\"Yes\")","+l = len(w)","+sig = 0","+for i in range(l):","+    if w.count(w[i]) % 2 != 0:","+        sig = 1","+        break","+if sig == 1:","+    print(\"No\")","+else:","+    print(\"Yes\")"],"diff_only_import_comment":false,"measured_runtime_v0":1.6324973707,"measured_runtime_v1":0.2494062472,"runtime_lift":6.5455352015,"key":["s508164374","s917345627"]}
{"user_id":"u803617136","problem_id":"p03796","language":"python","submission_id_v0":"s262574211","submission_id_v1":"s998310124","cpu_time_v0":230,"cpu_time_v1":37,"memory_v0":3980,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":83.91,"input":"import math\n\n\n\nn = int(eval(input()))\n\nans = math.factorial(n) % (pow(10, 9) + 7)\n\nprint(ans)","target":"n = int(eval(input()))\n\nans = 1\n\nmod = 10 ** 9 + 7\n\nfor i in range(1, n + 1):\n\n    ans = (ans * i % mod) % mod\n\nprint(ans)","code_v0_loc":5,"code_v1_loc":6,"code_v0_num_chars":87,"code_v1_num_chars":116,"code_v0_no_empty_lines":"import math\n\nn = int(eval(input()))\nans = math.factorial(n) % (pow(10, 9) + 7)\nprint(ans)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nans = 1\nmod = 10**9 + 7\nfor i in range(1, n + 1):\n    ans = (ans * i % mod) % mod\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":16.6666666667,"diff":["-import math","-","-ans = math.factorial(n) % (pow(10, 9) + 7)","+ans = 1","+mod = 10**9 + 7","+for i in range(1, n + 1):","+    ans = (ans * i % mod) % mod"],"diff_only_import_comment":false,"measured_runtime_v0":0.5572224624,"measured_runtime_v1":0.2586410534,"runtime_lift":2.154423882,"key":["s262574211","s998310124"]}
{"user_id":"u991567869","problem_id":"p02596","language":"python","submission_id_v0":"s146225899","submission_id_v1":"s204753661","cpu_time_v0":292,"cpu_time_v1":175,"memory_v0":9152,"memory_v1":9164,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":40.07,"input":"k = int(eval(input()))\n\nx = 1\n\n\n\nif k%7 != 0:\n\n    mod = 9*k\n\nelse:\n\n    mod = 9*k\/\/7\n\n\n\nfor i in range(10**6):\n\n    x = x*10%mod\n\n    if x == 1:\n\n        print((i + 1))\n\n        exit()\n\n\n\nprint((-1))","target":"k = int(eval(input()))\n\na = 0\n\n\n\nfor i in range(k + 10):\n\n    a = (a*10 + 7)%k\n\n    if a == 0:\n\n        print((i + 1))\n\n        exit()\n\nprint((-1))","code_v0_loc":15,"code_v1_loc":9,"code_v0_num_chars":190,"code_v1_num_chars":137,"code_v0_no_empty_lines":"k = int(eval(input()))\nx = 1\nif k % 7 != 0:\n    mod = 9 * k\nelse:\n    mod = 9 * k \/\/ 7\nfor i in range(10**6):\n    x = x * 10 % mod\n    if x == 1:\n        print((i + 1))\n        exit()\nprint((-1))\n","code_v1_no_empty_lines":"k = int(eval(input()))\na = 0\nfor i in range(k + 10):\n    a = (a * 10 + 7) % k\n    if a == 0:\n        print((i + 1))\n        exit()\nprint((-1))\n","code_same":false,"relative_loc_diff_percent":40.0,"diff":["-x = 1","-if k % 7 != 0:","-    mod = 9 * k","-else:","-    mod = 9 * k \/\/ 7","-for i in range(10**6):","-    x = x * 10 % mod","-    if x == 1:","+a = 0","+for i in range(k + 10):","+    a = (a * 10 + 7) % k","+    if a == 0:"],"diff_only_import_comment":false,"measured_runtime_v0":0.5332653046,"measured_runtime_v1":0.4200988929,"runtime_lift":1.2693804091,"key":["s146225899","s204753661"]}
{"user_id":"u562935282","problem_id":"p03200","language":"python","submission_id_v0":"s639682353","submission_id_v1":"s546135650","cpu_time_v0":48,"cpu_time_v1":43,"memory_v0":3500,"memory_v1":3500,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.42,"input":"s = eval(input())\n\n\n\ncnt = 0\n\nans = 0\n\nfor c in s:\n\n    if c == 'B':\n\n        cnt += 1\n\n    elif c == 'W':\n\n        ans += cnt\n\nprint(ans)\n","target":"s = eval(input())\n\n\n\nans = 0\n\nb = 0\n\nfor ss in s:\n\n    if ss == 'W':\n\n        ans += b\n\n    else:\n\n        b += 1\n\nprint(ans)\n","code_v0_loc":10,"code_v1_loc":10,"code_v0_num_chars":133,"code_v1_num_chars":120,"code_v0_no_empty_lines":"s = eval(input())\ncnt = 0\nans = 0\nfor c in s:\n    if c == \"B\":\n        cnt += 1\n    elif c == \"W\":\n        ans += cnt\nprint(ans)\n","code_v1_no_empty_lines":"s = eval(input())\nans = 0\nb = 0\nfor ss in s:\n    if ss == \"W\":\n        ans += b\n    else:\n        b += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-cnt = 0","-for c in s:","-    if c == \"B\":","-        cnt += 1","-    elif c == \"W\":","-        ans += cnt","+b = 0","+for ss in s:","+    if ss == \"W\":","+        ans += b","+    else:","+        b += 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.2094221431,"measured_runtime_v1":0.1051600281,"runtime_lift":1.9914614603,"key":["s639682353","s546135650"]}
{"user_id":"u744114948","problem_id":"p00053","language":"python","submission_id_v0":"s391855332","submission_id_v1":"s612183692","cpu_time_v0":660,"cpu_time_v1":70,"memory_v0":7228,"memory_v1":8024,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":89.39,"input":"import math\n\ndef pri(n):\n\n    if n < 2:\n\n        return False\n\n    elif n == 2:\n\n        return True\n\n    elif n % 2 == 0:\n\n        return False\n\n\n\n    i = 3\n\n    while i <= math.sqrt(n):\n\n        if n % i == 0:\n\n            return False\n\n        i += 2\n\n    return True\n\n\n\nl=[i for i in range(110000)if pri(i) ]\n\n\n\nwhile True:\n\n    n = int(eval(input()))\n\n    if n == 0: break\n\n    print((sum(l[:n])))","target":"import math\n\ndef pri(n):\n\n    l =[True] * n\n\n    l[0] = l[1] = False\n\n    for i in range(2,n):\n\n        if l[i]:\n\n            for j in range(i*2, n, i):\n\n                l[j] = False\n\n    return l\n\nn=105000\n\ns=pri(n)\n\nl=[i for i in range(n) if s[i]]\n\nwhile True:\n\n    n = int(eval(input()))\n\n    if n == 0: break\n\n    print((sum(l[:n])))","code_v0_loc":22,"code_v1_loc":16,"code_v0_num_chars":394,"code_v1_num_chars":329,"code_v0_no_empty_lines":"import math\n\n\ndef pri(n):\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    i = 3\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\n\nl = [i for i in range(110000) if pri(i)]\nwhile True:\n    n = int(eval(input()))\n    if n == 0:\n        break\n    print((sum(l[:n])))\n","code_v1_no_empty_lines":"import math\n\n\ndef pri(n):\n    l = [True] * n\n    l[0] = l[1] = False\n    for i in range(2, n):\n        if l[i]:\n            for j in range(i * 2, n, i):\n                l[j] = False\n    return l\n\n\nn = 105000\ns = pri(n)\nl = [i for i in range(n) if s[i]]\nwhile True:\n    n = int(eval(input()))\n    if n == 0:\n        break\n    print((sum(l[:n])))\n","code_same":false,"relative_loc_diff_percent":27.2727272727,"diff":["-    if n < 2:","-        return False","-    elif n == 2:","-        return True","-    elif n % 2 == 0:","-        return False","-    i = 3","-    while i <= math.sqrt(n):","-        if n % i == 0:","-            return False","-        i += 2","-    return True","+    l = [True] * n","+    l[0] = l[1] = False","+    for i in range(2, n):","+        if l[i]:","+            for j in range(i * 2, n, i):","+                l[j] = False","+    return l","-l = [i for i in range(110000) if pri(i)]","+n = 105000","+s = pri(n)","+l = [i for i in range(n) if s[i]]"],"diff_only_import_comment":false,"measured_runtime_v0":2.8203961465,"measured_runtime_v1":0.4705428715,"runtime_lift":5.9939196138,"key":["s391855332","s612183692"]}
{"user_id":"u133936772","problem_id":"p02988","language":"python","submission_id_v0":"s657683547","submission_id_v1":"s740427744","cpu_time_v0":19,"cpu_time_v1":17,"memory_v0":3316,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.53,"input":"n = int(eval(input()))\n\nl = list(map(int, input().split()))\n\nprint((sum(l[i]<l[i+1]<l[i+2] or l[i]>l[i+1]>l[i+2] for i in range(n-2))))","target":"n=int(eval(input()))\n\nl=list(map(int,input().split()))\n\na=0\n\nfor i in range(n-2):\n\n  p,q,r=l[i:i+3]\n\n  if p<q<r or r<q<p: a+=1\n\nprint(a)","code_v0_loc":3,"code_v1_loc":7,"code_v0_num_chars":127,"code_v1_num_chars":130,"code_v0_no_empty_lines":"n = int(eval(input()))\nl = list(map(int, input().split()))\nprint(\n    (\n        sum(\n            l[i] < l[i + 1] < l[i + 2] or l[i] > l[i + 1] > l[i + 2]\n            for i in range(n - 2)\n        )\n    )\n)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nl = list(map(int, input().split()))\na = 0\nfor i in range(n - 2):\n    p, q, r = l[i : i + 3]\n    if p < q < r or r < q < p:\n        a += 1\nprint(a)\n","code_same":false,"relative_loc_diff_percent":57.1428571429,"diff":["-print(","-    (","-        sum(","-            l[i] < l[i + 1] < l[i + 2] or l[i] > l[i + 1] > l[i + 2]","-            for i in range(n - 2)","-        )","-    )","-)","+a = 0","+for i in range(n - 2):","+    p, q, r = l[i : i + 3]","+    if p < q < r or r < q < p:","+        a += 1","+print(a)"],"diff_only_import_comment":false,"measured_runtime_v0":0.1639216754,"measured_runtime_v1":0.0058678908,"runtime_lift":27.9353658749,"key":["s657683547","s740427744"]}
{"user_id":"u729133443","problem_id":"p02661","language":"python","submission_id_v0":"s665964860","submission_id_v1":"s988833610","cpu_time_v0":854,"cpu_time_v1":417,"memory_v0":47316,"memory_v1":155828,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":51.17,"input":"from numpy import*\n\na,b=median(t:=loadtxt(open(0),skiprows=1),0)\n\nprint((int((a-b)*~(~len(t)%2))+1))","target":"from statistics import*\n\n(n,),*t=[list(map(int,t.split()))for t in open(0)]\n\na,b=list(map(median,list(zip(*t))))\n\nprint((int((b-a)*(2-n%2))+1))","code_v0_loc":3,"code_v1_loc":4,"code_v0_num_chars":98,"code_v1_num_chars":123,"code_v0_no_empty_lines":"from numpy import *\n\na, b = median(t := loadtxt(open(0), skiprows=1), 0)\nprint((int((a - b) * ~(~len(t) % 2)) + 1))\n","code_v1_no_empty_lines":"from statistics import *\n\n(n,), *t = [list(map(int, t.split())) for t in open(0)]\na, b = list(map(median, list(zip(*t))))\nprint((int((b - a) * (2 - n % 2)) + 1))\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-from numpy import *","+from statistics import *","-a, b = median(t := loadtxt(open(0), skiprows=1), 0)","-print((int((a - b) * ~(~len(t) % 2)) + 1))","+(n,), *t = [list(map(int, t.split())) for t in open(0)]","+a, b = list(map(median, list(zip(*t))))","+print((int((b - a) * (2 - n % 2)) + 1))"],"diff_only_import_comment":false,"measured_runtime_v0":2.1291211085,"measured_runtime_v1":0.4275847787,"runtime_lift":4.9794127725,"key":["s665964860","s988833610"]}
{"user_id":"u102461423","problem_id":"p04021","language":"python","submission_id_v0":"s472972485","submission_id_v1":"s043283938","cpu_time_v0":176,"cpu_time_v1":126,"memory_v0":18796,"memory_v1":21220,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":28.41,"input":"import sys\n\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\n\"\"\"\n\n\u5947\u6570\u756a\u76ee\u96c6\u5408\u3001\u5076\u6570\u756a\u76ee\u96c6\u5408\u306e\u4e2d\u3067\u81ea\u7531\u306b\u3067\u304d\u308b\u306e\u304c\u64cd\u4f5c2\uff0e\n\n\u64cd\u4f5c1\u3067\u96c6\u5408\u9593\u306e\u3084\u308a\u3068\u308a\u3092\u3059\u308b\n\n\"\"\"\n\n\n\nimport numpy as np\n\n\n\nN = int(eval(input()))\n\nA = np.fromstring(sys.stdin.read(),dtype=np.int64,sep='\\n')\n\n\n\nB = np.sort(A)\n\n\n\nanswer = len(np.setdiff1d(A[::2],B[::2]))\n\nprint(answer)","target":"import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\n\"\"\"\n\n\u30fb\u5076\u6570\u756a\u53f7\u3001\u5947\u6570\u756a\u53f7\u306e\u4e2d\u3067\u306f\u5165\u308c\u66ff\u3048\u653e\u984c\n\n\u30fb\u5076\u3001\u5947\u306e\u9593\uff1a\u4e26\u3079\u3066\u304b\u3089\u30b9\u30ef\u30c3\u30d7\u3002\u64cd\u4f5c2\u30921\u56de\u3067\u3001\u6b63\u3057\u3044\u3082\u306e\u30922\u3064\u5897\u3084\u305b\u308b\n\n\"\"\"\n\n\n\nN,*A = list(map(int,read().split()))\n\n\n\nx_to_i = {x:i for i,x in enumerate(sorted(A))}\n\nrank = [x_to_i[x] for x in A]\n\n\n\nanswer = sum((x^i) & 1 for i,x in enumerate(rank)) \/\/ 2\n\nprint(answer)","code_v0_loc":18,"code_v1_loc":17,"code_v0_num_chars":310,"code_v1_num_chars":380,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\n\"\"\"\n\u5947\u6570\u756a\u76ee\u96c6\u5408\u3001\u5076\u6570\u756a\u76ee\u96c6\u5408\u306e\u4e2d\u3067\u81ea\u7531\u306b\u3067\u304d\u308b\u306e\u304c\u64cd\u4f5c2\uff0e\n\u64cd\u4f5c1\u3067\u96c6\u5408\u9593\u306e\u3084\u308a\u3068\u308a\u3092\u3059\u308b\n\"\"\"\nimport numpy as np\n\nN = int(eval(input()))\nA = np.fromstring(sys.stdin.read(), dtype=np.int64, sep=\"\\n\")\nB = np.sort(A)\nanswer = len(np.setdiff1d(A[::2], B[::2]))\nprint(answer)\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\"\"\"\n\u30fb\u5076\u6570\u756a\u53f7\u3001\u5947\u6570\u756a\u53f7\u306e\u4e2d\u3067\u306f\u5165\u308c\u66ff\u3048\u653e\u984c\n\u30fb\u5076\u3001\u5947\u306e\u9593\uff1a\u4e26\u3079\u3066\u304b\u3089\u30b9\u30ef\u30c3\u30d7\u3002\u64cd\u4f5c2\u30921\u56de\u3067\u3001\u6b63\u3057\u3044\u3082\u306e\u30922\u3064\u5897\u3084\u305b\u308b\n\"\"\"\nN, *A = list(map(int, read().split()))\nx_to_i = {x: i for i, x in enumerate(sorted(A))}\nrank = [x_to_i[x] for x in A]\nanswer = sum((x ^ i) & 1 for i, x in enumerate(rank)) \/\/ 2\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":5.5555555556,"diff":["-input = sys.stdin.readline","-sys.setrecursionlimit(10**7)","+read = sys.stdin.buffer.read","+readline = sys.stdin.buffer.readline","+readlines = sys.stdin.buffer.readlines","-\u5947\u6570\u756a\u76ee\u96c6\u5408\u3001\u5076\u6570\u756a\u76ee\u96c6\u5408\u306e\u4e2d\u3067\u81ea\u7531\u306b\u3067\u304d\u308b\u306e\u304c\u64cd\u4f5c2\uff0e","-\u64cd\u4f5c1\u3067\u96c6\u5408\u9593\u306e\u3084\u308a\u3068\u308a\u3092\u3059\u308b","+\u30fb\u5076\u6570\u756a\u53f7\u3001\u5947\u6570\u756a\u53f7\u306e\u4e2d\u3067\u306f\u5165\u308c\u66ff\u3048\u653e\u984c","+\u30fb\u5076\u3001\u5947\u306e\u9593\uff1a\u4e26\u3079\u3066\u304b\u3089\u30b9\u30ef\u30c3\u30d7\u3002\u64cd\u4f5c2\u30921\u56de\u3067\u3001\u6b63\u3057\u3044\u3082\u306e\u30922\u3064\u5897\u3084\u305b\u308b","-import numpy as np","-","-N = int(eval(input()))","-A = np.fromstring(sys.stdin.read(), dtype=np.int64, sep=\"\\n\")","-B = np.sort(A)","-answer = len(np.setdiff1d(A[::2], B[::2]))","+N, *A = list(map(int, read().split()))","+x_to_i = {x: i for i, x in enumerate(sorted(A))}","+rank = [x_to_i[x] for x in A]","+answer = sum((x ^ i) & 1 for i, x in enumerate(rank)) \/\/ 2"],"diff_only_import_comment":false,"measured_runtime_v0":1.8491418537,"measured_runtime_v1":0.0781715259,"runtime_lift":23.6549284766,"key":["s472972485","s043283938"]}
{"user_id":"u379716238","problem_id":"p03494","language":"python","submission_id_v0":"s321227388","submission_id_v1":"s000982817","cpu_time_v0":155,"cpu_time_v1":19,"memory_v0":12448,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.74,"input":"import numpy as np\n\n\n\nx = int(eval(input()))\n\ny = input().split()\n\ny = [int(i) for i in y]\n\ny = np.array(y)\n\ncount = 0\n\nwhile sum([y[i] % 2 for i in range(len(y))]) == 0:\n\n    y = y\/2\n\n    count += 1\n\nprint(count)","target":"N = int(eval(input()))\n\nA = input().split()\n\nA = [int(i) for i in A]\n\n\n\nc = 0 \n\n\n\nwhile True:\n\n  exist_odd = False\n\n  for a in A:\n\n    if a % 2 != 0:\n\n      exist_odd = True\n\n    \n\n  if exist_odd: break\n\n\n\n  for i in range(N):\n\n    A[i] = A[i] \/ 2\n\n  \n\n  c = c + 1\n\nprint(c)","code_v0_loc":11,"code_v1_loc":19,"code_v0_num_chars":207,"code_v1_num_chars":268,"code_v0_no_empty_lines":"import numpy as np\n\nx = int(eval(input()))\ny = input().split()\ny = [int(i) for i in y]\ny = np.array(y)\ncount = 0\nwhile sum([y[i] % 2 for i in range(len(y))]) == 0:\n    y = y \/ 2\n    count += 1\nprint(count)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = input().split()\nA = [int(i) for i in A]\nc = 0\nwhile True:\n    exist_odd = False\n    for a in A:\n        if a % 2 != 0:\n            exist_odd = True\n    if exist_odd:\n        break\n    for i in range(N):\n        A[i] = A[i] \/ 2\n    c = c + 1\nprint(c)\n","code_same":false,"relative_loc_diff_percent":42.1052631579,"diff":["-import numpy as np","-","-x = int(eval(input()))","-y = input().split()","-y = [int(i) for i in y]","-y = np.array(y)","-count = 0","-while sum([y[i] % 2 for i in range(len(y))]) == 0:","-    y = y \/ 2","-    count += 1","-print(count)","+N = int(eval(input()))","+A = input().split()","+A = [int(i) for i in A]","+c = 0","+while True:","+    exist_odd = False","+    for a in A:","+        if a % 2 != 0:","+            exist_odd = True","+    if exist_odd:","+        break","+    for i in range(N):","+        A[i] = A[i] \/ 2","+    c = c + 1","+print(c)"],"diff_only_import_comment":false,"measured_runtime_v0":1.7057790201,"measured_runtime_v1":0.3239225752,"runtime_lift":5.2660084552,"key":["s321227388","s000982817"]}
{"user_id":"u813098295","problem_id":"p03363","language":"python","submission_id_v0":"s373502740","submission_id_v1":"s912924761","cpu_time_v0":217,"cpu_time_v1":194,"memory_v0":31620,"memory_v1":45788,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.6,"input":"N = int(input())\n\nA = list(map(int, input().split()))\n\n\n\nans, s = 0, 0\n\nd = {0:1}\n\n\n\nfor i in A:\n\n    s += i\n\n    ans += d.get(s, 0)\n\n    d[s] = d.get(s, 0) + 1\n\n\n\nprint(ans)","target":"#!\/usr\/bin\/env python3\n\n\n\nfrom collections import defaultdict\n\n\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n\n\nd = defaultdict(int)\n\nd[0] = 1\n\n\n\ns, ans = 0, 0\n\n\n\nfor a in A:\n\n    s += a\n\n    ans += d[s]\n\n    d[s] += 1\n\n\n\nprint (ans)","code_v0_loc":12,"code_v1_loc":18,"code_v0_num_chars":175,"code_v1_num_chars":237,"code_v0_no_empty_lines":"N = int(input())\nA = list(map(int, input().split()))\nans, s = 0, 0\nd = {0: 1}\nfor i in A:\n    s += i\n    ans += d.get(s, 0)\n    d[s] = d.get(s, 0) + 1\nprint(ans)\n","code_v1_no_empty_lines":"#!\/usr\/bin\/env python3\nfrom collections import defaultdict\n\nN = int(eval(input()))\nA = list(map(int, input().split()))\nd = defaultdict(int)\nd[0] = 1\ns, ans = 0, 0\nfor a in A:\n    s += a\n    ans += d[s]\n    d[s] += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-N = int(input())","+#!\/usr\/bin\/env python3","+from collections import defaultdict","+","+N = int(eval(input()))","-ans, s = 0, 0","-d = {0: 1}","-for i in A:","-    s += i","-    ans += d.get(s, 0)","-    d[s] = d.get(s, 0) + 1","+d = defaultdict(int)","+d[0] = 1","+s, ans = 0, 0","+for a in A:","+    s += a","+    ans += d[s]","+    d[s] += 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.2992557037,"measured_runtime_v1":0.2235582159,"runtime_lift":1.3386030235,"key":["s373502740","s912924761"]}
{"user_id":"u625963200","problem_id":"p03162","language":"python","submission_id_v0":"s320395863","submission_id_v1":"s758503304","cpu_time_v0":1881,"cpu_time_v1":1669,"memory_v0":41792,"memory_v1":43596,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.27,"input":"import numpy as np\n\nn=int(eval(input()))\n\nABC=[list(map(int,input().split())) for _ in range(n)]\n\n\n\ndp=np.zeros((n,3),int)\n\nfor i in range(3):\n\n  dp[0][i]=ABC[0][i]\n\nfor i in range(n-1):\n\n  for j in range(3):\n\n    dp[i+1][j]=max(dp[i][(j+1)%3]+ABC[i+1][j], dp[i][(j+2)%3]+ABC[i+1][j])\n\nprint((max(dp[-1])))","target":"import numpy as np\n\nn=int(eval(input()))\n\nABC=[list(map(int,input().split())) for _ in range(n)]\n\n\n\ndp=np.zeros((n,3),int)\n\nfor i in range(3):\n\n  dp[0,i]=ABC[0][i]\n\nfor i in range(1,n):\n\n  for j in range(3):\n\n    dp[i,j]=max(dp[i-1,(j+1)%3]+ABC[i][j],dp[i-1,(j+2)%3]+ABC[i][j])\n\nprint((max(dp[-1])))","code_v0_loc":11,"code_v1_loc":11,"code_v0_num_chars":298,"code_v1_num_chars":291,"code_v0_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\nABC = [list(map(int, input().split())) for _ in range(n)]\ndp = np.zeros((n, 3), int)\nfor i in range(3):\n    dp[0][i] = ABC[0][i]\nfor i in range(n - 1):\n    for j in range(3):\n        dp[i + 1][j] = max(\n            dp[i][(j + 1) % 3] + ABC[i + 1][j], dp[i][(j + 2) % 3] + ABC[i + 1][j]\n        )\nprint((max(dp[-1])))\n","code_v1_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\nABC = [list(map(int, input().split())) for _ in range(n)]\ndp = np.zeros((n, 3), int)\nfor i in range(3):\n    dp[0, i] = ABC[0][i]\nfor i in range(1, n):\n    for j in range(3):\n        dp[i, j] = max(\n            dp[i - 1, (j + 1) % 3] + ABC[i][j], dp[i - 1, (j + 2) % 3] + ABC[i][j]\n        )\nprint((max(dp[-1])))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    dp[0][i] = ABC[0][i]","-for i in range(n - 1):","+    dp[0, i] = ABC[0][i]","+for i in range(1, n):","-        dp[i + 1][j] = max(","-            dp[i][(j + 1) % 3] + ABC[i + 1][j], dp[i][(j + 2) % 3] + ABC[i + 1][j]","+        dp[i, j] = max(","+            dp[i - 1, (j + 1) % 3] + ABC[i][j], dp[i - 1, (j + 2) % 3] + ABC[i][j]"],"diff_only_import_comment":false,"measured_runtime_v0":1.5948334725,"measured_runtime_v1":0.0064303148,"runtime_lift":248.0179469827,"key":["s320395863","s758503304"]}
{"user_id":"u120865944","problem_id":"p03162","language":"python","submission_id_v0":"s595235842","submission_id_v1":"s886147212","cpu_time_v0":1019,"cpu_time_v1":680,"memory_v0":47328,"memory_v1":59484,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":33.27,"input":"N = int(eval(input()))\n\nl = [list(map(int, input().split())) for _ in range(N)]\n\n\n\ndp = [[0 for i in range(3)] for j in range(N+1)]\n\n\n\n\n\nfor i in range(1, N+1):\n\n    for j in range(3):\n\n        for k in range(3):\n\n            if j != k:\n\n                dp[i][j] = max(dp[i][j], dp[i-1][k]+l[i-1][k])\n\n\n\nprint((max(dp[N][0], dp[N][1], dp[N][2])))\n\n\n","target":"N = int(eval(input()))\n\ndp = [[0 for i in range(3)] for j in range(N+1)]\n\n\n\nfor i in range(1, N+1):\n\n    hapiness = list(map(int, input().split()))\n\n    for j in range(3):\n\n        for k in range(3):\n\n            if j != k:\n\n                dp[i][j] = max(dp[i][j], dp[i-1][k] + hapiness[k])\n\n\n\nprint((max(dp[N][0], dp[N][1], dp[N][2])))","code_v0_loc":14,"code_v1_loc":11,"code_v0_num_chars":341,"code_v1_num_chars":329,"code_v0_no_empty_lines":"N = int(eval(input()))\nl = [list(map(int, input().split())) for _ in range(N)]\ndp = [[0 for i in range(3)] for j in range(N + 1)]\nfor i in range(1, N + 1):\n    for j in range(3):\n        for k in range(3):\n            if j != k:\n                dp[i][j] = max(dp[i][j], dp[i - 1][k] + l[i - 1][k])\nprint((max(dp[N][0], dp[N][1], dp[N][2])))\n","code_v1_no_empty_lines":"N = int(eval(input()))\ndp = [[0 for i in range(3)] for j in range(N + 1)]\nfor i in range(1, N + 1):\n    hapiness = list(map(int, input().split()))\n    for j in range(3):\n        for k in range(3):\n            if j != k:\n                dp[i][j] = max(dp[i][j], dp[i - 1][k] + hapiness[k])\nprint((max(dp[N][0], dp[N][1], dp[N][2])))\n","code_same":false,"relative_loc_diff_percent":21.4285714286,"diff":["-l = [list(map(int, input().split())) for _ in range(N)]","+    hapiness = list(map(int, input().split()))","-                dp[i][j] = max(dp[i][j], dp[i - 1][k] + l[i - 1][k])","+                dp[i][j] = max(dp[i][j], dp[i - 1][k] + hapiness[k])"],"diff_only_import_comment":false,"measured_runtime_v0":0.267745409,"measured_runtime_v1":0.0801038151,"runtime_lift":3.3424801143,"key":["s595235842","s886147212"]}
{"user_id":"u394731058","problem_id":"p02899","language":"python","submission_id_v0":"s948462743","submission_id_v1":"s673167226","cpu_time_v0":210,"cpu_time_v1":76,"memory_v0":13304,"memory_v1":17740,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":63.81,"input":"import sys\n\n\n\ninput = sys.stdin.readline\n\n\n\ndef main():\n\n    ans = 0\n\n    n = int(input())\n\n    o = list(map(int, input().split()))\n\n    l = [0]*n\n\n    for i in range(n):\n\n        l[o[i]-1] = i+1\n\n    for i in range(len(l)):\n\n        if  i != len(l)-1:\n\n            print(\"{} \".format(l[i]), end='')\n\n        else:\n\n            print(l[i])\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"import sys\n\n\n\ninput = sys.stdin.readline\n\n\n\ndef main():\n\n    ans = 0\n\n    n = int(eval(input()))\n\n    o = list(map(int, input().split()))\n\n    l = [0]*n\n\n    for i in range(n):\n\n        l[o[i]-1] = i+1\n\n    print((\" \".join(map(str,l))))\n\nif __name__ == '__main__':\n\n    main()","code_v0_loc":19,"code_v1_loc":14,"code_v0_num_chars":381,"code_v1_num_chars":268,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\n\n\ndef main():\n    ans = 0\n    n = int(input())\n    o = list(map(int, input().split()))\n    l = [0] * n\n    for i in range(n):\n        l[o[i] - 1] = i + 1\n    for i in range(len(l)):\n        if i != len(l) - 1:\n            print(\"{} \".format(l[i]), end=\"\")\n        else:\n            print(l[i])\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\n\n\ndef main():\n    ans = 0\n    n = int(eval(input()))\n    o = list(map(int, input().split()))\n    l = [0] * n\n    for i in range(n):\n        l[o[i] - 1] = i + 1\n    print((\" \".join(map(str, l))))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":26.3157894737,"diff":["-    n = int(input())","+    n = int(eval(input()))","-    for i in range(len(l)):","-        if i != len(l) - 1:","-            print(\"{} \".format(l[i]), end=\"\")","-        else:","-            print(l[i])","+    print((\" \".join(map(str, l))))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3305146998,"measured_runtime_v1":0.2638847903,"runtime_lift":1.2524962104,"key":["s948462743","s673167226"]}
{"user_id":"u531220228","problem_id":"p02994","language":"python","submission_id_v0":"s512634929","submission_id_v1":"s713379557","cpu_time_v0":19,"cpu_time_v1":17,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.53,"input":"N,L = list(map(int, input().split()))\n\ntaste = [L+i-1 for i in range(1,N+1)]\n\nif taste[-1] < 0:\n\n  print((sum(taste) + min([abs(x) for x in taste])))\n\nelse:\n\n  print((sum(taste) - min([abs(x) for x in taste])))","target":"N, L = list(map(int, input().split()))\n\n\n\ntaste = [L+i-1 for i in range(1, N+1)]\n\n\n\nif 0 in taste:\n\n    select = 0\n\nelse:\n\n    select_with_ind = min(enumerate(taste), key = lambda x: abs(x[1]))\n\n    select = select_with_ind[1]\n\n    \n\nprint((sum(taste) - select))","code_v0_loc":6,"code_v1_loc":11,"code_v0_num_chars":200,"code_v1_num_chars":254,"code_v0_no_empty_lines":"N, L = list(map(int, input().split()))\ntaste = [L + i - 1 for i in range(1, N + 1)]\nif taste[-1] < 0:\n    print((sum(taste) + min([abs(x) for x in taste])))\nelse:\n    print((sum(taste) - min([abs(x) for x in taste])))\n","code_v1_no_empty_lines":"N, L = list(map(int, input().split()))\ntaste = [L + i - 1 for i in range(1, N + 1)]\nif 0 in taste:\n    select = 0\nelse:\n    select_with_ind = min(enumerate(taste), key=lambda x: abs(x[1]))\n    select = select_with_ind[1]\nprint((sum(taste) - select))\n","code_same":false,"relative_loc_diff_percent":45.4545454545,"diff":["-if taste[-1] < 0:","-    print((sum(taste) + min([abs(x) for x in taste])))","+if 0 in taste:","+    select = 0","-    print((sum(taste) - min([abs(x) for x in taste])))","+    select_with_ind = min(enumerate(taste), key=lambda x: abs(x[1]))","+    select = select_with_ind[1]","+print((sum(taste) - select))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3334629779,"measured_runtime_v1":0.1486533701,"runtime_lift":2.2432251455,"key":["s512634929","s713379557"]}
{"user_id":"u077291787","problem_id":"p03416","language":"python","submission_id_v0":"s642708796","submission_id_v1":"s868202811","cpu_time_v0":245,"cpu_time_v1":42,"memory_v0":40940,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":82.86,"input":"# ABC090B - Palindromic Numbers\n\na, b = list(map(int, input().rstrip().split()))\n\ncount = 0\n\nfor i in range(a, b + 1):\n\n    lst = list(map(int, list(str(i))))\n\n    if lst[0] == lst[4] and lst[1] == lst[3]:\n\n        count += 1\n\nprint(count)","target":"# ABC090B - Palindromic Numbers\n\ndef main():\n\n    a, b = list(map(int, input().rstrip().split()))\n\n    cnt = 0\n\n    for i in range(a, b + 1):\n\n        s = str(i)\n\n        if s == s[::-1]:\n\n            cnt += 1\n\n    print(cnt)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()","code_v0_loc":8,"code_v1_loc":13,"code_v0_num_chars":239,"code_v1_num_chars":269,"code_v0_no_empty_lines":"# ABC090B - Palindromic Numbers\na, b = list(map(int, input().rstrip().split()))\ncount = 0\nfor i in range(a, b + 1):\n    lst = list(map(int, list(str(i))))\n    if lst[0] == lst[4] and lst[1] == lst[3]:\n        count += 1\nprint(count)\n","code_v1_no_empty_lines":"# ABC090B - Palindromic Numbers\ndef main():\n    a, b = list(map(int, input().rstrip().split()))\n    cnt = 0\n    for i in range(a, b + 1):\n        s = str(i)\n        if s == s[::-1]:\n            cnt += 1\n    print(cnt)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":38.4615384615,"diff":["-a, b = list(map(int, input().rstrip().split()))","-count = 0","-for i in range(a, b + 1):","-    lst = list(map(int, list(str(i))))","-    if lst[0] == lst[4] and lst[1] == lst[3]:","-        count += 1","-print(count)","+def main():","+    a, b = list(map(int, input().rstrip().split()))","+    cnt = 0","+    for i in range(a, b + 1):","+        s = str(i)","+        if s == s[::-1]:","+            cnt += 1","+    print(cnt)","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.3956292481,"measured_runtime_v1":0.2484657222,"runtime_lift":1.5922890477,"key":["s642708796","s868202811"]}
{"user_id":"u977389981","problem_id":"p03720","language":"python","submission_id_v0":"s310815601","submission_id_v1":"s089084009","cpu_time_v0":25,"cpu_time_v1":17,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":32.0,"input":"n, m = list(map(int, input().split()))\n\ndp = [0] * n\n\nfor i in range(m):\n\n    x, y = list(map(int, input().split()))\n\n    dp[x - 1] += 1\n\n    dp[y - 1] += 1\n\nfor i in range(n):\n\n    print((dp[i]))","target":"n, m = list(map(int, input().split()))\n\nA = [0] * n\n\nfor i in range(m):\n\n    a, b = list(map(int, input().split()))\n\n    A[a - 1] += 1\n\n    A[b - 1] += 1\n\n    \n\nfor i in range(n):\n\n    print((A[i]))","code_v0_loc":8,"code_v1_loc":9,"code_v0_num_chars":182,"code_v1_num_chars":184,"code_v0_no_empty_lines":"n, m = list(map(int, input().split()))\ndp = [0] * n\nfor i in range(m):\n    x, y = list(map(int, input().split()))\n    dp[x - 1] += 1\n    dp[y - 1] += 1\nfor i in range(n):\n    print((dp[i]))\n","code_v1_no_empty_lines":"n, m = list(map(int, input().split()))\nA = [0] * n\nfor i in range(m):\n    a, b = list(map(int, input().split()))\n    A[a - 1] += 1\n    A[b - 1] += 1\nfor i in range(n):\n    print((A[i]))\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["-dp = [0] * n","+A = [0] * n","-    x, y = list(map(int, input().split()))","-    dp[x - 1] += 1","-    dp[y - 1] += 1","+    a, b = list(map(int, input().split()))","+    A[a - 1] += 1","+    A[b - 1] += 1","-    print((dp[i]))","+    print((A[i]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2766861832,"measured_runtime_v1":0.17692909,"runtime_lift":1.5638252769,"key":["s310815601","s089084009"]}
{"user_id":"u440566786","problem_id":"p03558","language":"python","submission_id_v0":"s333680155","submission_id_v1":"s106353030","cpu_time_v0":260,"cpu_time_v1":131,"memory_v0":62004,"memory_v1":79416,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":49.62,"input":"import sys\n\nsys.setrecursionlimit(2147483647)\n\nINF=float(\"inf\")\n\nMOD=10**9+7\n\ninput=lambda :sys.stdin.readline().rstrip()\n\n\n\nfrom collections import deque\n\ndef resolve():\n\n    k=int(eval(input()))\n\n    E=[[] for _ in range(k)]\n\n    for i in range(k):\n\n        E[i].append(((i+1)%k,1))\n\n        E[i].append(((10*i)%k,0))\n\n\n\n    # 0-1 BFS\n\n    dist=[INF]*k\n\n    dist[1]=0\n\n    Q=deque([1])\n\n    while(Q):\n\n        v=Q.popleft()\n\n        for nv,w in E[v]:\n\n            if(dist[nv]<=dist[v]+w): continue\n\n            dist[nv]=dist[v]+w\n\n            if(w==0): Q.appendleft(nv)\n\n            else: Q.append(nv)\n\n    print((dist[0]+1))\n\nresolve()","target":"import sys\n\nINF = 1 << 60\n\nMOD = 10**9 + 7 # 998244353\n\nsys.setrecursionlimit(2147483647)\n\ninput = lambda:sys.stdin.readline().rstrip()\n\nfrom collections import deque\n\ndef resolve():\n\n    k = int(eval(input()))\n\n    dist = [INF] * k\n\n    dist[1] = 1\n\n    queue = deque([1])\n\n\n\n    while queue:\n\n        v = queue.pop()\n\n        if dist[10 * v % k] > dist[v]:\n\n            dist[10 * v % k] = dist[v]\n\n            queue.appendleft(10 * v % k)\n\n        if dist[(v + 1) % k] > dist[v] + 1:\n\n            dist[(v + 1) % k] = dist[v] + 1\n\n            queue.append((v + 1) % k)\n\n\n\n    print((dist[0]))\n\nresolve()","code_v0_loc":27,"code_v1_loc":23,"code_v0_num_chars":630,"code_v1_num_chars":596,"code_v0_no_empty_lines":"import sys\n\nsys.setrecursionlimit(2147483647)\nINF = float(\"inf\")\nMOD = 10**9 + 7\ninput = lambda: sys.stdin.readline().rstrip()\nfrom collections import deque\n\n\ndef resolve():\n    k = int(eval(input()))\n    E = [[] for _ in range(k)]\n    for i in range(k):\n        E[i].append(((i + 1) % k, 1))\n        E[i].append(((10 * i) % k, 0))\n    # 0-1 BFS\n    dist = [INF] * k\n    dist[1] = 0\n    Q = deque([1])\n    while Q:\n        v = Q.popleft()\n        for nv, w in E[v]:\n            if dist[nv] <= dist[v] + w:\n                continue\n            dist[nv] = dist[v] + w\n            if w == 0:\n                Q.appendleft(nv)\n            else:\n                Q.append(nv)\n    print((dist[0] + 1))\n\n\nresolve()\n","code_v1_no_empty_lines":"import sys\n\nINF = 1 << 60\nMOD = 10**9 + 7  # 998244353\nsys.setrecursionlimit(2147483647)\ninput = lambda: sys.stdin.readline().rstrip()\nfrom collections import deque\n\n\ndef resolve():\n    k = int(eval(input()))\n    dist = [INF] * k\n    dist[1] = 1\n    queue = deque([1])\n    while queue:\n        v = queue.pop()\n        if dist[10 * v % k] > dist[v]:\n            dist[10 * v % k] = dist[v]\n            queue.appendleft(10 * v % k)\n        if dist[(v + 1) % k] > dist[v] + 1:\n            dist[(v + 1) % k] = dist[v] + 1\n            queue.append((v + 1) % k)\n    print((dist[0]))\n\n\nresolve()\n","code_same":false,"relative_loc_diff_percent":14.8148148148,"diff":["+INF = 1 << 60","+MOD = 10**9 + 7  # 998244353","-INF = float(\"inf\")","-MOD = 10**9 + 7","-    E = [[] for _ in range(k)]","-    for i in range(k):","-        E[i].append(((i + 1) % k, 1))","-        E[i].append(((10 * i) % k, 0))","-    # 0-1 BFS","-    dist[1] = 0","-    Q = deque([1])","-    while Q:","-        v = Q.popleft()","-        for nv, w in E[v]:","-            if dist[nv] <= dist[v] + w:","-                continue","-            dist[nv] = dist[v] + w","-            if w == 0:","-                Q.appendleft(nv)","-            else:","-                Q.append(nv)","-    print((dist[0] + 1))","+    dist[1] = 1","+    queue = deque([1])","+    while queue:","+        v = queue.pop()","+        if dist[10 * v % k] > dist[v]:","+            dist[10 * v % k] = dist[v]","+            queue.appendleft(10 * v % k)","+        if dist[(v + 1) % k] > dist[v] + 1:","+            dist[(v + 1) % k] = dist[v] + 1","+            queue.append((v + 1) % k)","+    print((dist[0]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.412358222,"measured_runtime_v1":0.3278088195,"runtime_lift":1.2579229033,"key":["s333680155","s106353030"]}
{"user_id":"u171065106","problem_id":"p03796","language":"python","submission_id_v0":"s258128729","submission_id_v1":"s727911974","cpu_time_v0":230,"cpu_time_v1":43,"memory_v0":3976,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":81.3,"input":"import math\n\n\n\nn = int(eval(input()))\n\n\n\nprint((math.factorial(n) % (10**9 + 7)))\n","target":"n = int(eval(input()))\n\n\n\nans = 1\n\n\n\nfor i in range(1, n+1):\n\n    ans *= i\n\n    ans %= 10**9 + 7\n\n\n\nprint(ans)\n","code_v0_loc":5,"code_v1_loc":9,"code_v0_num_chars":74,"code_v1_num_chars":105,"code_v0_no_empty_lines":"import math\n\nn = int(eval(input()))\nprint((math.factorial(n) % (10**9 + 7)))\n","code_v1_no_empty_lines":"n = int(eval(input()))\nans = 1\nfor i in range(1, n + 1):\n    ans *= i\n    ans %= 10**9 + 7\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":44.4444444444,"diff":["-import math","-","-print((math.factorial(n) % (10**9 + 7)))","+ans = 1","+for i in range(1, n + 1):","+    ans *= i","+    ans %= 10**9 + 7","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.6649877462,"measured_runtime_v1":0.4034042664,"runtime_lift":1.6484400431,"key":["s258128729","s727911974"]}
{"user_id":"u761320129","problem_id":"p03839","language":"python","submission_id_v0":"s934844992","submission_id_v1":"s135860240","cpu_time_v0":205,"cpu_time_v1":174,"memory_v0":17404,"memory_v1":17532,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.12,"input":"N,K = list(map(int,input().split()))\n\nsrc = list(map(int,input().split()))\n\n\n\ncums = [0]\n\ncump = [0]\n\nfor a in src:\n\n    cums.append(cums[-1] + a)\n\n    cump.append(cump[-1] + max(0,a))\n\n\n\nans = 0\n\nfor i in range(N-K+1):\n\n    tmp = cump[i]\n\n    tmp += max(0, cums[i+K] - cums[i])\n\n    tmp += cump[N] - cump[i+K]\n\n    ans = max(tmp, ans)\n\nprint(ans)\n","target":"N,K = list(map(int,input().split()))\n\nA = list(map(int,input().split()))\n\n\n\ncums = [0]\n\ncums_p = [0]\n\nfor a in A:\n\n    cums.append(cums[-1] + a)\n\n    cums_p.append(cums_p[-1] + max(0,a))\n\n\n\nans = -float('inf')\n\nfor l in range(N-K+1):\n\n    free = cums_p[l] + cums_p[-1] - cums_p[l+K]\n\n    cont = cums[l+K] - cums[l]\n\n    ans = max(ans, free, free+cont)\n\nprint(ans)","code_v0_loc":16,"code_v1_loc":15,"code_v0_num_chars":342,"code_v1_num_chars":357,"code_v0_no_empty_lines":"N, K = list(map(int, input().split()))\nsrc = list(map(int, input().split()))\ncums = [0]\ncump = [0]\nfor a in src:\n    cums.append(cums[-1] + a)\n    cump.append(cump[-1] + max(0, a))\nans = 0\nfor i in range(N - K + 1):\n    tmp = cump[i]\n    tmp += max(0, cums[i + K] - cums[i])\n    tmp += cump[N] - cump[i + K]\n    ans = max(tmp, ans)\nprint(ans)\n","code_v1_no_empty_lines":"N, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\ncums = [0]\ncums_p = [0]\nfor a in A:\n    cums.append(cums[-1] + a)\n    cums_p.append(cums_p[-1] + max(0, a))\nans = -float(\"inf\")\nfor l in range(N - K + 1):\n    free = cums_p[l] + cums_p[-1] - cums_p[l + K]\n    cont = cums[l + K] - cums[l]\n    ans = max(ans, free, free + cont)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":6.25,"diff":["-src = list(map(int, input().split()))","+A = list(map(int, input().split()))","-cump = [0]","-for a in src:","+cums_p = [0]","+for a in A:","-    cump.append(cump[-1] + max(0, a))","-ans = 0","-for i in range(N - K + 1):","-    tmp = cump[i]","-    tmp += max(0, cums[i + K] - cums[i])","-    tmp += cump[N] - cump[i + K]","-    ans = max(tmp, ans)","+    cums_p.append(cums_p[-1] + max(0, a))","+ans = -float(\"inf\")","+for l in range(N - K + 1):","+    free = cums_p[l] + cums_p[-1] - cums_p[l + K]","+    cont = cums[l + K] - cums[l]","+    ans = max(ans, free, free + cont)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3907449563,"measured_runtime_v1":0.3033102551,"runtime_lift":1.2882681998,"key":["s934844992","s135860240"]}
{"user_id":"u488127128","problem_id":"p03796","language":"python","submission_id_v0":"s637972642","submission_id_v1":"s581563839","cpu_time_v0":32,"cpu_time_v1":28,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":12.5,"input":"def factorial(N):\n\n    power_r = 1\n\n    for n in range(2,N+1):\n\n        power_r *= n\n\n        power_r %= 10**9+7\n\n    return power_r\n\n\n\nif __name__ == '__main__':\n\n    N = int(eval(input()))\n\n    print((factorial(N)))","target":"def factorial(N):\n\n    power_r = 1\n\n    for n in range(2,N+1):\n\n        power_r = power_r*n % (10**9+7)\n\n    return power_r\n\n\n\nif __name__ == '__main__':\n\n    N = int(eval(input()))\n\n    print((factorial(N)))","code_v0_loc":10,"code_v1_loc":9,"code_v0_num_chars":209,"code_v1_num_chars":200,"code_v0_no_empty_lines":"def factorial(N):\n    power_r = 1\n    for n in range(2, N + 1):\n        power_r *= n\n        power_r %= 10**9 + 7\n    return power_r\n\n\nif __name__ == \"__main__\":\n    N = int(eval(input()))\n    print((factorial(N)))\n","code_v1_no_empty_lines":"def factorial(N):\n    power_r = 1\n    for n in range(2, N + 1):\n        power_r = power_r * n % (10**9 + 7)\n    return power_r\n\n\nif __name__ == \"__main__\":\n    N = int(eval(input()))\n    print((factorial(N)))\n","code_same":false,"relative_loc_diff_percent":10.0,"diff":["-        power_r *= n","-        power_r %= 10**9 + 7","+        power_r = power_r * n % (10**9 + 7)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3227770622,"measured_runtime_v1":0.2497183731,"runtime_lift":1.2925643324,"key":["s637972642","s581563839"]}
{"user_id":"u189479417","problem_id":"p02596","language":"python","submission_id_v0":"s892012548","submission_id_v1":"s295850055","cpu_time_v0":350,"cpu_time_v1":211,"memory_v0":9176,"memory_v1":9188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":39.71,"input":"import sys\n\nK = int(eval(input()))\n\n\n\npower = 7\n\nSUM = 0\n\n\n\nfor i in range(1, 10 ** 6):\n\n    SUM += power\n\n    if SUM % K == 0:\n\n        print(i)\n\n        sys.exit()\n\n    power *= 10\n\n    power %= K\n\n\n\nprint((-1))","target":"import sys\n\nK = int(eval(input()))\n\n\n\nL = 9 * K\n\n\n\nif K % 7 == 0:\n\n    L \/\/= 7\n\n\n\npower = 1\n\n\n\nfor i in range(1, 10 ** 6):\n\n    power *= 10\n\n    power %= L\n\n    if power == 1:\n\n        print(i)\n\n        sys.exit()\n\n\n\nprint((-1))","code_v0_loc":15,"code_v1_loc":18,"code_v0_num_chars":205,"code_v1_num_chars":220,"code_v0_no_empty_lines":"import sys\n\nK = int(eval(input()))\npower = 7\nSUM = 0\nfor i in range(1, 10**6):\n    SUM += power\n    if SUM % K == 0:\n        print(i)\n        sys.exit()\n    power *= 10\n    power %= K\nprint((-1))\n","code_v1_no_empty_lines":"import sys\n\nK = int(eval(input()))\nL = 9 * K\nif K % 7 == 0:\n    L \/\/= 7\npower = 1\nfor i in range(1, 10**6):\n    power *= 10\n    power %= L\n    if power == 1:\n        print(i)\n        sys.exit()\nprint((-1))\n","code_same":false,"relative_loc_diff_percent":16.6666666667,"diff":["-power = 7","-SUM = 0","+L = 9 * K","+if K % 7 == 0:","+    L \/\/= 7","+power = 1","-    SUM += power","-    if SUM % K == 0:","+    power *= 10","+    power %= L","+    if power == 1:","-    power *= 10","-    power %= K"],"diff_only_import_comment":false,"measured_runtime_v0":0.9885553987,"measured_runtime_v1":0.6379526145,"runtime_lift":1.5495749624,"key":["s892012548","s295850055"]}
{"user_id":"u581187895","problem_id":"p02780","language":"python","submission_id_v0":"s723376959","submission_id_v1":"s506730917","cpu_time_v0":187,"cpu_time_v1":105,"memory_v0":23344,"memory_v1":25116,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":43.85,"input":"import numpy as np\n\nimport sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nN, K = list(map(int, readline().split()))\n\nA = np.array(readline().split(), dtype=np.int64) + 1\n\n\n\n\n\nAcum = np.zeros(N+1, np.float64)\n\nAcum[1:] = A.cumsum()\n\n\n\nx = Acum[K:] - Acum[:-K]\n\nprint((x.max()\/2))\n","target":"import sys\n\nsys.setrecursionlimit(10 ** 7)\n\nread = sys.stdin.buffer.read \n\ninput = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines  \n\n\n\nfrom itertools import accumulate\n\n\n\nN, K = list(map(int, input().split()))\n\nP = list(map(int, input().split()))\n\nPcum = list(accumulate([0] + [(1+p)\/2 for p in P]))\n\n\n\nans = max(right - left for left, right in zip(Pcum, Pcum[K:]))\n\nprint(ans)  ","code_v0_loc":15,"code_v1_loc":14,"code_v0_num_chars":339,"code_v1_num_chars":392,"code_v0_no_empty_lines":"import numpy as np\nimport sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nN, K = list(map(int, readline().split()))\nA = np.array(readline().split(), dtype=np.int64) + 1\nAcum = np.zeros(N + 1, np.float64)\nAcum[1:] = A.cumsum()\nx = Acum[K:] - Acum[:-K]\nprint((x.max() \/ 2))\n","code_v1_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10**7)\nread = sys.stdin.buffer.read\ninput = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nfrom itertools import accumulate\n\nN, K = list(map(int, input().split()))\nP = list(map(int, input().split()))\nPcum = list(accumulate([0] + [(1 + p) \/ 2 for p in P]))\nans = max(right - left for left, right in zip(Pcum, Pcum[K:]))\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":6.6666666667,"diff":["-import numpy as np","+sys.setrecursionlimit(10**7)","-readline = sys.stdin.buffer.readline","+input = sys.stdin.buffer.readline","-N, K = list(map(int, readline().split()))","-A = np.array(readline().split(), dtype=np.int64) + 1","-Acum = np.zeros(N + 1, np.float64)","-Acum[1:] = A.cumsum()","-x = Acum[K:] - Acum[:-K]","-print((x.max() \/ 2))","+from itertools import accumulate","+","+N, K = list(map(int, input().split()))","+P = list(map(int, input().split()))","+Pcum = list(accumulate([0] + [(1 + p) \/ 2 for p in P]))","+ans = max(right - left for left, right in zip(Pcum, Pcum[K:]))","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.3171086328,"measured_runtime_v1":0.2014067566,"runtime_lift":6.539545419,"key":["s723376959","s506730917"]}
{"user_id":"u519939795","problem_id":"p02982","language":"python","submission_id_v0":"s108105198","submission_id_v1":"s959516011","cpu_time_v0":151,"cpu_time_v1":18,"memory_v0":12480,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.08,"input":"import numpy as np\n\nn,d=list(map(int,input().split()))\n\nx=[list(map(int,input().split())) for i in range(n)]\n\ncount=0\n\nfor i in range(n-1):\n\n    for j in range(i+1,n):\n\n        a=np.array(x[i])\n\n        b=np.array(x[j])\n\n        ab=sum(np.power((a-b),2))**0.5\n\n        if ab%1==0:\n\n            count+=1\n\nprint(count)","target":"n,d=list(map(int,input().split()))\n\nL=[list(map(int,input().split())) for i in range(n)]\n\nans=0\n\nfor i in range(n-1):\n\n    for j in range(i+1,n):\n\n        a=0\n\n        for k in range(d):\n\n            a+=(L[i][k]-L[j][k])**2\n\n        if int(a**0.5)==a**0.5:\n\n            ans+=1\n\nprint(ans)","code_v0_loc":12,"code_v1_loc":11,"code_v0_num_chars":310,"code_v1_num_chars":282,"code_v0_no_empty_lines":"import numpy as np\n\nn, d = list(map(int, input().split()))\nx = [list(map(int, input().split())) for i in range(n)]\ncount = 0\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        a = np.array(x[i])\n        b = np.array(x[j])\n        ab = sum(np.power((a - b), 2)) ** 0.5\n        if ab % 1 == 0:\n            count += 1\nprint(count)\n","code_v1_no_empty_lines":"n, d = list(map(int, input().split()))\nL = [list(map(int, input().split())) for i in range(n)]\nans = 0\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        a = 0\n        for k in range(d):\n            a += (L[i][k] - L[j][k]) ** 2\n        if int(a**0.5) == a**0.5:\n            ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":8.3333333333,"diff":["-import numpy as np","-","-x = [list(map(int, input().split())) for i in range(n)]","-count = 0","+L = [list(map(int, input().split())) for i in range(n)]","+ans = 0","-        a = np.array(x[i])","-        b = np.array(x[j])","-        ab = sum(np.power((a - b), 2)) ** 0.5","-        if ab % 1 == 0:","-            count += 1","-print(count)","+        a = 0","+        for k in range(d):","+            a += (L[i][k] - L[j][k]) ** 2","+        if int(a**0.5) == a**0.5:","+            ans += 1","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.8732560987,"measured_runtime_v1":0.2386262383,"runtime_lift":7.8501681611,"key":["s108105198","s959516011"]}
{"user_id":"u912237403","problem_id":"p00003","language":"python","submission_id_v0":"s588310858","submission_id_v1":"s978758272","cpu_time_v0":20,"cpu_time_v1":10,"memory_v0":4212,"memory_v1":4212,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":50.0,"input":"for n in range(eval(input())):\n\n  a,b,c=sorted(map(int,input().split()))\n\n  s=\"YES\" if a*a+b*b==c*c else \"NO\"\n\n  print(s)","target":"for n in range(eval(input())):\n\n  a,b,c=sorted(map(int,input().split()))\n\n  print(\"YES\" if a*a + b*b == c*c else \"NO\")","code_v0_loc":4,"code_v1_loc":3,"code_v0_num_chars":118,"code_v1_num_chars":115,"code_v0_no_empty_lines":"for n in range(eval(input())):\n    a, b, c = sorted(map(int, input().split()))\n    s = \"YES\" if a * a + b * b == c * c else \"NO\"\n    print(s)\n","code_v1_no_empty_lines":"for n in range(eval(input())):\n    a, b, c = sorted(map(int, input().split()))\n    print(\"YES\" if a * a + b * b == c * c else \"NO\")\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-    s = \"YES\" if a * a + b * b == c * c else \"NO\"","-    print(s)","+    print(\"YES\" if a * a + b * b == c * c else \"NO\")"],"diff_only_import_comment":false,"measured_runtime_v0":0.1218309853,"measured_runtime_v1":0.0062354748,"runtime_lift":19.5383653264,"key":["s588310858","s978758272"]}
{"user_id":"u764215612","problem_id":"p02690","language":"python","submission_id_v0":"s260490264","submission_id_v1":"s471661437","cpu_time_v0":40,"cpu_time_v1":34,"memory_v0":9168,"memory_v1":9040,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.0,"input":"x=int(eval(input()))\n\nfor i in range(-118,120):\n\n  for j in range(-119,129):\n\n    if i**5-j**5==x:\n\n      print((i,j))\n\n      exit()","target":"x = int(eval(input()))\n\nfor i in range(120):\n\n  for j in range(-119,129):\n\n    if i**5 - j**5 == x:\n\n      print((i, j))\n\n      exit()","code_v0_loc":6,"code_v1_loc":6,"code_v0_num_chars":124,"code_v1_num_chars":126,"code_v0_no_empty_lines":"x = int(eval(input()))\nfor i in range(-118, 120):\n    for j in range(-119, 129):\n        if i**5 - j**5 == x:\n            print((i, j))\n            exit()\n","code_v1_no_empty_lines":"x = int(eval(input()))\nfor i in range(120):\n    for j in range(-119, 129):\n        if i**5 - j**5 == x:\n            print((i, j))\n            exit()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-for i in range(-118, 120):","+for i in range(120):"],"diff_only_import_comment":false,"measured_runtime_v0":0.5536552926,"measured_runtime_v1":0.1323317309,"runtime_lift":4.1838438044,"key":["s260490264","s471661437"]}
{"user_id":"u766684188","problem_id":"p02821","language":"python","submission_id_v0":"s756543404","submission_id_v1":"s283463453","cpu_time_v0":1684,"cpu_time_v1":1054,"memory_v0":58816,"memory_v1":60104,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":37.41,"input":"#E\n\nfrom itertools import accumulate\n\nfrom bisect import bisect_left\n\ndef main():\n\n    n,m=list(map(int,input().split()))\n\n    A=list(map(int,input().split()))\n\n    A.sort()\n\n    \n\n    def count(k):\n\n        cnt=0\n\n        for a in A:\n\n            cnt+=bisect_left(A,k-a)\n\n        return cnt\n\n    \n\n    ok=0\n\n    ng=10**10+1\n\n    while ng-ok>1:\n\n        mid=(ok+ng)\/\/2\n\n        if count(mid)<n**2-m:\n\n            ok=mid\n\n        else:\n\n            ng=mid\n\n    border=ok\n\n    \n\n    k=n**2-count(border)\n\n    Acc=[0]+list(accumulate(A))\n\n    s=Acc[-1]\n\n    ans=0\n\n    for a in A:\n\n        idx=bisect_left(A,border-a)\n\n        ans+=a*(n-idx)+(s-Acc[idx])\n\n    ans-=border*(k-m)\n\n    print(ans)\n\n    \n\nif __name__=='__main__':\n\n    main()","target":"from itertools import accumulate\n\nfrom bisect import bisect_left\n\ndef main():\n\n    n,m=list(map(int,input().split()))\n\n    A=list(map(int,input().split()))\n\n    A.sort()\n\n    \n\n    def count(k):\n\n        cnt=0\n\n        for a in A:\n\n            cnt+=bisect_left(A,k-a)\n\n        return cnt\n\n    \n\n    ok=0\n\n    ng=2*10**5+1\n\n    while ng-ok>1:\n\n        mid=(ok+ng)\/\/2\n\n        if count(mid)<n**2-m:\n\n            ok=mid\n\n        else:\n\n            ng=mid\n\n    border=ok\n\n    \n\n    k=n**2-count(border)\n\n    Acc=[0]+list(accumulate(A))\n\n    s=Acc[-1]\n\n    ans=0\n\n    for a in A:\n\n        idx=bisect_left(A,border-a)\n\n        ans+=a*(n-idx)+(s-Acc[idx])\n\n    ans-=border*(k-m)\n\n    print(ans)\n\n    \n\nif __name__=='__main__':\n\n    main()","code_v0_loc":36,"code_v1_loc":35,"code_v0_num_chars":728,"code_v1_num_chars":725,"code_v0_no_empty_lines":"# E\nfrom itertools import accumulate\nfrom bisect import bisect_left\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    A.sort()\n\n    def count(k):\n        cnt = 0\n        for a in A:\n            cnt += bisect_left(A, k - a)\n        return cnt\n\n    ok = 0\n    ng = 10**10 + 1\n    while ng - ok > 1:\n        mid = (ok + ng) \/\/ 2\n        if count(mid) < n**2 - m:\n            ok = mid\n        else:\n            ng = mid\n    border = ok\n    k = n**2 - count(border)\n    Acc = [0] + list(accumulate(A))\n    s = Acc[-1]\n    ans = 0\n    for a in A:\n        idx = bisect_left(A, border - a)\n        ans += a * (n - idx) + (s - Acc[idx])\n    ans -= border * (k - m)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"from itertools import accumulate\nfrom bisect import bisect_left\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    A.sort()\n\n    def count(k):\n        cnt = 0\n        for a in A:\n            cnt += bisect_left(A, k - a)\n        return cnt\n\n    ok = 0\n    ng = 2 * 10**5 + 1\n    while ng - ok > 1:\n        mid = (ok + ng) \/\/ 2\n        if count(mid) < n**2 - m:\n            ok = mid\n        else:\n            ng = mid\n    border = ok\n    k = n**2 - count(border)\n    Acc = [0] + list(accumulate(A))\n    s = Acc[-1]\n    ans = 0\n    for a in A:\n        idx = bisect_left(A, border - a)\n        ans += a * (n - idx) + (s - Acc[idx])\n    ans -= border * (k - m)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":2.7777777778,"diff":["-# E","-    ng = 10**10 + 1","+    ng = 2 * 10**5 + 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.329581742,"measured_runtime_v1":0.2004272747,"runtime_lift":1.6443956668,"key":["s756543404","s283463453"]}
{"user_id":"u738898077","problem_id":"p03634","language":"python","submission_id_v0":"s144783413","submission_id_v1":"s080655040","cpu_time_v0":845,"cpu_time_v1":724,"memory_v0":48964,"memory_v1":48916,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.32,"input":"import sys\n\ninput = sys.stdin.readline\n\nn = int(eval(input()))\n\nv = [[0]+[]*(n+1) for i in range(n+1)]\n\nfor i in range(n-1):\n\n    a,b,c = list(map(int,input().split()))\n\n    v[a].append([b,c])\n\n    v[b].append([a,c])\n\n\n\nq,k = list(map(int,input().split()))\n\nl = [k]\n\nwhile l:\n\n    now = l.pop()\n\n    for i in v[now][1:]:\n\n        if v[i[0]][0] == 0:\n\n            v[i[0]][0] = i[1]+v[now][0]\n\n            l.append(i[0])\n\n\n\nfor i in range(q):\n\n    x,y = list(map(int,input().split()))\n\n    print((v[x][0]+v[y][0]))","target":"import sys\n\ndef main():\n\n    input = sys.stdin.readline\n\n    n = int(eval(input()))\n\n    v = [[0]+[]*(n+1) for i in range(n+1)]\n\n    for i in range(n-1):\n\n        a,b,c = list(map(int,input().split()))\n\n        v[a].append([b,c])\n\n        v[b].append([a,c])\n\n\n\n    q,k = list(map(int,input().split()))\n\n    l = [k]\n\n    while l:\n\n        now = l.pop()\n\n        for i in v[now][1:]:\n\n            if v[i[0]][0] == 0:\n\n                v[i[0]][0] = i[1]+v[now][0]\n\n                l.append(i[0])\n\n\n\n    for i in range(q):\n\n        x,y = list(map(int,input().split()))\n\n        print((v[x][0]+v[y][0]))\n\n\n\nif __name__ == '__main__':\n\n    main()","code_v0_loc":21,"code_v1_loc":25,"code_v0_num_chars":486,"code_v1_num_chars":613,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nn = int(eval(input()))\nv = [[0] + [] * (n + 1) for i in range(n + 1)]\nfor i in range(n - 1):\n    a, b, c = list(map(int, input().split()))\n    v[a].append([b, c])\n    v[b].append([a, c])\nq, k = list(map(int, input().split()))\nl = [k]\nwhile l:\n    now = l.pop()\n    for i in v[now][1:]:\n        if v[i[0]][0] == 0:\n            v[i[0]][0] = i[1] + v[now][0]\n            l.append(i[0])\nfor i in range(q):\n    x, y = list(map(int, input().split()))\n    print((v[x][0] + v[y][0]))\n","code_v1_no_empty_lines":"import sys\n\n\ndef main():\n    input = sys.stdin.readline\n    n = int(eval(input()))\n    v = [[0] + [] * (n + 1) for i in range(n + 1)]\n    for i in range(n - 1):\n        a, b, c = list(map(int, input().split()))\n        v[a].append([b, c])\n        v[b].append([a, c])\n    q, k = list(map(int, input().split()))\n    l = [k]\n    while l:\n        now = l.pop()\n        for i in v[now][1:]:\n            if v[i[0]][0] == 0:\n                v[i[0]][0] = i[1] + v[now][0]\n                l.append(i[0])\n    for i in range(q):\n        x, y = list(map(int, input().split()))\n        print((v[x][0] + v[y][0]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":16.0,"diff":["-input = sys.stdin.readline","-n = int(eval(input()))","-v = [[0] + [] * (n + 1) for i in range(n + 1)]","-for i in range(n - 1):","-    a, b, c = list(map(int, input().split()))","-    v[a].append([b, c])","-    v[b].append([a, c])","-q, k = list(map(int, input().split()))","-l = [k]","-while l:","-    now = l.pop()","-    for i in v[now][1:]:","-        if v[i[0]][0] == 0:","-            v[i[0]][0] = i[1] + v[now][0]","-            l.append(i[0])","-for i in range(q):","-    x, y = list(map(int, input().split()))","-    print((v[x][0] + v[y][0]))","+","+def main():","+    input = sys.stdin.readline","+    n = int(eval(input()))","+    v = [[0] + [] * (n + 1) for i in range(n + 1)]","+    for i in range(n - 1):","+        a, b, c = list(map(int, input().split()))","+        v[a].append([b, c])","+        v[b].append([a, c])","+    q, k = list(map(int, input().split()))","+    l = [k]","+    while l:","+        now = l.pop()","+        for i in v[now][1:]:","+            if v[i[0]][0] == 0:","+                v[i[0]][0] = i[1] + v[now][0]","+                l.append(i[0])","+    for i in range(q):","+        x, y = list(map(int, input().split()))","+        print((v[x][0] + v[y][0]))","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.3066135428,"measured_runtime_v1":0.2174853971,"runtime_lift":1.4098120925,"key":["s144783413","s080655040"]}
{"user_id":"u977193988","problem_id":"p02767","language":"python","submission_id_v0":"s390092370","submission_id_v1":"s517686236","cpu_time_v0":150,"cpu_time_v1":21,"memory_v0":12508,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":86.0,"input":"import numpy as np\n\n\n\nN = int(eval(input()))\n\nX = np.array(list(map(int, input().split())))\n\ncost = float(\"inf\")\n\nfor i in range(max(X) - min(X) + 1):\n\n    p = min(X) + i\n\n    cost = min(np.sum((X - p) ** 2), cost)\n\nprint(cost)","target":"N = int(eval(input()))\n\nX = sorted(list(map(int, input().split())))\n\nif N == 1:\n\n    print((0))\n\nelse:\n\n    r = X[-1] - X[0]\n\n    ans = float(\"inf\")\n\n    for i in range(r + 1):\n\n        R = X[0] + i\n\n        hp = 0\n\n        for j in range(N):\n\n            hp = hp + (R - X[j]) ** 2\n\n\n\n        ans = min(hp, ans)\n\n\n\n    print(ans)\n","code_v0_loc":9,"code_v1_loc":16,"code_v0_num_chars":221,"code_v1_num_chars":322,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nX = np.array(list(map(int, input().split())))\ncost = float(\"inf\")\nfor i in range(max(X) - min(X) + 1):\n    p = min(X) + i\n    cost = min(np.sum((X - p) ** 2), cost)\nprint(cost)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nX = sorted(list(map(int, input().split())))\nif N == 1:\n    print((0))\nelse:\n    r = X[-1] - X[0]\n    ans = float(\"inf\")\n    for i in range(r + 1):\n        R = X[0] + i\n        hp = 0\n        for j in range(N):\n            hp = hp + (R - X[j]) ** 2\n        ans = min(hp, ans)\n    print(ans)\n","code_same":false,"relative_loc_diff_percent":43.75,"diff":["-import numpy as np","-","-X = np.array(list(map(int, input().split())))","-cost = float(\"inf\")","-for i in range(max(X) - min(X) + 1):","-    p = min(X) + i","-    cost = min(np.sum((X - p) ** 2), cost)","-print(cost)","+X = sorted(list(map(int, input().split())))","+if N == 1:","+    print((0))","+else:","+    r = X[-1] - X[0]","+    ans = float(\"inf\")","+    for i in range(r + 1):","+        R = X[0] + i","+        hp = 0","+        for j in range(N):","+            hp = hp + (R - X[j]) ** 2","+        ans = min(hp, ans)","+    print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":2.2545192011,"measured_runtime_v1":0.3218237295,"runtime_lift":7.0054473747,"key":["s390092370","s517686236"]}
{"user_id":"u497046426","problem_id":"p03568","language":"python","submission_id_v0":"s711599117","submission_id_v1":"s424536945","cpu_time_v0":181,"cpu_time_v1":17,"memory_v0":3572,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":90.61,"input":"from functools import reduce\n\nfrom itertools import product\n\n\n\nN = int(eval(input()))\n\n*A, = list(map(int, input().split()))\n\nans = 0\n\nfor t in product([-1, 0, 1], repeat=N):\n\n    prod = reduce(lambda x, y: x*y, [a + t[i] for i, a in enumerate(A)])\n\n    if prod % 2 == 0: ans += 1\n\nprint(ans)","target":"N = int(eval(input()))\n\n*A, = list(map(int, input().split()))\n\nevens = 0\n\nfor a in A:\n\n    if a % 2 == 0: evens += 1\n\nans = 3**N - 2**evens\n\nprint(ans)","code_v0_loc":10,"code_v1_loc":7,"code_v0_num_chars":280,"code_v1_num_chars":139,"code_v0_no_empty_lines":"from functools import reduce\nfrom itertools import product\n\nN = int(eval(input()))\n(*A,) = list(map(int, input().split()))\nans = 0\nfor t in product([-1, 0, 1], repeat=N):\n    prod = reduce(lambda x, y: x * y, [a + t[i] for i, a in enumerate(A)])\n    if prod % 2 == 0:\n        ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\n(*A,) = list(map(int, input().split()))\nevens = 0\nfor a in A:\n    if a % 2 == 0:\n        evens += 1\nans = 3**N - 2**evens\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":30.0,"diff":["-from functools import reduce","-from itertools import product","-","-ans = 0","-for t in product([-1, 0, 1], repeat=N):","-    prod = reduce(lambda x, y: x * y, [a + t[i] for i, a in enumerate(A)])","-    if prod % 2 == 0:","-        ans += 1","+evens = 0","+for a in A:","+    if a % 2 == 0:","+        evens += 1","+ans = 3**N - 2**evens"],"diff_only_import_comment":false,"measured_runtime_v0":0.6547077734,"measured_runtime_v1":0.2760411811,"runtime_lift":2.3717757287,"key":["s711599117","s424536945"]}
{"user_id":"u628707847","problem_id":"p02748","language":"python","submission_id_v0":"s393648468","submission_id_v1":"s394235092","cpu_time_v0":533,"cpu_time_v1":471,"memory_v0":30260,"memory_v1":21668,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.63,"input":"a, b, m = list(map(int,input().split()))\n\ndr = list(map(int,input().split()))\n\nwa = list(map(int,input().split()))\n\nxyc = [list(map(int,input().split())) for i in range(m)]\n\nlow = 200001\n\n\n\nfor i in range(m):\n\n    f = xyc[i][0] - 1\n\n    d = xyc[i][1] - 1\n\n    if low >= dr[f]+wa[d]-xyc[i][2]:\n\n        low = dr[f]+wa[d]-xyc[i][2]\n\n\n\ndr.sort()\n\nwa.sort()\n\n\n\nif low >= (dr[0] + wa[0]):\n\n    print((dr[0] + wa[0]))\n\nelse:\n\n    print(low)","target":"a, b, m = list(map(int,input().split()))\n\nal = list(map(int,input().split()))\n\nbl = list(map(int,input().split()))\n\nlow = min(al)+min(bl)\n\nx = [0] * m\n\ny = [0] * m\n\nc = [0] * m\n\n\n\nfor i in range(m):\n\n    x[i],y[i],c[i] = list(map(int, input().split()))\n\n    x[i] -= 1\n\n    y[i] -= 1\n\n \n\nfor i in range(m):\n\n    low = min(low,al[x[i]]+bl[y[i]]-c[i])\n\n\n\nprint(low)","code_v0_loc":19,"code_v1_loc":17,"code_v0_num_chars":424,"code_v1_num_chars":353,"code_v0_no_empty_lines":"a, b, m = list(map(int, input().split()))\ndr = list(map(int, input().split()))\nwa = list(map(int, input().split()))\nxyc = [list(map(int, input().split())) for i in range(m)]\nlow = 200001\nfor i in range(m):\n    f = xyc[i][0] - 1\n    d = xyc[i][1] - 1\n    if low >= dr[f] + wa[d] - xyc[i][2]:\n        low = dr[f] + wa[d] - xyc[i][2]\ndr.sort()\nwa.sort()\nif low >= (dr[0] + wa[0]):\n    print((dr[0] + wa[0]))\nelse:\n    print(low)\n","code_v1_no_empty_lines":"a, b, m = list(map(int, input().split()))\nal = list(map(int, input().split()))\nbl = list(map(int, input().split()))\nlow = min(al) + min(bl)\nx = [0] * m\ny = [0] * m\nc = [0] * m\nfor i in range(m):\n    x[i], y[i], c[i] = list(map(int, input().split()))\n    x[i] -= 1\n    y[i] -= 1\nfor i in range(m):\n    low = min(low, al[x[i]] + bl[y[i]] - c[i])\nprint(low)\n","code_same":false,"relative_loc_diff_percent":10.5263157895,"diff":["-dr = list(map(int, input().split()))","-wa = list(map(int, input().split()))","-xyc = [list(map(int, input().split())) for i in range(m)]","-low = 200001","+al = list(map(int, input().split()))","+bl = list(map(int, input().split()))","+low = min(al) + min(bl)","+x = [0] * m","+y = [0] * m","+c = [0] * m","-    f = xyc[i][0] - 1","-    d = xyc[i][1] - 1","-    if low >= dr[f] + wa[d] - xyc[i][2]:","-        low = dr[f] + wa[d] - xyc[i][2]","-dr.sort()","-wa.sort()","-if low >= (dr[0] + wa[0]):","-    print((dr[0] + wa[0]))","-else:","-    print(low)","+    x[i], y[i], c[i] = list(map(int, input().split()))","+    x[i] -= 1","+    y[i] -= 1","+for i in range(m):","+    low = min(low, al[x[i]] + bl[y[i]] - c[i])","+print(low)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2055197518,"measured_runtime_v1":0.0063774352,"runtime_lift":32.2260822388,"key":["s393648468","s394235092"]}
{"user_id":"u428199834","problem_id":"p02690","language":"python","submission_id_v0":"s731409863","submission_id_v1":"s859547087","cpu_time_v0":78,"cpu_time_v1":64,"memory_v0":9088,"memory_v1":9044,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.95,"input":"X=int(eval(input()))\n\na=[]\n\nfor i in range(-100,200):\n\n  for j in range(-100,200):\n\n    if i**5-j**5==X:\n\n      a.append(str(i))\n\n      a.append(str(j))\n\n      break\n\nprint((' '.join(a[0:2])))\n\n\n\n    ","target":"X=int(eval(input()))\n\na=[]\n\nfor i in range(-100,200):\n\n  for j in range(-100,200):\n\n    if i**5-j**5==X:\n\n      a.append(str(i))\n\n      a.append(str(j))\n\n      break\n\n  else:\n\n    continue\n\n  break  \n\nprint((' '.join(a[0:2])))\n\n\n\n    \n","code_v0_loc":11,"code_v1_loc":14,"code_v0_num_chars":192,"code_v1_num_chars":227,"code_v0_no_empty_lines":"X = int(eval(input()))\na = []\nfor i in range(-100, 200):\n    for j in range(-100, 200):\n        if i**5 - j**5 == X:\n            a.append(str(i))\n            a.append(str(j))\n            break\nprint((\" \".join(a[0:2])))\n","code_v1_no_empty_lines":"X = int(eval(input()))\na = []\nfor i in range(-100, 200):\n    for j in range(-100, 200):\n        if i**5 - j**5 == X:\n            a.append(str(i))\n            a.append(str(j))\n            break\n    else:\n        continue\n    break\nprint((\" \".join(a[0:2])))\n","code_same":false,"relative_loc_diff_percent":21.4285714286,"diff":["+    else:","+        continue","+    break"],"diff_only_import_comment":false,"measured_runtime_v0":0.2243127763,"measured_runtime_v1":0.1643264433,"runtime_lift":1.3650437011,"key":["s731409863","s859547087"]}
{"user_id":"u624689667","problem_id":"p03835","language":"python","submission_id_v0":"s909731438","submission_id_v1":"s120194088","cpu_time_v0":274,"cpu_time_v1":201,"memory_v0":40684,"memory_v1":41308,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":26.64,"input":"K, S = [int(i) for i in input().split()]\n\n\n\nc = 0\n\nfor X in range(K + 1):\n\n    for Y in range(K + 1):\n\n        Z = S - X - Y\n\n        if 0 <= Z <= K:\n\n            c += 1\n\n\n\nprint(c)","target":"K, S = [int(i) for i in input().split()]\n\n\n\nans = 0\n\n# X <= Y <= Z\u3068\u3057\u3066\u3082\u4e00\u822c\u6027\u3092\u5931\u308f\u306a\u3044\n\nfor x in range(K + 1):\n\n    for y in range(x, K + 1):\n\n        z = S - x - y\n\n        if z < y:\n\n            break\n\n        if z <= K:\n\n            if x == y == z:\n\n                ans += 1\n\n            elif x == y or y == z or z == x:\n\n                ans += 3\n\n            else:\n\n                ans += 6\n\nprint(ans)\n","code_v0_loc":10,"code_v1_loc":17,"code_v0_num_chars":181,"code_v1_num_chars":399,"code_v0_no_empty_lines":"K, S = [int(i) for i in input().split()]\nc = 0\nfor X in range(K + 1):\n    for Y in range(K + 1):\n        Z = S - X - Y\n        if 0 <= Z <= K:\n            c += 1\nprint(c)\n","code_v1_no_empty_lines":"K, S = [int(i) for i in input().split()]\nans = 0\n# X <= Y <= Z\u3068\u3057\u3066\u3082\u4e00\u822c\u6027\u3092\u5931\u308f\u306a\u3044\nfor x in range(K + 1):\n    for y in range(x, K + 1):\n        z = S - x - y\n        if z < y:\n            break\n        if z <= K:\n            if x == y == z:\n                ans += 1\n            elif x == y or y == z or z == x:\n                ans += 3\n            else:\n                ans += 6\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":41.1764705882,"diff":["-c = 0","-for X in range(K + 1):","-    for Y in range(K + 1):","-        Z = S - X - Y","-        if 0 <= Z <= K:","-            c += 1","-print(c)","+ans = 0","+# X <= Y <= Z\u3068\u3057\u3066\u3082\u4e00\u822c\u6027\u3092\u5931\u308f\u306a\u3044","+for x in range(K + 1):","+    for y in range(x, K + 1):","+        z = S - x - y","+        if z < y:","+            break","+        if z <= K:","+            if x == y == z:","+                ans += 1","+            elif x == y or y == z or z == x:","+                ans += 3","+            else:","+                ans += 6","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2592413317,"measured_runtime_v1":0.105755719,"runtime_lift":2.4513221044,"key":["s909731438","s120194088"]}
{"user_id":"u580697892","problem_id":"p03126","language":"python","submission_id_v0":"s815650621","submission_id_v1":"s504616042","cpu_time_v0":326,"cpu_time_v1":18,"memory_v0":20760,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":94.48,"input":"import numpy as np\n\nN, M = list(map(int, input().split()))\n\nmenu = np.array([])\n\nfor i in range(N):\n\n  a = np.array(input().split())\n\n  menu = np.append(menu, a[1:])\n\nmenu = np.array(menu).astype(int).ravel()\n\ncount = 0\n\nfor i in range(1, M+1):\n\n  if np.sum(menu == i) == N:\n\n    count += 1\n\nprint(count)","target":"# coding: utf-8\n\nn, m = list(map(int, input().split()))\n\nll = [0] * m\n\nfor i in range(n):\n\n    l = list(map(int, input().split()))\n\n    for j in range(l[0]):\n\n        ll[l[j+1] - 1] += 1\n\nprint((ll.count(max(ll)) if max(ll)==n else 0))","code_v0_loc":12,"code_v1_loc":8,"code_v0_num_chars":298,"code_v1_num_chars":227,"code_v0_no_empty_lines":"import numpy as np\n\nN, M = list(map(int, input().split()))\nmenu = np.array([])\nfor i in range(N):\n    a = np.array(input().split())\n    menu = np.append(menu, a[1:])\nmenu = np.array(menu).astype(int).ravel()\ncount = 0\nfor i in range(1, M + 1):\n    if np.sum(menu == i) == N:\n        count += 1\nprint(count)\n","code_v1_no_empty_lines":"# coding: utf-8\nn, m = list(map(int, input().split()))\nll = [0] * m\nfor i in range(n):\n    l = list(map(int, input().split()))\n    for j in range(l[0]):\n        ll[l[j + 1] - 1] += 1\nprint((ll.count(max(ll)) if max(ll) == n else 0))\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-import numpy as np","-","-N, M = list(map(int, input().split()))","-menu = np.array([])","-for i in range(N):","-    a = np.array(input().split())","-    menu = np.append(menu, a[1:])","-menu = np.array(menu).astype(int).ravel()","-count = 0","-for i in range(1, M + 1):","-    if np.sum(menu == i) == N:","-        count += 1","-print(count)","+# coding: utf-8","+n, m = list(map(int, input().split()))","+ll = [0] * m","+for i in range(n):","+    l = list(map(int, input().split()))","+    for j in range(l[0]):","+        ll[l[j + 1] - 1] += 1","+print((ll.count(max(ll)) if max(ll) == n else 0))"],"diff_only_import_comment":false,"measured_runtime_v0":1.4087881777,"measured_runtime_v1":0.1976648209,"runtime_lift":7.1271568263,"key":["s815650621","s504616042"]}
{"user_id":"u306664745","problem_id":"p02983","language":"python","submission_id_v0":"s965697641","submission_id_v1":"s560038811","cpu_time_v0":68,"cpu_time_v1":56,"memory_v0":3060,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.65,"input":"l, r=list(map(int, input().split()))\n\nif r-l>672:\n\n\tp=0\n\nelse:\n\n\tp=2019\n\n\tfor i in range(l, r):\n\n\t\tfor j in range(i+1, r+1):\n\n\t\t\tp=min(p, (((i%2019)*(j%2019))%2019))\n\n\t\t\tif not p:\n\n\t\t\t\tbreak\n\n\t\tif not p:\n\n\t\t\tbreak\n\nprint(p)","target":"l, r=list(map(int, input().split()))\n\nif r-l>672:\n\n\tp=0\n\nelse:\n\n\tp=2019\n\n\tfor i in range(l, r):\n\n\t\tfor j in range(i+1, r+1):\n\n\t\t\tp=min(p, (i*j%2019))\n\n\t\t\tif not p:\n\n\t\t\t\tbreak\n\n\t\tif not p:\n\n\t\t\tbreak\n\nprint(p)","code_v0_loc":13,"code_v1_loc":13,"code_v0_num_chars":217,"code_v1_num_chars":201,"code_v0_no_empty_lines":"l, r = list(map(int, input().split()))\nif r - l > 672:\n    p = 0\nelse:\n    p = 2019\n    for i in range(l, r):\n        for j in range(i + 1, r + 1):\n            p = min(p, (((i % 2019) * (j % 2019)) % 2019))\n            if not p:\n                break\n        if not p:\n            break\nprint(p)\n","code_v1_no_empty_lines":"l, r = list(map(int, input().split()))\nif r - l > 672:\n    p = 0\nelse:\n    p = 2019\n    for i in range(l, r):\n        for j in range(i + 1, r + 1):\n            p = min(p, (i * j % 2019))\n            if not p:\n                break\n        if not p:\n            break\nprint(p)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-            p = min(p, (((i % 2019) * (j % 2019)) % 2019))","+            p = min(p, (i * j % 2019))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3854847456,"measured_runtime_v1":0.191389215,"runtime_lift":2.0141403766,"key":["s965697641","s560038811"]}
{"user_id":"u046592970","problem_id":"p03371","language":"python","submission_id_v0":"s911937877","submission_id_v1":"s225349134","cpu_time_v0":121,"cpu_time_v1":17,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":85.95,"input":"a,b,c,x,y = list(map(int,input().split()))\n\nprice = 10**10\n\nfor k in range(10**5+1):\n\n    re = 2*c*k + max(0,x-k)*a + max(0,y-k)*b\n\n    price = min(re,price)\n\nprint(price)","target":"a,b,c,x,y = list(map(int,input().split()))\n\na1 = a*x + b*y\n\na2 = max(x,y) * 2*c\n\nif y >= x:\n\n    a3 = 2*c*x + (y-x)*b\n\nelse:\n\n    a3 = 2*c*y + (x-y)*a\n\nprint((min(a1,a2,a3)))","code_v0_loc":6,"code_v1_loc":8,"code_v0_num_chars":165,"code_v1_num_chars":166,"code_v0_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nprice = 10**10\nfor k in range(10**5 + 1):\n    re = 2 * c * k + max(0, x - k) * a + max(0, y - k) * b\n    price = min(re, price)\nprint(price)\n","code_v1_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\na1 = a * x + b * y\na2 = max(x, y) * 2 * c\nif y >= x:\n    a3 = 2 * c * x + (y - x) * b\nelse:\n    a3 = 2 * c * y + (x - y) * a\nprint((min(a1, a2, a3)))\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-price = 10**10","-for k in range(10**5 + 1):","-    re = 2 * c * k + max(0, x - k) * a + max(0, y - k) * b","-    price = min(re, price)","-print(price)","+a1 = a * x + b * y","+a2 = max(x, y) * 2 * c","+if y >= x:","+    a3 = 2 * c * x + (y - x) * b","+else:","+    a3 = 2 * c * y + (x - y) * a","+print((min(a1, a2, a3)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.4459569323,"measured_runtime_v1":0.1564870899,"runtime_lift":2.8498001506,"key":["s911937877","s225349134"]}
{"user_id":"u562016607","problem_id":"p04021","language":"python","submission_id_v0":"s141985189","submission_id_v1":"s196716457","cpu_time_v0":455,"cpu_time_v1":352,"memory_v0":20612,"memory_v1":18400,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":22.64,"input":"import numpy as np\n\nN=int(eval(input()))\n\nA=[int(eval(input())) for i in range(N)]\n\nB=list(np.argsort(np.array(A)))\n\nX=[[0,0],[0,0]]\n\nfor i in range(N):\n\n    X[i%2][B[i]%2]+=1\n\nprint((X[0][1]))\n","target":"N=int(eval(input()))\n\nA=[int(eval(input())) for i in range(N)]\n\nAT=[(A[i],i) for i in range(N)]\n\nAT.sort()\n\nB=[AT[i][1] for i in range(N)]\n\nX=[[0,0],[0,0]]\n\nfor i in range(N):\n\n    X[i%2][B[i]%2]+=1\n\nY=[X[0][1],X[1][0]]\n\nprint((min(Y)))\n","code_v0_loc":8,"code_v1_loc":10,"code_v0_num_chars":180,"code_v1_num_chars":223,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nA = [int(eval(input())) for i in range(N)]\nB = list(np.argsort(np.array(A)))\nX = [[0, 0], [0, 0]]\nfor i in range(N):\n    X[i % 2][B[i] % 2] += 1\nprint((X[0][1]))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = [int(eval(input())) for i in range(N)]\nAT = [(A[i], i) for i in range(N)]\nAT.sort()\nB = [AT[i][1] for i in range(N)]\nX = [[0, 0], [0, 0]]\nfor i in range(N):\n    X[i % 2][B[i] % 2] += 1\nY = [X[0][1], X[1][0]]\nprint((min(Y)))\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["-import numpy as np","-","-B = list(np.argsort(np.array(A)))","+AT = [(A[i], i) for i in range(N)]","+AT.sort()","+B = [AT[i][1] for i in range(N)]","-print((X[0][1]))","+Y = [X[0][1], X[1][0]]","+print((min(Y)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.1501710873,"measured_runtime_v1":0.2093672077,"runtime_lift":5.4935589007,"key":["s141985189","s196716457"]}
{"user_id":"u597374218","problem_id":"p03796","language":"python","submission_id_v0":"s873197292","submission_id_v1":"s712740845","cpu_time_v0":231,"cpu_time_v1":40,"memory_v0":3980,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":82.68,"input":"import math\n\nprint((math.factorial(int(eval(input())))%(10**9+7)))","target":"ans=1\n\nn=int(eval(input()))\n\nfor i in range(1,n+1):\n\n    ans*=i\n\n    ans=ans%(10**9+7)\n\nprint(ans)","code_v0_loc":2,"code_v1_loc":6,"code_v0_num_chars":58,"code_v1_num_chars":92,"code_v0_no_empty_lines":"import math\n\nprint((math.factorial(int(eval(input()))) % (10**9 + 7)))\n","code_v1_no_empty_lines":"ans = 1\nn = int(eval(input()))\nfor i in range(1, n + 1):\n    ans *= i\n    ans = ans % (10**9 + 7)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":66.6666666667,"diff":["-import math","-","-print((math.factorial(int(eval(input()))) % (10**9 + 7)))","+ans = 1","+n = int(eval(input()))","+for i in range(1, n + 1):","+    ans *= i","+    ans = ans % (10**9 + 7)","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.5415332041,"measured_runtime_v1":0.2632789848,"runtime_lift":2.0568797183,"key":["s873197292","s712740845"]}
{"user_id":"u222668979","problem_id":"p02996","language":"python","submission_id_v0":"s000658921","submission_id_v1":"s911267857","cpu_time_v0":791,"cpu_time_v1":572,"memory_v0":38028,"memory_v1":117796,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":27.69,"input":"import sys\n\ninput = sys.stdin.readline\n\n\n\nn = int(eval(input()))\n\nab = sorted([list(map(int, input().split()))[::-1] for _ in range(n)])\n\n\n\ncnt = 0\n\nfor b, a in ab:\n\n    cnt += a\n\n    if cnt > b:\n\n        print('No')\n\n        break\n\nelse:\n\n    print('Yes')\n","target":"n = int(eval(input()))\n\nab = [list(map(int, input().split())) for _ in range(n)]\n\nab = sorted(ab, key=lambda x: x[1])\n\n\n\nt = 0\n\nfor a, b in ab:\n\n    t += a\n\n    if t > b:\n\n        print('No')\n\n        break\n\nelse:\n\n    print('Yes')\n","code_v0_loc":14,"code_v1_loc":12,"code_v0_num_chars":251,"code_v1_num_chars":226,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nn = int(eval(input()))\nab = sorted([list(map(int, input().split()))[::-1] for _ in range(n)])\ncnt = 0\nfor b, a in ab:\n    cnt += a\n    if cnt > b:\n        print(\"No\")\n        break\nelse:\n    print(\"Yes\")\n","code_v1_no_empty_lines":"n = int(eval(input()))\nab = [list(map(int, input().split())) for _ in range(n)]\nab = sorted(ab, key=lambda x: x[1])\nt = 0\nfor a, b in ab:\n    t += a\n    if t > b:\n        print(\"No\")\n        break\nelse:\n    print(\"Yes\")\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["-import sys","-","-input = sys.stdin.readline","-ab = sorted([list(map(int, input().split()))[::-1] for _ in range(n)])","-cnt = 0","-for b, a in ab:","-    cnt += a","-    if cnt > b:","+ab = [list(map(int, input().split())) for _ in range(n)]","+ab = sorted(ab, key=lambda x: x[1])","+t = 0","+for a, b in ab:","+    t += a","+    if t > b:"],"diff_only_import_comment":false,"measured_runtime_v0":0.2345721078,"measured_runtime_v1":0.0064230425,"runtime_lift":36.5204038616,"key":["s000658921","s911267857"]}
{"user_id":"u927807968","problem_id":"p02777","language":"python","submission_id_v0":"s786603084","submission_id_v1":"s913426920","cpu_time_v0":19,"cpu_time_v1":17,"memory_v0":3060,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.53,"input":"S, T = input().split()\n\nA, B= list(map(int, input().split()))\n\nU = eval(input())\n\nif S == U:\n\n    print((A - 1, B))\n\nelse:\n\n    print((A, B - 1))","target":"S, T = input().split()\n\nA, B= list(map(int, input().split()))\n\nU = eval(input())\n\nif S == U:\n\n    A-=1\n\nelse:\n\n    B-=1\n\nprint((A,B))","code_v0_loc":7,"code_v1_loc":8,"code_v0_num_chars":129,"code_v1_num_chars":119,"code_v0_no_empty_lines":"S, T = input().split()\nA, B = list(map(int, input().split()))\nU = eval(input())\nif S == U:\n    print((A - 1, B))\nelse:\n    print((A, B - 1))\n","code_v1_no_empty_lines":"S, T = input().split()\nA, B = list(map(int, input().split()))\nU = eval(input())\nif S == U:\n    A -= 1\nelse:\n    B -= 1\nprint((A, B))\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-    print((A - 1, B))","+    A -= 1","-    print((A, B - 1))","+    B -= 1","+print((A, B))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2984414142,"measured_runtime_v1":0.2207367195,"runtime_lift":1.3520243248,"key":["s786603084","s913426920"]}
{"user_id":"u281303342","problem_id":"p03828","language":"python","submission_id_v0":"s909168869","submission_id_v1":"s458659043","cpu_time_v0":68,"cpu_time_v1":27,"memory_v0":3316,"memory_v1":3316,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":60.29,"input":"from collections import Counter\n\nN = int(eval(input()))\n\ndiv = []\n\nfor i in range(2,N+1):\n\n    while i != 1:\n\n        for d in range(2,i+1):\n\n            while i%d==0:\n\n                i = i\/\/d\n\n                div.append(d)\n\nC = Counter(div).most_common()\n\nAns = 1\n\nfor k,v in C:\n\n    Ans = Ans*(v+1) % (10**9+7)\n\n\n\nprint(Ans)\n","target":"from collections import defaultdict\n\nN = int(eval(input()))\n\n\n\nF = [True]*(N+1)\n\nF[0]=F[1]=False\n\nP = []\n\n\n\nfor i in range(2,N+1):\n\n    if F[i]==True:\n\n        P.append(i)\n\n        for j in range(i*2,N+1,i):\n\n            F[j]=False\n\n\n\ndic = defaultdict(int)\n\nfor i in range(2,N+1):\n\n    for p in P:\n\n        while i%p==0:\n\n            dic[p] += 1\n\n            i = i\/\/p\n\n        if i==1:\n\n            break\n\n\n\nans = 1\n\nmodulo = 10**9+7\n\nfor v in list(dic.values()):\n\n    ans *= (v+1)\n\n    ans %= modulo\n\n\n\nprint(ans)","code_v0_loc":15,"code_v1_loc":29,"code_v0_num_chars":322,"code_v1_num_chars":503,"code_v0_no_empty_lines":"from collections import Counter\n\nN = int(eval(input()))\ndiv = []\nfor i in range(2, N + 1):\n    while i != 1:\n        for d in range(2, i + 1):\n            while i % d == 0:\n                i = i \/\/ d\n                div.append(d)\nC = Counter(div).most_common()\nAns = 1\nfor k, v in C:\n    Ans = Ans * (v + 1) % (10**9 + 7)\nprint(Ans)\n","code_v1_no_empty_lines":"from collections import defaultdict\n\nN = int(eval(input()))\nF = [True] * (N + 1)\nF[0] = F[1] = False\nP = []\nfor i in range(2, N + 1):\n    if F[i] == True:\n        P.append(i)\n        for j in range(i * 2, N + 1, i):\n            F[j] = False\ndic = defaultdict(int)\nfor i in range(2, N + 1):\n    for p in P:\n        while i % p == 0:\n            dic[p] += 1\n            i = i \/\/ p\n        if i == 1:\n            break\nans = 1\nmodulo = 10**9 + 7\nfor v in list(dic.values()):\n    ans *= v + 1\n    ans %= modulo\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":48.275862069,"diff":["-from collections import Counter","+from collections import defaultdict","-div = []","+F = [True] * (N + 1)","+F[0] = F[1] = False","+P = []","-    while i != 1:","-        for d in range(2, i + 1):","-            while i % d == 0:","-                i = i \/\/ d","-                div.append(d)","-C = Counter(div).most_common()","-Ans = 1","-for k, v in C:","-    Ans = Ans * (v + 1) % (10**9 + 7)","-print(Ans)","+    if F[i] == True:","+        P.append(i)","+        for j in range(i * 2, N + 1, i):","+            F[j] = False","+dic = defaultdict(int)","+for i in range(2, N + 1):","+    for p in P:","+        while i % p == 0:","+            dic[p] += 1","+            i = i \/\/ p","+        if i == 1:","+            break","+ans = 1","+modulo = 10**9 + 7","+for v in list(dic.values()):","+    ans *= v + 1","+    ans %= modulo","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3373793194,"measured_runtime_v1":0.2469508071,"runtime_lift":1.3661802664,"key":["s909168869","s458659043"]}
{"user_id":"u426534722","problem_id":"p02245","language":"python","submission_id_v0":"s804728708","submission_id_v1":"s622088378","cpu_time_v0":760,"cpu_time_v1":650,"memory_v0":25996,"memory_v1":31348,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.47,"input":"from collections import deque\n\nfrom copy import deepcopy, copy\n\ndy = [-1, 0, 0, 1]\n\ndx = [0, -1, 1, 0]\n\nN = 3\n\ndef g(i, j, a):\n\n    t = a \/\/ (10 ** j) % 10\n\n    return a - t * (10 ** j) + t * (10 ** i)\n\ndef MAIN():\n\n    m = {8:{7, 5}, 7:{8, 6, 4}, 6:{7, 3}, 5:{8, 4, 2}, 4:{7, 5, 3, 1}, 3:{6, 4, 0}, 2:{5, 1}, 1:{4, 2, 0}, 0:{3, 1}}\n\n    MAP = \"\".join(input().replace(\" \", \"\") for _ in range(N))\n\n    start = 8 - MAP.find(\"0\")\n\n    MAP = int(MAP)\n\n    goal = ('1', '2', '3', '4', '5', '6', '7', '8', '0')\n\n    goal = 123456780\n\n    dp = deque([(0, start, MAP)])\n\n    LOG = {MAP}\n\n    while dp:\n\n        cnt, yx, M = dp.popleft()\n\n        if M == goal:\n\n            print(cnt)\n\n            break\n\n        cnt += 1\n\n        for nyx in m[yx]:\n\n            CM = g(yx, nyx, M)\n\n            if not CM in LOG:\n\n                dp.append((cnt, nyx, CM))\n\n                LOG.add(CM)\n\nMAIN()\n\n\n","target":"from collections import deque\n\nfrom copy import deepcopy, copy\n\nN = 3\n\ndef g(i, j, a):\n\n    if i > j:\n\n        i, j = j, i\n\n    return a[:i] + a[j] + a[i + 1:j] + a[i] + a[j + 1:]\n\ndef MAIN():\n\n    m = {8:{7, 5}, 7:{8, 6, 4}, 6:{7, 3}, 5:{8, 4, 2}, 4:{7, 5, 3, 1}, 3:{6, 4, 0}, 2:{5, 1}, 1:{4, 2, 0}, 0:{3, 1}}\n\n    MAP = \"\".join(input().replace(\" \", \"\") for _ in range(N))\n\n    start = MAP.find(\"0\")\n\n    goal = \"123456780\"\n\n    dp = deque([(0, start, MAP)])\n\n    LOG = {MAP}\n\n    while dp:\n\n        cnt, yx, M = dp.popleft()\n\n        if M == goal:\n\n            print(cnt)\n\n            break\n\n        cnt += 1\n\n        for nyx in m[yx]:\n\n            CM = g(yx, nyx, M)\n\n            if not CM in LOG:\n\n                dp.append((cnt, nyx, CM))\n\n                LOG.add(CM)\n\nMAIN()\n\n\n","code_v0_loc":30,"code_v1_loc":27,"code_v0_num_chars":885,"code_v1_num_chars":783,"code_v0_no_empty_lines":"from collections import deque\nfrom copy import deepcopy, copy\n\ndy = [-1, 0, 0, 1]\ndx = [0, -1, 1, 0]\nN = 3\n\n\ndef g(i, j, a):\n    t = a \/\/ (10**j) % 10\n    return a - t * (10**j) + t * (10**i)\n\n\ndef MAIN():\n    m = {\n        8: {7, 5},\n        7: {8, 6, 4},\n        6: {7, 3},\n        5: {8, 4, 2},\n        4: {7, 5, 3, 1},\n        3: {6, 4, 0},\n        2: {5, 1},\n        1: {4, 2, 0},\n        0: {3, 1},\n    }\n    MAP = \"\".join(input().replace(\" \", \"\") for _ in range(N))\n    start = 8 - MAP.find(\"0\")\n    MAP = int(MAP)\n    goal = (\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"0\")\n    goal = 123456780\n    dp = deque([(0, start, MAP)])\n    LOG = {MAP}\n    while dp:\n        cnt, yx, M = dp.popleft()\n        if M == goal:\n            print(cnt)\n            break\n        cnt += 1\n        for nyx in m[yx]:\n            CM = g(yx, nyx, M)\n            if not CM in LOG:\n                dp.append((cnt, nyx, CM))\n                LOG.add(CM)\n\n\nMAIN()\n","code_v1_no_empty_lines":"from collections import deque\nfrom copy import deepcopy, copy\n\nN = 3\n\n\ndef g(i, j, a):\n    if i > j:\n        i, j = j, i\n    return a[:i] + a[j] + a[i + 1 : j] + a[i] + a[j + 1 :]\n\n\ndef MAIN():\n    m = {\n        8: {7, 5},\n        7: {8, 6, 4},\n        6: {7, 3},\n        5: {8, 4, 2},\n        4: {7, 5, 3, 1},\n        3: {6, 4, 0},\n        2: {5, 1},\n        1: {4, 2, 0},\n        0: {3, 1},\n    }\n    MAP = \"\".join(input().replace(\" \", \"\") for _ in range(N))\n    start = MAP.find(\"0\")\n    goal = \"123456780\"\n    dp = deque([(0, start, MAP)])\n    LOG = {MAP}\n    while dp:\n        cnt, yx, M = dp.popleft()\n        if M == goal:\n            print(cnt)\n            break\n        cnt += 1\n        for nyx in m[yx]:\n            CM = g(yx, nyx, M)\n            if not CM in LOG:\n                dp.append((cnt, nyx, CM))\n                LOG.add(CM)\n\n\nMAIN()\n","code_same":false,"relative_loc_diff_percent":10.0,"diff":["-dy = [-1, 0, 0, 1]","-dx = [0, -1, 1, 0]","-    t = a \/\/ (10**j) % 10","-    return a - t * (10**j) + t * (10**i)","+    if i > j:","+        i, j = j, i","+    return a[:i] + a[j] + a[i + 1 : j] + a[i] + a[j + 1 :]","-    start = 8 - MAP.find(\"0\")","-    MAP = int(MAP)","-    goal = (\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"0\")","-    goal = 123456780","+    start = MAP.find(\"0\")","+    goal = \"123456780\""],"diff_only_import_comment":false,"measured_runtime_v0":0.3641724348,"measured_runtime_v1":0.096000421,"runtime_lift":3.7934462245,"key":["s804728708","s622088378"]}
{"user_id":"u556358547","problem_id":"p03416","language":"python","submission_id_v0":"s971943319","submission_id_v1":"s985131399","cpu_time_v0":94,"cpu_time_v1":70,"memory_v0":73744,"memory_v1":64480,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":25.53,"input":"# vim: fileencoding=utf-8\n\n\n\n\n\ndef main():\n\n    a, b = list(map(int, input().split()))\n\n    c = 0\n\n    for i in range(a, b + 1):\n\n        s = str(i)\n\n        r = \"\".join(reversed(list(s)))\n\n        if s == r:\n\n            c += 1\n\n    print(c)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"# vim: fileencoding=utf-8\n\n\n\n\n\ndef main():\n\n    a, b = list(map(int, input().split()))\n\n    c = 0\n\n    for i in range(a, b + 1):\n\n        #     s = str(i)\n\n        #     r = \"\".join(reversed(list(s)))\n\n        #     if s == r:\n\n        #         c += 1\n\n        if (i % 10) == (i \/\/ 10000 % 10) and (i \/\/ 10 % 10) == (i \/\/ 1000 % 10):\n\n            c += 1\n\n    print(c)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":16,"code_v1_loc":18,"code_v0_num_chars":281,"code_v1_num_chars":407,"code_v0_no_empty_lines":"# vim: fileencoding=utf-8\ndef main():\n    a, b = list(map(int, input().split()))\n    c = 0\n    for i in range(a, b + 1):\n        s = str(i)\n        r = \"\".join(reversed(list(s)))\n        if s == r:\n            c += 1\n    print(c)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"# vim: fileencoding=utf-8\ndef main():\n    a, b = list(map(int, input().split()))\n    c = 0\n    for i in range(a, b + 1):\n        #     s = str(i)\n        #     r = \"\".join(reversed(list(s)))\n        #     if s == r:\n        #         c += 1\n        if (i % 10) == (i \/\/ 10000 % 10) and (i \/\/ 10 % 10) == (i \/\/ 1000 % 10):\n            c += 1\n    print(c)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["-        s = str(i)","-        r = \"\".join(reversed(list(s)))","-        if s == r:","+        #     s = str(i)","+        #     r = \"\".join(reversed(list(s)))","+        #     if s == r:","+        #         c += 1","+        if (i % 10) == (i \/\/ 10000 % 10) and (i \/\/ 10 % 10) == (i \/\/ 1000 % 10):"],"diff_only_import_comment":false,"measured_runtime_v0":0.319033144,"measured_runtime_v1":0.2127196875,"runtime_lift":1.4997819327,"key":["s971943319","s985131399"]}
{"user_id":"u764401543","problem_id":"p03371","language":"python","submission_id_v0":"s157366337","submission_id_v1":"s208344914","cpu_time_v0":114,"cpu_time_v1":17,"memory_v0":2940,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":85.09,"input":"A, B, C, X, Y = list(map(int, input().split()))\n\n\n\nans = float('inf')\n\n\n\nfor i in range(10 ** 5 + 1):\n\n    ans = min(ans, A * max(X - i, 0) + B * max(Y - i, 0) + 2 * C * i)\n\nprint(ans)","target":"A, B, C, X, Y = list(map(int, input().split()))\n\n\n\n# ans = float('inf')\n\n\n\n# for i in range(10 ** 5 + 1):\n\n#     ans = min(ans, A * max(X - i, 0) + B * max(Y - i, 0) + 2 * C * i)\n\n# print(ans)\n\n\n\nmin_xy = min(X, Y)\n\nmax_xy = max(X, Y)\n\nans1 = 2 * C * min_xy + A * (X - min_xy) + B * (Y - min_xy)\n\nans2 = A * X + B * Y\n\nans3 = 2 * C * max_xy\n\nprint((min(ans1, ans2, ans3)))","code_v0_loc":7,"code_v1_loc":14,"code_v0_num_chars":178,"code_v1_num_chars":364,"code_v0_no_empty_lines":"A, B, C, X, Y = list(map(int, input().split()))\nans = float(\"inf\")\nfor i in range(10**5 + 1):\n    ans = min(ans, A * max(X - i, 0) + B * max(Y - i, 0) + 2 * C * i)\nprint(ans)\n","code_v1_no_empty_lines":"A, B, C, X, Y = list(map(int, input().split()))\n# ans = float('inf')\n# for i in range(10 ** 5 + 1):\n#     ans = min(ans, A * max(X - i, 0) + B * max(Y - i, 0) + 2 * C * i)\n# print(ans)\nmin_xy = min(X, Y)\nmax_xy = max(X, Y)\nans1 = 2 * C * min_xy + A * (X - min_xy) + B * (Y - min_xy)\nans2 = A * X + B * Y\nans3 = 2 * C * max_xy\nprint((min(ans1, ans2, ans3)))\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-ans = float(\"inf\")","-for i in range(10**5 + 1):","-    ans = min(ans, A * max(X - i, 0) + B * max(Y - i, 0) + 2 * C * i)","-print(ans)","+# ans = float('inf')","+# for i in range(10 ** 5 + 1):","+#     ans = min(ans, A * max(X - i, 0) + B * max(Y - i, 0) + 2 * C * i)","+# print(ans)","+min_xy = min(X, Y)","+max_xy = max(X, Y)","+ans1 = 2 * C * min_xy + A * (X - min_xy) + B * (Y - min_xy)","+ans2 = A * X + B * Y","+ans3 = 2 * C * max_xy","+print((min(ans1, ans2, ans3)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.8766576855,"measured_runtime_v1":0.1948450158,"runtime_lift":4.4992564066,"key":["s157366337","s208344914"]}
{"user_id":"u145231176","problem_id":"p02555","language":"python","submission_id_v0":"s435485475","submission_id_v1":"s123950040","cpu_time_v0":820,"cpu_time_v1":175,"memory_v0":97132,"memory_v1":83224,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":78.66,"input":"def getN():\n\n    return int(eval(input()))\n\ndef getNM():\n\n    return list(map(int, input().split()))\n\ndef getList():\n\n    return list(map(int, input().split()))\n\ndef getArray(intn):\n\n    return [int(eval(input())) for i in range(intn)]\n\ndef input():\n\n    return sys.stdin.readline().rstrip()\n\ndef rand_N(ran1, ran2):\n\n    return random.randint(ran1, ran2)\n\ndef rand_List(ran1, ran2, rantime):\n\n    return [random.randint(ran1, ran2) for i in range(rantime)]\n\ndef rand_ints_nodup(ran1, ran2, rantime):\n\n  ns = []\n\n  while len(ns) < rantime:\n\n    n = random.randint(ran1, ran2)\n\n    if not n in ns:\n\n      ns.append(n)\n\n  return sorted(ns)\n\n\n\ndef rand_query(ran1, ran2, rantime):\n\n  r_query = []\n\n  while len(r_query) < rantime:\n\n    n_q = rand_ints_nodup(ran1, ran2, 2)\n\n    if not n_q in r_query:\n\n      r_query.append(n_q)\n\n  return sorted(r_query)\n\n\n\nfrom collections import defaultdict, deque, Counter\n\nfrom sys import exit\n\nfrom decimal import *\n\nfrom heapq import heapify, heappop, heappush\n\nimport math\n\nimport random\n\nimport string\n\nfrom copy import deepcopy\n\nfrom itertools import combinations, permutations, product\n\nfrom operator import mul, itemgetter\n\nfrom functools import reduce\n\nfrom bisect import bisect_left, bisect_right\n\n\n\nimport sys\n\nsys.setrecursionlimit(1000000000)\n\nmod = 10 ** 9 + 7\n\n\n\n#############\n\n# Main Code #\n\n#############\n\n\n\nS = getN()\n\n\n\n# \u9006\u5143\u4e8b\u524d\u51e6\u7406ver\n\n# n\u304c\u5c0f\u3055\u3044\u5834\u5408\u306b\n\nlim = 10 ** 5 + 1\n\nfact = [1, 1]\n\nfactinv = [1, 1]\n\ninv = [0, 1]\n\n\n\nfor i in range(2, lim + 1):\n\n    fact.append((fact[-1] * i) % mod)\n\n    inv.append((-inv[mod % i] * (mod \/\/ i)) % mod)\n\n    # \u7d2f\u8a08\n\n    factinv.append((factinv[-1] * inv[-1]) % mod)\n\n\n\ndef cmb(n, r):\n\n    if (r < 0) or (n < r):\n\n        return 0\n\n    r = min(r, n - r)\n\n    return fact[n] * factinv[r] * factinv[n - r] % mod\n\n\n\nans = 0\n\n# \u9577\u3055N\u306e\u6642\u6700\u4f4e\u3067\u30823 * N\u4f7f\u3046\n\n# \u6b8b\u308a\u306f\u5206\u914d\u3059\u308b\n\nfor i in range(1, 2001):\n\n    s = S - (3 * i)\n\n    if s < 0:\n\n        break\n\n    # s\u3092N\u500b\u306b\u5206\u914d\u3059\u308b\u901a\u308a\u304c\u3044\u304f\u3064\u3042\u308b\u304b\n\n    # \u91cd\u8907\u7d44\u307f\u5408\u308f\u305b\n\n    # \u4ed5\u5207\u308a\u306e\u6570\u306fi - 1\u500b\n\n    ans += cmb(s + i - 1, i - 1)\n\nprint((ans % mod))","target":"def getN():\n\n    return int(eval(input()))\n\ndef getNM():\n\n    return list(map(int, input().split()))\n\ndef getList():\n\n    return list(map(int, input().split()))\n\ndef getArray(intn):\n\n    return [int(eval(input())) for i in range(intn)]\n\ndef input():\n\n    return sys.stdin.readline().rstrip()\n\ndef rand_N(ran1, ran2):\n\n    return random.randint(ran1, ran2)\n\ndef rand_List(ran1, ran2, rantime):\n\n    return [random.randint(ran1, ran2) for i in range(rantime)]\n\ndef rand_ints_nodup(ran1, ran2, rantime):\n\n  ns = []\n\n  while len(ns) < rantime:\n\n    n = random.randint(ran1, ran2)\n\n    if not n in ns:\n\n      ns.append(n)\n\n  return sorted(ns)\n\n\n\ndef rand_query(ran1, ran2, rantime):\n\n  r_query = []\n\n  while len(r_query) < rantime:\n\n    n_q = rand_ints_nodup(ran1, ran2, 2)\n\n    if not n_q in r_query:\n\n      r_query.append(n_q)\n\n  return sorted(r_query)\n\n\n\nfrom collections import defaultdict, deque, Counter\n\nfrom sys import exit\n\nfrom decimal import *\n\nfrom heapq import heapify, heappop, heappush\n\nimport math\n\nimport random\n\nimport string\n\nfrom copy import deepcopy\n\nfrom itertools import combinations, permutations, product\n\nfrom operator import mul, itemgetter\n\nfrom functools import reduce\n\nfrom bisect import bisect_left, bisect_right\n\n\n\nimport sys\n\nsys.setrecursionlimit(1000000000)\n\nmod = 10 ** 9 + 7\n\n\n\n#############\n\n# Main Code #\n\n#############\n\n\n\nN = getN()\n\nlogk = N.bit_length()\n\n\n\n# \u6f38\u5316\u5f0f\u306b\u3067\u304d\u308b\u306a\u3089\u884c\u5217\u8a08\u7b97\u306b\u843d\u3068\u3057\u8fbc\u3081\u308b\n\n# A[n] = A[n - 1] + A[n - 3]\u306a\u306e\u3067\n\n# [a2, a1, a0] = [0, 0, 1]\n\n# [[1, 1, 0], [0, 0, 1], [1, 0, 0]]\u306eN\u4e57\u3092\u3059\u308c\u3070\n\n# [an+2, an+1, an] \u304c\u51fa\u308b\n\n\n\ndp = [[[0, 0, 0] for i in range(3)] for i in range(logk)]\n\ndp[0] = [\n\n[1, 1, 0],\n\n[0, 0, 1],\n\n[1, 0, 0]\n\n]\n\n\n\n# \u884c\u5217\u639b\u3051\u7b97 O(n3)\u304b\u304b\u308b\n\ndef array_cnt(ar1, ar2):\n\n    h = len(ar1)\n\n    w = len(ar2[0])\n\n    row = ar1\n\n    col = []\n\n    for j in range(w):\n\n        opt = []\n\n        for i in range(len(ar2)):\n\n            opt.append(ar2[i][j])\n\n        col.append(opt)\n\n\n\n    res = [[[0, 0] for i in range(w)] for i in range(h)]\n\n    for i in range(h):\n\n        for j in range(w):\n\n            cnt = 0\n\n            for x, y in zip(row[i], col[j]):\n\n                cnt += x * y\n\n            res[i][j] = cnt\n\n            res[i][j] %= mod\n\n    return res\n\n\n\nfor i in range(1, logk):\n\n    dp[i] = array_cnt(dp[i - 1], dp[i - 1])\n\n\n\nans = [[0, 0, 1]]\n\nfor i in range(logk):\n\n    if N & (1 << i):\n\n        ans = array_cnt(ans, dp[i])\n\nprint((ans[0][2] % mod))","code_v0_loc":84,"code_v1_loc":97,"code_v0_num_chars":2000,"code_v1_num_chars":2372,"code_v0_no_empty_lines":"def getN():\n    return int(eval(input()))\n\n\ndef getNM():\n    return list(map(int, input().split()))\n\n\ndef getList():\n    return list(map(int, input().split()))\n\n\ndef getArray(intn):\n    return [int(eval(input())) for i in range(intn)]\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef rand_N(ran1, ran2):\n    return random.randint(ran1, ran2)\n\n\ndef rand_List(ran1, ran2, rantime):\n    return [random.randint(ran1, ran2) for i in range(rantime)]\n\n\ndef rand_ints_nodup(ran1, ran2, rantime):\n    ns = []\n    while len(ns) < rantime:\n        n = random.randint(ran1, ran2)\n        if not n in ns:\n            ns.append(n)\n    return sorted(ns)\n\n\ndef rand_query(ran1, ran2, rantime):\n    r_query = []\n    while len(r_query) < rantime:\n        n_q = rand_ints_nodup(ran1, ran2, 2)\n        if not n_q in r_query:\n            r_query.append(n_q)\n    return sorted(r_query)\n\n\nfrom collections import defaultdict, deque, Counter\nfrom sys import exit\nfrom decimal import *\nfrom heapq import heapify, heappop, heappush\nimport math\nimport random\nimport string\nfrom copy import deepcopy\nfrom itertools import combinations, permutations, product\nfrom operator import mul, itemgetter\nfrom functools import reduce\nfrom bisect import bisect_left, bisect_right\nimport sys\n\nsys.setrecursionlimit(1000000000)\nmod = 10**9 + 7\n#############\n# Main Code #\n#############\nS = getN()\n# \u9006\u5143\u4e8b\u524d\u51e6\u7406ver\n# n\u304c\u5c0f\u3055\u3044\u5834\u5408\u306b\nlim = 10**5 + 1\nfact = [1, 1]\nfactinv = [1, 1]\ninv = [0, 1]\nfor i in range(2, lim + 1):\n    fact.append((fact[-1] * i) % mod)\n    inv.append((-inv[mod % i] * (mod \/\/ i)) % mod)\n    # \u7d2f\u8a08\n    factinv.append((factinv[-1] * inv[-1]) % mod)\n\n\ndef cmb(n, r):\n    if (r < 0) or (n < r):\n        return 0\n    r = min(r, n - r)\n    return fact[n] * factinv[r] * factinv[n - r] % mod\n\n\nans = 0\n# \u9577\u3055N\u306e\u6642\u6700\u4f4e\u3067\u30823 * N\u4f7f\u3046\n# \u6b8b\u308a\u306f\u5206\u914d\u3059\u308b\nfor i in range(1, 2001):\n    s = S - (3 * i)\n    if s < 0:\n        break\n    # s\u3092N\u500b\u306b\u5206\u914d\u3059\u308b\u901a\u308a\u304c\u3044\u304f\u3064\u3042\u308b\u304b\n    # \u91cd\u8907\u7d44\u307f\u5408\u308f\u305b\n    # \u4ed5\u5207\u308a\u306e\u6570\u306fi - 1\u500b\n    ans += cmb(s + i - 1, i - 1)\nprint((ans % mod))\n","code_v1_no_empty_lines":"def getN():\n    return int(eval(input()))\n\n\ndef getNM():\n    return list(map(int, input().split()))\n\n\ndef getList():\n    return list(map(int, input().split()))\n\n\ndef getArray(intn):\n    return [int(eval(input())) for i in range(intn)]\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef rand_N(ran1, ran2):\n    return random.randint(ran1, ran2)\n\n\ndef rand_List(ran1, ran2, rantime):\n    return [random.randint(ran1, ran2) for i in range(rantime)]\n\n\ndef rand_ints_nodup(ran1, ran2, rantime):\n    ns = []\n    while len(ns) < rantime:\n        n = random.randint(ran1, ran2)\n        if not n in ns:\n            ns.append(n)\n    return sorted(ns)\n\n\ndef rand_query(ran1, ran2, rantime):\n    r_query = []\n    while len(r_query) < rantime:\n        n_q = rand_ints_nodup(ran1, ran2, 2)\n        if not n_q in r_query:\n            r_query.append(n_q)\n    return sorted(r_query)\n\n\nfrom collections import defaultdict, deque, Counter\nfrom sys import exit\nfrom decimal import *\nfrom heapq import heapify, heappop, heappush\nimport math\nimport random\nimport string\nfrom copy import deepcopy\nfrom itertools import combinations, permutations, product\nfrom operator import mul, itemgetter\nfrom functools import reduce\nfrom bisect import bisect_left, bisect_right\nimport sys\n\nsys.setrecursionlimit(1000000000)\nmod = 10**9 + 7\n#############\n# Main Code #\n#############\nN = getN()\nlogk = N.bit_length()\n# \u6f38\u5316\u5f0f\u306b\u3067\u304d\u308b\u306a\u3089\u884c\u5217\u8a08\u7b97\u306b\u843d\u3068\u3057\u8fbc\u3081\u308b\n# A[n] = A[n - 1] + A[n - 3]\u306a\u306e\u3067\n# [a2, a1, a0] = [0, 0, 1]\n# [[1, 1, 0], [0, 0, 1], [1, 0, 0]]\u306eN\u4e57\u3092\u3059\u308c\u3070\n# [an+2, an+1, an] \u304c\u51fa\u308b\ndp = [[[0, 0, 0] for i in range(3)] for i in range(logk)]\ndp[0] = [[1, 1, 0], [0, 0, 1], [1, 0, 0]]\n# \u884c\u5217\u639b\u3051\u7b97 O(n3)\u304b\u304b\u308b\ndef array_cnt(ar1, ar2):\n    h = len(ar1)\n    w = len(ar2[0])\n    row = ar1\n    col = []\n    for j in range(w):\n        opt = []\n        for i in range(len(ar2)):\n            opt.append(ar2[i][j])\n        col.append(opt)\n    res = [[[0, 0] for i in range(w)] for i in range(h)]\n    for i in range(h):\n        for j in range(w):\n            cnt = 0\n            for x, y in zip(row[i], col[j]):\n                cnt += x * y\n            res[i][j] = cnt\n            res[i][j] %= mod\n    return res\n\n\nfor i in range(1, logk):\n    dp[i] = array_cnt(dp[i - 1], dp[i - 1])\nans = [[0, 0, 1]]\nfor i in range(logk):\n    if N & (1 << i):\n        ans = array_cnt(ans, dp[i])\nprint((ans[0][2] % mod))\n","code_same":false,"relative_loc_diff_percent":13.4020618557,"diff":["-S = getN()","-# \u9006\u5143\u4e8b\u524d\u51e6\u7406ver","-# n\u304c\u5c0f\u3055\u3044\u5834\u5408\u306b","-lim = 10**5 + 1","-fact = [1, 1]","-factinv = [1, 1]","-inv = [0, 1]","-for i in range(2, lim + 1):","-    fact.append((fact[-1] * i) % mod)","-    inv.append((-inv[mod % i] * (mod \/\/ i)) % mod)","-    # \u7d2f\u8a08","-    factinv.append((factinv[-1] * inv[-1]) % mod)","+N = getN()","+logk = N.bit_length()","+# \u6f38\u5316\u5f0f\u306b\u3067\u304d\u308b\u306a\u3089\u884c\u5217\u8a08\u7b97\u306b\u843d\u3068\u3057\u8fbc\u3081\u308b","+# A[n] = A[n - 1] + A[n - 3]\u306a\u306e\u3067","+# [a2, a1, a0] = [0, 0, 1]","+# [[1, 1, 0], [0, 0, 1], [1, 0, 0]]\u306eN\u4e57\u3092\u3059\u308c\u3070","+# [an+2, an+1, an] \u304c\u51fa\u308b","+dp = [[[0, 0, 0] for i in range(3)] for i in range(logk)]","+dp[0] = [[1, 1, 0], [0, 0, 1], [1, 0, 0]]","+# \u884c\u5217\u639b\u3051\u7b97 O(n3)\u304b\u304b\u308b","+def array_cnt(ar1, ar2):","+    h = len(ar1)","+    w = len(ar2[0])","+    row = ar1","+    col = []","+    for j in range(w):","+        opt = []","+        for i in range(len(ar2)):","+            opt.append(ar2[i][j])","+        col.append(opt)","+    res = [[[0, 0] for i in range(w)] for i in range(h)]","+    for i in range(h):","+        for j in range(w):","+            cnt = 0","+            for x, y in zip(row[i], col[j]):","+                cnt += x * y","+            res[i][j] = cnt","+            res[i][j] %= mod","+    return res","-def cmb(n, r):","-    if (r < 0) or (n < r):","-        return 0","-    r = min(r, n - r)","-    return fact[n] * factinv[r] * factinv[n - r] % mod","-","-","-ans = 0","-# \u9577\u3055N\u306e\u6642\u6700\u4f4e\u3067\u30823 * N\u4f7f\u3046","-# \u6b8b\u308a\u306f\u5206\u914d\u3059\u308b","-for i in range(1, 2001):","-    s = S - (3 * i)","-    if s < 0:","-        break","-    # s\u3092N\u500b\u306b\u5206\u914d\u3059\u308b\u901a\u308a\u304c\u3044\u304f\u3064\u3042\u308b\u304b","-    # \u91cd\u8907\u7d44\u307f\u5408\u308f\u305b","-    # \u4ed5\u5207\u308a\u306e\u6570\u306fi - 1\u500b","-    ans += cmb(s + i - 1, i - 1)","-print((ans % mod))","+for i in range(1, logk):","+    dp[i] = array_cnt(dp[i - 1], dp[i - 1])","+ans = [[0, 0, 1]]","+for i in range(logk):","+    if N & (1 << i):","+        ans = array_cnt(ans, dp[i])","+print((ans[0][2] % mod))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3269546282,"measured_runtime_v1":0.2049855587,"runtime_lift":6.4734054256,"key":["s435485475","s123950040"]}
{"user_id":"u896741788","problem_id":"p03037","language":"python","submission_id_v0":"s129241236","submission_id_v1":"s743438543","cpu_time_v0":355,"cpu_time_v1":218,"memory_v0":7832,"memory_v1":15472,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":38.59,"input":"k,m=list(map(int,input().split()))\n\nl=[0 for i in range(k+1)]\n\nfor i in range(m):\n\n  a,s=list(map(int,input().split()))\n\n  l[a-1]+=1;l[s]-=1\n\nans=0\n\nf=0\n\nfor j in range(k):\n\n  l[j]+=f\n\n  f=l[j]\n\nprint((len([1 for i in l if i==m])))","target":"n,m=list(map(int,input().split()))\n\ntable=[0]*(n+2)\n\nfor i in range(m):\n\n    l,r=list(map(int,input().split()))\n\n    table[l]+=1\n\n    table[r+1]-=1\n\nfrom itertools import accumulate\n\nfrom collections import Counter as co\n\nvar=co((accumulate(table)))\n\n\n\nif m not in var:print((0))\n\nelse:print((var[m]))\n\n\n\n\n","code_v0_loc":11,"code_v1_loc":14,"code_v0_num_chars":217,"code_v1_num_chars":290,"code_v0_no_empty_lines":"k, m = list(map(int, input().split()))\nl = [0 for i in range(k + 1)]\nfor i in range(m):\n    a, s = list(map(int, input().split()))\n    l[a - 1] += 1\n    l[s] -= 1\nans = 0\nf = 0\nfor j in range(k):\n    l[j] += f\n    f = l[j]\nprint((len([1 for i in l if i == m])))\n","code_v1_no_empty_lines":"n, m = list(map(int, input().split()))\ntable = [0] * (n + 2)\nfor i in range(m):\n    l, r = list(map(int, input().split()))\n    table[l] += 1\n    table[r + 1] -= 1\nfrom itertools import accumulate\nfrom collections import Counter as co\n\nvar = co((accumulate(table)))\nif m not in var:\n    print((0))\nelse:\n    print((var[m]))\n","code_same":false,"relative_loc_diff_percent":21.4285714286,"diff":["-k, m = list(map(int, input().split()))","-l = [0 for i in range(k + 1)]","+n, m = list(map(int, input().split()))","+table = [0] * (n + 2)","-    a, s = list(map(int, input().split()))","-    l[a - 1] += 1","-    l[s] -= 1","-ans = 0","-f = 0","-for j in range(k):","-    l[j] += f","-    f = l[j]","-print((len([1 for i in l if i == m])))","+    l, r = list(map(int, input().split()))","+    table[l] += 1","+    table[r + 1] -= 1","+from itertools import accumulate","+from collections import Counter as co","+","+var = co((accumulate(table)))","+if m not in var:","+    print((0))","+else:","+    print((var[m]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.4122046263,"measured_runtime_v1":0.3202181025,"runtime_lift":1.2872620978,"key":["s129241236","s743438543"]}
{"user_id":"u969850098","problem_id":"p02982","language":"python","submission_id_v0":"s201924324","submission_id_v1":"s693837759","cpu_time_v0":323,"cpu_time_v1":17,"memory_v0":21432,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":94.74,"input":"import numpy as np\n\n\n\nN, D = list(map(int, input().split()))\n\npoints = [list(map(int, input().split())) for _ in range(N)]\n\ncount = 0\n\nfor i in range(N):\n\n    for j in range(N):\n\n        if j == i:\n\n            continue\n\n        dist = np.sqrt(sum([(points[i][d] - points[j][d]) ** 2 for d in range(D)]))\n\n        if dist.is_integer():\n\n            count += 1\n\nprint((count \/\/ 2))","target":"import sys\n\nsys.setrecursionlimit(10 ** 6)\n\n\n\n\n\ndef calc_dist(x, y):\n\n    dist = 0\n\n    for xi, yi in zip(x, y):\n\n        dist += (yi - xi) ** 2\n\n    return dist ** (1\/2)\n\n\n\n\n\ndef main():\n\n    N, D = list(map(int, sys.stdin.readline().rstrip().split()))\n\n    X = [list(map(int, sys.stdin.readline().rstrip().split())) for _ in range(N)]\n\n\n\n    ans = 0\n\n    for i in range(N):\n\n        for j in range(i+1, N):\n\n            dist = calc_dist(X[i], X[j])\n\n            if dist.is_integer():\n\n                ans += 1\n\n    \n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()","code_v0_loc":13,"code_v1_loc":27,"code_v0_num_chars":372,"code_v1_num_chars":571,"code_v0_no_empty_lines":"import numpy as np\n\nN, D = list(map(int, input().split()))\npoints = [list(map(int, input().split())) for _ in range(N)]\ncount = 0\nfor i in range(N):\n    for j in range(N):\n        if j == i:\n            continue\n        dist = np.sqrt(sum([(points[i][d] - points[j][d]) ** 2 for d in range(D)]))\n        if dist.is_integer():\n            count += 1\nprint((count \/\/ 2))\n","code_v1_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10**6)\n\n\ndef calc_dist(x, y):\n    dist = 0\n    for xi, yi in zip(x, y):\n        dist += (yi - xi) ** 2\n    return dist ** (1 \/ 2)\n\n\ndef main():\n    N, D = list(map(int, sys.stdin.readline().rstrip().split()))\n    X = [list(map(int, sys.stdin.readline().rstrip().split())) for _ in range(N)]\n    ans = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            dist = calc_dist(X[i], X[j])\n            if dist.is_integer():\n                ans += 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":51.8518518519,"diff":["-import numpy as np","+import sys","-N, D = list(map(int, input().split()))","-points = [list(map(int, input().split())) for _ in range(N)]","-count = 0","-for i in range(N):","-    for j in range(N):","-        if j == i:","-            continue","-        dist = np.sqrt(sum([(points[i][d] - points[j][d]) ** 2 for d in range(D)]))","-        if dist.is_integer():","-            count += 1","-print((count \/\/ 2))","+sys.setrecursionlimit(10**6)","+","+","+def calc_dist(x, y):","+    dist = 0","+    for xi, yi in zip(x, y):","+        dist += (yi - xi) ** 2","+    return dist ** (1 \/ 2)","+","+","+def main():","+    N, D = list(map(int, sys.stdin.readline().rstrip().split()))","+    X = [list(map(int, sys.stdin.readline().rstrip().split())) for _ in range(N)]","+    ans = 0","+    for i in range(N):","+        for j in range(i + 1, N):","+            dist = calc_dist(X[i], X[j])","+            if dist.is_integer():","+                ans += 1","+    print(ans)","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":1.3888782218,"measured_runtime_v1":0.1985105653,"runtime_lift":6.9964952229,"key":["s201924324","s693837759"]}
{"user_id":"u426764965","problem_id":"p02983","language":"python","submission_id_v0":"s448047238","submission_id_v1":"s995159069","cpu_time_v0":48,"cpu_time_v1":19,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":60.42,"input":"def abc133_c():\n\n    L, R = list(map(int, input().split()))\n\n    # \u533a\u9593\u306e\u5e45\u304c673\u3042\u308c\u3070\u3001673\u306e\u500d\u6570\u30683\u306e\u500d\u6570\u304c\u542b\u307e\u308c\u3066\u30012019\u306e\u500d\u6570\u304c\u4f5c\u308c\u308b\n\n    if R - L > 673: return 0\n\n    # \u305d\u308c\u4ee5\u5916\u306f\u8a66\u3059\n\n    ans = 2019\n\n    for i in range(L, R+1):\n\n        for j in range(L, i):\n\n            m = i * j % 2019\n\n            ans = min(m, ans)\n\n    return ans\n\n\n\nprint((abc133_c()))","target":"def abc133_c():\n\n    L, R = list(map(int, input().split()))\n\n    # \u533a\u9593\u306e\u5e45\u304c673\u3042\u308c\u3070\u3001673\u306e\u500d\u6570\u30683\u306e\u500d\u6570\u304c\u542b\u307e\u308c\u3066\u30012019\u306e\u500d\u6570\u304c\u4f5c\u308c\u308b\n\n    if R - L > 673: return 0\n\n    # \u305d\u308c\u4ee5\u5916\u306f\u8a66\u3059\n\n    ans = 2019\n\n    for i in range(L, R+1):\n\n        for j in range(L, i):\n\n            m = i * j % 2019\n\n            ans = min(m, ans)\n\n            if ans == 1: return 1\n\n    return ans\n\n\n\nprint((abc133_c()))","code_v0_loc":13,"code_v1_loc":14,"code_v0_num_chars":320,"code_v1_num_chars":355,"code_v0_no_empty_lines":"def abc133_c():\n    L, R = list(map(int, input().split()))\n    # \u533a\u9593\u306e\u5e45\u304c673\u3042\u308c\u3070\u3001673\u306e\u500d\u6570\u30683\u306e\u500d\u6570\u304c\u542b\u307e\u308c\u3066\u30012019\u306e\u500d\u6570\u304c\u4f5c\u308c\u308b\n    if R - L > 673:\n        return 0\n    # \u305d\u308c\u4ee5\u5916\u306f\u8a66\u3059\n    ans = 2019\n    for i in range(L, R + 1):\n        for j in range(L, i):\n            m = i * j % 2019\n            ans = min(m, ans)\n    return ans\n\n\nprint((abc133_c()))\n","code_v1_no_empty_lines":"def abc133_c():\n    L, R = list(map(int, input().split()))\n    # \u533a\u9593\u306e\u5e45\u304c673\u3042\u308c\u3070\u3001673\u306e\u500d\u6570\u30683\u306e\u500d\u6570\u304c\u542b\u307e\u308c\u3066\u30012019\u306e\u500d\u6570\u304c\u4f5c\u308c\u308b\n    if R - L > 673:\n        return 0\n    # \u305d\u308c\u4ee5\u5916\u306f\u8a66\u3059\n    ans = 2019\n    for i in range(L, R + 1):\n        for j in range(L, i):\n            m = i * j % 2019\n            ans = min(m, ans)\n            if ans == 1:\n                return 1\n    return ans\n\n\nprint((abc133_c()))\n","code_same":false,"relative_loc_diff_percent":7.1428571429,"diff":["+            if ans == 1:","+                return 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.302429297,"measured_runtime_v1":0.2001894107,"runtime_lift":1.5107157566,"key":["s448047238","s995159069"]}
{"user_id":"u025501820","problem_id":"p02792","language":"python","submission_id_v0":"s746150122","submission_id_v1":"s989284284","cpu_time_v0":318,"cpu_time_v1":169,"memory_v0":3064,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":46.86,"input":"N = int(eval(input()))\n\ncount = [[0 for _ in range(9)] for _ in range(9)]\n\nfor i in range(1, N + 1):\n\n    if str(i)[0] != \"0\" and str(i)[-1] != \"0\":\n\n        count[int(str(i)[0]) - 1][int(str(i)[-1]) - 1] += 1\n\nans = 0\n\nfor i in range(0, 9):\n\n    for k in range(0, 9):\n\n        ans += count[i][k] * count[k][i]\n\nprint(ans)","target":"N = int(eval(input()))\n\nnums = [0 for i in range(100)]\n\nfor i in range(1, N + 1):\n\n    i = str(i)\n\n    nums[int(i[0] + i[-1])] += 1\n\nans = 0\n\nfor i in range(1, 10):\n\n    for j in range(i, 10):\n\n        i = str(i)\n\n        j = str(j)\n\n        if i != j:\n\n            ans += nums[int(i + j)] * nums[int(j + i)] * 2\n\n        else:\n\n            n = nums[int(i + j)]\n\n            ans += n * (n - 1)\n\n            ans += n\n\nprint(ans)","code_v0_loc":10,"code_v1_loc":17,"code_v0_num_chars":316,"code_v1_num_chars":421,"code_v0_no_empty_lines":"N = int(eval(input()))\ncount = [[0 for _ in range(9)] for _ in range(9)]\nfor i in range(1, N + 1):\n    if str(i)[0] != \"0\" and str(i)[-1] != \"0\":\n        count[int(str(i)[0]) - 1][int(str(i)[-1]) - 1] += 1\nans = 0\nfor i in range(0, 9):\n    for k in range(0, 9):\n        ans += count[i][k] * count[k][i]\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nnums = [0 for i in range(100)]\nfor i in range(1, N + 1):\n    i = str(i)\n    nums[int(i[0] + i[-1])] += 1\nans = 0\nfor i in range(1, 10):\n    for j in range(i, 10):\n        i = str(i)\n        j = str(j)\n        if i != j:\n            ans += nums[int(i + j)] * nums[int(j + i)] * 2\n        else:\n            n = nums[int(i + j)]\n            ans += n * (n - 1)\n            ans += n\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":41.1764705882,"diff":["-count = [[0 for _ in range(9)] for _ in range(9)]","+nums = [0 for i in range(100)]","-    if str(i)[0] != \"0\" and str(i)[-1] != \"0\":","-        count[int(str(i)[0]) - 1][int(str(i)[-1]) - 1] += 1","+    i = str(i)","+    nums[int(i[0] + i[-1])] += 1","-for i in range(0, 9):","-    for k in range(0, 9):","-        ans += count[i][k] * count[k][i]","+for i in range(1, 10):","+    for j in range(i, 10):","+        i = str(i)","+        j = str(j)","+        if i != j:","+            ans += nums[int(i + j)] * nums[int(j + i)] * 2","+        else:","+            n = nums[int(i + j)]","+            ans += n * (n - 1)","+            ans += n"],"diff_only_import_comment":false,"measured_runtime_v0":0.4702084679,"measured_runtime_v1":0.3054097801,"runtime_lift":1.5395985934,"key":["s746150122","s989284284"]}
{"user_id":"u934442292","problem_id":"p02690","language":"python","submission_id_v0":"s609043772","submission_id_v1":"s337405796","cpu_time_v0":74,"cpu_time_v1":53,"memory_v0":9148,"memory_v1":9132,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":28.38,"input":"import sys\n\n\n\ninput = sys.stdin.readline\n\n\n\n\n\ndef main():\n\n    X = int(eval(input()))\n\n\n\n    for A in range(-200, 201):\n\n        for B in range(-200, 201):\n\n            if A ** 5 - B ** 5 == X:\n\n                print((A, B))\n\n                exit()\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"import sys\n\n\n\ninput = sys.stdin.readline\n\n\n\n\n\ndef main():\n\n    X = int(eval(input()))\n\n\n\n    for A in range(-119, 120 + 1):\n\n        for B in range(-119, 120 + 1):\n\n            if A ** 5 - B ** 5 == X:\n\n                print((A, B))\n\n                exit()\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":17,"code_v1_loc":17,"code_v0_num_chars":285,"code_v1_num_chars":293,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\n\n\ndef main():\n    X = int(eval(input()))\n    for A in range(-200, 201):\n        for B in range(-200, 201):\n            if A**5 - B**5 == X:\n                print((A, B))\n                exit()\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\n\n\ndef main():\n    X = int(eval(input()))\n    for A in range(-119, 120 + 1):\n        for B in range(-119, 120 + 1):\n            if A**5 - B**5 == X:\n                print((A, B))\n                exit()\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    for A in range(-200, 201):","-        for B in range(-200, 201):","+    for A in range(-119, 120 + 1):","+        for B in range(-119, 120 + 1):"],"diff_only_import_comment":false,"measured_runtime_v0":0.4475147168,"measured_runtime_v1":0.2975374639,"runtime_lift":1.5040617437,"key":["s609043772","s337405796"]}
{"user_id":"u588341295","problem_id":"p03078","language":"python","submission_id_v0":"s622309249","submission_id_v1":"s171509372","cpu_time_v0":118,"cpu_time_v1":37,"memory_v0":8728,"memory_v1":4976,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":68.64,"input":"# -*- coding: utf-8 -*-\n\n\n\nimport sys\n\n\n\ndef input(): return sys.stdin.readline().strip()\n\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\n\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\n\ndef ceil(x, y=1): return int(-(-x \/\/ y))\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(): return list(map(int, input().split()))\n\ndef Yes(): print('Yes')\n\ndef No(): print('No')\n\ndef YES(): print('YES')\n\ndef NO(): print('NO')\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = float('inf')\n\nMOD = 10 ** 9 + 7\n\n\n\nX,Y,Z,K=MAP()\n\nA=sorted(LIST(), reverse=True)\n\nB=sorted(LIST(), reverse=True)\n\nC=sorted(LIST(), reverse=True)\n\n\n\nABC=[]\n\nfor i in range(X):\n\n    for j in range(Y):\n\n        if (i+1)*(j+1)>K:\n\n            break\n\n        for k in range(Z):\n\n            if (i+1)*(j+1)*(k+1)>K:\n\n                break\n\n            ABC.append(A[i]+B[j]+C[k])\n\nABC.sort(reverse=True)\n\nfor i in range(K):\n\n    print((ABC[i]))\n\n\n","target":"# -*- coding: utf-8 -*-\n\n\n\nimport sys\n\nfrom heapq import heappush, heappop\n\n\n\ndef input(): return sys.stdin.readline().strip()\n\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\n\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\n\ndef ceil(x, y=1): return int(-(-x \/\/ y))\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(): return list(map(int, input().split()))\n\ndef Yes(): print('Yes')\n\ndef No(): print('No')\n\ndef YES(): print('YES')\n\ndef NO(): print('NO')\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = float('inf')\n\nMOD = 10 ** 9 + 7\n\n\n\nX,Y,Z,K=MAP()\n\nA=sorted(LIST(), reverse=True)\n\nB=sorted(LIST(), reverse=True)\n\nC=sorted(LIST(), reverse=True)\n\n\n\n\n\nque=[]\n\nheappush(que, (-(A[0]+B[0]+C[0]), 0, 0, 0))\n\nS={(0,0,0)}\n\nfor i in range(K):\n\n    ans=heappop(que)\n\n    print((-ans[0]))\n\n    a,b,c=ans[1:]\n\n    if a+1<X and (a+1,b,c) not in S:\n\n        heappush(que, (-(A[a+1]+B[b]+C[c]), a+1, b, c))\n\n        S.add((a+1,b,c))\n\n    if b+1<Y and (a,b+1,c) not in S:\n\n        heappush(que, (-(A[a]+B[b+1]+C[c]), a, b+1, c))\n\n        S.add((a,b+1,c))\n\n    if c+1<Z and (a,b,c+1) not in S:\n\n        heappush(que, (-(A[a]+B[b]+C[c+1]), a, b, c+1))\n\n        S.add((a,b,c+1))\n","code_v0_loc":37,"code_v1_loc":42,"code_v0_num_chars":971,"code_v1_num_chars":1229,"code_v0_no_empty_lines":"# -*- coding: utf-8 -*-\nimport sys\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef list2d(a, b, c):\n    return [[c] * b for i in range(a)]\n\n\ndef list3d(a, b, c, d):\n    return [[[d] * c for j in range(b)] for i in range(a)]\n\n\ndef ceil(x, y=1):\n    return int(-(-x \/\/ y))\n\n\ndef INT():\n    return int(eval(input()))\n\n\ndef MAP():\n    return list(map(int, input().split()))\n\n\ndef LIST():\n    return list(map(int, input().split()))\n\n\ndef Yes():\n    print(\"Yes\")\n\n\ndef No():\n    print(\"No\")\n\n\ndef YES():\n    print(\"YES\")\n\n\ndef NO():\n    print(\"NO\")\n\n\nsys.setrecursionlimit(10**9)\nINF = float(\"inf\")\nMOD = 10**9 + 7\nX, Y, Z, K = MAP()\nA = sorted(LIST(), reverse=True)\nB = sorted(LIST(), reverse=True)\nC = sorted(LIST(), reverse=True)\nABC = []\nfor i in range(X):\n    for j in range(Y):\n        if (i + 1) * (j + 1) > K:\n            break\n        for k in range(Z):\n            if (i + 1) * (j + 1) * (k + 1) > K:\n                break\n            ABC.append(A[i] + B[j] + C[k])\nABC.sort(reverse=True)\nfor i in range(K):\n    print((ABC[i]))\n","code_v1_no_empty_lines":"# -*- coding: utf-8 -*-\nimport sys\nfrom heapq import heappush, heappop\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef list2d(a, b, c):\n    return [[c] * b for i in range(a)]\n\n\ndef list3d(a, b, c, d):\n    return [[[d] * c for j in range(b)] for i in range(a)]\n\n\ndef ceil(x, y=1):\n    return int(-(-x \/\/ y))\n\n\ndef INT():\n    return int(eval(input()))\n\n\ndef MAP():\n    return list(map(int, input().split()))\n\n\ndef LIST():\n    return list(map(int, input().split()))\n\n\ndef Yes():\n    print(\"Yes\")\n\n\ndef No():\n    print(\"No\")\n\n\ndef YES():\n    print(\"YES\")\n\n\ndef NO():\n    print(\"NO\")\n\n\nsys.setrecursionlimit(10**9)\nINF = float(\"inf\")\nMOD = 10**9 + 7\nX, Y, Z, K = MAP()\nA = sorted(LIST(), reverse=True)\nB = sorted(LIST(), reverse=True)\nC = sorted(LIST(), reverse=True)\nque = []\nheappush(que, (-(A[0] + B[0] + C[0]), 0, 0, 0))\nS = {(0, 0, 0)}\nfor i in range(K):\n    ans = heappop(que)\n    print((-ans[0]))\n    a, b, c = ans[1:]\n    if a + 1 < X and (a + 1, b, c) not in S:\n        heappush(que, (-(A[a + 1] + B[b] + C[c]), a + 1, b, c))\n        S.add((a + 1, b, c))\n    if b + 1 < Y and (a, b + 1, c) not in S:\n        heappush(que, (-(A[a] + B[b + 1] + C[c]), a, b + 1, c))\n        S.add((a, b + 1, c))\n    if c + 1 < Z and (a, b, c + 1) not in S:\n        heappush(que, (-(A[a] + B[b] + C[c + 1]), a, b, c + 1))\n        S.add((a, b, c + 1))\n","code_same":false,"relative_loc_diff_percent":11.9047619048,"diff":["+from heapq import heappush, heappop","-ABC = []","-for i in range(X):","-    for j in range(Y):","-        if (i + 1) * (j + 1) > K:","-            break","-        for k in range(Z):","-            if (i + 1) * (j + 1) * (k + 1) > K:","-                break","-            ABC.append(A[i] + B[j] + C[k])","-ABC.sort(reverse=True)","+que = []","+heappush(que, (-(A[0] + B[0] + C[0]), 0, 0, 0))","+S = {(0, 0, 0)}","-    print((ABC[i]))","+    ans = heappop(que)","+    print((-ans[0]))","+    a, b, c = ans[1:]","+    if a + 1 < X and (a + 1, b, c) not in S:","+        heappush(que, (-(A[a + 1] + B[b] + C[c]), a + 1, b, c))","+        S.add((a + 1, b, c))","+    if b + 1 < Y and (a, b + 1, c) not in S:","+        heappush(que, (-(A[a] + B[b + 1] + C[c]), a, b + 1, c))","+        S.add((a, b + 1, c))","+    if c + 1 < Z and (a, b, c + 1) not in S:","+        heappush(que, (-(A[a] + B[b] + C[c + 1]), a, b, c + 1))","+        S.add((a, b, c + 1))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2840606916,"measured_runtime_v1":0.2124910862,"runtime_lift":1.3368122711,"key":["s622309249","s171509372"]}
{"user_id":"u216928054","problem_id":"p02560","language":"python","submission_id_v0":"s978863609","submission_id_v1":"s598945859","cpu_time_v0":297,"cpu_time_v1":234,"memory_v0":78412,"memory_v1":70336,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":21.21,"input":"#!\/usr\/bin\/env python3\n\nimport sys\n\nsys.setrecursionlimit(10**6)\n\nINF = 10 ** 9 + 1  # sys.maxsize # float(\"inf\")\n\nMOD = 10 ** 9 + 7\n\n\n\n\n\ndef floor_sum(n, m, a, b):\n\n    ret = 0\n\n    if a >= m:\n\n        ret += (n - 1) * n * (a \/\/ m) \/\/ 2\n\n        a %= m\n\n    if b >= m:\n\n        ret += n * (b \/\/ m)\n\n        b %= m\n\n    y_max = (a * n + b) \/\/ m\n\n    x_max = y_max * m - b\n\n    if y_max == 0:\n\n        return ret\n\n    ret += (n - (x_max + a - 1) \/\/ a) * y_max\n\n    ret += floor_sum(y_max, a, m, (a - x_max % a) % a)\n\n    return ret\n\n\n\n\n\ndef debug(*x):\n\n    print(*x, file=sys.stderr)\n\n\n\n\n\ndef solve(SOLVE_PARAMS):\n\n    pass\n\n\n\n\n\ndef main():\n\n    # parse input\n\n    T = int(input())\n\n    for _t in range(T):\n\n        N, M, A, B = map(int, input().split())\n\n        print(floor_sum(N, M, A, B))\n\n\n\n\n\n# tests\n\nT1 = \"\"\"\n\n5\n\n4 10 6 3\n\n6 5 4 3\n\n1 1 0 0\n\n31415 92653 58979 32384\n\n1000000000 1000000000 999999999 999999999\n\n\"\"\"\n\nTEST_T1 = \"\"\"\n\n>>> as_input(T1)\n\n>>> main()\n\n3\n\n13\n\n0\n\n314095480\n\n499999999500000000\n\n\"\"\"\n\n\n\n\n\ndef _test():\n\n    import doctest\n\n    doctest.testmod()\n\n    g = globals()\n\n    for k in sorted(g):\n\n        if k.startswith(\"TEST_\"):\n\n            doctest.run_docstring_examples(g[k], g, name=k)\n\n\n\n\n\ndef as_input(s):\n\n    \"use in test, use given string as input file\"\n\n    import io\n\n    f = io.StringIO(s.strip())\n\n    g = globals()\n\n    g[\"input\"] = lambda: bytes(f.readline(), \"ascii\")\n\n    g[\"read\"] = lambda: bytes(f.read(), \"ascii\")\n\n\n\n\n\ninput = sys.stdin.buffer.readline\n\nread = sys.stdin.buffer.read\n\n\n\nif sys.argv[-1] == \"-t\":\n\n    print(\"testing\")\n\n    _test()\n\n    sys.exit()\n\n\n\nmain()\n","target":"#!\/usr\/bin\/env python3\n\nimport sys\n\nsys.setrecursionlimit(10**6)\n\nINF = 10 ** 9 + 1  # sys.maxsize # float(\"inf\")\n\nMOD = 10 ** 9 + 7\n\n\n\n\n\ndef floor_sum_1(n, m, a, b):\n\n    ret = 0\n\n    if a >= m:\n\n        ret += (n - 1) * n * (a \/\/ m) \/\/ 2\n\n        a %= m\n\n    if b >= m:\n\n        ret += n * (b \/\/ m)\n\n        b %= m\n\n    y_max = (a * n + b) \/\/ m\n\n    x_max = y_max * m - b\n\n    if y_max == 0:\n\n        return ret\n\n    ret += (n - (x_max + a - 1) \/\/ a) * y_max\n\n    ret += floor_sum(y_max, a, m, (a - x_max % a) % a)\n\n    return ret\n\n\n\n\n\ndef floor_sum(n, m, a, b):\n\n    ret = 0\n\n    while True:\n\n        if a >= m:\n\n            ret += (n - 1) * n * (a \/\/ m) \/\/ 2\n\n            a %= m\n\n        if b >= m:\n\n            ret += n * (b \/\/ m)\n\n            b %= m\n\n        y_max = (a * n + b) \/\/ m\n\n        x_max = y_max * m - b\n\n        if y_max == 0:\n\n            return ret\n\n        ret += (n - (x_max + a - 1) \/\/ a) * y_max\n\n        n = y_max\n\n        m, a, b = a, m, (a - x_max % a) % a\n\n\n\n\n\ndef debug(*x):\n\n    print(*x, file=sys.stderr)\n\n\n\n\n\ndef solve(SOLVE_PARAMS):\n\n    pass\n\n\n\n\n\ndef main():\n\n    # parse input\n\n    T = int(input())\n\n    for _t in range(T):\n\n        N, M, A, B = map(int, input().split())\n\n        print(floor_sum(N, M, A, B))\n\n\n\n\n\n# tests\n\nT1 = \"\"\"\n\n5\n\n4 10 6 3\n\n6 5 4 3\n\n1 1 0 0\n\n31415 92653 58979 32384\n\n1000000000 1000000000 999999999 999999999\n\n\"\"\"\n\nTEST_T1 = \"\"\"\n\n>>> as_input(T1)\n\n>>> main()\n\n3\n\n13\n\n0\n\n314095480\n\n499999999500000000\n\n\"\"\"\n\n\n\n\n\ndef _test():\n\n    import doctest\n\n    doctest.testmod()\n\n    g = globals()\n\n    for k in sorted(g):\n\n        if k.startswith(\"TEST_\"):\n\n            doctest.run_docstring_examples(g[k], g, name=k)\n\n\n\n\n\ndef as_input(s):\n\n    \"use in test, use given string as input file\"\n\n    import io\n\n    f = io.StringIO(s.strip())\n\n    g = globals()\n\n    g[\"input\"] = lambda: bytes(f.readline(), \"ascii\")\n\n    g[\"read\"] = lambda: bytes(f.read(), \"ascii\")\n\n\n\n\n\ninput = sys.stdin.buffer.readline\n\nread = sys.stdin.buffer.read\n\n\n\nif sys.argv[-1] == \"-t\":\n\n    print(\"testing\")\n\n    _test()\n\n    sys.exit()\n\n\n\nmain()\n","code_v0_loc":87,"code_v1_loc":105,"code_v0_num_chars":1613,"code_v1_num_chars":2066,"code_v0_no_empty_lines":"#!\/usr\/bin\/env python3\nimport sys\n\nsys.setrecursionlimit(10**6)\nINF = 10**9 + 1  # sys.maxsize # float(\"inf\")\nMOD = 10**9 + 7\n\n\ndef floor_sum(n, m, a, b):\n    ret = 0\n    if a >= m:\n        ret += (n - 1) * n * (a \/\/ m) \/\/ 2\n        a %= m\n    if b >= m:\n        ret += n * (b \/\/ m)\n        b %= m\n    y_max = (a * n + b) \/\/ m\n    x_max = y_max * m - b\n    if y_max == 0:\n        return ret\n    ret += (n - (x_max + a - 1) \/\/ a) * y_max\n    ret += floor_sum(y_max, a, m, (a - x_max % a) % a)\n    return ret\n\n\ndef debug(*x):\n    print(*x, file=sys.stderr)\n\n\ndef solve(SOLVE_PARAMS):\n    pass\n\n\ndef main():\n    # parse input\n    T = int(input())\n    for _t in range(T):\n        N, M, A, B = map(int, input().split())\n        print(floor_sum(N, M, A, B))\n\n\n# tests\nT1 = \"\"\"\n5\n4 10 6 3\n6 5 4 3\n1 1 0 0\n31415 92653 58979 32384\n1000000000 1000000000 999999999 999999999\n\"\"\"\nTEST_T1 = \"\"\"\n>>> as_input(T1)\n>>> main()\n3\n13\n0\n314095480\n499999999500000000\n\"\"\"\n\n\ndef _test():\n    import doctest\n\n    doctest.testmod()\n    g = globals()\n    for k in sorted(g):\n        if k.startswith(\"TEST_\"):\n            doctest.run_docstring_examples(g[k], g, name=k)\n\n\ndef as_input(s):\n    \"use in test, use given string as input file\"\n    import io\n\n    f = io.StringIO(s.strip())\n    g = globals()\n    g[\"input\"] = lambda: bytes(f.readline(), \"ascii\")\n    g[\"read\"] = lambda: bytes(f.read(), \"ascii\")\n\n\ninput = sys.stdin.buffer.readline\nread = sys.stdin.buffer.read\nif sys.argv[-1] == \"-t\":\n    print(\"testing\")\n    _test()\n    sys.exit()\nmain()\n","code_v1_no_empty_lines":"#!\/usr\/bin\/env python3\nimport sys\n\nsys.setrecursionlimit(10**6)\nINF = 10**9 + 1  # sys.maxsize # float(\"inf\")\nMOD = 10**9 + 7\n\n\ndef floor_sum_1(n, m, a, b):\n    ret = 0\n    if a >= m:\n        ret += (n - 1) * n * (a \/\/ m) \/\/ 2\n        a %= m\n    if b >= m:\n        ret += n * (b \/\/ m)\n        b %= m\n    y_max = (a * n + b) \/\/ m\n    x_max = y_max * m - b\n    if y_max == 0:\n        return ret\n    ret += (n - (x_max + a - 1) \/\/ a) * y_max\n    ret += floor_sum(y_max, a, m, (a - x_max % a) % a)\n    return ret\n\n\ndef floor_sum(n, m, a, b):\n    ret = 0\n    while True:\n        if a >= m:\n            ret += (n - 1) * n * (a \/\/ m) \/\/ 2\n            a %= m\n        if b >= m:\n            ret += n * (b \/\/ m)\n            b %= m\n        y_max = (a * n + b) \/\/ m\n        x_max = y_max * m - b\n        if y_max == 0:\n            return ret\n        ret += (n - (x_max + a - 1) \/\/ a) * y_max\n        n = y_max\n        m, a, b = a, m, (a - x_max % a) % a\n\n\ndef debug(*x):\n    print(*x, file=sys.stderr)\n\n\ndef solve(SOLVE_PARAMS):\n    pass\n\n\ndef main():\n    # parse input\n    T = int(input())\n    for _t in range(T):\n        N, M, A, B = map(int, input().split())\n        print(floor_sum(N, M, A, B))\n\n\n# tests\nT1 = \"\"\"\n5\n4 10 6 3\n6 5 4 3\n1 1 0 0\n31415 92653 58979 32384\n1000000000 1000000000 999999999 999999999\n\"\"\"\nTEST_T1 = \"\"\"\n>>> as_input(T1)\n>>> main()\n3\n13\n0\n314095480\n499999999500000000\n\"\"\"\n\n\ndef _test():\n    import doctest\n\n    doctest.testmod()\n    g = globals()\n    for k in sorted(g):\n        if k.startswith(\"TEST_\"):\n            doctest.run_docstring_examples(g[k], g, name=k)\n\n\ndef as_input(s):\n    \"use in test, use given string as input file\"\n    import io\n\n    f = io.StringIO(s.strip())\n    g = globals()\n    g[\"input\"] = lambda: bytes(f.readline(), \"ascii\")\n    g[\"read\"] = lambda: bytes(f.read(), \"ascii\")\n\n\ninput = sys.stdin.buffer.readline\nread = sys.stdin.buffer.read\nif sys.argv[-1] == \"-t\":\n    print(\"testing\")\n    _test()\n    sys.exit()\nmain()\n","code_same":false,"relative_loc_diff_percent":17.1428571429,"diff":["-def floor_sum(n, m, a, b):","+def floor_sum_1(n, m, a, b):","+","+","+def floor_sum(n, m, a, b):","+    ret = 0","+    while True:","+        if a >= m:","+            ret += (n - 1) * n * (a \/\/ m) \/\/ 2","+            a %= m","+        if b >= m:","+            ret += n * (b \/\/ m)","+            b %= m","+        y_max = (a * n + b) \/\/ m","+        x_max = y_max * m - b","+        if y_max == 0:","+            return ret","+        ret += (n - (x_max + a - 1) \/\/ a) * y_max","+        n = y_max","+        m, a, b = a, m, (a - x_max % a) % a"],"diff_only_import_comment":false,"measured_runtime_v0":0.1788789105,"measured_runtime_v1":0.0066359096,"runtime_lift":26.9562007629,"key":["s978863609","s598945859"]}
{"user_id":"u595289165","problem_id":"p03060","language":"python","submission_id_v0":"s881584489","submission_id_v1":"s205765913","cpu_time_v0":149,"cpu_time_v1":17,"memory_v0":12508,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.59,"input":"import numpy as np\n\nn = int(eval(input()))\n\nvalue = np.array(tuple(map(int, input().split())))\n\ncost = np.array(tuple(map(int, input().split())))\n\nxy = value - cost\n\nans = 0\n\nfor i in range(n):\n\n    if xy[i] < 0:\n\n        continue\n\n    else:\n\n        ans += xy[i]\n\nprint(ans)","target":"n = int(eval(input()))\n\nvalue = tuple(map(int, input().split()))\n\ncost = tuple(map(int, input().split()))\n\n# i\u3053\u3081\u307e\u3067\u306ex\u30fcy\u306e\u6700\u5927\u5024\n\ninf = -100\n\ndp = [inf] * (n+1)\n\ndp[1] = max(0, value[0]-cost[0])\n\nfor i in range(2, n+1):\n\n    dp[i] = max(dp[i-1], dp[i-1]+value[i-1]-cost[i-1])\n\n\n\nprint((dp[n]))\n","code_v0_loc":12,"code_v1_loc":11,"code_v0_num_chars":269,"code_v1_num_chars":280,"code_v0_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\nvalue = np.array(tuple(map(int, input().split())))\ncost = np.array(tuple(map(int, input().split())))\nxy = value - cost\nans = 0\nfor i in range(n):\n    if xy[i] < 0:\n        continue\n    else:\n        ans += xy[i]\nprint(ans)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nvalue = tuple(map(int, input().split()))\ncost = tuple(map(int, input().split()))\n# i\u3053\u3081\u307e\u3067\u306ex\u30fcy\u306e\u6700\u5927\u5024\ninf = -100\ndp = [inf] * (n + 1)\ndp[1] = max(0, value[0] - cost[0])\nfor i in range(2, n + 1):\n    dp[i] = max(dp[i - 1], dp[i - 1] + value[i - 1] - cost[i - 1])\nprint((dp[n]))\n","code_same":false,"relative_loc_diff_percent":8.3333333333,"diff":["-import numpy as np","-","-value = np.array(tuple(map(int, input().split())))","-cost = np.array(tuple(map(int, input().split())))","-xy = value - cost","-ans = 0","-for i in range(n):","-    if xy[i] < 0:","-        continue","-    else:","-        ans += xy[i]","-print(ans)","+value = tuple(map(int, input().split()))","+cost = tuple(map(int, input().split()))","+# i\u3053\u3081\u307e\u3067\u306ex\u30fcy\u306e\u6700\u5927\u5024","+inf = -100","+dp = [inf] * (n + 1)","+dp[1] = max(0, value[0] - cost[0])","+for i in range(2, n + 1):","+    dp[i] = max(dp[i - 1], dp[i - 1] + value[i - 1] - cost[i - 1])","+print((dp[n]))"],"diff_only_import_comment":false,"measured_runtime_v0":1.4092471268,"measured_runtime_v1":0.2268988938,"runtime_lift":6.2109034687,"key":["s881584489","s205765913"]}
{"user_id":"u442877951","problem_id":"p02881","language":"python","submission_id_v0":"s498895748","submission_id_v1":"s605488454","cpu_time_v0":574,"cpu_time_v1":295,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":48.61,"input":"import math\n\nN = int(eval(input()))\n\nans = 10**12\n\nfor i in range(1,10**6+1):\n\n  j = math.ceil(N\/(i+1))\n\n  if (1+i)*j == N:\n\n    ans = min(i+j-1,ans)\n\n  if i == 10**6 and ans == 10**12:\n\n    ans = N-1\n\n    break\n\nprint(ans)","target":"N = int(eval(input()))\n\nans = 10**12\n\nfor i in range(1,10**6+1):\n\n  j = N\/\/i\n\n  if i*j == N:\n\n    ans = min(i+j-2,ans)\n\n  if i == 10**6 and ans == 10**12:\n\n    ans = N-1\n\n    break\n\nprint(ans)","code_v0_loc":11,"code_v1_loc":10,"code_v0_num_chars":217,"code_v1_num_chars":186,"code_v0_no_empty_lines":"import math\n\nN = int(eval(input()))\nans = 10**12\nfor i in range(1, 10**6 + 1):\n    j = math.ceil(N \/ (i + 1))\n    if (1 + i) * j == N:\n        ans = min(i + j - 1, ans)\n    if i == 10**6 and ans == 10**12:\n        ans = N - 1\n        break\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nans = 10**12\nfor i in range(1, 10**6 + 1):\n    j = N \/\/ i\n    if i * j == N:\n        ans = min(i + j - 2, ans)\n    if i == 10**6 and ans == 10**12:\n        ans = N - 1\n        break\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":9.0909090909,"diff":["-import math","-","-    j = math.ceil(N \/ (i + 1))","-    if (1 + i) * j == N:","-        ans = min(i + j - 1, ans)","+    j = N \/\/ i","+    if i * j == N:","+        ans = min(i + j - 2, ans)"],"diff_only_import_comment":false,"measured_runtime_v0":3.3566168053,"measured_runtime_v1":2.0076369724,"runtime_lift":1.6719241832,"key":["s498895748","s605488454"]}
{"user_id":"u951601135","problem_id":"p03434","language":"python","submission_id_v0":"s638983666","submission_id_v1":"s443344147","cpu_time_v0":149,"cpu_time_v1":17,"memory_v0":12504,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.59,"input":"import numpy as np\n\nN = int(eval(input()))\n\nvalue = list(map(int,input().split()))\n\nvalue=np.sort(value)[::-1]\n\n#print(N,value)\n\na = np.sum(value[::2])\n\nb = np.sum(value[1::2])\n\nprint((a-b))","target":"n = int(eval(input()))\n\na = sorted(list(map(int, input().split())), reverse=True)\n\nprint((sum(a[::2]) - sum(a[1::2])))\n","code_v0_loc":8,"code_v1_loc":3,"code_v0_num_chars":182,"code_v1_num_chars":111,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nvalue = list(map(int, input().split()))\nvalue = np.sort(value)[::-1]\n# print(N,value)\na = np.sum(value[::2])\nb = np.sum(value[1::2])\nprint((a - b))\n","code_v1_no_empty_lines":"n = int(eval(input()))\na = sorted(list(map(int, input().split())), reverse=True)\nprint((sum(a[::2]) - sum(a[1::2])))\n","code_same":false,"relative_loc_diff_percent":62.5,"diff":["-import numpy as np","-","-N = int(eval(input()))","-value = list(map(int, input().split()))","-value = np.sort(value)[::-1]","-# print(N,value)","-a = np.sum(value[::2])","-b = np.sum(value[1::2])","-print((a - b))","+n = int(eval(input()))","+a = sorted(list(map(int, input().split())), reverse=True)","+print((sum(a[::2]) - sum(a[1::2])))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3596615281,"measured_runtime_v1":0.1847207425,"runtime_lift":7.3606326496,"key":["s638983666","s443344147"]}
{"user_id":"u864197622","problem_id":"p02758","language":"python","submission_id_v0":"s598598719","submission_id_v1":"s066197035","cpu_time_v0":1348,"cpu_time_v1":954,"memory_v0":102564,"memory_v1":97192,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":29.23,"input":"mod = 998244353\n\nN = int(eval(input()))\n\nX = []\n\nfor _ in range(N):\n\n    x, d = list(map(int, input().split()))\n\n    X.append((x, x + d))\n\n\n\nX = sorted(X, key = lambda x: x[0])\n\nL = [(0, -(10**9+1), 10**9+1)]\n\nP = [-1] * (N+1)\n\nfor i, (x, y) in enumerate(X):\n\n    while L[-1][2] <= y:\n\n        if L[-1][2] > x and P[i+1] < 0:\n\n            P[i+1] = L[-1][0]\n\n        L.pop()\n\n    if P[i+1] < 0:\n\n        P[i+1] = L[-1][0]\n\n    L.append((i+1, x, y))\n\n\n\nC = [[] for _ in range(N+1)]\n\nfor i, p in enumerate(P):\n\n    if p >= 0:\n\n        C[p].append(i)\n\n\n\nY = [1] * (N+1)\n\nfor i in range(N+1)[::-1]:\n\n    s = 1\n\n    for j in C[i]:\n\n        s = s * (Y[j] + 1) % mod\n\n    Y[i] = s\n\n\n\nprint((Y[0]))","target":"import sys\n\ninput = sys.stdin.readline\n\n\n\nmod = 998244353\n\nN = int(eval(input()))\n\nX = []\n\nfor _ in range(N):\n\n    x, d = list(map(int, input().split()))\n\n    X.append((x, x + d))\n\n\n\nX = sorted(X, key = lambda x: x[0])\n\nL = [(0, -(10**9+1), 10**9+1)]\n\nP = [-1] * (N+1)\n\nfor i, (x, y) in enumerate(X):\n\n    while L[-1][2] <= y:\n\n        if L[-1][2] > x and P[i+1] < 0:\n\n            P[i+1] = L[-1][0]\n\n        L.pop()\n\n    if P[i+1] < 0:\n\n        P[i+1] = L[-1][0]\n\n    L.append((i+1, x, y))\n\n\n\nC = [[] for _ in range(N+1)]\n\nfor i, p in enumerate(P):\n\n    if p >= 0:\n\n        C[p].append(i)\n\n\n\nY = [1] * (N+1)\n\nfor i in range(N+1)[::-1]:\n\n    s = 1\n\n    for j in C[i]:\n\n        s = s * (Y[j] + 1) % mod\n\n    Y[i] = s\n\n\n\nprint((Y[0]))","code_v0_loc":32,"code_v1_loc":35,"code_v0_num_chars":675,"code_v1_num_chars":717,"code_v0_no_empty_lines":"mod = 998244353\nN = int(eval(input()))\nX = []\nfor _ in range(N):\n    x, d = list(map(int, input().split()))\n    X.append((x, x + d))\nX = sorted(X, key=lambda x: x[0])\nL = [(0, -(10**9 + 1), 10**9 + 1)]\nP = [-1] * (N + 1)\nfor i, (x, y) in enumerate(X):\n    while L[-1][2] <= y:\n        if L[-1][2] > x and P[i + 1] < 0:\n            P[i + 1] = L[-1][0]\n        L.pop()\n    if P[i + 1] < 0:\n        P[i + 1] = L[-1][0]\n    L.append((i + 1, x, y))\nC = [[] for _ in range(N + 1)]\nfor i, p in enumerate(P):\n    if p >= 0:\n        C[p].append(i)\nY = [1] * (N + 1)\nfor i in range(N + 1)[::-1]:\n    s = 1\n    for j in C[i]:\n        s = s * (Y[j] + 1) % mod\n    Y[i] = s\nprint((Y[0]))\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nmod = 998244353\nN = int(eval(input()))\nX = []\nfor _ in range(N):\n    x, d = list(map(int, input().split()))\n    X.append((x, x + d))\nX = sorted(X, key=lambda x: x[0])\nL = [(0, -(10**9 + 1), 10**9 + 1)]\nP = [-1] * (N + 1)\nfor i, (x, y) in enumerate(X):\n    while L[-1][2] <= y:\n        if L[-1][2] > x and P[i + 1] < 0:\n            P[i + 1] = L[-1][0]\n        L.pop()\n    if P[i + 1] < 0:\n        P[i + 1] = L[-1][0]\n    L.append((i + 1, x, y))\nC = [[] for _ in range(N + 1)]\nfor i, p in enumerate(P):\n    if p >= 0:\n        C[p].append(i)\nY = [1] * (N + 1)\nfor i in range(N + 1)[::-1]:\n    s = 1\n    for j in C[i]:\n        s = s * (Y[j] + 1) % mod\n    Y[i] = s\nprint((Y[0]))\n","code_same":false,"relative_loc_diff_percent":8.5714285714,"diff":["+import sys","+","+input = sys.stdin.readline"],"diff_only_import_comment":false,"measured_runtime_v0":0.2547301891,"measured_runtime_v1":0.0065454967,"runtime_lift":38.9168615134,"key":["s598598719","s066197035"]}
{"user_id":"u539692012","problem_id":"p02622","language":"python","submission_id_v0":"s511745855","submission_id_v1":"s953276742","cpu_time_v0":78,"cpu_time_v1":44,"memory_v0":68212,"memory_v1":9464,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":43.59,"input":"print((sum(si != ti for si, ti in zip(eval(input()), eval(input())))))\n","target":"print((sum(a!=b for a,b in zip(*open(0)))))","code_v0_loc":1,"code_v1_loc":1,"code_v0_num_chars":57,"code_v1_num_chars":41,"code_v0_no_empty_lines":"print((sum(si != ti for si, ti in zip(eval(input()), eval(input())))))\n","code_v1_no_empty_lines":"print((sum(a != b for a, b in zip(*open(0)))))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-print((sum(si != ti for si, ti in zip(eval(input()), eval(input())))))","+print((sum(a != b for a, b in zip(*open(0)))))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3334237881,"measured_runtime_v1":0.1220404458,"runtime_lift":2.7320761232,"key":["s511745855","s953276742"]}
{"user_id":"u739959951","problem_id":"p02994","language":"python","submission_id_v0":"s666163340","submission_id_v1":"s556555369","cpu_time_v0":150,"cpu_time_v1":17,"memory_v0":12500,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.67,"input":"n,a=list(map(int,input().split()))\n\n\n\nl=[a+i-1 for i in range(1,n+1)]\n\n\n\nimport numpy as np\n\nb=min(np.abs(l))\n\n\n\nif b==0:\n\n  l.remove(0)\n\nelif b in l:\n\n  l.remove(b)\n\nelif -b in l:\n\n  l.remove(-b)\n\n  \n\nprint((sum(l)))","target":"n,a=list(map(int,input().split()))\n\n\n\napples=[a+i for i in range(n)]\n\neat=min(apples,key=lambda x:abs(x))\n\nres=sum(apples)-eat\n\n\n\nprint(res)","code_v0_loc":15,"code_v1_loc":7,"code_v0_num_chars":209,"code_v1_num_chars":134,"code_v0_no_empty_lines":"n, a = list(map(int, input().split()))\nl = [a + i - 1 for i in range(1, n + 1)]\nimport numpy as np\n\nb = min(np.abs(l))\nif b == 0:\n    l.remove(0)\nelif b in l:\n    l.remove(b)\nelif -b in l:\n    l.remove(-b)\nprint((sum(l)))\n","code_v1_no_empty_lines":"n, a = list(map(int, input().split()))\napples = [a + i for i in range(n)]\neat = min(apples, key=lambda x: abs(x))\nres = sum(apples) - eat\nprint(res)\n","code_same":false,"relative_loc_diff_percent":53.3333333333,"diff":["-l = [a + i - 1 for i in range(1, n + 1)]","-import numpy as np","-","-b = min(np.abs(l))","-if b == 0:","-    l.remove(0)","-elif b in l:","-    l.remove(b)","-elif -b in l:","-    l.remove(-b)","-print((sum(l)))","+apples = [a + i for i in range(n)]","+eat = min(apples, key=lambda x: abs(x))","+res = sum(apples) - eat","+print(res)"],"diff_only_import_comment":false,"measured_runtime_v0":1.1117280972,"measured_runtime_v1":0.1730254316,"runtime_lift":6.4252294396,"key":["s666163340","s556555369"]}
{"user_id":"u540631540","problem_id":"p02767","language":"python","submission_id_v0":"s304816826","submission_id_v1":"s138180908","cpu_time_v0":22,"cpu_time_v1":19,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.64,"input":"n = int(eval(input()))\n\nx = [int(i) for i in input().split()]\n\np = 10000000\n\nfor i in range(100):\n\n    pi = 0\n\n    for j in range(n):\n\n        pi += (x[j] - (i + 1))**2\n\n    if pi < p:\n\n        p = pi\n\n    # else:\n\n    #     break\n\n        # p[i] += (x[j]-(i+1))**2\n\nprint(p)","target":"n = int(eval(input()))\n\nx = [int(i) for i in input().split()]\n\np = 10000000\n\nfor i in range(100):\n\n    pi = 0\n\n    for j in range(n):\n\n        pi += (x[j] - (i + 1))**2\n\n    if pi < p:\n\n        p = pi\n\n    else:\n\n        break\n\n        # p[i] += (x[j]-(i+1))**2\n\nprint(p)","code_v0_loc":13,"code_v1_loc":13,"code_v0_num_chars":269,"code_v1_num_chars":265,"code_v0_no_empty_lines":"n = int(eval(input()))\nx = [int(i) for i in input().split()]\np = 10000000\nfor i in range(100):\n    pi = 0\n    for j in range(n):\n        pi += (x[j] - (i + 1)) ** 2\n    if pi < p:\n        p = pi\n    # else:\n    #     break\n    # p[i] += (x[j]-(i+1))**2\nprint(p)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nx = [int(i) for i in input().split()]\np = 10000000\nfor i in range(100):\n    pi = 0\n    for j in range(n):\n        pi += (x[j] - (i + 1)) ** 2\n    if pi < p:\n        p = pi\n    else:\n        break\n        # p[i] += (x[j]-(i+1))**2\nprint(p)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    # else:","-    #     break","-    # p[i] += (x[j]-(i+1))**2","+    else:","+        break","+        # p[i] += (x[j]-(i+1))**2"],"diff_only_import_comment":false,"measured_runtime_v0":0.18753242,"measured_runtime_v1":0.0060767163,"runtime_lift":30.860815536,"key":["s304816826","s138180908"]}
{"user_id":"u994988729","problem_id":"p03575","language":"python","submission_id_v0":"s496930898","submission_id_v1":"s370133718","cpu_time_v0":237,"cpu_time_v1":22,"memory_v0":16952,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":90.72,"input":"from scipy.sparse.csgraph import floyd_warshall\n\nimport numpy as np\n\nimport sys\n\n\n\ninput = sys.stdin.readline\n\n\n\nN, M = list(map(int, input().split()))\n\nAB = []\n\nedge = np.zeros((N, N), dtype=int)\n\nfor _ in range(M):\n\n    a, b = list(map(int, input().split()))\n\n    a -= 1\n\n    b -= 1\n\n    AB.append((a, b))\n\n    edge[a][b] = 1\n\n    edge[b][a] = 1\n\n\n\nans = 0\n\nfor i in range(M):\n\n    graph = np.copy(edge)\n\n    a, b = AB[i]\n\n    graph[a][b] = 0\n\n    graph[b][a] = 0\n\n    fw = floyd_warshall(graph)\n\n    if fw.max() > 10000:\n\n        ans += 1\n\n\n\nprint(ans)\n","target":"import sys\n\ninput = sys.stdin.buffer.readline\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\n\n\nclass UF_tree:\n\n    def __init__(self, n):\n\n        self.root = [-1] * (n + 1)  # -1\u306a\u3089\u305d\u306e\u30ce\u30fc\u30c9\u304c\u6839,\u3067\u7d76\u5bfe\u5024\u304c\u6728\u306e\u8981\u7d20\u6570\n\n        self.rank = [0] * (n + 1)\n\n\n\n    def find(self, x):  # x\u306e\u6839\u3068\u306a\u308b\u8981\u7d20\u756a\u53f7\u3092\u8fd4\u3059\n\n        if self.root[x] < 0:\n\n            return x\n\n        else:\n\n            self.root[x] = self.find(self.root[x])\n\n            return self.root[x]\n\n\n\n    def isSame(self, x, y):\n\n        return self.find(x) == self.find(y)\n\n\n\n    def unite(self, x, y):\n\n        x = self.find(x)\n\n        y = self.find(y)\n\n        if x == y:\n\n            return\n\n        elif self.rank[x] < self.rank[y]:\n\n            self.root[y] += self.root[x]\n\n            self.root[x] = y\n\n        else:\n\n            self.root[x] += self.root[y]\n\n            self.root[y] = x\n\n            if self.rank[x] == self.rank[y]:\n\n                self.rank[x] += 1\n\n\n\n    def getNodeLen(self, x):\n\n        return -self.root[self.find(x)]\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    N, M = list(map(int, input().split()))\n\n    AB = tuple(tuple(map(int, input().split())) for _ in range(M))\n\n\n\n    ans = 0\n\n    for i in range(M):\n\n        uf = UF_tree(N)\n\n        for j, (a, b) in enumerate(AB):\n\n            if i == j:\n\n                continue\n\n            uf.unite(a, b)\n\n        a, b = AB[i]\n\n        if not uf.isSame(a, b):\n\n            ans += 1\n\n    print(ans)","code_v0_loc":28,"code_v1_loc":53,"code_v0_num_chars":544,"code_v1_num_chars":1385,"code_v0_no_empty_lines":"from scipy.sparse.csgraph import floyd_warshall\nimport numpy as np\nimport sys\n\ninput = sys.stdin.readline\nN, M = list(map(int, input().split()))\nAB = []\nedge = np.zeros((N, N), dtype=int)\nfor _ in range(M):\n    a, b = list(map(int, input().split()))\n    a -= 1\n    b -= 1\n    AB.append((a, b))\n    edge[a][b] = 1\n    edge[b][a] = 1\nans = 0\nfor i in range(M):\n    graph = np.copy(edge)\n    a, b = AB[i]\n    graph[a][b] = 0\n    graph[b][a] = 0\n    fw = floyd_warshall(graph)\n    if fw.max() > 10000:\n        ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.buffer.readline\nsys.setrecursionlimit(10**7)\n\n\nclass UF_tree:\n    def __init__(self, n):\n        self.root = [-1] * (n + 1)  # -1\u306a\u3089\u305d\u306e\u30ce\u30fc\u30c9\u304c\u6839,\u3067\u7d76\u5bfe\u5024\u304c\u6728\u306e\u8981\u7d20\u6570\n        self.rank = [0] * (n + 1)\n\n    def find(self, x):  # x\u306e\u6839\u3068\u306a\u308b\u8981\u7d20\u756a\u53f7\u3092\u8fd4\u3059\n        if self.root[x] < 0:\n            return x\n        else:\n            self.root[x] = self.find(self.root[x])\n            return self.root[x]\n\n    def isSame(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def unite(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return\n        elif self.rank[x] < self.rank[y]:\n            self.root[y] += self.root[x]\n            self.root[x] = y\n        else:\n            self.root[x] += self.root[y]\n            self.root[y] = x\n            if self.rank[x] == self.rank[y]:\n                self.rank[x] += 1\n\n    def getNodeLen(self, x):\n        return -self.root[self.find(x)]\n\n\nif __name__ == \"__main__\":\n    N, M = list(map(int, input().split()))\n    AB = tuple(tuple(map(int, input().split())) for _ in range(M))\n    ans = 0\n    for i in range(M):\n        uf = UF_tree(N)\n        for j, (a, b) in enumerate(AB):\n            if i == j:\n                continue\n            uf.unite(a, b)\n        a, b = AB[i]\n        if not uf.isSame(a, b):\n            ans += 1\n    print(ans)\n","code_same":false,"relative_loc_diff_percent":47.1698113208,"diff":["-from scipy.sparse.csgraph import floyd_warshall","-import numpy as np","-input = sys.stdin.readline","-N, M = list(map(int, input().split()))","-AB = []","-edge = np.zeros((N, N), dtype=int)","-for _ in range(M):","-    a, b = list(map(int, input().split()))","-    a -= 1","-    b -= 1","-    AB.append((a, b))","-    edge[a][b] = 1","-    edge[b][a] = 1","-ans = 0","-for i in range(M):","-    graph = np.copy(edge)","-    a, b = AB[i]","-    graph[a][b] = 0","-    graph[b][a] = 0","-    fw = floyd_warshall(graph)","-    if fw.max() > 10000:","-        ans += 1","-print(ans)","+input = sys.stdin.buffer.readline","+sys.setrecursionlimit(10**7)","+","+","+class UF_tree:","+    def __init__(self, n):","+        self.root = [-1] * (n + 1)  # -1\u306a\u3089\u305d\u306e\u30ce\u30fc\u30c9\u304c\u6839,\u3067\u7d76\u5bfe\u5024\u304c\u6728\u306e\u8981\u7d20\u6570","+        self.rank = [0] * (n + 1)","+","+    def find(self, x):  # x\u306e\u6839\u3068\u306a\u308b\u8981\u7d20\u756a\u53f7\u3092\u8fd4\u3059","+        if self.root[x] < 0:","+            return x","+        else:","+            self.root[x] = self.find(self.root[x])","+            return self.root[x]","+","+    def isSame(self, x, y):","+        return self.find(x) == self.find(y)","+","+    def unite(self, x, y):","+        x = self.find(x)","+        y = self.find(y)","+        if x == y:","+            return","+        elif self.rank[x] < self.rank[y]:","+            self.root[y] += self.root[x]","+            self.root[x] = y","+        else:","+            self.root[x] += self.root[y]","+            self.root[y] = x","+            if self.rank[x] == self.rank[y]:","+                self.rank[x] += 1","+","+    def getNodeLen(self, x):","+        return -self.root[self.find(x)]","+","+","+if __name__ == \"__main__\":","+    N, M = list(map(int, input().split()))","+    AB = tuple(tuple(map(int, input().split())) for _ in range(M))","+    ans = 0","+    for i in range(M):","+        uf = UF_tree(N)","+        for j, (a, b) in enumerate(AB):","+            if i == j:","+                continue","+            uf.unite(a, b)","+        a, b = AB[i]","+        if not uf.isSame(a, b):","+            ans += 1","+    print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.9811262887,"measured_runtime_v1":0.2078541028,"runtime_lift":9.5313311664,"key":["s496930898","s370133718"]}
{"user_id":"u314837274","problem_id":"p03680","language":"python","submission_id_v0":"s559205616","submission_id_v1":"s048885906","cpu_time_v0":239,"cpu_time_v1":97,"memory_v0":15992,"memory_v1":15984,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":59.41,"input":"N=int(eval(input()))\n\n\n\n\n\na = []\n\n\n\nfor i in range(N):\n\n    a.append(int(eval(input())))\n\n# a=[0]*N\n\n# for i in range(N):\n\n#   a[i]=int(input())\n\ncount=0\n\n\n\n#loop\u306e\u5b9a\u7fa9\u2192\u540c\u3058\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f7f\u7528\u3057\u305f\u3089loop\u5224\u5b9a\n\n#in \u306e\u51e6\u7406\u3092\u7206\u901f\u3067\u5b9f\u884c\u3059\u308b\u305f\u3081\u306bset\u3092\u4f7f\u7528\u3059\u308b\n\n#loop=[]\n\nloop=set()\n\n\n\ntmp=1\n\nwhile True:  \n\n  tmp=a[tmp-1]\n\n  count+=1\n\n  if tmp==2:\n\n    print(count)\n\n    exit()\n\n  if tmp-1 in loop:\n\n    print((-1))\n\n    exit()\n\n  #loop.append(tmp-1)\n\n  loop.add(tmp-1)","target":"N=int(eval(input()))\n\n#\u8907\u6570\u884c\u306e\u5165\u529b\u3092\u9ad8\u901f\u5316\n\n#a=[0]*N\n\n#for i in range(N):\n\n#  a[i]=int(input())\n\nimport sys\n\na=[int(i) for i in sys.stdin]\n\n\n\ncount=0\n\n\n\n#loop\u306e\u5b9a\u7fa9\u2192\u540c\u3058\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f7f\u7528\u3057\u305f\u3089loop\u5224\u5b9a\n\n#in \u306e\u51e6\u7406\u3092\u7206\u901f\u3067\u5b9f\u884c\u3059\u308b\u305f\u3081\u306bset\u3092\u4f7f\u7528\u3059\u308b\n\n#loop=[]\n\nloop=set()\n\n\n\ntmp=1\n\nwhile True:  \n\n  tmp=a[tmp-1]\n\n  count+=1\n\n  if tmp==2:\n\n    print(count)\n\n    exit()\n\n  if tmp-1 in loop:\n\n    print((-1))\n\n    exit()\n\n  #loop.append(tmp-1)\n\n  loop.add(tmp-1)","code_v0_loc":29,"code_v1_loc":27,"code_v0_num_chars":410,"code_v1_num_chars":403,"code_v0_no_empty_lines":"N = int(eval(input()))\na = []\nfor i in range(N):\n    a.append(int(eval(input())))\n# a=[0]*N\n# for i in range(N):\n#   a[i]=int(input())\ncount = 0\n# loop\u306e\u5b9a\u7fa9\u2192\u540c\u3058\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f7f\u7528\u3057\u305f\u3089loop\u5224\u5b9a\n# in \u306e\u51e6\u7406\u3092\u7206\u901f\u3067\u5b9f\u884c\u3059\u308b\u305f\u3081\u306bset\u3092\u4f7f\u7528\u3059\u308b\n# loop=[]\nloop = set()\ntmp = 1\nwhile True:\n    tmp = a[tmp - 1]\n    count += 1\n    if tmp == 2:\n        print(count)\n        exit()\n    if tmp - 1 in loop:\n        print((-1))\n        exit()\n    # loop.append(tmp-1)\n    loop.add(tmp - 1)\n","code_v1_no_empty_lines":"N = int(eval(input()))\n# \u8907\u6570\u884c\u306e\u5165\u529b\u3092\u9ad8\u901f\u5316\n# a=[0]*N\n# for i in range(N):\n#  a[i]=int(input())\nimport sys\n\na = [int(i) for i in sys.stdin]\ncount = 0\n# loop\u306e\u5b9a\u7fa9\u2192\u540c\u3058\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f7f\u7528\u3057\u305f\u3089loop\u5224\u5b9a\n# in \u306e\u51e6\u7406\u3092\u7206\u901f\u3067\u5b9f\u884c\u3059\u308b\u305f\u3081\u306bset\u3092\u4f7f\u7528\u3059\u308b\n# loop=[]\nloop = set()\ntmp = 1\nwhile True:\n    tmp = a[tmp - 1]\n    count += 1\n    if tmp == 2:\n        print(count)\n        exit()\n    if tmp - 1 in loop:\n        print((-1))\n        exit()\n    # loop.append(tmp-1)\n    loop.add(tmp - 1)\n","code_same":false,"relative_loc_diff_percent":6.8965517241,"diff":["-a = []","-for i in range(N):","-    a.append(int(eval(input())))","+# \u8907\u6570\u884c\u306e\u5165\u529b\u3092\u9ad8\u901f\u5316","-#   a[i]=int(input())","+#  a[i]=int(input())","+import sys","+","+a = [int(i) for i in sys.stdin]"],"diff_only_import_comment":false,"measured_runtime_v0":0.214360534,"measured_runtime_v1":0.0060836313,"runtime_lift":35.2356222521,"key":["s559205616","s048885906"]}
{"user_id":"u867069435","problem_id":"p03494","language":"python","submission_id_v0":"s169961096","submission_id_v1":"s264260313","cpu_time_v0":335,"cpu_time_v1":17,"memory_v0":20580,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":94.93,"input":"import numpy as np\n\nn = int(eval(input()))\n\nballs = np.array(list(map(int, input().split())))\n\ntime = 0\n\nwhile np.all(balls % 2 == 0) and np.all(balls > 0):\n\n    time += 1\n\n    balls = balls \/ 2\n\nprint(time)","target":"import math\n\nn = eval(input())\n\na = list(map(int, input().split()))\n\nans = float(\"inf\")\n\nfor i in a:\n\n    ans = min(ans, len(bin(i)) - bin(i).rfind(\"1\") - 1)\n\nprint((round(ans)))","code_v0_loc":8,"code_v1_loc":7,"code_v0_num_chars":201,"code_v1_num_chars":170,"code_v0_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\nballs = np.array(list(map(int, input().split())))\ntime = 0\nwhile np.all(balls % 2 == 0) and np.all(balls > 0):\n    time += 1\n    balls = balls \/ 2\nprint(time)\n","code_v1_no_empty_lines":"import math\n\nn = eval(input())\na = list(map(int, input().split()))\nans = float(\"inf\")\nfor i in a:\n    ans = min(ans, len(bin(i)) - bin(i).rfind(\"1\") - 1)\nprint((round(ans)))\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-import numpy as np","+import math","-n = int(eval(input()))","-balls = np.array(list(map(int, input().split())))","-time = 0","-while np.all(balls % 2 == 0) and np.all(balls > 0):","-    time += 1","-    balls = balls \/ 2","-print(time)","+n = eval(input())","+a = list(map(int, input().split()))","+ans = float(\"inf\")","+for i in a:","+    ans = min(ans, len(bin(i)) - bin(i).rfind(\"1\") - 1)","+print((round(ans)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3781843102,"measured_runtime_v1":0.2403370705,"runtime_lift":5.7343809154,"key":["s169961096","s264260313"]}
{"user_id":"u316386814","problem_id":"p03608","language":"python","submission_id_v0":"s433890015","submission_id_v1":"s895796017","cpu_time_v0":713,"cpu_time_v1":509,"memory_v0":13028,"memory_v1":13576,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":28.61,"input":"n, m, r = list(map(int, input().split()))\n\nrs = list(map(int, input().split()))\n\n# construct map\n\nimport numpy as np\n\ndists = np.ones((n + 1, n + 1)) * float('inf')\n\nfor _ in range(m):\n\n    a, b, c = list(map(int, input().split()))\n\n    dists[a, b] = dists[b, a] = c\n\nfor i in range(1, n + 1):\n\n    dists[i, i] = 0\n\n\n\nfrom itertools import product, permutations\n\nfor i, j in product(list(range(1, 1 + n)), repeat=2):\n\n    dists[j] = np.minimum(dists[j], dists[i] + dists[j, i])\n\n\n\nans = float('inf')\n\nfor path in permutations(rs):\n\n    val = sum(dists[i, j] for i, j in zip(path, path[1:]))\n\n    val = int(val)\n\n    if val < ans:\n\n        ans = val\n\n\n\nprint(ans)","target":"n, m, r = list(map(int, input().split()))\n\nrs = list(map(int, input().split()))\n\n# construct map\n\nimport numpy as np\n\ndists = np.ones((n + 1, n + 1)) * float('inf')\n\nfor _ in range(m):\n\n    a, b, c = list(map(int, input().split()))\n\n    dists[a, b] = dists[b, a] = c\n\nfor i in range(1, n + 1):\n\n    dists[i, i] = 0\n\n\n\nfrom itertools import permutations\n\nfor i in range(1, 1 + n):\n\n    dists = np.minimum(dists, dists[i: i + 1] + dists[:, i: i + 1])\n\n\n\nans = float('inf')\n\nfor path in permutations(rs):\n\n    val = sum(dists[i, j] for i, j in zip(path, path[1:]))\n\n    val = int(val)\n\n    if val < ans:\n\n        ans = val\n\n\n\nprint(ans)","code_v0_loc":23,"code_v1_loc":23,"code_v0_num_chars":656,"code_v1_num_chars":633,"code_v0_no_empty_lines":"n, m, r = list(map(int, input().split()))\nrs = list(map(int, input().split()))\n# construct map\nimport numpy as np\n\ndists = np.ones((n + 1, n + 1)) * float(\"inf\")\nfor _ in range(m):\n    a, b, c = list(map(int, input().split()))\n    dists[a, b] = dists[b, a] = c\nfor i in range(1, n + 1):\n    dists[i, i] = 0\nfrom itertools import product, permutations\n\nfor i, j in product(list(range(1, 1 + n)), repeat=2):\n    dists[j] = np.minimum(dists[j], dists[i] + dists[j, i])\nans = float(\"inf\")\nfor path in permutations(rs):\n    val = sum(dists[i, j] for i, j in zip(path, path[1:]))\n    val = int(val)\n    if val < ans:\n        ans = val\nprint(ans)\n","code_v1_no_empty_lines":"n, m, r = list(map(int, input().split()))\nrs = list(map(int, input().split()))\n# construct map\nimport numpy as np\n\ndists = np.ones((n + 1, n + 1)) * float(\"inf\")\nfor _ in range(m):\n    a, b, c = list(map(int, input().split()))\n    dists[a, b] = dists[b, a] = c\nfor i in range(1, n + 1):\n    dists[i, i] = 0\nfrom itertools import permutations\n\nfor i in range(1, 1 + n):\n    dists = np.minimum(dists, dists[i : i + 1] + dists[:, i : i + 1])\nans = float(\"inf\")\nfor path in permutations(rs):\n    val = sum(dists[i, j] for i, j in zip(path, path[1:]))\n    val = int(val)\n    if val < ans:\n        ans = val\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-from itertools import product, permutations","+from itertools import permutations","-for i, j in product(list(range(1, 1 + n)), repeat=2):","-    dists[j] = np.minimum(dists[j], dists[i] + dists[j, i])","+for i in range(1, 1 + n):","+    dists = np.minimum(dists, dists[i : i + 1] + dists[:, i : i + 1])"],"diff_only_import_comment":false,"measured_runtime_v0":1.845153213,"measured_runtime_v1":0.7010826969,"runtime_lift":2.6318624338,"key":["s433890015","s895796017"]}
{"user_id":"u297574184","problem_id":"p02792","language":"python","submission_id_v0":"s401307257","submission_id_v1":"s179676165","cpu_time_v0":236,"cpu_time_v1":18,"memory_v0":3064,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":92.37,"input":"def solve():\n\n    N = int(eval(input()))\n\n\n\n    numss = [[0]*(10) for _ in range(10)]\n\n    for x in range(1, 10):\n\n        for y in range(1, 10):\n\n            num = 0\n\n            for d in range(1, 5):\n\n                for i in range(10**d):\n\n                    j = x*10**(d+1) + i*10 + y\n\n                    if 1 <= j <= N:\n\n                        num += 1\n\n                    else:\n\n                        break\n\n            j = x*10 + y\n\n            if 1 <= j <= N:\n\n                num += 1\n\n            if x == y:\n\n                j = x\n\n                if 1 <= j <= N:\n\n                    num += 1\n\n            numss[x][y] = num\n\n\n\n    ans = 0\n\n    for A in range(1, N+1):\n\n        ss = str(A)\n\n        ans += numss[int(ss[-1])][int(ss[0])]\n\n\n\n    print(ans)\n\n\n\n\n\nsolve()\n","target":"def solve():\n\n    strN = eval(input())\n\n    N = int(strN)\n\n\n\n    maxD = len(strN)\n\n\n\n    numss = [[0]*(10) for _ in range(10)]\n\n    for x in range(1, 10):\n\n        for y in range(1, 10):\n\n            num = 0\n\n            for d in range(1, maxD-2):\n\n                num += 10**d\n\n            if maxD-2 > 0:\n\n                if x < int(strN[0]):\n\n                    num += 10**(maxD-2)\n\n                elif x == int(strN[0]):\n\n                    num += int(strN[1:-1]) + 1\n\n                    if y > int(strN[-1]):\n\n                        num -= 1\n\n            j = x*10 + y\n\n            if 1 <= j <= N:\n\n                num += 1\n\n            if x == y:\n\n                j = x\n\n                if 1 <= j <= N:\n\n                    num += 1\n\n            numss[x][y] = num\n\n\n\n    ans = 0\n\n    for i in range(1, 10):\n\n        for j in range(1, 10):\n\n            ans += numss[i][j]*numss[j][i]\n\n\n\n    print(ans)\n\n\n\n\n\nsolve()\n","code_v0_loc":32,"code_v1_loc":37,"code_v0_num_chars":778,"code_v1_num_chars":917,"code_v0_no_empty_lines":"def solve():\n    N = int(eval(input()))\n    numss = [[0] * (10) for _ in range(10)]\n    for x in range(1, 10):\n        for y in range(1, 10):\n            num = 0\n            for d in range(1, 5):\n                for i in range(10**d):\n                    j = x * 10 ** (d + 1) + i * 10 + y\n                    if 1 <= j <= N:\n                        num += 1\n                    else:\n                        break\n            j = x * 10 + y\n            if 1 <= j <= N:\n                num += 1\n            if x == y:\n                j = x\n                if 1 <= j <= N:\n                    num += 1\n            numss[x][y] = num\n    ans = 0\n    for A in range(1, N + 1):\n        ss = str(A)\n        ans += numss[int(ss[-1])][int(ss[0])]\n    print(ans)\n\n\nsolve()\n","code_v1_no_empty_lines":"def solve():\n    strN = eval(input())\n    N = int(strN)\n    maxD = len(strN)\n    numss = [[0] * (10) for _ in range(10)]\n    for x in range(1, 10):\n        for y in range(1, 10):\n            num = 0\n            for d in range(1, maxD - 2):\n                num += 10**d\n            if maxD - 2 > 0:\n                if x < int(strN[0]):\n                    num += 10 ** (maxD - 2)\n                elif x == int(strN[0]):\n                    num += int(strN[1:-1]) + 1\n                    if y > int(strN[-1]):\n                        num -= 1\n            j = x * 10 + y\n            if 1 <= j <= N:\n                num += 1\n            if x == y:\n                j = x\n                if 1 <= j <= N:\n                    num += 1\n            numss[x][y] = num\n    ans = 0\n    for i in range(1, 10):\n        for j in range(1, 10):\n            ans += numss[i][j] * numss[j][i]\n    print(ans)\n\n\nsolve()\n","code_same":false,"relative_loc_diff_percent":13.5135135135,"diff":["-    N = int(eval(input()))","+    strN = eval(input())","+    N = int(strN)","+    maxD = len(strN)","-            for d in range(1, 5):","-                for i in range(10**d):","-                    j = x * 10 ** (d + 1) + i * 10 + y","-                    if 1 <= j <= N:","-                        num += 1","-                    else:","-                        break","+            for d in range(1, maxD - 2):","+                num += 10**d","+            if maxD - 2 > 0:","+                if x < int(strN[0]):","+                    num += 10 ** (maxD - 2)","+                elif x == int(strN[0]):","+                    num += int(strN[1:-1]) + 1","+                    if y > int(strN[-1]):","+                        num -= 1","-    for A in range(1, N + 1):","-        ss = str(A)","-        ans += numss[int(ss[-1])][int(ss[0])]","+    for i in range(1, 10):","+        for j in range(1, 10):","+            ans += numss[i][j] * numss[j][i]"],"diff_only_import_comment":false,"measured_runtime_v0":0.3220527915,"measured_runtime_v1":0.2179562147,"runtime_lift":1.4776031599,"key":["s401307257","s179676165"]}
{"user_id":"u777923818","problem_id":"p03086","language":"python","submission_id_v0":"s716593637","submission_id_v1":"s955967436","cpu_time_v0":22,"cpu_time_v1":17,"memory_v0":3316,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":22.73,"input":"# -*- coding: utf-8 -*-\n\nfrom collections import deque\n\ndef inpl(): return list(map(int, input().split()))\n\n\n\nS = eval(input())\n\nA = set(\"ATCG\")\n\nans = 0\n\nmode = 0\n\nfor i, s in enumerate(S):\n\n    if s in A:\n\n        if mode == 0:\n\n            mode = 1\n\n            start = i\n\n    else:\n\n        if mode == 1:\n\n            ans = max(i - start, ans)\n\n            mode = 0\n\nif mode == 1:\n\n    ans = max(len(S) - start, ans)\n\nprint(ans)","target":"def inpl(): return list(map(int, input().split()))\n\nS = eval(input())\n\nC = set(\"ACGT\")\n\n\n\ntmp = 0\n\nans = 0\n\n\n\nfor s in S:\n\n    if s in C:\n\n        tmp += 1\n\n    else:\n\n        ans = max(ans, tmp)\n\n        tmp = 0\n\nans = max(ans, tmp)\n\nprint(ans)","code_v0_loc":20,"code_v1_loc":15,"code_v0_num_chars":426,"code_v1_num_chars":239,"code_v0_no_empty_lines":"# -*- coding: utf-8 -*-\nfrom collections import deque\n\n\ndef inpl():\n    return list(map(int, input().split()))\n\n\nS = eval(input())\nA = set(\"ATCG\")\nans = 0\nmode = 0\nfor i, s in enumerate(S):\n    if s in A:\n        if mode == 0:\n            mode = 1\n            start = i\n    else:\n        if mode == 1:\n            ans = max(i - start, ans)\n            mode = 0\nif mode == 1:\n    ans = max(len(S) - start, ans)\nprint(ans)\n","code_v1_no_empty_lines":"def inpl():\n    return list(map(int, input().split()))\n\n\nS = eval(input())\nC = set(\"ACGT\")\ntmp = 0\nans = 0\nfor s in S:\n    if s in C:\n        tmp += 1\n    else:\n        ans = max(ans, tmp)\n        tmp = 0\nans = max(ans, tmp)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-# -*- coding: utf-8 -*-","-from collections import deque","-","-","-A = set(\"ATCG\")","+C = set(\"ACGT\")","+tmp = 0","-mode = 0","-for i, s in enumerate(S):","-    if s in A:","-        if mode == 0:","-            mode = 1","-            start = i","+for s in S:","+    if s in C:","+        tmp += 1","-        if mode == 1:","-            ans = max(i - start, ans)","-            mode = 0","-if mode == 1:","-    ans = max(len(S) - start, ans)","+        ans = max(ans, tmp)","+        tmp = 0","+ans = max(ans, tmp)"],"diff_only_import_comment":false,"measured_runtime_v0":0.1640799,"measured_runtime_v1":0.006362747,"runtime_lift":25.7875884356,"key":["s716593637","s955967436"]}
{"user_id":"u678167152","problem_id":"p02574","language":"python","submission_id_v0":"s474626212","submission_id_v1":"s470012575","cpu_time_v0":803,"cpu_time_v1":363,"memory_v0":216812,"memory_v1":219860,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":54.79,"input":"import numpy as np\n\nimport numba\n\nfrom numba import njit, b1, i4, i8, f8\n\n\n\n@njit((i8, i8[:]), cache=True)\n\ndef main(N,A):\n\n  Amax = np.max(A)\n\n  lis = np.zeros(Amax+1, np.int64)\n\n  for i in range(N):\n\n    lis[A[i]] += 1\n\n  setwise = False\n\n  for t in range(2,Amax+1):\n\n    cnt = np.sum(lis[t:Amax+1:t])\n\n    if cnt==N:\n\n      return 'not'\n\n    if 2<=cnt<N:\n\n      setwise=True\n\n  if setwise==True:\n\n    return 'setwise'\n\n  return 'pairwise'\n\n\n\nN = int(eval(input()))\n\nA = np.array(list(map(int, input().split())))\n\nprint((main(N,A)+' coprime'))\n\n\n","target":"def sieve(n):\n\n  is_prime = [True for _ in range(n+1)]\n\n  is_prime[0] = False\n\n  for i in range(2, n+1):\n\n    if is_prime[i-1]:\n\n      j = 2 * i\n\n      while j <= n:\n\n        is_prime[j-1] = False\n\n        j += i\n\n  table = [i for i in range(1, n+1) if is_prime[i-1]]\n\n  return table\n\n\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\nAmax = max(A)\n\nlis = [0]*(Amax+1)\n\nfor i in range(N):\n\n  lis[A[i]] += 1\n\ntable = sieve(Amax)\n\nsetwise = False\n\nfor t in table:\n\n  cnt = sum(lis[t:Amax+1:t])\n\n  if cnt==N:\n\n    print('not coprime')\n\n    break\n\n  if 2<=cnt<N:\n\n    setwise=True\n\nelse:\n\n  if setwise==True:\n\n    print('setwise coprime')\n\n  else:\n\n    print('pairwise coprime')\n","code_v0_loc":25,"code_v1_loc":32,"code_v0_num_chars":540,"code_v1_num_chars":682,"code_v0_no_empty_lines":"import numpy as np\nimport numba\nfrom numba import njit, b1, i4, i8, f8\n\n\n@njit((i8, i8[:]), cache=True)\ndef main(N, A):\n    Amax = np.max(A)\n    lis = np.zeros(Amax + 1, np.int64)\n    for i in range(N):\n        lis[A[i]] += 1\n    setwise = False\n    for t in range(2, Amax + 1):\n        cnt = np.sum(lis[t : Amax + 1 : t])\n        if cnt == N:\n            return \"not\"\n        if 2 <= cnt < N:\n            setwise = True\n    if setwise == True:\n        return \"setwise\"\n    return \"pairwise\"\n\n\nN = int(eval(input()))\nA = np.array(list(map(int, input().split())))\nprint((main(N, A) + \" coprime\"))\n","code_v1_no_empty_lines":"def sieve(n):\n    is_prime = [True for _ in range(n + 1)]\n    is_prime[0] = False\n    for i in range(2, n + 1):\n        if is_prime[i - 1]:\n            j = 2 * i\n            while j <= n:\n                is_prime[j - 1] = False\n                j += i\n    table = [i for i in range(1, n + 1) if is_prime[i - 1]]\n    return table\n\n\nN = int(eval(input()))\nA = list(map(int, input().split()))\nAmax = max(A)\nlis = [0] * (Amax + 1)\nfor i in range(N):\n    lis[A[i]] += 1\ntable = sieve(Amax)\nsetwise = False\nfor t in table:\n    cnt = sum(lis[t : Amax + 1 : t])\n    if cnt == N:\n        print(\"not coprime\")\n        break\n    if 2 <= cnt < N:\n        setwise = True\nelse:\n    if setwise == True:\n        print(\"setwise coprime\")\n    else:\n        print(\"pairwise coprime\")\n","code_same":false,"relative_loc_diff_percent":21.875,"diff":["-import numpy as np","-import numba","-from numba import njit, b1, i4, i8, f8","-","-","-@njit((i8, i8[:]), cache=True)","-def main(N, A):","-    Amax = np.max(A)","-    lis = np.zeros(Amax + 1, np.int64)","-    for i in range(N):","-        lis[A[i]] += 1","-    setwise = False","-    for t in range(2, Amax + 1):","-        cnt = np.sum(lis[t : Amax + 1 : t])","-        if cnt == N:","-            return \"not\"","-        if 2 <= cnt < N:","-            setwise = True","-    if setwise == True:","-        return \"setwise\"","-    return \"pairwise\"","+def sieve(n):","+    is_prime = [True for _ in range(n + 1)]","+    is_prime[0] = False","+    for i in range(2, n + 1):","+        if is_prime[i - 1]:","+            j = 2 * i","+            while j <= n:","+                is_prime[j - 1] = False","+                j += i","+    table = [i for i in range(1, n + 1) if is_prime[i - 1]]","+    return table","-A = np.array(list(map(int, input().split())))","-print((main(N, A) + \" coprime\"))","+A = list(map(int, input().split()))","+Amax = max(A)","+lis = [0] * (Amax + 1)","+for i in range(N):","+    lis[A[i]] += 1","+table = sieve(Amax)","+setwise = False","+for t in table:","+    cnt = sum(lis[t : Amax + 1 : t])","+    if cnt == N:","+        print(\"not coprime\")","+        break","+    if 2 <= cnt < N:","+        setwise = True","+else:","+    if setwise == True:","+        print(\"setwise coprime\")","+    else:","+        print(\"pairwise coprime\")"],"diff_only_import_comment":false,"measured_runtime_v0":1.3415565798,"measured_runtime_v1":0.2120668287,"runtime_lift":6.3261028979,"key":["s474626212","s470012575"]}
{"user_id":"u854690176","problem_id":"p02952","language":"python","submission_id_v0":"s720457111","submission_id_v1":"s185706611","cpu_time_v0":60,"cpu_time_v1":51,"memory_v0":2940,"memory_v1":6732,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.0,"input":"N = int(eval(input()))\n\nans = 0\n\nfor i in range(1, N + 1):\n\n    if len(str(i)) % 2 == 1:\n\n        ans += 1\n\nprint(ans)","target":"N = int(eval(input()))\n\nprint((len(list([x for x in range(1, N + 1) if len(str(x)) % 2 == 1]))))","code_v0_loc":6,"code_v1_loc":2,"code_v0_num_chars":112,"code_v1_num_chars":91,"code_v0_no_empty_lines":"N = int(eval(input()))\nans = 0\nfor i in range(1, N + 1):\n    if len(str(i)) % 2 == 1:\n        ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nprint((len(list([x for x in range(1, N + 1) if len(str(x)) % 2 == 1]))))\n","code_same":false,"relative_loc_diff_percent":66.6666666667,"diff":["-ans = 0","-for i in range(1, N + 1):","-    if len(str(i)) % 2 == 1:","-        ans += 1","-print(ans)","+print((len(list([x for x in range(1, N + 1) if len(str(x)) % 2 == 1]))))"],"diff_only_import_comment":false,"measured_runtime_v0":0.1607959216,"measured_runtime_v1":0.006350698,"runtime_lift":25.3194092141,"key":["s720457111","s185706611"]}
{"user_id":"u282228874","problem_id":"p03353","language":"python","submission_id_v0":"s703764972","submission_id_v1":"s575406884","cpu_time_v0":39,"cpu_time_v1":34,"memory_v0":4976,"memory_v1":4592,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":12.82,"input":"S = eval(input())\n\nk = int(eval(input()))\n\nA = set()\n\nfor l in range(k+1):\n\n\tfor i in range(len(S)-l):\n\n\t\t\tA.add(S[i:i+l+1])\n\nA = sorted(list(A))\n\nprint((A[k-1]))","target":"S = eval(input())\n\nl = len(S)\n\nd = set()\n\nK = int(eval(input()))\n\nfor i in range(5):\n\n    for j in range(l-i):\n\n        d.add(S[j:j+i+1])\n\nD = sorted(list(d))\n\nprint((D[K-1]))","code_v0_loc":8,"code_v1_loc":9,"code_v0_num_chars":148,"code_v1_num_chars":161,"code_v0_no_empty_lines":"S = eval(input())\nk = int(eval(input()))\nA = set()\nfor l in range(k + 1):\n    for i in range(len(S) - l):\n        A.add(S[i : i + l + 1])\nA = sorted(list(A))\nprint((A[k - 1]))\n","code_v1_no_empty_lines":"S = eval(input())\nl = len(S)\nd = set()\nK = int(eval(input()))\nfor i in range(5):\n    for j in range(l - i):\n        d.add(S[j : j + i + 1])\nD = sorted(list(d))\nprint((D[K - 1]))\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["-k = int(eval(input()))","-A = set()","-for l in range(k + 1):","-    for i in range(len(S) - l):","-        A.add(S[i : i + l + 1])","-A = sorted(list(A))","-print((A[k - 1]))","+l = len(S)","+d = set()","+K = int(eval(input()))","+for i in range(5):","+    for j in range(l - i):","+        d.add(S[j : j + i + 1])","+D = sorted(list(d))","+print((D[K - 1]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2549800012,"measured_runtime_v1":0.1151928709,"runtime_lift":2.2135050485,"key":["s703764972","s575406884"]}
{"user_id":"u047796752","problem_id":"p02693","language":"python","submission_id_v0":"s690438210","submission_id_v1":"s726211396","cpu_time_v0":69,"cpu_time_v1":61,"memory_v0":64680,"memory_v1":61880,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.59,"input":"import sys\n\ninput = sys.stdin.readline\n\nfrom collections import *\n\n\n\nK = int(eval(input()))\n\nA, B = list(map(int, input().split()))\n\n\n\nfor i in range(A, B+1):\n\n    if i%K==0:\n\n        print('OK')\n\n        exit()\n\n    \n\nprint('NG')","target":"K = int(eval(input()))\n\nA, B = list(map(int, input().split()))\n\n\n\nif (A-1)\/\/K!=B\/\/K:\n\n    print('OK')\n\nelse:\n\n    print('NG')","code_v0_loc":13,"code_v1_loc":7,"code_v0_num_chars":218,"code_v1_num_chars":113,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nfrom collections import *\n\nK = int(eval(input()))\nA, B = list(map(int, input().split()))\nfor i in range(A, B + 1):\n    if i % K == 0:\n        print(\"OK\")\n        exit()\nprint(\"NG\")\n","code_v1_no_empty_lines":"K = int(eval(input()))\nA, B = list(map(int, input().split()))\nif (A - 1) \/\/ K != B \/\/ K:\n    print(\"OK\")\nelse:\n    print(\"NG\")\n","code_same":false,"relative_loc_diff_percent":46.1538461538,"diff":["-import sys","-","-input = sys.stdin.readline","-from collections import *","-","-for i in range(A, B + 1):","-    if i % K == 0:","-        print(\"OK\")","-        exit()","-print(\"NG\")","+if (A - 1) \/\/ K != B \/\/ K:","+    print(\"OK\")","+else:","+    print(\"NG\")"],"diff_only_import_comment":false,"measured_runtime_v0":0.2312573931,"measured_runtime_v1":0.006134352,"runtime_lift":37.6987486082,"key":["s690438210","s726211396"]}
{"user_id":"u829203929","problem_id":"p03162","language":"python","submission_id_v0":"s853720576","submission_id_v1":"s353209478","cpu_time_v0":1818,"cpu_time_v1":509,"memory_v0":21664,"memory_v1":22772,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":72.0,"input":"# coding: utf-8\n\nimport numpy as np\n\n\n\nn = int(eval(input()))\n\ndp = np.zeros((n+10, 3))\n\n\n\ndef cmax(a,b):\n\n    if a>b:\n\n        return a\n\n    else: \n\n        return b\n\n        \n\nfor i in range(1, n+1):\n\n    a, b, c = list(map(int, input().split()))\n\n    # a\n\n    dp[i][0] = cmax(dp[i-1][1]+a, dp[i-1][2]+a)\n\n    # b\n\n    dp[i][1] = cmax(dp[i-1][0]+b, dp[i-1][2]+b)\n\n    # c\n\n    dp[i][2] = cmax(dp[i-1][0]+c, dp[i-1][1]+c)\n\n\n\nprint((int(max(dp[i,:]))))","target":"# coding: utf-8\n\n# Your code here!\n\n\n\n\n\nN = int(eval(input()))\n\n\n\ndp = [[0]*3 for _ in range(N+1)]\n\n\n\nfor i in range(1, N+1):\n\n    a, b, c = list(map(int, input().split()))\n\n    dp[i][0] = max(dp[i-1][1], dp[i-1][2]) + a\n\n    dp[i][1] = max(dp[i-1][0], dp[i-1][2]) + b\n\n    dp[i][2] = max(dp[i-1][0], dp[i-1][1]) + c\n\n    \n\nprint((max(dp[N])))","code_v0_loc":22,"code_v1_loc":15,"code_v0_num_chars":438,"code_v1_num_chars":329,"code_v0_no_empty_lines":"# coding: utf-8\nimport numpy as np\n\nn = int(eval(input()))\ndp = np.zeros((n + 10, 3))\n\n\ndef cmax(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n\n\nfor i in range(1, n + 1):\n    a, b, c = list(map(int, input().split()))\n    # a\n    dp[i][0] = cmax(dp[i - 1][1] + a, dp[i - 1][2] + a)\n    # b\n    dp[i][1] = cmax(dp[i - 1][0] + b, dp[i - 1][2] + b)\n    # c\n    dp[i][2] = cmax(dp[i - 1][0] + c, dp[i - 1][1] + c)\nprint((int(max(dp[i, :]))))\n","code_v1_no_empty_lines":"# coding: utf-8\n# Your code here!\nN = int(eval(input()))\ndp = [[0] * 3 for _ in range(N + 1)]\nfor i in range(1, N + 1):\n    a, b, c = list(map(int, input().split()))\n    dp[i][0] = max(dp[i - 1][1], dp[i - 1][2]) + a\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][2]) + b\n    dp[i][2] = max(dp[i - 1][0], dp[i - 1][1]) + c\nprint((max(dp[N])))\n","code_same":false,"relative_loc_diff_percent":31.8181818182,"diff":["-import numpy as np","-","-n = int(eval(input()))","-dp = np.zeros((n + 10, 3))","-","-","-def cmax(a, b):","-    if a > b:","-        return a","-    else:","-        return b","-","-","-for i in range(1, n + 1):","+# Your code here!","+N = int(eval(input()))","+dp = [[0] * 3 for _ in range(N + 1)]","+for i in range(1, N + 1):","-    # a","-    dp[i][0] = cmax(dp[i - 1][1] + a, dp[i - 1][2] + a)","-    # b","-    dp[i][1] = cmax(dp[i - 1][0] + b, dp[i - 1][2] + b)","-    # c","-    dp[i][2] = cmax(dp[i - 1][0] + c, dp[i - 1][1] + c)","-print((int(max(dp[i, :]))))","+    dp[i][0] = max(dp[i - 1][1], dp[i - 1][2]) + a","+    dp[i][1] = max(dp[i - 1][0], dp[i - 1][2]) + b","+    dp[i][2] = max(dp[i - 1][0], dp[i - 1][1]) + c","+print((max(dp[N])))"],"diff_only_import_comment":false,"measured_runtime_v0":2.3404879334,"measured_runtime_v1":0.3881756427,"runtime_lift":6.0294559362,"key":["s853720576","s353209478"]}
{"user_id":"u762420987","problem_id":"p03060","language":"python","submission_id_v0":"s726202703","submission_id_v1":"s079907574","cpu_time_v0":334,"cpu_time_v1":17,"memory_v0":21668,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":94.91,"input":"import numpy as np\n\nN = int(eval(input()))\n\nVlist = np.array(list(map(int,input().split())))\n\nClist = np.array(list(map(int,input().split())))\n\n\n\nDlist = Vlist-Clist\n\n\n\nsum_ = 0\n\nfor d in Dlist:\n\n    if d >= 0:\n\n        sum_ += d\n\n\n\nprint(sum_)\n","target":"# \u5165\u529b\n\nN = int(eval(input()))\n\nVlist = list(map(int, input().split()))\n\nClist = list(map(int, input().split()))\n\n\n\nans = 0\n\nfor i in range(N):\n\n    Z = Vlist[i] - Clist[i]\n\n    if Z > 0:\n\n        ans += Z\n\n\n\nprint(ans)\n","code_v0_loc":13,"code_v1_loc":12,"code_v0_num_chars":239,"code_v1_num_chars":212,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nVlist = np.array(list(map(int, input().split())))\nClist = np.array(list(map(int, input().split())))\nDlist = Vlist - Clist\nsum_ = 0\nfor d in Dlist:\n    if d >= 0:\n        sum_ += d\nprint(sum_)\n","code_v1_no_empty_lines":"# \u5165\u529b\nN = int(eval(input()))\nVlist = list(map(int, input().split()))\nClist = list(map(int, input().split()))\nans = 0\nfor i in range(N):\n    Z = Vlist[i] - Clist[i]\n    if Z > 0:\n        ans += Z\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":7.6923076923,"diff":["-import numpy as np","-","+# \u5165\u529b","-Vlist = np.array(list(map(int, input().split())))","-Clist = np.array(list(map(int, input().split())))","-Dlist = Vlist - Clist","-sum_ = 0","-for d in Dlist:","-    if d >= 0:","-        sum_ += d","-print(sum_)","+Vlist = list(map(int, input().split()))","+Clist = list(map(int, input().split()))","+ans = 0","+for i in range(N):","+    Z = Vlist[i] - Clist[i]","+    if Z > 0:","+        ans += Z","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.6892928483,"measured_runtime_v1":0.2294992757,"runtime_lift":7.3607763826,"key":["s726202703","s079907574"]}
{"user_id":"u506858457","problem_id":"p02780","language":"python","submission_id_v0":"s008520493","submission_id_v1":"s067462181","cpu_time_v0":1402,"cpu_time_v1":232,"memory_v0":34008,"memory_v1":71792,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":83.45,"input":"import numpy as np\n\nN,K=list(map(int,input().split()))\n\nP=list(map(int,input().split()))\n\nQ=[0]\n\ndef ex(A):\n\n  return (1+A)\/2.0\n\nfor i in range(N):\n\n  Q.append(ex(P[i]))\n\nQ=np.array(Q)\n\nR=Q.cumsum()\n\nans=0\n\nfor i in range(K,N+1):\n\n  S=R[i]-R[i-K]\n\n  if ans<S:\n\n    ans=S\n\nprint(ans)","target":"#ika tako\n\nn, k = list(map(int, input().split()))\n\nppp = list(map(int, input().split()))\n\ntot = sum(ppp[:k])#\u307e\u305a\u3001\u5148\u982dK\u500b\u306e\u5408\u8a08\u3092\u6c42\u3081\u308b\n\nans = tot#\u4eee\u306e\u7b54\u3068\u3057\u3066\u304a\u304f\n\nfor i in range(k, n):#for\u6587\u30670-index\u3067k+1\u756a\u76ee\u304b\u3089\u6700\u5f8c\u307e\u3067\u30c1\u30a7\u30c3\u30af\n\n    tot += ppp[i] - ppp[i - k]#\u65b0\u3057\u304fi\u756a\u76ee\u3092\u8db3\u3057\u3066\u3001\u4e00\u756a\u53e4\u3044\u3082\u306e\u3092\u5f15\u304f\n\n    ans = max(ans, tot)#\u65b0\u3057\u3044\u7b54\u304c\u5927\u304d\u3044\u306a\u3089\u66f4\u65b0\u3059\u308b\n\nprint(((ans + k) \/ 2))#K\u500b\u5206\u306e\u30b5\u30a4\u30b3\u30ed\u306e\u671f\u5f85\u5024\u3092\u51fa\u529b\u3059\u308b","code_v0_loc":16,"code_v1_loc":9,"code_v0_num_chars":276,"code_v1_num_chars":322,"code_v0_no_empty_lines":"import numpy as np\n\nN, K = list(map(int, input().split()))\nP = list(map(int, input().split()))\nQ = [0]\n\n\ndef ex(A):\n    return (1 + A) \/ 2.0\n\n\nfor i in range(N):\n    Q.append(ex(P[i]))\nQ = np.array(Q)\nR = Q.cumsum()\nans = 0\nfor i in range(K, N + 1):\n    S = R[i] - R[i - K]\n    if ans < S:\n        ans = S\nprint(ans)\n","code_v1_no_empty_lines":"# ika tako\nn, k = list(map(int, input().split()))\nppp = list(map(int, input().split()))\ntot = sum(ppp[:k])  # \u307e\u305a\u3001\u5148\u982dK\u500b\u306e\u5408\u8a08\u3092\u6c42\u3081\u308b\nans = tot  # \u4eee\u306e\u7b54\u3068\u3057\u3066\u304a\u304f\nfor i in range(k, n):  # for\u6587\u30670-index\u3067k+1\u756a\u76ee\u304b\u3089\u6700\u5f8c\u307e\u3067\u30c1\u30a7\u30c3\u30af\n    tot += ppp[i] - ppp[i - k]  # \u65b0\u3057\u304fi\u756a\u76ee\u3092\u8db3\u3057\u3066\u3001\u4e00\u756a\u53e4\u3044\u3082\u306e\u3092\u5f15\u304f\n    ans = max(ans, tot)  # \u65b0\u3057\u3044\u7b54\u304c\u5927\u304d\u3044\u306a\u3089\u66f4\u65b0\u3059\u308b\nprint(((ans + k) \/ 2))  # K\u500b\u5206\u306e\u30b5\u30a4\u30b3\u30ed\u306e\u671f\u5f85\u5024\u3092\u51fa\u529b\u3059\u308b\n","code_same":false,"relative_loc_diff_percent":43.75,"diff":["-import numpy as np","-","-N, K = list(map(int, input().split()))","-P = list(map(int, input().split()))","-Q = [0]","-","-","-def ex(A):","-    return (1 + A) \/ 2.0","-","-","-for i in range(N):","-    Q.append(ex(P[i]))","-Q = np.array(Q)","-R = Q.cumsum()","-ans = 0","-for i in range(K, N + 1):","-    S = R[i] - R[i - K]","-    if ans < S:","-        ans = S","-print(ans)","+# ika tako","+n, k = list(map(int, input().split()))","+ppp = list(map(int, input().split()))","+tot = sum(ppp[:k])  # \u307e\u305a\u3001\u5148\u982dK\u500b\u306e\u5408\u8a08\u3092\u6c42\u3081\u308b","+ans = tot  # \u4eee\u306e\u7b54\u3068\u3057\u3066\u304a\u304f","+for i in range(k, n):  # for\u6587\u30670-index\u3067k+1\u756a\u76ee\u304b\u3089\u6700\u5f8c\u307e\u3067\u30c1\u30a7\u30c3\u30af","+    tot += ppp[i] - ppp[i - k]  # \u65b0\u3057\u304fi\u756a\u76ee\u3092\u8db3\u3057\u3066\u3001\u4e00\u756a\u53e4\u3044\u3082\u306e\u3092\u5f15\u304f","+    ans = max(ans, tot)  # \u65b0\u3057\u3044\u7b54\u304c\u5927\u304d\u3044\u306a\u3089\u66f4\u65b0\u3059\u308b","+print(((ans + k) \/ 2))  # K\u500b\u5206\u306e\u30b5\u30a4\u30b3\u30ed\u306e\u671f\u5f85\u5024\u3092\u51fa\u529b\u3059\u308b"],"diff_only_import_comment":false,"measured_runtime_v0":1.0228067267,"measured_runtime_v1":0.1609290075,"runtime_lift":6.3556393116,"key":["s008520493","s067462181"]}
{"user_id":"u754022296","problem_id":"p03806","language":"python","submission_id_v0":"s681307597","submission_id_v1":"s992737808","cpu_time_v0":602,"cpu_time_v1":178,"memory_v0":142428,"memory_v1":17020,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":70.43,"input":"n, ma, mb = list(map(int, input().split()))\n\nU = 400\n\ndp = [[[float(\"inf\")]*(U+1) for _ in range(U+1)] for i in range(n+1)]\n\ndp[0][0][0] = 0\n\nfor i in range(n):\n\n  a, b, c = list(map(int, input().split()))\n\n  for j in range(U+1):\n\n    for k in range(U+1):\n\n      if j<a or k<b:\n\n        dp[i+1][j][k] = dp[i][j][k]\n\n      else:\n\n        dp[i+1][j][k] = min(dp[i][j][k], dp[i][j-a][k-b]+c)\n\nans = float(\"inf\")\n\nfor i in range(1, 1+U\/\/max(ma, mb)):\n\n  na, nb = i*ma, i*mb\n\n  ans = min(ans, dp[-1][na][nb])\n\nif ans == float(\"inf\"):\n\n  print((-1))\n\nelse:\n\n  print(ans)","target":"import numpy as np\n\n\n\nn, ma, mb = list(map(int, input().split()))\n\nU = 400\n\ndp = np.full((U+1, U+1), float(\"inf\"))\n\ndp[0, 0] = 0\n\nfor i in range(n):\n\n  a, b, c = list(map(int, input().split()))\n\n  np.minimum(dp[a:, b:], dp[:-a, :-b]+c, out=dp[a:, b:])\n\nans = float(\"inf\")\n\nfor i in range(1, 1+U\/\/max(ma, mb)):\n\n  na, nb = i*ma, i*mb\n\n  ans = min(ans, dp[na, nb])\n\nif ans == float(\"inf\"):\n\n  print((-1))\n\nelse:\n\n  print((int(ans)))","code_v0_loc":20,"code_v1_loc":17,"code_v0_num_chars":550,"code_v1_num_chars":414,"code_v0_no_empty_lines":"n, ma, mb = list(map(int, input().split()))\nU = 400\ndp = [[[float(\"inf\")] * (U + 1) for _ in range(U + 1)] for i in range(n + 1)]\ndp[0][0][0] = 0\nfor i in range(n):\n    a, b, c = list(map(int, input().split()))\n    for j in range(U + 1):\n        for k in range(U + 1):\n            if j < a or k < b:\n                dp[i + 1][j][k] = dp[i][j][k]\n            else:\n                dp[i + 1][j][k] = min(dp[i][j][k], dp[i][j - a][k - b] + c)\nans = float(\"inf\")\nfor i in range(1, 1 + U \/\/ max(ma, mb)):\n    na, nb = i * ma, i * mb\n    ans = min(ans, dp[-1][na][nb])\nif ans == float(\"inf\"):\n    print((-1))\nelse:\n    print(ans)\n","code_v1_no_empty_lines":"import numpy as np\n\nn, ma, mb = list(map(int, input().split()))\nU = 400\ndp = np.full((U + 1, U + 1), float(\"inf\"))\ndp[0, 0] = 0\nfor i in range(n):\n    a, b, c = list(map(int, input().split()))\n    np.minimum(dp[a:, b:], dp[:-a, :-b] + c, out=dp[a:, b:])\nans = float(\"inf\")\nfor i in range(1, 1 + U \/\/ max(ma, mb)):\n    na, nb = i * ma, i * mb\n    ans = min(ans, dp[na, nb])\nif ans == float(\"inf\"):\n    print((-1))\nelse:\n    print((int(ans)))\n","code_same":false,"relative_loc_diff_percent":15.0,"diff":["+import numpy as np","+","-dp = [[[float(\"inf\")] * (U + 1) for _ in range(U + 1)] for i in range(n + 1)]","-dp[0][0][0] = 0","+dp = np.full((U + 1, U + 1), float(\"inf\"))","+dp[0, 0] = 0","-    for j in range(U + 1):","-        for k in range(U + 1):","-            if j < a or k < b:","-                dp[i + 1][j][k] = dp[i][j][k]","-            else:","-                dp[i + 1][j][k] = min(dp[i][j][k], dp[i][j - a][k - b] + c)","+    np.minimum(dp[a:, b:], dp[:-a, :-b] + c, out=dp[a:, b:])","-    ans = min(ans, dp[-1][na][nb])","+    ans = min(ans, dp[na, nb])","-    print(ans)","+    print((int(ans)))"],"diff_only_import_comment":false,"measured_runtime_v0":2.2903135456,"measured_runtime_v1":1.3577761583,"runtime_lift":1.6868123156,"key":["s681307597","s992737808"]}
{"user_id":"u130900604","problem_id":"p02767","language":"python","submission_id_v0":"s759477705","submission_id_v1":"s540132066","cpu_time_v0":307,"cpu_time_v1":20,"memory_v0":21264,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":93.49,"input":"n,*x=list(map(int,open(0).read().split()))\n\n\n\nimport numpy as np\n\n\n\nxar=np.array(x)\n\n\n\nans=float(\"inf\")\n\nfor p in range(0,101):\n\n    tmp=sum((xar-p)**2)\n\n    ans=min(ans,tmp)\n\n    \n\nprint((int(ans)))","target":"n,*x=list(map(int,open(0).read().split()))\n\nans=float(\"inf\")\n\nfor p in range(0,101):\n\n  s=0\n\n  for xi in x:\n\n    s+=(xi-p)**2\n\n  ans=min(ans,s)\n\nprint((int(ans)))\n","code_v0_loc":12,"code_v1_loc":8,"code_v0_num_chars":191,"code_v1_num_chars":155,"code_v0_no_empty_lines":"n, *x = list(map(int, open(0).read().split()))\nimport numpy as np\n\nxar = np.array(x)\nans = float(\"inf\")\nfor p in range(0, 101):\n    tmp = sum((xar - p) ** 2)\n    ans = min(ans, tmp)\nprint((int(ans)))\n","code_v1_no_empty_lines":"n, *x = list(map(int, open(0).read().split()))\nans = float(\"inf\")\nfor p in range(0, 101):\n    s = 0\n    for xi in x:\n        s += (xi - p) ** 2\n    ans = min(ans, s)\nprint((int(ans)))\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-import numpy as np","-","-xar = np.array(x)","-    tmp = sum((xar - p) ** 2)","-    ans = min(ans, tmp)","+    s = 0","+    for xi in x:","+        s += (xi - p) ** 2","+    ans = min(ans, s)"],"diff_only_import_comment":false,"measured_runtime_v0":0.9990197808,"measured_runtime_v1":0.1739615392,"runtime_lift":5.742762368,"key":["s759477705","s540132066"]}
{"user_id":"u497046426","problem_id":"p03164","language":"python","submission_id_v0":"s932824364","submission_id_v1":"s969626696","cpu_time_v0":1534,"cpu_time_v1":582,"memory_v0":170860,"memory_v1":171120,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":62.06,"input":"import numpy as np\n\n\n\nN, W = list(map(int, input().split()))\n\nitems = []\n\nfor _ in range(N):\n\n    items.append(tuple(map(int, input().split())))\n\nv_max = sum([i[1] for i in items])\n\nINF = 10**12\n\ndp = np.array([[INF for j in range(v_max+1)] for _ in range(N+1)])\n\ndp[0, 0] = 0\n\nfor i in range(1, N+1):\n\n    w, v = items[i-1]\n\n    dp[i, :v] = dp[i-1, :v]\n\n    dp[i, v:] = np.minimum(dp[i-1, :-v] + w, dp[i-1, v:])\n\nans = 0\n\nfor v in range(v_max, -1, -1):\n\n    if dp[N][v] <= W:\n\n        ans = v\n\n        break\n\nprint(ans)","target":"N, W = list(map(int, input().split()))\n\nitems = []\n\nINF = 10**12\n\nfor _ in range(N):\n\n    items.append(tuple(map(int, input().split())))\n\nMAX_V = sum([v for _, v in items])\n\ndp = [[INF for j in range(MAX_V+1)] for i in range(N+1)]\n\ndp[0][0] = 0\n\nfor i in range(1, N+1):\n\n    w, v = items[i-1]\n\n    for j in range(MAX_V+1):\n\n        if j - v >= 0:\n\n            dp[i][j] = min(dp[i-1][j-v] + w, dp[i-1][j])\n\n        else:\n\n            dp[i][j] = dp[i-1][j]\n\nfor v in range(MAX_V, -1, -1):\n\n    if dp[N][v] <= W:\n\n        break\n\nprint(v)","code_v0_loc":20,"code_v1_loc":19,"code_v0_num_chars":514,"code_v1_num_chars":528,"code_v0_no_empty_lines":"import numpy as np\n\nN, W = list(map(int, input().split()))\nitems = []\nfor _ in range(N):\n    items.append(tuple(map(int, input().split())))\nv_max = sum([i[1] for i in items])\nINF = 10**12\ndp = np.array([[INF for j in range(v_max + 1)] for _ in range(N + 1)])\ndp[0, 0] = 0\nfor i in range(1, N + 1):\n    w, v = items[i - 1]\n    dp[i, :v] = dp[i - 1, :v]\n    dp[i, v:] = np.minimum(dp[i - 1, :-v] + w, dp[i - 1, v:])\nans = 0\nfor v in range(v_max, -1, -1):\n    if dp[N][v] <= W:\n        ans = v\n        break\nprint(ans)\n","code_v1_no_empty_lines":"N, W = list(map(int, input().split()))\nitems = []\nINF = 10**12\nfor _ in range(N):\n    items.append(tuple(map(int, input().split())))\nMAX_V = sum([v for _, v in items])\ndp = [[INF for j in range(MAX_V + 1)] for i in range(N + 1)]\ndp[0][0] = 0\nfor i in range(1, N + 1):\n    w, v = items[i - 1]\n    for j in range(MAX_V + 1):\n        if j - v >= 0:\n            dp[i][j] = min(dp[i - 1][j - v] + w, dp[i - 1][j])\n        else:\n            dp[i][j] = dp[i - 1][j]\nfor v in range(MAX_V, -1, -1):\n    if dp[N][v] <= W:\n        break\nprint(v)\n","code_same":false,"relative_loc_diff_percent":5.0,"diff":["-import numpy as np","-","+INF = 10**12","-v_max = sum([i[1] for i in items])","-INF = 10**12","-dp = np.array([[INF for j in range(v_max + 1)] for _ in range(N + 1)])","-dp[0, 0] = 0","+MAX_V = sum([v for _, v in items])","+dp = [[INF for j in range(MAX_V + 1)] for i in range(N + 1)]","+dp[0][0] = 0","-    dp[i, :v] = dp[i - 1, :v]","-    dp[i, v:] = np.minimum(dp[i - 1, :-v] + w, dp[i - 1, v:])","-ans = 0","-for v in range(v_max, -1, -1):","+    for j in range(MAX_V + 1):","+        if j - v >= 0:","+            dp[i][j] = min(dp[i - 1][j - v] + w, dp[i - 1][j])","+        else:","+            dp[i][j] = dp[i - 1][j]","+for v in range(MAX_V, -1, -1):","-        ans = v","-print(ans)","+print(v)"],"diff_only_import_comment":false,"measured_runtime_v0":1.3271882429,"measured_runtime_v1":0.2112405212,"runtime_lift":6.2828298063,"key":["s932824364","s969626696"]}
{"user_id":"u372144784","problem_id":"p02850","language":"python","submission_id_v0":"s665504655","submission_id_v1":"s801203655","cpu_time_v0":438,"cpu_time_v1":244,"memory_v0":79580,"memory_v1":98504,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":44.29,"input":"import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nN = int(readline())\n\nAB = [list(map(int,readline().split())) for i in range(N-1)]\n\n\n\ngraph = [[] for _ in range(N+1)] #\u96a3\u63a5\u30ea\u30b9\u30c8\n\nfor a,b in AB:\n\n    graph[a].append(b)\n\n    graph[b].append(a)\n\n\n\n#\u89aa\u306e\u30ce\u30fc\u30c9\u306b\u5b50\u3092\u5165\u308c\u3066\u304fdfs\n\nstack = [1]\n\nparent = [0]*(N+1)\n\norder = []\n\nwhile stack:\n\n    x = stack.pop()\n\n    order.append(x)\n\n    for i in graph[x]:\n\n        if i == parent[x]:\n\n            continue\n\n        parent[i] = x\n\n        stack.append(i)\n\n\n\n#\u5404\u5b50\u306e\u8272\u3092\u6c7a\u3081\u3066\u3044\u304f\u3002\n\ncolor = [-1]*(N+1)\n\nfor x in order:\n\n    ng = color[x]\n\n    c = 1\n\n    for y in graph[x]:\n\n        if parent[x] == y:\n\n            continue\n\n        if c == ng:\n\n            c += 1\n\n        color[y] = c\n\n        c += 1\n\n\n\nans = []\n\nfor a,b in AB:\n\n    if parent[a] == b: #\u5b50\u306e\u9802\u70b9\u306e\u8272\u3092\u5165\u308c\u308b\n\n        ans.append(color[a])\n\n    else:\n\n        ans.append(color[b])\n\n\n\nprint((max(ans)))\n\nfor i in ans:\n\n    print(i)\n\n        \n","target":"import sys\n\nfrom collections import deque\n\nreadline = sys.stdin.buffer.readline\n\ndef even(n): return 1 if n%2==0 else 0\n\nn = int(readline())\n\ng = [[] for _ in range(n)] #\u96a3\u63a5\u30ea\u30b9\u30c8\n\nab = []\n\nfor i in range(n-1):\n\n    a,b = list(map(int,readline().split()))\n\n    a,b = a-1,b-1\n\n    ab.append((a,b))\n\n    g[a].append(b)\n\n    g[b].append(a)\n\n\n\nroot = 0\n\nparent = [0]*n\n\ndeq = deque([root])\n\norder = [root]\n\n\n\ncolor = [-1]*n\n\ndeq = deque([root])\n\nwhile deq:\n\n    fr = deq.pop()\n\n    ng = color[fr]\n\n    c = 0\n\n    for go in g[fr]:\n\n        if go == parent[fr]:\n\n            continue\n\n        if c == ng:\n\n            c += 1\n\n        parent[go] = fr\n\n        color[go] = c\n\n        c += 1\n\n        deq.append(go)\n\n        order.append(go)\n\nrank = [0]*n\n\nfor i,j in enumerate(order):\n\n    rank[j] = i\n\nprint((max(color)+1))\n\nfor a,b in ab:\n\n    if rank[a] < rank[b]:\n\n        print((color[b]+1))\n\n    else:\n\n        print((color[a]+1))","code_v0_loc":50,"code_v1_loc":44,"code_v0_num_chars":983,"code_v1_num_chars":912,"code_v0_no_empty_lines":"import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nN = int(readline())\nAB = [list(map(int, readline().split())) for i in range(N - 1)]\ngraph = [[] for _ in range(N + 1)]  # \u96a3\u63a5\u30ea\u30b9\u30c8\nfor a, b in AB:\n    graph[a].append(b)\n    graph[b].append(a)\n# \u89aa\u306e\u30ce\u30fc\u30c9\u306b\u5b50\u3092\u5165\u308c\u3066\u304fdfs\nstack = [1]\nparent = [0] * (N + 1)\norder = []\nwhile stack:\n    x = stack.pop()\n    order.append(x)\n    for i in graph[x]:\n        if i == parent[x]:\n            continue\n        parent[i] = x\n        stack.append(i)\n# \u5404\u5b50\u306e\u8272\u3092\u6c7a\u3081\u3066\u3044\u304f\u3002\ncolor = [-1] * (N + 1)\nfor x in order:\n    ng = color[x]\n    c = 1\n    for y in graph[x]:\n        if parent[x] == y:\n            continue\n        if c == ng:\n            c += 1\n        color[y] = c\n        c += 1\nans = []\nfor a, b in AB:\n    if parent[a] == b:  # \u5b50\u306e\u9802\u70b9\u306e\u8272\u3092\u5165\u308c\u308b\n        ans.append(color[a])\n    else:\n        ans.append(color[b])\nprint((max(ans)))\nfor i in ans:\n    print(i)\n","code_v1_no_empty_lines":"import sys\nfrom collections import deque\n\nreadline = sys.stdin.buffer.readline\n\n\ndef even(n):\n    return 1 if n % 2 == 0 else 0\n\n\nn = int(readline())\ng = [[] for _ in range(n)]  # \u96a3\u63a5\u30ea\u30b9\u30c8\nab = []\nfor i in range(n - 1):\n    a, b = list(map(int, readline().split()))\n    a, b = a - 1, b - 1\n    ab.append((a, b))\n    g[a].append(b)\n    g[b].append(a)\nroot = 0\nparent = [0] * n\ndeq = deque([root])\norder = [root]\ncolor = [-1] * n\ndeq = deque([root])\nwhile deq:\n    fr = deq.pop()\n    ng = color[fr]\n    c = 0\n    for go in g[fr]:\n        if go == parent[fr]:\n            continue\n        if c == ng:\n            c += 1\n        parent[go] = fr\n        color[go] = c\n        c += 1\n        deq.append(go)\n        order.append(go)\nrank = [0] * n\nfor i, j in enumerate(order):\n    rank[j] = i\nprint((max(color) + 1))\nfor a, b in ab:\n    if rank[a] < rank[b]:\n        print((color[b] + 1))\n    else:\n        print((color[a] + 1))\n","code_same":false,"relative_loc_diff_percent":12.0,"diff":["+from collections import deque","-read = sys.stdin.buffer.read","-readlines = sys.stdin.buffer.readlines","-N = int(readline())","-AB = [list(map(int, readline().split())) for i in range(N - 1)]","-graph = [[] for _ in range(N + 1)]  # \u96a3\u63a5\u30ea\u30b9\u30c8","-for a, b in AB:","-    graph[a].append(b)","-    graph[b].append(a)","-# \u89aa\u306e\u30ce\u30fc\u30c9\u306b\u5b50\u3092\u5165\u308c\u3066\u304fdfs","-stack = [1]","-parent = [0] * (N + 1)","-order = []","-while stack:","-    x = stack.pop()","-    order.append(x)","-    for i in graph[x]:","-        if i == parent[x]:","-            continue","-        parent[i] = x","-        stack.append(i)","-# \u5404\u5b50\u306e\u8272\u3092\u6c7a\u3081\u3066\u3044\u304f\u3002","-color = [-1] * (N + 1)","-for x in order:","-    ng = color[x]","-    c = 1","-    for y in graph[x]:","-        if parent[x] == y:","+","+","+def even(n):","+    return 1 if n % 2 == 0 else 0","+","+","+n = int(readline())","+g = [[] for _ in range(n)]  # \u96a3\u63a5\u30ea\u30b9\u30c8","+ab = []","+for i in range(n - 1):","+    a, b = list(map(int, readline().split()))","+    a, b = a - 1, b - 1","+    ab.append((a, b))","+    g[a].append(b)","+    g[b].append(a)","+root = 0","+parent = [0] * n","+deq = deque([root])","+order = [root]","+color = [-1] * n","+deq = deque([root])","+while deq:","+    fr = deq.pop()","+    ng = color[fr]","+    c = 0","+    for go in g[fr]:","+        if go == parent[fr]:","-        color[y] = c","+        parent[go] = fr","+        color[go] = c","-ans = []","-for a, b in AB:","-    if parent[a] == b:  # \u5b50\u306e\u9802\u70b9\u306e\u8272\u3092\u5165\u308c\u308b","-        ans.append(color[a])","+        deq.append(go)","+        order.append(go)","+rank = [0] * n","+for i, j in enumerate(order):","+    rank[j] = i","+print((max(color) + 1))","+for a, b in ab:","+    if rank[a] < rank[b]:","+        print((color[b] + 1))","-        ans.append(color[b])","-print((max(ans)))","-for i in ans:","-    print(i)","+        print((color[a] + 1))"],"diff_only_import_comment":false,"measured_runtime_v0":0.4448740935,"measured_runtime_v1":0.3325786669,"runtime_lift":1.3376507208,"key":["s665504655","s801203655"]}
{"user_id":"u094191970","problem_id":"p03575","language":"python","submission_id_v0":"s633729388","submission_id_v1":"s318413779","cpu_time_v0":213,"cpu_time_v1":33,"memory_v0":15412,"memory_v1":3436,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":84.51,"input":"from copy import deepcopy\n\nfrom scipy.sparse.csgraph import floyd_warshall\n\n\n\nn,m=list(map(int,input().split()))\n\nl=[list(map(int,input().split())) for i in range(m)]\n\n\n\ncnt=0\n\nfor i in range(m):\n\n  ll=deepcopy(l)\n\n  del ll[i]\n\n\n\n  d=[[float('inf')]*n for i in range(n)]\n\n  for i in range(n):\n\n    d[i][i]=0\n\n\n\n  for a,b in ll:\n\n    a-=1\n\n    b-=1\n\n    d[a][b]=1\n\n    d[b][a]=1\n\n\n\n  s=floyd_warshall(d)\n\n  for i in s:\n\n    if float('inf') in i:\n\n      cnt+=1\n\n      break\n\n\n\nprint(cnt)","target":"from collections import deque\n\nfrom copy import deepcopy\n\n\n\nn,m=list(map(int,input().split()))\n\nl=[list(map(int,input().split())) for i in range(m)]\n\n\n\ndef BFS(m):\n\n  t_l=deepcopy(l)\n\n  del t_l[m]\n\n\n\n  tree=[[] for j in range(n)]\n\n  for a,b in t_l:\n\n    a-=1\n\n    b-=1\n\n    tree[a].append(b)\n\n    tree[b].append(a)\n\n\n\n  dist=[-1 for i in range(n)]\n\n  dist[0]=0\n\n\n\n  que=deque()\n\n  que.append(0)\n\n\n\n  while que:\n\n    x=que.popleft()\n\n    for i in tree[x]:\n\n      if dist[i]==-1:\n\n        que.append(i)\n\n        dist[i]=dist[x]+1\n\n\n\n  return dist\n\n\n\nans=0\n\nfor i in range(m):\n\n  d=BFS(i)\n\n  if -1 in d:\n\n    ans+=1\n\n\n\nprint(ans)","code_v0_loc":28,"code_v1_loc":39,"code_v0_num_chars":479,"code_v1_num_chars":620,"code_v0_no_empty_lines":"from copy import deepcopy\nfrom scipy.sparse.csgraph import floyd_warshall\n\nn, m = list(map(int, input().split()))\nl = [list(map(int, input().split())) for i in range(m)]\ncnt = 0\nfor i in range(m):\n    ll = deepcopy(l)\n    del ll[i]\n    d = [[float(\"inf\")] * n for i in range(n)]\n    for i in range(n):\n        d[i][i] = 0\n    for a, b in ll:\n        a -= 1\n        b -= 1\n        d[a][b] = 1\n        d[b][a] = 1\n    s = floyd_warshall(d)\n    for i in s:\n        if float(\"inf\") in i:\n            cnt += 1\n            break\nprint(cnt)\n","code_v1_no_empty_lines":"from collections import deque\nfrom copy import deepcopy\n\nn, m = list(map(int, input().split()))\nl = [list(map(int, input().split())) for i in range(m)]\n\n\ndef BFS(m):\n    t_l = deepcopy(l)\n    del t_l[m]\n    tree = [[] for j in range(n)]\n    for a, b in t_l:\n        a -= 1\n        b -= 1\n        tree[a].append(b)\n        tree[b].append(a)\n    dist = [-1 for i in range(n)]\n    dist[0] = 0\n    que = deque()\n    que.append(0)\n    while que:\n        x = que.popleft()\n        for i in tree[x]:\n            if dist[i] == -1:\n                que.append(i)\n                dist[i] = dist[x] + 1\n    return dist\n\n\nans = 0\nfor i in range(m):\n    d = BFS(i)\n    if -1 in d:\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":28.2051282051,"diff":["+from collections import deque","-from scipy.sparse.csgraph import floyd_warshall","-cnt = 0","-for i in range(m):","-    ll = deepcopy(l)","-    del ll[i]","-    d = [[float(\"inf\")] * n for i in range(n)]","-    for i in range(n):","-        d[i][i] = 0","-    for a, b in ll:","+","+","+def BFS(m):","+    t_l = deepcopy(l)","+    del t_l[m]","+    tree = [[] for j in range(n)]","+    for a, b in t_l:","-        d[a][b] = 1","-        d[b][a] = 1","-    s = floyd_warshall(d)","-    for i in s:","-        if float(\"inf\") in i:","-            cnt += 1","-            break","-print(cnt)","+        tree[a].append(b)","+        tree[b].append(a)","+    dist = [-1 for i in range(n)]","+    dist[0] = 0","+    que = deque()","+    que.append(0)","+    while que:","+        x = que.popleft()","+        for i in tree[x]:","+            if dist[i] == -1:","+                que.append(i)","+                dist[i] = dist[x] + 1","+    return dist","+","+","+ans = 0","+for i in range(m):","+    d = BFS(i)","+    if -1 in d:","+        ans += 1","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.9204517574,"measured_runtime_v1":0.2149319355,"runtime_lift":8.9351624385,"key":["s633729388","s318413779"]}
{"user_id":"u104442591","problem_id":"p03013","language":"python","submission_id_v0":"s155010894","submission_id_v1":"s219302700","cpu_time_v0":466,"cpu_time_v1":178,"memory_v0":460020,"memory_v1":13212,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":61.8,"input":"n, m = list(map(int, input().split()))\n\na = []\n\nfor i in range(m):\n\n  a.append(int(eval(input())))\n\nans = 0\n\nflag = 0\n\na = set(a)\n\n\n\n#\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u521d\u671f\u5024\u3092\u8abf\u7bc0\n\ndp = [0] * (n+1)\n\ndp[0] = 1\n\nif 1 in a:\n\n  dp[1] = 0\n\nelse:\n\n  dp[1] = 1\n\n  \n\nfor i in range(2, n+1):\n\n  if dp[i-2] == 0 and dp[i-1] == 0:\n\n    ans = 0\n\n    flag = 1\n\n    break\n\n  elif i in a:\n\n    continue\n\n  else:\n\n    dp[i] = dp[i-1] + dp[i-2]\n\nif flag == 0:\n\n  ans = dp[n]\n\nprint((ans%(10**9+7)))","target":"n, m = list(map(int, input().split()))\n\na = []\n\nfor i in range(m):\n\n  a.append(int(eval(input())))\n\nans = 0\n\nflag = 0\n\na = set(a)\n\n\n\n#\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u521d\u671f\u5024\u3092\u8abf\u7bc0\n\ndp = [0] * (n+1)\n\ndp[0] = 1\n\nif 1 in a:\n\n  dp[1] = 0\n\nelse:\n\n  dp[1] = 1\n\n  \n\nfor i in range(2, n+1):\n\n  if dp[i-2] == 0 and dp[i-1] == 0:\n\n    ans = 0\n\n    flag = 1\n\n    break\n\n  elif i in a:\n\n    continue\n\n  else:\n\n    dp[i] = dp[i-1] + dp[i-2]\n\n    dp[i] = dp[i] % (10**9+7)\n\nif flag == 0:\n\n  ans = dp[n]\n\nprint(ans)","code_v0_loc":28,"code_v1_loc":29,"code_v0_num_chars":437,"code_v1_num_chars":458,"code_v0_no_empty_lines":"n, m = list(map(int, input().split()))\na = []\nfor i in range(m):\n    a.append(int(eval(input())))\nans = 0\nflag = 0\na = set(a)\n# \u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u521d\u671f\u5024\u3092\u8abf\u7bc0\ndp = [0] * (n + 1)\ndp[0] = 1\nif 1 in a:\n    dp[1] = 0\nelse:\n    dp[1] = 1\nfor i in range(2, n + 1):\n    if dp[i - 2] == 0 and dp[i - 1] == 0:\n        ans = 0\n        flag = 1\n        break\n    elif i in a:\n        continue\n    else:\n        dp[i] = dp[i - 1] + dp[i - 2]\nif flag == 0:\n    ans = dp[n]\nprint((ans % (10**9 + 7)))\n","code_v1_no_empty_lines":"n, m = list(map(int, input().split()))\na = []\nfor i in range(m):\n    a.append(int(eval(input())))\nans = 0\nflag = 0\na = set(a)\n# \u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u521d\u671f\u5024\u3092\u8abf\u7bc0\ndp = [0] * (n + 1)\ndp[0] = 1\nif 1 in a:\n    dp[1] = 0\nelse:\n    dp[1] = 1\nfor i in range(2, n + 1):\n    if dp[i - 2] == 0 and dp[i - 1] == 0:\n        ans = 0\n        flag = 1\n        break\n    elif i in a:\n        continue\n    else:\n        dp[i] = dp[i - 1] + dp[i - 2]\n        dp[i] = dp[i] % (10**9 + 7)\nif flag == 0:\n    ans = dp[n]\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":3.4482758621,"diff":["+        dp[i] = dp[i] % (10**9 + 7)","-print((ans % (10**9 + 7)))","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2009983099,"measured_runtime_v1":0.0059565909,"runtime_lift":33.7438499966,"key":["s155010894","s219302700"]}
{"user_id":"u325956328","problem_id":"p02780","language":"python","submission_id_v0":"s608143765","submission_id_v1":"s686875697","cpu_time_v0":606,"cpu_time_v1":256,"memory_v0":33988,"memory_v1":25572,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":57.76,"input":"import numpy as np\n\n\n\nN, K = list(map(int, input().split()))\n\np = np.array(list(map(int, input().split())))\n\n\n\ns = np.cumsum(p)\n\n# print(p, s)\n\n\n\nm = []\n\n\n\n\n\ndef partsum(s, x):\n\n    global K\n\n    if x == K - 1:\n\n        return s[x]\n\n    return s[x] - s[x - K]\n\n\n\n\n\nfor i in range(K - 1, N):\n\n    m.append(partsum(s, i))\n\n# print(m)\n\n\n\nidx = m.index(max(m))\n\n# print(idx)\n\n\n\nans = 0\n\nfor j in range(idx, idx + K):\n\n    ans += (p[j] + 1) \/ 2\n\nprint(ans)\n","target":"from collections import deque\n\n\n\nN, K = list(map(int, input().split()))\n\np = list(map(int, input().split()))\n\n\n\nmx = 0\n\ns = 0\n\nq = deque()\n\n\n\nfor i in range(N):\n\n    p[i] += 1\n\n\n\nfor i in range(N):\n\n    s += p[i]\n\n    q.append(p[i])\n\n    if len(q) > K:\n\n        s -= q.popleft()\n\n    if len(q) == K:\n\n        mx = max(mx, s)\n\n\n\nprint((mx \/ 2))\n\n\n","code_v0_loc":29,"code_v1_loc":22,"code_v0_num_chars":446,"code_v1_num_chars":338,"code_v0_no_empty_lines":"import numpy as np\n\nN, K = list(map(int, input().split()))\np = np.array(list(map(int, input().split())))\ns = np.cumsum(p)\n# print(p, s)\nm = []\n\n\ndef partsum(s, x):\n    global K\n    if x == K - 1:\n        return s[x]\n    return s[x] - s[x - K]\n\n\nfor i in range(K - 1, N):\n    m.append(partsum(s, i))\n# print(m)\nidx = m.index(max(m))\n# print(idx)\nans = 0\nfor j in range(idx, idx + K):\n    ans += (p[j] + 1) \/ 2\nprint(ans)\n","code_v1_no_empty_lines":"from collections import deque\n\nN, K = list(map(int, input().split()))\np = list(map(int, input().split()))\nmx = 0\ns = 0\nq = deque()\nfor i in range(N):\n    p[i] += 1\nfor i in range(N):\n    s += p[i]\n    q.append(p[i])\n    if len(q) > K:\n        s -= q.popleft()\n    if len(q) == K:\n        mx = max(mx, s)\nprint((mx \/ 2))\n","code_same":false,"relative_loc_diff_percent":24.1379310345,"diff":["-import numpy as np","+from collections import deque","-p = np.array(list(map(int, input().split())))","-s = np.cumsum(p)","-# print(p, s)","-m = []","-","-","-def partsum(s, x):","-    global K","-    if x == K - 1:","-        return s[x]","-    return s[x] - s[x - K]","-","-","-for i in range(K - 1, N):","-    m.append(partsum(s, i))","-# print(m)","-idx = m.index(max(m))","-# print(idx)","-ans = 0","-for j in range(idx, idx + K):","-    ans += (p[j] + 1) \/ 2","-print(ans)","+p = list(map(int, input().split()))","+mx = 0","+s = 0","+q = deque()","+for i in range(N):","+    p[i] += 1","+for i in range(N):","+    s += p[i]","+    q.append(p[i])","+    if len(q) > K:","+        s -= q.popleft()","+    if len(q) == K:","+        mx = max(mx, s)","+print((mx \/ 2))"],"diff_only_import_comment":false,"measured_runtime_v0":1.8877932756,"measured_runtime_v1":0.2490595601,"runtime_lift":7.5796860601,"key":["s608143765","s686875697"]}
{"user_id":"u263188345","problem_id":"p03126","language":"python","submission_id_v0":"s215059135","submission_id_v1":"s051824790","cpu_time_v0":163,"cpu_time_v1":17,"memory_v0":13144,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":89.57,"input":"import numpy as np\n\n\n\nN, M = list(map(int, input().split()))\n\n\n\nlike_total = np.zeros(M)\n\ncnt = 0\n\nfor _ in range(N):\n\n    l = [v for v in map(int, input().split())]\n\n    #print(l)\n\n    for i in range(1, l[0]+1, 1):\n\n        like_total[l[i]-1] += 1\n\n\n\n#print(like_total, N)\n\n#print(like_total[4], like_total[9], like_total[-1])\n\nans = len(np.where(like_total==N)[0])\n\n\n\nprint(ans)\n","target":"N, M = list(map(int, input().split()))\n\n\n\nlike_total = [0]*M\n\ncnt = 0\n\nfor _ in range(N):\n\n    l = list(map(int, input().split()))\n\n    for i in range(1, l[0]+1, 1):\n\n        like_total[l[i]-1] += 1\n\n\n\nfor v in like_total:\n\n    cnt += v==N\n\nprint(cnt)\n","code_v0_loc":17,"code_v1_loc":12,"code_v0_num_chars":375,"code_v1_num_chars":246,"code_v0_no_empty_lines":"import numpy as np\n\nN, M = list(map(int, input().split()))\nlike_total = np.zeros(M)\ncnt = 0\nfor _ in range(N):\n    l = [v for v in map(int, input().split())]\n    # print(l)\n    for i in range(1, l[0] + 1, 1):\n        like_total[l[i] - 1] += 1\n# print(like_total, N)\n# print(like_total[4], like_total[9], like_total[-1])\nans = len(np.where(like_total == N)[0])\nprint(ans)\n","code_v1_no_empty_lines":"N, M = list(map(int, input().split()))\nlike_total = [0] * M\ncnt = 0\nfor _ in range(N):\n    l = list(map(int, input().split()))\n    for i in range(1, l[0] + 1, 1):\n        like_total[l[i] - 1] += 1\nfor v in like_total:\n    cnt += v == N\nprint(cnt)\n","code_same":false,"relative_loc_diff_percent":29.4117647059,"diff":["-import numpy as np","-","-like_total = np.zeros(M)","+like_total = [0] * M","-    l = [v for v in map(int, input().split())]","-    # print(l)","+    l = list(map(int, input().split()))","-# print(like_total, N)","-# print(like_total[4], like_total[9], like_total[-1])","-ans = len(np.where(like_total == N)[0])","-print(ans)","+for v in like_total:","+    cnt += v == N","+print(cnt)"],"diff_only_import_comment":false,"measured_runtime_v0":1.4440002892,"measured_runtime_v1":0.2203136516,"runtime_lift":6.5542932946,"key":["s215059135","s051824790"]}
{"user_id":"u600402037","problem_id":"p03200","language":"python","submission_id_v0":"s238646365","submission_id_v1":"s273593908","cpu_time_v0":247,"cpu_time_v1":188,"memory_v0":24588,"memory_v1":14540,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":23.89,"input":"import sys\n\nimport numpy as np\n\n\n\nstdin = sys.stdin\n\n \n\nri = lambda: int(rs())\n\nrl = lambda: list(map(int, stdin.readline().split()))\n\nrs = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\n\n\nS = list(rs())\n\nW = [0] * len(S)\n\nfor i in range(len(S)):\n\n    if S[i] == 'W':\n\n        W[i] = 1\n\nW = np.array(W[::-1])\n\nW_cum = W.cumsum()[::-1]\n\nW_cum = W_cum.tolist()\n\nanswer = 0\n\nfor i in range(len(S)):\n\n    if S[i] == 'B':\n\n        answer += W_cum[i]\n\n\n\nprint(answer)","target":"import sys\n\nimport numpy as np\n\n\n\nstdin = sys.stdin\n\n \n\nri = lambda: int(rs())\n\nrl = lambda: list(map(int, stdin.readline().split()))\n\nrs = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\n\n\nS = list(rs())\n\ncnt_B = 0\n\nanswer = 0\n\nfor s in S:\n\n    if s == 'B':\n\n        cnt_B += 1\n\n    else:\n\n        answer += cnt_B\n\nprint(answer)\n","code_v0_loc":23,"code_v1_loc":18,"code_v0_num_chars":475,"code_v1_num_chars":343,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nstdin = sys.stdin\nri = lambda: int(rs())\nrl = lambda: list(map(int, stdin.readline().split()))\nrs = lambda: stdin.readline().rstrip()  # ignore trailing spaces\nS = list(rs())\nW = [0] * len(S)\nfor i in range(len(S)):\n    if S[i] == \"W\":\n        W[i] = 1\nW = np.array(W[::-1])\nW_cum = W.cumsum()[::-1]\nW_cum = W_cum.tolist()\nanswer = 0\nfor i in range(len(S)):\n    if S[i] == \"B\":\n        answer += W_cum[i]\nprint(answer)\n","code_v1_no_empty_lines":"import sys\nimport numpy as np\n\nstdin = sys.stdin\nri = lambda: int(rs())\nrl = lambda: list(map(int, stdin.readline().split()))\nrs = lambda: stdin.readline().rstrip()  # ignore trailing spaces\nS = list(rs())\ncnt_B = 0\nanswer = 0\nfor s in S:\n    if s == \"B\":\n        cnt_B += 1\n    else:\n        answer += cnt_B\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":21.7391304348,"diff":["-W = [0] * len(S)","-for i in range(len(S)):","-    if S[i] == \"W\":","-        W[i] = 1","-W = np.array(W[::-1])","-W_cum = W.cumsum()[::-1]","-W_cum = W_cum.tolist()","+cnt_B = 0","-for i in range(len(S)):","-    if S[i] == \"B\":","-        answer += W_cum[i]","+for s in S:","+    if s == \"B\":","+        cnt_B += 1","+    else:","+        answer += cnt_B"],"diff_only_import_comment":false,"measured_runtime_v0":1.3702549627,"measured_runtime_v1":0.2093048743,"runtime_lift":6.5466939885,"key":["s238646365","s273593908"]}
{"user_id":"u712975113","problem_id":"p03126","language":"python","submission_id_v0":"s000173013","submission_id_v1":"s171225616","cpu_time_v0":186,"cpu_time_v1":18,"memory_v0":12396,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":90.32,"input":"import numpy as np\n\nN,M=list(map(int,input().split()))\n\nA=np.zeros((N+1,M+1))\n\nA[0]=np.ones(M+1)\n\nfor i in range(1,N+1):\n\n    B=list(map(int,input().split()))\n\n    for m in range(1,B[0]+1):\n\n        A[i][B[m]]=A[i-1][B[m]]\n\na=sum(A[N])\n\nprint((int(a)))","target":"N,M=list(map(int,input().split()))\n\nA = [[1 for _ in range(M)]]+[[0 for _ in range(M)] for _ in range(N)]\n\nfor i in range(1,N+1):\n\n    B=list(map(int,input().split()))\n\n    Ai=B[1:]\n\n    for m in Ai:\n\n        A[i][m-1]=A[i-1][m-1]\n\na=sum(A[N])\n\nprint((int(a)))","code_v0_loc":10,"code_v1_loc":9,"code_v0_num_chars":244,"code_v1_num_chars":252,"code_v0_no_empty_lines":"import numpy as np\n\nN, M = list(map(int, input().split()))\nA = np.zeros((N + 1, M + 1))\nA[0] = np.ones(M + 1)\nfor i in range(1, N + 1):\n    B = list(map(int, input().split()))\n    for m in range(1, B[0] + 1):\n        A[i][B[m]] = A[i - 1][B[m]]\na = sum(A[N])\nprint((int(a)))\n","code_v1_no_empty_lines":"N, M = list(map(int, input().split()))\nA = [[1 for _ in range(M)]] + [[0 for _ in range(M)] for _ in range(N)]\nfor i in range(1, N + 1):\n    B = list(map(int, input().split()))\n    Ai = B[1:]\n    for m in Ai:\n        A[i][m - 1] = A[i - 1][m - 1]\na = sum(A[N])\nprint((int(a)))\n","code_same":false,"relative_loc_diff_percent":10.0,"diff":["-import numpy as np","-","-A = np.zeros((N + 1, M + 1))","-A[0] = np.ones(M + 1)","+A = [[1 for _ in range(M)]] + [[0 for _ in range(M)] for _ in range(N)]","-    for m in range(1, B[0] + 1):","-        A[i][B[m]] = A[i - 1][B[m]]","+    Ai = B[1:]","+    for m in Ai:","+        A[i][m - 1] = A[i - 1][m - 1]"],"diff_only_import_comment":false,"measured_runtime_v0":1.536293736,"measured_runtime_v1":0.2500440102,"runtime_lift":6.1440933335,"key":["s000173013","s171225616"]}
{"user_id":"u894258749","problem_id":"p03126","language":"python","submission_id_v0":"s237503515","submission_id_v1":"s632748027","cpu_time_v0":156,"cpu_time_v1":17,"memory_v0":12396,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":89.1,"input":"import numpy as np\n\n\n\n(N,M) = list(map(int,input().split()))\n\nB = np.ones(M,dtype=np.int)\n\n\n\nfor _ in range(N):\n\n    A = np.array(list(map(int,input().split())))[1:]\n\n    for i in range(M):\n\n        if not i+1 in A:\n\n            B[i] = 0\n\nprint((B.sum()))","target":"(N,M) = list(map(int,input().split()))\n\nr = int(-1)\n\nfor i in range(N):\n\n  A = list(map(int,input().split()))\n\n  A.pop(0)\n\n  c = 0\n\n  for a in A:\n\n    c |= (1 << (a-1))\n\n  r &= c\n\n\n\nans = sum([(r>>n)&1 for n in range(M)])\n\nprint(ans)","code_v0_loc":11,"code_v1_loc":12,"code_v0_num_chars":247,"code_v1_num_chars":227,"code_v0_no_empty_lines":"import numpy as np\n\n(N, M) = list(map(int, input().split()))\nB = np.ones(M, dtype=np.int)\nfor _ in range(N):\n    A = np.array(list(map(int, input().split())))[1:]\n    for i in range(M):\n        if not i + 1 in A:\n            B[i] = 0\nprint((B.sum()))\n","code_v1_no_empty_lines":"(N, M) = list(map(int, input().split()))\nr = int(-1)\nfor i in range(N):\n    A = list(map(int, input().split()))\n    A.pop(0)\n    c = 0\n    for a in A:\n        c |= 1 << (a - 1)\n    r &= c\nans = sum([(r >> n) & 1 for n in range(M)])\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":8.3333333333,"diff":["-import numpy as np","-","-B = np.ones(M, dtype=np.int)","-for _ in range(N):","-    A = np.array(list(map(int, input().split())))[1:]","-    for i in range(M):","-        if not i + 1 in A:","-            B[i] = 0","-print((B.sum()))","+r = int(-1)","+for i in range(N):","+    A = list(map(int, input().split()))","+    A.pop(0)","+    c = 0","+    for a in A:","+        c |= 1 << (a - 1)","+    r &= c","+ans = sum([(r >> n) & 1 for n in range(M)])","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.7091809404,"measured_runtime_v1":0.2837385476,"runtime_lift":6.0237882903,"key":["s237503515","s632748027"]}
{"user_id":"u803848678","problem_id":"p03558","language":"python","submission_id_v0":"s650935446","submission_id_v1":"s013593877","cpu_time_v0":647,"cpu_time_v1":206,"memory_v0":80204,"memory_v1":46940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":68.16,"input":"from heapq import heappush, heappop\n\nk = int(eval(input()))\n\n\n\nheap = [(1,1)]\n\ndist = [float(\"inf\")]*k\n\nwhile heap:\n\n    cost, cur = heappop(heap)\n\n    if dist[cur] <= cost:\n\n        continue\n\n    dist[cur] = cost\n\n    # +1\n\n    nxt = (cur+1)%k\n\n    heappush(heap, (cost+1, nxt))\n\n    # *10\n\n    nxt = cur*10 % k\n\n    heappush(heap, (cost, nxt))\n\n\n\nprint((dist[0]))","target":"from collections import deque\n\nk = int(eval(input()))\n\n\n\nque = deque()\n\nque.append((1,1))\n\ndist = [float(\"inf\")]*k\n\nwhile que:\n\n    cost, cur = que.popleft()\n\n    if dist[cur] <= cost:\n\n        continue\n\n    dist[cur] = cost\n\n    # +1\n\n    nxt = (cur+1)%k\n\n    que.append((cost+1,nxt))\n\n    # *10\n\n    nxt = cur*10 % k\n\n    que.appendleft((cost, nxt))\n\nprint((dist[0]))","code_v0_loc":18,"code_v1_loc":18,"code_v0_num_chars":357,"code_v1_num_chars":361,"code_v0_no_empty_lines":"from heapq import heappush, heappop\n\nk = int(eval(input()))\nheap = [(1, 1)]\ndist = [float(\"inf\")] * k\nwhile heap:\n    cost, cur = heappop(heap)\n    if dist[cur] <= cost:\n        continue\n    dist[cur] = cost\n    # +1\n    nxt = (cur + 1) % k\n    heappush(heap, (cost + 1, nxt))\n    # *10\n    nxt = cur * 10 % k\n    heappush(heap, (cost, nxt))\nprint((dist[0]))\n","code_v1_no_empty_lines":"from collections import deque\n\nk = int(eval(input()))\nque = deque()\nque.append((1, 1))\ndist = [float(\"inf\")] * k\nwhile que:\n    cost, cur = que.popleft()\n    if dist[cur] <= cost:\n        continue\n    dist[cur] = cost\n    # +1\n    nxt = (cur + 1) % k\n    que.append((cost + 1, nxt))\n    # *10\n    nxt = cur * 10 % k\n    que.appendleft((cost, nxt))\nprint((dist[0]))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-from heapq import heappush, heappop","+from collections import deque","-heap = [(1, 1)]","+que = deque()","+que.append((1, 1))","-while heap:","-    cost, cur = heappop(heap)","+while que:","+    cost, cur = que.popleft()","-    heappush(heap, (cost + 1, nxt))","+    que.append((cost + 1, nxt))","-    heappush(heap, (cost, nxt))","+    que.appendleft((cost, nxt))"],"diff_only_import_comment":false,"measured_runtime_v0":0.7778599041,"measured_runtime_v1":0.4842932501,"runtime_lift":1.6061753987,"key":["s650935446","s013593877"]}
{"user_id":"u164727245","problem_id":"p02690","language":"python","submission_id_v0":"s738393480","submission_id_v1":"s821832490","cpu_time_v0":29,"cpu_time_v1":25,"memory_v0":9144,"memory_v1":9112,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.79,"input":"# coding: utf-8\n\n\n\n\n\ndef solve(*args: str) -> str:\n\n    x = int(args[0])\n\n\n\n    ret = None\n\n    for a in range(120):\n\n        for b in range(120):\n\n            a5, b5 = pow(a, 5), pow(b, 5)\n\n            if a5-b5 == x:\n\n                ret = (a, b)\n\n            elif a5+b5 == x:\n\n                ret = (a, -b)\n\n\n\n    return ' '.join(map(str, ret))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    print((solve(*(open(0).read().splitlines()))))\n","target":"# coding: utf-8\n\n\n\n\n\ndef solve(*args: str) -> str:\n\n    x = int(args[0])\n\n\n\n    ret = None\n\n    for b in range(120):\n\n        for a in range(b, 120):\n\n            a5, b5 = pow(a, 5), pow(b, 5)\n\n            if a5-b5 == x:\n\n                ret = (a, b)\n\n            elif a5+b5 == x:\n\n                ret = (a, -b)\n\n\n\n    return ' '.join(map(str, ret))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    print((solve(*(open(0).read().splitlines()))))\n","code_v0_loc":20,"code_v1_loc":20,"code_v0_num_chars":429,"code_v1_num_chars":432,"code_v0_no_empty_lines":"# coding: utf-8\ndef solve(*args: str) -> str:\n    x = int(args[0])\n    ret = None\n    for a in range(120):\n        for b in range(120):\n            a5, b5 = pow(a, 5), pow(b, 5)\n            if a5 - b5 == x:\n                ret = (a, b)\n            elif a5 + b5 == x:\n                ret = (a, -b)\n    return \" \".join(map(str, ret))\n\n\nif __name__ == \"__main__\":\n    print((solve(*(open(0).read().splitlines()))))\n","code_v1_no_empty_lines":"# coding: utf-8\ndef solve(*args: str) -> str:\n    x = int(args[0])\n    ret = None\n    for b in range(120):\n        for a in range(b, 120):\n            a5, b5 = pow(a, 5), pow(b, 5)\n            if a5 - b5 == x:\n                ret = (a, b)\n            elif a5 + b5 == x:\n                ret = (a, -b)\n    return \" \".join(map(str, ret))\n\n\nif __name__ == \"__main__\":\n    print((solve(*(open(0).read().splitlines()))))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    for a in range(120):","-        for b in range(120):","+    for b in range(120):","+        for a in range(b, 120):"],"diff_only_import_comment":false,"measured_runtime_v0":0.3019295235,"measured_runtime_v1":0.2210984349,"runtime_lift":1.3655886964,"key":["s738393480","s821832490"]}
{"user_id":"u853010060","problem_id":"p02921","language":"python","submission_id_v0":"s066833687","submission_id_v1":"s453964878","cpu_time_v0":21,"cpu_time_v1":17,"memory_v0":3060,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":19.05,"input":"S = eval(input())\n\nT = eval(input())\n\n\n\nl = len(S)\n\nres = 0\n\nfor n in range(l):\n\n    if S[n] == T[n]:\n\n        res += 1\n\nprint(res)","target":"S = eval(input())\n\nT = eval(input())\n\nl = len(S)\n\nans = 0\n\nfor n in range(l):\n\n    if S[n] == T[n]:\n\n        ans += 1\n\nprint(ans)\n","code_v0_loc":9,"code_v1_loc":8,"code_v0_num_chars":119,"code_v1_num_chars":118,"code_v0_no_empty_lines":"S = eval(input())\nT = eval(input())\nl = len(S)\nres = 0\nfor n in range(l):\n    if S[n] == T[n]:\n        res += 1\nprint(res)\n","code_v1_no_empty_lines":"S = eval(input())\nT = eval(input())\nl = len(S)\nans = 0\nfor n in range(l):\n    if S[n] == T[n]:\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["-res = 0","+ans = 0","-        res += 1","-print(res)","+        ans += 1","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3049550076,"measured_runtime_v1":0.2412325363,"runtime_lift":1.2641537174,"key":["s066833687","s453964878"]}
{"user_id":"u884323674","problem_id":"p03371","language":"python","submission_id_v0":"s486102959","submission_id_v1":"s507293588","cpu_time_v0":228,"cpu_time_v1":129,"memory_v0":3064,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":43.42,"input":"A, B, C, X, Y = list(map(int, input().split()))\n\n\n\nmax_iter = max(X, Y) * 2\n\nans = float(\"inf\")\n\nfor i in range(max_iter):\n\n    a = max(X - i, 0)\n\n    b = max(Y - i, 0)\n\n    price = 2*C * i + A * a + B * b\n\n    ans = min(ans, price)\n\n\n\nprint(ans)","target":"A, B, C, X, Y = list(map(int, input().split()))\n\n\n\nans = float(\"inf\")\n\nfor i in range(max(X, Y)+1):\n\n    x = max(X - i, 0)\n\n    y = max(Y - i, 0)\n\n    cost = 2*C * i + A * x + B * y\n\n    ans = min(ans, cost)\n\n\n\nprint(ans)","code_v0_loc":11,"code_v1_loc":10,"code_v0_num_chars":240,"code_v1_num_chars":215,"code_v0_no_empty_lines":"A, B, C, X, Y = list(map(int, input().split()))\nmax_iter = max(X, Y) * 2\nans = float(\"inf\")\nfor i in range(max_iter):\n    a = max(X - i, 0)\n    b = max(Y - i, 0)\n    price = 2 * C * i + A * a + B * b\n    ans = min(ans, price)\nprint(ans)\n","code_v1_no_empty_lines":"A, B, C, X, Y = list(map(int, input().split()))\nans = float(\"inf\")\nfor i in range(max(X, Y) + 1):\n    x = max(X - i, 0)\n    y = max(Y - i, 0)\n    cost = 2 * C * i + A * x + B * y\n    ans = min(ans, cost)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":9.0909090909,"diff":["-max_iter = max(X, Y) * 2","-for i in range(max_iter):","-    a = max(X - i, 0)","-    b = max(Y - i, 0)","-    price = 2 * C * i + A * a + B * b","-    ans = min(ans, price)","+for i in range(max(X, Y) + 1):","+    x = max(X - i, 0)","+    y = max(Y - i, 0)","+    cost = 2 * C * i + A * x + B * y","+    ans = min(ans, cost)"],"diff_only_import_comment":false,"measured_runtime_v0":0.4454369638,"measured_runtime_v1":0.3371012073,"runtime_lift":1.321374573,"key":["s486102959","s507293588"]}
{"user_id":"u755801379","problem_id":"p02780","language":"python","submission_id_v0":"s334440768","submission_id_v1":"s407777290","cpu_time_v0":402,"cpu_time_v1":240,"memory_v0":32348,"memory_v1":23588,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":40.3,"input":"import numpy as np\n\nn,k=list(map(int, input().split()))\n\nexp=list([(int(x)+1)\/2 for x in input().split()]) # \u5165\u529b\u3068\u540c\u6642\u306b\u671f\u5f85\u5024\u8a08\u7b97\n\n\n\nl=np.cumsum(exp) # \u7d2f\u7a4d\u548c\u306e\u8a08\u7b97\n\n\n\nans=l[k-1]\n\nfor i in range(n-k):\n\n    ans=max(ans,l[i+k]-l[i])\n\n    \n\nprint(ans)","target":"n,k=list(map(int, input().split()))\n\nexp=list([(int(x)+1)\/2 for x in input().split()]) # \u5165\u529b\u3068\u540c\u6642\u306b\u671f\u5f85\u5024\u8a08\u7b97\n\n\n\nl=[0]*n\n\nsum1=0\n\nfor i in range(n):# \u7d2f\u7a4d\u548c\u306e\u8a08\u7b97\n\n    sum1+=exp[i]\n\n    l[i]=sum1 \n\n\n\nans=l[k-1]\n\nfor i in range(n-k):\n\n    ans=max(ans,l[i+k]-l[i])\n\n    \n\nprint(ans)","code_v0_loc":11,"code_v1_loc":14,"code_v0_num_chars":230,"code_v1_num_chars":262,"code_v0_no_empty_lines":"import numpy as np\n\nn, k = list(map(int, input().split()))\nexp = list([(int(x) + 1) \/ 2 for x in input().split()])  # \u5165\u529b\u3068\u540c\u6642\u306b\u671f\u5f85\u5024\u8a08\u7b97\nl = np.cumsum(exp)  # \u7d2f\u7a4d\u548c\u306e\u8a08\u7b97\nans = l[k - 1]\nfor i in range(n - k):\n    ans = max(ans, l[i + k] - l[i])\nprint(ans)\n","code_v1_no_empty_lines":"n, k = list(map(int, input().split()))\nexp = list([(int(x) + 1) \/ 2 for x in input().split()])  # \u5165\u529b\u3068\u540c\u6642\u306b\u671f\u5f85\u5024\u8a08\u7b97\nl = [0] * n\nsum1 = 0\nfor i in range(n):  # \u7d2f\u7a4d\u548c\u306e\u8a08\u7b97\n    sum1 += exp[i]\n    l[i] = sum1\nans = l[k - 1]\nfor i in range(n - k):\n    ans = max(ans, l[i + k] - l[i])\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":21.4285714286,"diff":["-import numpy as np","-","-l = np.cumsum(exp)  # \u7d2f\u7a4d\u548c\u306e\u8a08\u7b97","+l = [0] * n","+sum1 = 0","+for i in range(n):  # \u7d2f\u7a4d\u548c\u306e\u8a08\u7b97","+    sum1 += exp[i]","+    l[i] = sum1"],"diff_only_import_comment":false,"measured_runtime_v0":1.3928545866,"measured_runtime_v1":0.2122811053,"runtime_lift":6.5613686376,"key":["s334440768","s407777290"]}
{"user_id":"u020390084","problem_id":"p03309","language":"python","submission_id_v0":"s289814925","submission_id_v1":"s781437429","cpu_time_v0":334,"cpu_time_v1":258,"memory_v0":27244,"memory_v1":36640,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":22.75,"input":"import math\n\nimport statistics\n\nn = int(eval(input()))\n\na = list(map(int,input().split()))\n\na = [aa-i-1 for i, aa in enumerate(a)]\n\nanswer = n*10**20\n\nmedian_low = statistics.median_low(a)\n\nmedian_high = statistics.median_high(a)\n\n\n\nfor m in (median_low,median_high):\n\n  ans=0\n\n  for aa in a:\n\n    ans += abs(aa-m)\n\n  answer = min(ans,answer)\n\nprint(answer)\n","target":"#!\/usr\/bin\/env python3\n\nimport sys\n\n\n\n\n\ndef solve(N: int, A: \"List[int]\"):\n\n    difA = [0]*N\n\n\n\n    for i in range(N):\n\n        difA[i] = A[i]-(i+1)\n\n\n\n    difA.sort()\n\n    if N%2 == 0:\n\n        g1 = difA[N\/\/2]\n\n        g2 = difA[N\/\/2-1]\n\n        a1 = 0\n\n        a2 = 0\n\n        for i in range(N):\n\n            a1 += abs(difA[i]-g1)\n\n            a2 += abs(difA[i]-g2)\n\n        print((min(a1,a2)))\n\n            \n\n    else:\n\n        g = difA[N\/\/2]\n\n        a = 0\n\n        for i in range(N):\n\n            a += abs(difA[i]-g)\n\n        print(a)\n\n    return\n\n\n\n\n\ndef main():\n\n    def iterate_tokens():\n\n        for line in sys.stdin:\n\n            for word in line.split():\n\n                yield word\n\n    tokens = iterate_tokens()\n\n    N = int(next(tokens))  # type: int\n\n    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n\n    solve(N, A)\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":15,"code_v1_loc":42,"code_v0_num_chars":352,"code_v1_num_chars":891,"code_v0_no_empty_lines":"import math\nimport statistics\n\nn = int(eval(input()))\na = list(map(int, input().split()))\na = [aa - i - 1 for i, aa in enumerate(a)]\nanswer = n * 10**20\nmedian_low = statistics.median_low(a)\nmedian_high = statistics.median_high(a)\nfor m in (median_low, median_high):\n    ans = 0\n    for aa in a:\n        ans += abs(aa - m)\n    answer = min(ans, answer)\nprint(answer)\n","code_v1_no_empty_lines":"#!\/usr\/bin\/env python3\nimport sys\n\n\ndef solve(N: int, A: \"List[int]\"):\n    difA = [0] * N\n    for i in range(N):\n        difA[i] = A[i] - (i + 1)\n    difA.sort()\n    if N % 2 == 0:\n        g1 = difA[N \/\/ 2]\n        g2 = difA[N \/\/ 2 - 1]\n        a1 = 0\n        a2 = 0\n        for i in range(N):\n            a1 += abs(difA[i] - g1)\n            a2 += abs(difA[i] - g2)\n        print((min(a1, a2)))\n    else:\n        g = difA[N \/\/ 2]\n        a = 0\n        for i in range(N):\n            a += abs(difA[i] - g)\n        print(a)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    solve(N, A)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":64.2857142857,"diff":["-import math","-import statistics","+#!\/usr\/bin\/env python3","+import sys","-n = int(eval(input()))","-a = list(map(int, input().split()))","-a = [aa - i - 1 for i, aa in enumerate(a)]","-answer = n * 10**20","-median_low = statistics.median_low(a)","-median_high = statistics.median_high(a)","-for m in (median_low, median_high):","-    ans = 0","-    for aa in a:","-        ans += abs(aa - m)","-    answer = min(ans, answer)","-print(answer)","+","+def solve(N: int, A: \"List[int]\"):","+    difA = [0] * N","+    for i in range(N):","+        difA[i] = A[i] - (i + 1)","+    difA.sort()","+    if N % 2 == 0:","+        g1 = difA[N \/\/ 2]","+        g2 = difA[N \/\/ 2 - 1]","+        a1 = 0","+        a2 = 0","+        for i in range(N):","+            a1 += abs(difA[i] - g1)","+            a2 += abs(difA[i] - g2)","+        print((min(a1, a2)))","+    else:","+        g = difA[N \/\/ 2]","+        a = 0","+        for i in range(N):","+            a += abs(difA[i] - g)","+        print(a)","+    return","+","+","+def main():","+    def iterate_tokens():","+        for line in sys.stdin:","+            for word in line.split():","+                yield word","+","+    tokens = iterate_tokens()","+    N = int(next(tokens))  # type: int","+    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"","+    solve(N, A)","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.2912476273,"measured_runtime_v1":0.217194303,"runtime_lift":1.3409542662,"key":["s289814925","s781437429"]}
{"user_id":"u060938295","problem_id":"p03170","language":"python","submission_id_v0":"s305058110","submission_id_v1":"s224120927","cpu_time_v0":751,"cpu_time_v1":224,"memory_v0":14280,"memory_v1":14280,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":70.17,"input":"# -*- coding: utf-8 -*-\n\n\"\"\"\n\nCreated on Sat Apr 25 18:20:35 2020\n\n\"\"\"\n\n\n\nimport sys\n\nimport numpy as np\n\n\n\nsys.setrecursionlimit(10 ** 9)\n\ndef input():\n\n    return sys.stdin.readline()[:-1]\n\nmod = 10**9+7\n\n\n\n#N = int(input())\n\nN, K = list(map(int,input().split()))\n\nA = np.array(list(map(int,input().split())))\n\n#N, K, *A = map(int, open(0).read().split())\n\n\n\ndp = [True for i in range(K + A[-1] + 1)]\n\nfor i in range(K):\n\n    if dp[i]:\n\n        for a in A:\n\n            dp[i + a] = False\n\n\n\n#    print(i, dp[i],A+i,dp[A+i])\n\n#print(dp)\n\n\n\nif dp[K]:\n\n    ans = 'Second'\n\nelse:\n\n    ans = 'First'\n\nprint(ans)","target":"# -*- coding: utf-8 -*-\n\n\"\"\"\n\nCreated on Sat Apr 25 18:20:35 2020\n\n\"\"\"\n\n\n\nimport sys\n\nimport numpy as np\n\n\n\nsys.setrecursionlimit(10 ** 9)\n\n#def input():\n\n#    return sys.stdin.readline()[:-1]\n\nmod = 10**9+7\n\n\n\n#N = int(input())\n\nN, K = list(map(int,input().split()))\n\n#A = np.array(list(map(int,input().split())))\n\nA = list(map(int,input().split()))\n\n\n\ndp = [True for i in range(K + A[-1] + 1)]\n\nfor i in range(K):\n\n    if dp[i]:\n\n        for a in A:\n\n            dp[i + a] = False\n\n\n\n#    print(i, dp[i],A+i,dp[A+i])\n\n#print(dp)\n\n\n\nif dp[K]:\n\n    ans = 'Second'\n\nelse:\n\n    ans = 'First'\n\nprint(ans)","code_v0_loc":32,"code_v1_loc":32,"code_v0_num_chars":602,"code_v1_num_chars":595,"code_v0_no_empty_lines":"# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Apr 25 18:20:35 2020\n\"\"\"\nimport sys\nimport numpy as np\n\nsys.setrecursionlimit(10**9)\n\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\n\nmod = 10**9 + 7\n# N = int(input())\nN, K = list(map(int, input().split()))\nA = np.array(list(map(int, input().split())))\n# N, K, *A = map(int, open(0).read().split())\ndp = [True for i in range(K + A[-1] + 1)]\nfor i in range(K):\n    if dp[i]:\n        for a in A:\n            dp[i + a] = False\n#    print(i, dp[i],A+i,dp[A+i])\n# print(dp)\nif dp[K]:\n    ans = \"Second\"\nelse:\n    ans = \"First\"\nprint(ans)\n","code_v1_no_empty_lines":"# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Apr 25 18:20:35 2020\n\"\"\"\nimport sys\nimport numpy as np\n\nsys.setrecursionlimit(10**9)\n# def input():\n#    return sys.stdin.readline()[:-1]\nmod = 10**9 + 7\n# N = int(input())\nN, K = list(map(int, input().split()))\n# A = np.array(list(map(int,input().split())))\nA = list(map(int, input().split()))\ndp = [True for i in range(K + A[-1] + 1)]\nfor i in range(K):\n    if dp[i]:\n        for a in A:\n            dp[i + a] = False\n#    print(i, dp[i],A+i,dp[A+i])\n# print(dp)\nif dp[K]:\n    ans = \"Second\"\nelse:\n    ans = \"First\"\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-","-","-def input():","-    return sys.stdin.readline()[:-1]","-","-","+# def input():","+#    return sys.stdin.readline()[:-1]","-A = np.array(list(map(int, input().split())))","-# N, K, *A = map(int, open(0).read().split())","+# A = np.array(list(map(int,input().split())))","+A = list(map(int, input().split()))"],"diff_only_import_comment":false,"measured_runtime_v0":1.4205468479,"measured_runtime_v1":0.2123065576,"runtime_lift":6.691017292,"key":["s305058110","s224120927"]}
{"user_id":"u562935282","problem_id":"p02837","language":"python","submission_id_v0":"s918027483","submission_id_v1":"s762694988","cpu_time_v0":83,"cpu_time_v1":71,"memory_v0":3064,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.46,"input":"def main():\n\n    from itertools import product\n\n\n\n    N = int(eval(input()))\n\n\n\n    g = []\n\n    for _ in range(N):\n\n        a = int(eval(input()))\n\n        t = []\n\n        for _ in range(a):\n\n            x, y = list(map(int, input().split()))\n\n            x -= 1\n\n            t.append((x, y))\n\n        g.append(t)\n\n\n\n    def is_ok(prd):\n\n        for j, bl in enumerate(prd):\n\n            if bl:\n\n                for x, y in g[j]:\n\n                    if prd[x] != y:\n\n                        return False\n\n        return True\n\n\n\n    ans = 0\n\n    for prd in product([0, 1], repeat=N):\n\n        *prd, = prd  # list\u5316\n\n        if is_ok(prd):\n\n            ans = max(ans, prd.count(1))\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n\n\n\n# bit\u6f14\u7b97\u3057\u3088\u3046\u3068\u3057\u3066\u306f\u307e\u3063\u305f\n","target":"def main():\n\n    from itertools import product\n\n\n\n    N = int(eval(input()))\n\n\n\n    g = []\n\n    for _ in range(N):\n\n        a = int(eval(input()))\n\n        t = []\n\n        for _ in range(a):\n\n            x, y = list(map(int, input().split()))\n\n            t.append((x - 1, y))\n\n        g.append(t)\n\n\n\n    def is_ok(prd):\n\n        for j, bl in enumerate(prd):\n\n            if bl:\n\n                for x, y in g[j]:\n\n                    if prd[x] != y:\n\n                        return False\n\n        return True\n\n\n\n    ans = 0\n\n    for prd in product([0, 1], repeat=N):\n\n        if is_ok(prd):\n\n            ans = max(ans, prd.count(1))\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n\n\n\n# bit\u6f14\u7b97\u3057\u3088\u3046\u3068\u3057\u3066\u306f\u307e\u3063\u305f\n","code_v0_loc":35,"code_v1_loc":33,"code_v0_num_chars":743,"code_v1_num_chars":697,"code_v0_no_empty_lines":"def main():\n    from itertools import product\n\n    N = int(eval(input()))\n    g = []\n    for _ in range(N):\n        a = int(eval(input()))\n        t = []\n        for _ in range(a):\n            x, y = list(map(int, input().split()))\n            x -= 1\n            t.append((x, y))\n        g.append(t)\n\n    def is_ok(prd):\n        for j, bl in enumerate(prd):\n            if bl:\n                for x, y in g[j]:\n                    if prd[x] != y:\n                        return False\n        return True\n\n    ans = 0\n    for prd in product([0, 1], repeat=N):\n        (*prd,) = prd  # list\u5316\n        if is_ok(prd):\n            ans = max(ans, prd.count(1))\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n# bit\u6f14\u7b97\u3057\u3088\u3046\u3068\u3057\u3066\u306f\u307e\u3063\u305f\n","code_v1_no_empty_lines":"def main():\n    from itertools import product\n\n    N = int(eval(input()))\n    g = []\n    for _ in range(N):\n        a = int(eval(input()))\n        t = []\n        for _ in range(a):\n            x, y = list(map(int, input().split()))\n            t.append((x - 1, y))\n        g.append(t)\n\n    def is_ok(prd):\n        for j, bl in enumerate(prd):\n            if bl:\n                for x, y in g[j]:\n                    if prd[x] != y:\n                        return False\n        return True\n\n    ans = 0\n    for prd in product([0, 1], repeat=N):\n        if is_ok(prd):\n            ans = max(ans, prd.count(1))\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n# bit\u6f14\u7b97\u3057\u3088\u3046\u3068\u3057\u3066\u306f\u307e\u3063\u305f\n","code_same":false,"relative_loc_diff_percent":5.7142857143,"diff":["-            x -= 1","-            t.append((x, y))","+            t.append((x - 1, y))","-        (*prd,) = prd  # list\u5316"],"diff_only_import_comment":false,"measured_runtime_v0":0.1481621904,"measured_runtime_v1":0.0058356328,"runtime_lift":25.3892243111,"key":["s918027483","s762694988"]}
{"user_id":"u982896977","problem_id":"p03371","language":"python","submission_id_v0":"s299972417","submission_id_v1":"s929413776","cpu_time_v0":102,"cpu_time_v1":17,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":83.33,"input":"a,b,c,x,y = list(map(int,input().split()))\n\nans = a*x + b*y\n\nfor i in range(max(x,y) + 1):\n\n\tmoney = max(0,(x-i)*a) + max(0,(y-i)*b) + 2*i*c\n\n\tif money <= ans:\n\n\t\tans = money\n\nprint(ans)","target":"a,b,c,x,y = list(map(int,input().split()))\n\nif a + b >= 2*c:\n\n\tif x >= y:\n\n\t\tans = 2*y*c + (x-y)*min(a,2*c)\n\n\telse:\n\n\t\tans = 2*x*c + (y-x)*min(b,2*c)\n\nelse:\n\n\tans = (x*a + y*b)\n\nprint(ans)","code_v0_loc":7,"code_v1_loc":9,"code_v0_num_chars":180,"code_v1_num_chars":182,"code_v0_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nans = a * x + b * y\nfor i in range(max(x, y) + 1):\n    money = max(0, (x - i) * a) + max(0, (y - i) * b) + 2 * i * c\n    if money <= ans:\n        ans = money\nprint(ans)\n","code_v1_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nif a + b >= 2 * c:\n    if x >= y:\n        ans = 2 * y * c + (x - y) * min(a, 2 * c)\n    else:\n        ans = 2 * x * c + (y - x) * min(b, 2 * c)\nelse:\n    ans = x * a + y * b\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":22.2222222222,"diff":["-ans = a * x + b * y","-for i in range(max(x, y) + 1):","-    money = max(0, (x - i) * a) + max(0, (y - i) * b) + 2 * i * c","-    if money <= ans:","-        ans = money","+if a + b >= 2 * c:","+    if x >= y:","+        ans = 2 * y * c + (x - y) * min(a, 2 * c)","+    else:","+        ans = 2 * x * c + (y - x) * min(b, 2 * c)","+else:","+    ans = x * a + y * b"],"diff_only_import_comment":false,"measured_runtime_v0":0.3295188012,"measured_runtime_v1":0.2310098734,"runtime_lift":1.4264273486,"key":["s299972417","s929413776"]}
{"user_id":"u340781749","problem_id":"p02680","language":"python","submission_id_v0":"s341076610","submission_id_v1":"s034276815","cpu_time_v0":2314,"cpu_time_v1":1930,"memory_v0":1000052,"memory_v1":915508,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.59,"input":"import sys\n\n# from itertools import chain, accumulate\n\n\n\nn, m, *abcdef = list(map(int, sys.stdin.buffer.read().split()))\n\n\n\nver_lines = []\n\nhor_lines = []\n\nx_list = set()\n\ny_list = set()\n\nn3 = n * 3\n\nfor a, b, c in zip(abcdef[0:n3:3], abcdef[1:n3:3], abcdef[2:n3:3]):\n\n    y_list.add(a)\n\n    y_list.add(b)\n\n    x_list.add(c)\n\n    ver_lines.append((a, b, c))\n\n\n\nfor d, e, f in zip(abcdef[n3 + 0::3], abcdef[n3 + 1::3], abcdef[n3 + 2::3]):\n\n    y_list.add(d)\n\n    x_list.add(e)\n\n    x_list.add(f)\n\n    hor_lines.append((d, e, f))\n\nx_list.add(0)\n\ny_list.add(0)\n\n\n\nx_list = sorted(x_list)\n\ny_list = sorted(y_list)\n\nx_dict = {x: i for i, x in enumerate(x_list, start=1)}\n\ny_dict = {y: i for i, y in enumerate(y_list, start=1)}\n\nrow_real = len(x_list)\n\ncol_real = len(y_list)\n\nrow = row_real + 2\n\ncol = col_real + 2\n\nbanned_up_ij = [[0] * row for _ in range(col)]\n\nbanned_down_ij = [[0] * row for _ in range(col)]\n\nbanned_left_ij = [[0] * col for _ in range(row)]\n\nbanned_right_ij = [[0] * col for _ in range(row)]\n\nfor a, b, c in ver_lines:\n\n    if a > b:\n\n        a, b = b, a\n\n    ai = y_dict[a]\n\n    bi = y_dict[b]\n\n    j = x_dict[c]\n\n    banned_left_ij[j][ai] += 1\n\n    banned_left_ij[j][bi] -= 1\n\n    banned_right_ij[j - 1][ai] += 1\n\n    banned_right_ij[j - 1][bi] -= 1\n\nfor d, e, f in hor_lines:\n\n    if e > f:\n\n        e, f = f, e\n\n    i = y_dict[d]\n\n    ej = x_dict[e]\n\n    fj = x_dict[f]\n\n    banned_up_ij[i][ej] += 1\n\n    banned_up_ij[i][fj] -= 1\n\n    banned_down_ij[i - 1][ej] += 1\n\n    banned_down_ij[i - 1][fj] -= 1\n\n\n\nbanned_up = [0] * (row * col)\n\nbanned_down = [0] * (row * col)\n\nbanned_left = [0] * (row * col)\n\nbanned_right = [0] * (row * col)\n\nfor i in range(col):\n\n    ru = banned_up_ij[i]\n\n    rd = banned_down_ij[i]\n\n    ri = row * i\n\n    banned_up[ri] = ru[0]\n\n    banned_down[ri] = rd[0]\n\n    for j in range(1, row):\n\n        banned_up[ri + j] = banned_up[ri + j - 1] + ru[j]\n\n        banned_down[ri + j] = banned_down[ri + j - 1] + rd[j]\n\nfor j in range(row):\n\n    rl = banned_left_ij[j]\n\n    rr = banned_right_ij[j]\n\n    banned_left[j] = rl[0]\n\n    banned_right[j] = rr[0]\n\n    for i in range(1, col):\n\n        ri0 = (i - 1) * row\n\n        ri1 = i * row\n\n        banned_left[ri1 + j] = banned_left[ri0 + j] + rl[i]\n\n        banned_right[ri1 + j] = banned_right[ri0 + j] + rr[i]\n\n\n\n# banned_up = list(chain.from_iterable(map(accumulate, banned_up_ij)))\n\n# banned_down = list(chain.from_iterable(map(accumulate, banned_down_ij)))\n\n# banned_left = list(chain.from_iterable(zip(*map(accumulate, banned_left_ij))))\n\n# banned_right = list(chain.from_iterable(zip(*map(accumulate, banned_right_ij))))\n\n\n\n# for i in range(col):\n\n#     print(walls[i * row:(i + 1) * row])\n\n\n\ns = row * y_dict[0] + x_dict[0]\n\nenable = [-1] * row + ([-1] + [0] * (row - 2) + [-1]) * (col - 2) + [-1] * row\n\n\n\n# for i in range(col):\n\n#     print(enable[i * row:(i + 1) * row])\n\n\n\nq = [s]\n\nmoves = [(-row, banned_up), (-1, banned_left), (1, banned_right), (row, banned_down)]\n\nwhile q:\n\n    c = q.pop()\n\n    if enable[c] == 1:\n\n        continue\n\n    elif enable[c] == -1:\n\n        print('INF')\n\n        exit()\n\n    enable[c] = 1\n\n    for dc, banned in moves:\n\n        if banned[c]:\n\n            continue\n\n        nc = c + dc\n\n        if enable[nc] == 1:\n\n            continue\n\n        q.append(nc)\n\n# for i in range(col):\n\n#     print(enable[i * row:(i + 1) * row])\n\n\n\n\n\nans = 0\n\nfor i in range(col):\n\n    ri = i * row\n\n    for j in range(row):\n\n        if enable[ri + j] != 1:\n\n            continue\n\n        t = y_list[i - 1]\n\n        b = y_list[i]\n\n        l = x_list[j - 1]\n\n        r = x_list[j]\n\n        ans += (b - t) * (r - l)\n\nprint(ans)\n","target":"import sys\n\n\n\n# from itertools import chain, accumulate\n\n\n\nn, m, *abcdef = list(map(int, sys.stdin.buffer.read().split()))\n\n\n\nver_lines = []\n\nhor_lines = []\n\nx_list = set()\n\ny_list = set()\n\nn3 = n * 3\n\nfor a, b, c in zip(abcdef[0:n3:3], abcdef[1:n3:3], abcdef[2:n3:3]):\n\n    y_list.add(a)\n\n    y_list.add(b)\n\n    x_list.add(c)\n\n    ver_lines.append((a, b, c))\n\n\n\nfor d, e, f in zip(abcdef[n3 + 0::3], abcdef[n3 + 1::3], abcdef[n3 + 2::3]):\n\n    y_list.add(d)\n\n    x_list.add(e)\n\n    x_list.add(f)\n\n    hor_lines.append((d, e, f))\n\nx_list.add(0)\n\ny_list.add(0)\n\n\n\nx_list = sorted(x_list)\n\ny_list = sorted(y_list)\n\nx_dict = {x: i for i, x in enumerate(x_list, start=1)}\n\ny_dict = {y: i for i, y in enumerate(y_list, start=1)}\n\nrow_real = len(x_list)\n\ncol_real = len(y_list)\n\nrow = row_real + 2\n\ncol = col_real + 2\n\n\n\nbanned_up = [0] * (row * col)\n\nbanned_down = [0] * (row * col)\n\nbanned_left = [0] * (row * col)\n\nbanned_right = [0] * (row * col)\n\nfor a, b, c in ver_lines:\n\n    if a > b:\n\n        a, b = b, a\n\n    ai = y_dict[a] * row\n\n    bi = y_dict[b] * row\n\n    j = x_dict[c]\n\n    banned_left[ai + j] += 1\n\n    banned_left[bi + j] -= 1\n\n    banned_right[ai + j - 1] += 1\n\n    banned_right[bi + j - 1] -= 1\n\nfor d, e, f in hor_lines:\n\n    if e > f:\n\n        e, f = f, e\n\n    ri = y_dict[d] * row\n\n    ej = x_dict[e]\n\n    fj = x_dict[f]\n\n    banned_up[ri + ej] += 1\n\n    banned_up[ri + fj] -= 1\n\n    banned_down[ri - row + ej] += 1\n\n    banned_down[ri - row + fj] -= 1\n\n\n\nfor i in range(1, col):\n\n    ri0 = row * (i - 1)\n\n    ri1 = row * i\n\n    for j in range(1, row):\n\n        banned_up[ri1 + j] += banned_up[ri1 + j - 1]\n\n        banned_down[ri1 + j] += banned_down[ri1 + j - 1]\n\n        banned_left[ri1 + j] += banned_left[ri0 + j]\n\n        banned_right[ri1 + j] += banned_right[ri0 + j]\n\n\n\n# banned_up = list(chain.from_iterable(map(accumulate, banned_up_ij)))\n\n# banned_down = list(chain.from_iterable(map(accumulate, banned_down_ij)))\n\n# banned_left = list(chain.from_iterable(zip(*map(accumulate, banned_left_ij))))\n\n# banned_right = list(chain.from_iterable(zip(*map(accumulate, banned_right_ij))))\n\n\n\n# for i in range(col):\n\n#     print(walls[i * row:(i + 1) * row])\n\n\n\ns = row * y_dict[0] + x_dict[0]\n\nenable = [-1] * row + ([-1] + [0] * (row - 2) + [-1]) * (col - 2) + [-1] * row\n\n\n\n# for i in range(col):\n\n#     print(enable[i * row:(i + 1) * row])\n\n\n\nq = [s]\n\nmoves = [(-row, banned_up), (-1, banned_left), (1, banned_right), (row, banned_down)]\n\nwhile q:\n\n    c = q.pop()\n\n    if enable[c] == 1:\n\n        continue\n\n    elif enable[c] == -1:\n\n        print('INF')\n\n        exit()\n\n    enable[c] = 1\n\n    for dc, banned in moves:\n\n        if banned[c]:\n\n            continue\n\n        nc = c + dc\n\n        if enable[nc] == 1:\n\n            continue\n\n        q.append(nc)\n\n# for i in range(col):\n\n#     print(enable[i * row:(i + 1) * row])\n\n\n\n\n\nans = 0\n\nfor i in range(col):\n\n    ri = i * row\n\n    for j in range(row):\n\n        if enable[ri + j] != 1:\n\n            continue\n\n        t = y_list[i - 1]\n\n        b = y_list[i]\n\n        l = x_list[j - 1]\n\n        r = x_list[j]\n\n        ans += (b - t) * (r - l)\n\nprint(ans)\n","code_v0_loc":128,"code_v1_loc":115,"code_v0_num_chars":3630,"code_v1_num_chars":3124,"code_v0_no_empty_lines":"import sys\n\n# from itertools import chain, accumulate\nn, m, *abcdef = list(map(int, sys.stdin.buffer.read().split()))\nver_lines = []\nhor_lines = []\nx_list = set()\ny_list = set()\nn3 = n * 3\nfor a, b, c in zip(abcdef[0:n3:3], abcdef[1:n3:3], abcdef[2:n3:3]):\n    y_list.add(a)\n    y_list.add(b)\n    x_list.add(c)\n    ver_lines.append((a, b, c))\nfor d, e, f in zip(abcdef[n3 + 0 :: 3], abcdef[n3 + 1 :: 3], abcdef[n3 + 2 :: 3]):\n    y_list.add(d)\n    x_list.add(e)\n    x_list.add(f)\n    hor_lines.append((d, e, f))\nx_list.add(0)\ny_list.add(0)\nx_list = sorted(x_list)\ny_list = sorted(y_list)\nx_dict = {x: i for i, x in enumerate(x_list, start=1)}\ny_dict = {y: i for i, y in enumerate(y_list, start=1)}\nrow_real = len(x_list)\ncol_real = len(y_list)\nrow = row_real + 2\ncol = col_real + 2\nbanned_up_ij = [[0] * row for _ in range(col)]\nbanned_down_ij = [[0] * row for _ in range(col)]\nbanned_left_ij = [[0] * col for _ in range(row)]\nbanned_right_ij = [[0] * col for _ in range(row)]\nfor a, b, c in ver_lines:\n    if a > b:\n        a, b = b, a\n    ai = y_dict[a]\n    bi = y_dict[b]\n    j = x_dict[c]\n    banned_left_ij[j][ai] += 1\n    banned_left_ij[j][bi] -= 1\n    banned_right_ij[j - 1][ai] += 1\n    banned_right_ij[j - 1][bi] -= 1\nfor d, e, f in hor_lines:\n    if e > f:\n        e, f = f, e\n    i = y_dict[d]\n    ej = x_dict[e]\n    fj = x_dict[f]\n    banned_up_ij[i][ej] += 1\n    banned_up_ij[i][fj] -= 1\n    banned_down_ij[i - 1][ej] += 1\n    banned_down_ij[i - 1][fj] -= 1\nbanned_up = [0] * (row * col)\nbanned_down = [0] * (row * col)\nbanned_left = [0] * (row * col)\nbanned_right = [0] * (row * col)\nfor i in range(col):\n    ru = banned_up_ij[i]\n    rd = banned_down_ij[i]\n    ri = row * i\n    banned_up[ri] = ru[0]\n    banned_down[ri] = rd[0]\n    for j in range(1, row):\n        banned_up[ri + j] = banned_up[ri + j - 1] + ru[j]\n        banned_down[ri + j] = banned_down[ri + j - 1] + rd[j]\nfor j in range(row):\n    rl = banned_left_ij[j]\n    rr = banned_right_ij[j]\n    banned_left[j] = rl[0]\n    banned_right[j] = rr[0]\n    for i in range(1, col):\n        ri0 = (i - 1) * row\n        ri1 = i * row\n        banned_left[ri1 + j] = banned_left[ri0 + j] + rl[i]\n        banned_right[ri1 + j] = banned_right[ri0 + j] + rr[i]\n# banned_up = list(chain.from_iterable(map(accumulate, banned_up_ij)))\n# banned_down = list(chain.from_iterable(map(accumulate, banned_down_ij)))\n# banned_left = list(chain.from_iterable(zip(*map(accumulate, banned_left_ij))))\n# banned_right = list(chain.from_iterable(zip(*map(accumulate, banned_right_ij))))\n# for i in range(col):\n#     print(walls[i * row:(i + 1) * row])\ns = row * y_dict[0] + x_dict[0]\nenable = [-1] * row + ([-1] + [0] * (row - 2) + [-1]) * (col - 2) + [-1] * row\n# for i in range(col):\n#     print(enable[i * row:(i + 1) * row])\nq = [s]\nmoves = [(-row, banned_up), (-1, banned_left), (1, banned_right), (row, banned_down)]\nwhile q:\n    c = q.pop()\n    if enable[c] == 1:\n        continue\n    elif enable[c] == -1:\n        print(\"INF\")\n        exit()\n    enable[c] = 1\n    for dc, banned in moves:\n        if banned[c]:\n            continue\n        nc = c + dc\n        if enable[nc] == 1:\n            continue\n        q.append(nc)\n# for i in range(col):\n#     print(enable[i * row:(i + 1) * row])\nans = 0\nfor i in range(col):\n    ri = i * row\n    for j in range(row):\n        if enable[ri + j] != 1:\n            continue\n        t = y_list[i - 1]\n        b = y_list[i]\n        l = x_list[j - 1]\n        r = x_list[j]\n        ans += (b - t) * (r - l)\nprint(ans)\n","code_v1_no_empty_lines":"import sys\n\n# from itertools import chain, accumulate\nn, m, *abcdef = list(map(int, sys.stdin.buffer.read().split()))\nver_lines = []\nhor_lines = []\nx_list = set()\ny_list = set()\nn3 = n * 3\nfor a, b, c in zip(abcdef[0:n3:3], abcdef[1:n3:3], abcdef[2:n3:3]):\n    y_list.add(a)\n    y_list.add(b)\n    x_list.add(c)\n    ver_lines.append((a, b, c))\nfor d, e, f in zip(abcdef[n3 + 0 :: 3], abcdef[n3 + 1 :: 3], abcdef[n3 + 2 :: 3]):\n    y_list.add(d)\n    x_list.add(e)\n    x_list.add(f)\n    hor_lines.append((d, e, f))\nx_list.add(0)\ny_list.add(0)\nx_list = sorted(x_list)\ny_list = sorted(y_list)\nx_dict = {x: i for i, x in enumerate(x_list, start=1)}\ny_dict = {y: i for i, y in enumerate(y_list, start=1)}\nrow_real = len(x_list)\ncol_real = len(y_list)\nrow = row_real + 2\ncol = col_real + 2\nbanned_up = [0] * (row * col)\nbanned_down = [0] * (row * col)\nbanned_left = [0] * (row * col)\nbanned_right = [0] * (row * col)\nfor a, b, c in ver_lines:\n    if a > b:\n        a, b = b, a\n    ai = y_dict[a] * row\n    bi = y_dict[b] * row\n    j = x_dict[c]\n    banned_left[ai + j] += 1\n    banned_left[bi + j] -= 1\n    banned_right[ai + j - 1] += 1\n    banned_right[bi + j - 1] -= 1\nfor d, e, f in hor_lines:\n    if e > f:\n        e, f = f, e\n    ri = y_dict[d] * row\n    ej = x_dict[e]\n    fj = x_dict[f]\n    banned_up[ri + ej] += 1\n    banned_up[ri + fj] -= 1\n    banned_down[ri - row + ej] += 1\n    banned_down[ri - row + fj] -= 1\nfor i in range(1, col):\n    ri0 = row * (i - 1)\n    ri1 = row * i\n    for j in range(1, row):\n        banned_up[ri1 + j] += banned_up[ri1 + j - 1]\n        banned_down[ri1 + j] += banned_down[ri1 + j - 1]\n        banned_left[ri1 + j] += banned_left[ri0 + j]\n        banned_right[ri1 + j] += banned_right[ri0 + j]\n# banned_up = list(chain.from_iterable(map(accumulate, banned_up_ij)))\n# banned_down = list(chain.from_iterable(map(accumulate, banned_down_ij)))\n# banned_left = list(chain.from_iterable(zip(*map(accumulate, banned_left_ij))))\n# banned_right = list(chain.from_iterable(zip(*map(accumulate, banned_right_ij))))\n# for i in range(col):\n#     print(walls[i * row:(i + 1) * row])\ns = row * y_dict[0] + x_dict[0]\nenable = [-1] * row + ([-1] + [0] * (row - 2) + [-1]) * (col - 2) + [-1] * row\n# for i in range(col):\n#     print(enable[i * row:(i + 1) * row])\nq = [s]\nmoves = [(-row, banned_up), (-1, banned_left), (1, banned_right), (row, banned_down)]\nwhile q:\n    c = q.pop()\n    if enable[c] == 1:\n        continue\n    elif enable[c] == -1:\n        print(\"INF\")\n        exit()\n    enable[c] = 1\n    for dc, banned in moves:\n        if banned[c]:\n            continue\n        nc = c + dc\n        if enable[nc] == 1:\n            continue\n        q.append(nc)\n# for i in range(col):\n#     print(enable[i * row:(i + 1) * row])\nans = 0\nfor i in range(col):\n    ri = i * row\n    for j in range(row):\n        if enable[ri + j] != 1:\n            continue\n        t = y_list[i - 1]\n        b = y_list[i]\n        l = x_list[j - 1]\n        r = x_list[j]\n        ans += (b - t) * (r - l)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":10.15625,"diff":["-banned_up_ij = [[0] * row for _ in range(col)]","-banned_down_ij = [[0] * row for _ in range(col)]","-banned_left_ij = [[0] * col for _ in range(row)]","-banned_right_ij = [[0] * col for _ in range(row)]","-for a, b, c in ver_lines:","-    if a > b:","-        a, b = b, a","-    ai = y_dict[a]","-    bi = y_dict[b]","-    j = x_dict[c]","-    banned_left_ij[j][ai] += 1","-    banned_left_ij[j][bi] -= 1","-    banned_right_ij[j - 1][ai] += 1","-    banned_right_ij[j - 1][bi] -= 1","-for d, e, f in hor_lines:","-    if e > f:","-        e, f = f, e","-    i = y_dict[d]","-    ej = x_dict[e]","-    fj = x_dict[f]","-    banned_up_ij[i][ej] += 1","-    banned_up_ij[i][fj] -= 1","-    banned_down_ij[i - 1][ej] += 1","-    banned_down_ij[i - 1][fj] -= 1","-for i in range(col):","-    ru = banned_up_ij[i]","-    rd = banned_down_ij[i]","-    ri = row * i","-    banned_up[ri] = ru[0]","-    banned_down[ri] = rd[0]","+for a, b, c in ver_lines:","+    if a > b:","+        a, b = b, a","+    ai = y_dict[a] * row","+    bi = y_dict[b] * row","+    j = x_dict[c]","+    banned_left[ai + j] += 1","+    banned_left[bi + j] -= 1","+    banned_right[ai + j - 1] += 1","+    banned_right[bi + j - 1] -= 1","+for d, e, f in hor_lines:","+    if e > f:","+        e, f = f, e","+    ri = y_dict[d] * row","+    ej = x_dict[e]","+    fj = x_dict[f]","+    banned_up[ri + ej] += 1","+    banned_up[ri + fj] -= 1","+    banned_down[ri - row + ej] += 1","+    banned_down[ri - row + fj] -= 1","+for i in range(1, col):","+    ri0 = row * (i - 1)","+    ri1 = row * i","-        banned_up[ri + j] = banned_up[ri + j - 1] + ru[j]","-        banned_down[ri + j] = banned_down[ri + j - 1] + rd[j]","-for j in range(row):","-    rl = banned_left_ij[j]","-    rr = banned_right_ij[j]","-    banned_left[j] = rl[0]","-    banned_right[j] = rr[0]","-    for i in range(1, col):","-        ri0 = (i - 1) * row","-        ri1 = i * row","-        banned_left[ri1 + j] = banned_left[ri0 + j] + rl[i]","-        banned_right[ri1 + j] = banned_right[ri0 + j] + rr[i]","+        banned_up[ri1 + j] += banned_up[ri1 + j - 1]","+        banned_down[ri1 + j] += banned_down[ri1 + j - 1]","+        banned_left[ri1 + j] += banned_left[ri0 + j]","+        banned_right[ri1 + j] += banned_right[ri0 + j]"],"diff_only_import_comment":false,"measured_runtime_v0":0.2846495706,"measured_runtime_v1":0.092071644,"runtime_lift":3.0916095148,"key":["s341076610","s034276815"]}
{"user_id":"u476068053","problem_id":"p02555","language":"python","submission_id_v0":"s269976358","submission_id_v1":"s000228897","cpu_time_v0":91,"cpu_time_v1":66,"memory_v0":64552,"memory_v1":62952,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":27.47,"input":"def main():\n\n    s = int(eval(input()))\n\n    mod = 10**9 + 7\n\n\n\n    dp = [0] * (s+1)\n\n    dp[0] = 1\n\n    for i in range(1, s+1):\n\n        for j in range(0, (i-3)+1):\n\n            dp[i] += dp[j]\n\n            dp[i] %= mod\n\n    print((dp[-1]))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"def main():\n\n    s = int(eval(input()))\n\n    mod = 10**9 + 7\n\n\n\n    dp = [0] * (s+1)\n\n    dp[0] = 1\n\n#    for i in range(1, s+1):\n\n#        for j in range(0, (i-3)+1):\n\n#            dp[i] += dp[j]\n\n#            dp[i] %= mod\n\n    for i in range(1, s+1):\n\n        if i < 3:\n\n            dp[i] = 0\n\n        else:\n\n            dp[i] = dp[i-1] + dp[i-3]\n\n            dp[i] %= mod\n\n\n\n    print((dp[-1]))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":15,"code_v1_loc":22,"code_v0_num_chars":277,"code_v1_num_chars":434,"code_v0_no_empty_lines":"def main():\n    s = int(eval(input()))\n    mod = 10**9 + 7\n    dp = [0] * (s + 1)\n    dp[0] = 1\n    for i in range(1, s + 1):\n        for j in range(0, (i - 3) + 1):\n            dp[i] += dp[j]\n            dp[i] %= mod\n    print((dp[-1]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def main():\n    s = int(eval(input()))\n    mod = 10**9 + 7\n    dp = [0] * (s + 1)\n    dp[0] = 1\n    #    for i in range(1, s+1):\n    #        for j in range(0, (i-3)+1):\n    #            dp[i] += dp[j]\n    #            dp[i] %= mod\n    for i in range(1, s + 1):\n        if i < 3:\n            dp[i] = 0\n        else:\n            dp[i] = dp[i - 1] + dp[i - 3]\n            dp[i] %= mod\n    print((dp[-1]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":31.8181818182,"diff":["+    #    for i in range(1, s+1):","+    #        for j in range(0, (i-3)+1):","+    #            dp[i] += dp[j]","+    #            dp[i] %= mod","-        for j in range(0, (i - 3) + 1):","-            dp[i] += dp[j]","+        if i < 3:","+            dp[i] = 0","+        else:","+            dp[i] = dp[i - 1] + dp[i - 3]"],"diff_only_import_comment":false,"measured_runtime_v0":0.5094247258,"measured_runtime_v1":0.2087815866,"runtime_lift":2.4399887649,"key":["s269976358","s000228897"]}
{"user_id":"u546338822","problem_id":"p02792","language":"python","submission_id_v0":"s925566735","submission_id_v1":"s918927310","cpu_time_v0":742,"cpu_time_v1":154,"memory_v0":12884,"memory_v1":9096,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":79.25,"input":"def main():\n\n    n = int(eval(input()))\n\n    import numpy as np\n\n    ans = np.zeros((10,10))\n\n    for i in range(1,n+1):\n\n        h,t = str(i)[0],str(i)[-1]\n\n        ans[int(h)-1][int(t)-1]+=1\n\n    s = 0\n\n    for i in range(10):\n\n        for j in range(10):\n\n            s += ans[i][j]*ans[j][i]\n\n\n\n    print((int(s)))\n\nif __name__ == \"__main__\":\n\n    main()","target":"def main():\n\n    n = int(eval(input()))\n\n    dp = [[0 for i in range(10)] for i in range(10)]\n\n    for i in range(1,n+1):\n\n        h,t = int(str(i)[0]), int(str(i)[-1])\n\n        dp[h][t] += 1\n\n    ans = 0\n\n    for i in range(10):\n\n        for j in range(10):\n\n            ans += dp[i][j] * dp[j][i]\n\n    print(ans)\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":15,"code_v1_loc":14,"code_v0_num_chars":350,"code_v1_num_chars":351,"code_v0_no_empty_lines":"def main():\n    n = int(eval(input()))\n    import numpy as np\n\n    ans = np.zeros((10, 10))\n    for i in range(1, n + 1):\n        h, t = str(i)[0], str(i)[-1]\n        ans[int(h) - 1][int(t) - 1] += 1\n    s = 0\n    for i in range(10):\n        for j in range(10):\n            s += ans[i][j] * ans[j][i]\n    print((int(s)))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def main():\n    n = int(eval(input()))\n    dp = [[0 for i in range(10)] for i in range(10)]\n    for i in range(1, n + 1):\n        h, t = int(str(i)[0]), int(str(i)[-1])\n        dp[h][t] += 1\n    ans = 0\n    for i in range(10):\n        for j in range(10):\n            ans += dp[i][j] * dp[j][i]\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":6.6666666667,"diff":["-    import numpy as np","-","-    ans = np.zeros((10, 10))","+    dp = [[0 for i in range(10)] for i in range(10)]","-        h, t = str(i)[0], str(i)[-1]","-        ans[int(h) - 1][int(t) - 1] += 1","-    s = 0","+        h, t = int(str(i)[0]), int(str(i)[-1])","+        dp[h][t] += 1","+    ans = 0","-            s += ans[i][j] * ans[j][i]","-    print((int(s)))","+            ans += dp[i][j] * dp[j][i]","+    print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.6066912649,"measured_runtime_v1":0.3226509961,"runtime_lift":4.9796569178,"key":["s925566735","s918927310"]}
{"user_id":"u606045429","problem_id":"p02850","language":"python","submission_id_v0":"s091418798","submission_id_v1":"s913698899","cpu_time_v0":551,"cpu_time_v1":429,"memory_v0":55084,"memory_v1":59020,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":22.14,"input":"from collections import deque\n\n\n\nN, *AB = list(map(int, open(0).read().split()))\n\n\n\nE = [set() for _ in range(N + 1)]\n\nfor i, (a, b) in enumerate(zip(*[iter(AB)] * 2)):\n\n    E[a].add((b, i))\n\n    E[b].add((a, i))\n\n\n\nA = [0] * (N - 1)\n\nQ = deque([(0, 1)])\n\nwhile Q:\n\n    p, v = Q.popleft()\n\n    c = 0\n\n    for u, i in E[v]:\n\n        E[u].remove((v, i))\n\n        c += 1 + (c + 1 == p)\n\n        Q.append((c, u))\n\n        A[i] = c\n\n\n\nprint((max(A), *A))","target":"from collections import deque\n\n\n\nN, *AB = list(map(int, open(0).read().split()))\n\n\n\nE = [set() for _ in range(N + 1)]\n\nfor i, (a, b) in enumerate(zip(*[iter(AB)] * 2)):\n\n    E[a].add((b, i))\n\n    E[b].add((a, i))\n\n\n\nA = [0] * (N - 1)\n\nQ = deque([1])\n\nwhile Q:\n\n    p, v = divmod(Q.popleft(), N + 1)\n\n    c = 0\n\n    for u, i in E[v]:\n\n        E[u].remove((v, i))\n\n        c += 1 + (c + 1 == p)\n\n        Q.append(c * (N + 1) + u)\n\n        A[i] = c\n\n\n\nprint((max(A)))\n\nprint((\"\\n\".join(map(str, A))))","code_v0_loc":21,"code_v1_loc":22,"code_v0_num_chars":441,"code_v1_num_chars":487,"code_v0_no_empty_lines":"from collections import deque\n\nN, *AB = list(map(int, open(0).read().split()))\nE = [set() for _ in range(N + 1)]\nfor i, (a, b) in enumerate(zip(*[iter(AB)] * 2)):\n    E[a].add((b, i))\n    E[b].add((a, i))\nA = [0] * (N - 1)\nQ = deque([(0, 1)])\nwhile Q:\n    p, v = Q.popleft()\n    c = 0\n    for u, i in E[v]:\n        E[u].remove((v, i))\n        c += 1 + (c + 1 == p)\n        Q.append((c, u))\n        A[i] = c\nprint((max(A), *A))\n","code_v1_no_empty_lines":"from collections import deque\n\nN, *AB = list(map(int, open(0).read().split()))\nE = [set() for _ in range(N + 1)]\nfor i, (a, b) in enumerate(zip(*[iter(AB)] * 2)):\n    E[a].add((b, i))\n    E[b].add((a, i))\nA = [0] * (N - 1)\nQ = deque([1])\nwhile Q:\n    p, v = divmod(Q.popleft(), N + 1)\n    c = 0\n    for u, i in E[v]:\n        E[u].remove((v, i))\n        c += 1 + (c + 1 == p)\n        Q.append(c * (N + 1) + u)\n        A[i] = c\nprint((max(A)))\nprint((\"\\n\".join(map(str, A))))\n","code_same":false,"relative_loc_diff_percent":4.5454545455,"diff":["-Q = deque([(0, 1)])","+Q = deque([1])","-    p, v = Q.popleft()","+    p, v = divmod(Q.popleft(), N + 1)","-        Q.append((c, u))","+        Q.append(c * (N + 1) + u)","-print((max(A), *A))","+print((max(A)))","+print((\"\\n\".join(map(str, A))))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3621242929,"measured_runtime_v1":0.2839822152,"runtime_lift":1.2751653924,"key":["s091418798","s913698899"]}
{"user_id":"u753803401","problem_id":"p03078","language":"python","submission_id_v0":"s362357786","submission_id_v1":"s175109634","cpu_time_v0":451,"cpu_time_v1":323,"memory_v0":62572,"memory_v1":53208,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":28.38,"input":"def slove():\n\n    import sys\n\n    import heapq\n\n    import collections\n\n    input = sys.stdin.readline\n\n    x, y, z, k = list(map(int, input().rstrip('\\n').split()))\n\n    a = list(map(int, input().rstrip('\\n').split()))\n\n    a.sort(reverse=True)\n\n    b = list(map(int, input().rstrip('\\n').split()))\n\n    b.sort(reverse=True)\n\n    c = list(map(int, input().rstrip('\\n').split()))\n\n    c.sort(reverse=True)\n\n    q = [[-(a[0] + b[0] + c[0]), 0, 0, 0]]\n\n    heapq.heapify(q)\n\n    fq = collections.defaultdict(list)\n\n    fq[(-(a[0] + b[0] + c[0]), 0, 0, 0), 1] = 1\n\n    t = 0\n\n    for _ in range(k):\n\n        if len(q) != 0:\n\n            p = heapq.heappop(q)\n\n            t = p[0]\n\n            aq = p[1]\n\n            bq = p[2]\n\n            cq = p[3]\n\n            if aq + 1 < len(a):\n\n                if (-(a[aq+1] + b[bq] + c[cq]), aq+1, bq, cq) not in fq:\n\n                    heapq.heappush(q, [-(a[aq+1] + b[bq] + c[cq]), aq+1, bq, cq])\n\n                    fq[(-(a[aq+1] + b[bq] + c[cq]), aq+1, bq, cq)] = 1\n\n            if bq + 1 < len(b):\n\n                if (-(a[aq] + b[bq+1] + c[cq]), aq, bq+1, cq) not in fq:\n\n                    heapq.heappush(q, [-(a[aq] + b[bq+1] + c[cq]), aq, bq+1, cq])\n\n                    fq[(-(a[aq] + b[bq+1] + c[cq]), aq, bq+1, cq)] = 1\n\n            if cq + 1 < len(c):\n\n                if (-(a[aq] + b[bq] + c[cq+1]), aq, bq, cq+1) not in fq:\n\n                    heapq.heappush(q, [-(a[aq] + b[bq] + c[cq+1]), aq, bq, cq+1])\n\n                    fq[(-(a[aq] + b[bq] + c[cq+1]), aq, bq, cq+1)] = 1\n\n        print((-t))\n\n\n\n\n\nif __name__ == '__main__':\n\n    slove()\n","target":"import sys\n\nimport collections\n\nimport heapq\n\n\n\n\n\ndef solve():\n\n    input = sys.stdin.readline\n\n    mod = 10 ** 9 + 7\n\n    x, y, z, k = list(map(int, input().rstrip('\\n').split()))\n\n    a = list(map(int, input().rstrip('\\n').split()))\n\n    b = list(map(int, input().rstrip('\\n').split()))\n\n    c = list(map(int, input().rstrip('\\n').split()))\n\n    a.sort(reverse=True)\n\n    b.sort(reverse=True)\n\n    c.sort(reverse=True)\n\n    ql = [[-(a[0] + b[0] + c[0]), 0, 0, 0]]\n\n    heapq.heapify(ql)\n\n    fq = collections.defaultdict(int)\n\n    fq[0, 0, 0]\n\n    for i in range(k):\n\n        s, ap, bp, cp = heapq.heappop(ql)\n\n        for app, bpp, cpp in ([[ap+1, bp, cp], [ap, bp+1, cp], [ap, bp, cp+1]]):\n\n            if app < x and bpp < y and cpp < z:\n\n                if (app, bpp, cpp) not in fq:\n\n                    heapq.heappush(ql, [-(a[app] + b[bpp] + c[cpp]), app, bpp, cpp])\n\n                    fq[app, bpp, cpp]\n\n        print((-s))\n\n\n\n\n\nif __name__ == '__main__':\n\n    solve()\n","code_v0_loc":41,"code_v1_loc":31,"code_v0_num_chars":1596,"code_v1_num_chars":979,"code_v0_no_empty_lines":"def slove():\n    import sys\n    import heapq\n    import collections\n\n    input = sys.stdin.readline\n    x, y, z, k = list(map(int, input().rstrip(\"\\n\").split()))\n    a = list(map(int, input().rstrip(\"\\n\").split()))\n    a.sort(reverse=True)\n    b = list(map(int, input().rstrip(\"\\n\").split()))\n    b.sort(reverse=True)\n    c = list(map(int, input().rstrip(\"\\n\").split()))\n    c.sort(reverse=True)\n    q = [[-(a[0] + b[0] + c[0]), 0, 0, 0]]\n    heapq.heapify(q)\n    fq = collections.defaultdict(list)\n    fq[(-(a[0] + b[0] + c[0]), 0, 0, 0), 1] = 1\n    t = 0\n    for _ in range(k):\n        if len(q) != 0:\n            p = heapq.heappop(q)\n            t = p[0]\n            aq = p[1]\n            bq = p[2]\n            cq = p[3]\n            if aq + 1 < len(a):\n                if (-(a[aq + 1] + b[bq] + c[cq]), aq + 1, bq, cq) not in fq:\n                    heapq.heappush(q, [-(a[aq + 1] + b[bq] + c[cq]), aq + 1, bq, cq])\n                    fq[(-(a[aq + 1] + b[bq] + c[cq]), aq + 1, bq, cq)] = 1\n            if bq + 1 < len(b):\n                if (-(a[aq] + b[bq + 1] + c[cq]), aq, bq + 1, cq) not in fq:\n                    heapq.heappush(q, [-(a[aq] + b[bq + 1] + c[cq]), aq, bq + 1, cq])\n                    fq[(-(a[aq] + b[bq + 1] + c[cq]), aq, bq + 1, cq)] = 1\n            if cq + 1 < len(c):\n                if (-(a[aq] + b[bq] + c[cq + 1]), aq, bq, cq + 1) not in fq:\n                    heapq.heappush(q, [-(a[aq] + b[bq] + c[cq + 1]), aq, bq, cq + 1])\n                    fq[(-(a[aq] + b[bq] + c[cq + 1]), aq, bq, cq + 1)] = 1\n        print((-t))\n\n\nif __name__ == \"__main__\":\n    slove()\n","code_v1_no_empty_lines":"import sys\nimport collections\nimport heapq\n\n\ndef solve():\n    input = sys.stdin.readline\n    mod = 10**9 + 7\n    x, y, z, k = list(map(int, input().rstrip(\"\\n\").split()))\n    a = list(map(int, input().rstrip(\"\\n\").split()))\n    b = list(map(int, input().rstrip(\"\\n\").split()))\n    c = list(map(int, input().rstrip(\"\\n\").split()))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    c.sort(reverse=True)\n    ql = [[-(a[0] + b[0] + c[0]), 0, 0, 0]]\n    heapq.heapify(ql)\n    fq = collections.defaultdict(int)\n    fq[0, 0, 0]\n    for i in range(k):\n        s, ap, bp, cp = heapq.heappop(ql)\n        for app, bpp, cpp in [[ap + 1, bp, cp], [ap, bp + 1, cp], [ap, bp, cp + 1]]:\n            if app < x and bpp < y and cpp < z:\n                if (app, bpp, cpp) not in fq:\n                    heapq.heappush(ql, [-(a[app] + b[bpp] + c[cpp]), app, bpp, cpp])\n                    fq[app, bpp, cpp]\n        print((-s))\n\n\nif __name__ == \"__main__\":\n    solve()\n","code_same":false,"relative_loc_diff_percent":24.3902439024,"diff":["-def slove():","-    import sys","-    import heapq","-    import collections","+import sys","+import collections","+import heapq","+","+def solve():","+    mod = 10**9 + 7","+    b = list(map(int, input().rstrip(\"\\n\").split()))","+    c = list(map(int, input().rstrip(\"\\n\").split()))","-    b = list(map(int, input().rstrip(\"\\n\").split()))","-    c = list(map(int, input().rstrip(\"\\n\").split()))","-    q = [[-(a[0] + b[0] + c[0]), 0, 0, 0]]","-    heapq.heapify(q)","-    fq = collections.defaultdict(list)","-    fq[(-(a[0] + b[0] + c[0]), 0, 0, 0), 1] = 1","-    t = 0","-    for _ in range(k):","-        if len(q) != 0:","-            p = heapq.heappop(q)","-            t = p[0]","-            aq = p[1]","-            bq = p[2]","-            cq = p[3]","-            if aq + 1 < len(a):","-                if (-(a[aq + 1] + b[bq] + c[cq]), aq + 1, bq, cq) not in fq:","-                    heapq.heappush(q, [-(a[aq + 1] + b[bq] + c[cq]), aq + 1, bq, cq])","-                    fq[(-(a[aq + 1] + b[bq] + c[cq]), aq + 1, bq, cq)] = 1","-            if bq + 1 < len(b):","-                if (-(a[aq] + b[bq + 1] + c[cq]), aq, bq + 1, cq) not in fq:","-                    heapq.heappush(q, [-(a[aq] + b[bq + 1] + c[cq]), aq, bq + 1, cq])","-                    fq[(-(a[aq] + b[bq + 1] + c[cq]), aq, bq + 1, cq)] = 1","-            if cq + 1 < len(c):","-                if (-(a[aq] + b[bq] + c[cq + 1]), aq, bq, cq + 1) not in fq:","-                    heapq.heappush(q, [-(a[aq] + b[bq] + c[cq + 1]), aq, bq, cq + 1])","-                    fq[(-(a[aq] + b[bq] + c[cq + 1]), aq, bq, cq + 1)] = 1","-        print((-t))","+    ql = [[-(a[0] + b[0] + c[0]), 0, 0, 0]]","+    heapq.heapify(ql)","+    fq = collections.defaultdict(int)","+    fq[0, 0, 0]","+    for i in range(k):","+        s, ap, bp, cp = heapq.heappop(ql)","+        for app, bpp, cpp in [[ap + 1, bp, cp], [ap, bp + 1, cp], [ap, bp, cp + 1]]:","+            if app < x and bpp < y and cpp < z:","+                if (app, bpp, cpp) not in fq:","+                    heapq.heappush(ql, [-(a[app] + b[bpp] + c[cpp]), app, bpp, cpp])","+                    fq[app, bpp, cpp]","+        print((-s))","-    slove()","+    solve()"],"diff_only_import_comment":false,"measured_runtime_v0":0.3093440776,"measured_runtime_v1":0.1565137908,"runtime_lift":1.9764653063,"key":["s362357786","s175109634"]}
{"user_id":"u546285759","problem_id":"p00500","language":"python","submission_id_v0":"s199562246","submission_id_v1":"s512442556","cpu_time_v0":30,"cpu_time_v1":20,"memory_v0":7644,"memory_v1":7672,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":33.33,"input":"N = int(input())\n\nscore = [list(map(int, input().split())) for _ in range(N)]\n\nplayers = [0 for _ in range(N)]\n\nfor play in list(zip(*score)):\n\n    for i, p in enumerate(play):\n\n        if play.count(p) == 1:\n\n            players[i] += p\n\nprint(*players, sep='\\n')\n","target":"N = int(input())\n\nscore = [input().split() for _ in range(N)]\n\nplayers = [0]*N\n\nfor play in list(zip(*score)):\n\n    for i, p in enumerate(play):\n\n        if play.count(p) == 1:\n\n            players[i] += int(p)\n\nprint(*players, sep='\\n')\n","code_v0_loc":8,"code_v1_loc":8,"code_v0_num_chars":264,"code_v1_num_chars":237,"code_v0_no_empty_lines":"N = int(input())\nscore = [list(map(int, input().split())) for _ in range(N)]\nplayers = [0 for _ in range(N)]\nfor play in list(zip(*score)):\n    for i, p in enumerate(play):\n        if play.count(p) == 1:\n            players[i] += p\nprint(*players, sep=\"\\n\")\n","code_v1_no_empty_lines":"N = int(input())\nscore = [input().split() for _ in range(N)]\nplayers = [0] * N\nfor play in list(zip(*score)):\n    for i, p in enumerate(play):\n        if play.count(p) == 1:\n            players[i] += int(p)\nprint(*players, sep=\"\\n\")\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-score = [list(map(int, input().split())) for _ in range(N)]","-players = [0 for _ in range(N)]","+score = [input().split() for _ in range(N)]","+players = [0] * N","-            players[i] += p","+            players[i] += int(p)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3026783457,"measured_runtime_v1":0.2355215042,"runtime_lift":1.2851410182,"key":["s199562246","s512442556"]}
{"user_id":"u363074342","problem_id":"p02690","language":"python","submission_id_v0":"s803789731","submission_id_v1":"s755247007","cpu_time_v0":1398,"cpu_time_v1":133,"memory_v0":11140,"memory_v1":9176,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":90.49,"input":"x = int(eval(input()))\n\n\n\npoypoyo = 'po'\n\nfor i in range(10000):\n\n    for j in range(10000):\n\n        if i**5 - j**5 == x:\n\n            print((i,j))\n\n            quit()\n\n            break\n\n        if i**5 - (-j)**5 ==x:\n\n            print((i,-j))\n\n            quit()\n\n            break\n\n        po = 'po'\n\n        poypoyo += po\n\n\n","target":"x = int(eval(input()))\n\n\n\nfor i in range(10000):\n\n    for j in range(1000):\n\n        if i**5 - j**5 == x:\n\n            print((i,j))\n\n            quit()\n\n            break\n\n        if i**5 - (-j)**5 ==x:\n\n            print((i,-j))\n\n            quit()\n\n            break\n\n\n\n\n","code_v0_loc":16,"code_v1_loc":14,"code_v0_num_chars":320,"code_v1_num_chars":263,"code_v0_no_empty_lines":"x = int(eval(input()))\npoypoyo = \"po\"\nfor i in range(10000):\n    for j in range(10000):\n        if i**5 - j**5 == x:\n            print((i, j))\n            quit()\n            break\n        if i**5 - (-j) ** 5 == x:\n            print((i, -j))\n            quit()\n            break\n        po = \"po\"\n        poypoyo += po\n","code_v1_no_empty_lines":"x = int(eval(input()))\nfor i in range(10000):\n    for j in range(1000):\n        if i**5 - j**5 == x:\n            print((i, j))\n            quit()\n            break\n        if i**5 - (-j) ** 5 == x:\n            print((i, -j))\n            quit()\n            break\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-poypoyo = \"po\"","-    for j in range(10000):","+    for j in range(1000):","-        po = \"po\"","-        poypoyo += po"],"diff_only_import_comment":false,"measured_runtime_v0":0.3036803842,"measured_runtime_v1":0.2216325402,"runtime_lift":1.3701976426,"key":["s803789731","s755247007"]}
{"user_id":"u419963262","problem_id":"p03170","language":"python","submission_id_v0":"s690193516","submission_id_v1":"s176737022","cpu_time_v0":1807,"cpu_time_v1":395,"memory_v0":3828,"memory_v1":43416,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":78.14,"input":"n,k = list(map(int,input().split()))\n\narr = list(map(int,input().split()))\n\n\n\ndp = [False]*(k+1)\n\n\n\nfor stones in range(k+1):\n\n    for x in arr:\n\n        if stones >= x and dp[stones-x] == False:\n\n            dp[stones] = True\n\n\n\nif dp[k]:\n\n    print(\"First\")\n\nelse:\n\n    print(\"Second\")\n","target":"N,K = list(map(int,input().split()))\n\nA = list(map(int,input().split()))\n\n\n\ndp = [False]*(K+1)\n\n\n\nfor i in range(K+1):\n\n    for j in range(N):\n\n        if i-A[j]>=0 and dp[i-A[j]] == False:\n\n            dp[i] = True\n\n\n\n        \n\nif dp[K]:\n\n    print(\"First\")\n\nelse:\n\n    print(\"Second\")","code_v0_loc":14,"code_v1_loc":15,"code_v0_num_chars":282,"code_v1_num_chars":280,"code_v0_no_empty_lines":"n, k = list(map(int, input().split()))\narr = list(map(int, input().split()))\ndp = [False] * (k + 1)\nfor stones in range(k + 1):\n    for x in arr:\n        if stones >= x and dp[stones - x] == False:\n            dp[stones] = True\nif dp[k]:\n    print(\"First\")\nelse:\n    print(\"Second\")\n","code_v1_no_empty_lines":"N, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\ndp = [False] * (K + 1)\nfor i in range(K + 1):\n    for j in range(N):\n        if i - A[j] >= 0 and dp[i - A[j]] == False:\n            dp[i] = True\nif dp[K]:\n    print(\"First\")\nelse:\n    print(\"Second\")\n","code_same":false,"relative_loc_diff_percent":6.6666666667,"diff":["-n, k = list(map(int, input().split()))","-arr = list(map(int, input().split()))","-dp = [False] * (k + 1)","-for stones in range(k + 1):","-    for x in arr:","-        if stones >= x and dp[stones - x] == False:","-            dp[stones] = True","-if dp[k]:","+N, K = list(map(int, input().split()))","+A = list(map(int, input().split()))","+dp = [False] * (K + 1)","+for i in range(K + 1):","+    for j in range(N):","+        if i - A[j] >= 0 and dp[i - A[j]] == False:","+            dp[i] = True","+if dp[K]:"],"diff_only_import_comment":false,"measured_runtime_v0":0.2082244466,"measured_runtime_v1":0.0065503952,"runtime_lift":31.7880739295,"key":["s690193516","s176737022"]}
{"user_id":"u179169725","problem_id":"p02780","language":"python","submission_id_v0":"s465820766","submission_id_v1":"s149560631","cpu_time_v0":414,"cpu_time_v1":235,"memory_v0":27932,"memory_v1":25720,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":43.24,"input":"import sys\n\nread = sys.stdin.readline\n\n\n\n\n\ndef read_ints():\n\n    return list(map(int, read().split()))\n\n\n\n\n\ndef read_a_int():\n\n    return int(read())\n\n\n\n\n\ndef read_matrix(H):\n\n    '''\n\n    H is number of rows\n\n    '''\n\n    return [list(map(int, read().split())) for _ in range(H)]\n\n\n\n\n\ndef read_map(H):\n\n    '''\n\n    H is number of rows\n\n    \u6587\u5b57\u5217\u3067\u4e0e\u3048\u3089\u308c\u305f\u76e4\u9762\u3092\u8aad\u307f\u53d6\u308b\u7528\n\n    '''\n\n    return [read()[:-1] for _ in range(H)]\n\n\n\n\n\ndef read_tuple(H):\n\n    '''\n\n    H is number of rows\n\n    '''\n\n    ret = []\n\n    for _ in range(H):\n\n        ret.append(tuple(map(int, read().split())))\n\n    return ret\n\n\n\n\n\ndef read_col(H, n_cols):\n\n    '''\n\n    H is number of rows\n\n    n_cols is number of cols\n\n\n\n    A\u5217\u3001B\u5217\u304c\u4e0e\u3048\u3089\u308c\u308b\u3088\u3046\u306a\u3068\u304d\n\n    '''\n\n    ret = [[] for _ in range(n_cols)]\n\n    for _ in range(H):\n\n        tmp = list(map(int, read().split()))\n\n        for col in range(n_cols):\n\n            ret[col].append(tmp[col])\n\n\n\n    return ret\n\n\n\n\n\nN, K = read_ints()\n\nP = read_ints()\n\n\n\n\n\ndef ret_mean(X):\n\n    return (X + 1) \/ 2\n\n\n\n\n\n\n\n\n\nimport numpy as np\n\nP_mean = np.array([ret_mean(p) for p in P])\n\nP_accum = np.zeros(N+1)\n\nP_accum[1:] = P_mean.cumsum()\n\n\n\nans = 0\n\n# print(P_accum)\n\nfor i in range(N - K + 1):\n\n    j = i + K\n\n    ans = max(ans, P_accum[j] - P_accum[i])\n\nprint(ans)\n","target":"import sys\n\nread = sys.stdin.readline\n\n\n\n\n\ndef read_ints():\n\n    return list(map(int, read().split()))\n\n\n\n\n\ndef read_a_int():\n\n    return int(read())\n\n\n\n\n\ndef read_matrix(H):\n\n    '''\n\n    H is number of rows\n\n    '''\n\n    return [list(map(int, read().split())) for _ in range(H)]\n\n\n\n\n\ndef read_map(H):\n\n    '''\n\n    H is number of rows\n\n    \u6587\u5b57\u5217\u3067\u4e0e\u3048\u3089\u308c\u305f\u76e4\u9762\u3092\u8aad\u307f\u53d6\u308b\u7528\n\n    '''\n\n    return [read()[:-1] for _ in range(H)]\n\n\n\n\n\ndef read_tuple(H):\n\n    '''\n\n    H is number of rows\n\n    '''\n\n    ret = []\n\n    for _ in range(H):\n\n        ret.append(tuple(map(int, read().split())))\n\n    return ret\n\n\n\n\n\ndef read_col(H, n_cols):\n\n    '''\n\n    H is number of rows\n\n    n_cols is number of cols\n\n\n\n    A\u5217\u3001B\u5217\u304c\u4e0e\u3048\u3089\u308c\u308b\u3088\u3046\u306a\u3068\u304d\n\n    '''\n\n    ret = [[] for _ in range(n_cols)]\n\n    for _ in range(H):\n\n        tmp = list(map(int, read().split()))\n\n        for col in range(n_cols):\n\n            ret[col].append(tmp[col])\n\n\n\n    return ret\n\n\n\n\n\nN, K = read_ints()\n\nP = read_ints()\n\n\n\n\n\ndef ret_mean(X):\n\n    return (X + 1) \/ 2\n\n\n\n\n\n\n\nclass cumsum1d:\n\n    def __init__(self, ls: list):\n\n        '''\n\n        1\u6b21\u5143\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308b\n\n        '''\n\n        from itertools import accumulate\n\n        self.ls_accum = [0] + list(accumulate(ls))\n\n\n\n    def total(self, i, j):\n\n        # \u3082\u3068\u306e\u914d\u5217ls\u306b\u304a\u3051\u308b[i,j)\u306e\u4e2d\u5408\u8a08\n\n        return self.ls_accum[j] - self.ls_accum[i]\n\n      \n\nP_mean = [ret_mean(p) for p in P]\n\nP_accum = cumsum1d(P_mean)\n\n\n\nans = 0\n\n# print(P_accum)\n\nfor i in range(N - K + 1):\n\n    j = i + K\n\n    ans = max(ans, P_accum.total(i,j))\n\nprint(ans)\n","code_v0_loc":74,"code_v1_loc":83,"code_v0_num_chars":1260,"code_v1_num_chars":1510,"code_v0_no_empty_lines":"import sys\n\nread = sys.stdin.readline\n\n\ndef read_ints():\n    return list(map(int, read().split()))\n\n\ndef read_a_int():\n    return int(read())\n\n\ndef read_matrix(H):\n    \"\"\"\n    H is number of rows\n    \"\"\"\n    return [list(map(int, read().split())) for _ in range(H)]\n\n\ndef read_map(H):\n    \"\"\"\n    H is number of rows\n    \u6587\u5b57\u5217\u3067\u4e0e\u3048\u3089\u308c\u305f\u76e4\u9762\u3092\u8aad\u307f\u53d6\u308b\u7528\n    \"\"\"\n    return [read()[:-1] for _ in range(H)]\n\n\ndef read_tuple(H):\n    \"\"\"\n    H is number of rows\n    \"\"\"\n    ret = []\n    for _ in range(H):\n        ret.append(tuple(map(int, read().split())))\n    return ret\n\n\ndef read_col(H, n_cols):\n    \"\"\"\n    H is number of rows\n    n_cols is number of cols\n    A\u5217\u3001B\u5217\u304c\u4e0e\u3048\u3089\u308c\u308b\u3088\u3046\u306a\u3068\u304d\n    \"\"\"\n    ret = [[] for _ in range(n_cols)]\n    for _ in range(H):\n        tmp = list(map(int, read().split()))\n        for col in range(n_cols):\n            ret[col].append(tmp[col])\n    return ret\n\n\nN, K = read_ints()\nP = read_ints()\n\n\ndef ret_mean(X):\n    return (X + 1) \/ 2\n\n\nimport numpy as np\n\nP_mean = np.array([ret_mean(p) for p in P])\nP_accum = np.zeros(N + 1)\nP_accum[1:] = P_mean.cumsum()\nans = 0\n# print(P_accum)\nfor i in range(N - K + 1):\n    j = i + K\n    ans = max(ans, P_accum[j] - P_accum[i])\nprint(ans)\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.readline\n\n\ndef read_ints():\n    return list(map(int, read().split()))\n\n\ndef read_a_int():\n    return int(read())\n\n\ndef read_matrix(H):\n    \"\"\"\n    H is number of rows\n    \"\"\"\n    return [list(map(int, read().split())) for _ in range(H)]\n\n\ndef read_map(H):\n    \"\"\"\n    H is number of rows\n    \u6587\u5b57\u5217\u3067\u4e0e\u3048\u3089\u308c\u305f\u76e4\u9762\u3092\u8aad\u307f\u53d6\u308b\u7528\n    \"\"\"\n    return [read()[:-1] for _ in range(H)]\n\n\ndef read_tuple(H):\n    \"\"\"\n    H is number of rows\n    \"\"\"\n    ret = []\n    for _ in range(H):\n        ret.append(tuple(map(int, read().split())))\n    return ret\n\n\ndef read_col(H, n_cols):\n    \"\"\"\n    H is number of rows\n    n_cols is number of cols\n    A\u5217\u3001B\u5217\u304c\u4e0e\u3048\u3089\u308c\u308b\u3088\u3046\u306a\u3068\u304d\n    \"\"\"\n    ret = [[] for _ in range(n_cols)]\n    for _ in range(H):\n        tmp = list(map(int, read().split()))\n        for col in range(n_cols):\n            ret[col].append(tmp[col])\n    return ret\n\n\nN, K = read_ints()\nP = read_ints()\n\n\ndef ret_mean(X):\n    return (X + 1) \/ 2\n\n\nclass cumsum1d:\n    def __init__(self, ls: list):\n        \"\"\"\n        1\u6b21\u5143\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308b\n        \"\"\"\n        from itertools import accumulate\n\n        self.ls_accum = [0] + list(accumulate(ls))\n\n    def total(self, i, j):\n        # \u3082\u3068\u306e\u914d\u5217ls\u306b\u304a\u3051\u308b[i,j)\u306e\u4e2d\u5408\u8a08\n        return self.ls_accum[j] - self.ls_accum[i]\n\n\nP_mean = [ret_mean(p) for p in P]\nP_accum = cumsum1d(P_mean)\nans = 0\n# print(P_accum)\nfor i in range(N - K + 1):\n    j = i + K\n    ans = max(ans, P_accum.total(i, j))\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":10.843373494,"diff":["-import numpy as np","+class cumsum1d:","+    def __init__(self, ls: list):","+        \"\"\"","+        1\u6b21\u5143\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308b","+        \"\"\"","+        from itertools import accumulate","-P_mean = np.array([ret_mean(p) for p in P])","-P_accum = np.zeros(N + 1)","-P_accum[1:] = P_mean.cumsum()","+        self.ls_accum = [0] + list(accumulate(ls))","+","+    def total(self, i, j):","+        # \u3082\u3068\u306e\u914d\u5217ls\u306b\u304a\u3051\u308b[i,j)\u306e\u4e2d\u5408\u8a08","+        return self.ls_accum[j] - self.ls_accum[i]","+","+","+P_mean = [ret_mean(p) for p in P]","+P_accum = cumsum1d(P_mean)","-    ans = max(ans, P_accum[j] - P_accum[i])","+    ans = max(ans, P_accum.total(i, j))"],"diff_only_import_comment":false,"measured_runtime_v0":1.407651695,"measured_runtime_v1":0.2221130846,"runtime_lift":6.3375451193,"key":["s465820766","s149560631"]}
{"user_id":"u579833671","problem_id":"p02419","language":"python","submission_id_v0":"s913061371","submission_id_v1":"s394956399","cpu_time_v0":20,"cpu_time_v1":10,"memory_v0":4220,"memory_v1":4212,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":50.0,"input":"W = input().lower()\n\ns = []\n\nwhile True:\n\n    T = list(map(str, input().split()))\n\n    if(T[0] == \"END_OF_TEXT\"):\n\n        break\n\n    else:\n\n        for i in range(len(T)):\n\n            s.append(T[i].lower())\n\nans = 0\n\nfor i in range(len(s)):\n\n    if(s[i] == W):\n\n        ans += 1\n\nprint(ans)","target":"W = input().lower()\n\ns = []\n\nans = 0\n\nwhile True:\n\n    T = list(map(str, input().split()))\n\n    if(T[0] == \"END_OF_TEXT\"):\n\n        break\n\n    else:\n\n        for i in range(len(T)):\n\n            if(W == T[i].lower()):\n\n                ans += 1\n\nprint(ans)","code_v0_loc":14,"code_v1_loc":12,"code_v0_num_chars":294,"code_v1_num_chars":257,"code_v0_no_empty_lines":"W = input().lower()\ns = []\nwhile True:\n    T = list(map(str, input().split()))\n    if T[0] == \"END_OF_TEXT\":\n        break\n    else:\n        for i in range(len(T)):\n            s.append(T[i].lower())\nans = 0\nfor i in range(len(s)):\n    if s[i] == W:\n        ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"W = input().lower()\ns = []\nans = 0\nwhile True:\n    T = list(map(str, input().split()))\n    if T[0] == \"END_OF_TEXT\":\n        break\n    else:\n        for i in range(len(T)):\n            if W == T[i].lower():\n                ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["+ans = 0","-            s.append(T[i].lower())","-ans = 0","-for i in range(len(s)):","-    if s[i] == W:","-        ans += 1","+            if W == T[i].lower():","+                ans += 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.1894613738,"measured_runtime_v1":0.0060594826,"runtime_lift":31.2669227389,"key":["s913061371","s394956399"]}
{"user_id":"u860002137","problem_id":"p02702","language":"python","submission_id_v0":"s837932378","submission_id_v1":"s385994697","cpu_time_v0":458,"cpu_time_v1":162,"memory_v0":30188,"memory_v1":23528,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":64.63,"input":"import numpy as np\n\n\n\ns = input()[::-1]\n\nlength = len(s)\n\na = np.zeros(length, dtype=int)\n\nd = np.zeros(length, dtype=int)\n\nans = np.zeros(2019, dtype=int)\n\nx = 10\n\n\n\na[0] = int(s[0])\n\nd[0] = a[0]\n\nans[d[0]] += 1\n\n\n\nfor i in range(1, length):\n\n    a[i] = int(s[i]) * x % 2019\n\n    d[i] = (d[i-1] + a[i]) % 2019\n\n    ans[d[i]] += 1\n\n    x = x * 10 % 2019\n\n\n\nans_c = ans[np.nonzero(ans)]\n\n\n\nprint((int(sum([ans_c[i] * (ans_c[i]-1) for i in range(ans_c.shape[0])]) \/ 2) + ans[0]))","target":"s = input()[::-1]\n\nlength = len(s)\n\na = [0] * length\n\nd = [0] * length\n\nans = [0] * 2019\n\nx = 10\n\n\n\na[0] = int(s[0])\n\nd[0] = a[0]\n\nans[d[0]] += 1\n\n\n\nfor i in range(1, length):\n\n    a[i] = int(s[i]) * x % 2019\n\n    d[i] = (d[i-1] + a[i]) % 2019\n\n    ans[d[i]] += 1\n\n    x = x * 10 % 2019\n\n\n\nprint((int(sum([ans[i] * (ans[i]-1) for i in range(2019)]) \/ 2) + ans[0]))","code_v0_loc":22,"code_v1_loc":18,"code_v0_num_chars":475,"code_v1_num_chars":362,"code_v0_no_empty_lines":"import numpy as np\n\ns = input()[::-1]\nlength = len(s)\na = np.zeros(length, dtype=int)\nd = np.zeros(length, dtype=int)\nans = np.zeros(2019, dtype=int)\nx = 10\na[0] = int(s[0])\nd[0] = a[0]\nans[d[0]] += 1\nfor i in range(1, length):\n    a[i] = int(s[i]) * x % 2019\n    d[i] = (d[i - 1] + a[i]) % 2019\n    ans[d[i]] += 1\n    x = x * 10 % 2019\nans_c = ans[np.nonzero(ans)]\nprint(\n    (int(sum([ans_c[i] * (ans_c[i] - 1) for i in range(ans_c.shape[0])]) \/ 2) + ans[0])\n)\n","code_v1_no_empty_lines":"s = input()[::-1]\nlength = len(s)\na = [0] * length\nd = [0] * length\nans = [0] * 2019\nx = 10\na[0] = int(s[0])\nd[0] = a[0]\nans[d[0]] += 1\nfor i in range(1, length):\n    a[i] = int(s[i]) * x % 2019\n    d[i] = (d[i - 1] + a[i]) % 2019\n    ans[d[i]] += 1\n    x = x * 10 % 2019\nprint((int(sum([ans[i] * (ans[i] - 1) for i in range(2019)]) \/ 2) + ans[0]))\n","code_same":false,"relative_loc_diff_percent":18.1818181818,"diff":["-import numpy as np","-","-a = np.zeros(length, dtype=int)","-d = np.zeros(length, dtype=int)","-ans = np.zeros(2019, dtype=int)","+a = [0] * length","+d = [0] * length","+ans = [0] * 2019","-ans_c = ans[np.nonzero(ans)]","-print(","-    (int(sum([ans_c[i] * (ans_c[i] - 1) for i in range(ans_c.shape[0])]) \/ 2) + ans[0])","-)","+print((int(sum([ans[i] * (ans[i] - 1) for i in range(2019)]) \/ 2) + ans[0]))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3979822321,"measured_runtime_v1":0.206037255,"runtime_lift":6.785094432,"key":["s837932378","s385994697"]}
{"user_id":"u353797797","problem_id":"p03273","language":"python","submission_id_v0":"s255169106","submission_id_v1":"s752105173","cpu_time_v0":312,"cpu_time_v1":25,"memory_v0":21368,"memory_v1":4596,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":91.99,"input":"import numpy as np\n\nh,w=map(int,input().split())\n\nt=[list(input()) for _ in range(h)]\n\nfor i in range(h):\n\n    t[i]=[(tij==\"#\")*1 for tij in t[i]]\n\nt=np.array(t,dtype=\"i2\")\n\nrows=[]\n\ncolumns=[]\n\nfor i in range(h):\n\n    if np.sum(t[i])==0:\n\n        rows+=[i]\n\nfor j in range(w):\n\n    if np.sum(t[:,j])==0:\n\n        columns+=[j]\n\nt=np.delete(t,rows,0)\n\nt=np.delete(t,columns,1)\n\nfor i in range(h-len(rows)):\n\n    print(*[\"#\" if tij else \".\" for tij in t[i]],sep=\"\")\n","target":"h,w=map(int,input().split())\n\nt=[list(input()) for _ in range(h)]\n\nfor i in range(h):\n\n    t[i]=[(tij==\"#\")*1 for tij in t[i]]\n\nrows=[]\n\ncolumns=[]\n\nfor i,ti in enumerate(t):\n\n    if sum(ti)==0:\n\n        rows+=[i]\n\nfor j,tj in enumerate(zip(*t)):\n\n    if sum(tj)==0:\n\n        columns+=[j]\n\nnt=[]\n\nfor i,ti in enumerate(t):\n\n    if i in rows:continue\n\n    nti=[]\n\n    for j,tij in enumerate(ti):\n\n        if j in columns:continue\n\n        nti+=[\"#\" if tij else \".\"]\n\n    print(*nti,sep=\"\")\n","code_v0_loc":18,"code_v1_loc":20,"code_v0_num_chars":464,"code_v1_num_chars":489,"code_v0_no_empty_lines":"import numpy as np\n\nh, w = map(int, input().split())\nt = [list(input()) for _ in range(h)]\nfor i in range(h):\n    t[i] = [(tij == \"#\") * 1 for tij in t[i]]\nt = np.array(t, dtype=\"i2\")\nrows = []\ncolumns = []\nfor i in range(h):\n    if np.sum(t[i]) == 0:\n        rows += [i]\nfor j in range(w):\n    if np.sum(t[:, j]) == 0:\n        columns += [j]\nt = np.delete(t, rows, 0)\nt = np.delete(t, columns, 1)\nfor i in range(h - len(rows)):\n    print(*[\"#\" if tij else \".\" for tij in t[i]], sep=\"\")\n","code_v1_no_empty_lines":"h, w = map(int, input().split())\nt = [list(input()) for _ in range(h)]\nfor i in range(h):\n    t[i] = [(tij == \"#\") * 1 for tij in t[i]]\nrows = []\ncolumns = []\nfor i, ti in enumerate(t):\n    if sum(ti) == 0:\n        rows += [i]\nfor j, tj in enumerate(zip(*t)):\n    if sum(tj) == 0:\n        columns += [j]\nnt = []\nfor i, ti in enumerate(t):\n    if i in rows:\n        continue\n    nti = []\n    for j, tij in enumerate(ti):\n        if j in columns:\n            continue\n        nti += [\"#\" if tij else \".\"]\n    print(*nti, sep=\"\")\n","code_same":false,"relative_loc_diff_percent":10.0,"diff":["-import numpy as np","-","-t = np.array(t, dtype=\"i2\")","-for i in range(h):","-    if np.sum(t[i]) == 0:","+for i, ti in enumerate(t):","+    if sum(ti) == 0:","-for j in range(w):","-    if np.sum(t[:, j]) == 0:","+for j, tj in enumerate(zip(*t)):","+    if sum(tj) == 0:","-t = np.delete(t, rows, 0)","-t = np.delete(t, columns, 1)","-for i in range(h - len(rows)):","-    print(*[\"#\" if tij else \".\" for tij in t[i]], sep=\"\")","+nt = []","+for i, ti in enumerate(t):","+    if i in rows:","+        continue","+    nti = []","+    for j, tij in enumerate(ti):","+        if j in columns:","+            continue","+        nti += [\"#\" if tij else \".\"]","+    print(*nti, sep=\"\")"],"diff_only_import_comment":false,"measured_runtime_v0":1.9158326536,"measured_runtime_v1":0.3161913253,"runtime_lift":6.0590930236,"key":["s255169106","s752105173"]}
{"user_id":"u919633157","problem_id":"p03796","language":"python","submission_id_v0":"s593917202","submission_id_v1":"s901232961","cpu_time_v0":230,"cpu_time_v1":42,"memory_v0":3980,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":81.74,"input":"import math\n\nprint((math.factorial(int(eval(input())))%(10**9+7)))","target":"n=int(eval(input()))\n\nans=1\n\nfor i in range(1,n+1):\n\n    ans*=i\n\n    ans%=10**9+7\n\nprint(ans)","code_v0_loc":2,"code_v1_loc":6,"code_v0_num_chars":58,"code_v1_num_chars":87,"code_v0_no_empty_lines":"import math\n\nprint((math.factorial(int(eval(input()))) % (10**9 + 7)))\n","code_v1_no_empty_lines":"n = int(eval(input()))\nans = 1\nfor i in range(1, n + 1):\n    ans *= i\n    ans %= 10**9 + 7\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":66.6666666667,"diff":["-import math","-","-print((math.factorial(int(eval(input()))) % (10**9 + 7)))","+n = int(eval(input()))","+ans = 1","+for i in range(1, n + 1):","+    ans *= i","+    ans %= 10**9 + 7","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.9124054093,"measured_runtime_v1":0.4053284261,"runtime_lift":2.2510274398,"key":["s593917202","s901232961"]}
{"user_id":"u414980766","problem_id":"p02773","language":"python","submission_id_v0":"s498649498","submission_id_v1":"s794455280","cpu_time_v0":480,"cpu_time_v1":421,"memory_v0":47872,"memory_v1":43256,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":12.29,"input":"import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\nN = int(readline())\n\nS = read().split()\n\n\n\nS = sorted(S)\n\nls = [[] for i in range(N + 1)]\n\nmax_num = 0\n\nleft = 0\n\nright = 0\n\nwhile right < N:\n\n    while right < N and S[left] == S[right]:\n\n        right += 1\n\n    if (right  - left) >= max_num:\n\n        ls[right - left].append(S[left].decode())\n\n        max_num = right - left\n\n    left = right\n\n    \n\nprint(('\\n'.join(ls[max_num])))\n","target":"from collections import Counter\n\n\n\nimport sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\nN = int(readline())\n\nS = read().split()\n\n\n\nres = []\n\nc = Counter(S)\n\nmax_num = c.most_common(1)[0][1]\n\nfor i, j in list(c.items()):\n\n    if j == max_num:\n\n        res.append(i)\n\n        \n\nres.sort()\n\n\n\n        \n\nprint(('\\n'.join(list([x.decode() for x in res]))))\n","code_v0_loc":21,"code_v1_loc":20,"code_v0_num_chars":502,"code_v1_num_chars":421,"code_v0_no_empty_lines":"import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nN = int(readline())\nS = read().split()\nS = sorted(S)\nls = [[] for i in range(N + 1)]\nmax_num = 0\nleft = 0\nright = 0\nwhile right < N:\n    while right < N and S[left] == S[right]:\n        right += 1\n    if (right - left) >= max_num:\n        ls[right - left].append(S[left].decode())\n        max_num = right - left\n    left = right\nprint((\"\\n\".join(ls[max_num])))\n","code_v1_no_empty_lines":"from collections import Counter\nimport sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nN = int(readline())\nS = read().split()\nres = []\nc = Counter(S)\nmax_num = c.most_common(1)[0][1]\nfor i, j in list(c.items()):\n    if j == max_num:\n        res.append(i)\nres.sort()\nprint((\"\\n\".join(list([x.decode() for x in res]))))\n","code_same":false,"relative_loc_diff_percent":4.7619047619,"diff":["+from collections import Counter","-S = sorted(S)","-ls = [[] for i in range(N + 1)]","-max_num = 0","-left = 0","-right = 0","-while right < N:","-    while right < N and S[left] == S[right]:","-        right += 1","-    if (right - left) >= max_num:","-        ls[right - left].append(S[left].decode())","-        max_num = right - left","-    left = right","-print((\"\\n\".join(ls[max_num])))","+res = []","+c = Counter(S)","+max_num = c.most_common(1)[0][1]","+for i, j in list(c.items()):","+    if j == max_num:","+        res.append(i)","+res.sort()","+print((\"\\n\".join(list([x.decode() for x in res]))))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2394288239,"measured_runtime_v1":0.0062145643,"runtime_lift":38.5270488971,"key":["s498649498","s794455280"]}
{"user_id":"u077291787","problem_id":"p03164","language":"python","submission_id_v0":"s644346369","submission_id_v1":"s649660252","cpu_time_v0":472,"cpu_time_v1":351,"memory_v0":93244,"memory_v1":70732,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":25.64,"input":"# temp\n\nn,w = list(map(int,input().split()))\n\nwv = [tuple(map(int,input().split())) for i in range(n)]\n\n\n\ndp = [0] + [float(\"inf\")]*(10**5)\n\nfor i in range(n):\n\n    for j in range(10**5,wv[i][1]-1,-1):\n\n        dp[j] = min(dp[j],dp[j-wv[i][1]]+wv[i][0])\n\n\n\nres = 0\n\nfor v,e in enumerate(dp):\n\n    if e <= w:\n\n        res = v\n\nprint(res)","target":"# dpE - Knapsack 2\n\nimport sys\n\ninput = sys.stdin.readline\n\n\n\ndef main():\n\n    n, W = tuple(map(int, input().rstrip().split()))\n\n    A = tuple(tuple(map(int, input().rstrip().split())) for _ in range(n))\n\n    _, v = list(zip(*A))\n\n    lim = sum(v)\n\n    dp = [0] + [float(\"inf\")] * lim\n\n    for i in range(n):\n\n        for j in range(lim, A[i][1] - 1, -1):\n\n            dp[j] = min(dp[j], dp[j - A[i][1]] + A[i][0])\n\n    ans = max(v for v, w in enumerate(dp) if w <= W)\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()","code_v0_loc":14,"code_v1_loc":19,"code_v0_num_chars":330,"code_v1_num_chars":522,"code_v0_no_empty_lines":"# temp\nn, w = list(map(int, input().split()))\nwv = [tuple(map(int, input().split())) for i in range(n)]\ndp = [0] + [float(\"inf\")] * (10**5)\nfor i in range(n):\n    for j in range(10**5, wv[i][1] - 1, -1):\n        dp[j] = min(dp[j], dp[j - wv[i][1]] + wv[i][0])\nres = 0\nfor v, e in enumerate(dp):\n    if e <= w:\n        res = v\nprint(res)\n","code_v1_no_empty_lines":"# dpE - Knapsack 2\nimport sys\n\ninput = sys.stdin.readline\n\n\ndef main():\n    n, W = tuple(map(int, input().rstrip().split()))\n    A = tuple(tuple(map(int, input().rstrip().split())) for _ in range(n))\n    _, v = list(zip(*A))\n    lim = sum(v)\n    dp = [0] + [float(\"inf\")] * lim\n    for i in range(n):\n        for j in range(lim, A[i][1] - 1, -1):\n            dp[j] = min(dp[j], dp[j - A[i][1]] + A[i][0])\n    ans = max(v for v, w in enumerate(dp) if w <= W)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":26.3157894737,"diff":["-# temp","-n, w = list(map(int, input().split()))","-wv = [tuple(map(int, input().split())) for i in range(n)]","-dp = [0] + [float(\"inf\")] * (10**5)","-for i in range(n):","-    for j in range(10**5, wv[i][1] - 1, -1):","-        dp[j] = min(dp[j], dp[j - wv[i][1]] + wv[i][0])","-res = 0","-for v, e in enumerate(dp):","-    if e <= w:","-        res = v","-print(res)","+# dpE - Knapsack 2","+import sys","+","+input = sys.stdin.readline","+","+","+def main():","+    n, W = tuple(map(int, input().rstrip().split()))","+    A = tuple(tuple(map(int, input().rstrip().split())) for _ in range(n))","+    _, v = list(zip(*A))","+    lim = sum(v)","+    dp = [0] + [float(\"inf\")] * lim","+    for i in range(n):","+        for j in range(lim, A[i][1] - 1, -1):","+            dp[j] = min(dp[j], dp[j - A[i][1]] + A[i][0])","+    ans = max(v for v, w in enumerate(dp) if w <= W)","+    print(ans)","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":1.6859776349,"measured_runtime_v1":0.2345220137,"runtime_lift":7.1889952184,"key":["s644346369","s649660252"]}
{"user_id":"u021548497","problem_id":"p02555","language":"python","submission_id_v0":"s983449721","submission_id_v1":"s321084928","cpu_time_v0":330,"cpu_time_v1":30,"memory_v0":9192,"memory_v1":9108,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":90.91,"input":"def main():\n\n  n = int(eval(input()))\n\n  \n\n  dp = [0]*(n+1)\n\n  dp[0] = 1\n\n  mod = pow(10, 9) + 7\n\n  for i in range(n+1):\n\n    for j in range(i-2):\n\n      dp[i] += dp[j]\n\n      dp[i] %= mod\n\n  \n\n  print((dp[n]))\n\n\n\nif __name__ == \"__main__\":\n\n  main()","target":"def main():\n\n  n = int(eval(input()))\n\n  \n\n  dp = [0]*(n+1)\n\n  dp[0] = 1\n\n  mod = pow(10, 9) + 7\n\n  for i in range(3, n+1):\n\n    dp[i] = dp[i-1] + dp[i-3]\n\n    dp[i] %= mod\n\n  \n\n  print((dp[n]))\n\n\n\nif __name__ == \"__main__\":\n\n  main()","code_v0_loc":15,"code_v1_loc":14,"code_v0_num_chars":242,"code_v1_num_chars":226,"code_v0_no_empty_lines":"def main():\n    n = int(eval(input()))\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    mod = pow(10, 9) + 7\n    for i in range(n + 1):\n        for j in range(i - 2):\n            dp[i] += dp[j]\n            dp[i] %= mod\n    print((dp[n]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def main():\n    n = int(eval(input()))\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    mod = pow(10, 9) + 7\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 3]\n        dp[i] %= mod\n    print((dp[n]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":6.6666666667,"diff":["-    for i in range(n + 1):","-        for j in range(i - 2):","-            dp[i] += dp[j]","-            dp[i] %= mod","+    for i in range(3, n + 1):","+        dp[i] = dp[i - 1] + dp[i - 3]","+        dp[i] %= mod"],"diff_only_import_comment":false,"measured_runtime_v0":0.6721006331,"measured_runtime_v1":0.344866425,"runtime_lift":1.9488723295,"key":["s983449721","s321084928"]}
{"user_id":"u588341295","problem_id":"p03253","language":"python","submission_id_v0":"s242527358","submission_id_v1":"s893815197","cpu_time_v0":171,"cpu_time_v1":71,"memory_v0":19188,"memory_v1":11240,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":58.48,"input":"# -*- coding: utf-8 -*-\n\n\n\n\"\"\"\n\n\u53c2\u8003\uff1ahttp:\/\/drken1215.hatenablog.com\/entry\/2018\/09\/23\/224100\n\n\u3000\u3000\u3000http:\/\/tutuz.hateblo.jp\/entry\/2018\/09\/24\/121248\n\n\u30fb\u7d20\u56e0\u6570\u5206\u89e3\u3068\u91cd\u8907\u7d44\u307f\u5408\u308f\u305b\n\n\u30fb\u6bce\u56de\u968e\u4e57\u3084\u308b\u3068\u6b7b\u306c\u304b\u3089\u968e\u4e57\u3068\u9006\u5143\u306e\u30c6\u30fc\u30d6\u30eb\u4f5c\u308b(\u5fd8\u308c\u3066\u305f)\n\n\"\"\"\n\n\n\nfrom collections import defaultdict\n\nfrom math import sqrt\n\n\n\nMOD = 10 ** 9 + 7\n\n\n\ndef fact_prime(num):\n\n    d = defaultdict(int)\n\n    # \u7d42\u70b9\u306f\u30eb\u30fc\u30c8\u5207\u308a\u6368\u3066+1\n\n    end = int(sqrt(num)) + 1\n\n    for i in range(2, end+1):\n\n        cnt = 0\n\n        # \u7d20\u56e0\u6570\u5206\u89e3\uff1a\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5272\u308c\u308b\u3060\u3051\u5272\u3063\u3066\u7d20\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n\n        while num % i == 0:\n\n            num \/\/= i\n\n            d[i] += 1\n\n        # 1\u307e\u3067\u6765\u305f\u3089\u7d42\u4e86\n\n        if num == 1:\n\n            break\n\n    # \u6700\u5f8c\u307e\u3067\u305d\u306e\u307e\u307e\u6765\u305f\u3084\u3064\u306fnum\u304c\u7d20\u6570(\u305f\u3060\u30571^1\u306f1^0\u306a\u306e\u3067\u6570\u306b\u5165\u308c\u306a\u3044)\n\n    if num != 1:\n\n        d[num] += 1\n\n    return d\n\n\n\n# \u3068\u308a\u3042\u3048\u305av+N-1\u304c\u53ce\u307e\u308c\u3070\u3044\u3044\u306f\u305a\n\nMAX = 10 ** 5 * 2\n\n# \u4e88\u3081\u7d44\u307f\u5408\u308f\u305b\u8a08\u7b97\u306b\u5fc5\u8981\u306a\u968e\u4e57\u3068\u9006\u5143\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u3063\u3066\u304a\u304f\n\nfactorial = [1] * (MAX)\n\nfactorial[0] = factorial[1] = 1\n\nfor i in range(2, MAX):\n\n    factorial[i] = factorial[i-1] * i % MOD\n\n\n\ninverse = [1] * (MAX)\n\n# pow\u306b\u7b2c\u4e09\u5f15\u6570\u5165\u308c\u308b\u3068\u51aa\u4e57\u306emod\u4ed8\u8a08\u7b97\u3092\u9ad8\u901f\u306b\u3084\u3063\u3066\u304f\u308c\u308b\n\ninverse[MAX-1] = pow(factorial[MAX-1], MOD-2, MOD)\n\nfor i in range(MAX-2, 0, -1):\n\n    # \u6700\u5f8c\u304b\u3089\u623b\u3063\u3066\u3044\u304f\u3053\u306e\u30eb\u30fc\u30d7\u306a\u3089H+W\u56depow\u3059\u308b\u3088\u308a\u51e6\u7406\u304c\u901f\u3044\n\n    inverse[i] = inverse[i+1] * (i+1) % MOD\n\n\n\n# \u7d44\u307f\u5408\u308f\u305b\u306e\u6570\n\ndef nCr(n, r):\n\n    # 10C7 = 10C3\n\n    r = min(r, n-r)\n\n    # \u5206\u5b50\u306e\u8a08\u7b97\n\n    numerator = factorial[n]\n\n    # \u5206\u6bcd\u306e\u8a08\u7b97\n\n    denominator = inverse[r] * inverse[n-r] % MOD\n\n    return numerator * denominator % MOD\n\n\n\nN, M = list(map(int, input().split()))\n\n\n\n# d = fact_prime(M)\n\n# print(d)\n\nans = 1\n\nfor k, v in list(fact_prime(M).items()):\n\n    # \u91cd\u8907\u7d44\u307f\u5408\u308f\u305b\n\n    # v\u500b\u306ek\u3068N-1\u500b\u306e\u4ed5\u5207\u308a\u304b\u3089\u3001v\u500b\u3092\u4e26\u3079\u308b(v+N-1\u500b\u306e\u30de\u30b9\u304b\u3089v\u500b\u3092\u9078\u3073\u51fa\u3059\u7d44\u307f\u5408\u308f\u305b)\n\n    ans = (ans * nCr(v+N-1, v)) % MOD\n\nprint(ans)\n","target":"# -*- coding: utf-8 -*-\n\n\n\nimport sys\n\n\n\ndef input(): return sys.stdin.readline().strip()\n\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\n\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\n\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\n\ndef ceil(x, y=1): return int(-(-x \/\/ y))\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\n\ndef Yes(): print('Yes')\n\ndef No(): print('No')\n\ndef YES(): print('YES')\n\ndef NO(): print('NO')\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = float('inf')\n\nMOD = 10 ** 9 + 7\n\n\n\ndef factorize(num: int) -> dict:\n\n    \"\"\" \u7d20\u56e0\u6570\u5206\u89e3 \"\"\"\n\n    from math import sqrt\n\n    from collections import Counter\n\n\n\n    d = Counter()\n\n    # \u7d42\u70b9\u306f\u30eb\u30fc\u30c8\u5207\u308a\u6368\u3066+1\n\n    for i in range(2, int(sqrt(num))+1):\n\n        # \u7d20\u56e0\u6570\u5206\u89e3\uff1a\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5272\u308c\u308b\u3060\u3051\u5272\u3063\u3066\u7d20\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n\n        while num % i == 0:\n\n            num \/\/= i\n\n            d[i] += 1\n\n        # 1\u307e\u3067\u5206\u89e3\u3057\u305f\u3089\u7d42\u4e86\n\n        if num == 1:\n\n            break\n\n    # \u6700\u5f8c\u306b\u6b8b\u3063\u305fnum\u306f\u7d20\u6570(\u305f\u3060\u30571^1\u306f1^0\u306a\u306e\u3067\u6570\u306b\u5165\u308c\u306a\u3044)\n\n    if num != 1:\n\n        d[num] += 1\n\n    return d\n\n\n\nclass FactInvMOD:\n\n    \"\"\" \u968e\u4e57\u305f\u304f\u3055\u3093\u4f7f\u3046\u6642\u7528\u306e\u30c6\u30fc\u30d6\u30eb\u6e96\u5099 \"\"\"\n\n\n\n    def __init__(self, MAX, MOD):\n\n        \"\"\" MAX\uff1a\u968e\u4e57\u306b\u4f7f\u3046\u6570\u5024\u306e\u6700\u5927\u4ee5\u4e0a\u307e\u3067\u4f5c\u308b \"\"\"\n\n        \n\n        MAX += 1\n\n        self.MAX = MAX\n\n        self.MOD = MOD\n\n        # \u968e\u4e57\u30c6\u30fc\u30d6\u30eb\n\n        factorial = [1] * MAX\n\n        factorial[0] = factorial[1] = 1\n\n        for i in range(2, MAX):\n\n            factorial[i] = factorial[i-1] * i % MOD\n\n        # \u968e\u4e57\u306e\u9006\u5143\u30c6\u30fc\u30d6\u30eb\n\n        inverse = [1] * MAX\n\n        # pow\u306b\u7b2c\u4e09\u5f15\u6570\u5165\u308c\u308b\u3068\u51aa\u4e57\u306emod\u4ed8\u8a08\u7b97\u3092\u9ad8\u901f\u306b\u3084\u3063\u3066\u304f\u308c\u308b\n\n        inverse[MAX-1] = pow(factorial[MAX-1], MOD-2, MOD)\n\n        for i in range(MAX-2, 0, -1):\n\n            # \u6700\u5f8c\u304b\u3089\u623b\u3063\u3066\u3044\u304f\u3053\u306e\u30eb\u30fc\u30d7\u306a\u3089MAX\u56depow\u3059\u308b\u3088\u308a\u51e6\u7406\u304c\u901f\u3044\n\n            inverse[i] = inverse[i+1] * (i+1) % MOD\n\n        self.fact = factorial\n\n        self.inv = inverse\n\n    \n\n    def nCr(self, n, r):\n\n        \"\"\" \u7d44\u307f\u5408\u308f\u305b\u306e\u6570 (\u5fc5\u8981\u306a\u968e\u4e57\u3068\u9006\u5143\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4e8b\u524d\u306b\u4f5c\u3063\u3066\u304a\u304f) \"\"\"\n\n\n\n        if n < r: return 0\n\n        # 10C7 = 10C3\n\n        r = min(r, n-r)\n\n        # \u5206\u5b50\u306e\u8a08\u7b97\n\n        numerator = self.fact[n]\n\n        # \u5206\u6bcd\u306e\u8a08\u7b97\n\n        denominator = self.inv[r] * self.inv[n-r] % self.MOD\n\n        return numerator * denominator % self.MOD\n\n\n\n    def nPr(self, n, r):\n\n        \"\"\" \u9806\u5217 \"\"\"\n\n\n\n        if n < r: return 0\n\n        return self.fact[n] * self.inv[n-r] % self.MOD\n\n\n\n    def nHr(self, n, r):\n\n        \"\"\" \u91cd\u8907\u7d44\u307f\u5408\u308f\u305b \"\"\"\n\n\n\n        # r\u500b\u9078\u3076\u3068\u3053\u308d\u306bN-1\u500b\u306e\u4ed5\u5207\u308a\u3092\u5165\u308c\u308b\n\n        return self.nCr(r+n-1, r)\n\n\n\nN, M = MAP()\n\n\n\nd = factorize(M)\n\n\n\n# \u4f8b\u5916\u51e6\u7406\n\nif not d:\n\n    print((1))\n\n    exit()\n\n\n\nMAX = N + max(d.values())\n\nfim = FactInvMOD(MAX, MOD)\n\nans = 1\n\nfor k, v in list(d.items()):\n\n    ans *= fim.nHr(N, v)\n\n    ans %= MOD\n\nprint(ans)\n","code_v0_loc":67,"code_v1_loc":104,"code_v0_num_chars":1591,"code_v1_num_chars":2726,"code_v0_no_empty_lines":"# -*- coding: utf-8 -*-\n\"\"\"\n\u53c2\u8003\uff1ahttp:\/\/drken1215.hatenablog.com\/entry\/2018\/09\/23\/224100\n\u3000\u3000\u3000http:\/\/tutuz.hateblo.jp\/entry\/2018\/09\/24\/121248\n\u30fb\u7d20\u56e0\u6570\u5206\u89e3\u3068\u91cd\u8907\u7d44\u307f\u5408\u308f\u305b\n\u30fb\u6bce\u56de\u968e\u4e57\u3084\u308b\u3068\u6b7b\u306c\u304b\u3089\u968e\u4e57\u3068\u9006\u5143\u306e\u30c6\u30fc\u30d6\u30eb\u4f5c\u308b(\u5fd8\u308c\u3066\u305f)\n\"\"\"\nfrom collections import defaultdict\nfrom math import sqrt\n\nMOD = 10**9 + 7\n\n\ndef fact_prime(num):\n    d = defaultdict(int)\n    # \u7d42\u70b9\u306f\u30eb\u30fc\u30c8\u5207\u308a\u6368\u3066+1\n    end = int(sqrt(num)) + 1\n    for i in range(2, end + 1):\n        cnt = 0\n        # \u7d20\u56e0\u6570\u5206\u89e3\uff1a\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5272\u308c\u308b\u3060\u3051\u5272\u3063\u3066\u7d20\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n        while num % i == 0:\n            num \/\/= i\n            d[i] += 1\n        # 1\u307e\u3067\u6765\u305f\u3089\u7d42\u4e86\n        if num == 1:\n            break\n    # \u6700\u5f8c\u307e\u3067\u305d\u306e\u307e\u307e\u6765\u305f\u3084\u3064\u306fnum\u304c\u7d20\u6570(\u305f\u3060\u30571^1\u306f1^0\u306a\u306e\u3067\u6570\u306b\u5165\u308c\u306a\u3044)\n    if num != 1:\n        d[num] += 1\n    return d\n\n\n# \u3068\u308a\u3042\u3048\u305av+N-1\u304c\u53ce\u307e\u308c\u3070\u3044\u3044\u306f\u305a\nMAX = 10**5 * 2\n# \u4e88\u3081\u7d44\u307f\u5408\u308f\u305b\u8a08\u7b97\u306b\u5fc5\u8981\u306a\u968e\u4e57\u3068\u9006\u5143\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u3063\u3066\u304a\u304f\nfactorial = [1] * (MAX)\nfactorial[0] = factorial[1] = 1\nfor i in range(2, MAX):\n    factorial[i] = factorial[i - 1] * i % MOD\ninverse = [1] * (MAX)\n# pow\u306b\u7b2c\u4e09\u5f15\u6570\u5165\u308c\u308b\u3068\u51aa\u4e57\u306emod\u4ed8\u8a08\u7b97\u3092\u9ad8\u901f\u306b\u3084\u3063\u3066\u304f\u308c\u308b\ninverse[MAX - 1] = pow(factorial[MAX - 1], MOD - 2, MOD)\nfor i in range(MAX - 2, 0, -1):\n    # \u6700\u5f8c\u304b\u3089\u623b\u3063\u3066\u3044\u304f\u3053\u306e\u30eb\u30fc\u30d7\u306a\u3089H+W\u56depow\u3059\u308b\u3088\u308a\u51e6\u7406\u304c\u901f\u3044\n    inverse[i] = inverse[i + 1] * (i + 1) % MOD\n# \u7d44\u307f\u5408\u308f\u305b\u306e\u6570\ndef nCr(n, r):\n    # 10C7 = 10C3\n    r = min(r, n - r)\n    # \u5206\u5b50\u306e\u8a08\u7b97\n    numerator = factorial[n]\n    # \u5206\u6bcd\u306e\u8a08\u7b97\n    denominator = inverse[r] * inverse[n - r] % MOD\n    return numerator * denominator % MOD\n\n\nN, M = list(map(int, input().split()))\n# d = fact_prime(M)\n# print(d)\nans = 1\nfor k, v in list(fact_prime(M).items()):\n    # \u91cd\u8907\u7d44\u307f\u5408\u308f\u305b\n    # v\u500b\u306ek\u3068N-1\u500b\u306e\u4ed5\u5207\u308a\u304b\u3089\u3001v\u500b\u3092\u4e26\u3079\u308b(v+N-1\u500b\u306e\u30de\u30b9\u304b\u3089v\u500b\u3092\u9078\u3073\u51fa\u3059\u7d44\u307f\u5408\u308f\u305b)\n    ans = (ans * nCr(v + N - 1, v)) % MOD\nprint(ans)\n","code_v1_no_empty_lines":"# -*- coding: utf-8 -*-\nimport sys\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef list2d(a, b, c):\n    return [[c] * b for i in range(a)]\n\n\ndef list3d(a, b, c, d):\n    return [[[d] * c for j in range(b)] for i in range(a)]\n\n\ndef list4d(a, b, c, d, e):\n    return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\n\n\ndef ceil(x, y=1):\n    return int(-(-x \/\/ y))\n\n\ndef INT():\n    return int(eval(input()))\n\n\ndef MAP():\n    return list(map(int, input().split()))\n\n\ndef LIST(N=None):\n    return list(MAP()) if N is None else [INT() for i in range(N)]\n\n\ndef Yes():\n    print(\"Yes\")\n\n\ndef No():\n    print(\"No\")\n\n\ndef YES():\n    print(\"YES\")\n\n\ndef NO():\n    print(\"NO\")\n\n\nsys.setrecursionlimit(10**9)\nINF = float(\"inf\")\nMOD = 10**9 + 7\n\n\ndef factorize(num: int) -> dict:\n    \"\"\"\u7d20\u56e0\u6570\u5206\u89e3\"\"\"\n    from math import sqrt\n    from collections import Counter\n\n    d = Counter()\n    # \u7d42\u70b9\u306f\u30eb\u30fc\u30c8\u5207\u308a\u6368\u3066+1\n    for i in range(2, int(sqrt(num)) + 1):\n        # \u7d20\u56e0\u6570\u5206\u89e3\uff1a\u5c0f\u3055\u3044\u65b9\u304b\u3089\u5272\u308c\u308b\u3060\u3051\u5272\u3063\u3066\u7d20\u6570\u3092\u30ab\u30a6\u30f3\u30c8\n        while num % i == 0:\n            num \/\/= i\n            d[i] += 1\n        # 1\u307e\u3067\u5206\u89e3\u3057\u305f\u3089\u7d42\u4e86\n        if num == 1:\n            break\n    # \u6700\u5f8c\u306b\u6b8b\u3063\u305fnum\u306f\u7d20\u6570(\u305f\u3060\u30571^1\u306f1^0\u306a\u306e\u3067\u6570\u306b\u5165\u308c\u306a\u3044)\n    if num != 1:\n        d[num] += 1\n    return d\n\n\nclass FactInvMOD:\n    \"\"\"\u968e\u4e57\u305f\u304f\u3055\u3093\u4f7f\u3046\u6642\u7528\u306e\u30c6\u30fc\u30d6\u30eb\u6e96\u5099\"\"\"\n\n    def __init__(self, MAX, MOD):\n        \"\"\"MAX\uff1a\u968e\u4e57\u306b\u4f7f\u3046\u6570\u5024\u306e\u6700\u5927\u4ee5\u4e0a\u307e\u3067\u4f5c\u308b\"\"\"\n        MAX += 1\n        self.MAX = MAX\n        self.MOD = MOD\n        # \u968e\u4e57\u30c6\u30fc\u30d6\u30eb\n        factorial = [1] * MAX\n        factorial[0] = factorial[1] = 1\n        for i in range(2, MAX):\n            factorial[i] = factorial[i - 1] * i % MOD\n        # \u968e\u4e57\u306e\u9006\u5143\u30c6\u30fc\u30d6\u30eb\n        inverse = [1] * MAX\n        # pow\u306b\u7b2c\u4e09\u5f15\u6570\u5165\u308c\u308b\u3068\u51aa\u4e57\u306emod\u4ed8\u8a08\u7b97\u3092\u9ad8\u901f\u306b\u3084\u3063\u3066\u304f\u308c\u308b\n        inverse[MAX - 1] = pow(factorial[MAX - 1], MOD - 2, MOD)\n        for i in range(MAX - 2, 0, -1):\n            # \u6700\u5f8c\u304b\u3089\u623b\u3063\u3066\u3044\u304f\u3053\u306e\u30eb\u30fc\u30d7\u306a\u3089MAX\u56depow\u3059\u308b\u3088\u308a\u51e6\u7406\u304c\u901f\u3044\n            inverse[i] = inverse[i + 1] * (i + 1) % MOD\n        self.fact = factorial\n        self.inv = inverse\n\n    def nCr(self, n, r):\n        \"\"\"\u7d44\u307f\u5408\u308f\u305b\u306e\u6570 (\u5fc5\u8981\u306a\u968e\u4e57\u3068\u9006\u5143\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4e8b\u524d\u306b\u4f5c\u3063\u3066\u304a\u304f)\"\"\"\n        if n < r:\n            return 0\n        # 10C7 = 10C3\n        r = min(r, n - r)\n        # \u5206\u5b50\u306e\u8a08\u7b97\n        numerator = self.fact[n]\n        # \u5206\u6bcd\u306e\u8a08\u7b97\n        denominator = self.inv[r] * self.inv[n - r] % self.MOD\n        return numerator * denominator % self.MOD\n\n    def nPr(self, n, r):\n        \"\"\"\u9806\u5217\"\"\"\n        if n < r:\n            return 0\n        return self.fact[n] * self.inv[n - r] % self.MOD\n\n    def nHr(self, n, r):\n        \"\"\"\u91cd\u8907\u7d44\u307f\u5408\u308f\u305b\"\"\"\n        # r\u500b\u9078\u3076\u3068\u3053\u308d\u306bN-1\u500b\u306e\u4ed5\u5207\u308a\u3092\u5165\u308c\u308b\n        return self.nCr(r + n - 1, r)\n\n\nN, M = MAP()\nd = factorize(M)\n# \u4f8b\u5916\u51e6\u7406\nif not d:\n    print((1))\n    exit()\nMAX = N + max(d.values())\nfim = FactInvMOD(MAX, MOD)\nans = 1\nfor k, v in list(d.items()):\n    ans *= fim.nHr(N, v)\n    ans %= MOD\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":35.5769230769,"diff":["-\"\"\"","-\u53c2\u8003\uff1ahttp:\/\/drken1215.hatenablog.com\/entry\/2018\/09\/23\/224100","-\u3000\u3000\u3000http:\/\/tutuz.hateblo.jp\/entry\/2018\/09\/24\/121248","-\u30fb\u7d20\u56e0\u6570\u5206\u89e3\u3068\u91cd\u8907\u7d44\u307f\u5408\u308f\u305b","-\u30fb\u6bce\u56de\u968e\u4e57\u3084\u308b\u3068\u6b7b\u306c\u304b\u3089\u968e\u4e57\u3068\u9006\u5143\u306e\u30c6\u30fc\u30d6\u30eb\u4f5c\u308b(\u5fd8\u308c\u3066\u305f)","-\"\"\"","-from collections import defaultdict","-from math import sqrt","+import sys","+","+def input():","+    return sys.stdin.readline().strip()","+","+","+def list2d(a, b, c):","+    return [[c] * b for i in range(a)]","+","+","+def list3d(a, b, c, d):","+    return [[[d] * c for j in range(b)] for i in range(a)]","+","+","+def list4d(a, b, c, d, e):","+    return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]","+","+","+def ceil(x, y=1):","+    return int(-(-x \/\/ y))","+","+","+def INT():","+    return int(eval(input()))","+","+","+def MAP():","+    return list(map(int, input().split()))","+","+","+def LIST(N=None):","+    return list(MAP()) if N is None else [INT() for i in range(N)]","+","+","+def Yes():","+    print(\"Yes\")","+","+","+def No():","+    print(\"No\")","+","+","+def YES():","+    print(\"YES\")","+","+","+def NO():","+    print(\"NO\")","+","+","+sys.setrecursionlimit(10**9)","+INF = float(\"inf\")","-def fact_prime(num):","-    d = defaultdict(int)","+def factorize(num: int) -> dict:","+    \"\"\"\u7d20\u56e0\u6570\u5206\u89e3\"\"\"","+    from math import sqrt","+    from collections import Counter","+","+    d = Counter()","-    end = int(sqrt(num)) + 1","-    for i in range(2, end + 1):","-        cnt = 0","+    for i in range(2, int(sqrt(num)) + 1):","-        # 1\u307e\u3067\u6765\u305f\u3089\u7d42\u4e86","+        # 1\u307e\u3067\u5206\u89e3\u3057\u305f\u3089\u7d42\u4e86","-    # \u6700\u5f8c\u307e\u3067\u305d\u306e\u307e\u307e\u6765\u305f\u3084\u3064\u306fnum\u304c\u7d20\u6570(\u305f\u3060\u30571^1\u306f1^0\u306a\u306e\u3067\u6570\u306b\u5165\u308c\u306a\u3044)","+    # \u6700\u5f8c\u306b\u6b8b\u3063\u305fnum\u306f\u7d20\u6570(\u305f\u3060\u30571^1\u306f1^0\u306a\u306e\u3067\u6570\u306b\u5165\u308c\u306a\u3044)","-# \u3068\u308a\u3042\u3048\u305av+N-1\u304c\u53ce\u307e\u308c\u3070\u3044\u3044\u306f\u305a","-MAX = 10**5 * 2","-# \u4e88\u3081\u7d44\u307f\u5408\u308f\u305b\u8a08\u7b97\u306b\u5fc5\u8981\u306a\u968e\u4e57\u3068\u9006\u5143\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u3063\u3066\u304a\u304f","-factorial = [1] * (MAX)","-factorial[0] = factorial[1] = 1","-for i in range(2, MAX):","-    factorial[i] = factorial[i - 1] * i % MOD","-inverse = [1] * (MAX)","-# pow\u306b\u7b2c\u4e09\u5f15\u6570\u5165\u308c\u308b\u3068\u51aa\u4e57\u306emod\u4ed8\u8a08\u7b97\u3092\u9ad8\u901f\u306b\u3084\u3063\u3066\u304f\u308c\u308b","-inverse[MAX - 1] = pow(factorial[MAX - 1], MOD - 2, MOD)","-for i in range(MAX - 2, 0, -1):","-    # \u6700\u5f8c\u304b\u3089\u623b\u3063\u3066\u3044\u304f\u3053\u306e\u30eb\u30fc\u30d7\u306a\u3089H+W\u56depow\u3059\u308b\u3088\u308a\u51e6\u7406\u304c\u901f\u3044","-    inverse[i] = inverse[i + 1] * (i + 1) % MOD","-# \u7d44\u307f\u5408\u308f\u305b\u306e\u6570","-def nCr(n, r):","-    # 10C7 = 10C3","-    r = min(r, n - r)","-    # \u5206\u5b50\u306e\u8a08\u7b97","-    numerator = factorial[n]","-    # \u5206\u6bcd\u306e\u8a08\u7b97","-    denominator = inverse[r] * inverse[n - r] % MOD","-    return numerator * denominator % MOD","+class FactInvMOD:","+    \"\"\"\u968e\u4e57\u305f\u304f\u3055\u3093\u4f7f\u3046\u6642\u7528\u306e\u30c6\u30fc\u30d6\u30eb\u6e96\u5099\"\"\"","+","+    def __init__(self, MAX, MOD):","+        \"\"\"MAX\uff1a\u968e\u4e57\u306b\u4f7f\u3046\u6570\u5024\u306e\u6700\u5927\u4ee5\u4e0a\u307e\u3067\u4f5c\u308b\"\"\"","+        MAX += 1","+        self.MAX = MAX","+        self.MOD = MOD","+        # \u968e\u4e57\u30c6\u30fc\u30d6\u30eb","+        factorial = [1] * MAX","+        factorial[0] = factorial[1] = 1","+        for i in range(2, MAX):","+            factorial[i] = factorial[i - 1] * i % MOD","+        # \u968e\u4e57\u306e\u9006\u5143\u30c6\u30fc\u30d6\u30eb","+        inverse = [1] * MAX","+        # pow\u306b\u7b2c\u4e09\u5f15\u6570\u5165\u308c\u308b\u3068\u51aa\u4e57\u306emod\u4ed8\u8a08\u7b97\u3092\u9ad8\u901f\u306b\u3084\u3063\u3066\u304f\u308c\u308b","+        inverse[MAX - 1] = pow(factorial[MAX - 1], MOD - 2, MOD)","+        for i in range(MAX - 2, 0, -1):","+            # \u6700\u5f8c\u304b\u3089\u623b\u3063\u3066\u3044\u304f\u3053\u306e\u30eb\u30fc\u30d7\u306a\u3089MAX\u56depow\u3059\u308b\u3088\u308a\u51e6\u7406\u304c\u901f\u3044","+            inverse[i] = inverse[i + 1] * (i + 1) % MOD","+        self.fact = factorial","+        self.inv = inverse","+","+    def nCr(self, n, r):","+        \"\"\"\u7d44\u307f\u5408\u308f\u305b\u306e\u6570 (\u5fc5\u8981\u306a\u968e\u4e57\u3068\u9006\u5143\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4e8b\u524d\u306b\u4f5c\u3063\u3066\u304a\u304f)\"\"\"","+        if n < r:","+            return 0","+        # 10C7 = 10C3","+        r = min(r, n - r)","+        # \u5206\u5b50\u306e\u8a08\u7b97","+        numerator = self.fact[n]","+        # \u5206\u6bcd\u306e\u8a08\u7b97","+        denominator = self.inv[r] * self.inv[n - r] % self.MOD","+        return numerator * denominator % self.MOD","+","+    def nPr(self, n, r):","+        \"\"\"\u9806\u5217\"\"\"","+        if n < r:","+            return 0","+        return self.fact[n] * self.inv[n - r] % self.MOD","+","+    def nHr(self, n, r):","+        \"\"\"\u91cd\u8907\u7d44\u307f\u5408\u308f\u305b\"\"\"","+        # r\u500b\u9078\u3076\u3068\u3053\u308d\u306bN-1\u500b\u306e\u4ed5\u5207\u308a\u3092\u5165\u308c\u308b","+        return self.nCr(r + n - 1, r)","-N, M = list(map(int, input().split()))","-# d = fact_prime(M)","-# print(d)","+N, M = MAP()","+d = factorize(M)","+# \u4f8b\u5916\u51e6\u7406","+if not d:","+    print((1))","+    exit()","+MAX = N + max(d.values())","+fim = FactInvMOD(MAX, MOD)","-for k, v in list(fact_prime(M).items()):","-    # \u91cd\u8907\u7d44\u307f\u5408\u308f\u305b","-    # v\u500b\u306ek\u3068N-1\u500b\u306e\u4ed5\u5207\u308a\u304b\u3089\u3001v\u500b\u3092\u4e26\u3079\u308b(v+N-1\u500b\u306e\u30de\u30b9\u304b\u3089v\u500b\u3092\u9078\u3073\u51fa\u3059\u7d44\u307f\u5408\u308f\u305b)","-    ans = (ans * nCr(v + N - 1, v)) % MOD","+for k, v in list(d.items()):","+    ans *= fim.nHr(N, v)","+    ans %= MOD"],"diff_only_import_comment":false,"measured_runtime_v0":1.4126218548,"measured_runtime_v1":0.2794496491,"runtime_lift":5.0550138793,"key":["s242527358","s893815197"]}
{"user_id":"u254871849","problem_id":"p03436","language":"python","submission_id_v0":"s717556991","submission_id_v1":"s757336484","cpu_time_v0":300,"cpu_time_v1":25,"memory_v0":20384,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":91.67,"input":"import sys\n\nimport numpy as np\n\nfrom heapq import heappop, heappush\n\n\n\n# Dijikstra\n\ndef main():\n\n    H, W = list(map(int, sys.stdin.readline().split()))\n\n\n\n    grid = np.array([list(sys.stdin.readline().rstrip()) for _ in range(H)])\n\n    grid = np.pad(grid, 1, 'constant')\n\n    # atcoder\u3067\u306fnp.pad() \u306earg\u306bconstant_values\u3092\u6307\u5b9a\u3067\u304d\u306a\u3044\n\n    q = []\n\n    heappush(q, (0, 1, 1))\n\n    visited = set()\n\n    cost = np.full((H + 1, W + 1), np.inf)\n\n    cost[1][1] = 0\n\n    while q:\n\n        c, i, j = heappop(q)\n\n        if (i, j) in visited:\n\n            continue\n\n        visited.add((i, j))\n\n        cost[i][j] = c\n\n        if i == H and j == W:\n\n            break\n\n        for dy, dx in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n\n            y = i + dy\n\n            x = j + dx\n\n            if grid[y][x] == '.' and not (y, x) in visited:\n\n                heappush(q, (c + 1, y, x))\n\n    \n\n\n\n    if cost[H][W] != np.inf:\n\n        ans = int(np.sum(grid == '.') - (cost[H][W] + 1))\n\n    else:\n\n        ans = -1\n\n\n\n    print(ans)  \n\n\n\nif __name__ == \"__main__\":\n\n    main()","target":"import sys\n\nfrom heapq import heappop, heappush\n\n\n\nH, W = list(map(int, sys.stdin.readline().split()))\n\ngrid = ['#' * (W + 2)]\n\ngrid += ['#' + sys.stdin.readline().rstrip() + '#' for _ in range(H)]\n\ngrid += ['#' * (W + 2)]\n\n\n\ndef heuristic_cost(y, x):\n\n    return abs(H - y) + abs(W - x)\n\n\n\ndef main():\n\n    h = heuristic_cost(1, 1)\n\n    c = 0\n\n    s = h + c\n\n    hq = [(s, c, 1, 1)]\n\n    nex = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n\n    cost = [[None] * (W+1) for _ in range(H+1)]\n\n    while hq:\n\n        s, c, y, x = heappop(hq)\n\n        if not cost[y][x] is None:\n\n            continue\n\n        cost[y][x] = c\n\n        for dy, dx in nex:\n\n            i = y + dy\n\n            j = x + dx\n\n            if grid[i][j] == '.' and cost[i][j] is None:\n\n                h = heuristic_cost(i, j)\n\n                s = h + (c + 1)\n\n                heappush(hq, (s, c+1, i, j))\n\n\n\n    white_cnt = 0\n\n    for i in range(1, H+1):\n\n        for j in range(1, W+1):\n\n            white_cnt += (grid[i][j] == '.') & 1\n\n    \n\n    ans = white_cnt - (cost[H][W] + 1) if not cost[H][W] is None else -1\n\n    return ans \n\n\n\nif __name__ == '__main__':\n\n    ans = main()\n\n    print(ans)","code_v0_loc":40,"code_v1_loc":42,"code_v0_num_chars":1044,"code_v1_num_chars":1152,"code_v0_no_empty_lines":"import sys\nimport numpy as np\nfrom heapq import heappop, heappush\n\n# Dijikstra\ndef main():\n    H, W = list(map(int, sys.stdin.readline().split()))\n    grid = np.array([list(sys.stdin.readline().rstrip()) for _ in range(H)])\n    grid = np.pad(grid, 1, \"constant\")\n    # atcoder\u3067\u306fnp.pad() \u306earg\u306bconstant_values\u3092\u6307\u5b9a\u3067\u304d\u306a\u3044\n    q = []\n    heappush(q, (0, 1, 1))\n    visited = set()\n    cost = np.full((H + 1, W + 1), np.inf)\n    cost[1][1] = 0\n    while q:\n        c, i, j = heappop(q)\n        if (i, j) in visited:\n            continue\n        visited.add((i, j))\n        cost[i][j] = c\n        if i == H and j == W:\n            break\n        for dy, dx in [(1, 0), (0, 1), (-1, 0), (0, -1)]:\n            y = i + dy\n            x = j + dx\n            if grid[y][x] == \".\" and not (y, x) in visited:\n                heappush(q, (c + 1, y, x))\n    if cost[H][W] != np.inf:\n        ans = int(np.sum(grid == \".\") - (cost[H][W] + 1))\n    else:\n        ans = -1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\nfrom heapq import heappop, heappush\n\nH, W = list(map(int, sys.stdin.readline().split()))\ngrid = [\"#\" * (W + 2)]\ngrid += [\"#\" + sys.stdin.readline().rstrip() + \"#\" for _ in range(H)]\ngrid += [\"#\" * (W + 2)]\n\n\ndef heuristic_cost(y, x):\n    return abs(H - y) + abs(W - x)\n\n\ndef main():\n    h = heuristic_cost(1, 1)\n    c = 0\n    s = h + c\n    hq = [(s, c, 1, 1)]\n    nex = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n    cost = [[None] * (W + 1) for _ in range(H + 1)]\n    while hq:\n        s, c, y, x = heappop(hq)\n        if not cost[y][x] is None:\n            continue\n        cost[y][x] = c\n        for dy, dx in nex:\n            i = y + dy\n            j = x + dx\n            if grid[i][j] == \".\" and cost[i][j] is None:\n                h = heuristic_cost(i, j)\n                s = h + (c + 1)\n                heappush(hq, (s, c + 1, i, j))\n    white_cnt = 0\n    for i in range(1, H + 1):\n        for j in range(1, W + 1):\n            white_cnt += (grid[i][j] == \".\") & 1\n    ans = white_cnt - (cost[H][W] + 1) if not cost[H][W] is None else -1\n    return ans\n\n\nif __name__ == \"__main__\":\n    ans = main()\n    print(ans)\n","code_same":false,"relative_loc_diff_percent":4.7619047619,"diff":["-import numpy as np","-# Dijikstra","+H, W = list(map(int, sys.stdin.readline().split()))","+grid = [\"#\" * (W + 2)]","+grid += [\"#\" + sys.stdin.readline().rstrip() + \"#\" for _ in range(H)]","+grid += [\"#\" * (W + 2)]","+","+","+def heuristic_cost(y, x):","+    return abs(H - y) + abs(W - x)","+","+","-    H, W = list(map(int, sys.stdin.readline().split()))","-    grid = np.array([list(sys.stdin.readline().rstrip()) for _ in range(H)])","-    grid = np.pad(grid, 1, \"constant\")","-    # atcoder\u3067\u306fnp.pad() \u306earg\u306bconstant_values\u3092\u6307\u5b9a\u3067\u304d\u306a\u3044","-    q = []","-    heappush(q, (0, 1, 1))","-    visited = set()","-    cost = np.full((H + 1, W + 1), np.inf)","-    cost[1][1] = 0","-    while q:","-        c, i, j = heappop(q)","-        if (i, j) in visited:","+    h = heuristic_cost(1, 1)","+    c = 0","+    s = h + c","+    hq = [(s, c, 1, 1)]","+    nex = [(1, 0), (0, 1), (-1, 0), (0, -1)]","+    cost = [[None] * (W + 1) for _ in range(H + 1)]","+    while hq:","+        s, c, y, x = heappop(hq)","+        if not cost[y][x] is None:","-        visited.add((i, j))","-        cost[i][j] = c","-        if i == H and j == W:","-            break","-        for dy, dx in [(1, 0), (0, 1), (-1, 0), (0, -1)]:","-            y = i + dy","-            x = j + dx","-            if grid[y][x] == \".\" and not (y, x) in visited:","-                heappush(q, (c + 1, y, x))","-    if cost[H][W] != np.inf:","-        ans = int(np.sum(grid == \".\") - (cost[H][W] + 1))","-    else:","-        ans = -1","-    print(ans)","+        cost[y][x] = c","+        for dy, dx in nex:","+            i = y + dy","+            j = x + dx","+            if grid[i][j] == \".\" and cost[i][j] is None:","+                h = heuristic_cost(i, j)","+                s = h + (c + 1)","+                heappush(hq, (s, c + 1, i, j))","+    white_cnt = 0","+    for i in range(1, H + 1):","+        for j in range(1, W + 1):","+            white_cnt += (grid[i][j] == \".\") & 1","+    ans = white_cnt - (cost[H][W] + 1) if not cost[H][W] is None else -1","+    return ans","-    main()","+    ans = main()","+    print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.9877221048,"measured_runtime_v1":0.2343174028,"runtime_lift":4.2153168855,"key":["s717556991","s757336484"]}
{"user_id":"u062560908","problem_id":"p02690","language":"python","submission_id_v0":"s405829600","submission_id_v1":"s667622299","cpu_time_v0":288,"cpu_time_v1":54,"memory_v0":135980,"memory_v1":66236,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":81.25,"input":"def sol(n):\n\n    d = {}\n\n    N = 100000\n\n    for i in range(-N, N+1):\n\n        d[i**5]=i\n\n    for i in d:\n\n        j = n+i\n\n        if j in d:\n\n            print(d[j], d[i])\n\n            return\n\n\n\ndef main():\n\n    n = eval(input())\n\n    sol(n)\n\nif __name__ == '__main__':\n\n    main()","target":"def sol(n):\n\n    d = {}\n\n    N = 1000\n\n    for i in range(-N, N+1):\n\n        d[i**5]=i\n\n    for i in d:\n\n        j = n+i\n\n        if j in d:\n\n            print(d[j], d[i])\n\n            return\n\n\n\ndef main():\n\n    n = eval(input())\n\n    sol(n)\n\nif __name__ == '__main__':\n\n    main()","code_v0_loc":16,"code_v1_loc":16,"code_v0_num_chars":277,"code_v1_num_chars":275,"code_v0_no_empty_lines":"def sol(n):\n    d = {}\n    N = 100000\n    for i in range(-N, N + 1):\n        d[i**5] = i\n    for i in d:\n        j = n + i\n        if j in d:\n            print(d[j], d[i])\n            return\n\n\ndef main():\n    n = eval(input())\n    sol(n)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def sol(n):\n    d = {}\n    N = 1000\n    for i in range(-N, N + 1):\n        d[i**5] = i\n    for i in d:\n        j = n + i\n        if j in d:\n            print(d[j], d[i])\n            return\n\n\ndef main():\n    n = eval(input())\n    sol(n)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    N = 100000","+    N = 1000"],"diff_only_import_comment":false,"measured_runtime_v0":1.1436646879,"measured_runtime_v1":0.1839788636,"runtime_lift":6.2162830322,"key":["s405829600","s667622299"]}
{"user_id":"u881590806","problem_id":"p02264","language":"python","submission_id_v0":"s309974156","submission_id_v1":"s779537604","cpu_time_v0":780,"cpu_time_v1":600,"memory_v0":14072,"memory_v1":28548,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":23.08,"input":"class Queue:\n\n    def __init__(self,values):\n\n        self.values = values\n\n\n\n    def empty(self):\n\n        if len(self.values) == 0:\n\n            return True\n\n        else:\n\n            return False\n\n\n\n    def enqueue(self,v):\n\n        self.values.append(v)\n\n\n\n    def dequeue(self):\n\n        if len(self.values) <= 0:\n\n            raise\n\n        else:\n\n            v = self.values[0]\n\n            del self.values[0]\n\n            return v\n\n\n\nn,q = list(map(int,input().split(' ')))\n\nprocesses = []\n\nfor i in range(n):\n\n    n,t = input().split(' ')\n\n    processes.append((n,int(t)))\n\n\n\nqueue = Queue(processes)\n\n\n\nclock = 0\n\ndone = []\n\nwhile not queue.empty():\n\n    p = queue.dequeue()\n\n    n = p[0]\n\n    t = p[1]\n\n    if t <= q:\n\n        clock+=t\n\n        done.append((n,clock))\n\n    else:\n\n        queue.enqueue((n,t-q))\n\n        clock+=q\n\n\n\nfor p in done:\n\n    print(p[0],p[1])","target":"class Queue:\n\n    def __init__(self,l):\n\n        self.values = []\n\n        self.l = l\n\n        for _ in range(l):\n\n            self.values.append(None)\n\n        self.head = 0\n\n        self.tail = 0\n\n    def inc(self,n):\n\n        if n+1 >= self.l:\n\n            return 0\n\n        else:\n\n            return n+1\n\n    def enqueue(self,v):\n\n        if self.inc(self.head) == self.tail:\n\n            print('overflow')\n\n            exit()\n\n        self.values[self.head] = v\n\n        self.head = self.inc(self.head)\n\n    def dequeue(self):\n\n        if self.head == self.tail:\n\n            print('underflow')\n\n            exit()\n\n        v = self.values[self.tail]\n\n        self.tail = self.inc(self.tail)\n\n        return v\n\n    def size(self):\n\n        if self.head >= self.tail:\n\n            return self.head-self.tail\n\n        else:\n\n            self.head + (self.l-self.tail)\n\n\n\nn,q = list(map(int,input().split(' ')))\n\nqueue = Queue(200000)\n\nfor _ in range(n):\n\n    n,t = input().split(' ')\n\n    t = int(t)\n\n    queue.enqueue((n,t))\n\n\n\nc = 0\n\nwhile queue.size()>0:\n\n    n,t = queue.dequeue()\n\n    if t <= q:\n\n        c += t\n\n        print(n,c)\n\n    else:\n\n        queue.enqueue((n,t-q))\n\n        c += q","code_v0_loc":44,"code_v1_loc":48,"code_v0_num_chars":881,"code_v1_num_chars":1197,"code_v0_no_empty_lines":"class Queue:\n    def __init__(self, values):\n        self.values = values\n\n    def empty(self):\n        if len(self.values) == 0:\n            return True\n        else:\n            return False\n\n    def enqueue(self, v):\n        self.values.append(v)\n\n    def dequeue(self):\n        if len(self.values) <= 0:\n            raise\n        else:\n            v = self.values[0]\n            del self.values[0]\n            return v\n\n\nn, q = list(map(int, input().split(\" \")))\nprocesses = []\nfor i in range(n):\n    n, t = input().split(\" \")\n    processes.append((n, int(t)))\nqueue = Queue(processes)\nclock = 0\ndone = []\nwhile not queue.empty():\n    p = queue.dequeue()\n    n = p[0]\n    t = p[1]\n    if t <= q:\n        clock += t\n        done.append((n, clock))\n    else:\n        queue.enqueue((n, t - q))\n        clock += q\nfor p in done:\n    print(p[0], p[1])\n","code_v1_no_empty_lines":"class Queue:\n    def __init__(self, l):\n        self.values = []\n        self.l = l\n        for _ in range(l):\n            self.values.append(None)\n        self.head = 0\n        self.tail = 0\n\n    def inc(self, n):\n        if n + 1 >= self.l:\n            return 0\n        else:\n            return n + 1\n\n    def enqueue(self, v):\n        if self.inc(self.head) == self.tail:\n            print(\"overflow\")\n            exit()\n        self.values[self.head] = v\n        self.head = self.inc(self.head)\n\n    def dequeue(self):\n        if self.head == self.tail:\n            print(\"underflow\")\n            exit()\n        v = self.values[self.tail]\n        self.tail = self.inc(self.tail)\n        return v\n\n    def size(self):\n        if self.head >= self.tail:\n            return self.head - self.tail\n        else:\n            self.head + (self.l - self.tail)\n\n\nn, q = list(map(int, input().split(\" \")))\nqueue = Queue(200000)\nfor _ in range(n):\n    n, t = input().split(\" \")\n    t = int(t)\n    queue.enqueue((n, t))\nc = 0\nwhile queue.size() > 0:\n    n, t = queue.dequeue()\n    if t <= q:\n        c += t\n        print(n, c)\n    else:\n        queue.enqueue((n, t - q))\n        c += q\n","code_same":false,"relative_loc_diff_percent":8.3333333333,"diff":["-    def __init__(self, values):","-        self.values = values","+    def __init__(self, l):","+        self.values = []","+        self.l = l","+        for _ in range(l):","+            self.values.append(None)","+        self.head = 0","+        self.tail = 0","-    def empty(self):","-        if len(self.values) == 0:","-            return True","+    def inc(self, n):","+        if n + 1 >= self.l:","+            return 0","-            return False","+            return n + 1","-        self.values.append(v)","+        if self.inc(self.head) == self.tail:","+            print(\"overflow\")","+            exit()","+        self.values[self.head] = v","+        self.head = self.inc(self.head)","-        if len(self.values) <= 0:","-            raise","+        if self.head == self.tail:","+            print(\"underflow\")","+            exit()","+        v = self.values[self.tail]","+        self.tail = self.inc(self.tail)","+        return v","+","+    def size(self):","+        if self.head >= self.tail:","+            return self.head - self.tail","-            v = self.values[0]","-            del self.values[0]","-            return v","+            self.head + (self.l - self.tail)","-processes = []","-for i in range(n):","+queue = Queue(200000)","+for _ in range(n):","-    processes.append((n, int(t)))","-queue = Queue(processes)","-clock = 0","-done = []","-while not queue.empty():","-    p = queue.dequeue()","-    n = p[0]","-    t = p[1]","+    t = int(t)","+    queue.enqueue((n, t))","+c = 0","+while queue.size() > 0:","+    n, t = queue.dequeue()","-        clock += t","-        done.append((n, clock))","+        c += t","+        print(n, c)","-        clock += q","-for p in done:","-    print(p[0], p[1])","+        c += q"],"diff_only_import_comment":false,"measured_runtime_v0":0.3044010155,"measured_runtime_v1":0.1198908706,"runtime_lift":2.5389841115,"key":["s309974156","s779537604"]}
{"user_id":"u581187895","problem_id":"p03371","language":"python","submission_id_v0":"s830313150","submission_id_v1":"s841516254","cpu_time_v0":132,"cpu_time_v1":17,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.12,"input":"A, B, C, X, Y = list(map(int, input().split()))\n\n\n\n# C\u3092\u8cb7\u3063\u305f\u500b\u6570\u3068A\u3001B\u5358\u54c1\u3067\u8cb7\u3063\u305f\u5834\u5408\u306e\u30b3\u30b9\u30c8\u3092\u611a\u76f4\u306b\u8a66\u3059\n\ntotal = 1<<60\n\nfor i in range(10**5+1):\n\n  cost = 2*C*i + max(X-i, 0)*A + max(Y-i, 0)*B\n\n  total = min(cost, total)\n\n\n\nprint(total)","target":"A, B, C, X, Y = list(map(int, input().split()))\n\n\n\nif (A+B) <= 2*C: # \u5358\u54c1\u3060\u3051\u3067\u8cfc\u5165\n\n  print((X*A + Y*B))\n\nelse:\n\n  # AB\u3092\u8cb7\u3044\u6b8b\u308a\u3092\u5358\u54c1\u3067\u88dc\u3046\n\n  if X >= Y:\n\n    # AB\u3067Y\u306f\u8cc4\u3048\u308b\n\n    print((min(X*2*C, Y*2*C + A*(X-Y))))\n\n  else:\n\n    # AB\u3067X\u306f\u8cc4\u3048\u308b\n\n    print((min(Y*2*C, X*(2*C)+B*(Y-X))))","code_v0_loc":9,"code_v1_loc":12,"code_v0_num_chars":209,"code_v1_num_chars":252,"code_v0_no_empty_lines":"A, B, C, X, Y = list(map(int, input().split()))\n# C\u3092\u8cb7\u3063\u305f\u500b\u6570\u3068A\u3001B\u5358\u54c1\u3067\u8cb7\u3063\u305f\u5834\u5408\u306e\u30b3\u30b9\u30c8\u3092\u611a\u76f4\u306b\u8a66\u3059\ntotal = 1 << 60\nfor i in range(10**5 + 1):\n    cost = 2 * C * i + max(X - i, 0) * A + max(Y - i, 0) * B\n    total = min(cost, total)\nprint(total)\n","code_v1_no_empty_lines":"A, B, C, X, Y = list(map(int, input().split()))\nif (A + B) <= 2 * C:  # \u5358\u54c1\u3060\u3051\u3067\u8cfc\u5165\n    print((X * A + Y * B))\nelse:\n    # AB\u3092\u8cb7\u3044\u6b8b\u308a\u3092\u5358\u54c1\u3067\u88dc\u3046\n    if X >= Y:\n        # AB\u3067Y\u306f\u8cc4\u3048\u308b\n        print((min(X * 2 * C, Y * 2 * C + A * (X - Y))))\n    else:\n        # AB\u3067X\u306f\u8cc4\u3048\u308b\n        print((min(Y * 2 * C, X * (2 * C) + B * (Y - X))))\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-# C\u3092\u8cb7\u3063\u305f\u500b\u6570\u3068A\u3001B\u5358\u54c1\u3067\u8cb7\u3063\u305f\u5834\u5408\u306e\u30b3\u30b9\u30c8\u3092\u611a\u76f4\u306b\u8a66\u3059","-total = 1 << 60","-for i in range(10**5 + 1):","-    cost = 2 * C * i + max(X - i, 0) * A + max(Y - i, 0) * B","-    total = min(cost, total)","-print(total)","+if (A + B) <= 2 * C:  # \u5358\u54c1\u3060\u3051\u3067\u8cfc\u5165","+    print((X * A + Y * B))","+else:","+    # AB\u3092\u8cb7\u3044\u6b8b\u308a\u3092\u5358\u54c1\u3067\u88dc\u3046","+    if X >= Y:","+        # AB\u3067Y\u306f\u8cc4\u3048\u308b","+        print((min(X * 2 * C, Y * 2 * C + A * (X - Y))))","+    else:","+        # AB\u3067X\u306f\u8cc4\u3048\u308b","+        print((min(Y * 2 * C, X * (2 * C) + B * (Y - X))))"],"diff_only_import_comment":false,"measured_runtime_v0":1.4378738942,"measured_runtime_v1":0.35371227,"runtime_lift":4.0650947565,"key":["s830313150","s841516254"]}
{"user_id":"u709304134","problem_id":"p02690","language":"python","submission_id_v0":"s716751946","submission_id_v1":"s847137300","cpu_time_v0":140,"cpu_time_v1":33,"memory_v0":9172,"memory_v1":9052,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":76.43,"input":"import sys\n\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(10**7)\n\nINF = 10**10\n\nMOD = 10**9 + 7\n\nX = int(eval(input()))\n\nfor i in range(1000):\n\n    for j in range(-1000,1000):\n\n        #print (i**5 - j**5)\n\n        if i**5 - j**5 == X:\n\n            print((i,j))\n\n            exit()\n\n   ","target":"import sys\n\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(10**7)\n\nINF = 10**10\n\nMOD = 10**9 + 7\n\nX = int(eval(input()))\n\nMAX_X = 10**9\n\nn = 0\n\nwhile(1):\n\n    n+=1\n\n    if n**5 - (n-1)**5 > MAX_X:\n\n        break\n\nfor i in range(n):\n\n    for j in range(-n+1,n-1):\n\n        if i**5 - j**5 == X:\n\n            print((i,j))\n\n            exit()\n\n   ","code_v0_loc":13,"code_v1_loc":18,"code_v0_num_chars":283,"code_v1_num_chars":339,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nINF = 10**10\nMOD = 10**9 + 7\nX = int(eval(input()))\nfor i in range(1000):\n    for j in range(-1000, 1000):\n        # print (i**5 - j**5)\n        if i**5 - j**5 == X:\n            print((i, j))\n            exit()\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nINF = 10**10\nMOD = 10**9 + 7\nX = int(eval(input()))\nMAX_X = 10**9\nn = 0\nwhile 1:\n    n += 1\n    if n**5 - (n - 1) ** 5 > MAX_X:\n        break\nfor i in range(n):\n    for j in range(-n + 1, n - 1):\n        if i**5 - j**5 == X:\n            print((i, j))\n            exit()\n","code_same":false,"relative_loc_diff_percent":27.7777777778,"diff":["-for i in range(1000):","-    for j in range(-1000, 1000):","-        # print (i**5 - j**5)","+MAX_X = 10**9","+n = 0","+while 1:","+    n += 1","+    if n**5 - (n - 1) ** 5 > MAX_X:","+        break","+for i in range(n):","+    for j in range(-n + 1, n - 1):"],"diff_only_import_comment":false,"measured_runtime_v0":0.2435716569,"measured_runtime_v1":0.1900340259,"runtime_lift":1.2817265527,"key":["s716751946","s847137300"]}
{"user_id":"u672220554","problem_id":"p02983","language":"python","submission_id_v0":"s554161170","submission_id_v1":"s606893257","cpu_time_v0":990,"cpu_time_v1":76,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":92.32,"input":"l,r = list(map(int,input().split()))\n\n\n\nif r - l > 2019:\n\n    print((0))\n\nelse:\n\n    tres = 2019\n\n    for i in range(l,r):\n\n        for j in range(i+1,r+1):\n\n            mod = (i % 2019) * (j % 2019) % 2019\n\n            tres = min(tres,mod)\n\n    print(tres)\n","target":"l,r = list(map(int,input().split()))\n\n\n\nif r - l > 2019:\n\n    print((0))\n\nelse:\n\n    tres = 2019\n\n    for i in range(l,r):\n\n        for j in range(i+1,r+1):\n\n            mod = (i % 2019) * (j % 2019) % 2019\n\n            tres = min(tres,mod)\n\n            if tres == 0:\n\n                break\n\n        if tres == 0:\n\n            break\n\n    print(tres)\n","code_v0_loc":11,"code_v1_loc":15,"code_v0_num_chars":250,"code_v1_num_chars":342,"code_v0_no_empty_lines":"l, r = list(map(int, input().split()))\nif r - l > 2019:\n    print((0))\nelse:\n    tres = 2019\n    for i in range(l, r):\n        for j in range(i + 1, r + 1):\n            mod = (i % 2019) * (j % 2019) % 2019\n            tres = min(tres, mod)\n    print(tres)\n","code_v1_no_empty_lines":"l, r = list(map(int, input().split()))\nif r - l > 2019:\n    print((0))\nelse:\n    tres = 2019\n    for i in range(l, r):\n        for j in range(i + 1, r + 1):\n            mod = (i % 2019) * (j % 2019) % 2019\n            tres = min(tres, mod)\n            if tres == 0:\n                break\n        if tres == 0:\n            break\n    print(tres)\n","code_same":false,"relative_loc_diff_percent":26.6666666667,"diff":["+            if tres == 0:","+                break","+        if tres == 0:","+            break"],"diff_only_import_comment":false,"measured_runtime_v0":0.2616734529,"measured_runtime_v1":0.2086780975,"runtime_lift":1.2539574397,"key":["s554161170","s606893257"]}
{"user_id":"u254871849","problem_id":"p03086","language":"python","submission_id_v0":"s827296868","submission_id_v1":"s358574733","cpu_time_v0":604,"cpu_time_v1":18,"memory_v0":102680,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":97.02,"input":"# 2019-11-12 22:21:08(JST)\n\nimport sys\n\n# import collections\n\n# import math\n\n# from string import ascii_lowercase, ascii_uppercase, digits\n\n# from bisect import bisect_left as bi_l, bisect_right as bi_r\n\nimport itertools\n\n# from functools import reduce\n\n# import operator as op\n\n# from scipy.misc import comb # float\n\n# import numpy as np \n\n\n\ndef main():\n\n    s = sys.stdin.readline().rstrip()\n\n    \n\n    all_words = []\n\n    for i in range(1, len(s) + 1):\n\n        for letters in itertools.product('ATCG', repeat=i):\n\n            word = ''.join(letters)\n\n            all_words.append(word)\n\n    \n\n    for i in range(len(all_words)-1, 0-1, -1):\n\n        if all_words[i] in s:\n\n            print((len(all_words[i])))\n\n            sys.exit()\n\n    print((0))\n\n\n\n\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"# 2019-11-12 22:21:08(JST)\n\nimport sys\n\n# import collections\n\n# import math\n\n# from string import ascii_lowercase, ascii_uppercase, digits\n\n# from bisect import bisect_left as bi_l, bisect_right as bi_r\n\n# import itertools\n\n# from functools import reduce\n\n# import operator as op\n\n# from scipy.misc import comb # float\n\n# import numpy as np \n\n\n\ndef main():\n\n    s = sys.stdin.readline().rstrip()\n\n    \n\n    permitted = 'ACGT'\n\n    continuous_count = []\n\n    count = 0\n\n\n\n    for i in range(len(s)):\n\n        char = s[i]\n\n        if char in permitted:\n\n            count += 1\n\n        else:\n\n            continuous_count.append(count)\n\n            count = 0\n\n        if i == len(s) - 1:\n\n            continuous_count.append(count)\n\n    \n\n    if not continuous_count:\n\n        print((len(s)))\n\n    else:\n\n        print((max(continuous_count)))\n\n\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":32,"code_v1_loc":38,"code_v0_num_chars":799,"code_v1_num_chars":884,"code_v0_no_empty_lines":"# 2019-11-12 22:21:08(JST)\nimport sys\n\n# import collections\n# import math\n# from string import ascii_lowercase, ascii_uppercase, digits\n# from bisect import bisect_left as bi_l, bisect_right as bi_r\nimport itertools\n\n# from functools import reduce\n# import operator as op\n# from scipy.misc import comb # float\n# import numpy as np\ndef main():\n    s = sys.stdin.readline().rstrip()\n    all_words = []\n    for i in range(1, len(s) + 1):\n        for letters in itertools.product(\"ATCG\", repeat=i):\n            word = \"\".join(letters)\n            all_words.append(word)\n    for i in range(len(all_words) - 1, 0 - 1, -1):\n        if all_words[i] in s:\n            print((len(all_words[i])))\n            sys.exit()\n    print((0))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"# 2019-11-12 22:21:08(JST)\nimport sys\n\n# import collections\n# import math\n# from string import ascii_lowercase, ascii_uppercase, digits\n# from bisect import bisect_left as bi_l, bisect_right as bi_r\n# import itertools\n# from functools import reduce\n# import operator as op\n# from scipy.misc import comb # float\n# import numpy as np\ndef main():\n    s = sys.stdin.readline().rstrip()\n    permitted = \"ACGT\"\n    continuous_count = []\n    count = 0\n    for i in range(len(s)):\n        char = s[i]\n        if char in permitted:\n            count += 1\n        else:\n            continuous_count.append(count)\n            count = 0\n        if i == len(s) - 1:\n            continuous_count.append(count)\n    if not continuous_count:\n        print((len(s)))\n    else:\n        print((max(continuous_count)))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":15.7894736842,"diff":["-import itertools","-","+# import itertools","-    all_words = []","-    for i in range(1, len(s) + 1):","-        for letters in itertools.product(\"ATCG\", repeat=i):","-            word = \"\".join(letters)","-            all_words.append(word)","-    for i in range(len(all_words) - 1, 0 - 1, -1):","-        if all_words[i] in s:","-            print((len(all_words[i])))","-            sys.exit()","-    print((0))","+    permitted = \"ACGT\"","+    continuous_count = []","+    count = 0","+    for i in range(len(s)):","+        char = s[i]","+        if char in permitted:","+            count += 1","+        else:","+            continuous_count.append(count)","+            count = 0","+        if i == len(s) - 1:","+            continuous_count.append(count)","+    if not continuous_count:","+        print((len(s)))","+    else:","+        print((max(continuous_count)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.4624249086,"measured_runtime_v1":0.2736470122,"runtime_lift":1.6898591541,"key":["s827296868","s358574733"]}
{"user_id":"u591503175","problem_id":"p03425","language":"python","submission_id_v0":"s516575345","submission_id_v1":"s622826688","cpu_time_v0":224,"cpu_time_v1":139,"memory_v0":28380,"memory_v1":10528,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":37.95,"input":"def resolve():\n\n    '''\n\n    code here\n\n    '''\n\n    import collections\n\n    import itertools\n\n    import numpy as np\n\n    N = int(eval(input()))\n\n    Ss = [input()[0] for _ in range(N)]\n\n\n\n    march_letter = [item for item in Ss if item in ['M', 'A', 'R', 'C', 'H']]\n\n    march_cnt = collections.Counter(march_letter)\n\n\n\n    if len(march_cnt) < 3:\n\n        res = 0\n\n    else:\n\n        res_list = itertools.combinations(list(march_cnt.values()),3)\n\n\n\n        res = 0\n\n        for element in res_list:\n\n            res += np.prod(np.array(element))\n\n    print(res)\n\n\n\nif __name__ == \"__main__\":\n\n    resolve()\n","target":"def resolve():\n\n    '''\n\n    code here\n\n    '''\n\n    import collections\n\n    import itertools\n\n    N = int(eval(input()))\n\n    Ss = [input()[0] for _ in range(N)]\n\n\n\n    march_letter = [item for item in Ss if item in ['M', 'A', 'R', 'C', 'H']]\n\n    march_cnt = collections.Counter(march_letter)\n\n\n\n    if len(march_cnt) < 3:\n\n        res = 0\n\n    else:\n\n        res_list = itertools.combinations(list(march_cnt.values()),3)\n\n\n\n        res = 0\n\n        for element in res_list:\n\n            res += element[0]*element[1]*element[2]\n\n    print(res)\n\n\n\nif __name__ == \"__main__\":\n\n    resolve()\n","code_v0_loc":25,"code_v1_loc":24,"code_v0_num_chars":597,"code_v1_num_chars":579,"code_v0_no_empty_lines":"def resolve():\n    \"\"\"\n    code here\n    \"\"\"\n    import collections\n    import itertools\n    import numpy as np\n\n    N = int(eval(input()))\n    Ss = [input()[0] for _ in range(N)]\n    march_letter = [item for item in Ss if item in [\"M\", \"A\", \"R\", \"C\", \"H\"]]\n    march_cnt = collections.Counter(march_letter)\n    if len(march_cnt) < 3:\n        res = 0\n    else:\n        res_list = itertools.combinations(list(march_cnt.values()), 3)\n        res = 0\n        for element in res_list:\n            res += np.prod(np.array(element))\n    print(res)\n\n\nif __name__ == \"__main__\":\n    resolve()\n","code_v1_no_empty_lines":"def resolve():\n    \"\"\"\n    code here\n    \"\"\"\n    import collections\n    import itertools\n\n    N = int(eval(input()))\n    Ss = [input()[0] for _ in range(N)]\n    march_letter = [item for item in Ss if item in [\"M\", \"A\", \"R\", \"C\", \"H\"]]\n    march_cnt = collections.Counter(march_letter)\n    if len(march_cnt) < 3:\n        res = 0\n    else:\n        res_list = itertools.combinations(list(march_cnt.values()), 3)\n        res = 0\n        for element in res_list:\n            res += element[0] * element[1] * element[2]\n    print(res)\n\n\nif __name__ == \"__main__\":\n    resolve()\n","code_same":false,"relative_loc_diff_percent":4.0,"diff":["-    import numpy as np","-            res += np.prod(np.array(element))","+            res += element[0] * element[1] * element[2]"],"diff_only_import_comment":false,"measured_runtime_v0":1.6003547316,"measured_runtime_v1":0.2577111022,"runtime_lift":6.209878882,"key":["s516575345","s622826688"]}
{"user_id":"u254871849","problem_id":"p03309","language":"python","submission_id_v0":"s802702568","submission_id_v1":"s939867576","cpu_time_v0":372,"cpu_time_v1":200,"memory_v0":27268,"memory_v1":25180,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":46.24,"input":"#                         author:  kagemeka \n\n#                         created: 2019-11-08 14:51:29(JST)\n\n## internal modules\n\nimport sys\n\n# import collections\n\n# import math\n\n# import string\n\n# import bisect\n\n# import re\n\n# import itertools\n\nimport statistics\n\n# import functools\n\n# import operator\n\n## external modules\n\n# import scipy.special   # if use comb function on AtCoder, \n\n# import scipy.misc      # select scipy.misc.comb (old version) \n\n\n\ndef main():\n\n    n, *a = (int(x) for x in sys.stdin.read().split())\n\n    \n\n    for i in range(n):\n\n        a[i] -= (i + 1)\n\n\n\n    if n % 2 != 0:\n\n        b = statistics.median(a)\n\n    else:\n\n        if a.count(statistics.median_high(a)) >= a.count(statistics.median_low(a)):\n\n            b = statistics.median_high(a)\n\n        else:\n\n            b = statistics.median_low(a)\n\n    \n\n    ans = sum([abs(a[i] - b) for i in range(n)])\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    # execute only if run as a script\n\n    main()\n\n\n\n\n","target":"import sys\n\n\n\nn, *a = list(map(int, sys.stdin.read().split()))\n\n\n\ndef main():\n\n    for i in range(n):\n\n        a[i] -= (i + 1)\n\n    a.sort()\n\n    b = a[n \/\/ 2]\n\n    res = 0\n\n    for i in range(n):\n\n        res += abs(a[i] - b)\n\n    \n\n    return res\n\n    \n\nif __name__ == '__main__':\n\n    ans = main()\n\n    print(ans)","code_v0_loc":40,"code_v1_loc":18,"code_v0_num_chars":987,"code_v1_num_chars":310,"code_v0_no_empty_lines":"#                         author:  kagemeka\n#                         created: 2019-11-08 14:51:29(JST)\n## internal modules\nimport sys\n\n# import collections\n# import math\n# import string\n# import bisect\n# import re\n# import itertools\nimport statistics\n\n# import functools\n# import operator\n## external modules\n# import scipy.special   # if use comb function on AtCoder,\n# import scipy.misc      # select scipy.misc.comb (old version)\ndef main():\n    n, *a = (int(x) for x in sys.stdin.read().split())\n    for i in range(n):\n        a[i] -= i + 1\n    if n % 2 != 0:\n        b = statistics.median(a)\n    else:\n        if a.count(statistics.median_high(a)) >= a.count(statistics.median_low(a)):\n            b = statistics.median_high(a)\n        else:\n            b = statistics.median_low(a)\n    ans = sum([abs(a[i] - b) for i in range(n)])\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    # execute only if run as a script\n    main()\n","code_v1_no_empty_lines":"import sys\n\nn, *a = list(map(int, sys.stdin.read().split()))\n\n\ndef main():\n    for i in range(n):\n        a[i] -= i + 1\n    a.sort()\n    b = a[n \/\/ 2]\n    res = 0\n    for i in range(n):\n        res += abs(a[i] - b)\n    return res\n\n\nif __name__ == \"__main__\":\n    ans = main()\n    print(ans)\n","code_same":false,"relative_loc_diff_percent":55.0,"diff":["-#                         author:  kagemeka","-#                         created: 2019-11-08 14:51:29(JST)","-## internal modules","-# import collections","-# import math","-# import string","-# import bisect","-# import re","-# import itertools","-import statistics","+n, *a = list(map(int, sys.stdin.read().split()))","-# import functools","-# import operator","-## external modules","-# import scipy.special   # if use comb function on AtCoder,","-# import scipy.misc      # select scipy.misc.comb (old version)","+","-    n, *a = (int(x) for x in sys.stdin.read().split())","-    if n % 2 != 0:","-        b = statistics.median(a)","-    else:","-        if a.count(statistics.median_high(a)) >= a.count(statistics.median_low(a)):","-            b = statistics.median_high(a)","-        else:","-            b = statistics.median_low(a)","-    ans = sum([abs(a[i] - b) for i in range(n)])","-    print(ans)","+    a.sort()","+    b = a[n \/\/ 2]","+    res = 0","+    for i in range(n):","+        res += abs(a[i] - b)","+    return res","-    # execute only if run as a script","-    main()","+    ans = main()","+    print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2726693273,"measured_runtime_v1":0.2052652476,"runtime_lift":1.3283755066,"key":["s802702568","s939867576"]}
{"user_id":"u371409687","problem_id":"p02690","language":"python","submission_id_v0":"s077527302","submission_id_v1":"s532076785","cpu_time_v0":39,"cpu_time_v1":22,"memory_v0":9172,"memory_v1":9344,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":43.59,"input":"x = int(eval(input()))\n\nfor i in range(-118, 120):\n\n    for j in range(-119, 119):\n\n        if i**5 - j**5 == x:\n\n            print(('{} {}'.format(i,j)))\n\n            break\n\n    else:\n\n        continue\n\n    break","target":"def make_divisors(n):\n\n    divisors = []\n\n    for i in range(1, int(n**0.5)+1):\n\n        if n % i == 0:\n\n            divisors.append(i)\n\n            if i != n \/\/ i:\n\n                divisors.append(n\/\/i)\n\n\n\n    divisors.sort()\n\n    return divisors\n\nx = int(eval(input()))\n\nL = make_divisors(x)\n\nfor i in L:\n\n    for a in range(-118,120):\n\n        if a**5 - (a-i)**5 == x:\n\n            print(('{} {}'.format(a,a-i)))\n\n            break\n\n    else:\n\n        continue\n\n    break","code_v0_loc":9,"code_v1_loc":20,"code_v0_num_chars":205,"code_v1_num_chars":466,"code_v0_no_empty_lines":"x = int(eval(input()))\nfor i in range(-118, 120):\n    for j in range(-119, 119):\n        if i**5 - j**5 == x:\n            print((\"{} {}\".format(i, j)))\n            break\n    else:\n        continue\n    break\n","code_v1_no_empty_lines":"def make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n \/\/ i:\n                divisors.append(n \/\/ i)\n    divisors.sort()\n    return divisors\n\n\nx = int(eval(input()))\nL = make_divisors(x)\nfor i in L:\n    for a in range(-118, 120):\n        if a**5 - (a - i) ** 5 == x:\n            print((\"{} {}\".format(a, a - i)))\n            break\n    else:\n        continue\n    break\n","code_same":false,"relative_loc_diff_percent":55.0,"diff":["+def make_divisors(n):","+    divisors = []","+    for i in range(1, int(n**0.5) + 1):","+        if n % i == 0:","+            divisors.append(i)","+            if i != n \/\/ i:","+                divisors.append(n \/\/ i)","+    divisors.sort()","+    return divisors","+","+","-for i in range(-118, 120):","-    for j in range(-119, 119):","-        if i**5 - j**5 == x:","-            print((\"{} {}\".format(i, j)))","+L = make_divisors(x)","+for i in L:","+    for a in range(-118, 120):","+        if a**5 - (a - i) ** 5 == x:","+            print((\"{} {}\".format(a, a - i)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.530296878,"measured_runtime_v1":0.2904120326,"runtime_lift":1.8260155175,"key":["s077527302","s532076785"]}
{"user_id":"u416758623","problem_id":"p03416","language":"python","submission_id_v0":"s698254896","submission_id_v1":"s209236188","cpu_time_v0":210,"cpu_time_v1":54,"memory_v0":3060,"memory_v1":9152,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":74.29,"input":"def findSumDigit(num):\n\n    global total\n\n    total = \"\"\n\n    while num > 0:\n\n        total += str(num % 10)\n\n        num \/\/= 10\n\n    return total\n\n\n\ndef main():\n\n    a,b = list(map(int, input().split()))\n\n    ans = 0\n\n    for i in range(a,b+1):\n\n        tmp = str(findSumDigit(i))\n\n        if tmp == str(i):\n\n            ans += 1\n\n    print(ans)\n\n\n\nif __name__ == '__main__':\n\n    main()","target":"a, b = list(map(int, input().split()))\n\nans = 0\n\n\n\nfor i in range(a,b+1):\n\n    seki_gyaku = str(i)\n\n    if seki_gyaku == seki_gyaku[::-1]:\n\n        ans += 1\n\n\n\nprint(ans)\n","code_v0_loc":19,"code_v1_loc":9,"code_v0_num_chars":382,"code_v1_num_chars":165,"code_v0_no_empty_lines":"def findSumDigit(num):\n    global total\n    total = \"\"\n    while num > 0:\n        total += str(num % 10)\n        num \/\/= 10\n    return total\n\n\ndef main():\n    a, b = list(map(int, input().split()))\n    ans = 0\n    for i in range(a, b + 1):\n        tmp = str(findSumDigit(i))\n        if tmp == str(i):\n            ans += 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"a, b = list(map(int, input().split()))\nans = 0\nfor i in range(a, b + 1):\n    seki_gyaku = str(i)\n    if seki_gyaku == seki_gyaku[::-1]:\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":52.6315789474,"diff":["-def findSumDigit(num):","-    global total","-    total = \"\"","-    while num > 0:","-        total += str(num % 10)","-        num \/\/= 10","-    return total","-","-","-def main():","-    a, b = list(map(int, input().split()))","-    ans = 0","-    for i in range(a, b + 1):","-        tmp = str(findSumDigit(i))","-        if tmp == str(i):","-            ans += 1","-    print(ans)","-","-","-if __name__ == \"__main__\":","-    main()","+a, b = list(map(int, input().split()))","+ans = 0","+for i in range(a, b + 1):","+    seki_gyaku = str(i)","+    if seki_gyaku == seki_gyaku[::-1]:","+        ans += 1","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.908202547,"measured_runtime_v1":0.4125540495,"runtime_lift":2.2014146949,"key":["s698254896","s209236188"]}
{"user_id":"u759412327","problem_id":"p03680","language":"python","submission_id_v0":"s086989807","submission_id_v1":"s510724514","cpu_time_v0":397,"cpu_time_v1":201,"memory_v0":7084,"memory_v1":13724,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":49.37,"input":"N = int(eval(input()))\n\na = [int(eval(input())) for i in range(N)]\n\nnow = a[0]\n\ncount = 1\n\nc = 0\n\nfor i in range(10**6):\n\n    if now != 2:\n\n        count += 1\n\n        now = a[now - 1]\n\n    else:\n\n        print(count)\n\n        c = 1\n\n        break\n\nif c == 0:\n\n    print((-1))\n","target":"N = int(eval(input()))\n\na = [0] + [int(eval(input())) for _ in range(N)]\n\nx = 1\n\nvisited = set([1])\n\nanswer = 0\n\n\n\nwhile True:\n\n  x = a[x]\n\n  if x in visited:\n\n    answer = -1\n\n    break\n\n  visited.add(x)\n\n  answer += 1\n\n  if x == 2:\n\n    break\n\n    \n\nprint(answer)\n","code_v0_loc":15,"code_v1_loc":17,"code_v0_num_chars":263,"code_v1_num_chars":254,"code_v0_no_empty_lines":"N = int(eval(input()))\na = [int(eval(input())) for i in range(N)]\nnow = a[0]\ncount = 1\nc = 0\nfor i in range(10**6):\n    if now != 2:\n        count += 1\n        now = a[now - 1]\n    else:\n        print(count)\n        c = 1\n        break\nif c == 0:\n    print((-1))\n","code_v1_no_empty_lines":"N = int(eval(input()))\na = [0] + [int(eval(input())) for _ in range(N)]\nx = 1\nvisited = set([1])\nanswer = 0\nwhile True:\n    x = a[x]\n    if x in visited:\n        answer = -1\n        break\n    visited.add(x)\n    answer += 1\n    if x == 2:\n        break\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":11.7647058824,"diff":["-a = [int(eval(input())) for i in range(N)]","-now = a[0]","-count = 1","-c = 0","-for i in range(10**6):","-    if now != 2:","-        count += 1","-        now = a[now - 1]","-    else:","-        print(count)","-        c = 1","+a = [0] + [int(eval(input())) for _ in range(N)]","+x = 1","+visited = set([1])","+answer = 0","+while True:","+    x = a[x]","+    if x in visited:","+        answer = -1","-if c == 0:","-    print((-1))","+    visited.add(x)","+    answer += 1","+    if x == 2:","+        break","+print(answer)"],"diff_only_import_comment":false,"measured_runtime_v0":0.8020722582,"measured_runtime_v1":0.2096916373,"runtime_lift":3.8250083246,"key":["s086989807","s510724514"]}
{"user_id":"u620238824","problem_id":"p02690","language":"python","submission_id_v0":"s361313136","submission_id_v1":"s308076339","cpu_time_v0":1222,"cpu_time_v1":629,"memory_v0":9168,"memory_v1":73340,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":48.53,"input":"X = int(eval(input()))#\u6570\u5b57\n\n\n\nfor i in range(10 ** 8):\n\n    for j in range(-10000,10 ** 4):\n\n        if i ** 5 - j ** 5 == X:\n\n            print((i, j))\n\n            exit()","target":"x = int(eval(input()))\n\ny = 10**4\n\n\n\nfor i in range(y):\n\n    for j in range(-y,y):\n\n        if i ** 5 - j ** 5 == x:\n\n            print((i, j))\n\n            exit()","code_v0_loc":7,"code_v1_loc":8,"code_v0_num_chars":163,"code_v1_num_chars":155,"code_v0_no_empty_lines":"X = int(eval(input()))  # \u6570\u5b57\nfor i in range(10**8):\n    for j in range(-10000, 10**4):\n        if i**5 - j**5 == X:\n            print((i, j))\n            exit()\n","code_v1_no_empty_lines":"x = int(eval(input()))\ny = 10**4\nfor i in range(y):\n    for j in range(-y, y):\n        if i**5 - j**5 == x:\n            print((i, j))\n            exit()\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-X = int(eval(input()))  # \u6570\u5b57","-for i in range(10**8):","-    for j in range(-10000, 10**4):","-        if i**5 - j**5 == X:","+x = int(eval(input()))","+y = 10**4","+for i in range(y):","+    for j in range(-y, y):","+        if i**5 - j**5 == x:"],"diff_only_import_comment":false,"measured_runtime_v0":0.5543799698,"measured_runtime_v1":0.3403863927,"runtime_lift":1.628678413,"key":["s361313136","s308076339"]}
{"user_id":"u150984829","problem_id":"p02386","language":"python","submission_id_v0":"s352388599","submission_id_v1":"s199670495","cpu_time_v0":40,"cpu_time_v1":30,"memory_v0":5616,"memory_v1":5616,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":25.0,"input":"n=int(eval(input()))\n\na=[list(map(int,input().split()))for _ in range(n)]\n\ndef f():\n\n for i in range(n-1):\n\n  d=a[i][:];d[3],d[4]=d[4],d[3]\n\n  for j in range(i+1,n):\n\n   e=a[j][:];e[3],e[4]=e[4],e[3]\n\n   for p in([0,1,2,3,4,5],[1,5,2,0,4,3],[2,1,5,3,0,4],[3,0,2,5,4,1],[4,1,0,3,5,2],[5,1,4,3,2,0]):\n\n    f=[d[k]for k in p]\n\n    if f[0]==e[0]and f[5]==e[5]:\n\n     f=f[1:5]*2\n\n     for k in range(4):\n\n      if f[k:k+4]==e[1:5]:return'No'\n\n return'Yes'\n\nprint((f()))\n","target":"n=int(eval(input()))\n\na=[[int(s)for s in input().split()]for _ in range(n)]\n\ndef f():\n\n for i in range(n-1):\n\n  d=a[i][:];d[3],d[4]=d[4],d[3]\n\n  for j in range(i+1,n):\n\n   e=a[j][:];e[3],e[4]=e[4],e[3]\n\n   for p in([0,1,2,3,4,5],[1,5,2,0,4,3],[2,1,5,3,0,4],[3,0,2,5,4,1],[4,1,0,3,5,2],[5,1,4,3,2,0]):\n\n    f=[d[k]for k in p]\n\n    if f[0]==e[0]and f[5]==e[5]:\n\n     f=f[1:5]*2\n\n     for k in range(4):\n\n      if f[k:k+4]==e[1:5]:return'No'\n\n return'Yes'\n\nprint((f()))\n","code_v0_loc":15,"code_v1_loc":15,"code_v0_num_chars":457,"code_v1_num_chars":459,"code_v0_no_empty_lines":"n = int(eval(input()))\na = [list(map(int, input().split())) for _ in range(n)]\n\n\ndef f():\n    for i in range(n - 1):\n        d = a[i][:]\n        d[3], d[4] = d[4], d[3]\n        for j in range(i + 1, n):\n            e = a[j][:]\n            e[3], e[4] = e[4], e[3]\n            for p in (\n                [0, 1, 2, 3, 4, 5],\n                [1, 5, 2, 0, 4, 3],\n                [2, 1, 5, 3, 0, 4],\n                [3, 0, 2, 5, 4, 1],\n                [4, 1, 0, 3, 5, 2],\n                [5, 1, 4, 3, 2, 0],\n            ):\n                f = [d[k] for k in p]\n                if f[0] == e[0] and f[5] == e[5]:\n                    f = f[1:5] * 2\n                    for k in range(4):\n                        if f[k : k + 4] == e[1:5]:\n                            return \"No\"\n    return \"Yes\"\n\n\nprint((f()))\n","code_v1_no_empty_lines":"n = int(eval(input()))\na = [[int(s) for s in input().split()] for _ in range(n)]\n\n\ndef f():\n    for i in range(n - 1):\n        d = a[i][:]\n        d[3], d[4] = d[4], d[3]\n        for j in range(i + 1, n):\n            e = a[j][:]\n            e[3], e[4] = e[4], e[3]\n            for p in (\n                [0, 1, 2, 3, 4, 5],\n                [1, 5, 2, 0, 4, 3],\n                [2, 1, 5, 3, 0, 4],\n                [3, 0, 2, 5, 4, 1],\n                [4, 1, 0, 3, 5, 2],\n                [5, 1, 4, 3, 2, 0],\n            ):\n                f = [d[k] for k in p]\n                if f[0] == e[0] and f[5] == e[5]:\n                    f = f[1:5] * 2\n                    for k in range(4):\n                        if f[k : k + 4] == e[1:5]:\n                            return \"No\"\n    return \"Yes\"\n\n\nprint((f()))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-a = [list(map(int, input().split())) for _ in range(n)]","+a = [[int(s) for s in input().split()] for _ in range(n)]"],"diff_only_import_comment":false,"measured_runtime_v0":0.2724710764,"measured_runtime_v1":0.2146971788,"runtime_lift":1.2690948152,"key":["s352388599","s199670495"]}
{"user_id":"u456353530","problem_id":"p03273","language":"python","submission_id_v0":"s657571871","submission_id_v1":"s367684184","cpu_time_v0":156,"cpu_time_v1":19,"memory_v0":12500,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.82,"input":"import numpy as np\n\nH, W = list(map(int, input().split()))\n\n\n\na = np.array([list(eval(input())) for i in range(H)])\n\n\n\nat = np.all(a == '.', axis = 1)\n\nfor i in reversed(list(range(len(at)))):\n\n  if at[i]:\n\n    a = np.delete(a, i, 0)\n\n\n\nat = np.all(a == '.', axis = 0)\n\nfor i in reversed(list(range(len(at)))):\n\n  if at[i]:\n\n    a = np.delete(a, i, 1)\n\nfor i in a:\n\n  print((''.join(i)))","target":"H, W = list(map(int, input().split()))\n\n\n\na = [list(eval(input())) for i in range(H)]\n\n\n\nfor i in reversed(list(range(len(a)))):\n\n  if '#' not in a[i]:\n\n    del a[i]\n\n\n\na = list(zip(*a))\n\nfor i in reversed(list(range(len(a)))):\n\n  if '#' not in a[i]:\n\n    del a[i]\n\n\n\na = list(zip(*a))\n\n         \n\nfor i in a:\n\n  print((''.join(i)))","code_v0_loc":16,"code_v1_loc":17,"code_v0_num_chars":367,"code_v1_num_chars":312,"code_v0_no_empty_lines":"import numpy as np\n\nH, W = list(map(int, input().split()))\na = np.array([list(eval(input())) for i in range(H)])\nat = np.all(a == \".\", axis=1)\nfor i in reversed(list(range(len(at)))):\n    if at[i]:\n        a = np.delete(a, i, 0)\nat = np.all(a == \".\", axis=0)\nfor i in reversed(list(range(len(at)))):\n    if at[i]:\n        a = np.delete(a, i, 1)\nfor i in a:\n    print((\"\".join(i)))\n","code_v1_no_empty_lines":"H, W = list(map(int, input().split()))\na = [list(eval(input())) for i in range(H)]\nfor i in reversed(list(range(len(a)))):\n    if \"#\" not in a[i]:\n        del a[i]\na = list(zip(*a))\nfor i in reversed(list(range(len(a)))):\n    if \"#\" not in a[i]:\n        del a[i]\na = list(zip(*a))\nfor i in a:\n    print((\"\".join(i)))\n","code_same":false,"relative_loc_diff_percent":5.8823529412,"diff":["-import numpy as np","-","-a = np.array([list(eval(input())) for i in range(H)])","-at = np.all(a == \".\", axis=1)","-for i in reversed(list(range(len(at)))):","-    if at[i]:","-        a = np.delete(a, i, 0)","-at = np.all(a == \".\", axis=0)","-for i in reversed(list(range(len(at)))):","-    if at[i]:","-        a = np.delete(a, i, 1)","+a = [list(eval(input())) for i in range(H)]","+for i in reversed(list(range(len(a)))):","+    if \"#\" not in a[i]:","+        del a[i]","+a = list(zip(*a))","+for i in reversed(list(range(len(a)))):","+    if \"#\" not in a[i]:","+        del a[i]","+a = list(zip(*a))"],"diff_only_import_comment":false,"measured_runtime_v0":1.6232817362,"measured_runtime_v1":0.2846437557,"runtime_lift":5.7028538438,"key":["s657571871","s367684184"]}
{"user_id":"u860002137","problem_id":"p02952","language":"python","submission_id_v0":"s726498671","submission_id_v1":"s714071292","cpu_time_v0":61,"cpu_time_v1":26,"memory_v0":2940,"memory_v1":9004,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":57.38,"input":"N = int(eval(input()))\n\n\n\nans = 0\n\n\n\nfor i in range(1, N+1):\n\n    if len(str(i))%2==1:\n\n        ans += 1\n\n\n\nprint(ans)","target":"import sys\n\n\n\n\n\ndef rec(length):\n\n    if length == 1:\n\n        return 9\n\n    else:\n\n        return 9 * 10**(length - 1) + rec(length - 2)\n\n\n\n\n\nn = eval(input())\n\nlength = len(n)\n\n\n\nif length == 1:\n\n    print(n)\n\n    sys.exit()\n\n\n\nif length % 2 == 0:\n\n    ans = rec(length - 1)\n\nelse:\n\n    ans = rec(length - 2) + int(n) - int(\"1\" + \"0\" * (length - 1)) + 1\n\n\n\nprint(ans)","code_v0_loc":9,"code_v1_loc":23,"code_v0_num_chars":112,"code_v1_num_chars":363,"code_v0_no_empty_lines":"N = int(eval(input()))\nans = 0\nfor i in range(1, N + 1):\n    if len(str(i)) % 2 == 1:\n        ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"import sys\n\n\ndef rec(length):\n    if length == 1:\n        return 9\n    else:\n        return 9 * 10 ** (length - 1) + rec(length - 2)\n\n\nn = eval(input())\nlength = len(n)\nif length == 1:\n    print(n)\n    sys.exit()\nif length % 2 == 0:\n    ans = rec(length - 1)\nelse:\n    ans = rec(length - 2) + int(n) - int(\"1\" + \"0\" * (length - 1)) + 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":60.8695652174,"diff":["-N = int(eval(input()))","-ans = 0","-for i in range(1, N + 1):","-    if len(str(i)) % 2 == 1:","-        ans += 1","+import sys","+","+","+def rec(length):","+    if length == 1:","+        return 9","+    else:","+        return 9 * 10 ** (length - 1) + rec(length - 2)","+","+","+n = eval(input())","+length = len(n)","+if length == 1:","+    print(n)","+    sys.exit()","+if length % 2 == 0:","+    ans = rec(length - 1)","+else:","+    ans = rec(length - 2) + int(n) - int(\"1\" + \"0\" * (length - 1)) + 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.2155013096,"measured_runtime_v1":0.1672313638,"runtime_lift":1.2886417043,"key":["s726498671","s714071292"]}
{"user_id":"u252828980","problem_id":"p03568","language":"python","submission_id_v0":"s580844178","submission_id_v1":"s651852186","cpu_time_v0":306,"cpu_time_v1":168,"memory_v0":27248,"memory_v1":8704,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":45.1,"input":"import numpy as np\n\nfrom itertools import product\n\n\n\nn = int(eval(input()))\n\na = list(map(int,input().split()))\n\n\n\na = np.array(a)\n\n\n\nli = [-1,0,1]\n\ncnt = 0\n\nfor v in product(li,repeat = n):\n\n    v = np.array(v)\n\n    L =a+v\n\n    cum = L.cumprod()\n\n    if cum[-1]%2 ==0 :\n\n        cnt +=1\n\nprint(cnt)\n\n        ","target":"n = int(eval(input()))\n\na = list(map(int,input().split()))\n\n\n\nfrom itertools import product\n\n\n\nli = [-1,0,1]\n\ncnt = 0\n\nfor v in product(li,repeat = n):\n\n    L = []\n\n    for i in range(n):\n\n        L.append(v[i]+a[i])\n\n    if any(x%2==0 for x in L):\n\n        cnt +=1\n\n\n\nprint(cnt)","code_v0_loc":18,"code_v1_loc":15,"code_v0_num_chars":303,"code_v1_num_chars":273,"code_v0_no_empty_lines":"import numpy as np\nfrom itertools import product\n\nn = int(eval(input()))\na = list(map(int, input().split()))\na = np.array(a)\nli = [-1, 0, 1]\ncnt = 0\nfor v in product(li, repeat=n):\n    v = np.array(v)\n    L = a + v\n    cum = L.cumprod()\n    if cum[-1] % 2 == 0:\n        cnt += 1\nprint(cnt)\n","code_v1_no_empty_lines":"n = int(eval(input()))\na = list(map(int, input().split()))\nfrom itertools import product\n\nli = [-1, 0, 1]\ncnt = 0\nfor v in product(li, repeat=n):\n    L = []\n    for i in range(n):\n        L.append(v[i] + a[i])\n    if any(x % 2 == 0 for x in L):\n        cnt += 1\nprint(cnt)\n","code_same":false,"relative_loc_diff_percent":16.6666666667,"diff":["-import numpy as np","+n = int(eval(input()))","+a = list(map(int, input().split()))","-n = int(eval(input()))","-a = list(map(int, input().split()))","-a = np.array(a)","-    v = np.array(v)","-    L = a + v","-    cum = L.cumprod()","-    if cum[-1] % 2 == 0:","+    L = []","+    for i in range(n):","+        L.append(v[i] + a[i])","+    if any(x % 2 == 0 for x in L):"],"diff_only_import_comment":false,"measured_runtime_v0":1.8323921626,"measured_runtime_v1":0.5995062318,"runtime_lift":3.056502277,"key":["s580844178","s651852186"]}
{"user_id":"u761320129","problem_id":"p03425","language":"python","submission_id_v0":"s293375746","submission_id_v1":"s279901441","cpu_time_v0":180,"cpu_time_v1":149,"memory_v0":10112,"memory_v1":10876,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.22,"input":"import itertools\n\nfrom collections import Counter\n\nN = int(eval(input()))\n\nsrc = [eval(input()) for i in range(N)]\n\nctr = Counter()\n\nfor s in src:\n\n    ctr[s[0]] += 1\n\n\n\nans = 0\n\nfor ptn in itertools.combinations('MARCH',3):\n\n    a,b,c = ptn\n\n    ans += ctr[a]*ctr[b]*ctr[c]\n\nprint(ans)","target":"N = int(eval(input()))\n\nS = [eval(input()) for i in range(N)]\n\nfrom collections import Counter\n\nctr = Counter([s[0] for s in S])\n\n\n\nans = 0\n\nimport itertools\n\nfor ptn in itertools.combinations('MARCH', 3):\n\n    t = 1\n\n    for c in ptn:\n\n        t *= ctr[c]\n\n    ans += t\n\nprint(ans)","code_v0_loc":13,"code_v1_loc":13,"code_v0_num_chars":274,"code_v1_num_chars":270,"code_v0_no_empty_lines":"import itertools\nfrom collections import Counter\n\nN = int(eval(input()))\nsrc = [eval(input()) for i in range(N)]\nctr = Counter()\nfor s in src:\n    ctr[s[0]] += 1\nans = 0\nfor ptn in itertools.combinations(\"MARCH\", 3):\n    a, b, c = ptn\n    ans += ctr[a] * ctr[b] * ctr[c]\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nS = [eval(input()) for i in range(N)]\nfrom collections import Counter\n\nctr = Counter([s[0] for s in S])\nans = 0\nimport itertools\n\nfor ptn in itertools.combinations(\"MARCH\", 3):\n    t = 1\n    for c in ptn:\n        t *= ctr[c]\n    ans += t\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-import itertools","+N = int(eval(input()))","+S = [eval(input()) for i in range(N)]","-N = int(eval(input()))","-src = [eval(input()) for i in range(N)]","-ctr = Counter()","-for s in src:","-    ctr[s[0]] += 1","+ctr = Counter([s[0] for s in S])","+import itertools","+","-    a, b, c = ptn","-    ans += ctr[a] * ctr[b] * ctr[c]","+    t = 1","+    for c in ptn:","+        t *= ctr[c]","+    ans += t"],"diff_only_import_comment":false,"measured_runtime_v0":0.206595207,"measured_runtime_v1":0.1454657862,"runtime_lift":1.420232292,"key":["s293375746","s279901441"]}
{"user_id":"u047102107","problem_id":"p02952","language":"python","submission_id_v0":"s855248831","submission_id_v1":"s153783643","cpu_time_v0":193,"cpu_time_v1":64,"memory_v0":40812,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":66.84,"input":"N = int(eval(input()))\n\n\n\ncount = 0\n\nfor i in range(1, N + 1):\n\n    num_dig = 0\n\n    ii = i\n\n    while ii > 0:\n\n        ii = int(ii \/ 10)\n\n        num_dig += 1\n\n    if num_dig % 2 != 0:\n\n        count += 1\n\n\n\nprint(count)","target":"N = int(eval(input()))\n\n\n\ncount = 0\n\nfor i in range(1, N + 1):\n\n    if len(str(i)) % 2 != 0:\n\n        count += 1\n\nprint(count)","code_v0_loc":13,"code_v1_loc":7,"code_v0_num_chars":215,"code_v1_num_chars":120,"code_v0_no_empty_lines":"N = int(eval(input()))\ncount = 0\nfor i in range(1, N + 1):\n    num_dig = 0\n    ii = i\n    while ii > 0:\n        ii = int(ii \/ 10)\n        num_dig += 1\n    if num_dig % 2 != 0:\n        count += 1\nprint(count)\n","code_v1_no_empty_lines":"N = int(eval(input()))\ncount = 0\nfor i in range(1, N + 1):\n    if len(str(i)) % 2 != 0:\n        count += 1\nprint(count)\n","code_same":false,"relative_loc_diff_percent":46.1538461538,"diff":["-    num_dig = 0","-    ii = i","-    while ii > 0:","-        ii = int(ii \/ 10)","-        num_dig += 1","-    if num_dig % 2 != 0:","+    if len(str(i)) % 2 != 0:"],"diff_only_import_comment":false,"measured_runtime_v0":0.3673675511,"measured_runtime_v1":0.2702338476,"runtime_lift":1.3594431427,"key":["s855248831","s153783643"]}
{"user_id":"u372550522","problem_id":"p02801","language":"python","submission_id_v0":"s439687684","submission_id_v1":"s397132828","cpu_time_v0":25,"cpu_time_v1":17,"memory_v0":3768,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":32.0,"input":"from string import ascii_lowercase as lower\n\nprint((lower[lower.find(eval(input()))+1]))","target":"print((chr(ord(eval(input()))+1)))","code_v0_loc":2,"code_v1_loc":1,"code_v0_num_chars":80,"code_v1_num_chars":26,"code_v0_no_empty_lines":"from string import ascii_lowercase as lower\n\nprint((lower[lower.find(eval(input())) + 1]))\n","code_v1_no_empty_lines":"print((chr(ord(eval(input())) + 1)))\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-from string import ascii_lowercase as lower","-","-print((lower[lower.find(eval(input())) + 1]))","+print((chr(ord(eval(input())) + 1)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3241319713,"measured_runtime_v1":0.2361063808,"runtime_lift":1.3728217348,"key":["s439687684","s397132828"]}
{"user_id":"u759412327","problem_id":"p03575","language":"python","submission_id_v0":"s189199377","submission_id_v1":"s590295023","cpu_time_v0":249,"cpu_time_v1":43,"memory_v0":17568,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":82.73,"input":"from scipy.sparse import *\n\nN,M,*A=list(map(int,open(0).read().split()));g=csr_matrix(([1]*M,(A[::2],A[1::2])),shape=(N+1,N+1)).tolil()\n\nc = 0\n\n\n\nfor a,b in zip(*g.nonzero()):\n\n  g[a,b]=0\n\n  n,_=csgraph.connected_components(g)\n\n  c+=n!=2\n\n  g[a,b]=1\n\n\n\nprint(c)","target":"N,M=list(map(int,input().split()))\n\nedges=[list(map(int,input().split())) for i in range(M)]\n\nans=0\n\nfor x in edges:\n\n    l=list(range(N))\n\n    for y in edges:\n\n        if y!=x:l=[l[y[0]-1] if l[i]==l[y[1]-1] else l[i] for i in range(N)]\n\n    if len(set(l))!=1:ans+=1\n\nprint(ans)","code_v0_loc":11,"code_v1_loc":9,"code_v0_num_chars":255,"code_v1_num_chars":273,"code_v0_no_empty_lines":"from scipy.sparse import *\n\nN, M, *A = list(map(int, open(0).read().split()))\ng = csr_matrix(([1] * M, (A[::2], A[1::2])), shape=(N + 1, N + 1)).tolil()\nc = 0\nfor a, b in zip(*g.nonzero()):\n    g[a, b] = 0\n    n, _ = csgraph.connected_components(g)\n    c += n != 2\n    g[a, b] = 1\nprint(c)\n","code_v1_no_empty_lines":"N, M = list(map(int, input().split()))\nedges = [list(map(int, input().split())) for i in range(M)]\nans = 0\nfor x in edges:\n    l = list(range(N))\n    for y in edges:\n        if y != x:\n            l = [l[y[0] - 1] if l[i] == l[y[1] - 1] else l[i] for i in range(N)]\n    if len(set(l)) != 1:\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":18.1818181818,"diff":["-from scipy.sparse import *","-","-N, M, *A = list(map(int, open(0).read().split()))","-g = csr_matrix(([1] * M, (A[::2], A[1::2])), shape=(N + 1, N + 1)).tolil()","-c = 0","-for a, b in zip(*g.nonzero()):","-    g[a, b] = 0","-    n, _ = csgraph.connected_components(g)","-    c += n != 2","-    g[a, b] = 1","-print(c)","+N, M = list(map(int, input().split()))","+edges = [list(map(int, input().split())) for i in range(M)]","+ans = 0","+for x in edges:","+    l = list(range(N))","+    for y in edges:","+        if y != x:","+            l = [l[y[0] - 1] if l[i] == l[y[1] - 1] else l[i] for i in range(N)]","+    if len(set(l)) != 1:","+        ans += 1","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.8243682652,"measured_runtime_v1":0.2276114681,"runtime_lift":8.0152739248,"key":["s189199377","s590295023"]}
{"user_id":"u585482323","problem_id":"p03634","language":"python","submission_id_v0":"s798160758","submission_id_v1":"s876456894","cpu_time_v0":777,"cpu_time_v1":659,"memory_v0":85552,"memory_v1":85552,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.19,"input":"#!usr\/bin\/env python3\n\nfrom collections import defaultdict\n\nfrom collections import deque\n\nfrom heapq import heappush, heappop\n\nimport sys\n\nimport math\n\nimport bisect\n\nimport random\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\n\ndef I(): return int(sys.stdin.readline())\n\ndef LS():return list(map(list, sys.stdin.readline().split()))\n\ndef S(): return list(sys.stdin.readline())[:-1]\n\ndef IR(n):\n\n    l = [None for i in range(n)]\n\n    for i in range(n):l[i] = I()\n\n    return l\n\ndef LIR(n):\n\n    l = [None for i in range(n)]\n\n    for i in range(n):l[i] = LI()\n\n    return l\n\ndef SR(n):\n\n    l = [None for i in range(n)]\n\n    for i in range(n):l[i] = S()\n\n    return l\n\ndef LSR(n):\n\n    l = [None for i in range(n)]\n\n    for i in range(n):l[i] = SR()\n\n    return l\n\nmod = 1000000007\n\n\n\n#A\n\n\"\"\"\n\ndef gcd(a,b):\n\n    if a == 0:\n\n        return b\n\n    return gcd(b%a,a)\n\nn = I()\n\na = IR(n)\n\nl = a[0]\n\nfor i in range(1,n):\n\n    g = gcd(l,a[i])\n\n    l *= a[i]\/\/g\n\nprint(l)\n\n\"\"\"\n\n\n\n#B\n\nn = I()\n\nv = [[] for i in range(n)]\n\nfor i in range(n-1):\n\n    a,b,c = LI()\n\n    a -= 1\n\n    b -= 1\n\n    v[a].append([b,c])\n\n    v[b].append([a,c])\n\nQ,k = LI()\n\nd = [-1 for i in range(n)]\n\nd[k-1] = 0\n\nq = deque()\n\nq.append(k-1)\n\nwhile q:\n\n    x = q.pop()\n\n    for y,c in v[x]:\n\n        if d[y] == -1:\n\n            d[y] = d[x]+c\n\n            q.append(y)\n\nfor i in range(Q):\n\n    x,y = LI()\n\n    x -= 1\n\n    y -= 1\n\n    print((d[x]+d[y]))\n\n#C\n\n\n\n#D\n\n\n\n#E\n\n\n\n#F\n\n\n\n#G\n\n\n\n#H\n\n\n\n#I\n\n\n\n#J\n\n\n\n#K\n\n\n\n#L\n\n\n\n#M\n\n\n\n#N\n\n\n\n#O\n\n\n\n#P\n\n\n\n#Q\n\n\n\n#R\n\n\n\n#S\n\n\n\n#T\n","target":"#!usr\/bin\/env python3\n\nfrom collections import defaultdict\n\nfrom collections import deque\n\nfrom heapq import heappush, heappop\n\nimport sys\n\nimport math\n\nimport bisect\n\nimport random\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\n\ndef I(): return int(sys.stdin.readline())\n\ndef LS():return list(map(list, sys.stdin.readline().split()))\n\ndef S(): return list(sys.stdin.readline())[:-1]\n\ndef IR(n):\n\n    l = [None for i in range(n)]\n\n    for i in range(n):l[i] = I()\n\n    return l\n\ndef LIR(n):\n\n    l = [None for i in range(n)]\n\n    for i in range(n):l[i] = LI()\n\n    return l\n\ndef SR(n):\n\n    l = [None for i in range(n)]\n\n    for i in range(n):l[i] = S()\n\n    return l\n\ndef LSR(n):\n\n    l = [None for i in range(n)]\n\n    for i in range(n):l[i] = SR()\n\n    return l\n\nmod = 1000000007\n\n\n\n#A\n\n\"\"\"\n\ndef gcd(a,b):\n\n    if a == 0:\n\n        return b\n\n    return gcd(b%a,a)\n\nn = I()\n\na = IR(n)\n\nl = a[0]\n\nfor i in range(1,n):\n\n    g = gcd(l,a[i])\n\n    l *= a[i]\/\/g\n\nprint(l)\n\n\"\"\"\n\n\n\n#B\n\nn = I()\n\nv = [[] for i in range(n)]\n\nfor i in range(n-1):\n\n    a,b,c = LI()\n\n    a -= 1\n\n    b -= 1\n\n    v[a].append([b,c])\n\n    v[b].append([a,c])\n\nQ,k = LI()\n\nd = [-1 for i in range(n)]\n\nd[k-1] = 0\n\nq = deque()\n\nq.append(k-1)\n\nwhile q:\n\n    x = q.popleft()\n\n    for y,c in v[x]:\n\n        if d[y] == -1:\n\n            d[y] = d[x]+c\n\n            q.append(y)\n\nfor i in range(Q):\n\n    x,y = LI()\n\n    x -= 1\n\n    y -= 1\n\n    print((d[x]+d[y]))\n\n#C\n\n\n\n#D\n\n\n\n#E\n\n\n\n#F\n\n\n\n#G\n\n\n\n#H\n\n\n\n#I\n\n\n\n#J\n\n\n\n#K\n\n\n\n#L\n\n\n\n#M\n\n\n\n#N\n\n\n\n#O\n\n\n\n#P\n\n\n\n#Q\n\n\n\n#R\n\n\n\n#S\n\n\n\n#T\n","code_v0_loc":105,"code_v1_loc":105,"code_v0_num_chars":1535,"code_v1_num_chars":1539,"code_v0_no_empty_lines":"#!usr\/bin\/env python3\nfrom collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef I():\n    return int(sys.stdin.readline())\n\n\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\n\n\ndef S():\n    return list(sys.stdin.readline())[:-1]\n\n\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\n\n\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\n\n\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\n\n\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = SR()\n    return l\n\n\nmod = 1000000007\n# A\n\"\"\"\ndef gcd(a,b):\n    if a == 0:\n        return b\n    return gcd(b%a,a)\nn = I()\na = IR(n)\nl = a[0]\nfor i in range(1,n):\n    g = gcd(l,a[i])\n    l *= a[i]\/\/g\nprint(l)\n\"\"\"\n# B\nn = I()\nv = [[] for i in range(n)]\nfor i in range(n - 1):\n    a, b, c = LI()\n    a -= 1\n    b -= 1\n    v[a].append([b, c])\n    v[b].append([a, c])\nQ, k = LI()\nd = [-1 for i in range(n)]\nd[k - 1] = 0\nq = deque()\nq.append(k - 1)\nwhile q:\n    x = q.pop()\n    for y, c in v[x]:\n        if d[y] == -1:\n            d[y] = d[x] + c\n            q.append(y)\nfor i in range(Q):\n    x, y = LI()\n    x -= 1\n    y -= 1\n    print((d[x] + d[y]))\n# C\n# D\n# E\n# F\n# G\n# H\n# I\n# J\n# K\n# L\n# M\n# N\n# O\n# P\n# Q\n# R\n# S\n# T\n","code_v1_no_empty_lines":"#!usr\/bin\/env python3\nfrom collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef I():\n    return int(sys.stdin.readline())\n\n\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\n\n\ndef S():\n    return list(sys.stdin.readline())[:-1]\n\n\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\n\n\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\n\n\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\n\n\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = SR()\n    return l\n\n\nmod = 1000000007\n# A\n\"\"\"\ndef gcd(a,b):\n    if a == 0:\n        return b\n    return gcd(b%a,a)\nn = I()\na = IR(n)\nl = a[0]\nfor i in range(1,n):\n    g = gcd(l,a[i])\n    l *= a[i]\/\/g\nprint(l)\n\"\"\"\n# B\nn = I()\nv = [[] for i in range(n)]\nfor i in range(n - 1):\n    a, b, c = LI()\n    a -= 1\n    b -= 1\n    v[a].append([b, c])\n    v[b].append([a, c])\nQ, k = LI()\nd = [-1 for i in range(n)]\nd[k - 1] = 0\nq = deque()\nq.append(k - 1)\nwhile q:\n    x = q.popleft()\n    for y, c in v[x]:\n        if d[y] == -1:\n            d[y] = d[x] + c\n            q.append(y)\nfor i in range(Q):\n    x, y = LI()\n    x -= 1\n    y -= 1\n    print((d[x] + d[y]))\n# C\n# D\n# E\n# F\n# G\n# H\n# I\n# J\n# K\n# L\n# M\n# N\n# O\n# P\n# Q\n# R\n# S\n# T\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    x = q.pop()","+    x = q.popleft()"],"diff_only_import_comment":false,"measured_runtime_v0":0.3495916958,"measured_runtime_v1":0.1121557097,"runtime_lift":3.1170209395,"key":["s798160758","s876456894"]}
{"user_id":"u764860452","problem_id":"p02837","language":"python","submission_id_v0":"s640707950","submission_id_v1":"s941679143","cpu_time_v0":91,"cpu_time_v1":80,"memory_v0":3064,"memory_v1":9092,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":12.09,"input":"from itertools import product\n\nN=int(eval(input()))\n\ndata=[]\n\nfor i in range(N):\n\n    for j in range(int(eval(input()))):\n\n        x,y=list(map(int,input().split()))\n\n        data.append((i,x-1,y))\n\n#print(data)\n\n\n\nans=0\n\nfor i in product([1,0],repeat=N):\n\n    #print(i)\n\n    s=True\n\n    for k in data:\n\n        if i[k[0]]==1 and i[k[1]]!=k[2]:\n\n            s=False\n\n            break\n\n    if s:\n\n        ans=max(ans,sum(i))\n\nprint(ans)\n","target":"from itertools import product\n\n\n\nN=int(eval(input()))\n\ndata=[]\n\nfor i in range(N):\n\n    for j in range(int(eval(input()))):\n\n        x,y=list(map(int,input().split()))\n\n        data.append((i,x-1,y)) #i\u3055\u3093\u304cx-1\u3055\u3093\u306b\u5618(0)or\u6b63\u76f4(1)\n\n\n\n\n\nans=0\n\nfor i in product([0,1],repeat=N):\n\n    ok=True\n\n    for j in data:\n\n        if i[j[0]]==1 and i[j[1]]!=j[2]:\n\n            ok = False\n\n            break\n\n    if ok:\n\n        ans=max(ans,sum(i))\n\nprint(ans)","code_v0_loc":20,"code_v1_loc":20,"code_v0_num_chars":419,"code_v1_num_chars":421,"code_v0_no_empty_lines":"from itertools import product\n\nN = int(eval(input()))\ndata = []\nfor i in range(N):\n    for j in range(int(eval(input()))):\n        x, y = list(map(int, input().split()))\n        data.append((i, x - 1, y))\n# print(data)\nans = 0\nfor i in product([1, 0], repeat=N):\n    # print(i)\n    s = True\n    for k in data:\n        if i[k[0]] == 1 and i[k[1]] != k[2]:\n            s = False\n            break\n    if s:\n        ans = max(ans, sum(i))\nprint(ans)\n","code_v1_no_empty_lines":"from itertools import product\n\nN = int(eval(input()))\ndata = []\nfor i in range(N):\n    for j in range(int(eval(input()))):\n        x, y = list(map(int, input().split()))\n        data.append((i, x - 1, y))  # i\u3055\u3093\u304cx-1\u3055\u3093\u306b\u5618(0)or\u6b63\u76f4(1)\nans = 0\nfor i in product([0, 1], repeat=N):\n    ok = True\n    for j in data:\n        if i[j[0]] == 1 and i[j[1]] != j[2]:\n            ok = False\n            break\n    if ok:\n        ans = max(ans, sum(i))\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-        data.append((i, x - 1, y))","-# print(data)","+        data.append((i, x - 1, y))  # i\u3055\u3093\u304cx-1\u3055\u3093\u306b\u5618(0)or\u6b63\u76f4(1)","-for i in product([1, 0], repeat=N):","-    # print(i)","-    s = True","-    for k in data:","-        if i[k[0]] == 1 and i[k[1]] != k[2]:","-            s = False","+for i in product([0, 1], repeat=N):","+    ok = True","+    for j in data:","+        if i[j[0]] == 1 and i[j[1]] != j[2]:","+            ok = False","-    if s:","+    if ok:"],"diff_only_import_comment":false,"measured_runtime_v0":0.2105706298,"measured_runtime_v1":0.1425504391,"runtime_lift":1.4771657746,"key":["s640707950","s941679143"]}
{"user_id":"u419874471","problem_id":"p04012","language":"python","submission_id_v0":"s872816747","submission_id_v1":"s223982270","cpu_time_v0":32,"cpu_time_v1":17,"memory_v0":3956,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":46.88,"input":"import string\n\nw = eval(input())\n\nfor a in string.ascii_lowercase:\n\n    cnt = 0\n\n    for t in w:\n\n        if t == a:\n\n            cnt = cnt + 1\n\n    if cnt % 2 == 1:\n\n        print(\"No\")\n\n        exit()\n\n\n\nprint(\"Yes\")","target":"w = eval(input())\n\nm = [0] * 26\n\nfor t in w:\n\n    m[ord(t) - ord('a')] += 1\n\n\n\nfor cnt in m:\n\n    if cnt % 2 == 1:\n\n        print(\"No\")\n\n        exit()\n\n\n\nprint(\"Yes\")","code_v0_loc":12,"code_v1_loc":11,"code_v0_num_chars":212,"code_v1_num_chars":161,"code_v0_no_empty_lines":"import string\n\nw = eval(input())\nfor a in string.ascii_lowercase:\n    cnt = 0\n    for t in w:\n        if t == a:\n            cnt = cnt + 1\n    if cnt % 2 == 1:\n        print(\"No\")\n        exit()\nprint(\"Yes\")\n","code_v1_no_empty_lines":"w = eval(input())\nm = [0] * 26\nfor t in w:\n    m[ord(t) - ord(\"a\")] += 1\nfor cnt in m:\n    if cnt % 2 == 1:\n        print(\"No\")\n        exit()\nprint(\"Yes\")\n","code_same":false,"relative_loc_diff_percent":8.3333333333,"diff":["-import string","-","-for a in string.ascii_lowercase:","-    cnt = 0","-    for t in w:","-        if t == a:","-            cnt = cnt + 1","+m = [0] * 26","+for t in w:","+    m[ord(t) - ord(\"a\")] += 1","+for cnt in m:"],"diff_only_import_comment":false,"measured_runtime_v0":0.2442542629,"measured_runtime_v1":0.193693031,"runtime_lift":1.2610379509,"key":["s872816747","s223982270"]}
{"user_id":"u133936772","problem_id":"p03013","language":"python","submission_id_v0":"s323963688","submission_id_v1":"s220101257","cpu_time_v0":187,"cpu_time_v1":70,"memory_v0":3828,"memory_v1":3828,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":62.57,"input":"mod = 10**9+7\n\nn, m = list(map(int, input().split()))\n\nl = [0]*n\n\nfor _ in range(m):\n\n  l[int(eval(input()))-1] = 1\n\n\n\ns = 0\n\nt = 1\n\n\n\nfor i in range(n):\n\n  if l[i] > 0:\n\n    t, s = 0, t\n\n  else:\n\n    t, s = (s+t)%mod, t\n\n\n\nprint(t)","target":"import sys\n\ninput = sys.stdin.readline\n\n\n\nmod = 10**9+7\n\nn, m = list(map(int, input().split()))\n\nl = [0]*n\n\nfor _ in range(m):\n\n  l[int(eval(input()))-1] = 1\n\n\n\nt, s = 1, 0\n\n\n\nfor i in range(n):\n\n  if l[i]:\n\n    t, s = 0, t\n\n  else:\n\n    t, s = (s+t)%mod, t\n\n\n\nprint(t)","code_v0_loc":16,"code_v1_loc":18,"code_v0_num_chars":220,"code_v1_num_chars":257,"code_v0_no_empty_lines":"mod = 10**9 + 7\nn, m = list(map(int, input().split()))\nl = [0] * n\nfor _ in range(m):\n    l[int(eval(input())) - 1] = 1\ns = 0\nt = 1\nfor i in range(n):\n    if l[i] > 0:\n        t, s = 0, t\n    else:\n        t, s = (s + t) % mod, t\nprint(t)\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nmod = 10**9 + 7\nn, m = list(map(int, input().split()))\nl = [0] * n\nfor _ in range(m):\n    l[int(eval(input())) - 1] = 1\nt, s = 1, 0\nfor i in range(n):\n    if l[i]:\n        t, s = 0, t\n    else:\n        t, s = (s + t) % mod, t\nprint(t)\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["+import sys","+","+input = sys.stdin.readline","-s = 0","-t = 1","+t, s = 1, 0","-    if l[i] > 0:","+    if l[i]:"],"diff_only_import_comment":false,"measured_runtime_v0":0.3071881404,"measured_runtime_v1":0.1884790037,"runtime_lift":1.6298268475,"key":["s323963688","s220101257"]}
{"user_id":"u911856499","problem_id":"p03774","language":"python","submission_id_v0":"s205905114","submission_id_v1":"s474977819","cpu_time_v0":31,"cpu_time_v1":26,"memory_v0":9140,"memory_v1":9144,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.13,"input":"N,M = [int(c) for c in input().split()]\n\nab = [list(map(int,input().split())) for c in range(N)]\n\ncd = [list(map(int,input().split())) for c in range(M)]\n\nfor i in range(N):\n\n    mi = 2*10**9\n\n    for j in range(M):\n\n        tmp = abs(ab[i][0]-cd[j][0])+abs(ab[i][1]-cd[j][1])\n\n        if mi > tmp:\n\n            mi = tmp\n\n            ans = j+1\n\n    print(ans)\n","target":"N,M = [int(c) for c in input().split()]\n\nab = [list(map(int,input().split())) for c in range(N)]\n\ncd = [list(map(int,input().split())) for c in range(M)]\n\nfor i in range(N):\n\n    mi = 10**9\n\n    for j in range(M):\n\n        tmp = abs(ab[i][0]-cd[j][0])+abs(ab[i][1]-cd[j][1])\n\n        if mi > tmp:\n\n            mi = tmp\n\n            ans = j+1\n\n    print(ans)\n","code_v0_loc":11,"code_v1_loc":11,"code_v0_num_chars":360,"code_v1_num_chars":358,"code_v0_no_empty_lines":"N, M = [int(c) for c in input().split()]\nab = [list(map(int, input().split())) for c in range(N)]\ncd = [list(map(int, input().split())) for c in range(M)]\nfor i in range(N):\n    mi = 2 * 10**9\n    for j in range(M):\n        tmp = abs(ab[i][0] - cd[j][0]) + abs(ab[i][1] - cd[j][1])\n        if mi > tmp:\n            mi = tmp\n            ans = j + 1\n    print(ans)\n","code_v1_no_empty_lines":"N, M = [int(c) for c in input().split()]\nab = [list(map(int, input().split())) for c in range(N)]\ncd = [list(map(int, input().split())) for c in range(M)]\nfor i in range(N):\n    mi = 10**9\n    for j in range(M):\n        tmp = abs(ab[i][0] - cd[j][0]) + abs(ab[i][1] - cd[j][1])\n        if mi > tmp:\n            mi = tmp\n            ans = j + 1\n    print(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    mi = 2 * 10**9","+    mi = 10**9"],"diff_only_import_comment":false,"measured_runtime_v0":0.2982070241,"measured_runtime_v1":0.232865705,"runtime_lift":1.2805965742,"key":["s205905114","s474977819"]}
{"user_id":"u638456847","problem_id":"p02690","language":"python","submission_id_v0":"s949059753","submission_id_v1":"s838856402","cpu_time_v0":40,"cpu_time_v1":25,"memory_v0":9176,"memory_v1":9400,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":37.5,"input":"from bisect import bisect_right\n\nimport sys\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\n\n\ndef main():\n\n    x = int(readline())\n\n\n\n    for a in range(-120, 120):\n\n        for b in range(-120, 120):\n\n            if a**5 - b**5 == x:\n\n                print((a, b))\n\n                exit()\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"# AC: 33 msec(Python3)\n\nfrom itertools import combinations_with_replacement\n\nimport sys\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\n\n\ndef main():\n\n    x = int(readline())\n\n\n\n    ab = [i**5 for i in range(200)]\n\n\n\n    C = combinations_with_replacement(ab, 2)\n\n    for a, b in C:\n\n        if a + b == x:\n\n            print((int(pow(b, 0.2)), -int(pow(a, 0.2))))\n\n            break\n\n        \n\n        if b - a == x:\n\n            print((int(pow(b, 0.2)), int(pow(a, 0.2))))\n\n            break\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":18,"code_v1_loc":25,"code_v0_num_chars":372,"code_v1_num_chars":573,"code_v0_no_empty_lines":"from bisect import bisect_right\nimport sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\n\n\ndef main():\n    x = int(readline())\n    for a in range(-120, 120):\n        for b in range(-120, 120):\n            if a**5 - b**5 == x:\n                print((a, b))\n                exit()\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"# AC: 33 msec(Python3)\nfrom itertools import combinations_with_replacement\nimport sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\n\n\ndef main():\n    x = int(readline())\n    ab = [i**5 for i in range(200)]\n    C = combinations_with_replacement(ab, 2)\n    for a, b in C:\n        if a + b == x:\n            print((int(pow(b, 0.2)), -int(pow(a, 0.2))))\n            break\n        if b - a == x:\n            print((int(pow(b, 0.2)), int(pow(a, 0.2))))\n            break\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":28.0,"diff":["-from bisect import bisect_right","+# AC: 33 msec(Python3)","+from itertools import combinations_with_replacement","-    for a in range(-120, 120):","-        for b in range(-120, 120):","-            if a**5 - b**5 == x:","-                print((a, b))","-                exit()","+    ab = [i**5 for i in range(200)]","+    C = combinations_with_replacement(ab, 2)","+    for a, b in C:","+        if a + b == x:","+            print((int(pow(b, 0.2)), -int(pow(a, 0.2))))","+            break","+        if b - a == x:","+            print((int(pow(b, 0.2)), int(pow(a, 0.2))))","+            break"],"diff_only_import_comment":false,"measured_runtime_v0":0.3611294071,"measured_runtime_v1":0.2064747095,"runtime_lift":1.7490248947,"key":["s949059753","s838856402"]}
{"user_id":"u187857228","problem_id":"p03416","language":"python","submission_id_v0":"s720217601","submission_id_v1":"s964731712","cpu_time_v0":154,"cpu_time_v1":57,"memory_v0":3060,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":62.99,"input":"def test():\n\n    a,b = list(map(int,input().split()))\n\n    count = 0\n\n    for i in range(a,b+1):\n\n        j = list(map(int,list(str(i))))\n\n        if j[0] == j[4] and j[1] == j[3]:\n\n            count += 1\n\n    print(count)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    test()\n","target":"def test():\n\n    a,b = list(map(int,input().split()))\n\n    count = 0\n\n    for i in range(a,b+1):\n\n        if str(i)[0] == str(i)[4] and str(i)[1] == str(i)[3]:\n\n            count += 1\n\n    print(count)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    test()\n","code_v0_loc":12,"code_v1_loc":11,"code_v0_num_chars":261,"code_v1_num_chars":240,"code_v0_no_empty_lines":"def test():\n    a, b = list(map(int, input().split()))\n    count = 0\n    for i in range(a, b + 1):\n        j = list(map(int, list(str(i))))\n        if j[0] == j[4] and j[1] == j[3]:\n            count += 1\n    print(count)\n\n\nif __name__ == \"__main__\":\n    test()\n","code_v1_no_empty_lines":"def test():\n    a, b = list(map(int, input().split()))\n    count = 0\n    for i in range(a, b + 1):\n        if str(i)[0] == str(i)[4] and str(i)[1] == str(i)[3]:\n            count += 1\n    print(count)\n\n\nif __name__ == \"__main__\":\n    test()\n","code_same":false,"relative_loc_diff_percent":8.3333333333,"diff":["-        j = list(map(int, list(str(i))))","-        if j[0] == j[4] and j[1] == j[3]:","+        if str(i)[0] == str(i)[4] and str(i)[1] == str(i)[3]:"],"diff_only_import_comment":false,"measured_runtime_v0":0.4881631348,"measured_runtime_v1":0.3868406759,"runtime_lift":1.2619229704,"key":["s720217601","s964731712"]}
{"user_id":"u285891772","problem_id":"p02725","language":"python","submission_id_v0":"s026186608","submission_id_v1":"s563865299","cpu_time_v0":309,"cpu_time_v1":236,"memory_v0":35140,"memory_v1":27236,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":23.62,"input":"import sys, re\n\nfrom collections import deque, defaultdict, Counter\n\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\n\nfrom itertools import accumulate, permutations, combinations, product, groupby\n\nfrom operator import itemgetter, mul\n\nfrom copy import deepcopy\n\nfrom string import ascii_lowercase, ascii_uppercase, digits\n\nfrom bisect import bisect, bisect_left\n\nfrom fractions import gcd\n\nfrom heapq import heappush, heappop\n\nfrom functools import reduce\n\ndef input(): return sys.stdin.readline().strip()\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(): return list(map(int, input().split()))\n\ndef ZIP(n): return list(zip(*(MAP() for _ in range(n))))\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = float('inf')\n\nmod = 10 ** 9 + 7\n\nimport numpy as np\n\n\n\nK, N = MAP()\n\nA = LIST()\n\nA.append(A[0]+K)\n\n\n\nB = np.zeros(N)\n\nfor i in range(N):\n\n  \t\tB[i] = A[i+1] - A[i]\n\n\n\nprint((int(K - max(B))))","target":"import sys, re\n\nfrom collections import deque, defaultdict, Counter\n\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\n\nfrom itertools import accumulate, permutations, combinations, product, groupby\n\nfrom operator import itemgetter, mul\n\nfrom copy import deepcopy\n\nfrom string import ascii_lowercase, ascii_uppercase, digits\n\nfrom bisect import bisect, bisect_left\n\nfrom fractions import gcd\n\nfrom heapq import heappush, heappop\n\nfrom functools import reduce\n\ndef input(): return sys.stdin.readline().strip()\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(): return list(map(int, input().split()))\n\ndef ZIP(n): return list(zip(*(MAP() for _ in range(n))))\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = float('inf')\n\nmod = 10 ** 9 + 7\n\n\n\nK, N = MAP()\n\nA = LIST()\n\ndiff = abs(K - A[-1] + A[0])\n\nd = abs(K - A[-1] + A[0])\n\nif N == 2:\n\n  print((min(d, A[1] - A[0])))\n\n  exit()\n\nfor i in range(1, N):\n\n  d += abs(A[i] - A[i-1])\n\n  diff = max(diff, abs(A[i] - A[i-1]))\n\nprint((d - diff))","code_v0_loc":30,"code_v1_loc":31,"code_v0_num_chars":936,"code_v1_num_chars":1023,"code_v0_no_empty_lines":"import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef INT():\n    return int(eval(input()))\n\n\ndef MAP():\n    return list(map(int, input().split()))\n\n\ndef LIST():\n    return list(map(int, input().split()))\n\n\ndef ZIP(n):\n    return list(zip(*(MAP() for _ in range(n))))\n\n\nsys.setrecursionlimit(10**9)\nINF = float(\"inf\")\nmod = 10**9 + 7\nimport numpy as np\n\nK, N = MAP()\nA = LIST()\nA.append(A[0] + K)\nB = np.zeros(N)\nfor i in range(N):\n    B[i] = A[i + 1] - A[i]\nprint((int(K - max(B))))\n","code_v1_no_empty_lines":"import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef INT():\n    return int(eval(input()))\n\n\ndef MAP():\n    return list(map(int, input().split()))\n\n\ndef LIST():\n    return list(map(int, input().split()))\n\n\ndef ZIP(n):\n    return list(zip(*(MAP() for _ in range(n))))\n\n\nsys.setrecursionlimit(10**9)\nINF = float(\"inf\")\nmod = 10**9 + 7\nK, N = MAP()\nA = LIST()\ndiff = abs(K - A[-1] + A[0])\nd = abs(K - A[-1] + A[0])\nif N == 2:\n    print((min(d, A[1] - A[0])))\n    exit()\nfor i in range(1, N):\n    d += abs(A[i] - A[i - 1])\n    diff = max(diff, abs(A[i] - A[i - 1]))\nprint((d - diff))\n","code_same":false,"relative_loc_diff_percent":3.2258064516,"diff":["-import numpy as np","-","-A.append(A[0] + K)","-B = np.zeros(N)","-for i in range(N):","-    B[i] = A[i + 1] - A[i]","-print((int(K - max(B))))","+diff = abs(K - A[-1] + A[0])","+d = abs(K - A[-1] + A[0])","+if N == 2:","+    print((min(d, A[1] - A[0])))","+    exit()","+for i in range(1, N):","+    d += abs(A[i] - A[i - 1])","+    diff = max(diff, abs(A[i] - A[i - 1]))","+print((d - diff))"],"diff_only_import_comment":false,"measured_runtime_v0":1.6886389652,"measured_runtime_v1":0.2032547581,"runtime_lift":8.3079922987,"key":["s026186608","s563865299"]}
{"user_id":"u906428167","problem_id":"p02821","language":"python","submission_id_v0":"s228028161","submission_id_v1":"s587768475","cpu_time_v0":305,"cpu_time_v1":262,"memory_v0":55448,"memory_v1":54460,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.1,"input":"from bisect import bisect_left\n\nfrom bisect import bisect_right\n\n\n\nn,m = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\na = sorted(a)\n\n\n\na_count = [0]*100010\n\na_sum = [0]*100010\n\n\n\nfor i in range(n):\n\n    a_count[a[i]] += 1\n\n    a_sum[a[i]] += a[i]\n\n\n\nfor i in range(100005,-1,-1):\n\n    a_count[i] += a_count[i+1]\n\n    a_sum[i] += a_sum[i+1]\n\n\n\ndef chk(x):\n\n    case = 0\n\n    for i in range(n):\n\n        if 0<= x-a[i]<= 10**5+5:\n\n            case += a_count[x-a[i]]\n\n        elif x-a[i] < 0:\n\n            case += n\n\n    if case >= m:\n\n        ch = True\n\n    else:\n\n        ch = False\n\n    return ch\n\n\n\nl = 2*a[-1]+1    #NG\n\nr = 1 #OK\n\n\n\nwhile abs(r-l) > 1:\n\n    kk = (r+l)\/\/2\n\n    if chk(kk):\n\n        r = kk\n\n    else:\n\n        l = kk\n\n\n\nans = 0\n\nsm = sum(a)\n\n\n\nl = r\n\n\n\ncase = 0\n\nfor i in range(n):\n\n    num = n-bisect_right(a,l-a[i]-1)\n\n    case += num\n\n    ans += num*a[i]*2\n\n\n\nans -= (case-m)*l\n\n\n\nprint(ans)","target":"n, m = list(map(int, input().split()))\n\na = [int(x) for x in input().split()]\n\n\n\naa = [0]*(10**5+1)\n\naa_sum = [0]*(10**5+1)\n\n\n\nfor x in a:\n\n    aa[x] += 1\n\n    aa_sum[x] += x\n\n\n\nfor i in range(10**5)[::-1]:\n\n    aa[i] = aa[i] + aa[i+1]\n\n    aa_sum[i] = aa_sum[i] + aa_sum[i+1]\n\n\n\n\n\ndef count(x):\n\n    cnt = 0\n\n    sm = 0\n\n    for i in range(n):\n\n        if x-a[i] < 0:\n\n            cnt += n\n\n            sm += aa_sum[0]+n*a[i]\n\n        elif x-a[i] > 10**5:\n\n            continue\n\n        else:\n\n            cnt += aa[x-a[i]]\n\n            sm += aa_sum[x-a[i]]+aa[x-a[i]]*a[i]\n\n\n\n    return cnt, sm\n\n\n\n\n\nbottom = 0\n\ntop = 10**6\n\n\n\nwhile top - bottom > 1:\n\n    mid = (top+bottom) \/\/ 2\n\n    cnt, sm = count(mid)\n\n    if cnt < m:\n\n        top = mid\n\n    else:\n\n        bottom = mid\n\n\n\ncnt, sm = count(bottom)\n\nans = sm - (cnt-m)*bottom\n\n\n\nprint(ans)\n","code_v0_loc":55,"code_v1_loc":46,"code_v0_num_chars":930,"code_v1_num_chars":839,"code_v0_no_empty_lines":"from bisect import bisect_left\nfrom bisect import bisect_right\n\nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))\na = sorted(a)\na_count = [0] * 100010\na_sum = [0] * 100010\nfor i in range(n):\n    a_count[a[i]] += 1\n    a_sum[a[i]] += a[i]\nfor i in range(100005, -1, -1):\n    a_count[i] += a_count[i + 1]\n    a_sum[i] += a_sum[i + 1]\n\n\ndef chk(x):\n    case = 0\n    for i in range(n):\n        if 0 <= x - a[i] <= 10**5 + 5:\n            case += a_count[x - a[i]]\n        elif x - a[i] < 0:\n            case += n\n    if case >= m:\n        ch = True\n    else:\n        ch = False\n    return ch\n\n\nl = 2 * a[-1] + 1  # NG\nr = 1  # OK\nwhile abs(r - l) > 1:\n    kk = (r + l) \/\/ 2\n    if chk(kk):\n        r = kk\n    else:\n        l = kk\nans = 0\nsm = sum(a)\nl = r\ncase = 0\nfor i in range(n):\n    num = n - bisect_right(a, l - a[i] - 1)\n    case += num\n    ans += num * a[i] * 2\nans -= (case - m) * l\nprint(ans)\n","code_v1_no_empty_lines":"n, m = list(map(int, input().split()))\na = [int(x) for x in input().split()]\naa = [0] * (10**5 + 1)\naa_sum = [0] * (10**5 + 1)\nfor x in a:\n    aa[x] += 1\n    aa_sum[x] += x\nfor i in range(10**5)[::-1]:\n    aa[i] = aa[i] + aa[i + 1]\n    aa_sum[i] = aa_sum[i] + aa_sum[i + 1]\n\n\ndef count(x):\n    cnt = 0\n    sm = 0\n    for i in range(n):\n        if x - a[i] < 0:\n            cnt += n\n            sm += aa_sum[0] + n * a[i]\n        elif x - a[i] > 10**5:\n            continue\n        else:\n            cnt += aa[x - a[i]]\n            sm += aa_sum[x - a[i]] + aa[x - a[i]] * a[i]\n    return cnt, sm\n\n\nbottom = 0\ntop = 10**6\nwhile top - bottom > 1:\n    mid = (top + bottom) \/\/ 2\n    cnt, sm = count(mid)\n    if cnt < m:\n        top = mid\n    else:\n        bottom = mid\ncnt, sm = count(bottom)\nans = sm - (cnt - m) * bottom\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":16.3636363636,"diff":["-from bisect import bisect_left","-from bisect import bisect_right","-","-a = list(map(int, input().split()))","-a = sorted(a)","-a_count = [0] * 100010","-a_sum = [0] * 100010","-for i in range(n):","-    a_count[a[i]] += 1","-    a_sum[a[i]] += a[i]","-for i in range(100005, -1, -1):","-    a_count[i] += a_count[i + 1]","-    a_sum[i] += a_sum[i + 1]","+a = [int(x) for x in input().split()]","+aa = [0] * (10**5 + 1)","+aa_sum = [0] * (10**5 + 1)","+for x in a:","+    aa[x] += 1","+    aa_sum[x] += x","+for i in range(10**5)[::-1]:","+    aa[i] = aa[i] + aa[i + 1]","+    aa_sum[i] = aa_sum[i] + aa_sum[i + 1]","-def chk(x):","-    case = 0","+def count(x):","+    cnt = 0","+    sm = 0","-        if 0 <= x - a[i] <= 10**5 + 5:","-            case += a_count[x - a[i]]","-        elif x - a[i] < 0:","-            case += n","-    if case >= m:","-        ch = True","-    else:","-        ch = False","-    return ch","+        if x - a[i] < 0:","+            cnt += n","+            sm += aa_sum[0] + n * a[i]","+        elif x - a[i] > 10**5:","+            continue","+        else:","+            cnt += aa[x - a[i]]","+            sm += aa_sum[x - a[i]] + aa[x - a[i]] * a[i]","+    return cnt, sm","-l = 2 * a[-1] + 1  # NG","-r = 1  # OK","-while abs(r - l) > 1:","-    kk = (r + l) \/\/ 2","-    if chk(kk):","-        r = kk","+bottom = 0","+top = 10**6","+while top - bottom > 1:","+    mid = (top + bottom) \/\/ 2","+    cnt, sm = count(mid)","+    if cnt < m:","+        top = mid","-        l = kk","-ans = 0","-sm = sum(a)","-l = r","-case = 0","-for i in range(n):","-    num = n - bisect_right(a, l - a[i] - 1)","-    case += num","-    ans += num * a[i] * 2","-ans -= (case - m) * l","+        bottom = mid","+cnt, sm = count(bottom)","+ans = sm - (cnt - m) * bottom"],"diff_only_import_comment":false,"measured_runtime_v0":0.6311447213,"measured_runtime_v1":0.3899716654,"runtime_lift":1.6184373822,"key":["s228028161","s587768475"]}
{"user_id":"u624475441","problem_id":"p03548","language":"python","submission_id_v0":"s161926153","submission_id_v1":"s067842786","cpu_time_v0":36,"cpu_time_v1":18,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":50.0,"input":"X, Y, Z = list(map(int, input().split()))\n\nfor n in range(10 ** 5, 0, -1):\n\n    if X >= n * (Y + Z) + Z:\n\n        break\n\nprint(n)","target":"X, Y, Z = list(map(int, input().split()))\n\nprint(((X - Z) \/\/ (Y + Z)))","code_v0_loc":5,"code_v1_loc":2,"code_v0_num_chars":123,"code_v1_num_chars":62,"code_v0_no_empty_lines":"X, Y, Z = list(map(int, input().split()))\nfor n in range(10**5, 0, -1):\n    if X >= n * (Y + Z) + Z:\n        break\nprint(n)\n","code_v1_no_empty_lines":"X, Y, Z = list(map(int, input().split()))\nprint(((X - Z) \/\/ (Y + Z)))\n","code_same":false,"relative_loc_diff_percent":60.0,"diff":["-for n in range(10**5, 0, -1):","-    if X >= n * (Y + Z) + Z:","-        break","-print(n)","+print(((X - Z) \/\/ (Y + Z)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.4167550103,"measured_runtime_v1":0.2488601058,"runtime_lift":1.6746557624,"key":["s161926153","s067842786"]}
{"user_id":"u465961647","problem_id":"p02576","language":"python","submission_id_v0":"s578033438","submission_id_v1":"s457299018","cpu_time_v0":28,"cpu_time_v1":25,"memory_v0":9032,"memory_v1":9096,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.71,"input":"array = list(map(int, input().split()))\n\nif array[0] % array[1] > 0:\n\n    print(((array[0] \/\/ array[1] + 1) * array[2]))\n\nelse:\n\n    print(((array[0] \/\/ array[1]) * array[2]))","target":"n, x, t = list(map(int, input().split()))\n\n\n\nprint((0--n\/\/x*t))","code_v0_loc":5,"code_v1_loc":3,"code_v0_num_chars":171,"code_v1_num_chars":55,"code_v0_no_empty_lines":"array = list(map(int, input().split()))\nif array[0] % array[1] > 0:\n    print(((array[0] \/\/ array[1] + 1) * array[2]))\nelse:\n    print(((array[0] \/\/ array[1]) * array[2]))\n","code_v1_no_empty_lines":"n, x, t = list(map(int, input().split()))\nprint((0 - -n \/\/ x * t))\n","code_same":false,"relative_loc_diff_percent":40.0,"diff":["-array = list(map(int, input().split()))","-if array[0] % array[1] > 0:","-    print(((array[0] \/\/ array[1] + 1) * array[2]))","-else:","-    print(((array[0] \/\/ array[1]) * array[2]))","+n, x, t = list(map(int, input().split()))","+print((0 - -n \/\/ x * t))"],"diff_only_import_comment":false,"measured_runtime_v0":0.1827679622,"measured_runtime_v1":0.0061908547,"runtime_lift":29.5222502437,"key":["s578033438","s457299018"]}
{"user_id":"u153665391","problem_id":"p02268","language":"python","submission_id_v0":"s156684058","submission_id_v1":"s820654012","cpu_time_v0":520,"cpu_time_v1":390,"memory_v0":16712,"memory_v1":16712,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":25.0,"input":"N = int(eval(input()))\n\nS = list(map(int, input().split()))\n\nQ = int(eval(input()))\n\nT = list(map(int, input().split()))\n\n\n\ndef binary_search(target_num, head, tail):\n\n    idx = int((head+tail)\/2)\n\n    if target_num == S[idx]:\n\n        return True\n\n    elif target_num < S[idx]:\n\n        if head == idx:\n\n            return False\n\n        return binary_search(target_num, head, idx-1)\n\n    else:\n\n        if tail == idx:\n\n            return False\n\n        return binary_search(target_num, idx+1, tail)\n\n\n\n\n\nmatch_count = 0\n\nfor target_num in T:\n\n    if binary_search(target_num, 0, len(S)-1):\n\n        match_count += 1\n\n\n\nprint((str(match_count)))\n","target":"N = int(eval(input()))\n\nS = list(map(int, input().split()))\n\nQ = int(eval(input()))\n\nT = list(map(int, input().split()))\n\n\n\ndef binary_search(target_num, head, tail):\n\n    while head <= tail:\n\n        idx = int((head+tail)\/2)\n\n        if target_num == S[idx]:\n\n            return True\n\n        elif target_num < S[idx]:\n\n            tail = idx - 1\n\n        else:\n\n            head = idx + 1\n\n    return False\n\n\n\n\n\nmatch_count = 0\n\nfor target_num in T:\n\n    if binary_search(target_num, 0, len(S)-1):\n\n        match_count += 1\n\n\n\nprint((str(match_count)))\n","code_v0_loc":25,"code_v1_loc":23,"code_v0_num_chars":634,"code_v1_num_chars":541,"code_v0_no_empty_lines":"N = int(eval(input()))\nS = list(map(int, input().split()))\nQ = int(eval(input()))\nT = list(map(int, input().split()))\n\n\ndef binary_search(target_num, head, tail):\n    idx = int((head + tail) \/ 2)\n    if target_num == S[idx]:\n        return True\n    elif target_num < S[idx]:\n        if head == idx:\n            return False\n        return binary_search(target_num, head, idx - 1)\n    else:\n        if tail == idx:\n            return False\n        return binary_search(target_num, idx + 1, tail)\n\n\nmatch_count = 0\nfor target_num in T:\n    if binary_search(target_num, 0, len(S) - 1):\n        match_count += 1\nprint((str(match_count)))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nS = list(map(int, input().split()))\nQ = int(eval(input()))\nT = list(map(int, input().split()))\n\n\ndef binary_search(target_num, head, tail):\n    while head <= tail:\n        idx = int((head + tail) \/ 2)\n        if target_num == S[idx]:\n            return True\n        elif target_num < S[idx]:\n            tail = idx - 1\n        else:\n            head = idx + 1\n    return False\n\n\nmatch_count = 0\nfor target_num in T:\n    if binary_search(target_num, 0, len(S) - 1):\n        match_count += 1\nprint((str(match_count)))\n","code_same":false,"relative_loc_diff_percent":8.0,"diff":["-    idx = int((head + tail) \/ 2)","-    if target_num == S[idx]:","-        return True","-    elif target_num < S[idx]:","-        if head == idx:","-            return False","-        return binary_search(target_num, head, idx - 1)","-    else:","-        if tail == idx:","-            return False","-        return binary_search(target_num, idx + 1, tail)","+    while head <= tail:","+        idx = int((head + tail) \/ 2)","+        if target_num == S[idx]:","+            return True","+        elif target_num < S[idx]:","+            tail = idx - 1","+        else:","+            head = idx + 1","+    return False"],"diff_only_import_comment":false,"measured_runtime_v0":0.3635195796,"measured_runtime_v1":0.2206529045,"runtime_lift":1.6474724429,"key":["s156684058","s820654012"]}
{"user_id":"u924353076","problem_id":"p03796","language":"python","submission_id_v0":"s982585501","submission_id_v1":"s413088188","cpu_time_v0":118,"cpu_time_v1":40,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":66.1,"input":"n=eval(input())\n\nn=int(n)\n\na=1\n\nfor i in range(n):\n\n    a=a*(i+1)\n\n    if a>=pow(10,9)+7:\n\n        a=a%(pow(10,9)+7)\n\nprint(a)","target":"n=int(eval(input()))\n\na=1\n\nfor i in range(1,n+1):\n\n    a*=i\n\n    a %= (10**9+7)\n\nprint(a)","code_v0_loc":8,"code_v1_loc":6,"code_v0_num_chars":120,"code_v1_num_chars":83,"code_v0_no_empty_lines":"n = eval(input())\nn = int(n)\na = 1\nfor i in range(n):\n    a = a * (i + 1)\n    if a >= pow(10, 9) + 7:\n        a = a % (pow(10, 9) + 7)\nprint(a)\n","code_v1_no_empty_lines":"n = int(eval(input()))\na = 1\nfor i in range(1, n + 1):\n    a *= i\n    a %= 10**9 + 7\nprint(a)\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-n = eval(input())","-n = int(n)","+n = int(eval(input()))","-for i in range(n):","-    a = a * (i + 1)","-    if a >= pow(10, 9) + 7:","-        a = a % (pow(10, 9) + 7)","+for i in range(1, n + 1):","+    a *= i","+    a %= 10**9 + 7"],"diff_only_import_comment":false,"measured_runtime_v0":0.4161043401,"measured_runtime_v1":0.2489673834,"runtime_lift":1.6713206943,"key":["s982585501","s413088188"]}
{"user_id":"u724687935","problem_id":"p02537","language":"python","submission_id_v0":"s645565645","submission_id_v1":"s012232464","cpu_time_v0":1422,"cpu_time_v1":1269,"memory_v0":187312,"memory_v1":195352,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.76,"input":"class SegmentTree():\n\n    \"\"\"\n\n    update, get \u3092\u63d0\u4f9b\u3059\u308bSegmentTree\n\n\n\n    Attributes\n\n    ----------\n\n    __n : int\n\n        \u8449\u306e\u6570\u30022 ^ i - 1\n\n    __dot :\n\n        Segment function\n\n    __e: int\n\n        \u5358\u4f4d\u5143\n\n    __node: list\n\n        Segment Tree\n\n    \"\"\"\n\n    def __init__(self, A, dot, e):\n\n        \"\"\"\n\n        Parameters\n\n        ----------\n\n        A : list\n\n            \u5bfe\u8c61\u306e\u914d\u5217\n\n        dot :\n\n            Segment function\n\n        e : int\n\n            \u5358\u4f4d\u5143\n\n        \"\"\"\n\n        n = 2 ** (len(A) - 1).bit_length()\n\n        self.__n = n\n\n        self.__dot = dot\n\n        self.__e = e\n\n        self.__node = [e] * (2 * n)\n\n        for i in range(len(A)):\n\n            self.__node[i + n] = A[i]\n\n        for i in range(n - 1, 0, -1):\n\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[2 * i + 1])\n\n    \n\n    def update(self, i, c):\n\n        i += self.__n\n\n        node = self.__node\n\n        node[i] = c\n\n        while i > 1:\n\n            i \/\/= 2\n\n            node[i] = self.__dot(node[2 * i], node[2 * i + 1])\n\n\n\n    def get(self, l, r):\n\n        vl, vr = self.__e, self.__e\n\n        l += self.__n\n\n        r += self.__n\n\n        while (l < r):\n\n            if l & 1:\n\n                vl = self.__dot(vl, self.__node[l])\n\n                l += 1\n\n            l \/\/= 2\n\n            if r & 1:\n\n                r -= 1\n\n                vr = self.__dot(vr, self.__node[r])\n\n            r \/\/= 2\n\n        return self.__dot(vl, vr)\n\n\n\n\n\nN, K = list(map(int, input().split()))\n\nA = [int(eval(input())) for _ in range(N)]\n\nmax_A = max(A)\n\n\n\nst = SegmentTree([N] * (max_A + 1), min, N)\n\nedge = [set() for _ in range(N)]\n\nfor i, a in enumerate(reversed(A)):\n\n    j = N - 1 - i\n\n    p1 = st.get(a, min(max_A + 1, a + K + 1))\n\n    if p1 < N:\n\n        edge[j].add(p1)\n\n    p2 = st.get(max(0, a - K), a)\n\n    if p2 < N:\n\n        edge[j].add(p2)\n\n    p0 = st.get(a, a + 1)\n\n    if p0 < N:\n\n        edge[j].add(p0)\n\n    st.update(a, j)\n\n\n\ndp = [1] * N\n\nfor i in range(N - 1):\n\n    here = dp[i]\n\n    for ni in edge[i]:\n\n        if ni < N:\n\n            dp[ni] = max(dp[ni], dp[i] + 1)\n\n\n\nprint((max(dp)))\n","target":"class SegmentTree():\n\n    \"\"\"\n\n    update, get \u3092\u63d0\u4f9b\u3059\u308bSegmentTree\n\n\n\n    Attributes\n\n    ----------\n\n    __n : int\n\n        \u8449\u306e\u6570\u30022 ^ i - 1\n\n    __dot :\n\n        Segment function\n\n    __e: int\n\n        \u5358\u4f4d\u5143\n\n    __node: list\n\n        Segment Tree\n\n    \"\"\"\n\n    def __init__(self, A, dot, e):\n\n        \"\"\"\n\n        Parameters\n\n        ----------\n\n        A : list\n\n            \u5bfe\u8c61\u306e\u914d\u5217\n\n        dot :\n\n            Segment function\n\n        e : int\n\n            \u5358\u4f4d\u5143\n\n        \"\"\"\n\n        n = 2 ** (len(A) - 1).bit_length()\n\n        self.__n = n\n\n        self.__dot = dot\n\n        self.__e = e\n\n        self.__node = [e] * (2 * n)\n\n        for i in range(len(A)):\n\n            self.__node[i + n] = A[i]\n\n        for i in range(n - 1, 0, -1):\n\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[2 * i + 1])\n\n    \n\n    def update(self, i, c):\n\n        i += self.__n\n\n        node = self.__node\n\n        node[i] = c\n\n        while i > 1:\n\n            i \/\/= 2\n\n            node[i] = self.__dot(node[2 * i], node[2 * i + 1])\n\n\n\n    def get(self, l, r):\n\n        vl, vr = self.__e, self.__e\n\n        l += self.__n\n\n        r += self.__n\n\n        while (l < r):\n\n            if l & 1:\n\n                vl = self.__dot(vl, self.__node[l])\n\n                l += 1\n\n            l \/\/= 2\n\n            if r & 1:\n\n                r -= 1\n\n                vr = self.__dot(vr, self.__node[r])\n\n            r \/\/= 2\n\n        return self.__dot(vl, vr)\n\n\n\n\n\nN, K = list(map(int, input().split()))\n\nA = [int(eval(input())) for _ in range(N)]\n\nmax_A = max(A)\n\n\n\nst = SegmentTree([N] * (max_A + 1), min, N)\n\nedge = [set() for _ in range(N)]\n\nfor i, a in enumerate(reversed(A)):\n\n    j = N - 1 - i\n\n    p1 = st.get(a, min(max_A + 1, a + K + 1))\n\n    if p1 < N:\n\n        edge[j].add(p1)\n\n    p2 = st.get(max(0, a - K), a)\n\n    if p2 < N:\n\n        edge[j].add(p2)\n\n    st.update(a, j)\n\n\n\ndp = [1] * N\n\nfor i in range(N - 1):\n\n    here = dp[i]\n\n    for ni in edge[i]:\n\n        if ni < N:\n\n            dp[ni] = max(dp[ni], dp[i] + 1)\n\n\n\nprint((max(dp)))\n","code_v0_loc":87,"code_v1_loc":84,"code_v0_num_chars":2089,"code_v1_num_chars":2021,"code_v0_no_empty_lines":"class SegmentTree:\n    \"\"\"\n    update, get \u3092\u63d0\u4f9b\u3059\u308bSegmentTree\n    Attributes\n    ----------\n    __n : int\n        \u8449\u306e\u6570\u30022 ^ i - 1\n    __dot :\n        Segment function\n    __e: int\n        \u5358\u4f4d\u5143\n    __node: list\n        Segment Tree\n    \"\"\"\n\n    def __init__(self, A, dot, e):\n        \"\"\"\n        Parameters\n        ----------\n        A : list\n            \u5bfe\u8c61\u306e\u914d\u5217\n        dot :\n            Segment function\n        e : int\n            \u5358\u4f4d\u5143\n        \"\"\"\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[2 * i + 1])\n\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i \/\/= 2\n            node[i] = self.__dot(node[2 * i], node[2 * i + 1])\n\n    def get(self, l, r):\n        vl, vr = self.__e, self.__e\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l \/\/= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r \/\/= 2\n        return self.__dot(vl, vr)\n\n\nN, K = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor i, a in enumerate(reversed(A)):\n    j = N - 1 - i\n    p1 = st.get(a, min(max_A + 1, a + K + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    p0 = st.get(a, a + 1)\n    if p0 < N:\n        edge[j].add(p0)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint((max(dp)))\n","code_v1_no_empty_lines":"class SegmentTree:\n    \"\"\"\n    update, get \u3092\u63d0\u4f9b\u3059\u308bSegmentTree\n    Attributes\n    ----------\n    __n : int\n        \u8449\u306e\u6570\u30022 ^ i - 1\n    __dot :\n        Segment function\n    __e: int\n        \u5358\u4f4d\u5143\n    __node: list\n        Segment Tree\n    \"\"\"\n\n    def __init__(self, A, dot, e):\n        \"\"\"\n        Parameters\n        ----------\n        A : list\n            \u5bfe\u8c61\u306e\u914d\u5217\n        dot :\n            Segment function\n        e : int\n            \u5358\u4f4d\u5143\n        \"\"\"\n        n = 2 ** (len(A) - 1).bit_length()\n        self.__n = n\n        self.__dot = dot\n        self.__e = e\n        self.__node = [e] * (2 * n)\n        for i in range(len(A)):\n            self.__node[i + n] = A[i]\n        for i in range(n - 1, 0, -1):\n            self.__node[i] = self.__dot(self.__node[2 * i], self.__node[2 * i + 1])\n\n    def update(self, i, c):\n        i += self.__n\n        node = self.__node\n        node[i] = c\n        while i > 1:\n            i \/\/= 2\n            node[i] = self.__dot(node[2 * i], node[2 * i + 1])\n\n    def get(self, l, r):\n        vl, vr = self.__e, self.__e\n        l += self.__n\n        r += self.__n\n        while l < r:\n            if l & 1:\n                vl = self.__dot(vl, self.__node[l])\n                l += 1\n            l \/\/= 2\n            if r & 1:\n                r -= 1\n                vr = self.__dot(vr, self.__node[r])\n            r \/\/= 2\n        return self.__dot(vl, vr)\n\n\nN, K = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(N)]\nmax_A = max(A)\nst = SegmentTree([N] * (max_A + 1), min, N)\nedge = [set() for _ in range(N)]\nfor i, a in enumerate(reversed(A)):\n    j = N - 1 - i\n    p1 = st.get(a, min(max_A + 1, a + K + 1))\n    if p1 < N:\n        edge[j].add(p1)\n    p2 = st.get(max(0, a - K), a)\n    if p2 < N:\n        edge[j].add(p2)\n    st.update(a, j)\ndp = [1] * N\nfor i in range(N - 1):\n    here = dp[i]\n    for ni in edge[i]:\n        if ni < N:\n            dp[ni] = max(dp[ni], dp[i] + 1)\nprint((max(dp)))\n","code_same":false,"relative_loc_diff_percent":3.4482758621,"diff":["-    p0 = st.get(a, a + 1)","-    if p0 < N:","-        edge[j].add(p0)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3663016255,"measured_runtime_v1":0.2110150833,"runtime_lift":1.7359025702,"key":["s645565645","s012232464"]}
{"user_id":"u935184340","problem_id":"p00003","language":"python","submission_id_v0":"s695745765","submission_id_v1":"s444816349","cpu_time_v0":40,"cpu_time_v1":30,"memory_v0":7832,"memory_v1":7708,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":25.0,"input":"import sys\n\nr = []\n\nn = int(eval(input()))\n\nl = sys.stdin.readlines()\n\nfor i in l:\n\n  x, y, z = sorted([x*x for x in list(map(int, i.split()))])\n\n  if x + y == z:\n\n      print(\"YES\")\n\n  else:\n\n      print(\"NO\")","target":"import sys\n\n\n\nn = int(input())\n\nl = sys.stdin.readlines()\n\ns = \"\"\n\nfor i in l:\n\n  x, y, z = sorted(map(lambda x:x*x,map(int, i.split())))\n\n  if x + y == z:\n\n      s += \"YES\\n\"\n\n  else:\n\n      s += \"NO\\n\"\n\n\n\nprint(s,end=\"\")\n","code_v0_loc":10,"code_v1_loc":13,"code_v0_num_chars":201,"code_v1_num_chars":222,"code_v0_no_empty_lines":"import sys\n\nr = []\nn = int(eval(input()))\nl = sys.stdin.readlines()\nfor i in l:\n    x, y, z = sorted([x * x for x in list(map(int, i.split()))])\n    if x + y == z:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n","code_v1_no_empty_lines":"import sys\n\nn = int(input())\nl = sys.stdin.readlines()\ns = \"\"\nfor i in l:\n    x, y, z = sorted(map(lambda x: x * x, map(int, i.split())))\n    if x + y == z:\n        s += \"YES\\n\"\n    else:\n        s += \"NO\\n\"\nprint(s, end=\"\")\n","code_same":false,"relative_loc_diff_percent":23.0769230769,"diff":["-r = []","-n = int(eval(input()))","+n = int(input())","+s = \"\"","-    x, y, z = sorted([x * x for x in list(map(int, i.split()))])","+    x, y, z = sorted(map(lambda x: x * x, map(int, i.split())))","-        print(\"YES\")","+        s += \"YES\\n\"","-        print(\"NO\")","+        s += \"NO\\n\"","+print(s, end=\"\")"],"diff_only_import_comment":false,"measured_runtime_v0":0.3577006006,"measured_runtime_v1":0.2704619627,"runtime_lift":1.3225541848,"key":["s695745765","s444816349"]}
{"user_id":"u887207211","problem_id":"p03086","language":"python","submission_id_v0":"s916999030","submission_id_v1":"s575230730","cpu_time_v0":19,"cpu_time_v1":17,"memory_v0":3188,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.53,"input":"import re\n\nptn = re.compile(r\"(A|C|G|T)*\")\n\n\n\nS = eval(input())\n\n\n\nans = 0\n\nfor i in range(len(S)):\n\n  for j in range(len(S)):\n\n    x = ptn.match(S[i:i+j+1]).group(0)\n\n    if(x):\n\n      ans = max(ans, len(x))\n\nprint(ans)","target":"import sys\n\n\n\nstdin = sys.stdin\n\n\n\nns = lambda : stdin.readline().rstrip()\n\nni = lambda : int(ns())\n\nna = lambda : list(map(int, stdin.readline().split()))\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\ndef check(In):\n\n    return In != \"A\" and In != \"C\" and In != \"G\" and In != \"T\"\n\n\n\ndef main():\n\n    s = ns()\n\n\n\n    count = 0\n\n    ans = 0\n\n    for i in range(len(s)):\n\n        if check(s[i]):\n\n            count = 0\n\n        else:\n\n            count += 1\n\n            ans = max(ans, count)\n\n    print(ans)\n\n\n\nif __name__ == '__main__':\n\n    main()","code_v0_loc":12,"code_v1_loc":27,"code_v0_num_chars":214,"code_v1_num_chars":537,"code_v0_no_empty_lines":"import re\n\nptn = re.compile(r\"(A|C|G|T)*\")\nS = eval(input())\nans = 0\nfor i in range(len(S)):\n    for j in range(len(S)):\n        x = ptn.match(S[i : i + j + 1]).group(0)\n        if x:\n            ans = max(ans, len(x))\nprint(ans)\n","code_v1_no_empty_lines":"import sys\n\nstdin = sys.stdin\nns = lambda: stdin.readline().rstrip()\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nsys.setrecursionlimit(10**7)\n\n\ndef check(In):\n    return In != \"A\" and In != \"C\" and In != \"G\" and In != \"T\"\n\n\ndef main():\n    s = ns()\n    count = 0\n    ans = 0\n    for i in range(len(s)):\n        if check(s[i]):\n            count = 0\n        else:\n            count += 1\n            ans = max(ans, count)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":55.5555555556,"diff":["-import re","+import sys","-ptn = re.compile(r\"(A|C|G|T)*\")","-S = eval(input())","-ans = 0","-for i in range(len(S)):","-    for j in range(len(S)):","-        x = ptn.match(S[i : i + j + 1]).group(0)","-        if x:","-            ans = max(ans, len(x))","-print(ans)","+stdin = sys.stdin","+ns = lambda: stdin.readline().rstrip()","+ni = lambda: int(ns())","+na = lambda: list(map(int, stdin.readline().split()))","+sys.setrecursionlimit(10**7)","+","+","+def check(In):","+    return In != \"A\" and In != \"C\" and In != \"G\" and In != \"T\"","+","+","+def main():","+    s = ns()","+    count = 0","+    ans = 0","+    for i in range(len(s)):","+        if check(s[i]):","+            count = 0","+        else:","+            count += 1","+            ans = max(ans, count)","+    print(ans)","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.3654596429,"measured_runtime_v1":0.2052364919,"runtime_lift":1.7806757436,"key":["s916999030","s575230730"]}
{"user_id":"u489959379","problem_id":"p03371","language":"python","submission_id_v0":"s775348159","submission_id_v1":"s575049266","cpu_time_v0":62,"cpu_time_v1":17,"memory_v0":3316,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":72.58,"input":"a, b, c, x, y = list(map(int, input().split()))\n\nab = c * 2\n\n\n\nres = float(\"inf\")\n\nif a + b <= ab:\n\n    res = x * a + y * b\n\nelse:\n\n    if x == y:\n\n        res = x * ab\n\n    elif x > y:\n\n        for i in range(y, x + 1):\n\n            cost = i * ab + (x - i) * a\n\n            res = min(res, cost)\n\n    else:\n\n        for i in range(x, y + 1):\n\n            cost = i * ab + (y - i) * b\n\n            res = min(res, cost)\n\nprint(res)\n","target":"import sys\n\n\n\nsys.setrecursionlimit(10 ** 7)\n\ninput = sys.stdin.readline\n\nf_inf = float('inf')\n\nmod = 10 ** 9 + 7\n\n\n\n\n\ndef resolve():\n\n    a, b, c, x, y = list(map(int, input().split()))\n\n    c *= 2\n\n    if a + b > c:\n\n        cost1 = max(x, y) * c\n\n        cost2 = min(x, y) * c\n\n        plus = ((y - x) * b) if x < y else (x - y) * a\n\n        res = min(cost1, cost2 + plus)\n\n    else:\n\n        res = x * a + y * b\n\n    print(res)\n\n\n\nif __name__ == '__main__':\n\n    resolve()\n","code_v0_loc":18,"code_v1_loc":22,"code_v0_num_chars":423,"code_v1_num_chars":471,"code_v0_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nab = c * 2\nres = float(\"inf\")\nif a + b <= ab:\n    res = x * a + y * b\nelse:\n    if x == y:\n        res = x * ab\n    elif x > y:\n        for i in range(y, x + 1):\n            cost = i * ab + (x - i) * a\n            res = min(res, cost)\n    else:\n        for i in range(x, y + 1):\n            cost = i * ab + (y - i) * b\n            res = min(res, cost)\nprint(res)\n","code_v1_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10**7)\ninput = sys.stdin.readline\nf_inf = float(\"inf\")\nmod = 10**9 + 7\n\n\ndef resolve():\n    a, b, c, x, y = list(map(int, input().split()))\n    c *= 2\n    if a + b > c:\n        cost1 = max(x, y) * c\n        cost2 = min(x, y) * c\n        plus = ((y - x) * b) if x < y else (x - y) * a\n        res = min(cost1, cost2 + plus)\n    else:\n        res = x * a + y * b\n    print(res)\n\n\nif __name__ == \"__main__\":\n    resolve()\n","code_same":false,"relative_loc_diff_percent":18.1818181818,"diff":["-a, b, c, x, y = list(map(int, input().split()))","-ab = c * 2","-res = float(\"inf\")","-if a + b <= ab:","-    res = x * a + y * b","-else:","-    if x == y:","-        res = x * ab","-    elif x > y:","-        for i in range(y, x + 1):","-            cost = i * ab + (x - i) * a","-            res = min(res, cost)","+import sys","+","+sys.setrecursionlimit(10**7)","+input = sys.stdin.readline","+f_inf = float(\"inf\")","+mod = 10**9 + 7","+","+","+def resolve():","+    a, b, c, x, y = list(map(int, input().split()))","+    c *= 2","+    if a + b > c:","+        cost1 = max(x, y) * c","+        cost2 = min(x, y) * c","+        plus = ((y - x) * b) if x < y else (x - y) * a","+        res = min(cost1, cost2 + plus)","-        for i in range(x, y + 1):","-            cost = i * ab + (y - i) * b","-            res = min(res, cost)","-print(res)","+        res = x * a + y * b","+    print(res)","+","+","+if __name__ == \"__main__\":","+    resolve()"],"diff_only_import_comment":false,"measured_runtime_v0":0.3014842281,"measured_runtime_v1":0.1645996099,"runtime_lift":1.8316217662,"key":["s775348159","s575049266"]}
{"user_id":"u243699903","problem_id":"p03371","language":"python","submission_id_v0":"s088381244","submission_id_v1":"s357905210","cpu_time_v0":104,"cpu_time_v1":17,"memory_v0":3064,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":83.65,"input":"a,b,c,x,y=list(map(int,input().split()))\n\n\n\nans=a*x+b*y\n\nfor ci in range(max(x,y)+1):\n\n    sumc = 2*ci*c\n\n    sumc += (x-ci)*a if (x-ci)>0 else 0\n\n    sumc += (y-ci)*b if (y-ci)>0 else 0\n\n    ans=min(ans,sumc)\n\n\n\nprint(ans)","target":"a,b,c,x,y=list(map(int,input().split()))\n\nans=a*x+b*y\n\nif x==y:\n\n    ans=min(ans,2*x*c)\n\nelif x>y:\n\n    ans=min(ans,a*(x-y)+2*y*c)\n\n    ans=min(ans,2*x*c)\n\nelse:\n\n    ans=min(ans,b*(y-x)+2*x*c)\n\n    ans=min(ans,2*y*c)\n\nprint(ans)","code_v0_loc":10,"code_v1_loc":11,"code_v0_num_chars":217,"code_v1_num_chars":223,"code_v0_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nans = a * x + b * y\nfor ci in range(max(x, y) + 1):\n    sumc = 2 * ci * c\n    sumc += (x - ci) * a if (x - ci) > 0 else 0\n    sumc += (y - ci) * b if (y - ci) > 0 else 0\n    ans = min(ans, sumc)\nprint(ans)\n","code_v1_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nans = a * x + b * y\nif x == y:\n    ans = min(ans, 2 * x * c)\nelif x > y:\n    ans = min(ans, a * (x - y) + 2 * y * c)\n    ans = min(ans, 2 * x * c)\nelse:\n    ans = min(ans, b * (y - x) + 2 * x * c)\n    ans = min(ans, 2 * y * c)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":9.0909090909,"diff":["-for ci in range(max(x, y) + 1):","-    sumc = 2 * ci * c","-    sumc += (x - ci) * a if (x - ci) > 0 else 0","-    sumc += (y - ci) * b if (y - ci) > 0 else 0","-    ans = min(ans, sumc)","+if x == y:","+    ans = min(ans, 2 * x * c)","+elif x > y:","+    ans = min(ans, a * (x - y) + 2 * y * c)","+    ans = min(ans, 2 * x * c)","+else:","+    ans = min(ans, b * (y - x) + 2 * x * c)","+    ans = min(ans, 2 * y * c)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2025436199,"measured_runtime_v1":0.1559800074,"runtime_lift":1.2985229532,"key":["s088381244","s357905210"]}
{"user_id":"u260980560","problem_id":"p01105","language":"python","submission_id_v0":"s936098014","submission_id_v1":"s480075396","cpu_time_v0":50,"cpu_time_v1":40,"memory_v0":8604,"memory_v1":8508,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":20.0,"input":"a=65280; b=61680; c=52428; d=43690; e=65535\n\nfrom heapq import heappush, heappop\n\nbase = [a, b, c, d, e, 0]\n\nQ = [(1, el) for el in base]\n\nL = {el: 1 for el in base}\n\nH = []\n\nget = L.get\n\npush = H.append\n\nwhile Q:\n\n    l, p = heappop(Q)\n\n    if L[p] < l: continue\n\n    if l+1 < get(p ^ e, 17):\n\n        L[p ^ e] = l+1\n\n        if l+1 < 16: heappush(Q, (l+1, p ^ e))\n\n    if l+3 < 16:\n\n        for q, r in H:\n\n            if l+r+3 <= 16:\n\n                if l+r+3 < get(p & q, 17):\n\n                    L[p & q] = l+r+3\n\n                    if l+r+3 < 16: heappush(Q, (l+r+3, p & q))\n\n                if l+r+3 < get(p ^ q, 17):\n\n                    L[p ^ q] = l+r+3\n\n                    if l+r+3 < 16: heappush(Q, (l+r+3, p ^ q))\n\n            else: break\n\n    if l < 7: push((p, l))\n\nprint(*map(L.__getitem__, eval(\"e&%s\"%\",e&\".join(open(0).read().replace(*\"-~\").replace(*\"*&\").replace(*\"1e\").split()[:-1]))),sep='\\n')\n","target":"a=65280; b=61680; c=52428; d=43690; e=65535\n\nfrom heapq import heappush, heappop\n\nQ = [(1, a), (1, b), (1, c), (1, d)]\n\nL = {a: 1, b: 1, c: 1, d: 1, e: 1, e: 1, 0: 1}\n\nH = []\n\nget = L.get\n\npush = H.append\n\nwhile Q:\n\n    l, p = heappop(Q)\n\n    if L[p] < l: continue\n\n    if l+1 < get(p ^ e, 17):\n\n        L[p ^ e] = l+1\n\n        l < 15 and heappush(Q, (l+1, p ^ e))\n\n    if l < 13:\n\n        li = 13-l; l3 = 3+l\n\n        for q, r in H:\n\n            if r <= li:\n\n                k = p & q\n\n                if r < get(k, 17)-l3:\n\n                    L[k] = l3+r\n\n                    r < li and heappush(Q, (l3+r, k))\n\n                k = p ^ q\n\n                if r < get(k, 17)-l3:\n\n                    L[k] = l3+r\n\n                    r < li and heappush(Q, (l3+r, k))\n\n            else: break\n\n    if l < 7: push((p, l))\n\nprint(*map(L.__getitem__, eval(\"e&\"+\",e&\".join(open(0).read().replace(*\"-~\").replace(*\"*&\").replace(*\"1e\").split()[:-1]))),sep='\\n')\n","code_v0_loc":26,"code_v1_loc":28,"code_v0_num_chars":917,"code_v1_num_chars":953,"code_v0_no_empty_lines":"a = 65280\nb = 61680\nc = 52428\nd = 43690\ne = 65535\nfrom heapq import heappush, heappop\n\nbase = [a, b, c, d, e, 0]\nQ = [(1, el) for el in base]\nL = {el: 1 for el in base}\nH = []\nget = L.get\npush = H.append\nwhile Q:\n    l, p = heappop(Q)\n    if L[p] < l:\n        continue\n    if l + 1 < get(p ^ e, 17):\n        L[p ^ e] = l + 1\n        if l + 1 < 16:\n            heappush(Q, (l + 1, p ^ e))\n    if l + 3 < 16:\n        for q, r in H:\n            if l + r + 3 <= 16:\n                if l + r + 3 < get(p & q, 17):\n                    L[p & q] = l + r + 3\n                    if l + r + 3 < 16:\n                        heappush(Q, (l + r + 3, p & q))\n                if l + r + 3 < get(p ^ q, 17):\n                    L[p ^ q] = l + r + 3\n                    if l + r + 3 < 16:\n                        heappush(Q, (l + r + 3, p ^ q))\n            else:\n                break\n    if l < 7:\n        push((p, l))\nprint(\n    *map(\n        L.__getitem__,\n        eval(\n            \"e&%s\"\n            % \",e&\".join(\n                open(0).read().replace(*\"-~\").replace(*\"*&\").replace(*\"1e\").split()[:-1]\n            )\n        ),\n    ),\n    sep=\"\\n\"\n)\n","code_v1_no_empty_lines":"a = 65280\nb = 61680\nc = 52428\nd = 43690\ne = 65535\nfrom heapq import heappush, heappop\n\nQ = [(1, a), (1, b), (1, c), (1, d)]\nL = {a: 1, b: 1, c: 1, d: 1, e: 1, e: 1, 0: 1}\nH = []\nget = L.get\npush = H.append\nwhile Q:\n    l, p = heappop(Q)\n    if L[p] < l:\n        continue\n    if l + 1 < get(p ^ e, 17):\n        L[p ^ e] = l + 1\n        l < 15 and heappush(Q, (l + 1, p ^ e))\n    if l < 13:\n        li = 13 - l\n        l3 = 3 + l\n        for q, r in H:\n            if r <= li:\n                k = p & q\n                if r < get(k, 17) - l3:\n                    L[k] = l3 + r\n                    r < li and heappush(Q, (l3 + r, k))\n                k = p ^ q\n                if r < get(k, 17) - l3:\n                    L[k] = l3 + r\n                    r < li and heappush(Q, (l3 + r, k))\n            else:\n                break\n    if l < 7:\n        push((p, l))\nprint(\n    *map(\n        L.__getitem__,\n        eval(\n            \"e&\"\n            + \",e&\".join(\n                open(0).read().replace(*\"-~\").replace(*\"*&\").replace(*\"1e\").split()[:-1]\n            )\n        ),\n    ),\n    sep=\"\\n\"\n)\n","code_same":false,"relative_loc_diff_percent":7.1428571429,"diff":["-base = [a, b, c, d, e, 0]","-Q = [(1, el) for el in base]","-L = {el: 1 for el in base}","+Q = [(1, a), (1, b), (1, c), (1, d)]","+L = {a: 1, b: 1, c: 1, d: 1, e: 1, e: 1, 0: 1}","-        if l + 1 < 16:","-            heappush(Q, (l + 1, p ^ e))","-    if l + 3 < 16:","+        l < 15 and heappush(Q, (l + 1, p ^ e))","+    if l < 13:","+        li = 13 - l","+        l3 = 3 + l","-            if l + r + 3 <= 16:","-                if l + r + 3 < get(p & q, 17):","-                    L[p & q] = l + r + 3","-                    if l + r + 3 < 16:","-                        heappush(Q, (l + r + 3, p & q))","-                if l + r + 3 < get(p ^ q, 17):","-                    L[p ^ q] = l + r + 3","-                    if l + r + 3 < 16:","-                        heappush(Q, (l + r + 3, p ^ q))","+            if r <= li:","+                k = p & q","+                if r < get(k, 17) - l3:","+                    L[k] = l3 + r","+                    r < li and heappush(Q, (l3 + r, k))","+                k = p ^ q","+                if r < get(k, 17) - l3:","+                    L[k] = l3 + r","+                    r < li and heappush(Q, (l3 + r, k))","-            \"e&%s\"","-            % \",e&\".join(","+            \"e&\"","+            + \",e&\".join("],"diff_only_import_comment":false,"measured_runtime_v0":0.4434673564,"measured_runtime_v1":0.3305070457,"runtime_lift":1.3417788278,"key":["s936098014","s480075396"]}
{"user_id":"u940568210","problem_id":"p03273","language":"python","submission_id_v0":"s276670685","submission_id_v1":"s252609642","cpu_time_v0":167,"cpu_time_v1":19,"memory_v0":13884,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.62,"input":"import numpy as np\n\n\n\nh, w = tuple(map(int, input().split()))\n\nmatrix = np.zeros((h, w), dtype=bool)\n\nfor i in range(h):\n\n    row = np.array(list(input()))\n\n    matrix[i, :] = row == \".\"\n\n\n\nfor i in range(h)[::-1]:\n\n    if np.all(matrix[i, :]):\n\n        matrix = np.delete(matrix, i, 0)\n\n\n\nfor i in range(w)[::-1]:\n\n    if np.all(matrix[:, i]):\n\n        matrix = np.delete(matrix, i, 1)\n\n\n\nmatrix = np.where(matrix, \".\", \"#\")\n\nfor row in matrix:\n\n    for e in row:\n\n        print(e, end=\"\")\n\n    print()\n","target":"# h w\u306e\u8aad\u307f\u8fbc\u307f\n\nh, w = list(map(int, input().split()))\n\n# \u884c\u5217\u4f5c\u6210\n\nmat = [eval(input()) for _ in range(h)]\n\n\n\n# #\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u884c\u3092\u524a\u9664\n\n[mat.remove(row) for row in mat[::-1] if (\"#\" not in row)]\n\n# #\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\n\nshowCol = [i for i in range(w) if \"#\" in [row[i] for row in mat]]\n\n\n\n# \u8868\u793a\n\nprint((\"\\n\".join([\"\".join([row[c] for c in showCol]) for row in mat])))\n","code_v0_loc":21,"code_v1_loc":12,"code_v0_num_chars":504,"code_v1_num_chars":336,"code_v0_no_empty_lines":"import numpy as np\n\nh, w = tuple(map(int, input().split()))\nmatrix = np.zeros((h, w), dtype=bool)\nfor i in range(h):\n    row = np.array(list(input()))\n    matrix[i, :] = row == \".\"\nfor i in range(h)[::-1]:\n    if np.all(matrix[i, :]):\n        matrix = np.delete(matrix, i, 0)\nfor i in range(w)[::-1]:\n    if np.all(matrix[:, i]):\n        matrix = np.delete(matrix, i, 1)\nmatrix = np.where(matrix, \".\", \"#\")\nfor row in matrix:\n    for e in row:\n        print(e, end=\"\")\n    print()\n","code_v1_no_empty_lines":"# h w\u306e\u8aad\u307f\u8fbc\u307f\nh, w = list(map(int, input().split()))\n# \u884c\u5217\u4f5c\u6210\nmat = [eval(input()) for _ in range(h)]\n# #\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u884c\u3092\u524a\u9664\n[mat.remove(row) for row in mat[::-1] if (\"#\" not in row)]\n# #\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97\nshowCol = [i for i in range(w) if \"#\" in [row[i] for row in mat]]\n# \u8868\u793a\nprint((\"\\n\".join([\"\".join([row[c] for c in showCol]) for row in mat])))\n","code_same":false,"relative_loc_diff_percent":42.8571428571,"diff":["-import numpy as np","-","-h, w = tuple(map(int, input().split()))","-matrix = np.zeros((h, w), dtype=bool)","-for i in range(h):","-    row = np.array(list(input()))","-    matrix[i, :] = row == \".\"","-for i in range(h)[::-1]:","-    if np.all(matrix[i, :]):","-        matrix = np.delete(matrix, i, 0)","-for i in range(w)[::-1]:","-    if np.all(matrix[:, i]):","-        matrix = np.delete(matrix, i, 1)","-matrix = np.where(matrix, \".\", \"#\")","-for row in matrix:","-    for e in row:","-        print(e, end=\"\")","-    print()","+# h w\u306e\u8aad\u307f\u8fbc\u307f","+h, w = list(map(int, input().split()))","+# \u884c\u5217\u4f5c\u6210","+mat = [eval(input()) for _ in range(h)]","+# #\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u884c\u3092\u524a\u9664","+[mat.remove(row) for row in mat[::-1] if (\"#\" not in row)]","+# #\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u53d6\u5f97","+showCol = [i for i in range(w) if \"#\" in [row[i] for row in mat]]","+# \u8868\u793a","+print((\"\\n\".join([\"\".join([row[c] for c in showCol]) for row in mat])))"],"diff_only_import_comment":false,"measured_runtime_v0":1.5763139927,"measured_runtime_v1":0.2879686127,"runtime_lift":5.4739090419,"key":["s276670685","s252609642"]}
{"user_id":"u579699847","problem_id":"p03273","language":"python","submission_id_v0":"s947664162","submission_id_v1":"s915143710","cpu_time_v0":285,"cpu_time_v1":21,"memory_v0":20888,"memory_v1":4468,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":92.63,"input":"import numpy as np,sys\n\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\n\ndef S(): return sys.stdin.readline().rstrip()\n\nH,W = LI()\n\na = np.array([[s for s in S()] for _ in range(H)])\n\na = a[(a=='#').any(axis=1)]\n\na = a.T\n\na = a[(a=='#').any(axis=1)]\n\na = a.T.tolist()\n\nfor x in a:\n\n    print(*x,sep='')\n","target":"import sys\n\ndef LI(): return list(map(int,sys.stdin.readline().rstrip().split()))\n\ndef S(): return sys.stdin.readline().rstrip()\n\nH,W = LI()\n\na = [S() for _ in range(H)]\n\na2,a3 = [],[]\n\nfor x in a:\n\n    if '#' in x:\n\n        a2.append(x)\n\nfor y in zip(*a2):\n\n    if '#' in y:\n\n        a3.append(y)\n\nfor z in zip(*a3):\n\n    print(*z,sep='')\n","code_v0_loc":11,"code_v1_loc":14,"code_v0_num_chars":325,"code_v1_num_chars":340,"code_v0_no_empty_lines":"import numpy as np, sys\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\n\ndef S():\n    return sys.stdin.readline().rstrip()\n\n\nH, W = LI()\na = np.array([[s for s in S()] for _ in range(H)])\na = a[(a == \"#\").any(axis=1)]\na = a.T\na = a[(a == \"#\").any(axis=1)]\na = a.T.tolist()\nfor x in a:\n    print(*x, sep=\"\")\n","code_v1_no_empty_lines":"import sys\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\n\ndef S():\n    return sys.stdin.readline().rstrip()\n\n\nH, W = LI()\na = [S() for _ in range(H)]\na2, a3 = [], []\nfor x in a:\n    if \"#\" in x:\n        a2.append(x)\nfor y in zip(*a2):\n    if \"#\" in y:\n        a3.append(y)\nfor z in zip(*a3):\n    print(*z, sep=\"\")\n","code_same":false,"relative_loc_diff_percent":21.4285714286,"diff":["-import numpy as np, sys","+import sys","-a = np.array([[s for s in S()] for _ in range(H)])","-a = a[(a == \"#\").any(axis=1)]","-a = a.T","-a = a[(a == \"#\").any(axis=1)]","-a = a.T.tolist()","+a = [S() for _ in range(H)]","+a2, a3 = [], []","-    print(*x, sep=\"\")","+    if \"#\" in x:","+        a2.append(x)","+for y in zip(*a2):","+    if \"#\" in y:","+        a3.append(y)","+for z in zip(*a3):","+    print(*z, sep=\"\")"],"diff_only_import_comment":false,"measured_runtime_v0":1.9641072226,"measured_runtime_v1":0.3075638639,"runtime_lift":6.3860142655,"key":["s947664162","s915143710"]}
{"user_id":"u638795007","problem_id":"p04020","language":"python","submission_id_v0":"s043977447","submission_id_v1":"s372001933","cpu_time_v0":265,"cpu_time_v1":111,"memory_v0":44252,"memory_v1":8004,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":58.11,"input":"def examB():\n\n    N = I(); A = [I() for _ in range(N)]\n\n    ans = 0; cur= 0\n\n    for i in A:\n\n        if i==0:\n\n            ans += cur\/\/2\n\n            cur = 0\n\n        else:\n\n            cur += i\n\n    ans += cur \/\/ 2\n\n    print(ans)\n\n    return\n\n\n\nimport sys,copy,bisect,itertools,heapq,math\n\nfrom heapq import heappop,heappush,heapify\n\nfrom collections import Counter,defaultdict,deque\n\ndef I(): return int(sys.stdin.readline())\n\ndef LI(): return list(map(int,sys.stdin.readline().split()))\n\ndef LSI(): return list(map(str,sys.stdin.readline().split()))\n\ndef LS(): return sys.stdin.readline().split()\n\ndef SI(): return sys.stdin.readline().strip()\n\nmod = 10**9 + 7\n\ninf = float('inf')\n\n\n\nif __name__ == '__main__':\n\n    examB()\n","target":"def examA():\n\n    S = SI()\n\n    if \"W\" in S and not \"E\" in S:\n\n        print(\"No\")\n\n    elif \"E\" in S and not \"W\" in S:\n\n        print(\"No\")\n\n    elif \"N\" in S and not \"S\" in S:\n\n        print(\"No\")\n\n    elif \"S\" in S and not \"N\" in S:\n\n        print(\"No\")\n\n    else:\n\n        print(\"Yes\")\n\n    return\n\n\n\ndef examB():\n\n    N = I()\n\n    A = [I()for _ in range(N)]\n\n    ans = 0\n\n    for i in range(N-1):\n\n        ans += A[i]\/\/2\n\n        if A[i]%2 and A[i+1]>=1:\n\n            ans += 1\n\n            A[i+1] -= 1\n\n    ans += A[N-1]\/\/2\n\n    print(ans)\n\n    return\n\n\n\ndef examC():\n\n    ans = 0\n\n    print(ans)\n\n    return\n\n\n\ndef examD():\n\n    N = I()\n\n    S = [I()for _ in range(N)]\n\n\n\n    ans = 0\n\n    print(ans)\n\n    return\n\n\n\ndef examE():\n\n    ans = 0\n\n    print(ans)\n\n    return\n\n\n\ndef examF():\n\n    ans = 0\n\n    print(ans)\n\n    return\n\n\n\nimport sys,bisect,itertools,heapq,math,random\n\nfrom copy import deepcopy\n\nfrom heapq import heappop,heappush,heapify\n\nfrom collections import Counter,defaultdict,deque\n\ndef I(): return int(sys.stdin.readline())\n\ndef LI(): return list(map(int,sys.stdin.readline().split()))\n\ndef LSI(): return list(map(str,sys.stdin.readline().split()))\n\ndef LS(): return sys.stdin.readline().split()\n\ndef SI(): return sys.stdin.readline().strip()\n\nglobal mod,mod2,inf,alphabet,_ep\n\nmod = 10**9 + 7\n\nmod2 = 998244353\n\ninf = 10**18\n\n_ep = 10**(-12)\n\nalphabet = [chr(ord('a') + i) for i in range(26)]\n\n\n\nsys.setrecursionlimit(10**6)\n\n\n\nif __name__ == '__main__':\n\n    examB()\n\n\n\n\"\"\"\n\n\n\n\"\"\"","code_v0_loc":26,"code_v1_loc":74,"code_v0_num_chars":729,"code_v1_num_chars":1504,"code_v0_no_empty_lines":"def examB():\n    N = I()\n    A = [I() for _ in range(N)]\n    ans = 0\n    cur = 0\n    for i in A:\n        if i == 0:\n            ans += cur \/\/ 2\n            cur = 0\n        else:\n            cur += i\n    ans += cur \/\/ 2\n    print(ans)\n    return\n\n\nimport sys, copy, bisect, itertools, heapq, math\nfrom heapq import heappop, heappush, heapify\nfrom collections import Counter, defaultdict, deque\n\n\ndef I():\n    return int(sys.stdin.readline())\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef LSI():\n    return list(map(str, sys.stdin.readline().split()))\n\n\ndef LS():\n    return sys.stdin.readline().split()\n\n\ndef SI():\n    return sys.stdin.readline().strip()\n\n\nmod = 10**9 + 7\ninf = float(\"inf\")\nif __name__ == \"__main__\":\n    examB()\n","code_v1_no_empty_lines":"def examA():\n    S = SI()\n    if \"W\" in S and not \"E\" in S:\n        print(\"No\")\n    elif \"E\" in S and not \"W\" in S:\n        print(\"No\")\n    elif \"N\" in S and not \"S\" in S:\n        print(\"No\")\n    elif \"S\" in S and not \"N\" in S:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n    return\n\n\ndef examB():\n    N = I()\n    A = [I() for _ in range(N)]\n    ans = 0\n    for i in range(N - 1):\n        ans += A[i] \/\/ 2\n        if A[i] % 2 and A[i + 1] >= 1:\n            ans += 1\n            A[i + 1] -= 1\n    ans += A[N - 1] \/\/ 2\n    print(ans)\n    return\n\n\ndef examC():\n    ans = 0\n    print(ans)\n    return\n\n\ndef examD():\n    N = I()\n    S = [I() for _ in range(N)]\n    ans = 0\n    print(ans)\n    return\n\n\ndef examE():\n    ans = 0\n    print(ans)\n    return\n\n\ndef examF():\n    ans = 0\n    print(ans)\n    return\n\n\nimport sys, bisect, itertools, heapq, math, random\nfrom copy import deepcopy\nfrom heapq import heappop, heappush, heapify\nfrom collections import Counter, defaultdict, deque\n\n\ndef I():\n    return int(sys.stdin.readline())\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef LSI():\n    return list(map(str, sys.stdin.readline().split()))\n\n\ndef LS():\n    return sys.stdin.readline().split()\n\n\ndef SI():\n    return sys.stdin.readline().strip()\n\n\nglobal mod, mod2, inf, alphabet, _ep\nmod = 10**9 + 7\nmod2 = 998244353\ninf = 10**18\n_ep = 10 ** (-12)\nalphabet = [chr(ord(\"a\") + i) for i in range(26)]\nsys.setrecursionlimit(10**6)\nif __name__ == \"__main__\":\n    examB()\n\"\"\"\n\"\"\"\n","code_same":false,"relative_loc_diff_percent":64.8648648649,"diff":["+def examA():","+    S = SI()","+    if \"W\" in S and not \"E\" in S:","+        print(\"No\")","+    elif \"E\" in S and not \"W\" in S:","+        print(\"No\")","+    elif \"N\" in S and not \"S\" in S:","+        print(\"No\")","+    elif \"S\" in S and not \"N\" in S:","+        print(\"No\")","+    else:","+        print(\"Yes\")","+    return","+","+","-    cur = 0","-    for i in A:","-        if i == 0:","-            ans += cur \/\/ 2","-            cur = 0","-        else:","-            cur += i","-    ans += cur \/\/ 2","+    for i in range(N - 1):","+        ans += A[i] \/\/ 2","+        if A[i] % 2 and A[i + 1] >= 1:","+            ans += 1","+            A[i + 1] -= 1","+    ans += A[N - 1] \/\/ 2","-import sys, copy, bisect, itertools, heapq, math","+def examC():","+    ans = 0","+    print(ans)","+    return","+","+","+def examD():","+    N = I()","+    S = [I() for _ in range(N)]","+    ans = 0","+    print(ans)","+    return","+","+","+def examE():","+    ans = 0","+    print(ans)","+    return","+","+","+def examF():","+    ans = 0","+    print(ans)","+    return","+","+","+import sys, bisect, itertools, heapq, math, random","+from copy import deepcopy","+global mod, mod2, inf, alphabet, _ep","-inf = float(\"inf\")","+mod2 = 998244353","+inf = 10**18","+_ep = 10 ** (-12)","+alphabet = [chr(ord(\"a\") + i) for i in range(26)]","+sys.setrecursionlimit(10**6)","+\"\"\"","+\"\"\""],"diff_only_import_comment":false,"measured_runtime_v0":0.1928541586,"measured_runtime_v1":0.006450581,"runtime_lift":29.8971764609,"key":["s043977447","s372001933"]}
{"user_id":"u193598069","problem_id":"p03544","language":"python","submission_id_v0":"s403516424","submission_id_v1":"s258691406","cpu_time_v0":27,"cpu_time_v1":17,"memory_v0":10740,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":37.04,"input":"N = int(eval(input()))\n\nL = [ 0 ] * 1000000\n\n\n\nL[0] = 2\n\nL[1] = 1\n\n\n\nfor i in range(2, N+1):\n\n  L[i] = L[i-2] + L[i-1]\n\n\n\nprint((L[N]))\n","target":"N = int(eval(input()))\n\nL = [ 0 ] * (N+1)\n\n\n\nL[0] = 2\n\nL[1] = 1\n\n\n\nfor i in range(2, N+1):\n\n  L[i] = L[i-2] + L[i-1]\n\n\n\nprint((L[N]))\n","code_v0_loc":10,"code_v1_loc":10,"code_v0_num_chars":129,"code_v1_num_chars":127,"code_v0_no_empty_lines":"N = int(eval(input()))\nL = [0] * 1000000\nL[0] = 2\nL[1] = 1\nfor i in range(2, N + 1):\n    L[i] = L[i - 2] + L[i - 1]\nprint((L[N]))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nL = [0] * (N + 1)\nL[0] = 2\nL[1] = 1\nfor i in range(2, N + 1):\n    L[i] = L[i - 2] + L[i - 1]\nprint((L[N]))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-L = [0] * 1000000","+L = [0] * (N + 1)"],"diff_only_import_comment":false,"measured_runtime_v0":0.4811118691,"measured_runtime_v1":0.3226976706,"runtime_lift":1.4909059249,"key":["s403516424","s258691406"]}
{"user_id":"u218834617","problem_id":"p03013","language":"python","submission_id_v0":"s048931274","submission_id_v1":"s960526895","cpu_time_v0":127,"cpu_time_v1":59,"memory_v0":17264,"memory_v1":17228,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":53.54,"input":"import sys\n\nN,M=list(map(int,input().split()))\n\nS=set(map(int,sys.stdin))\n\n\n\na,b=0,1\n\nfor i in range(1,N+1):\n\n    if i in S:\n\n        a,b=b,0\n\n    else:\n\n        a,b=b,a+b\n\n\n\nprint((b%(10**9+7)))\n","target":"import sys\n\n\n\nN,M=list(map(int,input().split()))\n\nbad=set(map(int,sys.stdin))\n\nMOD=10**9+7\n\n\n\na,b=0,1\n\nfor i in range(1,N+1):\n\n    if i in bad:\n\n        a,b=b,0\n\n        if a==0:\n\n            break\n\n    else:\n\n        a,b=b,(a+b)%MOD\n\n\n\nprint(b)\n","code_v0_loc":12,"code_v1_loc":16,"code_v0_num_chars":188,"code_v1_num_chars":240,"code_v0_no_empty_lines":"import sys\n\nN, M = list(map(int, input().split()))\nS = set(map(int, sys.stdin))\na, b = 0, 1\nfor i in range(1, N + 1):\n    if i in S:\n        a, b = b, 0\n    else:\n        a, b = b, a + b\nprint((b % (10**9 + 7)))\n","code_v1_no_empty_lines":"import sys\n\nN, M = list(map(int, input().split()))\nbad = set(map(int, sys.stdin))\nMOD = 10**9 + 7\na, b = 0, 1\nfor i in range(1, N + 1):\n    if i in bad:\n        a, b = b, 0\n        if a == 0:\n            break\n    else:\n        a, b = b, (a + b) % MOD\nprint(b)\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-S = set(map(int, sys.stdin))","+bad = set(map(int, sys.stdin))","+MOD = 10**9 + 7","-    if i in S:","+    if i in bad:","+        if a == 0:","+            break","-        a, b = b, a + b","-print((b % (10**9 + 7)))","+        a, b = b, (a + b) % MOD","+print(b)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3212681165,"measured_runtime_v1":0.212405349,"runtime_lift":1.5125236626,"key":["s048931274","s960526895"]}
{"user_id":"u094191970","problem_id":"p02982","language":"python","submission_id_v0":"s464229180","submission_id_v1":"s820370642","cpu_time_v0":152,"cpu_time_v1":17,"memory_v0":12540,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.82,"input":"import numpy as np\n\nimport itertools\n\n\n\nn, d = list(map(int, input().split()))\n\nx = [list(map(int, input().split())) for i in range(n)]\n\n\n\ncnt = 0\n\nfor i1, i2 in itertools.product(list(range(n)), list(range(n))):\n\n    if i1 == i2:\n\n        continue\n\n    x1 = np.array(x[i1])\n\n    x2 = np.array(x[i2])\n\n    d = sum(list([x ** 2 for x in list(x1 - x2)])) ** 0.5\n\n    if d == int(d):\n\n        cnt += 1\n\n\n\nprint((int(cnt \/ 2)))","target":"n,d=list(map(int,input().split()))\n\nl=[list(map(int,input().split())) for i in range(n)]\n\n\n\ncnt=0\n\nfor i in range(n-1):\n\n for j in range(i+1,n):\n\n  l1=l[i]\n\n  l2=l[j]\n\n  sum=0\n\n  for y,z in zip(l1,l2):\n\n   sum+=(y-z)**2\n\n  dist=sum**0.5\n\n  if dist==int(dist):\n\n   cnt+=1\n\nprint(cnt)","code_v0_loc":17,"code_v1_loc":15,"code_v0_num_chars":409,"code_v1_num_chars":276,"code_v0_no_empty_lines":"import numpy as np\nimport itertools\n\nn, d = list(map(int, input().split()))\nx = [list(map(int, input().split())) for i in range(n)]\ncnt = 0\nfor i1, i2 in itertools.product(list(range(n)), list(range(n))):\n    if i1 == i2:\n        continue\n    x1 = np.array(x[i1])\n    x2 = np.array(x[i2])\n    d = sum(list([x**2 for x in list(x1 - x2)])) ** 0.5\n    if d == int(d):\n        cnt += 1\nprint((int(cnt \/ 2)))\n","code_v1_no_empty_lines":"n, d = list(map(int, input().split()))\nl = [list(map(int, input().split())) for i in range(n)]\ncnt = 0\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        l1 = l[i]\n        l2 = l[j]\n        sum = 0\n        for y, z in zip(l1, l2):\n            sum += (y - z) ** 2\n        dist = sum**0.5\n        if dist == int(dist):\n            cnt += 1\nprint(cnt)\n","code_same":false,"relative_loc_diff_percent":11.7647058824,"diff":["-import numpy as np","-import itertools","-","-x = [list(map(int, input().split())) for i in range(n)]","+l = [list(map(int, input().split())) for i in range(n)]","-for i1, i2 in itertools.product(list(range(n)), list(range(n))):","-    if i1 == i2:","-        continue","-    x1 = np.array(x[i1])","-    x2 = np.array(x[i2])","-    d = sum(list([x**2 for x in list(x1 - x2)])) ** 0.5","-    if d == int(d):","-        cnt += 1","-print((int(cnt \/ 2)))","+for i in range(n - 1):","+    for j in range(i + 1, n):","+        l1 = l[i]","+        l2 = l[j]","+        sum = 0","+        for y, z in zip(l1, l2):","+            sum += (y - z) ** 2","+        dist = sum**0.5","+        if dist == int(dist):","+            cnt += 1","+print(cnt)"],"diff_only_import_comment":false,"measured_runtime_v0":1.3349185867,"measured_runtime_v1":0.2063240778,"runtime_lift":6.4700087387,"key":["s464229180","s820370642"]}
{"user_id":"u813384600","problem_id":"p01138","language":"python","submission_id_v0":"s409826221","submission_id_v1":"s148489336","cpu_time_v0":6790,"cpu_time_v1":260,"memory_v0":9596,"memory_v1":7608,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":96.17,"input":"import re\n\n\n\nwhile True:\n\n    n = int(input())\n\n    if n == 0:\n\n        break\n\n    l = [0] * (24*60*60+1)\n\n    for _ in range(n):\n\n        h1,m1,s1,h2,m2,s2 = list(map(int, re.split(':| ', input())))\n\n        l[h1*60*60 + m1*60 + s1] += 1\n\n        l[h2*60*60 + m2*60 + s2] -= 1\n\n    r = 0\n\n    for i in range(24*60*60):\n\n        l[i+1] += l[i]\n\n        r = max(r, l[i+1])\n\n    print(r)","target":"while True:\n\n    n = int(input())\n\n    if n == 0:\n\n        break\n\n    l = []\n\n    for _ in range(n):\n\n        hms1, hms2 = input().split()\n\n        l.append((hms1, True))\n\n        l.append((hms2, False))\n\n    l.sort()\n\n    r, t = 0, 0\n\n    for i in range(len(l)):\n\n        if l[i][1]:\n\n            t += 1\n\n        else:\n\n            t -= 1\n\n        r = max(r, t)\n\n    print(r)","code_v0_loc":16,"code_v1_loc":18,"code_v0_num_chars":386,"code_v1_num_chars":383,"code_v0_no_empty_lines":"import re\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    l = [0] * (24 * 60 * 60 + 1)\n    for _ in range(n):\n        h1, m1, s1, h2, m2, s2 = list(map(int, re.split(\":| \", input())))\n        l[h1 * 60 * 60 + m1 * 60 + s1] += 1\n        l[h2 * 60 * 60 + m2 * 60 + s2] -= 1\n    r = 0\n    for i in range(24 * 60 * 60):\n        l[i + 1] += l[i]\n        r = max(r, l[i + 1])\n    print(r)\n","code_v1_no_empty_lines":"while True:\n    n = int(input())\n    if n == 0:\n        break\n    l = []\n    for _ in range(n):\n        hms1, hms2 = input().split()\n        l.append((hms1, True))\n        l.append((hms2, False))\n    l.sort()\n    r, t = 0, 0\n    for i in range(len(l)):\n        if l[i][1]:\n            t += 1\n        else:\n            t -= 1\n        r = max(r, t)\n    print(r)\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["-import re","-","-    l = [0] * (24 * 60 * 60 + 1)","+    l = []","-        h1, m1, s1, h2, m2, s2 = list(map(int, re.split(\":| \", input())))","-        l[h1 * 60 * 60 + m1 * 60 + s1] += 1","-        l[h2 * 60 * 60 + m2 * 60 + s2] -= 1","-    r = 0","-    for i in range(24 * 60 * 60):","-        l[i + 1] += l[i]","-        r = max(r, l[i + 1])","+        hms1, hms2 = input().split()","+        l.append((hms1, True))","+        l.append((hms2, False))","+    l.sort()","+    r, t = 0, 0","+    for i in range(len(l)):","+        if l[i][1]:","+            t += 1","+        else:","+            t -= 1","+        r = max(r, t)"],"diff_only_import_comment":false,"measured_runtime_v0":1.2066217821,"measured_runtime_v1":0.2932185929,"runtime_lift":4.1150930102,"key":["s409826221","s148489336"]}
{"user_id":"u188827677","problem_id":"p02690","language":"python","submission_id_v0":"s854593654","submission_id_v1":"s214318281","cpu_time_v0":39,"cpu_time_v1":35,"memory_v0":9156,"memory_v1":9120,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.26,"input":"x = int(eval(input()))\n\n\n\nfor a in range(-118,119):\n\n  for b in range(-119,118):\n\n    if a**5 - b**5 == x:\n\n      print((a,b))\n\n      exit()","target":"x = int(eval(input()))\n\n\n\nfor i in range(0, 120):\n\n  for j in range(-119, 120):\n\n    if (i**5 - j**5) == x:\n\n      print((i,j))\n\n      exit()\n","code_v0_loc":7,"code_v1_loc":7,"code_v0_num_chars":132,"code_v1_num_chars":134,"code_v0_no_empty_lines":"x = int(eval(input()))\nfor a in range(-118, 119):\n    for b in range(-119, 118):\n        if a**5 - b**5 == x:\n            print((a, b))\n            exit()\n","code_v1_no_empty_lines":"x = int(eval(input()))\nfor i in range(0, 120):\n    for j in range(-119, 120):\n        if (i**5 - j**5) == x:\n            print((i, j))\n            exit()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-for a in range(-118, 119):","-    for b in range(-119, 118):","-        if a**5 - b**5 == x:","-            print((a, b))","+for i in range(0, 120):","+    for j in range(-119, 120):","+        if (i**5 - j**5) == x:","+            print((i, j))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3689326783,"measured_runtime_v1":0.2223354737,"runtime_lift":1.6593513943,"key":["s854593654","s214318281"]}
{"user_id":"u291766461","problem_id":"p03074","language":"python","submission_id_v0":"s221518045","submission_id_v1":"s305948108","cpu_time_v0":149,"cpu_time_v1":123,"memory_v0":4212,"memory_v1":7884,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.45,"input":"N, K = list(map(int, input().split()))\n\nS = eval(input())\n\nnums = []\n\nnow = 1\n\ncnt = 0\n\nfor i in range(N):\n\n    if S[i] == str(now):\n\n        cnt += 1\n\n    else:\n\n        nums.append(cnt)\n\n        now = 1 - now\n\n        cnt = 1\n\nif cnt != 0:\n\n    nums.append(cnt)\n\nif len(nums) % 2 == 0:\n\n    nums.append(0)\n\n\n\nadd = 2 * K + 1\n\nans = 0\n\nleft = 0\n\nright = 0\n\ntmp = 0\n\nfor i in range(0, len(nums), 2):\n\n\n\n    next_left = i\n\n    next_right = min(i + add, len(nums))\n\n\n\n    while next_left > left:\n\n        tmp -= nums[left]\n\n        left += 1\n\n\n\n    while next_right > right:\n\n        tmp += nums[right]\n\n        right += 1\n\n\n\n    ans = max(ans, tmp)\n\nprint(ans)","target":"N, K = list(map(int, input().split()))\n\nS = eval(input())\n\nnums = []\n\nnow = 1\n\ncnt = 0\n\nfor i in range(N):\n\n    if S[i] == str(now):\n\n        cnt += 1\n\n    else:\n\n        nums.append(cnt)\n\n        now = 1 - now\n\n        cnt = 1\n\nif cnt != 0:\n\n    nums.append(cnt)\n\nif len(nums) % 2 == 0:\n\n    nums.append(0)\n\n\n\ncsum = [0] * (len(nums) + 1)\n\nfor i in range(len(nums)):\n\n    csum[i + 1] = csum[i] + nums[i]\n\n\n\nadd = 2 * K + 1\n\nans = 0\n\ntmp = 0\n\nfor i in range(0, len(nums), 2):\n\n    left = i\n\n    right = min(i + add, len(nums))\n\n    tmp = csum[right] - csum[left]\n\n    ans = max(ans, tmp)\n\nprint(ans)","code_v0_loc":37,"code_v1_loc":30,"code_v0_num_chars":647,"code_v1_num_chars":587,"code_v0_no_empty_lines":"N, K = list(map(int, input().split()))\nS = eval(input())\nnums = []\nnow = 1\ncnt = 0\nfor i in range(N):\n    if S[i] == str(now):\n        cnt += 1\n    else:\n        nums.append(cnt)\n        now = 1 - now\n        cnt = 1\nif cnt != 0:\n    nums.append(cnt)\nif len(nums) % 2 == 0:\n    nums.append(0)\nadd = 2 * K + 1\nans = 0\nleft = 0\nright = 0\ntmp = 0\nfor i in range(0, len(nums), 2):\n    next_left = i\n    next_right = min(i + add, len(nums))\n    while next_left > left:\n        tmp -= nums[left]\n        left += 1\n    while next_right > right:\n        tmp += nums[right]\n        right += 1\n    ans = max(ans, tmp)\nprint(ans)\n","code_v1_no_empty_lines":"N, K = list(map(int, input().split()))\nS = eval(input())\nnums = []\nnow = 1\ncnt = 0\nfor i in range(N):\n    if S[i] == str(now):\n        cnt += 1\n    else:\n        nums.append(cnt)\n        now = 1 - now\n        cnt = 1\nif cnt != 0:\n    nums.append(cnt)\nif len(nums) % 2 == 0:\n    nums.append(0)\ncsum = [0] * (len(nums) + 1)\nfor i in range(len(nums)):\n    csum[i + 1] = csum[i] + nums[i]\nadd = 2 * K + 1\nans = 0\ntmp = 0\nfor i in range(0, len(nums), 2):\n    left = i\n    right = min(i + add, len(nums))\n    tmp = csum[right] - csum[left]\n    ans = max(ans, tmp)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":18.9189189189,"diff":["+csum = [0] * (len(nums) + 1)","+for i in range(len(nums)):","+    csum[i + 1] = csum[i] + nums[i]","-left = 0","-right = 0","-    next_left = i","-    next_right = min(i + add, len(nums))","-    while next_left > left:","-        tmp -= nums[left]","-        left += 1","-    while next_right > right:","-        tmp += nums[right]","-        right += 1","+    left = i","+    right = min(i + add, len(nums))","+    tmp = csum[right] - csum[left]"],"diff_only_import_comment":false,"measured_runtime_v0":0.2166490428,"measured_runtime_v1":0.0894378448,"runtime_lift":2.422341945,"key":["s221518045","s305948108"]}
{"user_id":"u598229387","problem_id":"p03038","language":"python","submission_id_v0":"s447256606","submission_id_v1":"s009222448","cpu_time_v0":1160,"cpu_time_v1":569,"memory_v0":32484,"memory_v1":27852,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":50.95,"input":"import numpy as np\n\nn,m=list(map(int,input().split()))\n\na=np.array([int(i) for i in input().split()])\n\nbc=np.array([[int(i) for i in input().split()] for j in range(m)])\n\n\n\na.sort()\n\nb=bc[:,0]\n\nc=bc[:,1]\n\n\n\nidx=np.argsort(c)\n\nb=b[idx][::-1]\n\nc=c[idx][::-1]\n\n\n\np=0\n\nfor b,c in zip(b,c):\n\n    a[p:p+b]=np.maximum(a[p:p+b],c)\n\n    p+=b\n\n    \n\n    \n\nprint((a.sum()))","target":"from heapq import heappop,heappush\n\nn,m=list(map(int,input().split()))\n\na=[int(i) for i in input().split()]\n\na.sort()\n\nbc=[[int(i) for i in input().split()]for j in range(m)]\n\nbc=sorted(bc, key=lambda x:x[1],reverse=True)\n\n\n\nans=[]\n\nfor b,c in bc:    \n\n    while b>0 and a: \n\n        x = heappop(a)\n\n        if x<c:\n\n            ans.append(c)\n\n            b-=1\n\n        else:\n\n            ans.append(x)\n\nprint((sum(ans)+sum(a)))","code_v0_loc":20,"code_v1_loc":17,"code_v0_num_chars":354,"code_v1_num_chars":420,"code_v0_no_empty_lines":"import numpy as np\n\nn, m = list(map(int, input().split()))\na = np.array([int(i) for i in input().split()])\nbc = np.array([[int(i) for i in input().split()] for j in range(m)])\na.sort()\nb = bc[:, 0]\nc = bc[:, 1]\nidx = np.argsort(c)\nb = b[idx][::-1]\nc = c[idx][::-1]\np = 0\nfor b, c in zip(b, c):\n    a[p : p + b] = np.maximum(a[p : p + b], c)\n    p += b\nprint((a.sum()))\n","code_v1_no_empty_lines":"from heapq import heappop, heappush\n\nn, m = list(map(int, input().split()))\na = [int(i) for i in input().split()]\na.sort()\nbc = [[int(i) for i in input().split()] for j in range(m)]\nbc = sorted(bc, key=lambda x: x[1], reverse=True)\nans = []\nfor b, c in bc:\n    while b > 0 and a:\n        x = heappop(a)\n        if x < c:\n            ans.append(c)\n            b -= 1\n        else:\n            ans.append(x)\nprint((sum(ans) + sum(a)))\n","code_same":false,"relative_loc_diff_percent":15.0,"diff":["-import numpy as np","+from heapq import heappop, heappush","-a = np.array([int(i) for i in input().split()])","-bc = np.array([[int(i) for i in input().split()] for j in range(m)])","+a = [int(i) for i in input().split()]","-b = bc[:, 0]","-c = bc[:, 1]","-idx = np.argsort(c)","-b = b[idx][::-1]","-c = c[idx][::-1]","-p = 0","-for b, c in zip(b, c):","-    a[p : p + b] = np.maximum(a[p : p + b], c)","-    p += b","-print((a.sum()))","+bc = [[int(i) for i in input().split()] for j in range(m)]","+bc = sorted(bc, key=lambda x: x[1], reverse=True)","+ans = []","+for b, c in bc:","+    while b > 0 and a:","+        x = heappop(a)","+        if x < c:","+            ans.append(c)","+            b -= 1","+        else:","+            ans.append(x)","+print((sum(ans) + sum(a)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.4106310596,"measured_runtime_v1":0.1876150353,"runtime_lift":7.518752734,"key":["s447256606","s009222448"]}
{"user_id":"u150984829","problem_id":"p02414","language":"python","submission_id_v0":"s966401245","submission_id_v1":"s281717363","cpu_time_v0":630,"cpu_time_v1":130,"memory_v0":7076,"memory_v1":6584,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":79.37,"input":"n,m,l=list(map(int,input().split()))\n\ne=[input().split()for _ in[0]*(n+m)]\n\nfor c in e[:n]:print((*[sum(int(s)*int(t)for s,t in zip(c,l))for l in zip(*e[n:])]))\n","target":"import sys\n\nn,m,l=list(map(int,input().split()))\n\ne=[list(map(int,e.split()))for e in sys.stdin]\n\nfor c in e[:n]:print((*[sum(s*t for s,t in zip(c,l))for l in zip(*e[n:])]))\n","code_v0_loc":3,"code_v1_loc":4,"code_v0_num_chars":153,"code_v1_num_chars":166,"code_v0_no_empty_lines":"n, m, l = list(map(int, input().split()))\ne = [input().split() for _ in [0] * (n + m)]\nfor c in e[:n]:\n    print((*[sum(int(s) * int(t) for s, t in zip(c, l)) for l in zip(*e[n:])]))\n","code_v1_no_empty_lines":"import sys\n\nn, m, l = list(map(int, input().split()))\ne = [list(map(int, e.split())) for e in sys.stdin]\nfor c in e[:n]:\n    print((*[sum(s * t for s, t in zip(c, l)) for l in zip(*e[n:])]))\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["+import sys","+","-e = [input().split() for _ in [0] * (n + m)]","+e = [list(map(int, e.split())) for e in sys.stdin]","-    print((*[sum(int(s) * int(t) for s, t in zip(c, l)) for l in zip(*e[n:])]))","+    print((*[sum(s * t for s, t in zip(c, l)) for l in zip(*e[n:])]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3404335606,"measured_runtime_v1":0.2443783689,"runtime_lift":1.3930593047,"key":["s966401245","s281717363"]}
{"user_id":"u242518667","problem_id":"p03424","language":"python","submission_id_v0":"s488879497","submission_id_v1":"s152130126","cpu_time_v0":20,"cpu_time_v1":17,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.0,"input":"n=int(eval(input()))\n\ns=list(map(str,input().split()))\n\ntotal=[]\n\nfor i in range(n):\n\n    if s[i] not in total:\n\n        total.append(s[i])\n\nprint(('Three' if len(total)==3 else 'Four'))","target":"eval(input())\n\nl=list(map(str,input().split()))\n\nprint(('Three' if len(set(l))==3 else 'Four'))","code_v0_loc":7,"code_v1_loc":3,"code_v0_num_chars":178,"code_v1_num_chars":81,"code_v0_no_empty_lines":"n = int(eval(input()))\ns = list(map(str, input().split()))\ntotal = []\nfor i in range(n):\n    if s[i] not in total:\n        total.append(s[i])\nprint((\"Three\" if len(total) == 3 else \"Four\"))\n","code_v1_no_empty_lines":"eval(input())\nl = list(map(str, input().split()))\nprint((\"Three\" if len(set(l)) == 3 else \"Four\"))\n","code_same":false,"relative_loc_diff_percent":57.1428571429,"diff":["-n = int(eval(input()))","-s = list(map(str, input().split()))","-total = []","-for i in range(n):","-    if s[i] not in total:","-        total.append(s[i])","-print((\"Three\" if len(total) == 3 else \"Four\"))","+eval(input())","+l = list(map(str, input().split()))","+print((\"Three\" if len(set(l)) == 3 else \"Four\"))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3119253957,"measured_runtime_v1":0.2361336248,"runtime_lift":1.3209698364,"key":["s488879497","s152130126"]}
{"user_id":"u298297089","problem_id":"p03608","language":"python","submission_id_v0":"s886496644","submission_id_v1":"s630862877","cpu_time_v0":754,"cpu_time_v1":614,"memory_v0":22600,"memory_v1":17008,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":18.57,"input":"from scipy.sparse.csgraph import dijkstra as di\n\nfrom itertools import permutations\n\nN,M,R = list(map(int, input().split()))\n\nr = list(map(int, input().split()))\n\n\n\nroute = [[0 for i in range(N)] for j in range(N)]\n\nfor i in range(M):\n\n    a,b,c = list(map(int, input().split()))\n\n    route[a-1][b-1] = route[b-1][a-1] = c\n\n# for i in range(N):\n\n#     print(route[i])\n\n\n\n\n\np_route = di(route)\n\n# print(p_route)\n\n\n\nmn = float('INF')\n\nfor tmp in permutations(r):\n\n    t_sum = 0\n\n    for i in range(len(tmp)-1):\n\n        t_sum += p_route[tmp[i]-1][tmp[i+1]-1]\n\n    if t_sum < mn:\n\n        mn = t_sum\n\n\n\nprint((int(mn)))","target":"from itertools import permutations as perm\n\nfrom scipy.sparse.csgraph import dijkstra as di\n\n\n\ndef warshall(d, n):\n\n    for k in range(n):\n\n        for i in range(n):\n\n            for j in range(n):\n\n                if d[i][k] + d[k][j] < d[i][j]:\n\n                    d[i][j] = d[i][k] + d[k][j]\n\n\n\nn,m,r = list(map(int, input().split()))\n\nrr = [i-1 for i in map(int, input().split())]\n\n\n\ninf = float('INF')\n\nroute = [[0 for j in range(n)] for i in range(n)]\n\nfor _ in range(m):\n\n    a,b,c = list(map(int, input().split()))\n\n    route[a-1][b-1] = route[b-1][a-1] = c\n\n\n\nroute = di(route, n)\n\n\n\nans = inf\n\nfor tmp in perm(rr):\n\n    cost = 0\n\n    for i in range(r-1):\n\n        cost += route[tmp[i]][tmp[i+1]]\n\n    if cost < ans:\n\n        ans = cost\n\nprint((int(ans)))\n","code_v0_loc":25,"code_v1_loc":29,"code_v0_num_chars":602,"code_v1_num_chars":753,"code_v0_no_empty_lines":"from scipy.sparse.csgraph import dijkstra as di\nfrom itertools import permutations\n\nN, M, R = list(map(int, input().split()))\nr = list(map(int, input().split()))\nroute = [[0 for i in range(N)] for j in range(N)]\nfor i in range(M):\n    a, b, c = list(map(int, input().split()))\n    route[a - 1][b - 1] = route[b - 1][a - 1] = c\n# for i in range(N):\n#     print(route[i])\np_route = di(route)\n# print(p_route)\nmn = float(\"INF\")\nfor tmp in permutations(r):\n    t_sum = 0\n    for i in range(len(tmp) - 1):\n        t_sum += p_route[tmp[i] - 1][tmp[i + 1] - 1]\n    if t_sum < mn:\n        mn = t_sum\nprint((int(mn)))\n","code_v1_no_empty_lines":"from itertools import permutations as perm\nfrom scipy.sparse.csgraph import dijkstra as di\n\n\ndef warshall(d, n):\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if d[i][k] + d[k][j] < d[i][j]:\n                    d[i][j] = d[i][k] + d[k][j]\n\n\nn, m, r = list(map(int, input().split()))\nrr = [i - 1 for i in map(int, input().split())]\ninf = float(\"INF\")\nroute = [[0 for j in range(n)] for i in range(n)]\nfor _ in range(m):\n    a, b, c = list(map(int, input().split()))\n    route[a - 1][b - 1] = route[b - 1][a - 1] = c\nroute = di(route, n)\nans = inf\nfor tmp in perm(rr):\n    cost = 0\n    for i in range(r - 1):\n        cost += route[tmp[i]][tmp[i + 1]]\n    if cost < ans:\n        ans = cost\nprint((int(ans)))\n","code_same":false,"relative_loc_diff_percent":13.7931034483,"diff":["+from itertools import permutations as perm","-from itertools import permutations","-N, M, R = list(map(int, input().split()))","-r = list(map(int, input().split()))","-route = [[0 for i in range(N)] for j in range(N)]","-for i in range(M):","+","+def warshall(d, n):","+    for k in range(n):","+        for i in range(n):","+            for j in range(n):","+                if d[i][k] + d[k][j] < d[i][j]:","+                    d[i][j] = d[i][k] + d[k][j]","+","+","+n, m, r = list(map(int, input().split()))","+rr = [i - 1 for i in map(int, input().split())]","+inf = float(\"INF\")","+route = [[0 for j in range(n)] for i in range(n)]","+for _ in range(m):","-# for i in range(N):","-#     print(route[i])","-p_route = di(route)","-# print(p_route)","-mn = float(\"INF\")","-for tmp in permutations(r):","-    t_sum = 0","-    for i in range(len(tmp) - 1):","-        t_sum += p_route[tmp[i] - 1][tmp[i + 1] - 1]","-    if t_sum < mn:","-        mn = t_sum","-print((int(mn)))","+route = di(route, n)","+ans = inf","+for tmp in perm(rr):","+    cost = 0","+    for i in range(r - 1):","+        cost += route[tmp[i]][tmp[i + 1]]","+    if cost < ans:","+        ans = cost","+print((int(ans)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.8585113499,"measured_runtime_v1":0.6205561209,"runtime_lift":1.3834548094,"key":["s886496644","s630862877"]}
{"user_id":"u607865971","problem_id":"p03164","language":"python","submission_id_v0":"s900171177","submission_id_v1":"s494365384","cpu_time_v0":1438,"cpu_time_v1":1016,"memory_v0":27184,"memory_v1":19300,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":29.35,"input":"import sys\n\nfrom collections import Counter, deque, defaultdict\n\nfrom itertools import accumulate, permutations, combinations, takewhile, compress, cycle\n\nfrom functools import reduce\n\nfrom math import ceil, floor, log10, log2, factorial\n\nfrom pprint import pprint\n\n\n\nsys.setrecursionlimit(1000000)\n\n# MOD = 10 ** 9 + 7\n\n# N = int(input())\n\n# A = [int(x) for x in input().split()]\n\n# V = [[0] * 100 for _ in range(100)]\n\n# A = [int(input()) for _ in range(N)]\n\n\n\nN, W = [int(x) for x in input().split()]\n\n\n\ndp = [float('inf')] * 1000 * 100*10\n\nvs = set()\n\nvs.add(0)\n\ndp[0] = 0\n\n\n\nfor i in range(N):\n\n    w, v = [int(x) for x in input().split()]\n\n\n\n    tmpDP = dp.copy()\n\n    for vv in list(vs):\n\n        if dp[vv + v] > dp[vv] + w:\n\n            tmpDP[vv + v] = dp[vv] + w\n\n            vs.add(vv + v)\n\n    dp = tmpDP\n\n\n\n\n\nans = 0\n\nfor v in list(vs):\n\n    if dp[v] <= W:\n\n        ans = max(ans, v)\n\nprint(ans)\n","target":"import sys\n\nfrom collections import Counter, deque, defaultdict\n\nfrom itertools import accumulate, permutations, combinations, takewhile, compress, cycle\n\nfrom functools import reduce\n\nfrom math import ceil, floor, log10, log2, factorial\n\nfrom pprint import pprint\n\n\n\nsys.setrecursionlimit(1000000)\n\n# MOD = 10 ** 9 + 7\n\n# N = int(input())\n\n# A = [int(x) for x in input().split()]\n\n# V = [[0] * 100 for _ in range(100)]\n\n# A = [int(input()) for _ in range(N)]\n\n\n\nN, W = [int(x) for x in input().split()]\n\n\n\ndp = defaultdict(lambda: float('inf'))\n\ndp[0] = 0\n\n\n\nfor i in range(N):\n\n    w, v = [int(x) for x in input().split()]\n\n\n\n    add = defaultdict(lambda: float('inf'))\n\n    for vv in list(dp.keys()):\n\n        if dp[vv + v] > dp[vv] + w:\n\n            add[vv + v] = dp[vv] + w\n\n    dp.update(add)\n\n\n\nprint((max([i for i in list(dp.items()) if i[1] <= W], key=lambda x:x[0])[0]))\n","code_v0_loc":37,"code_v1_loc":29,"code_v0_num_chars":908,"code_v1_num_chars":876,"code_v0_no_empty_lines":"import sys\nfrom collections import Counter, deque, defaultdict\nfrom itertools import accumulate, permutations, combinations, takewhile, compress, cycle\nfrom functools import reduce\nfrom math import ceil, floor, log10, log2, factorial\nfrom pprint import pprint\n\nsys.setrecursionlimit(1000000)\n# MOD = 10 ** 9 + 7\n# N = int(input())\n# A = [int(x) for x in input().split()]\n# V = [[0] * 100 for _ in range(100)]\n# A = [int(input()) for _ in range(N)]\nN, W = [int(x) for x in input().split()]\ndp = [float(\"inf\")] * 1000 * 100 * 10\nvs = set()\nvs.add(0)\ndp[0] = 0\nfor i in range(N):\n    w, v = [int(x) for x in input().split()]\n    tmpDP = dp.copy()\n    for vv in list(vs):\n        if dp[vv + v] > dp[vv] + w:\n            tmpDP[vv + v] = dp[vv] + w\n            vs.add(vv + v)\n    dp = tmpDP\nans = 0\nfor v in list(vs):\n    if dp[v] <= W:\n        ans = max(ans, v)\nprint(ans)\n","code_v1_no_empty_lines":"import sys\nfrom collections import Counter, deque, defaultdict\nfrom itertools import accumulate, permutations, combinations, takewhile, compress, cycle\nfrom functools import reduce\nfrom math import ceil, floor, log10, log2, factorial\nfrom pprint import pprint\n\nsys.setrecursionlimit(1000000)\n# MOD = 10 ** 9 + 7\n# N = int(input())\n# A = [int(x) for x in input().split()]\n# V = [[0] * 100 for _ in range(100)]\n# A = [int(input()) for _ in range(N)]\nN, W = [int(x) for x in input().split()]\ndp = defaultdict(lambda: float(\"inf\"))\ndp[0] = 0\nfor i in range(N):\n    w, v = [int(x) for x in input().split()]\n    add = defaultdict(lambda: float(\"inf\"))\n    for vv in list(dp.keys()):\n        if dp[vv + v] > dp[vv] + w:\n            add[vv + v] = dp[vv] + w\n    dp.update(add)\nprint((max([i for i in list(dp.items()) if i[1] <= W], key=lambda x: x[0])[0]))\n","code_same":false,"relative_loc_diff_percent":21.6216216216,"diff":["-dp = [float(\"inf\")] * 1000 * 100 * 10","-vs = set()","-vs.add(0)","+dp = defaultdict(lambda: float(\"inf\"))","-    tmpDP = dp.copy()","-    for vv in list(vs):","+    add = defaultdict(lambda: float(\"inf\"))","+    for vv in list(dp.keys()):","-            tmpDP[vv + v] = dp[vv] + w","-            vs.add(vv + v)","-    dp = tmpDP","-ans = 0","-for v in list(vs):","-    if dp[v] <= W:","-        ans = max(ans, v)","-print(ans)","+            add[vv + v] = dp[vv] + w","+    dp.update(add)","+print((max([i for i in list(dp.items()) if i[1] <= W], key=lambda x: x[0])[0]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.5805827644,"measured_runtime_v1":0.1952783756,"runtime_lift":2.9731032046,"key":["s900171177","s494365384"]}
{"user_id":"u882209234","problem_id":"p03796","language":"python","submission_id_v0":"s179415880","submission_id_v1":"s895771571","cpu_time_v0":230,"cpu_time_v1":42,"memory_v0":3984,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":81.74,"input":"from math import factorial\n\nN = int(eval(input()))\n\nprint((factorial(N) % (10**9 + 7)))","target":"from math import factorial\n\nN = int(eval(input()))\n\nans = 1\n\nfor i in range(1,N+1):\n\n    ans *= i % (10**9 + 7)\n\n    ans %= 10**9 + 7\n\nprint(ans)","code_v0_loc":3,"code_v1_loc":7,"code_v0_num_chars":79,"code_v1_num_chars":139,"code_v0_no_empty_lines":"from math import factorial\n\nN = int(eval(input()))\nprint((factorial(N) % (10**9 + 7)))\n","code_v1_no_empty_lines":"from math import factorial\n\nN = int(eval(input()))\nans = 1\nfor i in range(1, N + 1):\n    ans *= i % (10**9 + 7)\n    ans %= 10**9 + 7\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":57.1428571429,"diff":["-print((factorial(N) % (10**9 + 7)))","+ans = 1","+for i in range(1, N + 1):","+    ans *= i % (10**9 + 7)","+    ans %= 10**9 + 7","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.9434056597,"measured_runtime_v1":0.3957924933,"runtime_lift":2.3835865397,"key":["s179415880","s895771571"]}
{"user_id":"u402629484","problem_id":"p02702","language":"python","submission_id_v0":"s641082621","submission_id_v1":"s046213774","cpu_time_v0":1692,"cpu_time_v1":128,"memory_v0":75572,"memory_v1":24100,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":92.43,"input":"import sys\n\nsys.setrecursionlimit(1000000000)\n\nimport math\n\nfrom math import gcd\n\ndef lcm(a, b): return a * b \/\/ gcd(a, b)\n\nfrom itertools import count, permutations, chain\n\nfrom functools import lru_cache\n\nfrom collections import deque, defaultdict\n\nfrom pprint import pprint\n\nii = lambda: int(eval(input()))\n\nmis = lambda: list(map(int, input().split()))\n\nlmis = lambda: list(mis())\n\nINF = float('inf')\n\nN1097 = 10**9 + 7\n\n\n\ndef meg(f, ok, ng):\n\n    while abs(ok-ng)>1:\n\n        mid = (ok+ng)\/\/2\n\n        if f(mid):\n\n            ok=mid\n\n        else:\n\n            ng=mid\n\n    return ok\n\n\n\ndef get_inv(n, modp):\n\n    return pow(n, modp-2, modp)\n\n\n\ndef factorials_list(n, modp):    # 10**6\n\n    fs = [1]\n\n    for i in range(1, n+1):\n\n        fs.append(fs[-1] * i % modp)\n\n    return fs\n\n\n\ndef invs_list(n, fs, modp):     # 10**6\n\n    invs = [get_inv(fs[-1], modp)]\n\n    for i in range(n, 1-1, -1):\n\n        invs.append(invs[-1] * i % modp)\n\n    invs.reverse()\n\n    return invs\n\n\n\ndef comb(n, k, modp):\n\n    num = 1\n\n    for i in range(n, n-k, -1):\n\n        num = num * i % modp\n\n    den = 1\n\n    for i in range(2, k+1):\n\n        den = den * i % modp\n\n    return num * get_inv(den, modp) % modp\n\n\n\ndef comb_from_list(n, k, modp, fs, invs):   \n\n    return fs[n] * invs[n-k] * invs[k] % modp\n\n\n\n#\n\n\n\nclass UnionFindEx:\n\n    def __init__(self, size):\n\n        #\u6b63\u306a\u3089\u6839\u306e\u756a\u53f7\u3001\u8ca0\u306a\u3089\u30b0\u30eb\u30fc\u30d7\u30b5\u30a4\u30ba\n\n        self.roots = [-1] * size\n\n    def getRootID(self, i):\n\n        r = self.roots[i]\n\n        if r < 0:   #\u8ca0\u306a\u3089\u6839\n\n            return i\n\n        else:\n\n            r = self.getRootID(r)\n\n            self.roots[i] = r\n\n            return r\n\n    def getGroupSize(self, i):\n\n        return -self.roots[self.getRootID(i)]\n\n    def connect(self, i, j):\n\n        r1, r2 = self.getRootID(i), self.getRootID(j)\n\n        if r1 == r2:\n\n            return False\n\n        if self.getGroupSize(r1) < self.getGroupSize(r2):\n\n            r1, r2 = r2, r1\n\n        self.roots[r1] += self.roots[r2]    #\u30b5\u30a4\u30ba\u66f4\u65b0\n\n        self.roots[r2] = r1\n\n        return True\n\n\n\nYes = 'Yes'\n\nNo = 'No'\n\n\n\n\n\ndef main():\n\n    S = eval(input())\n\n    d = [0]*2019\n\n    dn = [0]*2019\n\n    ans = 0\n\n    for s in S:\n\n        sn = int(s)\n\n        dn[sn] += 1\n\n        for i in range(2019):\n\n            dn[(i*10+sn)%2019] += d[i]\n\n        d, dn = dn, d\n\n        for i in range(2019):\n\n            dn[i] = 0\n\n        ans += d[0]\n\n    print(ans)\n\n\n\n\n\n\n\n\n\n\n\n\n\nmain()\n\n\n","target":"'''\n\n[point 1]\n\n1817181712114 \u306e\u90e8\u5206 \"18171\"\u306b\u3064\u3044\u3066\u8003\u3048\u308b...\n\n\n\n    181710000 \/ 10000 \u2261 0 (MOD 2019) \u306a\u3089\u3070\u30012019\u306e\u500d\u6570\n\n    181710000 \u2261 0 (MOD 2019) \u3067\u3088\u3044\n\n\n\n[point 2]\n\n    181710000\n\n    =\n\n    181712114\n\n    -\n\n         2114\n\n\n\n    \u306a\u306e\u3067\u3001\u7279\u5b9a\u533a\u9593\u306e\u5024 \u306f \u7d2f\u7a4d\u548c\u306e\u5dee \u304b\u3089\u77ac\u6642\u306b\u6c42\u3081\u3089\u308c\u308b\u3002\n\n    \u3055\u3089\u306b\u3001181710000 \u2261 0 (MOD 2019) \u3092\u8003\u3048\u308b\u3068\u3001\n\n\n\n    0 \u2261 181712114 - 2114\n\n    \u2192 181712114 \u2261 2114\n\n\n\n    \u3068\u306a\u308b\u3002\n\n    \u7d50\u5c40\u306e\u6240\u3001MOD2019\u306b\u304a\u3044\u3066\u5408\u540c\u306a\u7d2f\u7a4d\u548c\u306e\u30da\u30a2\u306e\u6570\u306e\u6570\u3048\u4e0a\u3052\u3002\n\n'''\n\n\n\nfrom collections import defaultdict\n\n\n\ndef gen_10exp_mod(n, mod):\n\n    a = 1\n\n    yield a\n\n    for _ in range(1, n):\n\n        a = (a*10) % mod\n\n        yield a\n\n\n\ndef main():\n\n    MOD = 2019\n\n    S = input()[::-1]\n\n    # \u6841\u3054\u3068\u306e\u5b9f\u969b\u306e\u5024\u3092\u8a08\u7b97 (MOD)\n\n    A = [int(s)*n % MOD for s, n in zip(S, gen_10exp_mod(len(S), MOD))]\n\n    # \u7d2f\u7a4d\u548c\u3092\u8a08\u7b97\n\n    ACC = [0]\n\n    for a in A:\n\n        ACC.append((ACC[-1] + a) % MOD)\n\n    # \u30da\u30a2\u6570\u3048\u4e0a\u3052\n\n    d = defaultdict(int)\n\n    for acc in ACC:\n\n        d[acc] += 1\n\n    ans = sum(v*(v-1)\/\/2 for v in list(d.values()))\n\n    print(ans)\n\n\n\n\n\nmain()\n","code_v0_loc":105,"code_v1_loc":51,"code_v0_num_chars":2384,"code_v1_num_chars":956,"code_v0_no_empty_lines":"import sys\n\nsys.setrecursionlimit(1000000000)\nimport math\nfrom math import gcd\n\n\ndef lcm(a, b):\n    return a * b \/\/ gcd(a, b)\n\n\nfrom itertools import count, permutations, chain\nfrom functools import lru_cache\nfrom collections import deque, defaultdict\nfrom pprint import pprint\n\nii = lambda: int(eval(input()))\nmis = lambda: list(map(int, input().split()))\nlmis = lambda: list(mis())\nINF = float(\"inf\")\nN1097 = 10**9 + 7\n\n\ndef meg(f, ok, ng):\n    while abs(ok - ng) > 1:\n        mid = (ok + ng) \/\/ 2\n        if f(mid):\n            ok = mid\n        else:\n            ng = mid\n    return ok\n\n\ndef get_inv(n, modp):\n    return pow(n, modp - 2, modp)\n\n\ndef factorials_list(n, modp):  # 10**6\n    fs = [1]\n    for i in range(1, n + 1):\n        fs.append(fs[-1] * i % modp)\n    return fs\n\n\ndef invs_list(n, fs, modp):  # 10**6\n    invs = [get_inv(fs[-1], modp)]\n    for i in range(n, 1 - 1, -1):\n        invs.append(invs[-1] * i % modp)\n    invs.reverse()\n    return invs\n\n\ndef comb(n, k, modp):\n    num = 1\n    for i in range(n, n - k, -1):\n        num = num * i % modp\n    den = 1\n    for i in range(2, k + 1):\n        den = den * i % modp\n    return num * get_inv(den, modp) % modp\n\n\ndef comb_from_list(n, k, modp, fs, invs):\n    return fs[n] * invs[n - k] * invs[k] % modp\n\n\n#\nclass UnionFindEx:\n    def __init__(self, size):\n        # \u6b63\u306a\u3089\u6839\u306e\u756a\u53f7\u3001\u8ca0\u306a\u3089\u30b0\u30eb\u30fc\u30d7\u30b5\u30a4\u30ba\n        self.roots = [-1] * size\n\n    def getRootID(self, i):\n        r = self.roots[i]\n        if r < 0:  # \u8ca0\u306a\u3089\u6839\n            return i\n        else:\n            r = self.getRootID(r)\n            self.roots[i] = r\n            return r\n\n    def getGroupSize(self, i):\n        return -self.roots[self.getRootID(i)]\n\n    def connect(self, i, j):\n        r1, r2 = self.getRootID(i), self.getRootID(j)\n        if r1 == r2:\n            return False\n        if self.getGroupSize(r1) < self.getGroupSize(r2):\n            r1, r2 = r2, r1\n        self.roots[r1] += self.roots[r2]  # \u30b5\u30a4\u30ba\u66f4\u65b0\n        self.roots[r2] = r1\n        return True\n\n\nYes = \"Yes\"\nNo = \"No\"\n\n\ndef main():\n    S = eval(input())\n    d = [0] * 2019\n    dn = [0] * 2019\n    ans = 0\n    for s in S:\n        sn = int(s)\n        dn[sn] += 1\n        for i in range(2019):\n            dn[(i * 10 + sn) % 2019] += d[i]\n        d, dn = dn, d\n        for i in range(2019):\n            dn[i] = 0\n        ans += d[0]\n    print(ans)\n\n\nmain()\n","code_v1_no_empty_lines":"\"\"\"\n[point 1]\n1817181712114 \u306e\u90e8\u5206 \"18171\"\u306b\u3064\u3044\u3066\u8003\u3048\u308b...\n    181710000 \/ 10000 \u2261 0 (MOD 2019) \u306a\u3089\u3070\u30012019\u306e\u500d\u6570\n    181710000 \u2261 0 (MOD 2019) \u3067\u3088\u3044\n[point 2]\n    181710000\n    =\n    181712114\n    -\n         2114\n    \u306a\u306e\u3067\u3001\u7279\u5b9a\u533a\u9593\u306e\u5024 \u306f \u7d2f\u7a4d\u548c\u306e\u5dee \u304b\u3089\u77ac\u6642\u306b\u6c42\u3081\u3089\u308c\u308b\u3002\n    \u3055\u3089\u306b\u3001181710000 \u2261 0 (MOD 2019) \u3092\u8003\u3048\u308b\u3068\u3001\n    0 \u2261 181712114 - 2114\n    \u2192 181712114 \u2261 2114\n    \u3068\u306a\u308b\u3002\n    \u7d50\u5c40\u306e\u6240\u3001MOD2019\u306b\u304a\u3044\u3066\u5408\u540c\u306a\u7d2f\u7a4d\u548c\u306e\u30da\u30a2\u306e\u6570\u306e\u6570\u3048\u4e0a\u3052\u3002\n\"\"\"\nfrom collections import defaultdict\n\n\ndef gen_10exp_mod(n, mod):\n    a = 1\n    yield a\n    for _ in range(1, n):\n        a = (a * 10) % mod\n        yield a\n\n\ndef main():\n    MOD = 2019\n    S = input()[::-1]\n    # \u6841\u3054\u3068\u306e\u5b9f\u969b\u306e\u5024\u3092\u8a08\u7b97 (MOD)\n    A = [int(s) * n % MOD for s, n in zip(S, gen_10exp_mod(len(S), MOD))]\n    # \u7d2f\u7a4d\u548c\u3092\u8a08\u7b97\n    ACC = [0]\n    for a in A:\n        ACC.append((ACC[-1] + a) % MOD)\n    # \u30da\u30a2\u6570\u3048\u4e0a\u3052\n    d = defaultdict(int)\n    for acc in ACC:\n        d[acc] += 1\n    ans = sum(v * (v - 1) \/\/ 2 for v in list(d.values()))\n    print(ans)\n\n\nmain()\n","code_same":false,"relative_loc_diff_percent":51.4285714286,"diff":["-import sys","-","-sys.setrecursionlimit(1000000000)","-import math","-from math import gcd","+\"\"\"","+[point 1]","+1817181712114 \u306e\u90e8\u5206 \"18171\"\u306b\u3064\u3044\u3066\u8003\u3048\u308b...","+    181710000 \/ 10000 \u2261 0 (MOD 2019) \u306a\u3089\u3070\u30012019\u306e\u500d\u6570","+    181710000 \u2261 0 (MOD 2019) \u3067\u3088\u3044","+[point 2]","+    181710000","+    =","+    181712114","+    -","+         2114","+    \u306a\u306e\u3067\u3001\u7279\u5b9a\u533a\u9593\u306e\u5024 \u306f \u7d2f\u7a4d\u548c\u306e\u5dee \u304b\u3089\u77ac\u6642\u306b\u6c42\u3081\u3089\u308c\u308b\u3002","+    \u3055\u3089\u306b\u3001181710000 \u2261 0 (MOD 2019) \u3092\u8003\u3048\u308b\u3068\u3001","+    0 \u2261 181712114 - 2114","+    \u2192 181712114 \u2261 2114","+    \u3068\u306a\u308b\u3002","+    \u7d50\u5c40\u306e\u6240\u3001MOD2019\u306b\u304a\u3044\u3066\u5408\u540c\u306a\u7d2f\u7a4d\u548c\u306e\u30da\u30a2\u306e\u6570\u306e\u6570\u3048\u4e0a\u3052\u3002","+\"\"\"","+from collections import defaultdict","-def lcm(a, b):","-    return a * b \/\/ gcd(a, b)","-","-","-from itertools import count, permutations, chain","-from functools import lru_cache","-from collections import deque, defaultdict","-from pprint import pprint","-","-ii = lambda: int(eval(input()))","-mis = lambda: list(map(int, input().split()))","-lmis = lambda: list(mis())","-INF = float(\"inf\")","-N1097 = 10**9 + 7","-","-","-def meg(f, ok, ng):","-    while abs(ok - ng) > 1:","-        mid = (ok + ng) \/\/ 2","-        if f(mid):","-            ok = mid","-        else:","-            ng = mid","-    return ok","-","-","-def get_inv(n, modp):","-    return pow(n, modp - 2, modp)","-","-","-def factorials_list(n, modp):  # 10**6","-    fs = [1]","-    for i in range(1, n + 1):","-        fs.append(fs[-1] * i % modp)","-    return fs","-","-","-def invs_list(n, fs, modp):  # 10**6","-    invs = [get_inv(fs[-1], modp)]","-    for i in range(n, 1 - 1, -1):","-        invs.append(invs[-1] * i % modp)","-    invs.reverse()","-    return invs","-","-","-def comb(n, k, modp):","-    num = 1","-    for i in range(n, n - k, -1):","-        num = num * i % modp","-    den = 1","-    for i in range(2, k + 1):","-        den = den * i % modp","-    return num * get_inv(den, modp) % modp","-","-","-def comb_from_list(n, k, modp, fs, invs):","-    return fs[n] * invs[n - k] * invs[k] % modp","-","-","-#","-class UnionFindEx:","-    def __init__(self, size):","-        # \u6b63\u306a\u3089\u6839\u306e\u756a\u53f7\u3001\u8ca0\u306a\u3089\u30b0\u30eb\u30fc\u30d7\u30b5\u30a4\u30ba","-        self.roots = [-1] * size","-","-    def getRootID(self, i):","-        r = self.roots[i]","-        if r < 0:  # \u8ca0\u306a\u3089\u6839","-            return i","-        else:","-            r = self.getRootID(r)","-            self.roots[i] = r","-            return r","-","-    def getGroupSize(self, i):","-        return -self.roots[self.getRootID(i)]","-","-    def connect(self, i, j):","-        r1, r2 = self.getRootID(i), self.getRootID(j)","-        if r1 == r2:","-            return False","-        if self.getGroupSize(r1) < self.getGroupSize(r2):","-            r1, r2 = r2, r1","-        self.roots[r1] += self.roots[r2]  # \u30b5\u30a4\u30ba\u66f4\u65b0","-        self.roots[r2] = r1","-        return True","-","-","-Yes = \"Yes\"","-No = \"No\"","+def gen_10exp_mod(n, mod):","+    a = 1","+    yield a","+    for _ in range(1, n):","+        a = (a * 10) % mod","+        yield a","-    S = eval(input())","-    d = [0] * 2019","-    dn = [0] * 2019","-    ans = 0","-    for s in S:","-        sn = int(s)","-        dn[sn] += 1","-        for i in range(2019):","-            dn[(i * 10 + sn) % 2019] += d[i]","-        d, dn = dn, d","-        for i in range(2019):","-            dn[i] = 0","-        ans += d[0]","+    MOD = 2019","+    S = input()[::-1]","+    # \u6841\u3054\u3068\u306e\u5b9f\u969b\u306e\u5024\u3092\u8a08\u7b97 (MOD)","+    A = [int(s) * n % MOD for s, n in zip(S, gen_10exp_mod(len(S), MOD))]","+    # \u7d2f\u7a4d\u548c\u3092\u8a08\u7b97","+    ACC = [0]","+    for a in A:","+        ACC.append((ACC[-1] + a) % MOD)","+    # \u30da\u30a2\u6570\u3048\u4e0a\u3052","+    d = defaultdict(int)","+    for acc in ACC:","+        d[acc] += 1","+    ans = sum(v * (v - 1) \/\/ 2 for v in list(d.values()))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3964794042,"measured_runtime_v1":0.2964991529,"runtime_lift":1.3372024855,"key":["s641082621","s046213774"]}
{"user_id":"u680851063","problem_id":"p03013","language":"python","submission_id_v0":"s906106174","submission_id_v1":"s036157730","cpu_time_v0":71,"cpu_time_v1":61,"memory_v0":13192,"memory_v1":13192,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.08,"input":"import sys\n\ninput = sys.stdin.readline\n\n\n\nn, m = list(map(int, input().split()))\n\nbroken = set([int(eval(input())) for _ in range(m)]) # \u3053\u3053\u304c'list'\u3060\u3068Pypy\u3067\u3082\u901a\u3089\u306a\u3044\n\n\n\ndef ptn_num(x): # 'x'step\u307e\u3067\u306e\u30d1\u30bf\u30fc\u30f3\u6570\n\n    dp = [0] * (x+1) # DP\u67a0_including step'0'\n\n    if 1 in broken: # in case, step'1' broken \n\n        dp[:2] = 1, 0\n\n    else:\n\n        dp[:2] = 1, 1 # Usually\n\n\n\n    for i in range(2, x+1):\n\n        if i not in broken: # \u968e\u6bb5\u304c\u58ca\u308c\u3066\u306a\u3044\u5834\u5408...\n\n            dp[i] = (dp[i-1] + dp[i-2]) % (10**9+7) # -1\u6bb5\u76ee\u3068-2\u6bb5\u76ee\u306e\u5408\u8a08\n\n    print((dp[-1]))\n\n\n\nptn_num(n)\n","target":"import sys\n\ninput = sys.stdin.readline\n\n\n\nn, m = list(map(int, input().split()))\n\nbroken = set([int(eval(input())) for _ in range(m)]) # \u3053\u3053\u304c'list'\u3060\u3068Pypy\u3067\u3082\u901a\u3089\u306a\u3044\n\n\n\ndef ptn_num(x): # 'x'step\u307e\u3067\u306e\u30d1\u30bf\u30fc\u30f3\u6570\n\n    dp = [0] * (x+1) # DP\u67a0_including step'0'\n\n    if 1 in broken: # \u56fa\u5b9a\u90e8\u5206_in case, step'1' broken \n\n        dp[:2] = 1, 0\n\n    else:\n\n        dp[:2] = 1, 1 # \u56fa\u5b9a\u90e8\u5206_Usually\n\n\n\n    for i in range(2, x+1):\n\n        if i not in broken: # \u968e\u6bb5\u304c\u58ca\u308c\u3066\u306a\u3044\u5834\u5408...\n\n            dp[i] = (dp[i-1] + dp[i-2]) % (10**9+7) # -1\u6bb5\u76ee\u3068-2\u6bb5\u76ee\u306e\u5408\u8a08\n\n    print((dp[-1]))\n\n\n\nptn_num(n)","code_v0_loc":19,"code_v1_loc":19,"code_v0_num_chars":522,"code_v1_num_chars":531,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\nbroken = set([int(eval(input())) for _ in range(m)])  # \u3053\u3053\u304c'list'\u3060\u3068Pypy\u3067\u3082\u901a\u3089\u306a\u3044\n\n\ndef ptn_num(x):  # 'x'step\u307e\u3067\u306e\u30d1\u30bf\u30fc\u30f3\u6570\n    dp = [0] * (x + 1)  # DP\u67a0_including step'0'\n    if 1 in broken:  # in case, step'1' broken\n        dp[:2] = 1, 0\n    else:\n        dp[:2] = 1, 1  # Usually\n    for i in range(2, x + 1):\n        if i not in broken:  # \u968e\u6bb5\u304c\u58ca\u308c\u3066\u306a\u3044\u5834\u5408...\n            dp[i] = (dp[i - 1] + dp[i - 2]) % (10**9 + 7)  # -1\u6bb5\u76ee\u3068-2\u6bb5\u76ee\u306e\u5408\u8a08\n    print((dp[-1]))\n\n\nptn_num(n)\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nn, m = list(map(int, input().split()))\nbroken = set([int(eval(input())) for _ in range(m)])  # \u3053\u3053\u304c'list'\u3060\u3068Pypy\u3067\u3082\u901a\u3089\u306a\u3044\n\n\ndef ptn_num(x):  # 'x'step\u307e\u3067\u306e\u30d1\u30bf\u30fc\u30f3\u6570\n    dp = [0] * (x + 1)  # DP\u67a0_including step'0'\n    if 1 in broken:  # \u56fa\u5b9a\u90e8\u5206_in case, step'1' broken\n        dp[:2] = 1, 0\n    else:\n        dp[:2] = 1, 1  # \u56fa\u5b9a\u90e8\u5206_Usually\n    for i in range(2, x + 1):\n        if i not in broken:  # \u968e\u6bb5\u304c\u58ca\u308c\u3066\u306a\u3044\u5834\u5408...\n            dp[i] = (dp[i - 1] + dp[i - 2]) % (10**9 + 7)  # -1\u6bb5\u76ee\u3068-2\u6bb5\u76ee\u306e\u5408\u8a08\n    print((dp[-1]))\n\n\nptn_num(n)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    if 1 in broken:  # in case, step'1' broken","+    if 1 in broken:  # \u56fa\u5b9a\u90e8\u5206_in case, step'1' broken","-        dp[:2] = 1, 1  # Usually","+        dp[:2] = 1, 1  # \u56fa\u5b9a\u90e8\u5206_Usually"],"diff_only_import_comment":false,"measured_runtime_v0":0.2961144955,"measured_runtime_v1":0.2031981165,"runtime_lift":1.4572698829,"key":["s906106174","s036157730"]}
{"user_id":"u146816547","problem_id":"p00005","language":"python","submission_id_v0":"s153581221","submission_id_v1":"s486237781","cpu_time_v0":30,"cpu_time_v1":10,"memory_v0":5872,"memory_v1":6452,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":66.67,"input":"import fractions\n\nwhile True:\n\n\ttry:\n\n\t\tx,y = list(map(int,input().split()))\n\n\t\tprint('%d %d' % (fractions.gcd(x,y),x\/fractions.gcd(x,y)*y))\n\n\texcept EOFError:\n\n\t\tbreak","target":"def gcd(x, y):\n\n    if y == 0:\n\n        return x\n\n    else:\n\n        return gcd(y, x%y)\n\n\n\n\n\ndef lcm(x,y):\n\n    return x\/gcd(x, y)*y\n\n\n\n\n\nwhile True:\n\n    try:\n\n        x, y = list(map(int, input().split()))\n\n    except EOFError:\n\n        break\n\n\n\n    print(\"%d %d\" % (gcd(x, y), lcm(x, y)))","code_v0_loc":7,"code_v1_loc":18,"code_v0_num_chars":165,"code_v1_num_chars":288,"code_v0_no_empty_lines":"import fractions\n\nwhile True:\n    try:\n        x, y = list(map(int, input().split()))\n        print(\"%d %d\" % (fractions.gcd(x, y), x \/ fractions.gcd(x, y) * y))\n    except EOFError:\n        break\n","code_v1_no_empty_lines":"def gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\n\ndef lcm(x, y):\n    return x \/ gcd(x, y) * y\n\n\nwhile True:\n    try:\n        x, y = list(map(int, input().split()))\n    except EOFError:\n        break\n    print(\"%d %d\" % (gcd(x, y), lcm(x, y)))\n","code_same":false,"relative_loc_diff_percent":61.1111111111,"diff":["-import fractions","+def gcd(x, y):","+    if y == 0:","+        return x","+    else:","+        return gcd(y, x % y)","+","+","+def lcm(x, y):","+    return x \/ gcd(x, y) * y","+","-        print(\"%d %d\" % (fractions.gcd(x, y), x \/ fractions.gcd(x, y) * y))","+    print(\"%d %d\" % (gcd(x, y), lcm(x, y)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2843708012,"measured_runtime_v1":0.2133130357,"runtime_lift":1.3331149699,"key":["s153581221","s486237781"]}
{"user_id":"u815878613","problem_id":"p03000","language":"python","submission_id_v0":"s551428668","submission_id_v1":"s698553150","cpu_time_v0":156,"cpu_time_v1":17,"memory_v0":12396,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":89.1,"input":"import sys\n\nimport numpy as np\n\n\n\nN, X  = list(map(int, input().split()))\n\n\n\nL = np.array(list(map(int, input().split())))\n\n\n\nx = np.zeros(N+1)\n\n\n\nfor n in range(1,N+1):\n\n    x[n] = x[n-1] + L[n-1]\n\n    if x[n] > X:\n\n        print(n)\n\n        sys.exit()\n\n\n\nprint((N+1))\n\n\n","target":"N, X = list(map(int, input().split()))\n\nL = list(map(int, input().split()))\n\n\n\ncnt = 1\n\nsum_L = 0\n\nfor l in L:\n\n    sum_L += l\n\n    if sum_L <= X:\n\n        cnt += 1\n\n    else:\n\n        break\n\n\n\nprint(cnt)\n","code_v0_loc":17,"code_v1_loc":13,"code_v0_num_chars":270,"code_v1_num_chars":199,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nN, X = list(map(int, input().split()))\nL = np.array(list(map(int, input().split())))\nx = np.zeros(N + 1)\nfor n in range(1, N + 1):\n    x[n] = x[n - 1] + L[n - 1]\n    if x[n] > X:\n        print(n)\n        sys.exit()\nprint((N + 1))\n","code_v1_no_empty_lines":"N, X = list(map(int, input().split()))\nL = list(map(int, input().split()))\ncnt = 1\nsum_L = 0\nfor l in L:\n    sum_L += l\n    if sum_L <= X:\n        cnt += 1\n    else:\n        break\nprint(cnt)\n","code_same":false,"relative_loc_diff_percent":23.5294117647,"diff":["-import sys","-import numpy as np","-","-L = np.array(list(map(int, input().split())))","-x = np.zeros(N + 1)","-for n in range(1, N + 1):","-    x[n] = x[n - 1] + L[n - 1]","-    if x[n] > X:","-        print(n)","-        sys.exit()","-print((N + 1))","+L = list(map(int, input().split()))","+cnt = 1","+sum_L = 0","+for l in L:","+    sum_L += l","+    if sum_L <= X:","+        cnt += 1","+    else:","+        break","+print(cnt)"],"diff_only_import_comment":false,"measured_runtime_v0":0.9238229019,"measured_runtime_v1":0.1570141087,"runtime_lift":5.883693572,"key":["s551428668","s698553150"]}
{"user_id":"u111365362","problem_id":"p02881","language":"python","submission_id_v0":"s326793866","submission_id_v1":"s577051886","cpu_time_v0":202,"cpu_time_v1":174,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.86,"input":"n = int(eval(input()))\n\nr = int(n**.5)\n\nfor i in range(r):\n\n  if n % (r-i) == 0:\n\n    print(( (r-i) + n\/\/(r-i) - 2 ))\n\n    break","target":"n = int(eval(input()))\n\ns = int(n**.5)\n\nfor i in range(s):\n\n  if n % (s-i) == 0:\n\n    print(((s-i) + n \/\/ (s-i) - 2))\n\n    break","code_v0_loc":6,"code_v1_loc":6,"code_v0_num_chars":120,"code_v1_num_chars":120,"code_v0_no_empty_lines":"n = int(eval(input()))\nr = int(n**0.5)\nfor i in range(r):\n    if n % (r - i) == 0:\n        print(((r - i) + n \/\/ (r - i) - 2))\n        break\n","code_v1_no_empty_lines":"n = int(eval(input()))\ns = int(n**0.5)\nfor i in range(s):\n    if n % (s - i) == 0:\n        print(((s - i) + n \/\/ (s - i) - 2))\n        break\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-r = int(n**0.5)","-for i in range(r):","-    if n % (r - i) == 0:","-        print(((r - i) + n \/\/ (r - i) - 2))","+s = int(n**0.5)","+for i in range(s):","+    if n % (s - i) == 0:","+        print(((s - i) + n \/\/ (s - i) - 2))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3217455449,"measured_runtime_v1":0.1190871449,"runtime_lift":2.7017655456,"key":["s326793866","s577051886"]}
{"user_id":"u670180528","problem_id":"p03253","language":"python","submission_id_v0":"s289323588","submission_id_v1":"s397757622","cpu_time_v0":97,"cpu_time_v1":24,"memory_v0":11252,"memory_v1":3564,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":75.26,"input":"from collections import Counter\n\ndef factorization(n) -> list:\n\n\tif n==1:\n\n\t\treturn [1]\n\n\tret = []\n\n\ti = 2\n\n\twhile i*i<=n:\n\n\t\twhile n%i==0:\n\n\t\t\tn \/\/= i\n\n\t\t\tret.append(i)\n\n\t\ti += 1\n\n\tif n!=1:\n\n\t\tret.append(n)\n\n\treturn ret\n\n\n\nn,m = list(map(int,input().split()))\n\nmod = 10**9+7\n\nif m==1:\n\n\tprint((1));exit()\n\n\n\nfactors = Counter(factorization(m))\n\nmx = n+max(factors.values())\n\n\n\nfac = [1]*(mx+1)\n\ninv = [1]*(mx+1)\n\nfor i in range(1,mx+1):\n\n\tfac[i] = fac[i-1] * i % mod\n\ninv[-1] = pow(fac[-1], mod - 2, mod)\n\nfor i in range(mx-1, -1, -1):\n\n\tinv[i] = inv[i+1] * (i+1) % mod\n\ndef cmb(n,r):\n\n\tassert n >= r >= 0\n\n\treturn fac[n] * inv[n-r] * inv[r] % mod\n\n\t\n\nans=1\n\nfor v in list(factors.values()):\n\n\tans*=cmb(n+v-1,v)\n\n\tans%=mod\n\n\n\nprint(ans)","target":"from collections import Counter\n\ndef factorization(n) -> list:\n\n\tif n==1:return [1]\n\n\tret = []\n\n\ti = 2\n\n\twhile i*i<=n:\n\n\t\twhile n%i==0:\n\n\t\t\tn \/\/= i\n\n\t\t\tret.append(i)\n\n\t\ti += 1\n\n\tif n!=1:ret.append(n)\n\n\treturn ret\n\n\t\n\nfrom operator import mul\n\nfrom functools import reduce\n\ndef cmb(n,r):\n\n\tif n < r:return 0\n\n\tr = min(n-r,r)\n\n\tif r==0:return 1\n\n\tu = reduce(mul, list(range(n, n-r, -1)))\n\n\td = reduce(mul, list(range(1,r+1)))\n\n\treturn u\/\/d\n\n\n\ndef main():\n\n\tn,m = list(map(int,input().split()))\n\n\tmod = 10**9+7\n\n\tif m==1:\n\n\t\tprint((1))\n\n\t\texit()\n\n\tans=1\n\n\tfor v in list(Counter(factorization(m)).values()):\n\n\t\tans*=cmb(n+v-1,v)\n\n\t\tans%=mod\n\n\tprint(ans)\n\n\t\n\nif __name__==\"__main__\":main()","code_v0_loc":40,"code_v1_loc":36,"code_v0_num_chars":723,"code_v1_num_chars":658,"code_v0_no_empty_lines":"from collections import Counter\n\n\ndef factorization(n) -> list:\n    if n == 1:\n        return [1]\n    ret = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            n \/\/= i\n            ret.append(i)\n        i += 1\n    if n != 1:\n        ret.append(n)\n    return ret\n\n\nn, m = list(map(int, input().split()))\nmod = 10**9 + 7\nif m == 1:\n    print((1))\n    exit()\nfactors = Counter(factorization(m))\nmx = n + max(factors.values())\nfac = [1] * (mx + 1)\ninv = [1] * (mx + 1)\nfor i in range(1, mx + 1):\n    fac[i] = fac[i - 1] * i % mod\ninv[-1] = pow(fac[-1], mod - 2, mod)\nfor i in range(mx - 1, -1, -1):\n    inv[i] = inv[i + 1] * (i + 1) % mod\n\n\ndef cmb(n, r):\n    assert n >= r >= 0\n    return fac[n] * inv[n - r] * inv[r] % mod\n\n\nans = 1\nfor v in list(factors.values()):\n    ans *= cmb(n + v - 1, v)\n    ans %= mod\nprint(ans)\n","code_v1_no_empty_lines":"from collections import Counter\n\n\ndef factorization(n) -> list:\n    if n == 1:\n        return [1]\n    ret = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            n \/\/= i\n            ret.append(i)\n        i += 1\n    if n != 1:\n        ret.append(n)\n    return ret\n\n\nfrom operator import mul\nfrom functools import reduce\n\n\ndef cmb(n, r):\n    if n < r:\n        return 0\n    r = min(n - r, r)\n    if r == 0:\n        return 1\n    u = reduce(mul, list(range(n, n - r, -1)))\n    d = reduce(mul, list(range(1, r + 1)))\n    return u \/\/ d\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    mod = 10**9 + 7\n    if m == 1:\n        print((1))\n        exit()\n    ans = 1\n    for v in list(Counter(factorization(m)).values()):\n        ans *= cmb(n + v - 1, v)\n        ans %= mod\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":10.0,"diff":["-n, m = list(map(int, input().split()))","-mod = 10**9 + 7","-if m == 1:","-    print((1))","-    exit()","-factors = Counter(factorization(m))","-mx = n + max(factors.values())","-fac = [1] * (mx + 1)","-inv = [1] * (mx + 1)","-for i in range(1, mx + 1):","-    fac[i] = fac[i - 1] * i % mod","-inv[-1] = pow(fac[-1], mod - 2, mod)","-for i in range(mx - 1, -1, -1):","-    inv[i] = inv[i + 1] * (i + 1) % mod","+from operator import mul","+from functools import reduce","-    assert n >= r >= 0","-    return fac[n] * inv[n - r] * inv[r] % mod","+    if n < r:","+        return 0","+    r = min(n - r, r)","+    if r == 0:","+        return 1","+    u = reduce(mul, list(range(n, n - r, -1)))","+    d = reduce(mul, list(range(1, r + 1)))","+    return u \/\/ d","-ans = 1","-for v in list(factors.values()):","-    ans *= cmb(n + v - 1, v)","-    ans %= mod","-print(ans)","+def main():","+    n, m = list(map(int, input().split()))","+    mod = 10**9 + 7","+    if m == 1:","+        print((1))","+        exit()","+    ans = 1","+    for v in list(Counter(factorization(m)).values()):","+        ans *= cmb(n + v - 1, v)","+        ans %= mod","+    print(ans)","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.4340592513,"measured_runtime_v1":0.2881658652,"runtime_lift":1.5062826786,"key":["s289323588","s397757622"]}
{"user_id":"u346812984","problem_id":"p02725","language":"python","submission_id_v0":"s133823600","submission_id_v1":"s446849062","cpu_time_v0":124,"cpu_time_v1":97,"memory_v0":26420,"memory_v1":26444,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":21.77,"input":"K, N = list(map(int, input().split()))\n\nA = list(map(int, input().split()))\n\n\n\ndiff = A[0] + K - A[-1]\n\nans = A[-1] - A[0]\n\nfor i in range(1, N):\n\n    dist = K - A[i] + A[i - 1]\n\n    if dist < ans:\n\n        ans = dist\n\n\n\nprint(ans)\n","target":"import sys\n\n\n\n\n\ndef input():\n\n    return sys.stdin.readline().strip()\n\n\n\n\n\ndef main():\n\n    K, N = list(map(int, input().split()))\n\n    A = list(map(int, input().split()))\n\n\n\n    ans = [K - A[i] + A[i - 1] for i in range(1, N)]\n\n    print((min(min(ans), A[-1] - A[0])))\n\n\n\n\n\nmain()\n","code_v0_loc":11,"code_v1_loc":16,"code_v0_num_chars":226,"code_v1_num_chars":274,"code_v0_no_empty_lines":"K, N = list(map(int, input().split()))\nA = list(map(int, input().split()))\ndiff = A[0] + K - A[-1]\nans = A[-1] - A[0]\nfor i in range(1, N):\n    dist = K - A[i] + A[i - 1]\n    if dist < ans:\n        ans = dist\nprint(ans)\n","code_v1_no_empty_lines":"import sys\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef main():\n    K, N = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    ans = [K - A[i] + A[i - 1] for i in range(1, N)]\n    print((min(min(ans), A[-1] - A[0])))\n\n\nmain()\n","code_same":false,"relative_loc_diff_percent":31.25,"diff":["-K, N = list(map(int, input().split()))","-A = list(map(int, input().split()))","-diff = A[0] + K - A[-1]","-ans = A[-1] - A[0]","-for i in range(1, N):","-    dist = K - A[i] + A[i - 1]","-    if dist < ans:","-        ans = dist","-print(ans)","+import sys","+","+","+def input():","+    return sys.stdin.readline().strip()","+","+","+def main():","+    K, N = list(map(int, input().split()))","+    A = list(map(int, input().split()))","+    ans = [K - A[i] + A[i - 1] for i in range(1, N)]","+    print((min(min(ans), A[-1] - A[0])))","+","+","+main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.2153115588,"measured_runtime_v1":0.0063990955,"runtime_lift":33.6471865365,"key":["s133823600","s446849062"]}
{"user_id":"u254871849","problem_id":"p02837","language":"python","submission_id_v0":"s091639988","submission_id_v1":"s838166037","cpu_time_v0":602,"cpu_time_v1":120,"memory_v0":12496,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":80.07,"input":"import sys\n\nimport numpy as np\n\n\n\nn = int(sys.stdin.readline().rstrip())\n\nx = []\n\ny = []\n\nfor i in range(n):\n\n    a = int(sys.stdin.readline().rstrip())\n\n    xy = [sys.stdin.readline().split() for _ in range(a)]\n\n    if not xy:\n\n        x.append(None)\n\n        y.append(None)\n\n        continue\n\n    xi, yi = np.array(xy, np.int64).T\n\n    x.append(xi-1)\n\n    y.append(yi)\n\n\n\ndef main():\n\n\n\n    ans = 0\n\n    for comb in range(2 ** n):\n\n        cnt = 0\n\n        for i in range(n):\n\n            if not comb >> i & 1:\n\n                continue\n\n            if x[i] is None:\n\n                cnt += 1\n\n                continue\n\n            if np.count_nonzero(comb >> x[i] & 1 ^ y[i]):\n\n                break\n\n            cnt += 1\n\n        else:\n\n            ans = max(ans, cnt)\n\n    return ans\n\n                \n\nif __name__ == '__main__':\n\n    ans = main()\n\n    print(ans)","target":"import sys\n\n\n\nn = int(sys.stdin.readline().rstrip())\n\nxy = [[] for _ in range(n)]\n\nfor i in range(n):\n\n    a = int(sys.stdin.readline().rstrip())\n\n    for j in range(a):\n\n        x, y = list(map(int, sys.stdin.readline().split()))\n\n        xy[i].append((x-1, y))\n\n\n\ndef main():\n\n    ans = 0\n\n    for comb in range(2 ** n):\n\n        cnt = 0\n\n        for i in range(n):\n\n            if comb >> i & 1 ^ 1:\n\n                continue\n\n            for x, y in xy[i]:\n\n                if comb >> x & 1 ^ y:\n\n                    break\n\n            else:\n\n                cnt += 1\n\n                continue\n\n            break\n\n        else:\n\n            ans = max(ans, cnt)\n\n    return ans\n\n                \n\nif __name__ == '__main__':\n\n    ans = main()\n\n    print(ans)","code_v0_loc":38,"code_v1_loc":31,"code_v0_num_chars":868,"code_v1_num_chars":754,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nn = int(sys.stdin.readline().rstrip())\nx = []\ny = []\nfor i in range(n):\n    a = int(sys.stdin.readline().rstrip())\n    xy = [sys.stdin.readline().split() for _ in range(a)]\n    if not xy:\n        x.append(None)\n        y.append(None)\n        continue\n    xi, yi = np.array(xy, np.int64).T\n    x.append(xi - 1)\n    y.append(yi)\n\n\ndef main():\n    ans = 0\n    for comb in range(2**n):\n        cnt = 0\n        for i in range(n):\n            if not comb >> i & 1:\n                continue\n            if x[i] is None:\n                cnt += 1\n                continue\n            if np.count_nonzero(comb >> x[i] & 1 ^ y[i]):\n                break\n            cnt += 1\n        else:\n            ans = max(ans, cnt)\n    return ans\n\n\nif __name__ == \"__main__\":\n    ans = main()\n    print(ans)\n","code_v1_no_empty_lines":"import sys\n\nn = int(sys.stdin.readline().rstrip())\nxy = [[] for _ in range(n)]\nfor i in range(n):\n    a = int(sys.stdin.readline().rstrip())\n    for j in range(a):\n        x, y = list(map(int, sys.stdin.readline().split()))\n        xy[i].append((x - 1, y))\n\n\ndef main():\n    ans = 0\n    for comb in range(2**n):\n        cnt = 0\n        for i in range(n):\n            if comb >> i & 1 ^ 1:\n                continue\n            for x, y in xy[i]:\n                if comb >> x & 1 ^ y:\n                    break\n            else:\n                cnt += 1\n                continue\n            break\n        else:\n            ans = max(ans, cnt)\n    return ans\n\n\nif __name__ == \"__main__\":\n    ans = main()\n    print(ans)\n","code_same":false,"relative_loc_diff_percent":18.4210526316,"diff":["-import numpy as np","-x = []","-y = []","+xy = [[] for _ in range(n)]","-    xy = [sys.stdin.readline().split() for _ in range(a)]","-    if not xy:","-        x.append(None)","-        y.append(None)","-        continue","-    xi, yi = np.array(xy, np.int64).T","-    x.append(xi - 1)","-    y.append(yi)","+    for j in range(a):","+        x, y = list(map(int, sys.stdin.readline().split()))","+        xy[i].append((x - 1, y))","-            if not comb >> i & 1:","+            if comb >> i & 1 ^ 1:","-            if x[i] is None:","+            for x, y in xy[i]:","+                if comb >> x & 1 ^ y:","+                    break","+            else:","-            if np.count_nonzero(comb >> x[i] & 1 ^ y[i]):","-                break","-            cnt += 1","+            break"],"diff_only_import_comment":false,"measured_runtime_v0":1.7658371491,"measured_runtime_v1":0.3071119606,"runtime_lift":5.7498156221,"key":["s091639988","s838166037"]}
{"user_id":"u392319141","problem_id":"p03837","language":"python","submission_id_v0":"s034918940","submission_id_v1":"s264008956","cpu_time_v0":415,"cpu_time_v1":231,"memory_v0":25716,"memory_v1":41836,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":44.34,"input":"from scipy.sparse.csgraph import csgraph_from_dense, floyd_warshall\n\n\n\nINF = float('inf')\n\n\n\ndef sol():\n\n    N, M = list(map(int, input().split()))\n\n\n\n    edges = []\n\n\n\n    for _ in range(M):\n\n        fr, to, cost = list(map(int, input().split()))\n\n        fr -= 1\n\n        to -= 1\n\n        edges.append((fr, to, cost))\n\n\n\n    graph = [[INF] * N for _ in range(N)]\n\n    for fr, to, cost in edges:\n\n        graph[fr][to] = cost\n\n\n\n    graph = csgraph_from_dense(graph, null_value=INF)\n\n\n\n    dist = floyd_warshall(graph, directed=False)\n\n    ans = (graph > dist).sum()\n\n    print(ans)\n\n\n\nsol()","target":"N, M = list(map(int, input().split()))\n\nINF = 10**18\n\n\n\nminDist = [[INF] * N for _ in range(N)]\n\nfor i in range(N):\n\n    minDist[i][i] = 0\n\n\n\nedges = []\n\nfor _ in range(M):\n\n    fr, to, d = list(map(int, input().split()))\n\n    fr -= 1\n\n    to -= 1\n\n    edges.append((fr, to, d))\n\n    minDist[fr][to] = d\n\n    minDist[to][fr] = d\n\n\n\nfor k in range(N):\n\n    for i in range(N):\n\n        for j in range(N):\n\n            d = minDist[i][k] + minDist[k][j]\n\n            if minDist[i][j] > d:\n\n                minDist[i][j] = d\n\n\n\nans = 0\n\nfor fr, to, d in edges:\n\n    if minDist[fr][to] < d:\n\n        ans += 1\n\nprint(ans)\n","code_v0_loc":26,"code_v1_loc":28,"code_v0_num_chars":580,"code_v1_num_chars":603,"code_v0_no_empty_lines":"from scipy.sparse.csgraph import csgraph_from_dense, floyd_warshall\n\nINF = float(\"inf\")\n\n\ndef sol():\n    N, M = list(map(int, input().split()))\n    edges = []\n    for _ in range(M):\n        fr, to, cost = list(map(int, input().split()))\n        fr -= 1\n        to -= 1\n        edges.append((fr, to, cost))\n    graph = [[INF] * N for _ in range(N)]\n    for fr, to, cost in edges:\n        graph[fr][to] = cost\n    graph = csgraph_from_dense(graph, null_value=INF)\n    dist = floyd_warshall(graph, directed=False)\n    ans = (graph > dist).sum()\n    print(ans)\n\n\nsol()\n","code_v1_no_empty_lines":"N, M = list(map(int, input().split()))\nINF = 10**18\nminDist = [[INF] * N for _ in range(N)]\nfor i in range(N):\n    minDist[i][i] = 0\nedges = []\nfor _ in range(M):\n    fr, to, d = list(map(int, input().split()))\n    fr -= 1\n    to -= 1\n    edges.append((fr, to, d))\n    minDist[fr][to] = d\n    minDist[to][fr] = d\nfor k in range(N):\n    for i in range(N):\n        for j in range(N):\n            d = minDist[i][k] + minDist[k][j]\n            if minDist[i][j] > d:\n                minDist[i][j] = d\nans = 0\nfor fr, to, d in edges:\n    if minDist[fr][to] < d:\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":7.1428571429,"diff":["-from scipy.sparse.csgraph import csgraph_from_dense, floyd_warshall","-","-INF = float(\"inf\")","-","-","-def sol():","-    N, M = list(map(int, input().split()))","-    edges = []","-    for _ in range(M):","-        fr, to, cost = list(map(int, input().split()))","-        fr -= 1","-        to -= 1","-        edges.append((fr, to, cost))","-    graph = [[INF] * N for _ in range(N)]","-    for fr, to, cost in edges:","-        graph[fr][to] = cost","-    graph = csgraph_from_dense(graph, null_value=INF)","-    dist = floyd_warshall(graph, directed=False)","-    ans = (graph > dist).sum()","-    print(ans)","-","-","-sol()","+N, M = list(map(int, input().split()))","+INF = 10**18","+minDist = [[INF] * N for _ in range(N)]","+for i in range(N):","+    minDist[i][i] = 0","+edges = []","+for _ in range(M):","+    fr, to, d = list(map(int, input().split()))","+    fr -= 1","+    to -= 1","+    edges.append((fr, to, d))","+    minDist[fr][to] = d","+    minDist[to][fr] = d","+for k in range(N):","+    for i in range(N):","+        for j in range(N):","+            d = minDist[i][k] + minDist[k][j]","+            if minDist[i][j] > d:","+                minDist[i][j] = d","+ans = 0","+for fr, to, d in edges:","+    if minDist[fr][to] < d:","+        ans += 1","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.8897204494,"measured_runtime_v1":0.2072854909,"runtime_lift":9.1165109578,"key":["s034918940","s264008956"]}
{"user_id":"u648881683","problem_id":"p03371","language":"python","submission_id_v0":"s115897723","submission_id_v1":"s652896869","cpu_time_v0":101,"cpu_time_v1":18,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":82.18,"input":"import sys\n\ninput = lambda: sys.stdin.readline().rstrip() \n\n\n\ndef resolve():\n\n    A, B, C, X, Y = list(map(int, input().split()))\n\n\n\n    ans = float('inf')\n\n    for i in range(0, max(X, Y)*2+1, 2):\n\n        ans = min(A*max(X-i\/\/2, 0)+B*max(Y-i\/\/2, 0)+C*i, ans)\n\n    print(ans)\n\n\n\nif __name__ == '__main__':\n\n    resolve()\n","target":"import sys\n\ninput = lambda: sys.stdin.readline().rstrip() \n\n\n\ndef resolve():\n\n    A, B, C, X, Y = list(map(int, input().split()))\n\n\n\n    ans = 0\n\n    if A+B > 2*C:\n\n        ans = 2*C*min(X, Y)+min((A if X>Y else B)*abs(X-Y), 2*C*abs(X-Y))\n\n    else:\n\n        ans = A*X+B*Y\n\n    \n\n    print(ans)\n\n\n\nif __name__ == '__main__':\n\n    resolve()\n","code_v0_loc":13,"code_v1_loc":16,"code_v0_num_chars":316,"code_v1_num_chars":334,"code_v0_no_empty_lines":"import sys\n\ninput = lambda: sys.stdin.readline().rstrip()\n\n\ndef resolve():\n    A, B, C, X, Y = list(map(int, input().split()))\n    ans = float(\"inf\")\n    for i in range(0, max(X, Y) * 2 + 1, 2):\n        ans = min(A * max(X - i \/\/ 2, 0) + B * max(Y - i \/\/ 2, 0) + C * i, ans)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    resolve()\n","code_v1_no_empty_lines":"import sys\n\ninput = lambda: sys.stdin.readline().rstrip()\n\n\ndef resolve():\n    A, B, C, X, Y = list(map(int, input().split()))\n    ans = 0\n    if A + B > 2 * C:\n        ans = 2 * C * min(X, Y) + min(\n            (A if X > Y else B) * abs(X - Y), 2 * C * abs(X - Y)\n        )\n    else:\n        ans = A * X + B * Y\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    resolve()\n","code_same":false,"relative_loc_diff_percent":18.75,"diff":["-    ans = float(\"inf\")","-    for i in range(0, max(X, Y) * 2 + 1, 2):","-        ans = min(A * max(X - i \/\/ 2, 0) + B * max(Y - i \/\/ 2, 0) + C * i, ans)","+    ans = 0","+    if A + B > 2 * C:","+        ans = 2 * C * min(X, Y) + min(","+            (A if X > Y else B) * abs(X - Y), 2 * C * abs(X - Y)","+        )","+    else:","+        ans = A * X + B * Y"],"diff_only_import_comment":false,"measured_runtime_v0":0.4475863097,"measured_runtime_v1":0.2669118404,"runtime_lift":1.6769069102,"key":["s115897723","s652896869"]}
{"user_id":"u556589653","problem_id":"p03416","language":"python","submission_id_v0":"s253072561","submission_id_v1":"s839464643","cpu_time_v0":58,"cpu_time_v1":50,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.79,"input":"A,B = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(A,B+1):\n\n    i = str(i)\n\n    if i[0] == i[4]:\n\n        if i[1] == i[3]:\n\n            ans += 1\n\n        else:\n\n            ans += 0\n\n    else:\n\n        ans += 0\n\nprint(ans)","target":"A,B = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(A,B+1):\n\n    k = str(i)\n\n    if k[0] == k[4] and k[1] == k[3]:\n\n        ans += 1\n\nprint(ans)","code_v0_loc":12,"code_v1_loc":7,"code_v0_num_chars":227,"code_v1_num_chars":148,"code_v0_no_empty_lines":"A, B = list(map(int, input().split()))\nans = 0\nfor i in range(A, B + 1):\n    i = str(i)\n    if i[0] == i[4]:\n        if i[1] == i[3]:\n            ans += 1\n        else:\n            ans += 0\n    else:\n        ans += 0\nprint(ans)\n","code_v1_no_empty_lines":"A, B = list(map(int, input().split()))\nans = 0\nfor i in range(A, B + 1):\n    k = str(i)\n    if k[0] == k[4] and k[1] == k[3]:\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":41.6666666667,"diff":["-    i = str(i)","-    if i[0] == i[4]:","-        if i[1] == i[3]:","-            ans += 1","-        else:","-            ans += 0","-    else:","-        ans += 0","+    k = str(i)","+    if k[0] == k[4] and k[1] == k[3]:","+        ans += 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.1907642818,"measured_runtime_v1":0.0059664835,"runtime_lift":31.9726487264,"key":["s253072561","s839464643"]}
{"user_id":"u312025627","problem_id":"p03568","language":"python","submission_id_v0":"s088632051","submission_id_v1":"s935108099","cpu_time_v0":196,"cpu_time_v1":167,"memory_v0":41068,"memory_v1":38256,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.8,"input":"def main():\n\n    N = int(input())\n\n    A = [int(i) for i in input().split()]\n\n    if N == 1:\n\n        return print(1 if A[0] % 2 == 0 else 2)\n\n    ans = 0\n\n    d = (-1, 0, 1)\n\n    from itertools import product\n\n    for i in product(range(3), repeat=N):\n\n        cur = 1\n\n        for j in range(N):\n\n            cur *= (A[j] + d[i[j]])\n\n        if cur % 2 == 0:\n\n            ans += 1\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"def main():\n\n    N = int(eval(input()))\n\n    A = [int(i) for i in input().split()]\n\n    ans = 3**N\n\n    cnt = len([a for a in A if a % 2 == 0])\n\n    ans -= 2**cnt\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":19,"code_v1_loc":11,"code_v0_num_chars":443,"code_v1_num_chars":217,"code_v0_no_empty_lines":"def main():\n    N = int(input())\n    A = [int(i) for i in input().split()]\n    if N == 1:\n        return print(1 if A[0] % 2 == 0 else 2)\n    ans = 0\n    d = (-1, 0, 1)\n    from itertools import product\n\n    for i in product(range(3), repeat=N):\n        cur = 1\n        for j in range(N):\n            cur *= A[j] + d[i[j]]\n        if cur % 2 == 0:\n            ans += 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def main():\n    N = int(eval(input()))\n    A = [int(i) for i in input().split()]\n    ans = 3**N\n    cnt = len([a for a in A if a % 2 == 0])\n    ans -= 2**cnt\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":42.1052631579,"diff":["-    N = int(input())","+    N = int(eval(input()))","-    if N == 1:","-        return print(1 if A[0] % 2 == 0 else 2)","-    ans = 0","-    d = (-1, 0, 1)","-    from itertools import product","-","-    for i in product(range(3), repeat=N):","-        cur = 1","-        for j in range(N):","-            cur *= A[j] + d[i[j]]","-        if cur % 2 == 0:","-            ans += 1","+    ans = 3**N","+    cnt = len([a for a in A if a % 2 == 0])","+    ans -= 2**cnt"],"diff_only_import_comment":false,"measured_runtime_v0":0.4432550566,"measured_runtime_v1":0.2109588499,"runtime_lift":2.1011446393,"key":["s088632051","s935108099"]}
{"user_id":"u893063840","problem_id":"p02982","language":"python","submission_id_v0":"s467181004","submission_id_v1":"s228678870","cpu_time_v0":173,"cpu_time_v1":20,"memory_v0":13416,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.44,"input":"import numpy as\tnp\n\n\n\nn, d = list(map(int, input().split()))\n\nx = []\n\nfor i in range(n):\n\n    x.append(list(map(int, input().split())))\n\n\n\nx = np.array(x)\n\n\n\ncount =\t0\n\nfor i in range(n):\n\n    for j in range(i+1, n):\n\n        dist = np.linalg.norm(x[i] - x[j])\n\n        if dist == int(dist):\n\n            count += 1\n\n\n\nprint(count)","target":"n, d = list(map(int, input().split()))\n\nx = [list(map(int, input().split())) for _ in range(n)]\n\n\n\n\n\ndef dist(a, b):\n\n    sm = 0\n\n    for ea, eb in zip(a, b):\n\n        sm += (ea - eb) ** 2\n\n\n\n    return sm ** 0.5\n\n\n\n\n\nans = 0\n\nfor i in range(n):\n\n    for j in range(i + 1, n):\n\n        dst = dist(x[i], x[j])\n\n        for k in range(int(16000 ** 0.5) + 1):\n\n            if k == dst:\n\n                ans += 1\n\n                break\n\n\n\nprint(ans)\n","code_v0_loc":17,"code_v1_loc":22,"code_v0_num_chars":325,"code_v1_num_chars":440,"code_v0_no_empty_lines":"import numpy as np\n\nn, d = list(map(int, input().split()))\nx = []\nfor i in range(n):\n    x.append(list(map(int, input().split())))\nx = np.array(x)\ncount = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        dist = np.linalg.norm(x[i] - x[j])\n        if dist == int(dist):\n            count += 1\nprint(count)\n","code_v1_no_empty_lines":"n, d = list(map(int, input().split()))\nx = [list(map(int, input().split())) for _ in range(n)]\n\n\ndef dist(a, b):\n    sm = 0\n    for ea, eb in zip(a, b):\n        sm += (ea - eb) ** 2\n    return sm**0.5\n\n\nans = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        dst = dist(x[i], x[j])\n        for k in range(int(16000**0.5) + 1):\n            if k == dst:\n                ans += 1\n                break\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":22.7272727273,"diff":["-import numpy as np","+n, d = list(map(int, input().split()))","+x = [list(map(int, input().split())) for _ in range(n)]","-n, d = list(map(int, input().split()))","-x = []","-for i in range(n):","-    x.append(list(map(int, input().split())))","-x = np.array(x)","-count = 0","+","+def dist(a, b):","+    sm = 0","+    for ea, eb in zip(a, b):","+        sm += (ea - eb) ** 2","+    return sm**0.5","+","+","+ans = 0","-        dist = np.linalg.norm(x[i] - x[j])","-        if dist == int(dist):","-            count += 1","-print(count)","+        dst = dist(x[i], x[j])","+        for k in range(int(16000**0.5) + 1):","+            if k == dst:","+                ans += 1","+                break","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.4700319977,"measured_runtime_v1":0.24048966,"runtime_lift":6.1126619642,"key":["s467181004","s228678870"]}
{"user_id":"u102461423","problem_id":"p03254","language":"python","submission_id_v0":"s442957356","submission_id_v1":"s444535945","cpu_time_v0":149,"cpu_time_v1":18,"memory_v0":14444,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.92,"input":"import numpy as np\n\nN,x = list(map(int,input().split()))\n\nA = np.array(input().split(), dtype = np.int64)\n\nA.sort()\n\nnp.cumsum(A, out = A)\n\nanswer = (A <= x).sum()\n\n\n\nif answer == N and A[-1] != x:\n\n  answer -= 1\n\nprint(answer)\n","target":"import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nfrom bisect import bisect_right\n\nimport itertools\n\n\n\nN,X,*A = list(map(int,read().split()))\n\n\n\nA.sort()\n\nAcum = list(itertools.accumulate(A))\n\n\n\nanswer = bisect_right(Acum,X)\n\nif answer == N:\n\n    if Acum[-1] < X:\n\n        answer -= 1\n\nprint(answer)","code_v0_loc":10,"code_v1_loc":18,"code_v0_num_chars":222,"code_v1_num_chars":365,"code_v0_no_empty_lines":"import numpy as np\n\nN, x = list(map(int, input().split()))\nA = np.array(input().split(), dtype=np.int64)\nA.sort()\nnp.cumsum(A, out=A)\nanswer = (A <= x).sum()\nif answer == N and A[-1] != x:\n    answer -= 1\nprint(answer)\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nfrom bisect import bisect_right\nimport itertools\n\nN, X, *A = list(map(int, read().split()))\nA.sort()\nAcum = list(itertools.accumulate(A))\nanswer = bisect_right(Acum, X)\nif answer == N:\n    if Acum[-1] < X:\n        answer -= 1\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":44.4444444444,"diff":["-import numpy as np","+import sys","-N, x = list(map(int, input().split()))","-A = np.array(input().split(), dtype=np.int64)","+read = sys.stdin.buffer.read","+readline = sys.stdin.buffer.readline","+readlines = sys.stdin.buffer.readlines","+from bisect import bisect_right","+import itertools","+","+N, X, *A = list(map(int, read().split()))","-np.cumsum(A, out=A)","-answer = (A <= x).sum()","-if answer == N and A[-1] != x:","-    answer -= 1","+Acum = list(itertools.accumulate(A))","+answer = bisect_right(Acum, X)","+if answer == N:","+    if Acum[-1] < X:","+        answer -= 1"],"diff_only_import_comment":false,"measured_runtime_v0":1.3272022178,"measured_runtime_v1":0.2483567362,"runtime_lift":5.3439348502,"key":["s442957356","s444535945"]}
{"user_id":"u777923818","problem_id":"p03425","language":"python","submission_id_v0":"s258539301","submission_id_v1":"s541501179","cpu_time_v0":165,"cpu_time_v1":142,"memory_v0":3316,"memory_v1":9336,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.94,"input":"# -*- coding: utf-8 -*-\n\nfrom collections import defaultdict\n\nfrom itertools import combinations\n\nN = int(eval(input()))\n\nC = [0, 0, 0, 0, 0, 0]\n\nD = defaultdict(int)\n\nfor i, m in enumerate(\"MARCH\", start=1):\n\n    D[m] = i\n\n\n\nfor _ in range(N):\n\n    C[D[input()[0]]] += 1\n\n\n\nans = 0\n\nfor a, b, c in combinations(list(range(1, 6)), r=3):\n\n    ans += C[a]*C[b]*C[c]\n\nprint(ans)","target":"from collections import defaultdict\n\nfrom itertools import combinations\n\ndef inpl(): return list(map(int, input().split()))\n\n\n\nC = defaultdict(int)\n\nN = int(eval(input()))\n\nfor _ in range(N):\n\n    C[input()[0]] += 1\n\n\n\nres = 0\n\nfor H in combinations(\"MARCH\", r=3):\n\n    res += C[H[0]] * C[H[1]] * C[H[2]]\n\nprint(res)","code_v0_loc":16,"code_v1_loc":13,"code_v0_num_chars":363,"code_v1_num_chars":310,"code_v0_no_empty_lines":"# -*- coding: utf-8 -*-\nfrom collections import defaultdict\nfrom itertools import combinations\n\nN = int(eval(input()))\nC = [0, 0, 0, 0, 0, 0]\nD = defaultdict(int)\nfor i, m in enumerate(\"MARCH\", start=1):\n    D[m] = i\nfor _ in range(N):\n    C[D[input()[0]]] += 1\nans = 0\nfor a, b, c in combinations(list(range(1, 6)), r=3):\n    ans += C[a] * C[b] * C[c]\nprint(ans)\n","code_v1_no_empty_lines":"from collections import defaultdict\nfrom itertools import combinations\n\n\ndef inpl():\n    return list(map(int, input().split()))\n\n\nC = defaultdict(int)\nN = int(eval(input()))\nfor _ in range(N):\n    C[input()[0]] += 1\nres = 0\nfor H in combinations(\"MARCH\", r=3):\n    res += C[H[0]] * C[H[1]] * C[H[2]]\nprint(res)\n","code_same":false,"relative_loc_diff_percent":18.75,"diff":["-# -*- coding: utf-8 -*-","+","+def inpl():","+    return list(map(int, input().split()))","+","+","+C = defaultdict(int)","-C = [0, 0, 0, 0, 0, 0]","-D = defaultdict(int)","-for i, m in enumerate(\"MARCH\", start=1):","-    D[m] = i","-    C[D[input()[0]]] += 1","-ans = 0","-for a, b, c in combinations(list(range(1, 6)), r=3):","-    ans += C[a] * C[b] * C[c]","-print(ans)","+    C[input()[0]] += 1","+res = 0","+for H in combinations(\"MARCH\", r=3):","+    res += C[H[0]] * C[H[1]] * C[H[2]]","+print(res)"],"diff_only_import_comment":false,"measured_runtime_v0":0.388673193,"measured_runtime_v1":0.2150466468,"runtime_lift":1.8073901578,"key":["s258539301","s541501179"]}
{"user_id":"u964904181","problem_id":"p03796","language":"python","submission_id_v0":"s459904551","submission_id_v1":"s685671735","cpu_time_v0":153,"cpu_time_v1":46,"memory_v0":9880,"memory_v1":9092,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":69.93,"input":"import math\n\n\n\nN = int(eval(input()))\n\n\n\nprint((math.factorial(N) % (1000000000 + 7)))\n","target":"import math\n\n\n\nN = int(eval(input()))\n\n\n\np = 1\n\nfor i in range(2, N+1):\n\n  p *= i\n\n  p = p % (1000000000 + 7)\n\n  \n\nprint(p)\n","code_v0_loc":5,"code_v1_loc":10,"code_v0_num_chars":79,"code_v1_num_chars":118,"code_v0_no_empty_lines":"import math\n\nN = int(eval(input()))\nprint((math.factorial(N) % (1000000000 + 7)))\n","code_v1_no_empty_lines":"import math\n\nN = int(eval(input()))\np = 1\nfor i in range(2, N + 1):\n    p *= i\n    p = p % (1000000000 + 7)\nprint(p)\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-print((math.factorial(N) % (1000000000 + 7)))","+p = 1","+for i in range(2, N + 1):","+    p *= i","+    p = p % (1000000000 + 7)","+print(p)"],"diff_only_import_comment":false,"measured_runtime_v0":0.5259809067,"measured_runtime_v1":0.2554857254,"runtime_lift":2.0587487065,"key":["s459904551","s685671735"]}
{"user_id":"u127499732","problem_id":"p03309","language":"python","submission_id_v0":"s031191514","submission_id_v1":"s488102802","cpu_time_v0":214,"cpu_time_v1":169,"memory_v0":27212,"memory_v1":25180,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":21.03,"input":"def main():\n\n    from statistics import median\n\n\n\n    n, *a, = list(map(int, open(0).read().split()))\n\n    a = [x - i for i, x in enumerate(a, 1)]\n\n    a.sort()\n\n    m = int(median(a))\n\n\n\n    ans = sum([abs(x - m) for x in a])\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"def main():\n\n    n, *a, = list(map(int, open(0).read().split()))\n\n    a = [x - i for i, x in enumerate(a, 1)]\n\n    a.sort()\n\n    if n % 2 == 0:\n\n        ans = sum(a[n \/\/ 2:]) - sum(a[:n \/\/ 2])\n\n    else:\n\n        ans = sum(a[n \/\/ 2 + 1:]) - sum(a[:n \/\/ 2])\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":14,"code_v1_loc":13,"code_v0_num_chars":281,"code_v1_num_chars":311,"code_v0_no_empty_lines":"def main():\n    from statistics import median\n\n    (\n        n,\n        *a,\n    ) = list(map(int, open(0).read().split()))\n    a = [x - i for i, x in enumerate(a, 1)]\n    a.sort()\n    m = int(median(a))\n    ans = sum([abs(x - m) for x in a])\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def main():\n    (\n        n,\n        *a,\n    ) = list(map(int, open(0).read().split()))\n    a = [x - i for i, x in enumerate(a, 1)]\n    a.sort()\n    if n % 2 == 0:\n        ans = sum(a[n \/\/ 2 :]) - sum(a[: n \/\/ 2])\n    else:\n        ans = sum(a[n \/\/ 2 + 1 :]) - sum(a[: n \/\/ 2])\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":7.1428571429,"diff":["-    from statistics import median","-","-    m = int(median(a))","-    ans = sum([abs(x - m) for x in a])","+    if n % 2 == 0:","+        ans = sum(a[n \/\/ 2 :]) - sum(a[: n \/\/ 2])","+    else:","+        ans = sum(a[n \/\/ 2 + 1 :]) - sum(a[: n \/\/ 2])"],"diff_only_import_comment":false,"measured_runtime_v0":0.2784859991,"measured_runtime_v1":0.2092100859,"runtime_lift":1.3311308484,"key":["s031191514","s488102802"]}
{"user_id":"u578323547","problem_id":"p02690","language":"python","submission_id_v0":"s188140590","submission_id_v1":"s074739481","cpu_time_v0":1208,"cpu_time_v1":136,"memory_v0":9100,"memory_v1":9028,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.74,"input":"x = int(eval(input()))\n\n\n\nfor a in range(10**4):\n\n    for b in range(10**4):\n\n        if(a**5 + b**5 == x):\n\n            print((a, -b))\n\n            break\n\n        elif(a**5 - b**5 == x):\n\n            print((a, b))\n\n            break\n\n    else:\n\n        continue\n\n    break","target":"x = int(eval(input()))\n\n\n\nfor a in range(10**3):\n\n    for b in range(10**3):\n\n        if(a**5 + b**5 == x):\n\n            print((a, -b))\n\n            break\n\n        elif(a**5 - b**5 == x):\n\n            print((a, b))\n\n            break\n\n    else:\n\n        continue\n\n    break\n","code_v0_loc":13,"code_v1_loc":13,"code_v0_num_chars":263,"code_v1_num_chars":264,"code_v0_no_empty_lines":"x = int(eval(input()))\nfor a in range(10**4):\n    for b in range(10**4):\n        if a**5 + b**5 == x:\n            print((a, -b))\n            break\n        elif a**5 - b**5 == x:\n            print((a, b))\n            break\n    else:\n        continue\n    break\n","code_v1_no_empty_lines":"x = int(eval(input()))\nfor a in range(10**3):\n    for b in range(10**3):\n        if a**5 + b**5 == x:\n            print((a, -b))\n            break\n        elif a**5 - b**5 == x:\n            print((a, b))\n            break\n    else:\n        continue\n    break\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-for a in range(10**4):","-    for b in range(10**4):","+for a in range(10**3):","+    for b in range(10**3):"],"diff_only_import_comment":false,"measured_runtime_v0":0.4177670181,"measured_runtime_v1":0.3141400119,"runtime_lift":1.3298752221,"key":["s188140590","s074739481"]}
{"user_id":"u159994501","problem_id":"p03037","language":"python","submission_id_v0":"s060142514","submission_id_v1":"s502871070","cpu_time_v0":326,"cpu_time_v1":290,"memory_v0":10996,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.04,"input":"N, M = list(map(int, input().split()))\n\nL, R = [], []\n\nlow = -float('INF')\n\nhigh = float('INF')\n\nfor i in range(M):\n\n    l, r = list(map(int, input().split()))\n\n    L.append(l)\n\n    R.append(r)\n\n    if l > low:\n\n        low = l\n\n    if r < high:\n\n        high = r\n\nprint((max(0, high - low + 1)))\n","target":"N, M = list(map(int, input().split()))\n\nlow = -float('INF')\n\nhigh = float('INF')\n\nfor i in range(M):\n\n    l, r = list(map(int, input().split()))\n\n    if l > low:\n\n        low = l\n\n    if r < high:\n\n        high = r\n\nprint((max(0, high - low + 1)))\n","code_v0_loc":13,"code_v1_loc":10,"code_v0_num_chars":283,"code_v1_num_chars":234,"code_v0_no_empty_lines":"N, M = list(map(int, input().split()))\nL, R = [], []\nlow = -float(\"INF\")\nhigh = float(\"INF\")\nfor i in range(M):\n    l, r = list(map(int, input().split()))\n    L.append(l)\n    R.append(r)\n    if l > low:\n        low = l\n    if r < high:\n        high = r\nprint((max(0, high - low + 1)))\n","code_v1_no_empty_lines":"N, M = list(map(int, input().split()))\nlow = -float(\"INF\")\nhigh = float(\"INF\")\nfor i in range(M):\n    l, r = list(map(int, input().split()))\n    if l > low:\n        low = l\n    if r < high:\n        high = r\nprint((max(0, high - low + 1)))\n","code_same":false,"relative_loc_diff_percent":23.0769230769,"diff":["-L, R = [], []","-    L.append(l)","-    R.append(r)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2778050728,"measured_runtime_v1":0.0913613791,"runtime_lift":3.0407276614,"key":["s060142514","s502871070"]}
{"user_id":"u070201429","problem_id":"p03837","language":"python","submission_id_v0":"s719627889","submission_id_v1":"s550164411","cpu_time_v0":1368,"cpu_time_v1":267,"memory_v0":27336,"memory_v1":71572,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":80.48,"input":"def main():\n\n    from sys import stdin\n\n    def input():\n\n        return stdin.readline().strip()\n\n\n\n    n, m = list(map(int, input().split()))\n\n    tree = [[] for _ in range(n)]\n\n    for _ in range(m):\n\n        i, j, k = list(map(int, input().split()))\n\n        i -= 1\n\n        j -= 1\n\n        tree[i].append((k, j))\n\n        tree[j].append((k, i))\n\n\n\n    # dijkstra\n\n    import heapq\n\n    from numpy import zeros\n\n\n\n    ans = 0\n\n    for i in range(n):\n\n        for j in tree[i]:\n\n            seen = zeros(n)\n\n            goal = j[1]\n\n            base = j[0]\n\n            seen[i] = 1\n\n            todo = []\n\n            heapq.heapify(todo)\n\n            for k in tree[i]:\n\n                if k[0] < base and k != j:\n\n                    heapq.heappush(todo, k)\n\n            while len(todo) > 0:\n\n                k = heapq.heappop(todo)\n\n                if k[1] == goal:\n\n                    if k[0] < base:\n\n                        ans += 1\n\n                    break\n\n                seen[k[1]] = 1\n\n                for l in tree[k[1]]:\n\n                    if seen[l[1]] == 0 and k[0] + l[0] < base:\n\n                        heapq.heappush(todo, (k[0] + l[0], l[1]))\n\n\n\n    print((ans \/\/ 2))\n\n\n\nmain()","target":"def main():\n\n    from sys import stdin\n\n    def input():\n\n        return stdin.readline().strip()\n\n\n\n    n, m = list(map(int, input().split()))\n\n    tree = [[] for _ in range(n)]\n\n    for _ in range(m):\n\n        i, j, k = list(map(int, input().split()))\n\n        i -= 1\n\n        j -= 1\n\n        tree[i].append((k, j))\n\n        tree[j].append((k, i))\n\n\n\n    # dijkstra\n\n    import heapq\n\n\n\n    ans = 0\n\n    for i in range(n):\n\n        for j in tree[i]:\n\n            seen = [0] * n\n\n            goal = j[1]\n\n            base = j[0]\n\n            seen[i] = 1\n\n            todo = []\n\n            heapq.heapify(todo)\n\n            for k in tree[i]:\n\n                if k[0] < base and k != j:\n\n                    heapq.heappush(todo, k)\n\n            while len(todo) > 0:\n\n                k = heapq.heappop(todo)\n\n                if k[1] == goal:\n\n                    if k[0] < base:\n\n                        ans += 1\n\n                    break\n\n                seen[k[1]] = 1\n\n                for l in tree[k[1]]:\n\n                    if seen[l[1]] == 0 and k[0] + l[0] < base:\n\n                        heapq.heappush(todo, (k[0] + l[0], l[1]))\n\n\n\n    print((ans \/\/ 2))\n\n\n\nmain()","code_v0_loc":44,"code_v1_loc":43,"code_v0_num_chars":1189,"code_v1_num_chars":1159,"code_v0_no_empty_lines":"def main():\n    from sys import stdin\n\n    def input():\n        return stdin.readline().strip()\n\n    n, m = list(map(int, input().split()))\n    tree = [[] for _ in range(n)]\n    for _ in range(m):\n        i, j, k = list(map(int, input().split()))\n        i -= 1\n        j -= 1\n        tree[i].append((k, j))\n        tree[j].append((k, i))\n    # dijkstra\n    import heapq\n    from numpy import zeros\n\n    ans = 0\n    for i in range(n):\n        for j in tree[i]:\n            seen = zeros(n)\n            goal = j[1]\n            base = j[0]\n            seen[i] = 1\n            todo = []\n            heapq.heapify(todo)\n            for k in tree[i]:\n                if k[0] < base and k != j:\n                    heapq.heappush(todo, k)\n            while len(todo) > 0:\n                k = heapq.heappop(todo)\n                if k[1] == goal:\n                    if k[0] < base:\n                        ans += 1\n                    break\n                seen[k[1]] = 1\n                for l in tree[k[1]]:\n                    if seen[l[1]] == 0 and k[0] + l[0] < base:\n                        heapq.heappush(todo, (k[0] + l[0], l[1]))\n    print((ans \/\/ 2))\n\n\nmain()\n","code_v1_no_empty_lines":"def main():\n    from sys import stdin\n\n    def input():\n        return stdin.readline().strip()\n\n    n, m = list(map(int, input().split()))\n    tree = [[] for _ in range(n)]\n    for _ in range(m):\n        i, j, k = list(map(int, input().split()))\n        i -= 1\n        j -= 1\n        tree[i].append((k, j))\n        tree[j].append((k, i))\n    # dijkstra\n    import heapq\n\n    ans = 0\n    for i in range(n):\n        for j in tree[i]:\n            seen = [0] * n\n            goal = j[1]\n            base = j[0]\n            seen[i] = 1\n            todo = []\n            heapq.heapify(todo)\n            for k in tree[i]:\n                if k[0] < base and k != j:\n                    heapq.heappush(todo, k)\n            while len(todo) > 0:\n                k = heapq.heappop(todo)\n                if k[1] == goal:\n                    if k[0] < base:\n                        ans += 1\n                    break\n                seen[k[1]] = 1\n                for l in tree[k[1]]:\n                    if seen[l[1]] == 0 and k[0] + l[0] < base:\n                        heapq.heappush(todo, (k[0] + l[0], l[1]))\n    print((ans \/\/ 2))\n\n\nmain()\n","code_same":false,"relative_loc_diff_percent":2.2727272727,"diff":["-    from numpy import zeros","-            seen = zeros(n)","+            seen = [0] * n"],"diff_only_import_comment":false,"measured_runtime_v0":2.1406116307,"measured_runtime_v1":0.1031825858,"runtime_lift":20.7458614645,"key":["s719627889","s550164411"]}
{"user_id":"u707498674","problem_id":"p03197","language":"python","submission_id_v0":"s897143120","submission_id_v1":"s183884077","cpu_time_v0":161,"cpu_time_v1":94,"memory_v0":14548,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":41.61,"input":"import numpy as np\n\n \n\ndef main():\n\n    stdin = np.fromstring(open(0).read(), dtype=np.int64, sep=' ')\n\n    A = stdin[1:]\n\n    A = np.mod(A, 2)\n\n    print(\"first\") if np.count_nonzero(A) else print(\"second\")\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"import sys\n\ndef input(): return sys.stdin.readline().strip()\n\ndef main():\n\n    N = int(input())\n\n    A = (int(input()) for _ in range(N))\n\n    print(\"second\") if all(( a%2==0 for a in A)) else print(\"first\")\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":9,"code_v1_loc":8,"code_v0_num_chars":248,"code_v1_num_chars":247,"code_v0_no_empty_lines":"import numpy as np\n\n\ndef main():\n    stdin = np.fromstring(open(0).read(), dtype=np.int64, sep=\" \")\n    A = stdin[1:]\n    A = np.mod(A, 2)\n    print(\"first\") if np.count_nonzero(A) else print(\"second\")\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef main():\n    N = int(input())\n    A = (int(input()) for _ in range(N))\n    print(\"second\") if all((a % 2 == 0 for a in A)) else print(\"first\")\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["-import numpy as np","+import sys","+","+","+def input():","+    return sys.stdin.readline().strip()","-    stdin = np.fromstring(open(0).read(), dtype=np.int64, sep=\" \")","-    A = stdin[1:]","-    A = np.mod(A, 2)","-    print(\"first\") if np.count_nonzero(A) else print(\"second\")","+    N = int(input())","+    A = (int(input()) for _ in range(N))","+    print(\"second\") if all((a % 2 == 0 for a in A)) else print(\"first\")"],"diff_only_import_comment":false,"measured_runtime_v0":1.294229298,"measured_runtime_v1":0.3298476092,"runtime_lift":3.9237188987,"key":["s897143120","s183884077"]}
{"user_id":"u729133443","problem_id":"p02555","language":"python","submission_id_v0":"s039277419","submission_id_v1":"s210669705","cpu_time_v0":66,"cpu_time_v1":51,"memory_v0":29052,"memory_v1":22328,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":22.73,"input":"a,b,c=1,0,0\n\nexec('a,b,c=b,c,(a+c)%(10**9+7);'*(int(eval(input()))-2))\n\nprint(c)","target":"a,b,c=1,0,0\n\nexec('a,b,c=b,c,a+c;'*(int(eval(input()))-2))\n\nprint((c%(10**9+7)))","code_v0_loc":3,"code_v1_loc":3,"code_v0_num_chars":74,"code_v1_num_chars":72,"code_v0_no_empty_lines":"a, b, c = 1, 0, 0\nexec(\"a,b,c=b,c,(a+c)%(10**9+7);\" * (int(eval(input())) - 2))\nprint(c)\n","code_v1_no_empty_lines":"a, b, c = 1, 0, 0\nexec(\"a,b,c=b,c,a+c;\" * (int(eval(input())) - 2))\nprint((c % (10**9 + 7)))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-exec(\"a,b,c=b,c,(a+c)%(10**9+7);\" * (int(eval(input())) - 2))","-print(c)","+exec(\"a,b,c=b,c,a+c;\" * (int(eval(input())) - 2))","+print((c % (10**9 + 7)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.4045331192,"measured_runtime_v1":0.1489405618,"runtime_lift":2.7160708565,"key":["s039277419","s210669705"]}
{"user_id":"u416011173","problem_id":"p02615","language":"python","submission_id_v0":"s077290395","submission_id_v1":"s490562127","cpu_time_v0":209,"cpu_time_v1":168,"memory_v0":49528,"memory_v1":32840,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":19.62,"input":"# -*- coding: utf-8 -*-\n\n# \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\n\nimport math\n\nimport numpy as np\n\n\n\n# \u6a19\u6e96\u5165\u529b\u3092\u53d6\u5f97\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n\n\n# \u6c42\u89e3\u51e6\u7406\n\nA = sorted(A, reverse=True)\n\nA = np.array(A)\n\nans = 2 * np.sum(A[:(N \/\/ 2)]) - A[0] + (N % 2) * A[math.floor(N \/ 2)]\n\n\n\n# \u7d50\u679c\u51fa\u529b\n\nprint(ans)\n","target":"# -*- coding: utf-8 -*-\n\n# \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\n\nimport math\n\n\n\n# \u6a19\u6e96\u5165\u529b\u3092\u53d6\u5f97\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n\n\n# \u6c42\u89e3\u51e6\u7406\n\nA = sorted(A, reverse=True)\n\nans = 0\n\nfor n in range(1, N + 1):\n\n    if n == 1:\n\n        continue\n\n    ans += A[math.ceil(n \/ 2) - 1]\n\n\n\n# \u7d50\u679c\u51fa\u529b\n\nprint(ans)\n","code_v0_loc":16,"code_v1_loc":18,"code_v0_num_chars":290,"code_v1_num_chars":287,"code_v0_no_empty_lines":"# -*- coding: utf-8 -*-\n# \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nimport math\nimport numpy as np\n\n# \u6a19\u6e96\u5165\u529b\u3092\u53d6\u5f97\nN = int(eval(input()))\nA = list(map(int, input().split()))\n# \u6c42\u89e3\u51e6\u7406\nA = sorted(A, reverse=True)\nA = np.array(A)\nans = 2 * np.sum(A[: (N \/\/ 2)]) - A[0] + (N % 2) * A[math.floor(N \/ 2)]\n# \u7d50\u679c\u51fa\u529b\nprint(ans)\n","code_v1_no_empty_lines":"# -*- coding: utf-8 -*-\n# \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nimport math\n\n# \u6a19\u6e96\u5165\u529b\u3092\u53d6\u5f97\nN = int(eval(input()))\nA = list(map(int, input().split()))\n# \u6c42\u89e3\u51e6\u7406\nA = sorted(A, reverse=True)\nans = 0\nfor n in range(1, N + 1):\n    if n == 1:\n        continue\n    ans += A[math.ceil(n \/ 2) - 1]\n# \u7d50\u679c\u51fa\u529b\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["-import numpy as np","-A = np.array(A)","-ans = 2 * np.sum(A[: (N \/\/ 2)]) - A[0] + (N % 2) * A[math.floor(N \/ 2)]","+ans = 0","+for n in range(1, N + 1):","+    if n == 1:","+        continue","+    ans += A[math.ceil(n \/ 2) - 1]"],"diff_only_import_comment":false,"measured_runtime_v0":1.7039060501,"measured_runtime_v1":0.2517175666,"runtime_lift":6.7691185533,"key":["s077290395","s490562127"]}
{"user_id":"u768896740","problem_id":"p03371","language":"python","submission_id_v0":"s303630482","submission_id_v1":"s785488691","cpu_time_v0":197,"cpu_time_v1":17,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":91.37,"input":"a, b, c, x, y = list(map(int, input().split()))\n\n\n\nz = max(x,y) * 2\n\nmin_sum = c * z\n\n\n\nfor i in range(z):\n\n    r = max(0, y - i) * b\n\n    t = max(0, x - i) * a\n\n    sum = c * i * 2 + r + t\n\n    if sum < min_sum:\n\n        min_sum = sum\n\n\n\nprint(min_sum)","target":"a,b,c,x,y = list(map(int, input().split()))\n\n\n\nplan_a = c * (2*x) + max(0, y-x) * b\n\nplan_b = c * (2*y) + max(0, x-y) * a\n\nplan_c = a * x + b * y\n\n\n\nprint((min(plan_a, plan_b, plan_c)))","code_v0_loc":13,"code_v1_loc":7,"code_v0_num_chars":247,"code_v1_num_chars":177,"code_v0_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nz = max(x, y) * 2\nmin_sum = c * z\nfor i in range(z):\n    r = max(0, y - i) * b\n    t = max(0, x - i) * a\n    sum = c * i * 2 + r + t\n    if sum < min_sum:\n        min_sum = sum\nprint(min_sum)\n","code_v1_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nplan_a = c * (2 * x) + max(0, y - x) * b\nplan_b = c * (2 * y) + max(0, x - y) * a\nplan_c = a * x + b * y\nprint((min(plan_a, plan_b, plan_c)))\n","code_same":false,"relative_loc_diff_percent":46.1538461538,"diff":["-z = max(x, y) * 2","-min_sum = c * z","-for i in range(z):","-    r = max(0, y - i) * b","-    t = max(0, x - i) * a","-    sum = c * i * 2 + r + t","-    if sum < min_sum:","-        min_sum = sum","-print(min_sum)","+plan_a = c * (2 * x) + max(0, y - x) * b","+plan_b = c * (2 * y) + max(0, x - y) * a","+plan_c = a * x + b * y","+print((min(plan_a, plan_b, plan_c)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.7115524154,"measured_runtime_v1":0.3421670091,"runtime_lift":2.0795471112,"key":["s303630482","s785488691"]}
{"user_id":"u488127128","problem_id":"p03796","language":"python","submission_id_v0":"s349010345","submission_id_v1":"s174569561","cpu_time_v0":35,"cpu_time_v1":29,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.14,"input":"N = int(eval(input()))\n\na = 1\n\nfor n in range(2,N+1):\n\n    a = a*n % (10**9+7)\n\nprint(a)","target":"def factorial(N):\n\n    a = 1\n\n    for n in range(2,N+1):\n\n        a = a*n % (10**9 + 7)\n\n    return a\n\n\n\nif __name__ == '__main__':\n\n    N = int(eval(input()))\n\n    print((factorial(N)))","code_v0_loc":5,"code_v1_loc":9,"code_v0_num_chars":82,"code_v1_num_chars":178,"code_v0_no_empty_lines":"N = int(eval(input()))\na = 1\nfor n in range(2, N + 1):\n    a = a * n % (10**9 + 7)\nprint(a)\n","code_v1_no_empty_lines":"def factorial(N):\n    a = 1\n    for n in range(2, N + 1):\n        a = a * n % (10**9 + 7)\n    return a\n\n\nif __name__ == \"__main__\":\n    N = int(eval(input()))\n    print((factorial(N)))\n","code_same":false,"relative_loc_diff_percent":44.4444444444,"diff":["-N = int(eval(input()))","-a = 1","-for n in range(2, N + 1):","-    a = a * n % (10**9 + 7)","-print(a)","+def factorial(N):","+    a = 1","+    for n in range(2, N + 1):","+        a = a * n % (10**9 + 7)","+    return a","+","+","+if __name__ == \"__main__\":","+    N = int(eval(input()))","+    print((factorial(N)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3416386657,"measured_runtime_v1":0.2695478878,"runtime_lift":1.2674507244,"key":["s349010345","s174569561"]}
{"user_id":"u047102107","problem_id":"p03371","language":"python","submission_id_v0":"s941907428","submission_id_v1":"s244206976","cpu_time_v0":181,"cpu_time_v1":162,"memory_v0":39920,"memory_v1":38384,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.5,"input":"# -*- coding: utf-8 -*-\n\n\n\nA, B, C, X, Y = list(map(int, input().split()))\n\n\n\ncost = int(1e10)\n\nfor num_ac in range(0, int(1e5) + 1):\n\n    num_A = max(0, X - num_ac)\n\n    num_B = max(0, Y - num_ac)\n\n    c = 2 * C * num_ac + A * num_A + B * num_B\n\n    cost = min(c, cost)\n\nprint(cost)","target":"A, B, C, X, Y = list(map(int, input().split()))\n\n\n\nans = 0\n\nif A + B > 2 * C:\n\n    z = min(X, Y)\n\n    X -= z\n\n    Y -= z\n\n    ans += 2 * z * C\n\n\n\n# \u504f\u308a\u5206\n\nif 2 * C < A:\n\n    k = X\n\n    X -= k\n\n    Y -= k\n\n    ans += 2 * C * k\n\nif 2 * C < B:\n\n    k = Y\n\n    X -= k\n\n    Y -= k\n\n    ans += 2 * C * k\n\n\n\n# \u3042\u307e\u308a\u5206\n\nans += A * max(0, X) + B * max(0, Y)\n\nprint(ans)","code_v0_loc":11,"code_v1_loc":24,"code_v0_num_chars":283,"code_v1_num_chars":355,"code_v0_no_empty_lines":"# -*- coding: utf-8 -*-\nA, B, C, X, Y = list(map(int, input().split()))\ncost = int(1e10)\nfor num_ac in range(0, int(1e5) + 1):\n    num_A = max(0, X - num_ac)\n    num_B = max(0, Y - num_ac)\n    c = 2 * C * num_ac + A * num_A + B * num_B\n    cost = min(c, cost)\nprint(cost)\n","code_v1_no_empty_lines":"A, B, C, X, Y = list(map(int, input().split()))\nans = 0\nif A + B > 2 * C:\n    z = min(X, Y)\n    X -= z\n    Y -= z\n    ans += 2 * z * C\n# \u504f\u308a\u5206\nif 2 * C < A:\n    k = X\n    X -= k\n    Y -= k\n    ans += 2 * C * k\nif 2 * C < B:\n    k = Y\n    X -= k\n    Y -= k\n    ans += 2 * C * k\n# \u3042\u307e\u308a\u5206\nans += A * max(0, X) + B * max(0, Y)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":54.1666666667,"diff":["-# -*- coding: utf-8 -*-","-cost = int(1e10)","-for num_ac in range(0, int(1e5) + 1):","-    num_A = max(0, X - num_ac)","-    num_B = max(0, Y - num_ac)","-    c = 2 * C * num_ac + A * num_A + B * num_B","-    cost = min(c, cost)","-print(cost)","+ans = 0","+if A + B > 2 * C:","+    z = min(X, Y)","+    X -= z","+    Y -= z","+    ans += 2 * z * C","+# \u504f\u308a\u5206","+if 2 * C < A:","+    k = X","+    X -= k","+    Y -= k","+    ans += 2 * C * k","+if 2 * C < B:","+    k = Y","+    X -= k","+    Y -= k","+    ans += 2 * C * k","+# \u3042\u307e\u308a\u5206","+ans += A * max(0, X) + B * max(0, Y)","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.4463407636,"measured_runtime_v1":0.1532134106,"runtime_lift":2.9131964477,"key":["s941907428","s244206976"]}
{"user_id":"u102461423","problem_id":"p03170","language":"python","submission_id_v0":"s503646377","submission_id_v1":"s803807514","cpu_time_v0":1298,"cpu_time_v1":123,"memory_v0":3684,"memory_v1":3828,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":90.52,"input":"import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nfrom operator import xor\n\nfrom functools import reduce\n\n\n\nN,K,*A = list(map(int,read().split()))\n\n\n\na = reduce(xor,(1<<a for a in A))\n\n\n\ndp = 0 # bitset\n\nfor n in range(K):\n\n    if not(dp&(1<<n)):\n\n        dp |= (a<<n)\n\n\n\nanswer = 'First' if dp&(1<<K) else 'Second'\n\nprint(answer)","target":"import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nN,K,*A = list(map(int,read().split()))\n\n\n\ndp = [0]*(K+1) # bitset\n\nfor n in range(K):\n\n    if not dp[n]:\n\n        for a in A:\n\n            if n+a>K:\n\n                break\n\n            dp[n+a]=1\n\n\n\nanswer = 'First' if dp[-1] else 'Second'\n\nprint(answer)","code_v0_loc":19,"code_v1_loc":17,"code_v0_num_chars":396,"code_v1_num_chars":369,"code_v0_no_empty_lines":"import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nfrom operator import xor\nfrom functools import reduce\n\nN, K, *A = list(map(int, read().split()))\na = reduce(xor, (1 << a for a in A))\ndp = 0  # bitset\nfor n in range(K):\n    if not (dp & (1 << n)):\n        dp |= a << n\nanswer = \"First\" if dp & (1 << K) else \"Second\"\nprint(answer)\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nN, K, *A = list(map(int, read().split()))\ndp = [0] * (K + 1)  # bitset\nfor n in range(K):\n    if not dp[n]:\n        for a in A:\n            if n + a > K:\n                break\n            dp[n + a] = 1\nanswer = \"First\" if dp[-1] else \"Second\"\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":10.5263157895,"diff":["-from operator import xor","-from functools import reduce","-","-a = reduce(xor, (1 << a for a in A))","-dp = 0  # bitset","+dp = [0] * (K + 1)  # bitset","-    if not (dp & (1 << n)):","-        dp |= a << n","-answer = \"First\" if dp & (1 << K) else \"Second\"","+    if not dp[n]:","+        for a in A:","+            if n + a > K:","+                break","+            dp[n + a] = 1","+answer = \"First\" if dp[-1] else \"Second\""],"diff_only_import_comment":false,"measured_runtime_v0":0.510753959,"measured_runtime_v1":0.2748723721,"runtime_lift":1.8581494935,"key":["s503646377","s803807514"]}
{"user_id":"u186206732","problem_id":"p03060","language":"python","submission_id_v0":"s984369136","submission_id_v1":"s748536221","cpu_time_v0":260,"cpu_time_v1":18,"memory_v0":17204,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":93.08,"input":"import numpy as np\n\n\n\nn = int(eval(input()))\n\n\n\nv_list = np.array(list(map(int,input().split())))\n\nc_list = np.array(list(map(int,input().split())))\n\ne_list = list(v_list - c_list)\n\n\n\nans = 0\n\n\n\nfor i in range(n):\n\n    if e_list[i] > 0:\n\n        ans += e_list[i]\n\n\n\nprint(ans)\n","target":"n = int(eval(input()))\n\n\n\nv_list = list(map(int,input().split()))\n\nc_list = list(map(int,input().split()))\n\n\n\ne_list = [v-c if (v-c > 0) else 0 for v,c in zip(v_list, c_list)]\n\n\n\nprint((sum(e_list)))\n","code_v0_loc":15,"code_v1_loc":8,"code_v0_num_chars":271,"code_v1_num_chars":192,"code_v0_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\nv_list = np.array(list(map(int, input().split())))\nc_list = np.array(list(map(int, input().split())))\ne_list = list(v_list - c_list)\nans = 0\nfor i in range(n):\n    if e_list[i] > 0:\n        ans += e_list[i]\nprint(ans)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nv_list = list(map(int, input().split()))\nc_list = list(map(int, input().split()))\ne_list = [v - c if (v - c > 0) else 0 for v, c in zip(v_list, c_list)]\nprint((sum(e_list)))\n","code_same":false,"relative_loc_diff_percent":46.6666666667,"diff":["-import numpy as np","-","-v_list = np.array(list(map(int, input().split())))","-c_list = np.array(list(map(int, input().split())))","-e_list = list(v_list - c_list)","-ans = 0","-for i in range(n):","-    if e_list[i] > 0:","-        ans += e_list[i]","-print(ans)","+v_list = list(map(int, input().split()))","+c_list = list(map(int, input().split()))","+e_list = [v - c if (v - c > 0) else 0 for v, c in zip(v_list, c_list)]","+print((sum(e_list)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.8478024924,"measured_runtime_v1":0.3072949107,"runtime_lift":6.0131242925,"key":["s984369136","s748536221"]}
{"user_id":"u102960641","problem_id":"p02624","language":"python","submission_id_v0":"s523843051","submission_id_v1":"s066295883","cpu_time_v0":36,"cpu_time_v1":31,"memory_v0":9312,"memory_v1":9436,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.89,"input":"n = int(eval(input()))\n\nans = 0\n\nSQRT = int(n ** 0.5)\n\nfor m in range(1,SQRT + 1):\n\n    b = int(n\/m)\n\n    ans += m * (m + b) * (b + 1 - m)\n\nans -= SQRT * (SQRT+1) * (2*SQRT+1) \/\/ 6\n\nprint(ans)","target":"def main():\n\n  n = int(eval(input()))\n\n  ans = 0\n\n  SQRT = int(n ** 0.5)\n\n  for m in range(1,SQRT + 1):\n\n    b = int(n\/m)\n\n    ans += m * (m + b) * (b + 1 - m)\n\n  ans -= SQRT * (SQRT+1) * (2*SQRT+1) \/\/ 6\n\n  print(ans)\n\nmain()\n","code_v0_loc":8,"code_v1_loc":10,"code_v0_num_chars":186,"code_v1_num_chars":220,"code_v0_no_empty_lines":"n = int(eval(input()))\nans = 0\nSQRT = int(n**0.5)\nfor m in range(1, SQRT + 1):\n    b = int(n \/ m)\n    ans += m * (m + b) * (b + 1 - m)\nans -= SQRT * (SQRT + 1) * (2 * SQRT + 1) \/\/ 6\nprint(ans)\n","code_v1_no_empty_lines":"def main():\n    n = int(eval(input()))\n    ans = 0\n    SQRT = int(n**0.5)\n    for m in range(1, SQRT + 1):\n        b = int(n \/ m)\n        ans += m * (m + b) * (b + 1 - m)\n    ans -= SQRT * (SQRT + 1) * (2 * SQRT + 1) \/\/ 6\n    print(ans)\n\n\nmain()\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["-n = int(eval(input()))","-ans = 0","-SQRT = int(n**0.5)","-for m in range(1, SQRT + 1):","-    b = int(n \/ m)","-    ans += m * (m + b) * (b + 1 - m)","-ans -= SQRT * (SQRT + 1) * (2 * SQRT + 1) \/\/ 6","-print(ans)","+def main():","+    n = int(eval(input()))","+    ans = 0","+    SQRT = int(n**0.5)","+    for m in range(1, SQRT + 1):","+        b = int(n \/ m)","+        ans += m * (m + b) * (b + 1 - m)","+    ans -= SQRT * (SQRT + 1) * (2 * SQRT + 1) \/\/ 6","+    print(ans)","+","+","+main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.3880330081,"measured_runtime_v1":0.212660579,"runtime_lift":1.8246588529,"key":["s523843051","s066295883"]}
{"user_id":"u263830634","problem_id":"p03173","language":"python","submission_id_v0":"s585052356","submission_id_v1":"s189629023","cpu_time_v0":1975,"cpu_time_v1":405,"memory_v0":15668,"memory_v1":42732,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":79.49,"input":"import numpy as np\n\n\n\nN = int(eval(input()))\n\nA = [0] + list(map(int, input().split()))\n\n\n\nA = np.array(A, dtype = np.int64)\n\nA = np.cumsum(A)\n\n\n\ndp = np.zeros((N, N), dtype = np.int64)\n\n\n\nfor j in range(1, N):\n\n    for i in range(N - j):\n\n        # print (dp[i, i:i + j], dp[i + 1:i + j + 1, i + j])\n\n        tmp = min(dp[i, i:i + j] + dp[i + 1:i + j + 1, i + j])\n\n        dp[i][i + j] = tmp + A[i + j + 1] - A[i]\n\n\n\nprint((dp[0][N - 1]))","target":"N = int(eval(input()))\n\nA = [0] + list(map(int, input().split()))\n\n\n\nINF = 10 ** 18\n\n\n\ndp = [[0] * (N) for _ in range(N)]\n\n\n\nfor i in range(N):\n\n    A[i + 1] += A[i]\n\n\n\nfor j in range(1, N):\n\n    for i in range(N - j):\n\n        tmp = INF\n\n        for k in range(i, i + j):\n\n            # print (i, i + j, k + 1)\n\n            tmp = min(tmp, dp[i][k] + dp[k + 1][i + j])\n\n        dp[i][i + j] = tmp + A[i + j + 1] - A[i]\n\n\n\nprint((dp[0][N - 1]))\n","code_v0_loc":17,"code_v1_loc":19,"code_v0_num_chars":432,"code_v1_num_chars":437,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nA = [0] + list(map(int, input().split()))\nA = np.array(A, dtype=np.int64)\nA = np.cumsum(A)\ndp = np.zeros((N, N), dtype=np.int64)\nfor j in range(1, N):\n    for i in range(N - j):\n        # print (dp[i, i:i + j], dp[i + 1:i + j + 1, i + j])\n        tmp = min(dp[i, i : i + j] + dp[i + 1 : i + j + 1, i + j])\n        dp[i][i + j] = tmp + A[i + j + 1] - A[i]\nprint((dp[0][N - 1]))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = [0] + list(map(int, input().split()))\nINF = 10**18\ndp = [[0] * (N) for _ in range(N)]\nfor i in range(N):\n    A[i + 1] += A[i]\nfor j in range(1, N):\n    for i in range(N - j):\n        tmp = INF\n        for k in range(i, i + j):\n            # print (i, i + j, k + 1)\n            tmp = min(tmp, dp[i][k] + dp[k + 1][i + j])\n        dp[i][i + j] = tmp + A[i + j + 1] - A[i]\nprint((dp[0][N - 1]))\n","code_same":false,"relative_loc_diff_percent":10.5263157895,"diff":["-import numpy as np","-","-A = np.array(A, dtype=np.int64)","-A = np.cumsum(A)","-dp = np.zeros((N, N), dtype=np.int64)","+INF = 10**18","+dp = [[0] * (N) for _ in range(N)]","+for i in range(N):","+    A[i + 1] += A[i]","-        # print (dp[i, i:i + j], dp[i + 1:i + j + 1, i + j])","-        tmp = min(dp[i, i : i + j] + dp[i + 1 : i + j + 1, i + j])","+        tmp = INF","+        for k in range(i, i + j):","+            # print (i, i + j, k + 1)","+            tmp = min(tmp, dp[i][k] + dp[k + 1][i + j])"],"diff_only_import_comment":false,"measured_runtime_v0":1.3938372128,"measured_runtime_v1":0.1987130241,"runtime_lift":7.0143223816,"key":["s585052356","s189629023"]}
{"user_id":"u513081876","problem_id":"p03828","language":"python","submission_id_v0":"s988350400","submission_id_v1":"s443952708","cpu_time_v0":39,"cpu_time_v1":35,"memory_v0":3316,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.26,"input":"import math\n\nimport collections\n\n\n\nN = int(eval(input()))\n\na = math.factorial(N)\n\ncheck = []\n\nans = 1\n\ni = 2\n\n\n\nwhile a != 1:\n\n    if a % i == 0:\n\n        a \/\/= i\n\n        check.append(i)\n\n    else:\n\n        i += 1\n\n        \n\ncheck = list(collections.Counter(check).values())\n\nfor i in check:\n\n    ans *= (i+1)\n\n    ans %= 10**9+7\n\nprint(ans)","target":"from math import factorial\n\n\n\nN = factorial(int(eval(input())))\n\n\n\ni = 2\n\ncheck = 1\n\nans = 1\n\nwhile N != 1:\n\n    if N % i == 0:\n\n        N \/\/= i\n\n        check += 1\n\n    else:\n\n        ans *= check\n\n        check = 1\n\n        i += 1\n\nprint(((ans*check)%(10**9+7)))","code_v0_loc":21,"code_v1_loc":16,"code_v0_num_chars":330,"code_v1_num_chars":256,"code_v0_no_empty_lines":"import math\nimport collections\n\nN = int(eval(input()))\na = math.factorial(N)\ncheck = []\nans = 1\ni = 2\nwhile a != 1:\n    if a % i == 0:\n        a \/\/= i\n        check.append(i)\n    else:\n        i += 1\ncheck = list(collections.Counter(check).values())\nfor i in check:\n    ans *= i + 1\n    ans %= 10**9 + 7\nprint(ans)\n","code_v1_no_empty_lines":"from math import factorial\n\nN = factorial(int(eval(input())))\ni = 2\ncheck = 1\nans = 1\nwhile N != 1:\n    if N % i == 0:\n        N \/\/= i\n        check += 1\n    else:\n        ans *= check\n        check = 1\n        i += 1\nprint(((ans * check) % (10**9 + 7)))\n","code_same":false,"relative_loc_diff_percent":23.8095238095,"diff":["-import math","-import collections","+from math import factorial","-N = int(eval(input()))","-a = math.factorial(N)","-check = []","+N = factorial(int(eval(input())))","+i = 2","+check = 1","-i = 2","-while a != 1:","-    if a % i == 0:","-        a \/\/= i","-        check.append(i)","+while N != 1:","+    if N % i == 0:","+        N \/\/= i","+        check += 1","+        ans *= check","+        check = 1","-check = list(collections.Counter(check).values())","-for i in check:","-    ans *= i + 1","-    ans %= 10**9 + 7","-print(ans)","+print(((ans * check) % (10**9 + 7)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.1990540142,"measured_runtime_v1":0.0063210642,"runtime_lift":31.4905855295,"key":["s988350400","s443952708"]}
{"user_id":"u600402037","problem_id":"p02988","language":"python","submission_id_v0":"s600247338","submission_id_v1":"s499312131","cpu_time_v0":150,"cpu_time_v1":18,"memory_v0":12500,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.0,"input":"import sys\n\nimport numpy as np\n\n\n\nsr = lambda: sys.stdin.readline().rstrip()\n\nir = lambda: int(sr())\n\nlr = lambda: list(map(int, sr().split()))\n\n\n\nN = ir()\n\nP = np.array(lr())\n\n\n\nP_diff = np.diff(P)\n\nP_diff = P_diff > 0\n\nseries = P_diff[:-1] == P_diff[1:]\n\nanswer = series.sum()\n\nprint(answer)\n\n# 23","target":"N = int(eval(input()))\n\nP = list(map(int, input().split()))\n\nanswer = sum(x>y>z or x<y<z for x, y, z in zip(P[:-2], P[1:-1], P[2:]))\n\nprint(answer)\n\n    ","code_v0_loc":16,"code_v1_loc":5,"code_v0_num_chars":299,"code_v1_num_chars":147,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\nN = ir()\nP = np.array(lr())\nP_diff = np.diff(P)\nP_diff = P_diff > 0\nseries = P_diff[:-1] == P_diff[1:]\nanswer = series.sum()\nprint(answer)\n# 23\n","code_v1_no_empty_lines":"N = int(eval(input()))\nP = list(map(int, input().split()))\nanswer = sum(x > y > z or x < y < z for x, y, z in zip(P[:-2], P[1:-1], P[2:]))\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":68.75,"diff":["-import sys","-import numpy as np","-","-sr = lambda: sys.stdin.readline().rstrip()","-ir = lambda: int(sr())","-lr = lambda: list(map(int, sr().split()))","-N = ir()","-P = np.array(lr())","-P_diff = np.diff(P)","-P_diff = P_diff > 0","-series = P_diff[:-1] == P_diff[1:]","-answer = series.sum()","+N = int(eval(input()))","+P = list(map(int, input().split()))","+answer = sum(x > y > z or x < y < z for x, y, z in zip(P[:-2], P[1:-1], P[2:]))","-# 23"],"diff_only_import_comment":false,"measured_runtime_v0":1.3571075095,"measured_runtime_v1":0.1919195701,"runtime_lift":7.071230456,"key":["s600247338","s499312131"]}
{"user_id":"u369133448","problem_id":"p02982","language":"python","submission_id_v0":"s601267167","submission_id_v1":"s993032779","cpu_time_v0":855,"cpu_time_v1":17,"memory_v0":21024,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":98.01,"input":"import numpy as np\n\nn,d=list(map(int,input().split()))\n\nnda=np.empty((0,d),int)\n\nans=0\n\nfor i in range(0,n):\n\n  a=np.array([list(map(int,input().split()))])\n\n  for j in range(i):\n\n    chklen=np.linalg.norm(a-nda[j])\n\n    if chklen==chklen\/\/1:\n\n      ans+=1\n\n  nda=np.append(nda,a,axis=0)\n\nprint(ans)","target":"import math\n\nn,d=list(map(int,input().split()))\n\na=[0]*n\n\nfor i in range(n):\n\n  a[i]=list(map(int,input().split()))\n\nans=0\n\nfor i in range(n-1):\n\n  for j in range(i+1,n):\n\n    chklen=0\n\n    wk=0\n\n    for k in range(d):\n\n      wk+=abs(a[i][k]-a[j][k])**2\n\n    chklen=math.sqrt(wk)\n\n    if chklen==chklen\/\/1:\n\n      ans+=1\n\nprint(ans)","code_v0_loc":12,"code_v1_loc":16,"code_v0_num_chars":293,"code_v1_num_chars":326,"code_v0_no_empty_lines":"import numpy as np\n\nn, d = list(map(int, input().split()))\nnda = np.empty((0, d), int)\nans = 0\nfor i in range(0, n):\n    a = np.array([list(map(int, input().split()))])\n    for j in range(i):\n        chklen = np.linalg.norm(a - nda[j])\n        if chklen == chklen \/\/ 1:\n            ans += 1\n    nda = np.append(nda, a, axis=0)\nprint(ans)\n","code_v1_no_empty_lines":"import math\n\nn, d = list(map(int, input().split()))\na = [0] * n\nfor i in range(n):\n    a[i] = list(map(int, input().split()))\nans = 0\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        chklen = 0\n        wk = 0\n        for k in range(d):\n            wk += abs(a[i][k] - a[j][k]) ** 2\n        chklen = math.sqrt(wk)\n        if chklen == chklen \/\/ 1:\n            ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-import numpy as np","+import math","-nda = np.empty((0, d), int)","+a = [0] * n","+for i in range(n):","+    a[i] = list(map(int, input().split()))","-for i in range(0, n):","-    a = np.array([list(map(int, input().split()))])","-    for j in range(i):","-        chklen = np.linalg.norm(a - nda[j])","+for i in range(n - 1):","+    for j in range(i + 1, n):","+        chklen = 0","+        wk = 0","+        for k in range(d):","+            wk += abs(a[i][k] - a[j][k]) ** 2","+        chklen = math.sqrt(wk)","-    nda = np.append(nda, a, axis=0)"],"diff_only_import_comment":false,"measured_runtime_v0":1.8428332808,"measured_runtime_v1":0.3216582146,"runtime_lift":5.7291659198,"key":["s601267167","s993032779"]}
{"user_id":"u693694535","problem_id":"p03371","language":"python","submission_id_v0":"s328045307","submission_id_v1":"s953197610","cpu_time_v0":105,"cpu_time_v1":26,"memory_v0":9176,"memory_v1":9168,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":75.24,"input":"A,B,C,X,Y=list(map(int,input().split()))\n\n\n\nK=10**9\n\nfor i in range(10**5+1):\n\n    S=i*2*C+max(0,X-i)*A+max(0,Y-i)*B\n\n    K=min(K,S)\n\nprint(K)","target":"A,B,C,X,Y=list(map(int,input().split()))\n\n\n\na=min(X,Y)*min(A+B,2*C)\n\n\n\na+=max(0,X-Y)*min(A,2*C)\n\na+=max(0,Y-X)*min(B,2*C)\n\n\n\n\n\nprint(a)","code_v0_loc":7,"code_v1_loc":9,"code_v0_num_chars":136,"code_v1_num_chars":129,"code_v0_no_empty_lines":"A, B, C, X, Y = list(map(int, input().split()))\nK = 10**9\nfor i in range(10**5 + 1):\n    S = i * 2 * C + max(0, X - i) * A + max(0, Y - i) * B\n    K = min(K, S)\nprint(K)\n","code_v1_no_empty_lines":"A, B, C, X, Y = list(map(int, input().split()))\na = min(X, Y) * min(A + B, 2 * C)\na += max(0, X - Y) * min(A, 2 * C)\na += max(0, Y - X) * min(B, 2 * C)\nprint(a)\n","code_same":false,"relative_loc_diff_percent":22.2222222222,"diff":["-K = 10**9","-for i in range(10**5 + 1):","-    S = i * 2 * C + max(0, X - i) * A + max(0, Y - i) * B","-    K = min(K, S)","-print(K)","+a = min(X, Y) * min(A + B, 2 * C)","+a += max(0, X - Y) * min(A, 2 * C)","+a += max(0, Y - X) * min(B, 2 * C)","+print(a)"],"diff_only_import_comment":false,"measured_runtime_v0":1.3979784026,"measured_runtime_v1":0.2418090019,"runtime_lift":5.7813331656,"key":["s328045307","s953197610"]}
{"user_id":"u600402037","problem_id":"p03032","language":"python","submission_id_v0":"s390254937","submission_id_v1":"s816896537","cpu_time_v0":285,"cpu_time_v1":192,"memory_v0":3064,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":32.63,"input":"N, K = list(map(int, input().split()))\n\nV = list(map(int, input().split()))\n\n\n\nanswer = 0\n\nlimit = min(N, K)\n\nfor a in range(limit+1): #\u5de6\u304b\u3089\u53d6\u308a\u51fa\u3059\n\n    for b in range(limit-a+1): #\u53f3\u304b\u3089\u53d6\u308a\u51fa\u3059\n\n        for c in range(K-(a+b)+1):\n\n            use = V[:a] + V[N-b:]\n\n            use.sort()\n\n            s = sum(use[c:])\n\n            answer = max(answer, s)\n\n\n\nprint(answer)","target":"import sys\n\nsys.setrecursionlimit(10 ** 9)\n\n\n\nN, K = list(map(int, input().split()))\n\nV = list(map(int, input().split()))\n\nV2 = V * 2\n\nanswer = 0\n\nfor i in range(1, min(N, K)+1): # i\u306f\u5b9d\u77f3\u3092\u53d6\u308a\u51fa\u3059\u500b\u6570\n\n    for j in range(0, min(i, K-i)+1): # j\u306f\u4f55\u500b\u306e\u5b9d\u77f3\u3092\u624b\u96e2\u3059\u304b\n\n        for k in range(max(0, N-i), N+1): # V2\u306e\u4e2d\u3067\u4f55\u756a\u76ee\u304b\u3089\u53d6\u308a\u51fa\u3059\u304b\n\n            use = V2[k:k+i]\n\n            use.sort()\n\n            s = sum(use[j:])\n\n            if s > answer:\n\n                answer = s\n\n\n\nprint(answer)\n","code_v0_loc":14,"code_v1_loc":17,"code_v0_num_chars":357,"code_v1_num_chars":458,"code_v0_no_empty_lines":"N, K = list(map(int, input().split()))\nV = list(map(int, input().split()))\nanswer = 0\nlimit = min(N, K)\nfor a in range(limit + 1):  # \u5de6\u304b\u3089\u53d6\u308a\u51fa\u3059\n    for b in range(limit - a + 1):  # \u53f3\u304b\u3089\u53d6\u308a\u51fa\u3059\n        for c in range(K - (a + b) + 1):\n            use = V[:a] + V[N - b :]\n            use.sort()\n            s = sum(use[c:])\n            answer = max(answer, s)\nprint(answer)\n","code_v1_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10**9)\nN, K = list(map(int, input().split()))\nV = list(map(int, input().split()))\nV2 = V * 2\nanswer = 0\nfor i in range(1, min(N, K) + 1):  # i\u306f\u5b9d\u77f3\u3092\u53d6\u308a\u51fa\u3059\u500b\u6570\n    for j in range(0, min(i, K - i) + 1):  # j\u306f\u4f55\u500b\u306e\u5b9d\u77f3\u3092\u624b\u96e2\u3059\u304b\n        for k in range(max(0, N - i), N + 1):  # V2\u306e\u4e2d\u3067\u4f55\u756a\u76ee\u304b\u3089\u53d6\u308a\u51fa\u3059\u304b\n            use = V2[k : k + i]\n            use.sort()\n            s = sum(use[j:])\n            if s > answer:\n                answer = s\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":17.6470588235,"diff":["+import sys","+","+sys.setrecursionlimit(10**9)","+V2 = V * 2","-limit = min(N, K)","-for a in range(limit + 1):  # \u5de6\u304b\u3089\u53d6\u308a\u51fa\u3059","-    for b in range(limit - a + 1):  # \u53f3\u304b\u3089\u53d6\u308a\u51fa\u3059","-        for c in range(K - (a + b) + 1):","-            use = V[:a] + V[N - b :]","+for i in range(1, min(N, K) + 1):  # i\u306f\u5b9d\u77f3\u3092\u53d6\u308a\u51fa\u3059\u500b\u6570","+    for j in range(0, min(i, K - i) + 1):  # j\u306f\u4f55\u500b\u306e\u5b9d\u77f3\u3092\u624b\u96e2\u3059\u304b","+        for k in range(max(0, N - i), N + 1):  # V2\u306e\u4e2d\u3067\u4f55\u756a\u76ee\u304b\u3089\u53d6\u308a\u51fa\u3059\u304b","+            use = V2[k : k + i]","-            s = sum(use[c:])","-            answer = max(answer, s)","+            s = sum(use[j:])","+            if s > answer:","+                answer = s"],"diff_only_import_comment":false,"measured_runtime_v0":0.24001915,"measured_runtime_v1":0.147559453,"runtime_lift":1.6265928418,"key":["s390254937","s816896537"]}
{"user_id":"u365686736","problem_id":"p02390","language":"python","submission_id_v0":"s143749551","submission_id_v1":"s514847697","cpu_time_v0":30,"cpu_time_v1":20,"memory_v0":7676,"memory_v1":5584,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":33.33,"input":"S = int(input())\n\n\n\nif S >= 3600:\n\n    h=S\/\/3600\n\n    m=S%3600\/\/60\n\n    s=S%60\n\nelif 3600 > S >= 60:\n\n    h=0\n\n    m=S\/\/60\n\n    s=S%60\n\nelse:\n\n    h=m=0\n\n    s=S\n\nprint(h, m, s, sep=\":\")\n","target":"s = int(input())\n\nh = s \/\/ 3600\n\nm = (s - h * 3600) \/\/ 60\n\ns = s -  h * 3600 - m * 60\n\nprint(h, m, s, sep=\":\")\n","code_v0_loc":14,"code_v1_loc":5,"code_v0_num_chars":186,"code_v1_num_chars":110,"code_v0_no_empty_lines":"S = int(input())\nif S >= 3600:\n    h = S \/\/ 3600\n    m = S % 3600 \/\/ 60\n    s = S % 60\nelif 3600 > S >= 60:\n    h = 0\n    m = S \/\/ 60\n    s = S % 60\nelse:\n    h = m = 0\n    s = S\nprint(h, m, s, sep=\":\")\n","code_v1_no_empty_lines":"s = int(input())\nh = s \/\/ 3600\nm = (s - h * 3600) \/\/ 60\ns = s - h * 3600 - m * 60\nprint(h, m, s, sep=\":\")\n","code_same":false,"relative_loc_diff_percent":64.2857142857,"diff":["-S = int(input())","-if S >= 3600:","-    h = S \/\/ 3600","-    m = S % 3600 \/\/ 60","-    s = S % 60","-elif 3600 > S >= 60:","-    h = 0","-    m = S \/\/ 60","-    s = S % 60","-else:","-    h = m = 0","-    s = S","+s = int(input())","+h = s \/\/ 3600","+m = (s - h * 3600) \/\/ 60","+s = s - h * 3600 - m * 60"],"diff_only_import_comment":false,"measured_runtime_v0":0.3295819011,"measured_runtime_v1":0.255378567,"runtime_lift":1.2905621053,"key":["s143749551","s514847697"]}
{"user_id":"u670180528","problem_id":"p03806","language":"python","submission_id_v0":"s355426542","submission_id_v1":"s468498336","cpu_time_v0":1133,"cpu_time_v1":172,"memory_v0":4980,"memory_v1":4980,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":84.82,"input":"def main():\n\n\tn, ma, mb, *L = list(map(int, open(0).read().split()))\n\n\tM = 1<<30\n\n\tdp = [[M] * 420 for _ in range(420)]\n\n\tdp[0][0] = 0\n\n\tfor a, b, c in zip(*[iter(L)] * 3):\n\n\t\tfor i in range(400, -1, -1):\n\n\t\t\tfor j in range(400, -1, -1):\n\n\t\t\t\tt = dp[i][j] + c\n\n\t\t\t\tif dp[i + a][j + b] > t:\n\n\t\t\t\t\tdp[i + a][j + b] = t\n\n\tans = M\n\n\t_ma, _mb = ma, mb\n\n\twhile _ma < 410 > _mb:\n\n\t\tans = min(ans, dp[_ma][_mb])\n\n\t\t_ma += ma\n\n\t\t_mb += mb\n\n\tprint((ans if ans < M else -1))\n\n\n\nif __name__==\"__main__\":\n\n\tmain()","target":"def main():\n\n\tn, ma, mb, *L = list(map(int, open(0).read().split()))\n\n\tM = 1 << 30\n\n\tdp = [[M] * 420 for _ in range(420)]\n\n\tdp[0][0] = 0\n\n\tua = ub = 15\n\n\tfor a, b, c in zip(*[iter(L)] * 3):\n\n\t\tfor i in range(ua, -1, -1):\n\n\t\t\tfor j in range(ub, -1, -1):\n\n\t\t\t\tt = dp[i][j] + c\n\n\t\t\t\tif dp[i + a][j + b] > t:\n\n\t\t\t\t\tdp[i + a][j + b] = t\n\n\t\t\t\t\tif ua < i + a:\n\n\t\t\t\t\t\tua = i + a\n\n\t\t\t\t\tif ub < j + b:\n\n\t\t\t\t\t\tub = j + b\n\n\tans = M\n\n\t_ma, _mb = ma, mb\n\n\twhile _ma < 410 > _mb:\n\n\t\tans = min(ans, dp[_ma][_mb])\n\n\t\t_ma += ma\n\n\t\t_mb += mb\n\n\tprint((ans if ans < M else -1))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n\tmain()\n","code_v0_loc":21,"code_v1_loc":27,"code_v0_num_chars":492,"code_v1_num_chars":590,"code_v0_no_empty_lines":"def main():\n    n, ma, mb, *L = list(map(int, open(0).read().split()))\n    M = 1 << 30\n    dp = [[M] * 420 for _ in range(420)]\n    dp[0][0] = 0\n    for a, b, c in zip(*[iter(L)] * 3):\n        for i in range(400, -1, -1):\n            for j in range(400, -1, -1):\n                t = dp[i][j] + c\n                if dp[i + a][j + b] > t:\n                    dp[i + a][j + b] = t\n    ans = M\n    _ma, _mb = ma, mb\n    while _ma < 410 > _mb:\n        ans = min(ans, dp[_ma][_mb])\n        _ma += ma\n        _mb += mb\n    print((ans if ans < M else -1))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def main():\n    n, ma, mb, *L = list(map(int, open(0).read().split()))\n    M = 1 << 30\n    dp = [[M] * 420 for _ in range(420)]\n    dp[0][0] = 0\n    ua = ub = 15\n    for a, b, c in zip(*[iter(L)] * 3):\n        for i in range(ua, -1, -1):\n            for j in range(ub, -1, -1):\n                t = dp[i][j] + c\n                if dp[i + a][j + b] > t:\n                    dp[i + a][j + b] = t\n                    if ua < i + a:\n                        ua = i + a\n                    if ub < j + b:\n                        ub = j + b\n    ans = M\n    _ma, _mb = ma, mb\n    while _ma < 410 > _mb:\n        ans = min(ans, dp[_ma][_mb])\n        _ma += ma\n        _mb += mb\n    print((ans if ans < M else -1))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":22.2222222222,"diff":["+    ua = ub = 15","-        for i in range(400, -1, -1):","-            for j in range(400, -1, -1):","+        for i in range(ua, -1, -1):","+            for j in range(ub, -1, -1):","+                    if ua < i + a:","+                        ua = i + a","+                    if ub < j + b:","+                        ub = j + b"],"diff_only_import_comment":false,"measured_runtime_v0":1.1710306553,"measured_runtime_v1":0.275720624,"runtime_lift":4.2471638081,"key":["s355426542","s468498336"]}
{"user_id":"u556594202","problem_id":"p03494","language":"python","submission_id_v0":"s386053727","submission_id_v1":"s802119805","cpu_time_v0":120,"cpu_time_v1":25,"memory_v0":27180,"memory_v1":9224,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":79.17,"input":"import numpy as np\n\n\n\nn = int(eval(input()))\n\na = np.array(list(map(int,input().split())))\n\n\n\ncount = 0\n\nwhile np.all(a%2==0):\n\n    count+=1\n\n    a=a\/2\n\nprint(count)\n","target":"N=int(eval(input()))\n\na = [int(i) for i in input().split()]\n\n\n\ncount=0\n\nwhile 1:\n\n    if sum([i%2 for i in a]) == 0:\n\n        a = [i\/2 for i in a]\n\n        count=count+1\n\n    else:\n\n        print(count)\n\n        break\n","code_v0_loc":10,"code_v1_loc":11,"code_v0_num_chars":160,"code_v1_num_chars":212,"code_v0_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\na = np.array(list(map(int, input().split())))\ncount = 0\nwhile np.all(a % 2 == 0):\n    count += 1\n    a = a \/ 2\nprint(count)\n","code_v1_no_empty_lines":"N = int(eval(input()))\na = [int(i) for i in input().split()]\ncount = 0\nwhile 1:\n    if sum([i % 2 for i in a]) == 0:\n        a = [i \/ 2 for i in a]\n        count = count + 1\n    else:\n        print(count)\n        break\n","code_same":false,"relative_loc_diff_percent":9.0909090909,"diff":["-import numpy as np","-","-n = int(eval(input()))","-a = np.array(list(map(int, input().split())))","+N = int(eval(input()))","+a = [int(i) for i in input().split()]","-while np.all(a % 2 == 0):","-    count += 1","-    a = a \/ 2","-print(count)","+while 1:","+    if sum([i % 2 for i in a]) == 0:","+        a = [i \/ 2 for i in a]","+        count = count + 1","+    else:","+        print(count)","+        break"],"diff_only_import_comment":false,"measured_runtime_v0":2.1324696655,"measured_runtime_v1":0.2760572641,"runtime_lift":7.7247366501,"key":["s386053727","s802119805"]}
{"user_id":"u729133443","problem_id":"p03434","language":"python","submission_id_v0":"s231475572","submission_id_v1":"s619171000","cpu_time_v0":35,"cpu_time_v1":30,"memory_v0":9016,"memory_v1":9012,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.29,"input":"_,s=open(c:=0)\n\nfor a in sorted(map(int,s.split())):c=a-c\n\nprint(c)","target":"for a in sorted(map(int,[*open(c:=0)][1].split())):c=a-c\n\nprint(c)","code_v0_loc":3,"code_v1_loc":2,"code_v0_num_chars":67,"code_v1_num_chars":66,"code_v0_no_empty_lines":"_, s = open(c := 0)\nfor a in sorted(map(int, s.split())):\n    c = a - c\nprint(c)\n","code_v1_no_empty_lines":"for a in sorted(map(int, [*open(c := 0)][1].split())):\n    c = a - c\nprint(c)\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-_, s = open(c := 0)","-for a in sorted(map(int, s.split())):","+for a in sorted(map(int, [*open(c := 0)][1].split())):"],"diff_only_import_comment":false,"measured_runtime_v0":0.269129122,"measured_runtime_v1":0.112153646,"runtime_lift":2.3996466598,"key":["s231475572","s619171000"]}
{"user_id":"u168139048","problem_id":"p02883","language":"python","submission_id_v0":"s505691060","submission_id_v1":"s145470826","cpu_time_v0":1986,"cpu_time_v1":1272,"memory_v0":119628,"memory_v1":120140,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":35.95,"input":"import sys\n\nsys.setrecursionlimit(10000000)\n\nimport heapq\n\nimport math\n\n \n\ndef main():\n\n    N, K = list(map(int, input().split()))\n\n    A = [int(c) for c in input().split()]\n\n    F = [int(c) for c in input().split()]\n\n    \n\n    A.sort()\n\n    F.sort(reverse=True)\n\n \n\n    num = 0\n\n    sum_ = []\n\n    for i in range(N):\n\n      sum_.append(A[i] * F[i])\n\n    left = 0\n\n    right = 10 ** 12\n\n    while(num < 90):\n\n        number = 0\n\n        mid = (left + right) \/\/ 2\n\n        # print(mid)\n\n        for i in range(len(A)):\n\n            if sum_[i] <= mid:\n\n                continue\n\n            else:\n\n                number += math.ceil((sum_[i] - mid) \/ F[i])\n\n            # print(number)\n\n        if number > K:\n\n            # \u6700\u5927\u5024\u3092mid\u3088\u308a\u5c0f\u3055\u304f\u3067\u304d\u306a\u3044 -> \u6700\u5927\u5024\u306f\u3082\u3063\u3068\u3067\u304b\u3044\n\n            left = mid + 1\n\n        else:\n\n            right = mid\n\n        num += 1\n\n    print(mid)\n\n                \n\n        \n\n \n\n \n\n \n\nif __name__ == '__main__':\n\n    main()","target":"import sys\n\nsys.setrecursionlimit(10000000)\n\nimport heapq\n\nimport math\n\n\n\ndef main():\n\n    N, K = list(map(int, input().split()))\n\n    A = [int(c) for c in input().split()]\n\n    F = [int(c) for c in input().split()]\n\n    \n\n    A.sort()\n\n    F.sort(reverse=True)\n\n\n\n    num = 0\n\n    sum_ = []\n\n    for i in range(len(A)):\n\n        sum_.append(A[i] * F[i])\n\n    left = 0\n\n    right = 10 ** 12\n\n    while(num < 50):\n\n        number = 0\n\n        mid = (left + right) \/\/ 2\n\n        # print(mid)\n\n        for i in range(len(A)):\n\n            if sum_[i] <= mid:\n\n                continue\n\n            else:\n\n                number += math.ceil((sum_[i] - mid) \/ F[i])\n\n            # print(number)\n\n        if number > K:\n\n            # \u6700\u5927\u5024\u3092mid\u3088\u308a\u5c0f\u3055\u304f\u3067\u304d\u306a\u3044 -> \u6700\u5927\u5024\u306f\u3082\u3063\u3068\u3067\u304b\u3044\n\n            left = mid + 1\n\n        else:\n\n            right = mid\n\n        num += 1\n\n    print(mid)\n\n                \n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":43,"code_v1_loc":40,"code_v0_num_chars":927,"code_v1_num_chars":916,"code_v0_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10000000)\nimport heapq\nimport math\n\n\ndef main():\n    N, K = list(map(int, input().split()))\n    A = [int(c) for c in input().split()]\n    F = [int(c) for c in input().split()]\n    A.sort()\n    F.sort(reverse=True)\n    num = 0\n    sum_ = []\n    for i in range(N):\n        sum_.append(A[i] * F[i])\n    left = 0\n    right = 10**12\n    while num < 90:\n        number = 0\n        mid = (left + right) \/\/ 2\n        # print(mid)\n        for i in range(len(A)):\n            if sum_[i] <= mid:\n                continue\n            else:\n                number += math.ceil((sum_[i] - mid) \/ F[i])\n            # print(number)\n        if number > K:\n            # \u6700\u5927\u5024\u3092mid\u3088\u308a\u5c0f\u3055\u304f\u3067\u304d\u306a\u3044 -> \u6700\u5927\u5024\u306f\u3082\u3063\u3068\u3067\u304b\u3044\n            left = mid + 1\n        else:\n            right = mid\n        num += 1\n    print(mid)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10000000)\nimport heapq\nimport math\n\n\ndef main():\n    N, K = list(map(int, input().split()))\n    A = [int(c) for c in input().split()]\n    F = [int(c) for c in input().split()]\n    A.sort()\n    F.sort(reverse=True)\n    num = 0\n    sum_ = []\n    for i in range(len(A)):\n        sum_.append(A[i] * F[i])\n    left = 0\n    right = 10**12\n    while num < 50:\n        number = 0\n        mid = (left + right) \/\/ 2\n        # print(mid)\n        for i in range(len(A)):\n            if sum_[i] <= mid:\n                continue\n            else:\n                number += math.ceil((sum_[i] - mid) \/ F[i])\n            # print(number)\n        if number > K:\n            # \u6700\u5927\u5024\u3092mid\u3088\u308a\u5c0f\u3055\u304f\u3067\u304d\u306a\u3044 -> \u6700\u5927\u5024\u306f\u3082\u3063\u3068\u3067\u304b\u3044\n            left = mid + 1\n        else:\n            right = mid\n        num += 1\n    print(mid)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":6.976744186,"diff":["-    for i in range(N):","+    for i in range(len(A)):","-    while num < 90:","+    while num < 50:"],"diff_only_import_comment":false,"measured_runtime_v0":0.2338457465,"measured_runtime_v1":0.006493052,"runtime_lift":36.0147656217,"key":["s505691060","s145470826"]}
{"user_id":"u738622346","problem_id":"p03854","language":"python","submission_id_v0":"s146499990","submission_id_v1":"s321967328","cpu_time_v0":123,"cpu_time_v1":50,"memory_v0":3316,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":59.35,"input":"s = eval(input())\n\nt = \"\"\n\nwhile len(t) < len(s):\n\n    target_len = len(s) - len(t)\n\n\n\n    if s[len(t)] == 'd':\n\n        if target_len == 5:\n\n            t += \"dream\"\n\n        elif target_len == 7:\n\n            t += \"dreamer\"\n\n        elif target_len > 7:\n\n            if s[len(t) + 5] != 'd' and s[len(t) + 5:len(t) + 7 + 1] != \"era\":\n\n                t += \"dreamer\"\n\n            else:\n\n                t += \"dream\"\n\n        else:\n\n            break\n\n    else:\n\n        if target_len == 5:\n\n            t += \"erase\"\n\n        elif target_len == 6:\n\n            t += \"eraser\"\n\n        elif target_len > 6:\n\n            if s[len(t) + 5] != 'd' and s[len(t) + 5:len(t) + 6 + 2] != \"era\":\n\n                t += \"eraser\"\n\n            else:\n\n                t += \"erase\"\n\n        else:\n\n            break\n\n\n\n    if s[0:len(t)] != t:\n\n        break\n\n\n\nprint((\"YES\" if s == t else \"NO\"))\n","target":"s = eval(input())\n\ndiv = [\"dream\", \"dreamer\", \"erase\", \"eraser\"]\n\nrev = []\n\nt = \"\"\n\ns_rev = s[::-1]\n\nfor d in div:\n\n    rev.append(d[::-1])\n\n\n\nresult = True\n\ni = 0\n\nwhile i < len(s):\n\n    can_divide = False\n\n    for d in rev:\n\n        if len(s_rev) - i >= len(d) and s_rev[i:i + len(d)] == d:\n\n            can_divide = True\n\n            i += len(d)\n\n            break\n\n    if not can_divide:\n\n        result = False\n\n        break\n\n\n\nprint((\"YES\" if result else \"NO\"))\n","code_v0_loc":34,"code_v1_loc":22,"code_v0_num_chars":872,"code_v1_num_chars":461,"code_v0_no_empty_lines":"s = eval(input())\nt = \"\"\nwhile len(t) < len(s):\n    target_len = len(s) - len(t)\n    if s[len(t)] == \"d\":\n        if target_len == 5:\n            t += \"dream\"\n        elif target_len == 7:\n            t += \"dreamer\"\n        elif target_len > 7:\n            if s[len(t) + 5] != \"d\" and s[len(t) + 5 : len(t) + 7 + 1] != \"era\":\n                t += \"dreamer\"\n            else:\n                t += \"dream\"\n        else:\n            break\n    else:\n        if target_len == 5:\n            t += \"erase\"\n        elif target_len == 6:\n            t += \"eraser\"\n        elif target_len > 6:\n            if s[len(t) + 5] != \"d\" and s[len(t) + 5 : len(t) + 6 + 2] != \"era\":\n                t += \"eraser\"\n            else:\n                t += \"erase\"\n        else:\n            break\n    if s[0 : len(t)] != t:\n        break\nprint((\"YES\" if s == t else \"NO\"))\n","code_v1_no_empty_lines":"s = eval(input())\ndiv = [\"dream\", \"dreamer\", \"erase\", \"eraser\"]\nrev = []\nt = \"\"\ns_rev = s[::-1]\nfor d in div:\n    rev.append(d[::-1])\nresult = True\ni = 0\nwhile i < len(s):\n    can_divide = False\n    for d in rev:\n        if len(s_rev) - i >= len(d) and s_rev[i : i + len(d)] == d:\n            can_divide = True\n            i += len(d)\n            break\n    if not can_divide:\n        result = False\n        break\nprint((\"YES\" if result else \"NO\"))\n","code_same":false,"relative_loc_diff_percent":35.2941176471,"diff":["+div = [\"dream\", \"dreamer\", \"erase\", \"eraser\"]","+rev = []","-while len(t) < len(s):","-    target_len = len(s) - len(t)","-    if s[len(t)] == \"d\":","-        if target_len == 5:","-            t += \"dream\"","-        elif target_len == 7:","-            t += \"dreamer\"","-        elif target_len > 7:","-            if s[len(t) + 5] != \"d\" and s[len(t) + 5 : len(t) + 7 + 1] != \"era\":","-                t += \"dreamer\"","-            else:","-                t += \"dream\"","-        else:","+s_rev = s[::-1]","+for d in div:","+    rev.append(d[::-1])","+result = True","+i = 0","+while i < len(s):","+    can_divide = False","+    for d in rev:","+        if len(s_rev) - i >= len(d) and s_rev[i : i + len(d)] == d:","+            can_divide = True","+            i += len(d)","-    else:","-        if target_len == 5:","-            t += \"erase\"","-        elif target_len == 6:","-            t += \"eraser\"","-        elif target_len > 6:","-            if s[len(t) + 5] != \"d\" and s[len(t) + 5 : len(t) + 6 + 2] != \"era\":","-                t += \"eraser\"","-            else:","-                t += \"erase\"","-        else:","-            break","-    if s[0 : len(t)] != t:","+    if not can_divide:","+        result = False","-print((\"YES\" if s == t else \"NO\"))","+print((\"YES\" if result else \"NO\"))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3984818382,"measured_runtime_v1":0.3150180125,"runtime_lift":1.2649493755,"key":["s146499990","s321967328"]}
{"user_id":"u808429775","problem_id":"p00134","language":"python","submission_id_v0":"s571351483","submission_id_v1":"s722552691","cpu_time_v0":100,"cpu_time_v1":60,"memory_v0":7404,"memory_v1":5952,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":40.0,"input":"from statistics import mean\n\n\n\ninputCount = int(eval(input()))\n\nprices = [int(eval(input())) for lp in range(inputCount)]\n\naverage = mean(prices)\n\nprint((int(average)))\n\n\n","target":"inputCount = int(eval(input()))\n\nprices = [int(eval(input())) for lp in range(inputCount)]\n\naverage = sum(prices) \/\/ inputCount\n\nprint(average)\n\n\n","code_v0_loc":7,"code_v1_loc":5,"code_v0_num_chars":157,"code_v1_num_chars":134,"code_v0_no_empty_lines":"from statistics import mean\n\ninputCount = int(eval(input()))\nprices = [int(eval(input())) for lp in range(inputCount)]\naverage = mean(prices)\nprint((int(average)))\n","code_v1_no_empty_lines":"inputCount = int(eval(input()))\nprices = [int(eval(input())) for lp in range(inputCount)]\naverage = sum(prices) \/\/ inputCount\nprint(average)\n","code_same":false,"relative_loc_diff_percent":28.5714285714,"diff":["-from statistics import mean","-","-average = mean(prices)","-print((int(average)))","+average = sum(prices) \/\/ inputCount","+print(average)"],"diff_only_import_comment":false,"measured_runtime_v0":0.453101104,"measured_runtime_v1":0.2992461076,"runtime_lift":1.514142014,"key":["s571351483","s722552691"]}
{"user_id":"u645250356","problem_id":"p03559","language":"python","submission_id_v0":"s643210131","submission_id_v1":"s973528764","cpu_time_v0":585,"cpu_time_v1":431,"memory_v0":124300,"memory_v1":30272,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":26.32,"input":"from collections import Counter,defaultdict,deque\n\nfrom heapq import heappop,heappush,heapify\n\nimport sys,bisect,math,itertools,fractions,pprint\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\nINF = float('inf')\n\ndef inp(): return int(sys.stdin.readline())\n\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\n\n\nn = inp()\n\nA = sorted(inpl())\n\nB = sorted(inpl())\n\nC = sorted(inpl())\n\ncnt = [0] * n\n\nres = 0\n\nfor i,b in enumerate(B):\n\n    c = bisect.bisect_left(C,b+1)\n\n    cnt[i] = n-c\n\n\n\nacc = [0]\n\nfor x in cnt:\n\n    acc += [acc[-1] + x]\n\nsu = sum(cnt) \n\nfor i,a in enumerate(A):\n\n    c = bisect.bisect_left(B,a+1)\n\n    res += su - acc[c]\n\nprint(res)","target":"from collections import Counter,defaultdict,deque\n\nfrom heapq import heappop,heappush,heapify\n\nimport sys,bisect,math,itertools,fractions,pprint\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\nINF = float('inf')\n\ndef inp(): return int(sys.stdin.readline())\n\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\n\n\nn = inp()\n\na = inpl()\n\nb = inpl()\n\nc = inpl()\n\na.sort()\n\nb.sort()\n\nc.sort()\n\nlb = [0] * n\n\nres = 0\n\nfor i in range(n):\n\n    tmp = bisect.bisect_right(b,a[i])\n\n    if tmp == n: continue\n\n    lb[tmp] += 1\n\nllb = list(itertools.accumulate(lb))\n\n# print(lb,llb)\n\nrr = [0] * n\n\nfor i in range(n):\n\n    tmp = bisect.bisect_right(c,b[i])\n\n    if tmp == n: continue\n\n    rr[tmp] += llb[i]\n\nprint((sum(list(itertools.accumulate(rr)))))","code_v0_loc":27,"code_v1_loc":30,"code_v0_num_chars":662,"code_v1_num_chars":747,"code_v0_no_empty_lines":"from collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush, heapify\nimport sys, bisect, math, itertools, fractions, pprint\n\nsys.setrecursionlimit(10**8)\nmod = 10**9 + 7\nINF = float(\"inf\")\n\n\ndef inp():\n    return int(sys.stdin.readline())\n\n\ndef inpl():\n    return list(map(int, sys.stdin.readline().split()))\n\n\nn = inp()\nA = sorted(inpl())\nB = sorted(inpl())\nC = sorted(inpl())\ncnt = [0] * n\nres = 0\nfor i, b in enumerate(B):\n    c = bisect.bisect_left(C, b + 1)\n    cnt[i] = n - c\nacc = [0]\nfor x in cnt:\n    acc += [acc[-1] + x]\nsu = sum(cnt)\nfor i, a in enumerate(A):\n    c = bisect.bisect_left(B, a + 1)\n    res += su - acc[c]\nprint(res)\n","code_v1_no_empty_lines":"from collections import Counter, defaultdict, deque\nfrom heapq import heappop, heappush, heapify\nimport sys, bisect, math, itertools, fractions, pprint\n\nsys.setrecursionlimit(10**8)\nmod = 10**9 + 7\nINF = float(\"inf\")\n\n\ndef inp():\n    return int(sys.stdin.readline())\n\n\ndef inpl():\n    return list(map(int, sys.stdin.readline().split()))\n\n\nn = inp()\na = inpl()\nb = inpl()\nc = inpl()\na.sort()\nb.sort()\nc.sort()\nlb = [0] * n\nres = 0\nfor i in range(n):\n    tmp = bisect.bisect_right(b, a[i])\n    if tmp == n:\n        continue\n    lb[tmp] += 1\nllb = list(itertools.accumulate(lb))\n# print(lb,llb)\nrr = [0] * n\nfor i in range(n):\n    tmp = bisect.bisect_right(c, b[i])\n    if tmp == n:\n        continue\n    rr[tmp] += llb[i]\nprint((sum(list(itertools.accumulate(rr)))))\n","code_same":false,"relative_loc_diff_percent":10.0,"diff":["-A = sorted(inpl())","-B = sorted(inpl())","-C = sorted(inpl())","-cnt = [0] * n","+a = inpl()","+b = inpl()","+c = inpl()","+a.sort()","+b.sort()","+c.sort()","+lb = [0] * n","-for i, b in enumerate(B):","-    c = bisect.bisect_left(C, b + 1)","-    cnt[i] = n - c","-acc = [0]","-for x in cnt:","-    acc += [acc[-1] + x]","-su = sum(cnt)","-for i, a in enumerate(A):","-    c = bisect.bisect_left(B, a + 1)","-    res += su - acc[c]","-print(res)","+for i in range(n):","+    tmp = bisect.bisect_right(b, a[i])","+    if tmp == n:","+        continue","+    lb[tmp] += 1","+llb = list(itertools.accumulate(lb))","+# print(lb,llb)","+rr = [0] * n","+for i in range(n):","+    tmp = bisect.bisect_right(c, b[i])","+    if tmp == n:","+        continue","+    rr[tmp] += llb[i]","+print((sum(list(itertools.accumulate(rr)))))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2585086877,"measured_runtime_v1":0.0062210422,"runtime_lift":41.5539198783,"key":["s643210131","s973528764"]}
{"user_id":"u194472175","problem_id":"p02690","language":"python","submission_id_v0":"s141708536","submission_id_v1":"s386181536","cpu_time_v0":50,"cpu_time_v1":40,"memory_v0":9192,"memory_v1":9160,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":20.0,"input":"X=int(eval(input()))\n\nx=0\n\nlist=[]\n\nfor i in range(-118,120,1):\n\n\n\n    for j in range(-119,119,1):\n\n        x=i**5-j**5\n\n        if x==X:\n\n            list.append((str(i)+' '+str(j)))\n\n\n\nprint((list[0]))","target":"X=int(eval(input()))\n\nx=0\n\nlist=[]\n\nfor i in range(-118,120,1):\n\n    for j in range(-119,119,1):\n\n        x=i**5-j**5\n\n        if x==X:\n\n            print((str(i)+' '+str(j)))\n\n            break\n\n    else:\n\n        continue\n\n    break\n","code_v0_loc":11,"code_v1_loc":12,"code_v0_num_chars":195,"code_v1_num_chars":229,"code_v0_no_empty_lines":"X = int(eval(input()))\nx = 0\nlist = []\nfor i in range(-118, 120, 1):\n    for j in range(-119, 119, 1):\n        x = i**5 - j**5\n        if x == X:\n            list.append((str(i) + \" \" + str(j)))\nprint((list[0]))\n","code_v1_no_empty_lines":"X = int(eval(input()))\nx = 0\nlist = []\nfor i in range(-118, 120, 1):\n    for j in range(-119, 119, 1):\n        x = i**5 - j**5\n        if x == X:\n            print((str(i) + \" \" + str(j)))\n            break\n    else:\n        continue\n    break\n","code_same":false,"relative_loc_diff_percent":8.3333333333,"diff":["-            list.append((str(i) + \" \" + str(j)))","-print((list[0]))","+            print((str(i) + \" \" + str(j)))","+            break","+    else:","+        continue","+    break"],"diff_only_import_comment":false,"measured_runtime_v0":0.2096992373,"measured_runtime_v1":0.1602732539,"runtime_lift":1.3083857238,"key":["s141708536","s386181536"]}
{"user_id":"u811733736","problem_id":"p00144","language":"python","submission_id_v0":"s682125154","submission_id_v1":"s595229787","cpu_time_v0":600,"cpu_time_v1":370,"memory_v0":8556,"memory_v1":8432,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":38.33,"input":"# -*- coding: utf-8 -*-\n\n\"\"\"\n\nhttp:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=0144\n\n\n\n\"\"\"\n\nimport sys\n\nfrom sys import stdin\n\ninput = stdin.readline\n\nfrom enum import Enum\n\n\n\n\n\nclass Graph(object):\n\n    \"\"\" single source shortest path \"\"\"\n\n    class Status(Enum):\n\n        \"\"\" ?????????????\u00a8??????\u00b6??? \"\"\"\n\n        white = 1  # ????\u00a8????\n\n        gray = 2  # ?\u00a8???????\n\n        black = 3  #?\u00a8???????\n\n\n\n    def __init__(self, n, data):\n\n        self.num_of_nodes = n+1\n\n        self.color = [Graph.Status.white] * self.num_of_nodes  # ????????????????\u00a8??????\u00b6???\n\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n\n        for i in range(self.num_of_nodes):\n\n            self.M[i][i] = 0\n\n        self._make_matrix(data)  # data????????????????????\u00a3??\\??????(?????\\?\u00b6???\u00a8???????????????????????\u00a7????????????)\n\n        self.d = [float('inf')] * self.num_of_nodes  # ?\u00a7???????????????????(?????????)\n\n        self.p = [-1] * self.num_of_nodes  # ????????????????????????????\u00a8?????????????????????????\n\n\n\n    def _make_matrix(self, data):\n\n        for d in data:\n\n            r = d[0]\n\n            for t in d[2:]:\n\n                self.M[r][t] = 1\n\n\n\n    def dijkstra(self, start):\n\n        self.d[start] = 0\n\n        self.p[start] = -1\n\n        while True:\n\n            mincost = float('inf')\n\n            # ??\\??????????????\u00a7??????????????\u00a8?????????????????????u???????????????\n\n            for i in range(len(self.d)):\n\n                if self.color[i] != Graph.Status.black and self.d[i] < mincost:  # S????\u00b1???????????????????S??\u00a8??\\?\u00b6?????????????????????????????????????????\u00b0???????????????????\n\n                    mincost = self.d[i]\n\n                    u = i  # u??????????????????ID\n\n            if mincost == float('inf'):\n\n                break\n\n            self.color[u] = Graph.Status.black  # ?????????u???S????\u00b1???????????????\u00b4???\n\n            for v in range(len(self.d)):\n\n                if self.color[v] != Graph.Status.black and self.M[u][v] != float('inf'):\n\n                    # v????????????????????????????????\u00b0??????S???????????\u00a3???u????????????????????????????????????????????\u00b0??????????????\u00b1??\u00a7??\u00b4??\u00b0??????\n\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n\n                        self.d[v] = self.d[u] + self.M[u][v]\n\n                        self.p[v] = u\n\n                        self.color[v] = Graph.Status.gray\n\n\n\n    def warshallFloyd(self):\n\n        V = self.num_of_nodes\n\n        for k in range(V):\n\n            for i in range(V):\n\n                for j in range(V):\n\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\n\n\n\n\n\n\n\ndef main(args):\n\n    n = int(eval(input()))\n\n    network = []\n\n    for _ in range(n):\n\n        network.append([int(x) for x in input().split()])\n\n\n\n    packets = []\n\n    p = int(eval(input()))\n\n    for _ in range(p):\n\n        packets.append([int(x) for x in input().split()])\n\n\n\n    g = Graph(n, network)\n\n    g.warshallFloyd()\n\n\n\n    for s, d, v in packets:\n\n        if g.M[s][d] < v:\n\n            print((g.M[s][d]+1))\n\n        else:\n\n            print('NA')\n\n\n\n\n\n\n\nif __name__ == '__main__':\n\n    main(sys.argv[1:])","target":"# -*- coding: utf-8 -*-\n\n\"\"\"\n\nhttp:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=0144\n\n\n\n\"\"\"\n\nimport sys\n\nfrom sys import stdin\n\ninput = stdin.readline\n\nfrom enum import Enum\n\n\n\n\n\nclass Graph(object):\n\n    \"\"\" single source shortest path \"\"\"\n\n    class Status(Enum):\n\n        \"\"\" ?????????????\u00a8??????\u00b6??? \"\"\"\n\n        white = 1  # ????\u00a8????\n\n        gray = 2  # ?\u00a8???????\n\n        black = 3  #?\u00a8???????\n\n\n\n    def __init__(self, n, data):\n\n        self.num_of_nodes = n+1\n\n        self.color = [Graph.Status.white] * self.num_of_nodes  # ????????????????\u00a8??????\u00b6???\n\n        self.M = [[float('inf')] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n\n        for i in range(self.num_of_nodes):\n\n            self.M[i][i] = 0\n\n        self._make_matrix(data)  # data????????????????????\u00a3??\\??????(?????\\?\u00b6???\u00a8???????????????????????\u00a7????????????)\n\n        self.d = [float('inf')] * self.num_of_nodes  # ?\u00a7???????????????????(?????????)\n\n        self.p = [-1] * self.num_of_nodes  # ????????????????????????????\u00a8?????????????????????????\n\n\n\n    def _make_matrix(self, data):\n\n        for d in data:\n\n            r = d[0]\n\n            for t in d[2:]:\n\n                self.M[r][t] = 1\n\n\n\n    def dijkstra(self, start):\n\n        self.d[start] = 0\n\n        self.p[start] = -1\n\n        while True:\n\n            mincost = float('inf')\n\n            # ??\\??????????????\u00a7??????????????\u00a8?????????????????????u???????????????\n\n            for i in range(len(self.d)):\n\n                if self.color[i] != Graph.Status.black and self.d[i] < mincost:  # S????\u00b1???????????????????S??\u00a8??\\?\u00b6?????????????????????????????????????????\u00b0???????????????????\n\n                    mincost = self.d[i]\n\n                    u = i  # u??????????????????ID\n\n            if mincost == float('inf'):\n\n                break\n\n            self.color[u] = Graph.Status.black  # ?????????u???S????\u00b1???????????????\u00b4???\n\n            for v in range(len(self.d)):\n\n                if self.color[v] != Graph.Status.black and self.M[u][v] != float('inf'):\n\n                    # v????????????????????????????????\u00b0??????S???????????\u00a3???u????????????????????????????????????????????\u00b0??????????????\u00b1??\u00a7??\u00b4??\u00b0??????\n\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n\n                        self.d[v] = self.d[u] + self.M[u][v]\n\n                        self.p[v] = u\n\n                        self.color[v] = Graph.Status.gray\n\n\n\n    def warshallFloyd(self):\n\n        for k in range(self.num_of_nodes):\n\n            for i in range(self.num_of_nodes):\n\n                for j in range(self.num_of_nodes):\n\n                    if self.M[i][k] + self.M[k][j] < self.M[i][j]: \n\n                        self.M[i][j] = self.M[i][k] + self.M[k][j]\n\n\n\n\n\ndef main(args):\n\n    n = int(eval(input()))\n\n    network = []\n\n    for _ in range(n):\n\n        network.append([int(x) for x in input().split()])\n\n\n\n    packets = []\n\n    p = int(eval(input()))\n\n    for _ in range(p):\n\n        packets.append([int(x) for x in input().split()])\n\n\n\n    g = Graph(n, network)\n\n    g.warshallFloyd()\n\n\n\n    for s, d, v in packets:\n\n        if g.M[s][d] < v:\n\n            print((g.M[s][d]+1))\n\n        else:\n\n            print('NA')\n\n\n\n\n\n\n\nif __name__ == '__main__':\n\n    main(sys.argv[1:])","code_v0_loc":89,"code_v1_loc":88,"code_v0_num_chars":3155,"code_v1_num_chars":3224,"code_v0_no_empty_lines":"# -*- coding: utf-8 -*-\n\"\"\"\nhttp:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=0144\n\"\"\"\nimport sys\nfrom sys import stdin\n\ninput = stdin.readline\nfrom enum import Enum\n\n\nclass Graph(object):\n    \"\"\"single source shortest path\"\"\"\n\n    class Status(Enum):\n        \"\"\"?????????????\u00a8??????\u00b6???\"\"\"\n\n        white = 1  # ????\u00a8????\n        gray = 2  # ?\u00a8???????\n        black = 3  # ?\u00a8???????\n\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [\n            Graph.Status.white\n        ] * self.num_of_nodes  # ????????????????\u00a8??????\u00b6???\n        self.M = [[float(\"inf\")] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(\n            data\n        )  # data????????????????????\u00a3??\\??????(?????\\?\u00b6???\u00a8???????????????????????\u00a7????????????)\n        self.d = [float(\"inf\")] * self.num_of_nodes  # ?\u00a7???????????????????(?????????)\n        self.p = [\n            -1\n        ] * self.num_of_nodes  # ????????????????????????????\u00a8?????????????????????????\n\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float(\"inf\")\n            # ??\\??????????????\u00a7??????????????\u00a8?????????????????????u???????????????\n            for i in range(len(self.d)):\n                if (\n                    self.color[i] != Graph.Status.black and self.d[i] < mincost\n                ):  # S????\u00b1???????????????????S??\u00a8??\\?\u00b6?????????????????????????????????????????\u00b0???????????????????\n                    mincost = self.d[i]\n                    u = i  # u??????????????????ID\n            if mincost == float(\"inf\"):\n                break\n            self.color[u] = Graph.Status.black  # ?????????u???S????\u00b1???????????????\u00b4???\n            for v in range(len(self.d)):\n                if self.color[v] != Graph.Status.black and self.M[u][v] != float(\"inf\"):\n                    # v????????????????????????????????\u00b0??????S???????????\u00a3???u????????????????????????????????????????????\u00b0??????????????\u00b1??\u00a7??\u00b4??\u00b0??????\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n\n    def warshallFloyd(self):\n        V = self.num_of_nodes\n        for k in range(V):\n            for i in range(V):\n                for j in range(V):\n                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])\n\n\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for s, d, v in packets:\n        if g.M[s][d] < v:\n            print((g.M[s][d] + 1))\n        else:\n            print(\"NA\")\n\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])\n","code_v1_no_empty_lines":"# -*- coding: utf-8 -*-\n\"\"\"\nhttp:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=0144\n\"\"\"\nimport sys\nfrom sys import stdin\n\ninput = stdin.readline\nfrom enum import Enum\n\n\nclass Graph(object):\n    \"\"\"single source shortest path\"\"\"\n\n    class Status(Enum):\n        \"\"\"?????????????\u00a8??????\u00b6???\"\"\"\n\n        white = 1  # ????\u00a8????\n        gray = 2  # ?\u00a8???????\n        black = 3  # ?\u00a8???????\n\n    def __init__(self, n, data):\n        self.num_of_nodes = n + 1\n        self.color = [\n            Graph.Status.white\n        ] * self.num_of_nodes  # ????????????????\u00a8??????\u00b6???\n        self.M = [[float(\"inf\")] * self.num_of_nodes for _ in range(self.num_of_nodes)]\n        for i in range(self.num_of_nodes):\n            self.M[i][i] = 0\n        self._make_matrix(\n            data\n        )  # data????????????????????\u00a3??\\??????(?????\\?\u00b6???\u00a8???????????????????????\u00a7????????????)\n        self.d = [float(\"inf\")] * self.num_of_nodes  # ?\u00a7???????????????????(?????????)\n        self.p = [\n            -1\n        ] * self.num_of_nodes  # ????????????????????????????\u00a8?????????????????????????\n\n    def _make_matrix(self, data):\n        for d in data:\n            r = d[0]\n            for t in d[2:]:\n                self.M[r][t] = 1\n\n    def dijkstra(self, start):\n        self.d[start] = 0\n        self.p[start] = -1\n        while True:\n            mincost = float(\"inf\")\n            # ??\\??????????????\u00a7??????????????\u00a8?????????????????????u???????????????\n            for i in range(len(self.d)):\n                if (\n                    self.color[i] != Graph.Status.black and self.d[i] < mincost\n                ):  # S????\u00b1???????????????????S??\u00a8??\\?\u00b6?????????????????????????????????????????\u00b0???????????????????\n                    mincost = self.d[i]\n                    u = i  # u??????????????????ID\n            if mincost == float(\"inf\"):\n                break\n            self.color[u] = Graph.Status.black  # ?????????u???S????\u00b1???????????????\u00b4???\n            for v in range(len(self.d)):\n                if self.color[v] != Graph.Status.black and self.M[u][v] != float(\"inf\"):\n                    # v????????????????????????????????\u00b0??????S???????????\u00a3???u????????????????????????????????????????????\u00b0??????????????\u00b1??\u00a7??\u00b4??\u00b0??????\n                    if self.d[u] + self.M[u][v] < self.d[v]:\n                        self.d[v] = self.d[u] + self.M[u][v]\n                        self.p[v] = u\n                        self.color[v] = Graph.Status.gray\n\n    def warshallFloyd(self):\n        for k in range(self.num_of_nodes):\n            for i in range(self.num_of_nodes):\n                for j in range(self.num_of_nodes):\n                    if self.M[i][k] + self.M[k][j] < self.M[i][j]:\n                        self.M[i][j] = self.M[i][k] + self.M[k][j]\n\n\ndef main(args):\n    n = int(eval(input()))\n    network = []\n    for _ in range(n):\n        network.append([int(x) for x in input().split()])\n    packets = []\n    p = int(eval(input()))\n    for _ in range(p):\n        packets.append([int(x) for x in input().split()])\n    g = Graph(n, network)\n    g.warshallFloyd()\n    for s, d, v in packets:\n        if g.M[s][d] < v:\n            print((g.M[s][d] + 1))\n        else:\n            print(\"NA\")\n\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])\n","code_same":false,"relative_loc_diff_percent":1.1235955056,"diff":["-        V = self.num_of_nodes","-        for k in range(V):","-            for i in range(V):","-                for j in range(V):","-                    self.M[i][j] = min(self.M[i][j], self.M[i][k] + self.M[k][j])","+        for k in range(self.num_of_nodes):","+            for i in range(self.num_of_nodes):","+                for j in range(self.num_of_nodes):","+                    if self.M[i][k] + self.M[k][j] < self.M[i][j]:","+                        self.M[i][j] = self.M[i][k] + self.M[k][j]"],"diff_only_import_comment":false,"measured_runtime_v0":0.3833627119,"measured_runtime_v1":0.2694868836,"runtime_lift":1.4225653832,"key":["s682125154","s595229787"]}
{"user_id":"u102461423","problem_id":"p03553","language":"python","submission_id_v0":"s825327687","submission_id_v1":"s119429791","cpu_time_v0":227,"cpu_time_v1":22,"memory_v0":17084,"memory_v1":3444,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":90.31,"input":"import sys\n\ninput = sys.stdin.readline\n\nfrom scipy.sparse.csgraph import dijkstra\n\nimport numpy as np\n\n\n\n\"\"\"\n\n\u6700\u5c0f\u30ab\u30c3\u30c8\n\n\"\"\"\n\n\n\nN = int(eval(input()))\n\nstart = 0\n\ngoal = N+1\n\n\n\nA = [0] + [int(x) for x in input().split()]\n\n\n\nINF = 10 ** 12\n\ngraph = np.zeros((N+2,N+2),dtype=np.int64)\n\nfor i,a in enumerate(A[1:],1):\n\n    if a >= 0:\n\n        graph[start,i] = a\n\n    else:\n\n        graph[i,goal] = -a\n\nfor i in range(1,N+1):\n\n    for j in range(2*i,N+1,i):\n\n        if A[i] < 0 and A[j] > 0:\n\n            graph[j][i] = INF\n\n\n\ndef max_flow(graph):\n\n    flow = 0\n\n    while True:\n\n        dist,pred = dijkstra(graph, indices = start, return_predecessors = True, unweighted = True)\n\n        if dist[goal] == np.inf:\n\n            return flow\n\n        path = []\n\n        v = goal\n\n        while True:\n\n            path.append((pred[v],v))\n\n            v = pred[v]\n\n            if v == start:\n\n                break\n\n        add_flow = min(graph[x][y] for x,y in path)\n\n        for x,y in path:\n\n            graph[x][y] -= add_flow\n\n            graph[y][x] += add_flow\n\n        flow += add_flow\n\n\n\nanswer = sum(x for x in A if x > 0) - max_flow(graph)\n\nprint(answer)","target":"import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nfrom collections import deque\n\n\n\nN,*A = list(map(int,read().split()))\n\n\n\nclass Dinic:\n\n    def __init__(self, N, source, sink):\n\n        self.N = N\n\n        self.G = [[] for _ in range(N)]\n\n        self.source = source\n\n        self.sink = sink\n\n\n\n    def add_edge(self, fr, to, cap):\n\n        n1 = len(self.G[fr])\n\n        n2 = len(self.G[to])\n\n        self.G[fr].append([to, cap, n2])\n\n        self.G[to].append([fr, 0, n1]) # \u9006\u8fba\u3092 cap 0 \u3067\u8ffd\u52a0\n\n        \n\n    def add_edge_undirected(self, fr, to, cap):\n\n        n1 = len(self.G[fr])\n\n        n2 = len(self.G[to])\n\n        self.G[fr].append([to, cap, n2])\n\n        self.G[to].append([fr, cap, n1])\n\n        \n\n    def bfs(self):\n\n        level = [0] * self.N\n\n        G = self.G; source = self.source; sink = self.sink\n\n        q = deque([source])\n\n        level[source] = 1\n\n        pop = q.popleft; append = q.append\n\n        while q:\n\n            v = pop()\n\n            lv = level[v] + 1\n\n            for to, cap, rev in G[v]:\n\n                if not cap:\n\n                    continue\n\n                if level[to]:\n\n                    continue\n\n                level[to] = lv\n\n                if to == sink:\n\n                    self.level = level\n\n                    return\n\n                append(to)\n\n        self.level = level\n\n        \n\n    def dfs(self,v,f):\n\n        if v == self.sink:\n\n            return f\n\n        G = self.G\n\n        prog = self.progress\n\n        level = self.level\n\n        lv = level[v]\n\n        E = G[v]\n\n        for i in range(prog[v],len(E)):\n\n            to, cap, rev = E[i]\n\n            prog[v] = i\n\n            if not cap:\n\n                continue\n\n            if level[to] <= lv:\n\n                continue\n\n            x = f if f < cap else cap\n\n            ff = self.dfs(to, x)\n\n            if ff:\n\n                E[i][1] -= ff\n\n                G[to][rev][1] += ff\n\n                return ff\n\n        return 0\n\n    \n\n    def max_flow(self):\n\n        INF = 10**18\n\n        flow = 0\n\n        while True:\n\n            self.bfs()\n\n            if not self.level[self.sink]:\n\n                return flow\n\n            self.progress = [0] * self.N\n\n            while True:\n\n                f = self.dfs(self.source, INF)\n\n                if not f:\n\n                    break\n\n                flow += f\n\n        return flow\n\n\n\nsource = 0; sink = N+1; INF = 10 ** 18\n\ndinic = Dinic(N+2,source,sink)\n\nadd = dinic.add_edge\n\n\n\nfor i,x in enumerate(A,1):\n\n    if x < 0:\n\n        # source\u5074\uff1a\u5272\u308b\u3082\u306e\u3092\u8868\u73fe\u3002sink\u5074\u306b\u3046\u3064\u3059\u3068\u304d\u306b\u30ab\u30c3\u30c8-x\u304c\u5fc5\u8981\u3002\n\n        add(source,i,-x)\n\n    else:\n\n        # sink\u5074\uff1a\u5272\u3089\u306a\u3044\u3082\u306e\u3092\u8868\u73fe\u3002source\u5074\u306b\u3046\u3064\u3059\u3068\u304d\u306b\u30ab\u30c3\u30c8x\u304c\u5fc5\u8981\u3002\n\n        add(i,sink,x)\n\n\n\nfor i in range(1,N+1):\n\n    for j in range(i+i,N+1,i):\n\n        # i\u3092\u5272\u308b\u306a\u3089j\u3082\u5272\u308b\u3002i\u3092\u5272\u3063\u3066j\u3092\u5272\u3089\u306a\u3044\u306e\u306f\u7981\u6b62\n\n        # i\u304csource\u3067j\u304csink\u306a\u306e\u306f\u7981\u6b62\n\n        add(i,j,INF)\n\n\n\nf = dinic.max_flow()\n\nx = sum(x for x in A if x >= 0)\n\nanswer = x - f\n\n\n\nprint(answer)","code_v0_loc":48,"code_v1_loc":110,"code_v0_num_chars":1147,"code_v1_num_chars":2963,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nfrom scipy.sparse.csgraph import dijkstra\nimport numpy as np\n\n\"\"\"\n\u6700\u5c0f\u30ab\u30c3\u30c8\n\"\"\"\nN = int(eval(input()))\nstart = 0\ngoal = N + 1\nA = [0] + [int(x) for x in input().split()]\nINF = 10**12\ngraph = np.zeros((N + 2, N + 2), dtype=np.int64)\nfor i, a in enumerate(A[1:], 1):\n    if a >= 0:\n        graph[start, i] = a\n    else:\n        graph[i, goal] = -a\nfor i in range(1, N + 1):\n    for j in range(2 * i, N + 1, i):\n        if A[i] < 0 and A[j] > 0:\n            graph[j][i] = INF\n\n\ndef max_flow(graph):\n    flow = 0\n    while True:\n        dist, pred = dijkstra(\n            graph, indices=start, return_predecessors=True, unweighted=True\n        )\n        if dist[goal] == np.inf:\n            return flow\n        path = []\n        v = goal\n        while True:\n            path.append((pred[v], v))\n            v = pred[v]\n            if v == start:\n                break\n        add_flow = min(graph[x][y] for x, y in path)\n        for x, y in path:\n            graph[x][y] -= add_flow\n            graph[y][x] += add_flow\n        flow += add_flow\n\n\nanswer = sum(x for x in A if x > 0) - max_flow(graph)\nprint(answer)\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nfrom collections import deque\n\nN, *A = list(map(int, read().split()))\n\n\nclass Dinic:\n    def __init__(self, N, source, sink):\n        self.N = N\n        self.G = [[] for _ in range(N)]\n        self.source = source\n        self.sink = sink\n\n    def add_edge(self, fr, to, cap):\n        n1 = len(self.G[fr])\n        n2 = len(self.G[to])\n        self.G[fr].append([to, cap, n2])\n        self.G[to].append([fr, 0, n1])  # \u9006\u8fba\u3092 cap 0 \u3067\u8ffd\u52a0\n\n    def add_edge_undirected(self, fr, to, cap):\n        n1 = len(self.G[fr])\n        n2 = len(self.G[to])\n        self.G[fr].append([to, cap, n2])\n        self.G[to].append([fr, cap, n1])\n\n    def bfs(self):\n        level = [0] * self.N\n        G = self.G\n        source = self.source\n        sink = self.sink\n        q = deque([source])\n        level[source] = 1\n        pop = q.popleft\n        append = q.append\n        while q:\n            v = pop()\n            lv = level[v] + 1\n            for to, cap, rev in G[v]:\n                if not cap:\n                    continue\n                if level[to]:\n                    continue\n                level[to] = lv\n                if to == sink:\n                    self.level = level\n                    return\n                append(to)\n        self.level = level\n\n    def dfs(self, v, f):\n        if v == self.sink:\n            return f\n        G = self.G\n        prog = self.progress\n        level = self.level\n        lv = level[v]\n        E = G[v]\n        for i in range(prog[v], len(E)):\n            to, cap, rev = E[i]\n            prog[v] = i\n            if not cap:\n                continue\n            if level[to] <= lv:\n                continue\n            x = f if f < cap else cap\n            ff = self.dfs(to, x)\n            if ff:\n                E[i][1] -= ff\n                G[to][rev][1] += ff\n                return ff\n        return 0\n\n    def max_flow(self):\n        INF = 10**18\n        flow = 0\n        while True:\n            self.bfs()\n            if not self.level[self.sink]:\n                return flow\n            self.progress = [0] * self.N\n            while True:\n                f = self.dfs(self.source, INF)\n                if not f:\n                    break\n                flow += f\n        return flow\n\n\nsource = 0\nsink = N + 1\nINF = 10**18\ndinic = Dinic(N + 2, source, sink)\nadd = dinic.add_edge\nfor i, x in enumerate(A, 1):\n    if x < 0:\n        # source\u5074\uff1a\u5272\u308b\u3082\u306e\u3092\u8868\u73fe\u3002sink\u5074\u306b\u3046\u3064\u3059\u3068\u304d\u306b\u30ab\u30c3\u30c8-x\u304c\u5fc5\u8981\u3002\n        add(source, i, -x)\n    else:\n        # sink\u5074\uff1a\u5272\u3089\u306a\u3044\u3082\u306e\u3092\u8868\u73fe\u3002source\u5074\u306b\u3046\u3064\u3059\u3068\u304d\u306b\u30ab\u30c3\u30c8x\u304c\u5fc5\u8981\u3002\n        add(i, sink, x)\nfor i in range(1, N + 1):\n    for j in range(i + i, N + 1, i):\n        # i\u3092\u5272\u308b\u306a\u3089j\u3082\u5272\u308b\u3002i\u3092\u5272\u3063\u3066j\u3092\u5272\u3089\u306a\u3044\u306e\u306f\u7981\u6b62\n        # i\u304csource\u3067j\u304csink\u306a\u306e\u306f\u7981\u6b62\n        add(i, j, INF)\nf = dinic.max_flow()\nx = sum(x for x in A if x >= 0)\nanswer = x - f\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":56.3636363636,"diff":["-input = sys.stdin.readline","-from scipy.sparse.csgraph import dijkstra","-import numpy as np","+read = sys.stdin.buffer.read","+readline = sys.stdin.buffer.readline","+readlines = sys.stdin.buffer.readlines","+from collections import deque","-\"\"\"","-\u6700\u5c0f\u30ab\u30c3\u30c8","-\"\"\"","-N = int(eval(input()))","-start = 0","-goal = N + 1","-A = [0] + [int(x) for x in input().split()]","-INF = 10**12","-graph = np.zeros((N + 2, N + 2), dtype=np.int64)","-for i, a in enumerate(A[1:], 1):","-    if a >= 0:","-        graph[start, i] = a","-    else:","-        graph[i, goal] = -a","-for i in range(1, N + 1):","-    for j in range(2 * i, N + 1, i):","-        if A[i] < 0 and A[j] > 0:","-            graph[j][i] = INF","+N, *A = list(map(int, read().split()))","-def max_flow(graph):","-    flow = 0","-    while True:","-        dist, pred = dijkstra(","-            graph, indices=start, return_predecessors=True, unweighted=True","-        )","-        if dist[goal] == np.inf:","-            return flow","-        path = []","-        v = goal","+class Dinic:","+    def __init__(self, N, source, sink):","+        self.N = N","+        self.G = [[] for _ in range(N)]","+        self.source = source","+        self.sink = sink","+","+    def add_edge(self, fr, to, cap):","+        n1 = len(self.G[fr])","+        n2 = len(self.G[to])","+        self.G[fr].append([to, cap, n2])","+        self.G[to].append([fr, 0, n1])  # \u9006\u8fba\u3092 cap 0 \u3067\u8ffd\u52a0","+","+    def add_edge_undirected(self, fr, to, cap):","+        n1 = len(self.G[fr])","+        n2 = len(self.G[to])","+        self.G[fr].append([to, cap, n2])","+        self.G[to].append([fr, cap, n1])","+","+    def bfs(self):","+        level = [0] * self.N","+        G = self.G","+        source = self.source","+        sink = self.sink","+        q = deque([source])","+        level[source] = 1","+        pop = q.popleft","+        append = q.append","+        while q:","+            v = pop()","+            lv = level[v] + 1","+            for to, cap, rev in G[v]:","+                if not cap:","+                    continue","+                if level[to]:","+                    continue","+                level[to] = lv","+                if to == sink:","+                    self.level = level","+                    return","+                append(to)","+        self.level = level","+","+    def dfs(self, v, f):","+        if v == self.sink:","+            return f","+        G = self.G","+        prog = self.progress","+        level = self.level","+        lv = level[v]","+        E = G[v]","+        for i in range(prog[v], len(E)):","+            to, cap, rev = E[i]","+            prog[v] = i","+            if not cap:","+                continue","+            if level[to] <= lv:","+                continue","+            x = f if f < cap else cap","+            ff = self.dfs(to, x)","+            if ff:","+                E[i][1] -= ff","+                G[to][rev][1] += ff","+                return ff","+        return 0","+","+    def max_flow(self):","+        INF = 10**18","+        flow = 0","-            path.append((pred[v], v))","-            v = pred[v]","-            if v == start:","-                break","-        add_flow = min(graph[x][y] for x, y in path)","-        for x, y in path:","-            graph[x][y] -= add_flow","-            graph[y][x] += add_flow","-        flow += add_flow","+            self.bfs()","+            if not self.level[self.sink]:","+                return flow","+            self.progress = [0] * self.N","+            while True:","+                f = self.dfs(self.source, INF)","+                if not f:","+                    break","+                flow += f","+        return flow","-answer = sum(x for x in A if x > 0) - max_flow(graph)","+source = 0","+sink = N + 1","+INF = 10**18","+dinic = Dinic(N + 2, source, sink)","+add = dinic.add_edge","+for i, x in enumerate(A, 1):","+    if x < 0:","+        # source\u5074\uff1a\u5272\u308b\u3082\u306e\u3092\u8868\u73fe\u3002sink\u5074\u306b\u3046\u3064\u3059\u3068\u304d\u306b\u30ab\u30c3\u30c8-x\u304c\u5fc5\u8981\u3002","+        add(source, i, -x)","+    else:","+        # sink\u5074\uff1a\u5272\u3089\u306a\u3044\u3082\u306e\u3092\u8868\u73fe\u3002source\u5074\u306b\u3046\u3064\u3059\u3068\u304d\u306b\u30ab\u30c3\u30c8x\u304c\u5fc5\u8981\u3002","+        add(i, sink, x)","+for i in range(1, N + 1):","+    for j in range(i + i, N + 1, i):","+        # i\u3092\u5272\u308b\u306a\u3089j\u3082\u5272\u308b\u3002i\u3092\u5272\u3063\u3066j\u3092\u5272\u3089\u306a\u3044\u306e\u306f\u7981\u6b62","+        # i\u304csource\u3067j\u304csink\u306a\u306e\u306f\u7981\u6b62","+        add(i, j, INF)","+f = dinic.max_flow()","+x = sum(x for x in A if x >= 0)","+answer = x - f"],"diff_only_import_comment":false,"measured_runtime_v0":2.1869269931,"measured_runtime_v1":0.2612461398,"runtime_lift":8.3711361057,"key":["s825327687","s119429791"]}
{"user_id":"u600402037","problem_id":"p02814","language":"python","submission_id_v0":"s318797824","submission_id_v1":"s144298652","cpu_time_v0":728,"cpu_time_v1":566,"memory_v0":25020,"memory_v1":16292,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":22.25,"input":"import sys\n\nimport numpy as np\n\nfrom fractions import gcd\n\nfrom functools import reduce\n\n\n\nsr = lambda: sys.stdin.readline().rstrip()\n\nir = lambda: int(sr())\n\nlr = lambda: list(map(int, sr().split()))\n\n\n\nN, M = lr()\n\nA = np.array(lr())\n\nB = A \/\/ 2\n\n# B\u306e\u8981\u7d20\u304c\u5168\u30662\u306e\u540c\u3058\u51aa\u4e57\n\n# B\u306e\u6700\u5c0f\u516c\u500d\u6570\u3092\u6c42\u3081\u308b\n\ndef merge(a, b):\n\n    g = gcd(a, b)\n\n    a, b = a \/\/ g, b \/\/ g\n\n    if a%2 == 0 or b%2 == 0:\n\n        return 0\n\n    ret = a * b * g\n\n    if ret > 10 ** 9:\n\n        return 0\n\n    return ret\n\n\n\nx = reduce(merge, B)\n\nif x == 0:\n\n    answer = 0\n\nelse:\n\n    answer = M \/\/ x - M \/\/ (2*x)\n\n\n\nprint(answer)\n\n# 56","target":"import sys\n\nfrom fractions import gcd\n\n\n\nsr = lambda: sys.stdin.readline().rstrip()\n\nir = lambda: int(sr())\n\nlr = lambda: list(map(int, sr().split()))\n\n\n\n# A \u304c2\u3067\u4f55\u56de\u5272\u308c\u308b\u304b\n\nN, M = lr()\n\nA = lr()\n\nA = [x \/\/ 2 for x in A]\n\ncnt = 0\n\nwhile all(x%2 == 0 for x in A):\n\n    cnt += 1\n\n    A = [x \/\/ 2 for x in A]\n\n\n\nif any(x%2 == 0 for x in A):\n\n    print((0)); exit()\n\n\n\nlcm = 1\n\nfor a in A:\n\n    lcm *= a \/\/ gcd(lcm, a)\n\n\n\nanswer = M \/\/ (2 ** cnt * lcm) - M \/\/ (2 ** (cnt+1) * lcm)\n\nprint(answer)\n\n# 21\n","code_v0_loc":32,"code_v1_loc":26,"code_v0_num_chars":585,"code_v1_num_chars":491,"code_v0_no_empty_lines":"import sys\nimport numpy as np\nfrom fractions import gcd\nfrom functools import reduce\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\nN, M = lr()\nA = np.array(lr())\nB = A \/\/ 2\n# B\u306e\u8981\u7d20\u304c\u5168\u30662\u306e\u540c\u3058\u51aa\u4e57\n# B\u306e\u6700\u5c0f\u516c\u500d\u6570\u3092\u6c42\u3081\u308b\ndef merge(a, b):\n    g = gcd(a, b)\n    a, b = a \/\/ g, b \/\/ g\n    if a % 2 == 0 or b % 2 == 0:\n        return 0\n    ret = a * b * g\n    if ret > 10**9:\n        return 0\n    return ret\n\n\nx = reduce(merge, B)\nif x == 0:\n    answer = 0\nelse:\n    answer = M \/\/ x - M \/\/ (2 * x)\nprint(answer)\n# 56\n","code_v1_no_empty_lines":"import sys\nfrom fractions import gcd\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n# A \u304c2\u3067\u4f55\u56de\u5272\u308c\u308b\u304b\nN, M = lr()\nA = lr()\nA = [x \/\/ 2 for x in A]\ncnt = 0\nwhile all(x % 2 == 0 for x in A):\n    cnt += 1\n    A = [x \/\/ 2 for x in A]\nif any(x % 2 == 0 for x in A):\n    print((0))\n    exit()\nlcm = 1\nfor a in A:\n    lcm *= a \/\/ gcd(lcm, a)\nanswer = M \/\/ (2**cnt * lcm) - M \/\/ (2 ** (cnt + 1) * lcm)\nprint(answer)\n# 21\n","code_same":false,"relative_loc_diff_percent":18.75,"diff":["-import numpy as np","-from functools import reduce","+# A \u304c2\u3067\u4f55\u56de\u5272\u308c\u308b\u304b","-A = np.array(lr())","-B = A \/\/ 2","-# B\u306e\u8981\u7d20\u304c\u5168\u30662\u306e\u540c\u3058\u51aa\u4e57","-# B\u306e\u6700\u5c0f\u516c\u500d\u6570\u3092\u6c42\u3081\u308b","-def merge(a, b):","-    g = gcd(a, b)","-    a, b = a \/\/ g, b \/\/ g","-    if a % 2 == 0 or b % 2 == 0:","-        return 0","-    ret = a * b * g","-    if ret > 10**9:","-        return 0","-    return ret","-","-","-x = reduce(merge, B)","-if x == 0:","-    answer = 0","-else:","-    answer = M \/\/ x - M \/\/ (2 * x)","+A = lr()","+A = [x \/\/ 2 for x in A]","+cnt = 0","+while all(x % 2 == 0 for x in A):","+    cnt += 1","+    A = [x \/\/ 2 for x in A]","+if any(x % 2 == 0 for x in A):","+    print((0))","+    exit()","+lcm = 1","+for a in A:","+    lcm *= a \/\/ gcd(lcm, a)","+answer = M \/\/ (2**cnt * lcm) - M \/\/ (2 ** (cnt + 1) * lcm)","-# 56","+# 21"],"diff_only_import_comment":false,"measured_runtime_v0":1.3948377199,"measured_runtime_v1":0.2599134052,"runtime_lift":5.3665478273,"key":["s318797824","s144298652"]}
{"user_id":"u145950990","problem_id":"p02552","language":"python","submission_id_v0":"s431367942","submission_id_v1":"s270499104","cpu_time_v0":32,"cpu_time_v1":25,"memory_v0":9148,"memory_v1":9028,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":21.88,"input":"x = int(eval(input()))\n\nprint((0 if x==1 else 1))","target":"s = eval(input())\n\nif s == '0':\n\n  print((1))\n\nelse:\n\n  print((0))","code_v0_loc":2,"code_v1_loc":5,"code_v0_num_chars":41,"code_v1_num_chars":56,"code_v0_no_empty_lines":"x = int(eval(input()))\nprint((0 if x == 1 else 1))\n","code_v1_no_empty_lines":"s = eval(input())\nif s == \"0\":\n    print((1))\nelse:\n    print((0))\n","code_same":false,"relative_loc_diff_percent":60.0,"diff":["-x = int(eval(input()))","-print((0 if x == 1 else 1))","+s = eval(input())","+if s == \"0\":","+    print((1))","+else:","+    print((0))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2680207849,"measured_runtime_v1":0.0548314691,"runtime_lift":4.8880832377,"key":["s431367942","s270499104"]}
{"user_id":"u600065151","problem_id":"p02268","language":"python","submission_id_v0":"s783851867","submission_id_v1":"s366216704","cpu_time_v0":50,"cpu_time_v1":40,"memory_v0":18684,"memory_v1":20588,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":20.0,"input":"def binarySearch():\n\n    n = int(eval(input()))\n\n    S = set(map(int, input().split()))\n\n    q = int(eval(input()))\n\n    T = set(map(int, input().split()))\n\n    print((len(S.intersection(T))))\n\n    \n\n\n\nbinarySearch()","target":"def binarySearch():\n\n    n = int(eval(input()))\n\n    S = set(input().split())\n\n    q = int(eval(input()))\n\n    T = set(input().split())\n\n    print((len(S.intersection(T))))\n\n    \n\n\n\nbinarySearch()","code_v0_loc":9,"code_v1_loc":9,"code_v0_num_chars":202,"code_v1_num_chars":182,"code_v0_no_empty_lines":"def binarySearch():\n    n = int(eval(input()))\n    S = set(map(int, input().split()))\n    q = int(eval(input()))\n    T = set(map(int, input().split()))\n    print((len(S.intersection(T))))\n\n\nbinarySearch()\n","code_v1_no_empty_lines":"def binarySearch():\n    n = int(eval(input()))\n    S = set(input().split())\n    q = int(eval(input()))\n    T = set(input().split())\n    print((len(S.intersection(T))))\n\n\nbinarySearch()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    S = set(map(int, input().split()))","+    S = set(input().split())","-    T = set(map(int, input().split()))","+    T = set(input().split())"],"diff_only_import_comment":false,"measured_runtime_v0":0.3310329242,"measured_runtime_v1":0.2247743328,"runtime_lift":1.4727345427,"key":["s783851867","s366216704"]}
{"user_id":"u996434204","problem_id":"p03416","language":"python","submission_id_v0":"s285618885","submission_id_v1":"s172989285","cpu_time_v0":114,"cpu_time_v1":57,"memory_v0":3060,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":50.0,"input":"a,b=list(map(int,input().split()))\n\n\n\nans=0\n\n\n\nfor i in range(a,b+1):\n\n    buf=str(i)\n\n    #print(buf[0:int(len(buf)\/2)],buf[int(len(buf)\/2+1):])\n\n    str1=buf[0:int(len(buf)\/2)]\n\n    str2=buf[int(len(buf)\/2+1):]\n\n    if str1[0]==str2[1] and str1[1]==str2[0]:\n\n        ans+=1\n\n\n\nprint(ans)\n","target":"a,b=list(map(int,input().split()))\n\n\n\nans=0\n\n\n\nfor i in range(a,b+1):\n\n    buf=str(i)\n\n    str1=buf[::-1]\n\n    if buf==str1:\n\n        ans+=1\n\n\n\nprint(ans)\n","code_v0_loc":13,"code_v1_loc":11,"code_v0_num_chars":284,"code_v1_num_chars":149,"code_v0_no_empty_lines":"a, b = list(map(int, input().split()))\nans = 0\nfor i in range(a, b + 1):\n    buf = str(i)\n    # print(buf[0:int(len(buf)\/2)],buf[int(len(buf)\/2+1):])\n    str1 = buf[0 : int(len(buf) \/ 2)]\n    str2 = buf[int(len(buf) \/ 2 + 1) :]\n    if str1[0] == str2[1] and str1[1] == str2[0]:\n        ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"a, b = list(map(int, input().split()))\nans = 0\nfor i in range(a, b + 1):\n    buf = str(i)\n    str1 = buf[::-1]\n    if buf == str1:\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":15.3846153846,"diff":["-    # print(buf[0:int(len(buf)\/2)],buf[int(len(buf)\/2+1):])","-    str1 = buf[0 : int(len(buf) \/ 2)]","-    str2 = buf[int(len(buf) \/ 2 + 1) :]","-    if str1[0] == str2[1] and str1[1] == str2[0]:","+    str1 = buf[::-1]","+    if buf == str1:"],"diff_only_import_comment":false,"measured_runtime_v0":0.3597218115,"measured_runtime_v1":0.2724662972,"runtime_lift":1.3202433295,"key":["s285618885","s172989285"]}
{"user_id":"u490553751","problem_id":"p02725","language":"python","submission_id_v0":"s026624237","submission_id_v1":"s811488510","cpu_time_v0":185,"cpu_time_v1":132,"memory_v0":26444,"memory_v1":31604,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":28.65,"input":"#template\n\ndef inputlist(): return [int(j) for j in input().split()]\n\n#template\n\n#issue\u304b\u3089\u59cb\u3081\u308b\n\nK,N = inputlist()\n\nA = inputlist()\n\nlia = [0]*N\n\nfor i in range(1,N):\n\n    k = A[i] - A[i-1]\n\n    lia[i] = k\n\nlia[0] = (K+A[0]-A[-1])\n\nlia.sort()\n\nans = 0\n\nfor i in range(N-1):\n\n    ans += lia[i]\n\nprint(ans)","target":"#template\n\ndef inputlist(): return [int(j) for j in input().split()]\n\ndef listinput(): return input().split()\n\n#template\n\nK,N = inputlist()\n\nA = inputlist()\n\ndis = [0]*(N)\n\nfor i in range(N):\n\n    if i == N-1:\n\n        dis[i] = K+A[0] - A[i]\n\n        continue\n\n    dis[i] = A[i+1] - A[i]\n\ndis.sort()\n\nprint((sum(dis[:-1])))","code_v0_loc":16,"code_v1_loc":14,"code_v0_num_chars":301,"code_v1_num_chars":321,"code_v0_no_empty_lines":"# template\ndef inputlist():\n    return [int(j) for j in input().split()]\n\n\n# template\n# issue\u304b\u3089\u59cb\u3081\u308b\nK, N = inputlist()\nA = inputlist()\nlia = [0] * N\nfor i in range(1, N):\n    k = A[i] - A[i - 1]\n    lia[i] = k\nlia[0] = K + A[0] - A[-1]\nlia.sort()\nans = 0\nfor i in range(N - 1):\n    ans += lia[i]\nprint(ans)\n","code_v1_no_empty_lines":"# template\ndef inputlist():\n    return [int(j) for j in input().split()]\n\n\ndef listinput():\n    return input().split()\n\n\n# template\nK, N = inputlist()\nA = inputlist()\ndis = [0] * (N)\nfor i in range(N):\n    if i == N - 1:\n        dis[i] = K + A[0] - A[i]\n        continue\n    dis[i] = A[i + 1] - A[i]\ndis.sort()\nprint((sum(dis[:-1])))\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["+def listinput():","+    return input().split()","+","+","-# issue\u304b\u3089\u59cb\u3081\u308b","-lia = [0] * N","-for i in range(1, N):","-    k = A[i] - A[i - 1]","-    lia[i] = k","-lia[0] = K + A[0] - A[-1]","-lia.sort()","-ans = 0","-for i in range(N - 1):","-    ans += lia[i]","-print(ans)","+dis = [0] * (N)","+for i in range(N):","+    if i == N - 1:","+        dis[i] = K + A[0] - A[i]","+        continue","+    dis[i] = A[i + 1] - A[i]","+dis.sort()","+print((sum(dis[:-1])))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3599109902,"measured_runtime_v1":0.2745016385,"runtime_lift":1.3111433221,"key":["s026624237","s811488510"]}
{"user_id":"u600402037","problem_id":"p03000","language":"python","submission_id_v0":"s741155786","submission_id_v1":"s174835156","cpu_time_v0":150,"cpu_time_v1":17,"memory_v0":12508,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.67,"input":"import sys\n\nimport numpy as np\n\n\n\nsr = lambda: sys.stdin.readline().rstrip()\n\nir = lambda: int(sr())\n\nlr = lambda: list(map(int, sr().split()))\n\n\n\nN, X = lr()\n\nL = np.array([0] + lr())\n\nLcum = L.cumsum()\n\ni = np.searchsorted(Lcum, X, side='right')\n\nprint(i)\n\n# ","target":"# coding: utf-8\n\nimport sys\n\n\n\nsr = lambda: sys.stdin.readline().rstrip()\n\nir = lambda: int(sr())\n\nlr = lambda: list(map(int, sr().split()))\n\n\n\nN, X = lr()\n\nL = lr()\n\ncnt = 1\n\ncur = 0\n\nfor l in L:   \n\n    cur += l\n\n    if cur > X:\n\n        break\n\n    cnt += 1\n\n\n\nanswer = cnt\n\nprint(answer)\n","code_v0_loc":13,"code_v1_loc":19,"code_v0_num_chars":261,"code_v1_num_chars":291,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\nN, X = lr()\nL = np.array([0] + lr())\nLcum = L.cumsum()\ni = np.searchsorted(Lcum, X, side=\"right\")\nprint(i)\n#\n","code_v1_no_empty_lines":"# coding: utf-8\nimport sys\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\nN, X = lr()\nL = lr()\ncnt = 1\ncur = 0\nfor l in L:\n    cur += l\n    if cur > X:\n        break\n    cnt += 1\nanswer = cnt\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":31.5789473684,"diff":["+# coding: utf-8","-import numpy as np","-L = np.array([0] + lr())","-Lcum = L.cumsum()","-i = np.searchsorted(Lcum, X, side=\"right\")","-print(i)","-#","+L = lr()","+cnt = 1","+cur = 0","+for l in L:","+    cur += l","+    if cur > X:","+        break","+    cnt += 1","+answer = cnt","+print(answer)"],"diff_only_import_comment":false,"measured_runtime_v0":1.5985637542,"measured_runtime_v1":0.2292145673,"runtime_lift":6.9740931968,"key":["s741155786","s174835156"]}
{"user_id":"u624696727","problem_id":"p02767","language":"python","submission_id_v0":"s619004796","submission_id_v1":"s352340154","cpu_time_v0":149,"cpu_time_v1":21,"memory_v0":12220,"memory_v1":3316,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":85.91,"input":"import sys\n\nimport numpy as np\n\n\n\nsys.setrecursionlimit(10 ** 6)\n\nint1 = lambda x: int(x) - 1\n\nprintV = lambda x: print(*x, sep=\"\\n\")\n\nprintH = lambda x: print(\" \".join(map(str,x)))\n\ndef IS(): return sys.stdin.readline()[:-1]\n\ndef II(): return int(sys.stdin.readline())\n\ndef MI(): return map(int, sys.stdin.readline().split())\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\n\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\n\ndef LII(rows_number): return [II() for _ in range(rows_number)]\n\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\n\n\n\ndef main():\n\n\tN = II()\n\n\tX = LI()\n\n\tX = np.array(X)\n\n\tm = round(np.sum(X) \/ N)\n\n\tprint(int(np.sum((X-m)**2)))\n\n\n\nif __name__ == '__main__':\n\n\tmain()\n","target":"import sys\n\n\n\nsys.setrecursionlimit(10 ** 6)\n\nint1 = lambda x: int(x) - 1\n\nprintV = lambda x: print(*x, sep=\"\\n\")\n\nprintH = lambda x: print(\" \".join(map(str,x)))\n\ndef IS(): return sys.stdin.readline()[:-1]\n\ndef II(): return int(sys.stdin.readline())\n\ndef MI(): return map(int, sys.stdin.readline().split())\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\n\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\n\ndef LII(rows_number): return [II() for _ in range(rows_number)]\n\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\n\n\n\ndef main():\n\n\tN = II()\n\n\tX = LI()\n\n\tm = round(sum(X) \/ N)\n\n\tans = 0\n\n\tfor x in X:\n\n\t\tans += ((x-m)**2)\n\n\tprint(ans)\n\n\n\nif __name__ == '__main__':\n\n\tmain()\n","code_v0_loc":25,"code_v1_loc":26,"code_v0_num_chars":803,"code_v1_num_chars":789,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nsys.setrecursionlimit(10**6)\nint1 = lambda x: int(x) - 1\nprintV = lambda x: print(*x, sep=\"\\n\")\nprintH = lambda x: print(\" \".join(map(str, x)))\n\n\ndef IS():\n    return sys.stdin.readline()[:-1]\n\n\ndef II():\n    return int(sys.stdin.readline())\n\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef LI1():\n    return list(map(int1, sys.stdin.readline().split()))\n\n\ndef LII(rows_number):\n    return [II() for _ in range(rows_number)]\n\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\n\ndef LLI1(rows_number):\n    return [LI1() for _ in range(rows_number)]\n\n\ndef main():\n    N = II()\n    X = LI()\n    X = np.array(X)\n    m = round(np.sum(X) \/ N)\n    print(int(np.sum((X - m) ** 2)))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10**6)\nint1 = lambda x: int(x) - 1\nprintV = lambda x: print(*x, sep=\"\\n\")\nprintH = lambda x: print(\" \".join(map(str, x)))\n\n\ndef IS():\n    return sys.stdin.readline()[:-1]\n\n\ndef II():\n    return int(sys.stdin.readline())\n\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef LI1():\n    return list(map(int1, sys.stdin.readline().split()))\n\n\ndef LII(rows_number):\n    return [II() for _ in range(rows_number)]\n\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\n\ndef LLI1(rows_number):\n    return [LI1() for _ in range(rows_number)]\n\n\ndef main():\n    N = II()\n    X = LI()\n    m = round(sum(X) \/ N)\n    ans = 0\n    for x in X:\n        ans += (x - m) ** 2\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":3.8461538462,"diff":["-import numpy as np","-    X = np.array(X)","-    m = round(np.sum(X) \/ N)","-    print(int(np.sum((X - m) ** 2)))","+    m = round(sum(X) \/ N)","+    ans = 0","+    for x in X:","+        ans += (x - m) ** 2","+    print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.5154907587,"measured_runtime_v1":0.201975739,"runtime_lift":7.5033306776,"key":["s619004796","s352340154"]}
{"user_id":"u537976628","problem_id":"p03720","language":"python","submission_id_v0":"s957846271","submission_id_v1":"s235024999","cpu_time_v0":28,"cpu_time_v1":25,"memory_v0":9128,"memory_v1":9136,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.71,"input":"n, m = list(map(int, input().split()))\n\nRD = list(list(map(int, input().split())) for _ in range(m))\n\nfor i in range(1, n + 1):\n\n    ans = 0\n\n    for j in RD:\n\n        ans += j.count(i)\n\n    print(ans)","target":"n, m = list(map(int, input().split()))\n\nNRD = list(0 for i in range(n))\n\nfor i in range(m):\n\n    r1, r2 = list(map(int, input().split()))\n\n    NRD[r1 - 1] += 1\n\n    NRD[r2 - 1] += 1\n\nfor i in range(n):\n\n    print((NRD[i]))","code_v0_loc":7,"code_v1_loc":8,"code_v0_num_chars":195,"code_v1_num_chars":208,"code_v0_no_empty_lines":"n, m = list(map(int, input().split()))\nRD = list(list(map(int, input().split())) for _ in range(m))\nfor i in range(1, n + 1):\n    ans = 0\n    for j in RD:\n        ans += j.count(i)\n    print(ans)\n","code_v1_no_empty_lines":"n, m = list(map(int, input().split()))\nNRD = list(0 for i in range(n))\nfor i in range(m):\n    r1, r2 = list(map(int, input().split()))\n    NRD[r1 - 1] += 1\n    NRD[r2 - 1] += 1\nfor i in range(n):\n    print((NRD[i]))\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-RD = list(list(map(int, input().split())) for _ in range(m))","-for i in range(1, n + 1):","-    ans = 0","-    for j in RD:","-        ans += j.count(i)","-    print(ans)","+NRD = list(0 for i in range(n))","+for i in range(m):","+    r1, r2 = list(map(int, input().split()))","+    NRD[r1 - 1] += 1","+    NRD[r2 - 1] += 1","+for i in range(n):","+    print((NRD[i]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2888841586,"measured_runtime_v1":0.0609361191,"runtime_lift":4.7407705467,"key":["s957846271","s235024999"]}
{"user_id":"u393253137","problem_id":"p03371","language":"python","submission_id_v0":"s794256283","submission_id_v1":"s949005771","cpu_time_v0":118,"cpu_time_v1":17,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":85.59,"input":"a,b,c,x,y=list(map(int,input().split()))\n\nans=a*x+b*y\n\nfor HaH in range(0,2*max(x,y)+1,2):\n\n    ans = min(ans, c*HaH+max(0, a*(x-HaH\/\/2))+max(0, b*(y-HaH\/\/2)))\n\nprint(ans)","target":"a,b,c,x,y=list(map(int,input().split()))\n\nans=0\n\nm=min(x,y)\n\nif a+b>=2*c: #Half and Half\u8cfc\u5165\u3067\u5b89\u304f\u306a\u308b\u53ef\u80fd\u6027\u3042\u308b\u30d1\u30bf\u30fc\u30f3\n\n    # HaH\u3092m\u679a\u8cb7\u3063\u3066\u6b8b\u308aHaH\u8cfc\u5165,\u307e\u305f\u306f\u5168\u90e8HaH\u8cfc\u5165,\u3053\u306e\u3044\u305a\u308c\u304b\u3057\u304b\u3042\u308a\u5f97\u306a\u3044\n\n    ans = min(2*c*m+a*(x-m)+b*(y-m), 2*c*max(x,y))\n\nelse:\n\n    ans = a*x+b*y\n\nprint(ans)","code_v0_loc":5,"code_v1_loc":9,"code_v0_num_chars":165,"code_v1_num_chars":237,"code_v0_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nans = a * x + b * y\nfor HaH in range(0, 2 * max(x, y) + 1, 2):\n    ans = min(ans, c * HaH + max(0, a * (x - HaH \/\/ 2)) + max(0, b * (y - HaH \/\/ 2)))\nprint(ans)\n","code_v1_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nans = 0\nm = min(x, y)\nif a + b >= 2 * c:  # Half and Half\u8cfc\u5165\u3067\u5b89\u304f\u306a\u308b\u53ef\u80fd\u6027\u3042\u308b\u30d1\u30bf\u30fc\u30f3\n    # HaH\u3092m\u679a\u8cb7\u3063\u3066\u6b8b\u308aHaH\u8cfc\u5165,\u307e\u305f\u306f\u5168\u90e8HaH\u8cfc\u5165,\u3053\u306e\u3044\u305a\u308c\u304b\u3057\u304b\u3042\u308a\u5f97\u306a\u3044\n    ans = min(2 * c * m + a * (x - m) + b * (y - m), 2 * c * max(x, y))\nelse:\n    ans = a * x + b * y\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":44.4444444444,"diff":["-ans = a * x + b * y","-for HaH in range(0, 2 * max(x, y) + 1, 2):","-    ans = min(ans, c * HaH + max(0, a * (x - HaH \/\/ 2)) + max(0, b * (y - HaH \/\/ 2)))","+ans = 0","+m = min(x, y)","+if a + b >= 2 * c:  # Half and Half\u8cfc\u5165\u3067\u5b89\u304f\u306a\u308b\u53ef\u80fd\u6027\u3042\u308b\u30d1\u30bf\u30fc\u30f3","+    # HaH\u3092m\u679a\u8cb7\u3063\u3066\u6b8b\u308aHaH\u8cfc\u5165,\u307e\u305f\u306f\u5168\u90e8HaH\u8cfc\u5165,\u3053\u306e\u3044\u305a\u308c\u304b\u3057\u304b\u3042\u308a\u5f97\u306a\u3044","+    ans = min(2 * c * m + a * (x - m) + b * (y - m), 2 * c * max(x, y))","+else:","+    ans = a * x + b * y"],"diff_only_import_comment":false,"measured_runtime_v0":0.479530653,"measured_runtime_v1":0.260008795,"runtime_lift":1.8442862786,"key":["s794256283","s949005771"]}
{"user_id":"u600402037","problem_id":"p02994","language":"python","submission_id_v0":"s047908470","submission_id_v1":"s794089628","cpu_time_v0":151,"cpu_time_v1":17,"memory_v0":14456,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.74,"input":"import sys\n\nimport numpy as np\n\n\n\nsr = lambda: sys.stdin.readline().rstrip()\n\nir = lambda: int(sr())\n\nlr = lambda: list(map(int, sr().split()))\n\n\n\nN, L = lr()\n\nA = np.arange(1, N+1)\n\nA += (L - 1)\n\nanswer = A.sum() - A[np.argmin(np.abs(A))]\n\nprint(answer)","target":"import sys\n\n\n\nsr = lambda: sys.stdin.readline().rstrip()\n\nir = lambda: int(sr())\n\nlr = lambda: list(map(int, sr().split()))\n\n\n\nN, L = lr()\n\ntotal = sum(range(L, L+N))\n\nsub = min(list(range(L, L+N)), key=abs)\n\nprint((total-sub))\n","code_v0_loc":12,"code_v1_loc":10,"code_v0_num_chars":254,"code_v1_num_chars":220,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\nN, L = lr()\nA = np.arange(1, N + 1)\nA += L - 1\nanswer = A.sum() - A[np.argmin(np.abs(A))]\nprint(answer)\n","code_v1_no_empty_lines":"import sys\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\nN, L = lr()\ntotal = sum(range(L, L + N))\nsub = min(list(range(L, L + N)), key=abs)\nprint((total - sub))\n","code_same":false,"relative_loc_diff_percent":16.6666666667,"diff":["-import numpy as np","-A = np.arange(1, N + 1)","-A += L - 1","-answer = A.sum() - A[np.argmin(np.abs(A))]","-print(answer)","+total = sum(range(L, L + N))","+sub = min(list(range(L, L + N)), key=abs)","+print((total - sub))"],"diff_only_import_comment":false,"measured_runtime_v0":1.7525720541,"measured_runtime_v1":0.2779020016,"runtime_lift":6.3064391184,"key":["s047908470","s794089628"]}
{"user_id":"u892487306","problem_id":"p03078","language":"python","submission_id_v0":"s223961880","submission_id_v1":"s091600532","cpu_time_v0":1331,"cpu_time_v1":35,"memory_v0":130692,"memory_v1":5012,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":97.37,"input":"import numpy as np\n\n\n\n\n\ndef main():\n\n    X, Y, Z, K = list(map(int, input().split(' ')))\n\n    A = np.array(list(map(int, input().split(' '))))\n\n    B = np.array(list(map(int, input().split(' '))))\n\n    C = np.array(list(map(int, input().split(' '))))\n\n    AB = np.array(np.meshgrid(A, B)).T.reshape(-1, 2).sum(axis=1)\n\n    AB[::-1].sort()\n\n    AB = AB[:min([K, X * Y])]\n\n    ABC = np.array(np.meshgrid(AB, C)).T.reshape(-1, 2).sum(axis=1)\n\n    ABC[::-1].sort()\n\n    for ans in ABC[:K]:\n\n        print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()","target":"from heapq import heappush, heappop\n\nfrom collections import defaultdict\n\n\n\n\n\ndef main():\n\n    X, Y, Z, K = list(map(int, input().split(' ')))\n\n    A = list(map(int, input().split(' ')))\n\n    B = list(map(int, input().split(' ')))\n\n    C = list(map(int, input().split(' ')))\n\n    A.sort(reverse=True)\n\n    B.sort(reverse=True)\n\n    C.sort(reverse=True)\n\n    que = [(- A[0] - B[0] - C[0], 0, 0, 0)]  # multiply -1 to change min to max\n\n    already_inserted = defaultdict(int)\n\n    answer = list()\n\n    for _ in range(K):\n\n        q, i, j, k = heappop(que)\n\n        answer.append(-q)\n\n        if i + 1 < X:\n\n            item_a = (- A[i + 1] - B[j] - C[k], i + 1, j, k)\n\n            if already_inserted[item_a] == 0:\n\n                heappush(que, item_a)\n\n                already_inserted[item_a] = 1\n\n        if j + 1 < Y:\n\n            item_b = (- A[i] - B[j + 1] - C[k], i, j + 1, k)\n\n            if already_inserted[item_b] == 0:\n\n                heappush(que, item_b)\n\n                already_inserted[item_b] = 1\n\n        if k + 1 < Z:\n\n            item_c = (- A[i] - B[j] - C[k + 1], i, j, k + 1)\n\n            if already_inserted[item_c] == 0:\n\n                heappush(que, item_c)\n\n                already_inserted[item_c] = 1\n\n    for ans in answer:\n\n        print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()","code_v0_loc":19,"code_v1_loc":39,"code_v0_num_chars":549,"code_v1_num_chars":1320,"code_v0_no_empty_lines":"import numpy as np\n\n\ndef main():\n    X, Y, Z, K = list(map(int, input().split(\" \")))\n    A = np.array(list(map(int, input().split(\" \"))))\n    B = np.array(list(map(int, input().split(\" \"))))\n    C = np.array(list(map(int, input().split(\" \"))))\n    AB = np.array(np.meshgrid(A, B)).T.reshape(-1, 2).sum(axis=1)\n    AB[::-1].sort()\n    AB = AB[: min([K, X * Y])]\n    ABC = np.array(np.meshgrid(AB, C)).T.reshape(-1, 2).sum(axis=1)\n    ABC[::-1].sort()\n    for ans in ABC[:K]:\n        print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"from heapq import heappush, heappop\nfrom collections import defaultdict\n\n\ndef main():\n    X, Y, Z, K = list(map(int, input().split(\" \")))\n    A = list(map(int, input().split(\" \")))\n    B = list(map(int, input().split(\" \")))\n    C = list(map(int, input().split(\" \")))\n    A.sort(reverse=True)\n    B.sort(reverse=True)\n    C.sort(reverse=True)\n    que = [(-A[0] - B[0] - C[0], 0, 0, 0)]  # multiply -1 to change min to max\n    already_inserted = defaultdict(int)\n    answer = list()\n    for _ in range(K):\n        q, i, j, k = heappop(que)\n        answer.append(-q)\n        if i + 1 < X:\n            item_a = (-A[i + 1] - B[j] - C[k], i + 1, j, k)\n            if already_inserted[item_a] == 0:\n                heappush(que, item_a)\n                already_inserted[item_a] = 1\n        if j + 1 < Y:\n            item_b = (-A[i] - B[j + 1] - C[k], i, j + 1, k)\n            if already_inserted[item_b] == 0:\n                heappush(que, item_b)\n                already_inserted[item_b] = 1\n        if k + 1 < Z:\n            item_c = (-A[i] - B[j] - C[k + 1], i, j, k + 1)\n            if already_inserted[item_c] == 0:\n                heappush(que, item_c)\n                already_inserted[item_c] = 1\n    for ans in answer:\n        print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":51.2820512821,"diff":["-import numpy as np","+from heapq import heappush, heappop","+from collections import defaultdict","-    A = np.array(list(map(int, input().split(\" \"))))","-    B = np.array(list(map(int, input().split(\" \"))))","-    C = np.array(list(map(int, input().split(\" \"))))","-    AB = np.array(np.meshgrid(A, B)).T.reshape(-1, 2).sum(axis=1)","-    AB[::-1].sort()","-    AB = AB[: min([K, X * Y])]","-    ABC = np.array(np.meshgrid(AB, C)).T.reshape(-1, 2).sum(axis=1)","-    ABC[::-1].sort()","-    for ans in ABC[:K]:","+    A = list(map(int, input().split(\" \")))","+    B = list(map(int, input().split(\" \")))","+    C = list(map(int, input().split(\" \")))","+    A.sort(reverse=True)","+    B.sort(reverse=True)","+    C.sort(reverse=True)","+    que = [(-A[0] - B[0] - C[0], 0, 0, 0)]  # multiply -1 to change min to max","+    already_inserted = defaultdict(int)","+    answer = list()","+    for _ in range(K):","+        q, i, j, k = heappop(que)","+        answer.append(-q)","+        if i + 1 < X:","+            item_a = (-A[i + 1] - B[j] - C[k], i + 1, j, k)","+            if already_inserted[item_a] == 0:","+                heappush(que, item_a)","+                already_inserted[item_a] = 1","+        if j + 1 < Y:","+            item_b = (-A[i] - B[j + 1] - C[k], i, j + 1, k)","+            if already_inserted[item_b] == 0:","+                heappush(que, item_b)","+                already_inserted[item_b] = 1","+        if k + 1 < Z:","+            item_c = (-A[i] - B[j] - C[k + 1], i, j, k + 1)","+            if already_inserted[item_c] == 0:","+                heappush(que, item_c)","+                already_inserted[item_c] = 1","+    for ans in answer:"],"diff_only_import_comment":false,"measured_runtime_v0":1.8347421198,"measured_runtime_v1":0.2379373548,"runtime_lift":7.7110301627,"key":["s223961880","s091600532"]}
{"user_id":"u298297089","problem_id":"p03325","language":"python","submission_id_v0":"s106132375","submission_id_v1":"s827937559","cpu_time_v0":122,"cpu_time_v1":72,"memory_v0":4148,"memory_v1":3828,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":40.98,"input":"N = int(eval(input()))\n\nx = list(map(int, input().split()))\n\ncnt = 0\n\nfor i in x:\n\n  while i % 2 == 0:\n\n    cnt += 1\n\n    i \/= 2\n\nprint(cnt)","target":"n = int(eval(input()))\n\nans = 0\n\nfor i in map(int, input().split()):\n\n    cnt = 0\n\n    while i % 2 == 0:\n\n        i >>= 1\n\n        cnt += 1\n\n    ans += cnt\n\nprint(ans)","code_v0_loc":8,"code_v1_loc":9,"code_v0_num_chars":134,"code_v1_num_chars":161,"code_v0_no_empty_lines":"N = int(eval(input()))\nx = list(map(int, input().split()))\ncnt = 0\nfor i in x:\n    while i % 2 == 0:\n        cnt += 1\n        i \/= 2\nprint(cnt)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nans = 0\nfor i in map(int, input().split()):\n    cnt = 0\n    while i % 2 == 0:\n        i >>= 1\n        cnt += 1\n    ans += cnt\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["-N = int(eval(input()))","-x = list(map(int, input().split()))","-cnt = 0","-for i in x:","+n = int(eval(input()))","+ans = 0","+for i in map(int, input().split()):","+    cnt = 0","+        i >>= 1","-        i \/= 2","-print(cnt)","+    ans += cnt","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2336064763,"measured_runtime_v1":0.0059840708,"runtime_lift":39.0380536239,"key":["s106132375","s827937559"]}
{"user_id":"u600402037","problem_id":"p03273","language":"python","submission_id_v0":"s376562926","submission_id_v1":"s211637431","cpu_time_v0":153,"cpu_time_v1":21,"memory_v0":12680,"memory_v1":4468,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":86.27,"input":"# coding: utf-8\n\nimport sys\n\nimport numpy as np\n\n\n\nsr = lambda: sys.stdin.readline().rstrip()\n\nir = lambda: int(sr())\n\nlr = lambda: list(map(int, sr().split()))\n\n\n\nH, W = lr()\n\nB = np.array([list(sr()) for _ in range(H)])\n\nA = [[1 if x == '#' else 0 for x in b] for b in B]\n\nrow = np.sum(A, axis=1)\n\ncolumn = np.sum(A, axis=0)\n\nr = row != 0\n\nc = column != 0\n\nanswer = B[r]\n\nanswer = answer[:, c].tolist()\n\nfor a in answer:\n\n    print((''.join(a)))\n","target":"# coding: utf-8\n\nimport sys\n\n\n\nsr = lambda: sys.stdin.readline().rstrip()\n\nir = lambda: int(sr())\n\nlr = lambda: list(map(int, sr().split()))\n\n\n\nH, W = lr()\n\nA = [sr() for _ in range(H)]\n\nB = []\n\nfor a in A:\n\n    if '#' in a:\n\n        B.append(a)\n\n\n\nB = zip(*[b for b in zip(*B) if '#' in b])\n\nfor b in B:\n\n    print(*b, sep='')\n","code_v0_loc":19,"code_v1_loc":17,"code_v0_num_chars":446,"code_v1_num_chars":328,"code_v0_no_empty_lines":"# coding: utf-8\nimport sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\nH, W = lr()\nB = np.array([list(sr()) for _ in range(H)])\nA = [[1 if x == \"#\" else 0 for x in b] for b in B]\nrow = np.sum(A, axis=1)\ncolumn = np.sum(A, axis=0)\nr = row != 0\nc = column != 0\nanswer = B[r]\nanswer = answer[:, c].tolist()\nfor a in answer:\n    print((\"\".join(a)))\n","code_v1_no_empty_lines":"# coding: utf-8\nimport sys\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\nH, W = lr()\nA = [sr() for _ in range(H)]\nB = []\nfor a in A:\n    if \"#\" in a:\n        B.append(a)\nB = zip(*[b for b in zip(*B) if \"#\" in b])\nfor b in B:\n    print(*b, sep=\"\")\n","code_same":false,"relative_loc_diff_percent":10.5263157895,"diff":["-import numpy as np","-B = np.array([list(sr()) for _ in range(H)])","-A = [[1 if x == \"#\" else 0 for x in b] for b in B]","-row = np.sum(A, axis=1)","-column = np.sum(A, axis=0)","-r = row != 0","-c = column != 0","-answer = B[r]","-answer = answer[:, c].tolist()","-for a in answer:","-    print((\"\".join(a)))","+A = [sr() for _ in range(H)]","+B = []","+for a in A:","+    if \"#\" in a:","+        B.append(a)","+B = zip(*[b for b in zip(*B) if \"#\" in b])","+for b in B:","+    print(*b, sep=\"\")"],"diff_only_import_comment":false,"measured_runtime_v0":1.2545773008,"measured_runtime_v1":0.1868477131,"runtime_lift":6.7144375496,"key":["s376562926","s211637431"]}
{"user_id":"u488401358","problem_id":"p02649","language":"python","submission_id_v0":"s231020544","submission_id_v1":"s831601953","cpu_time_v0":688,"cpu_time_v1":413,"memory_v0":76468,"memory_v1":102912,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":39.97,"input":"def popcount(x):\n\n    x = x - ((x >> 1) & 0x55555555)\n\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333)\n\n    x = (x + (x >> 4)) & 0x0f0f0f0f\n\n    x = x + (x >> 8)\n\n    x = x + (x >> 16)\n\n    return x & 0x0000007f\n\n\n\ncmb=[[0 for i in range(51)] for j in range(51)]\n\ncmb[0][0]=1\n\nfor i in range(51):\n\n    for j in range(51):\n\n        if i!=50 and j!=50:\n\n            cmb[i+1][j+1]+=cmb[i][j]\n\n        if i!=50:\n\n            cmb[i+1][j]+=cmb[i][j]\n\n\n\nfor i in range(1,51):\n\n    for j in range(2,51):\n\n        cmb[i][j]+=cmb[i][j-1]\n\n\n\nN,K,T,S=list(map(int,input().split()))\n\na=list(map(int,input().split()))\n\n\n\nmust0=[i for i in range(18) if S>>i &1==0]\n\nmust1=[i for i in range(18) if T>>i &1==1]\n\n\n\nA=[]\n\nfor val in a:\n\n    check=True\n\n    for j in must0:\n\n        check=check&(val>>j &1==0)\n\n    for j in must1:\n\n        check=check&(val>>j &1==1)\n\n    if check:\n\n        A.append(val)\n\n\n\nif not A:\n\n    print((0))\n\n    exit()\n\n\n\nbit=[]\n\nfor i in range(18):\n\n    if i not in must0 and i not in must1:\n\n        bit.append(i)\n\n\n\nfor i in range(len(A)):\n\n    temp=0\n\n    for j in range(len(bit)):\n\n        temp+=(A[i]>>bit[j] &1==1)*2**j\n\n    A[i]=temp\n\n\n\nans=0\n\nn=len(bit)\n\ndata=[0]*(2**n)\n\nfor i in range(2**n):\n\n    t=set([])\n\n    for a in A:\n\n        data[a&i]+=1\n\n        t.add(a&i)\n\n    temp=0\n\n    for val in t:\n\n        temp+=cmb[data[val]][min(K,data[val])]\n\n    ans+=temp*(-1)**popcount(i)\n\n    for val in t:\n\n        data[val]=0\n\n\n\nprint(ans)\n","target":"def popcount(x):\n\n    x = x - ((x >> 1) & 0x55555555)\n\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333)\n\n    x = (x + (x >> 4)) & 0x0f0f0f0f\n\n    x = x + (x >> 8)\n\n    x = x + (x >> 16)\n\n    return x & 0x0000007f\n\n\n\ncmb=[[0 for i in range(51)] for j in range(51)]\n\ncmb[0][0]=1\n\nfor i in range(51):\n\n    for j in range(51):\n\n        if i!=50:\n\n            cmb[i+1][j]+=cmb[i][j]\n\n        if j!=50 and i!=50:\n\n            cmb[i+1][j+1]+=cmb[i][j]\n\n\n\n\n\nfor i in range(1,51):\n\n    for j in range(2,51):\n\n        cmb[i][j]+=cmb[i][j-1]\n\n\n\nimport random\n\nN,K,T,S=list(map(int,input().split()))\n\na=list(map(int,input().split()))\n\n\n\nmust0=[i for i in range(18) if S>>i &1==0]\n\nmust1=[i for i in range(18) if T>>i &1==1]\n\n\n\nA=[]\n\nfor val in a:\n\n    check=True\n\n    for j in must0:\n\n        check=check&(val>>j &1==0)\n\n    for j in must1:\n\n        check=check&(val>>j &1==1)\n\n    if check:\n\n        A.append(val)\n\n\n\nif not A:\n\n    print((0))\n\n    exit()\n\n\n\nbit=[]\n\nfor i in range(18):\n\n    if i not in must0 and i not in must1:\n\n        bit.append(i)\n\n\n\nfor i in range(len(A)):\n\n    temp=0\n\n    for j in range(len(bit)):\n\n        temp+=(A[i]>>bit[j] &1==1)*2**j\n\n    A[i]=temp\n\n\n\nans=0\n\nn=len(bit)\n\ndata=[0]*(2**n)\n\npc=[popcount(i) for i in range(2**n)]\n\nfor i in range(2**n):\n\n    for a in A:\n\n        data[a&i]+=1\n\n    for a in A:\n\n        if data[a&i]:\n\n            ans+=cmb[data[a&i]][min(K,data[a&i])]*(-1)**pc[i]\n\n            data[a&i]=0\n\n\n\nprint(ans)","code_v0_loc":68,"code_v1_loc":67,"code_v0_num_chars":1445,"code_v1_num_chars":1441,"code_v0_no_empty_lines":"def popcount(x):\n    x = x - ((x >> 1) & 0x55555555)\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333)\n    x = (x + (x >> 4)) & 0x0F0F0F0F\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 0x0000007F\n\n\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if i != 50 and j != 50:\n            cmb[i + 1][j + 1] += cmb[i][j]\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\nN, K, T, S = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if S >> i & 1 == 0]\nmust1 = [i for i in range(18) if T >> i & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j & 1 == 0)\n    for j in must1:\n        check = check & (val >> j & 1 == 1)\n    if check:\n        A.append(val)\nif not A:\n    print((0))\n    exit()\nbit = []\nfor i in range(18):\n    if i not in must0 and i not in must1:\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j] & 1 == 1) * 2**j\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] * (2**n)\nfor i in range(2**n):\n    t = set([])\n    for a in A:\n        data[a & i] += 1\n        t.add(a & i)\n    temp = 0\n    for val in t:\n        temp += cmb[data[val]][min(K, data[val])]\n    ans += temp * (-1) ** popcount(i)\n    for val in t:\n        data[val] = 0\nprint(ans)\n","code_v1_no_empty_lines":"def popcount(x):\n    x = x - ((x >> 1) & 0x55555555)\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333)\n    x = (x + (x >> 4)) & 0x0F0F0F0F\n    x = x + (x >> 8)\n    x = x + (x >> 16)\n    return x & 0x0000007F\n\n\ncmb = [[0 for i in range(51)] for j in range(51)]\ncmb[0][0] = 1\nfor i in range(51):\n    for j in range(51):\n        if i != 50:\n            cmb[i + 1][j] += cmb[i][j]\n        if j != 50 and i != 50:\n            cmb[i + 1][j + 1] += cmb[i][j]\nfor i in range(1, 51):\n    for j in range(2, 51):\n        cmb[i][j] += cmb[i][j - 1]\nimport random\n\nN, K, T, S = list(map(int, input().split()))\na = list(map(int, input().split()))\nmust0 = [i for i in range(18) if S >> i & 1 == 0]\nmust1 = [i for i in range(18) if T >> i & 1 == 1]\nA = []\nfor val in a:\n    check = True\n    for j in must0:\n        check = check & (val >> j & 1 == 0)\n    for j in must1:\n        check = check & (val >> j & 1 == 1)\n    if check:\n        A.append(val)\nif not A:\n    print((0))\n    exit()\nbit = []\nfor i in range(18):\n    if i not in must0 and i not in must1:\n        bit.append(i)\nfor i in range(len(A)):\n    temp = 0\n    for j in range(len(bit)):\n        temp += (A[i] >> bit[j] & 1 == 1) * 2**j\n    A[i] = temp\nans = 0\nn = len(bit)\ndata = [0] * (2**n)\npc = [popcount(i) for i in range(2**n)]\nfor i in range(2**n):\n    for a in A:\n        data[a & i] += 1\n    for a in A:\n        if data[a & i]:\n            ans += cmb[data[a & i]][min(K, data[a & i])] * (-1) ** pc[i]\n            data[a & i] = 0\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":1.4705882353,"diff":["-        if i != 50 and j != 50:","-            cmb[i + 1][j + 1] += cmb[i][j]","+        if j != 50 and i != 50:","+            cmb[i + 1][j + 1] += cmb[i][j]","+import random","+","+pc = [popcount(i) for i in range(2**n)]","-    t = set([])","-        t.add(a & i)","-    temp = 0","-    for val in t:","-        temp += cmb[data[val]][min(K, data[val])]","-    ans += temp * (-1) ** popcount(i)","-    for val in t:","-        data[val] = 0","+    for a in A:","+        if data[a & i]:","+            ans += cmb[data[a & i]][min(K, data[a & i])] * (-1) ** pc[i]","+            data[a & i] = 0"],"diff_only_import_comment":false,"measured_runtime_v0":0.3163019059,"measured_runtime_v1":0.2340069544,"runtime_lift":1.3516773748,"key":["s231020544","s831601953"]}
{"user_id":"u324314500","problem_id":"p03078","language":"python","submission_id_v0":"s506003546","submission_id_v1":"s782884160","cpu_time_v0":751,"cpu_time_v1":520,"memory_v0":49756,"memory_v1":66776,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":30.76,"input":"import sys\n\n#import numpy as np\n\n\n\ns2nn = lambda s: [int(c) for c in s.split(' ')]\n\nss2nn = lambda ss: [int(s) for s in ss]\n\nss2nnn = lambda ss: [s2nn(s) for s in ss]\n\ni2s = lambda: sys.stdin.readline().rstrip()\n\ni2n = lambda: int(i2s())\n\ni2nn = lambda: s2nn(i2s())\n\nii2ss = lambda n: [sys.stdin.readline().rstrip() for _ in range(n)]\n\nii2nn = lambda n: ss2nn(ii2ss(n))\n\nii2nnn = lambda n: ss2nnn(ii2ss(n))\n\n\n\nN = 10000\n\ndef tokey(i, j, k):\n\n    return i*N*N + j*N + k\n\ndef dekey(n):\n\n    i = int(n \/ N \/ N)\n\n    j = int(n \/ N) % N\n\n    k = n % N\n\n    return i, j, k\n\n\n\ndef main():\n\n    X, Y, Z, K = i2nn()\n\n    A = i2nn()\n\n    B = i2nn()\n\n    C = i2nn()\n\n    A.sort()\n\n    A.reverse()\n\n    B.sort()\n\n    B.reverse()\n\n    C.sort()\n\n    C.reverse()\n\n    Q = [(A[0] + B[0] + C[0], 0, 0, 0)]\n\n    loop = 0\n\n    stored = set()\n\n    def next(i, j, k):\n\n        if i >= X or j >= Y or k >= Z:\n\n            return\n\n        key = tokey(i, j, k)\n\n        if key not in stored:\n\n            stored.add(key)\n\n            n = A[i] + B[j] + C[k]\n\n            Q.append((n, i, j, k))\n\n    while True:\n\n        v = max(Q, key=lambda v: v[0])\n\n        Q.remove(v)\n\n        print((v[0]))\n\n        loop += 1\n\n        if loop >= K:\n\n            break\n\n        next(v[1]+1, v[2], v[3])\n\n        next(v[1], v[2]+1, v[3])\n\n        next(v[1], v[2], v[3]+1)\n\n\n\nmain()\n","target":"import sys\n\nfrom collections import deque  # \u53cc\u65b9\u5411\u30ad\u30e5\u30fc\n\nfrom collections import defaultdict  # \u521d\u671f\u5316\u6e08\u307f\u8f9e\u66f8\n\nfrom heapq import heapify, heappush, heappop, heappushpop  # \u30d7\u30e9\u30a4\u30aa\u30ea\u30c6\u30a3\u30ad\u30e5\u30fc\n\nfrom bisect import bisect_left, bisect_right  # \u4e8c\u5206\u63a2\u7d22\n\n#import numpy as np  # 1.8.2\n\n#import scipy  # 0.13.3\n\n#sys.setrecursionlimit(int(1e+6))\n\ns2nn = lambda s: [int(c) for c in s.split(' ')]\n\nss2nn = lambda ss: [int(s) for s in ss]\n\nss2nnn = lambda ss: [s2nn(s) for s in ss]\n\ni2s = lambda: sys.stdin.readline().rstrip()\n\ni2n = lambda: int(i2s())\n\ni2nn = lambda: s2nn(i2s())\n\nii2ss = lambda n: [sys.stdin.readline().rstrip() for _ in range(n)]\n\nii2sss = lambda n: [list(sys.stdin.readline().rstrip()) for _ in range(n)]\n\nii2nn = lambda n: ss2nn(ii2ss(n))\n\nii2nnn = lambda n: ss2nnn(ii2ss(n))\n\nMOD = int(1e+9) + 7\n\n\n\ndef main():\n\n    X, Y, Z, K = i2nn()\n\n    A = i2nn()\n\n    B = i2nn()\n\n    C = i2nn()\n\n    A.sort()\n\n    A.reverse()\n\n    B.sort()\n\n    B.reverse()\n\n    C.sort()\n\n    C.reverse()\n\n    s = set()\n\n    hq = []\n\n    n = 0\n\n    heappush(hq, ((A[0] + B[0] + C[0]) * -1, (0, 0, 0)))\n\n    while n < K:\n\n        t, abc = heappop(hq)\n\n        if abc in s:\n\n            continue\n\n        s.add(abc)\n\n        (a, b, c) = abc\n\n        if a+1 < X:\n\n            heappush(hq, ((A[a+1] + B[b] + C[c]) * -1, (a+1, b, c)))\n\n        if b+1 < Y:\n\n            heappush(hq, ((A[a] + B[b+1] + C[c]) * -1, (a, b+1, c)))\n\n        if c+1 < Z:\n\n            heappush(hq, ((A[a] + B[b] + C[c+1]) * -1, (a, b, c+1)))\n\n        print((-t))\n\n        n += 1\n\n\n\nmain()\n","code_v0_loc":56,"code_v1_loc":51,"code_v0_num_chars":1341,"code_v1_num_chars":1520,"code_v0_no_empty_lines":"import sys\n\n# import numpy as np\ns2nn = lambda s: [int(c) for c in s.split(\" \")]\nss2nn = lambda ss: [int(s) for s in ss]\nss2nnn = lambda ss: [s2nn(s) for s in ss]\ni2s = lambda: sys.stdin.readline().rstrip()\ni2n = lambda: int(i2s())\ni2nn = lambda: s2nn(i2s())\nii2ss = lambda n: [sys.stdin.readline().rstrip() for _ in range(n)]\nii2nn = lambda n: ss2nn(ii2ss(n))\nii2nnn = lambda n: ss2nnn(ii2ss(n))\nN = 10000\n\n\ndef tokey(i, j, k):\n    return i * N * N + j * N + k\n\n\ndef dekey(n):\n    i = int(n \/ N \/ N)\n    j = int(n \/ N) % N\n    k = n % N\n    return i, j, k\n\n\ndef main():\n    X, Y, Z, K = i2nn()\n    A = i2nn()\n    B = i2nn()\n    C = i2nn()\n    A.sort()\n    A.reverse()\n    B.sort()\n    B.reverse()\n    C.sort()\n    C.reverse()\n    Q = [(A[0] + B[0] + C[0], 0, 0, 0)]\n    loop = 0\n    stored = set()\n\n    def next(i, j, k):\n        if i >= X or j >= Y or k >= Z:\n            return\n        key = tokey(i, j, k)\n        if key not in stored:\n            stored.add(key)\n            n = A[i] + B[j] + C[k]\n            Q.append((n, i, j, k))\n\n    while True:\n        v = max(Q, key=lambda v: v[0])\n        Q.remove(v)\n        print((v[0]))\n        loop += 1\n        if loop >= K:\n            break\n        next(v[1] + 1, v[2], v[3])\n        next(v[1], v[2] + 1, v[3])\n        next(v[1], v[2], v[3] + 1)\n\n\nmain()\n","code_v1_no_empty_lines":"import sys\nfrom collections import deque  # \u53cc\u65b9\u5411\u30ad\u30e5\u30fc\nfrom collections import defaultdict  # \u521d\u671f\u5316\u6e08\u307f\u8f9e\u66f8\nfrom heapq import heapify, heappush, heappop, heappushpop  # \u30d7\u30e9\u30a4\u30aa\u30ea\u30c6\u30a3\u30ad\u30e5\u30fc\nfrom bisect import bisect_left, bisect_right  # \u4e8c\u5206\u63a2\u7d22\n\n# import numpy as np  # 1.8.2\n# import scipy  # 0.13.3\n# sys.setrecursionlimit(int(1e+6))\ns2nn = lambda s: [int(c) for c in s.split(\" \")]\nss2nn = lambda ss: [int(s) for s in ss]\nss2nnn = lambda ss: [s2nn(s) for s in ss]\ni2s = lambda: sys.stdin.readline().rstrip()\ni2n = lambda: int(i2s())\ni2nn = lambda: s2nn(i2s())\nii2ss = lambda n: [sys.stdin.readline().rstrip() for _ in range(n)]\nii2sss = lambda n: [list(sys.stdin.readline().rstrip()) for _ in range(n)]\nii2nn = lambda n: ss2nn(ii2ss(n))\nii2nnn = lambda n: ss2nnn(ii2ss(n))\nMOD = int(1e9) + 7\n\n\ndef main():\n    X, Y, Z, K = i2nn()\n    A = i2nn()\n    B = i2nn()\n    C = i2nn()\n    A.sort()\n    A.reverse()\n    B.sort()\n    B.reverse()\n    C.sort()\n    C.reverse()\n    s = set()\n    hq = []\n    n = 0\n    heappush(hq, ((A[0] + B[0] + C[0]) * -1, (0, 0, 0)))\n    while n < K:\n        t, abc = heappop(hq)\n        if abc in s:\n            continue\n        s.add(abc)\n        (a, b, c) = abc\n        if a + 1 < X:\n            heappush(hq, ((A[a + 1] + B[b] + C[c]) * -1, (a + 1, b, c)))\n        if b + 1 < Y:\n            heappush(hq, ((A[a] + B[b + 1] + C[c]) * -1, (a, b + 1, c)))\n        if c + 1 < Z:\n            heappush(hq, ((A[a] + B[b] + C[c + 1]) * -1, (a, b, c + 1)))\n        print((-t))\n        n += 1\n\n\nmain()\n","code_same":false,"relative_loc_diff_percent":8.9285714286,"diff":["+from collections import deque  # \u53cc\u65b9\u5411\u30ad\u30e5\u30fc","+from collections import defaultdict  # \u521d\u671f\u5316\u6e08\u307f\u8f9e\u66f8","+from heapq import heapify, heappush, heappop, heappushpop  # \u30d7\u30e9\u30a4\u30aa\u30ea\u30c6\u30a3\u30ad\u30e5\u30fc","+from bisect import bisect_left, bisect_right  # \u4e8c\u5206\u63a2\u7d22","-# import numpy as np","+# import numpy as np  # 1.8.2","+# import scipy  # 0.13.3","+# sys.setrecursionlimit(int(1e+6))","+ii2sss = lambda n: [list(sys.stdin.readline().rstrip()) for _ in range(n)]","-N = 10000","-","-","-def tokey(i, j, k):","-    return i * N * N + j * N + k","-","-","-def dekey(n):","-    i = int(n \/ N \/ N)","-    j = int(n \/ N) % N","-    k = n % N","-    return i, j, k","+MOD = int(1e9) + 7","-    Q = [(A[0] + B[0] + C[0], 0, 0, 0)]","-    loop = 0","-    stored = set()","-","-    def next(i, j, k):","-        if i >= X or j >= Y or k >= Z:","-            return","-        key = tokey(i, j, k)","-        if key not in stored:","-            stored.add(key)","-            n = A[i] + B[j] + C[k]","-            Q.append((n, i, j, k))","-","-    while True:","-        v = max(Q, key=lambda v: v[0])","-        Q.remove(v)","-        print((v[0]))","-        loop += 1","-        if loop >= K:","-            break","-        next(v[1] + 1, v[2], v[3])","-        next(v[1], v[2] + 1, v[3])","-        next(v[1], v[2], v[3] + 1)","+    s = set()","+    hq = []","+    n = 0","+    heappush(hq, ((A[0] + B[0] + C[0]) * -1, (0, 0, 0)))","+    while n < K:","+        t, abc = heappop(hq)","+        if abc in s:","+            continue","+        s.add(abc)","+        (a, b, c) = abc","+        if a + 1 < X:","+            heappush(hq, ((A[a + 1] + B[b] + C[c]) * -1, (a + 1, b, c)))","+        if b + 1 < Y:","+            heappush(hq, ((A[a] + B[b + 1] + C[c]) * -1, (a, b + 1, c)))","+        if c + 1 < Z:","+            heappush(hq, ((A[a] + B[b] + C[c + 1]) * -1, (a, b, c + 1)))","+        print((-t))","+        n += 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.2744265182,"measured_runtime_v1":0.1831091979,"runtime_lift":1.4987041689,"key":["s506003546","s782884160"]}
{"user_id":"u968166680","problem_id":"p02814","language":"python","submission_id_v0":"s703991862","submission_id_v1":"s702868581","cpu_time_v0":61,"cpu_time_v1":44,"memory_v0":13352,"memory_v1":14092,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":27.87,"input":"import sys\n\nfrom fractions import gcd\n\n\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = 1 << 60\n\n\n\n\n\ndef lcm(x, y):\n\n    return x * y \/\/ gcd(x, y)\n\n\n\n\n\ndef main():\n\n    N, M = list(map(int, input().split()))\n\n    A = list(set(map(int, input().split(\" \"))))\n\n    A = [a \/\/ 2 for a in A]\n\n    semi_lcm = 1\n\n    for a in A:\n\n        semi_lcm = lcm(semi_lcm, a)\n\n        if semi_lcm > M:\n\n            print((0))\n\n            return\n\n\n\n    for a in A:\n\n        if semi_lcm \/\/ a % 2 == 0:\n\n            print((0))\n\n            return\n\n\n\n    print(((M \/\/ semi_lcm + 1) \/\/ 2))\n\n    return\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"import sys\n\n\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = 1 << 60\n\n\n\n\n\ndef gcd(a, b):\n\n    while b:\n\n        a, b = b, a % b\n\n    return a\n\n\n\n\n\ndef lcm(a, b):\n\n    return a * b \/\/ gcd(a, b)\n\n\n\n\n\ndef main():\n\n    N, M, *A = list(map(int, read().split()))\n\n    A = list(set(A))\n\n    B = A.copy()\n\n\n\n    while not any(b % 2 for b in B):\n\n        B = [b \/\/ 2 for b in B]\n\n\n\n    if not all(b % 2 for b in B):\n\n        print((0))\n\n        return\n\n\n\n    semi_lcm = 1\n\n    for a in A:\n\n        semi_lcm = lcm(semi_lcm, a \/\/ 2)\n\n\n\n    print(((M \/\/ semi_lcm + 1) \/\/ 2))\n\n    return\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":36,"code_v1_loc":41,"code_v0_num_chars":690,"code_v1_num_chars":687,"code_v0_no_empty_lines":"import sys\nfrom fractions import gcd\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10**9)\nINF = 1 << 60\n\n\ndef lcm(x, y):\n    return x * y \/\/ gcd(x, y)\n\n\ndef main():\n    N, M = list(map(int, input().split()))\n    A = list(set(map(int, input().split(\" \"))))\n    A = [a \/\/ 2 for a in A]\n    semi_lcm = 1\n    for a in A:\n        semi_lcm = lcm(semi_lcm, a)\n        if semi_lcm > M:\n            print((0))\n            return\n    for a in A:\n        if semi_lcm \/\/ a % 2 == 0:\n            print((0))\n            return\n    print(((M \/\/ semi_lcm + 1) \/\/ 2))\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10**9)\nINF = 1 << 60\n\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef lcm(a, b):\n    return a * b \/\/ gcd(a, b)\n\n\ndef main():\n    N, M, *A = list(map(int, read().split()))\n    A = list(set(A))\n    B = A.copy()\n    while not any(b % 2 for b in B):\n        B = [b \/\/ 2 for b in B]\n    if not all(b % 2 for b in B):\n        print((0))\n        return\n    semi_lcm = 1\n    for a in A:\n        semi_lcm = lcm(semi_lcm, a \/\/ 2)\n    print(((M \/\/ semi_lcm + 1) \/\/ 2))\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":12.1951219512,"diff":["-from fractions import gcd","-def lcm(x, y):","-    return x * y \/\/ gcd(x, y)","+def gcd(a, b):","+    while b:","+        a, b = b, a % b","+    return a","+","+","+def lcm(a, b):","+    return a * b \/\/ gcd(a, b)","-    N, M = list(map(int, input().split()))","-    A = list(set(map(int, input().split(\" \"))))","-    A = [a \/\/ 2 for a in A]","+    N, M, *A = list(map(int, read().split()))","+    A = list(set(A))","+    B = A.copy()","+    while not any(b % 2 for b in B):","+        B = [b \/\/ 2 for b in B]","+    if not all(b % 2 for b in B):","+        print((0))","+        return","-        semi_lcm = lcm(semi_lcm, a)","-        if semi_lcm > M:","-            print((0))","-            return","-    for a in A:","-        if semi_lcm \/\/ a % 2 == 0:","-            print((0))","-            return","+        semi_lcm = lcm(semi_lcm, a \/\/ 2)"],"diff_only_import_comment":false,"measured_runtime_v0":0.284781249,"measured_runtime_v1":0.212113862,"runtime_lift":1.3425866952,"key":["s703991862","s702868581"]}
{"user_id":"u268210555","problem_id":"p02702","language":"python","submission_id_v0":"s447095273","submission_id_v1":"s107946427","cpu_time_v0":620,"cpu_time_v1":135,"memory_v0":27172,"memory_v1":9292,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":78.23,"input":"import numpy as np\n\ns = eval(input())\n\ny = 2019\n\ndp = np.zeros(y, dtype=\"int64\")\n\ntmp = np.zeros(y, dtype=\"int64\")\n\nk = 1\n\nr = 0\n\nfor c in s[::-1]:\n\n    i = int(c)*k%y\n\n    tmp[i:] = dp[:y-i]\n\n    tmp[:i] = dp[y-i:]\n\n    tmp[i] += 1\n\n    dp, tmp = tmp, dp\n\n    r += dp[0]\n\n    k *= 10\n\n    k %= y\n\nprint(r)","target":"y=2019\n\na=[0]*y\n\nk=1\n\nr=p=0\n\nfor c in input()[::-1]:\n\n    a[p]+=1\n\n    p-=int(c)*k\n\n    p%=y\n\n    r+=a[p]\n\n    k*=10\n\n    k%=y\n\nprint(r)\n\n\n","code_v0_loc":17,"code_v1_loc":13,"code_v0_num_chars":300,"code_v1_num_chars":139,"code_v0_no_empty_lines":"import numpy as np\n\ns = eval(input())\ny = 2019\ndp = np.zeros(y, dtype=\"int64\")\ntmp = np.zeros(y, dtype=\"int64\")\nk = 1\nr = 0\nfor c in s[::-1]:\n    i = int(c) * k % y\n    tmp[i:] = dp[: y - i]\n    tmp[:i] = dp[y - i :]\n    tmp[i] += 1\n    dp, tmp = tmp, dp\n    r += dp[0]\n    k *= 10\n    k %= y\nprint(r)\n","code_v1_no_empty_lines":"y = 2019\na = [0] * y\nk = 1\nr = p = 0\nfor c in input()[::-1]:\n    a[p] += 1\n    p -= int(c) * k\n    p %= y\n    r += a[p]\n    k *= 10\n    k %= y\nprint(r)\n","code_same":false,"relative_loc_diff_percent":23.5294117647,"diff":["-import numpy as np","-","-s = eval(input())","-dp = np.zeros(y, dtype=\"int64\")","-tmp = np.zeros(y, dtype=\"int64\")","+a = [0] * y","-r = 0","-for c in s[::-1]:","-    i = int(c) * k % y","-    tmp[i:] = dp[: y - i]","-    tmp[:i] = dp[y - i :]","-    tmp[i] += 1","-    dp, tmp = tmp, dp","-    r += dp[0]","+r = p = 0","+for c in input()[::-1]:","+    a[p] += 1","+    p -= int(c) * k","+    p %= y","+    r += a[p]"],"diff_only_import_comment":false,"measured_runtime_v0":1.860732609,"measured_runtime_v1":0.344029563,"runtime_lift":5.4086416092,"key":["s447095273","s107946427"]}
{"user_id":"u636251914","problem_id":"p02761","language":"python","submission_id_v0":"s225166241","submission_id_v1":"s824370296","cpu_time_v0":120,"cpu_time_v1":30,"memory_v0":26936,"memory_v1":9132,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":75.0,"input":"import sys\n\nimport numpy as np\n\n\n\nN, M = [int(_) for _ in input().split()]\n\n\n\nif M == 0:\n\n    if N == 1:\n\n        print(\"0\")\n\n    else:\n\n        ans = [0] * N\n\n        ans[0] = 1\n\n        print((\"\".join(map(str, ans))))\n\n    sys.exit()\n\n\n\nS, C = np.array([[int(_) for _ in input().split()] for i in range(M)]).T\n\n\n\nans = [-1] * N\n\n\n\nfor i in range(M):\n\n    j = int(S[i]) - 1\n\n    if ans[j] == -1 or ans[j] == C[i]:\n\n        ans[j] = C[i]\n\n    else:\n\n        print(\"-1\")\n\n        sys.exit()\n\n\n\nif N >= 2 and ans[0] == 0:\n\n    print(\"-1\")\n\n    sys.exit()\n\n\n\nif N >= 2 and ans[0] == -1:\n\n    ans[0] = 1\n\n\n\nfor i in range(1, N):\n\n    if ans[i] == -1:\n\n        ans[i] = 0\n\n\n\ns = \"\".join(map(str, ans))\n\nprint(s)\n","target":"import sys\n\n\n\nN, M = [int(_) for _ in input().split()]\n\nSC = [[int(_) for _ in input().split()] for i in range(M)]\n\n\n\nif N == 1:\n\n    start = 0\n\n    end = 10\n\nelse:\n\n    start = 10 ** (N - 1)\n\n    end = 10 ** N\n\n\n\nfor i in range(start, end):\n\n    ans = list(map(int, str(i)))\n\n    valid = True\n\n    for s, c in SC:\n\n        if ans[s-1] != c:\n\n            valid = False\n\n            break\n\n    if valid:\n\n        print(i)\n\n        sys.exit()\n\n\n\nprint((-1))\n","code_v0_loc":39,"code_v1_loc":24,"code_v0_num_chars":705,"code_v1_num_chars":454,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nN, M = [int(_) for _ in input().split()]\nif M == 0:\n    if N == 1:\n        print(\"0\")\n    else:\n        ans = [0] * N\n        ans[0] = 1\n        print((\"\".join(map(str, ans))))\n    sys.exit()\nS, C = np.array([[int(_) for _ in input().split()] for i in range(M)]).T\nans = [-1] * N\nfor i in range(M):\n    j = int(S[i]) - 1\n    if ans[j] == -1 or ans[j] == C[i]:\n        ans[j] = C[i]\n    else:\n        print(\"-1\")\n        sys.exit()\nif N >= 2 and ans[0] == 0:\n    print(\"-1\")\n    sys.exit()\nif N >= 2 and ans[0] == -1:\n    ans[0] = 1\nfor i in range(1, N):\n    if ans[i] == -1:\n        ans[i] = 0\ns = \"\".join(map(str, ans))\nprint(s)\n","code_v1_no_empty_lines":"import sys\n\nN, M = [int(_) for _ in input().split()]\nSC = [[int(_) for _ in input().split()] for i in range(M)]\nif N == 1:\n    start = 0\n    end = 10\nelse:\n    start = 10 ** (N - 1)\n    end = 10**N\nfor i in range(start, end):\n    ans = list(map(int, str(i)))\n    valid = True\n    for s, c in SC:\n        if ans[s - 1] != c:\n            valid = False\n            break\n    if valid:\n        print(i)\n        sys.exit()\nprint((-1))\n","code_same":false,"relative_loc_diff_percent":38.4615384615,"diff":["-import numpy as np","-if M == 0:","-    if N == 1:","-        print(\"0\")","-    else:","-        ans = [0] * N","-        ans[0] = 1","-        print((\"\".join(map(str, ans))))","-    sys.exit()","-S, C = np.array([[int(_) for _ in input().split()] for i in range(M)]).T","-ans = [-1] * N","-for i in range(M):","-    j = int(S[i]) - 1","-    if ans[j] == -1 or ans[j] == C[i]:","-        ans[j] = C[i]","-    else:","-        print(\"-1\")","+SC = [[int(_) for _ in input().split()] for i in range(M)]","+if N == 1:","+    start = 0","+    end = 10","+else:","+    start = 10 ** (N - 1)","+    end = 10**N","+for i in range(start, end):","+    ans = list(map(int, str(i)))","+    valid = True","+    for s, c in SC:","+        if ans[s - 1] != c:","+            valid = False","+            break","+    if valid:","+        print(i)","-if N >= 2 and ans[0] == 0:","-    print(\"-1\")","-    sys.exit()","-if N >= 2 and ans[0] == -1:","-    ans[0] = 1","-for i in range(1, N):","-    if ans[i] == -1:","-        ans[i] = 0","-s = \"\".join(map(str, ans))","-print(s)","+print((-1))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3151718793,"measured_runtime_v1":0.2178794563,"runtime_lift":6.0362362826,"key":["s225166241","s824370296"]}
{"user_id":"u572142121","problem_id":"p03363","language":"python","submission_id_v0":"s475305567","submission_id_v1":"s723214591","cpu_time_v0":418,"cpu_time_v1":188,"memory_v0":34640,"memory_v1":31600,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":55.02,"input":"import numpy\n\nN=int(eval(input()))\n\nA=list(map(int,input().split()))\n\nB=list(numpy.cumsum(A))+[0]\n\nC=sorted(B)\n\nd=C[0]\n\ncnt=1\n\nans=0\n\nfor i in range(N):\n\n  if C[i+1]==d:\n\n    cnt+=1\n\n  else:\n\n    ans+=cnt*(cnt-1)\/\/2\n\n    cnt=1\n\n    d=C[i+1]\n\nans+=cnt*(cnt-1)\/\/2\n\nprint(ans)    ","target":"N=int(eval(input()))\n\nA=list(map(int, input().split()))\n\nD=[0]\n\nd=0\n\nfor i in A:\n\n  d+=i\n\n  D.append(d)\n\nD=sorted(D)\n\nans=0\n\nd=-10**9+1\n\nD.append(10**9+1)\n\ncnt=0\n\nfor i in range(N+2):\n\n  if D[i]==d:\n\n    cnt+=1\n\n  else:\n\n    if cnt>1:\n\n      ans+=cnt*(cnt-1)\/\/2\n\n      cnt=1\n\n    else:\n\n      cnt=1\n\n    d=D[i]\n\nprint(ans)","code_v0_loc":17,"code_v1_loc":23,"code_v0_num_chars":271,"code_v1_num_chars":316,"code_v0_no_empty_lines":"import numpy\n\nN = int(eval(input()))\nA = list(map(int, input().split()))\nB = list(numpy.cumsum(A)) + [0]\nC = sorted(B)\nd = C[0]\ncnt = 1\nans = 0\nfor i in range(N):\n    if C[i + 1] == d:\n        cnt += 1\n    else:\n        ans += cnt * (cnt - 1) \/\/ 2\n        cnt = 1\n        d = C[i + 1]\nans += cnt * (cnt - 1) \/\/ 2\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = list(map(int, input().split()))\nD = [0]\nd = 0\nfor i in A:\n    d += i\n    D.append(d)\nD = sorted(D)\nans = 0\nd = -(10**9) + 1\nD.append(10**9 + 1)\ncnt = 0\nfor i in range(N + 2):\n    if D[i] == d:\n        cnt += 1\n    else:\n        if cnt > 1:\n            ans += cnt * (cnt - 1) \/\/ 2\n            cnt = 1\n        else:\n            cnt = 1\n        d = D[i]\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":26.0869565217,"diff":["-import numpy","-","-B = list(numpy.cumsum(A)) + [0]","-C = sorted(B)","-d = C[0]","-cnt = 1","+D = [0]","+d = 0","+for i in A:","+    d += i","+    D.append(d)","+D = sorted(D)","-for i in range(N):","-    if C[i + 1] == d:","+d = -(10**9) + 1","+D.append(10**9 + 1)","+cnt = 0","+for i in range(N + 2):","+    if D[i] == d:","-        ans += cnt * (cnt - 1) \/\/ 2","-        cnt = 1","-        d = C[i + 1]","-ans += cnt * (cnt - 1) \/\/ 2","+        if cnt > 1:","+            ans += cnt * (cnt - 1) \/\/ 2","+            cnt = 1","+        else:","+            cnt = 1","+        d = D[i]"],"diff_only_import_comment":false,"measured_runtime_v0":1.3420555761,"measured_runtime_v1":0.3643712389,"runtime_lift":3.6832094101,"key":["s475305567","s723214591"]}
{"user_id":"u761529120","problem_id":"p03634","language":"python","submission_id_v0":"s135133436","submission_id_v1":"s083939253","cpu_time_v0":1459,"cpu_time_v1":754,"memory_v0":135740,"memory_v1":94752,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":48.32,"input":"import sys\n\nsys.setrecursionlimit(10**6)\n\ndef dfs(v,p,d):\n\n    for i, j in tree[v]:\n\n        if i != p:\n\n            depth[i] = d + j\n\n            dfs(i,v,d+j)\n\n\n\nN = int(eval(input()))\n\n\n\ntree = [[] for _ in range(N)]\n\n\n\nfor i in range(N-1):\n\n    a, b, c = list(map(int, input().split()))\n\n    a -= 1\n\n    b -= 1\n\n    tree[a].append((b,c))\n\n    tree[b].append((a,c))\n\n\n\nQ, K = list(map(int, input().split()))\n\n\n\ndepth = [0 for i in range(N)]\n\ndepth[K-1] = 0\n\n\n\ndfs(K-1,-1,0)\n\n\n\nfor _ in range(Q):\n\n    x, y = list(map(int, input().split()))\n\n    print((depth[x-1] + depth[y-1]))","target":"import heapq\n\nimport sys\n\n\n\ninput = sys.stdin.readline\n\n\n\ndef dijkstra(s, edge, N):\n\n    d = [float('inf')] * N\n\n    used = [True] * N\n\n    d[s] = 0\n\n    used[s] = False\n\n    edgelist = []\n\n    for a, b in edge[s]:\n\n        heapq.heappush(edgelist, a * (10 ** 6) + b)\n\n    while len(edgelist):\n\n        minedge = heapq.heappop(edgelist)\n\n\n\n        if not used[minedge%(10 ** 6)]:\n\n            continue\n\n        v = minedge % (10 ** 6)\n\n        d[v] = minedge \/\/ (10 ** 6)\n\n        used[v] = False\n\n        for e in edge[v]:\n\n            if used[e[1]]:\n\n                heapq.heappush(edgelist, (e[0] + d[v]) * (10 ** 6) + e[1])\n\n    return d\n\n\n\ndef main():\n\n    N = int(eval(input()))\n\n    edge = [[] for _ in range(N)]\n\n    for _ in range(N-1):\n\n        a, b, c = list(map(int, input().split()))\n\n        a -= 1\n\n        b -= 1\n\n        edge[a].append([c,b])\n\n        edge[b].append([c,a])\n\n    Q, K = list(map(int, input().split()))\n\n    K -= 1\n\n    d = dijkstra(K, edge, N)\n\n    for _ in range(Q):\n\n        x, y = list(map(int, input().split()))\n\n        x -= 1\n\n        y -= 1\n\n        print((d[x] + d[y]))\n\n\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()","code_v0_loc":29,"code_v1_loc":48,"code_v0_num_chars":553,"code_v1_num_chars":1130,"code_v0_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10**6)\n\n\ndef dfs(v, p, d):\n    for i, j in tree[v]:\n        if i != p:\n            depth[i] = d + j\n            dfs(i, v, d + j)\n\n\nN = int(eval(input()))\ntree = [[] for _ in range(N)]\nfor i in range(N - 1):\n    a, b, c = list(map(int, input().split()))\n    a -= 1\n    b -= 1\n    tree[a].append((b, c))\n    tree[b].append((a, c))\nQ, K = list(map(int, input().split()))\ndepth = [0 for i in range(N)]\ndepth[K - 1] = 0\ndfs(K - 1, -1, 0)\nfor _ in range(Q):\n    x, y = list(map(int, input().split()))\n    print((depth[x - 1] + depth[y - 1]))\n","code_v1_no_empty_lines":"import heapq\nimport sys\n\ninput = sys.stdin.readline\n\n\ndef dijkstra(s, edge, N):\n    d = [float(\"inf\")] * N\n    used = [True] * N\n    d[s] = 0\n    used[s] = False\n    edgelist = []\n    for a, b in edge[s]:\n        heapq.heappush(edgelist, a * (10**6) + b)\n    while len(edgelist):\n        minedge = heapq.heappop(edgelist)\n        if not used[minedge % (10**6)]:\n            continue\n        v = minedge % (10**6)\n        d[v] = minedge \/\/ (10**6)\n        used[v] = False\n        for e in edge[v]:\n            if used[e[1]]:\n                heapq.heappush(edgelist, (e[0] + d[v]) * (10**6) + e[1])\n    return d\n\n\ndef main():\n    N = int(eval(input()))\n    edge = [[] for _ in range(N)]\n    for _ in range(N - 1):\n        a, b, c = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        edge[a].append([c, b])\n        edge[b].append([c, a])\n    Q, K = list(map(int, input().split()))\n    K -= 1\n    d = dijkstra(K, edge, N)\n    for _ in range(Q):\n        x, y = list(map(int, input().split()))\n        x -= 1\n        y -= 1\n        print((d[x] + d[y]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":39.5833333333,"diff":["+import heapq","-sys.setrecursionlimit(10**6)","+input = sys.stdin.readline","-def dfs(v, p, d):","-    for i, j in tree[v]:","-        if i != p:","-            depth[i] = d + j","-            dfs(i, v, d + j)","+def dijkstra(s, edge, N):","+    d = [float(\"inf\")] * N","+    used = [True] * N","+    d[s] = 0","+    used[s] = False","+    edgelist = []","+    for a, b in edge[s]:","+        heapq.heappush(edgelist, a * (10**6) + b)","+    while len(edgelist):","+        minedge = heapq.heappop(edgelist)","+        if not used[minedge % (10**6)]:","+            continue","+        v = minedge % (10**6)","+        d[v] = minedge \/\/ (10**6)","+        used[v] = False","+        for e in edge[v]:","+            if used[e[1]]:","+                heapq.heappush(edgelist, (e[0] + d[v]) * (10**6) + e[1])","+    return d","-N = int(eval(input()))","-tree = [[] for _ in range(N)]","-for i in range(N - 1):","-    a, b, c = list(map(int, input().split()))","-    a -= 1","-    b -= 1","-    tree[a].append((b, c))","-    tree[b].append((a, c))","-Q, K = list(map(int, input().split()))","-depth = [0 for i in range(N)]","-depth[K - 1] = 0","-dfs(K - 1, -1, 0)","-for _ in range(Q):","-    x, y = list(map(int, input().split()))","-    print((depth[x - 1] + depth[y - 1]))","+def main():","+    N = int(eval(input()))","+    edge = [[] for _ in range(N)]","+    for _ in range(N - 1):","+        a, b, c = list(map(int, input().split()))","+        a -= 1","+        b -= 1","+        edge[a].append([c, b])","+        edge[b].append([c, a])","+    Q, K = list(map(int, input().split()))","+    K -= 1","+    d = dijkstra(K, edge, N)","+    for _ in range(Q):","+        x, y = list(map(int, input().split()))","+        x -= 1","+        y -= 1","+        print((d[x] + d[y]))","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.5217886055,"measured_runtime_v1":0.3235212803,"runtime_lift":1.6128416807,"key":["s135133436","s083939253"]}
{"user_id":"u230717961","problem_id":"p03796","language":"python","submission_id_v0":"s450924156","submission_id_v1":"s743009434","cpu_time_v0":229,"cpu_time_v1":35,"memory_v0":3984,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":84.72,"input":"import math\n\nn = int(eval(input()))\n\n\n\npower = math.factorial(n)\n\n\n\nprint((power % (10**9 + 7)))\n","target":"import math\n\nn = int(eval(input()))\n\n\n\npower = 1\n\n\n\nfor i in range(1, n+1):\n\n    power = i * power % (10**9 + 7)\n\n\n\nprint(power)\n","code_v0_loc":6,"code_v1_loc":9,"code_v0_num_chars":89,"code_v1_num_chars":123,"code_v0_no_empty_lines":"import math\n\nn = int(eval(input()))\npower = math.factorial(n)\nprint((power % (10**9 + 7)))\n","code_v1_no_empty_lines":"import math\n\nn = int(eval(input()))\npower = 1\nfor i in range(1, n + 1):\n    power = i * power % (10**9 + 7)\nprint(power)\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-power = math.factorial(n)","-print((power % (10**9 + 7)))","+power = 1","+for i in range(1, n + 1):","+    power = i * power % (10**9 + 7)","+print(power)"],"diff_only_import_comment":false,"measured_runtime_v0":0.5500237288,"measured_runtime_v1":0.2133381867,"runtime_lift":2.5781775744,"key":["s450924156","s743009434"]}
{"user_id":"u947883560","problem_id":"p02883","language":"python","submission_id_v0":"s930888083","submission_id_v1":"s224851007","cpu_time_v0":856,"cpu_time_v1":625,"memory_v0":144812,"memory_v1":49884,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":26.99,"input":"#!\/usr\/bin\/env python3\n\nimport sys\n\nINF = float(\"inf\")\n\nfrom bisect import bisect_left\n\n\n\n\n\ndef solve(N: int, K: int, A: \"List[int]\", F: \"List[int]\"):\n\n    A.sort()\n\n    F.sort(reverse=True)\n\n    h = []\n\n    for a, f in zip(A, F):\n\n        h.append((a*f, a, f))\n\n    h.sort()\n\n    maxtime = h[-1][0]\n\n\n\n    def isOK(y):\n\n        i = bisect_left(h, (y+1, -1, -1))\n\n        counter = 0\n\n        # print(h[i:])\n\n        for p, a, f in h[i:]:\n\n            counter += a-y\/\/f\n\n        return counter <= K\n\n\n\n    def binary_search(x):\n\n        ng = -1\n\n        ok = len(x)\n\n        while abs(ok - ng) > 1:\n\n            mid = (ok + ng)\/\/2\n\n            # print(\"mid: {}, in ({}, {})\".format(mid, ng, ok))\n\n            if isOK(mid):\n\n                ok = mid\n\n            else:\n\n                ng = mid\n\n        return ng, ok\n\n\n\n    ng, ok = binary_search(list(range(maxtime)))\n\n    print(ok)\n\n\n\n    # while k > 0:\n\n    #     p1, a1, f1 = heapq.heappop(h)\n\n    #     p2, a2, f2 = heapq.heappop(h)\n\n    #     p1, p2 = -p1, -p2\n\n    #     sub = min(a1 - math.ceil((p2\/f1)-1), k)\n\n    #     a1 -= sub\n\n    #     k -= sub\n\n    #     heapq.heappush(h, (-a1*f1, a1, f1))\n\n    #     heapq.heappush(h, (-a2*f2, a2, f2))\n\n    # # print(h)\n\n    # p, a, f = heapq.heappop(h)\n\n    # print(-p)\n\n\n\n    return\n\n\n\n\n\ndef main():\n\n\n\n    def iterate_tokens():\n\n        for line in sys.stdin:\n\n            for word in line.split():\n\n                yield word\n\n    tokens = iterate_tokens()\n\n    N = int(next(tokens))  # type: int\n\n    K = int(next(tokens))  # type: int\n\n    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n\n    F = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n\n    solve(N, K, A, F)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"#!\/usr\/bin\/env python3\n\nimport sys\n\nINF = float(\"inf\")\n\nimport numpy as np\n\n\n\n\n\ndef solve(N: int, K: int, A: \"List[int]\", F: \"List[int]\"):\n\n    A.sort()\n\n    F.sort(reverse=True)\n\n    A = np.asarray(A, dtype=np.int)\n\n    F = np.asarray(F, dtype=np.int)\n\n\n\n    Asum = A.sum()\n\n\n\n    def isOK(y):\n\n        return Asum-np.minimum(A, y\/\/F).sum() <= K\n\n\n\n    def binary_search(x):\n\n        ng = -1\n\n        ok = len(x)\n\n        while abs(ok - ng) > 1:\n\n            mid = (ok + ng)\/\/2\n\n            # print(\"mid: {}, in ({}, {})\".format(mid, ng, ok))\n\n            if isOK(mid):\n\n                ok = mid\n\n            else:\n\n                ng = mid\n\n        return ng, ok\n\n\n\n    ng, ok = binary_search(list(range(A.max()*F.max())))\n\n    print(ok)\n\n\n\n    # while k > 0:\n\n    #     p1, a1, f1 = heapq.heappop(h)\n\n    #     p2, a2, f2 = heapq.heappop(h)\n\n    #     p1, p2 = -p1, -p2\n\n    #     sub = min(a1 - math.ceil((p2\/f1)-1), k)\n\n    #     a1 -= sub\n\n    #     k -= sub\n\n    #     heapq.heappush(h, (-a1*f1, a1, f1))\n\n    #     heapq.heappush(h, (-a2*f2, a2, f2))\n\n    # # print(h)\n\n    # p, a, f = heapq.heappop(h)\n\n    # print(-p)\n\n\n\n    return\n\n\n\n\n\ndef main():\n\n\n\n    def iterate_tokens():\n\n        for line in sys.stdin:\n\n            for word in line.split():\n\n                yield word\n\n    tokens = iterate_tokens()\n\n    N = int(next(tokens))  # type: int\n\n    K = int(next(tokens))  # type: int\n\n    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n\n    F = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n\n    solve(N, K, A, F)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":70,"code_v1_loc":64,"code_v0_num_chars":1739,"code_v1_num_chars":1595,"code_v0_no_empty_lines":"#!\/usr\/bin\/env python3\nimport sys\n\nINF = float(\"inf\")\nfrom bisect import bisect_left\n\n\ndef solve(N: int, K: int, A: \"List[int]\", F: \"List[int]\"):\n    A.sort()\n    F.sort(reverse=True)\n    h = []\n    for a, f in zip(A, F):\n        h.append((a * f, a, f))\n    h.sort()\n    maxtime = h[-1][0]\n\n    def isOK(y):\n        i = bisect_left(h, (y + 1, -1, -1))\n        counter = 0\n        # print(h[i:])\n        for p, a, f in h[i:]:\n            counter += a - y \/\/ f\n        return counter <= K\n\n    def binary_search(x):\n        ng = -1\n        ok = len(x)\n        while abs(ok - ng) > 1:\n            mid = (ok + ng) \/\/ 2\n            # print(\"mid: {}, in ({}, {})\".format(mid, ng, ok))\n            if isOK(mid):\n                ok = mid\n            else:\n                ng = mid\n        return ng, ok\n\n    ng, ok = binary_search(list(range(maxtime)))\n    print(ok)\n    # while k > 0:\n    #     p1, a1, f1 = heapq.heappop(h)\n    #     p2, a2, f2 = heapq.heappop(h)\n    #     p1, p2 = -p1, -p2\n    #     sub = min(a1 - math.ceil((p2\/f1)-1), k)\n    #     a1 -= sub\n    #     k -= sub\n    #     heapq.heappush(h, (-a1*f1, a1, f1))\n    #     heapq.heappush(h, (-a2*f2, a2, f2))\n    # # print(h)\n    # p, a, f = heapq.heappop(h)\n    # print(-p)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    K = int(next(tokens))  # type: int\n    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    F = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    solve(N, K, A, F)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"#!\/usr\/bin\/env python3\nimport sys\n\nINF = float(\"inf\")\nimport numpy as np\n\n\ndef solve(N: int, K: int, A: \"List[int]\", F: \"List[int]\"):\n    A.sort()\n    F.sort(reverse=True)\n    A = np.asarray(A, dtype=np.int)\n    F = np.asarray(F, dtype=np.int)\n    Asum = A.sum()\n\n    def isOK(y):\n        return Asum - np.minimum(A, y \/\/ F).sum() <= K\n\n    def binary_search(x):\n        ng = -1\n        ok = len(x)\n        while abs(ok - ng) > 1:\n            mid = (ok + ng) \/\/ 2\n            # print(\"mid: {}, in ({}, {})\".format(mid, ng, ok))\n            if isOK(mid):\n                ok = mid\n            else:\n                ng = mid\n        return ng, ok\n\n    ng, ok = binary_search(list(range(A.max() * F.max())))\n    print(ok)\n    # while k > 0:\n    #     p1, a1, f1 = heapq.heappop(h)\n    #     p2, a2, f2 = heapq.heappop(h)\n    #     p1, p2 = -p1, -p2\n    #     sub = min(a1 - math.ceil((p2\/f1)-1), k)\n    #     a1 -= sub\n    #     k -= sub\n    #     heapq.heappush(h, (-a1*f1, a1, f1))\n    #     heapq.heappush(h, (-a2*f2, a2, f2))\n    # # print(h)\n    # p, a, f = heapq.heappop(h)\n    # print(-p)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    K = int(next(tokens))  # type: int\n    A = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    F = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    solve(N, K, A, F)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":8.5714285714,"diff":["-from bisect import bisect_left","+import numpy as np","-    h = []","-    for a, f in zip(A, F):","-        h.append((a * f, a, f))","-    h.sort()","-    maxtime = h[-1][0]","+    A = np.asarray(A, dtype=np.int)","+    F = np.asarray(F, dtype=np.int)","+    Asum = A.sum()","-        i = bisect_left(h, (y + 1, -1, -1))","-        counter = 0","-        # print(h[i:])","-        for p, a, f in h[i:]:","-            counter += a - y \/\/ f","-        return counter <= K","+        return Asum - np.minimum(A, y \/\/ F).sum() <= K","-    ng, ok = binary_search(list(range(maxtime)))","+    ng, ok = binary_search(list(range(A.max() * F.max())))"],"diff_only_import_comment":false,"measured_runtime_v0":0.1431037025,"measured_runtime_v1":0.0063273711,"runtime_lift":22.616612744,"key":["s930888083","s224851007"]}
{"user_id":"u863442865","problem_id":"p03575","language":"python","submission_id_v0":"s261596847","submission_id_v1":"s475565358","cpu_time_v0":36,"cpu_time_v1":25,"memory_v0":4076,"memory_v1":3316,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":30.56,"input":"'''\n\n\u7121\u5411\u30b0\u30e9\u30d5\u306e\u6a4b\u306e\u6570\u3092\u8abf\u3079\u308b\n\n\u30eb\u30fc\u30d7\u7121\u3057\/2\u91cd\u8fba\u7121\u3057\n\n'''\n\n\n\ndef main():\n\n    import sys\n\n    #input = sys.stdin.readline\n\n    sys.setrecursionlimit(10000000)\n\n    from collections import Counter, deque\n\n    #from collections import defaultdict\n\n    from itertools import combinations\n\n    #from itertools import accumulate, product, permutations\n\n    from math import floor, ceil\n\n\n\n    #mod = 1000000007\n\n\n\n    node,m =list(map(int, input().split()))\n\n    edge = [list(map(int, input().split())) for _ in range(m)]\n\n    res = 0\n\n\n\n    def dfs(num):\n\n        flag[num-1] = 1\n\n        for x, y in edge:\n\n            if x==num:\n\n                if not flag[y-1]:\n\n                    dfs(y)\n\n            if y==num:\n\n                if not flag[x-1]:\n\n                    dfs(x)\n\n    \n\n    for i in range(m):\n\n        bridge = edge.pop(i)\n\n        flag = [0]*node\n\n        s = edge[0][0]\n\n        dfs(s)\n\n        if not all(flag):\n\n            res += 1\n\n        edge.insert(i, bridge)\n\n    print(res)\n\n\n\nif __name__ == '__main__':\n\n    main()","target":"'''\n\nhttps:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_c?lang=ja\n\n\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3067\u3082\u89e3\u3051\u308b\n\n'''\n\ndef main():\n\n    import sys\n\n    #input = sys.stdin.readline\n\n    sys.setrecursionlimit(10000000)\n\n    from collections import Counter, deque\n\n    #from collections import defaultdict\n\n    from itertools import combinations, permutations\n\n    #from itertools import accumulate, product\n\n    from bisect import bisect_left,bisect_right\n\n    from math import floor, ceil\n\n    #from operator import itemgetter\n\n\n\n    #mod = 1000000007\n\n\n\n    class UnionFind():\n\n        #n\u500b\u306e\u8981\u7d20\u3092\u756a\u53f70~n-1\u3067\u7ba1\u7406\u3059\u308b\n\n        #parents:\u8981\u7d20\u306e\u89aa(1\u3064\u4e0a), \u8981\u7d20\u304c\u6839\u306e\u5834\u5408\u30b5\u30a4\u30ba\u3092\u8868\u3059\n\n        def __init__(self, n):\n\n            self.n = n\n\n            self.parents = [-1] * n\n\n    \n\n        #\u8981\u7d20x\u306e\u6839\u3092\u8fd4\u3059, \u305d\u306e\u904e\u7a0b\u3067\u7d4c\u8def\u5727\u7e2e\u3082\u884c\u3046\n\n        def find(self, x):\n\n            if self.parents[x] < 0:\n\n                return x\n\n            else:\n\n                self.parents[x] = self.find(self.parents[x])\n\n                return self.parents[x]\n\n    \n\n        def union(self, x, y):\n\n            x = self.find(x)\n\n            y = self.find(y)\n\n            if x == y:\n\n                return\n\n            #\u305d\u308c\u305e\u308c\u306esize\u3067\u6bd4\u3079\u308b\n\n            if self.parents[x] > self.parents[y]:\n\n                x, y = y, x\n\n            self.parents[x] += self.parents[y]\n\n            self.parents[y] = x #\u6839\u3092\u304f\u3063\u3064\u3051\u308b(\u7247\u65b9\u3092\u89aa\u306b\u3059\u308b)\n\n    \n\n        #x\u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u306esize\n\n        def size(self, x):\n\n            return -self.parents[self.find(x)]\n\n    \n\n        #x\u3068y\u304c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u304b\u3069\u3046\u304b\n\n        def same(self, x, y):\n\n            return self.find(x) == self.find(y)\n\n    \n\n        #x\u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u306e\u8981\u7d20\u5168\u3066\u3092\u8fd4\u3059\n\n        def members(self, x):\n\n            root = self.find(x)\n\n            return [i for i in range(self.n) if self.find(i) == root]\n\n    \n\n        #\u5168\u3066\u306e\u6839\u306e\u8981\u7d20\u3092\u8fd4\u3059\n\n        def roots(self):\n\n            return [i for i, x in enumerate(self.parents) if x < 0]\n\n    \n\n        #\u5404\u30b0\u30eb\u30fc\u30d7\u306e\u8981\u7d20\u3092\u8f9e\u66f8\u3067\u8fd4\u3059\n\n        def all_group_members(self):\n\n            return {r: self.members(r) for r in self.roots()}\n\n    \n\n        #print(uf)\n\n        def __str__(self):\n\n            return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\n    n,m = list(map(int, input().split()))\n\n    edge = [list(map(int, input().split())) for _ in range(m)]\n\n    res = 0\n\n    for i in range(m):\n\n        uf = UnionFind(n)\n\n        for j in range(m):\n\n            if i==j:\n\n                continue\n\n            a,b = edge[j]\n\n            uf.union(a-1,b-1)\n\n        if uf.size(0)!=n:\n\n            res += 1\n\n    print(res)\n\n\n\nif __name__ == '__main__':\n\n    main()","code_v0_loc":43,"code_v1_loc":84,"code_v0_num_chars":1013,"code_v1_num_chars":2498,"code_v0_no_empty_lines":"\"\"\"\n\u7121\u5411\u30b0\u30e9\u30d5\u306e\u6a4b\u306e\u6570\u3092\u8abf\u3079\u308b\n\u30eb\u30fc\u30d7\u7121\u3057\/2\u91cd\u8fba\u7121\u3057\n\"\"\"\n\n\ndef main():\n    import sys\n\n    # input = sys.stdin.readline\n    sys.setrecursionlimit(10000000)\n    from collections import Counter, deque\n\n    # from collections import defaultdict\n    from itertools import combinations\n\n    # from itertools import accumulate, product, permutations\n    from math import floor, ceil\n\n    # mod = 1000000007\n    node, m = list(map(int, input().split()))\n    edge = [list(map(int, input().split())) for _ in range(m)]\n    res = 0\n\n    def dfs(num):\n        flag[num - 1] = 1\n        for x, y in edge:\n            if x == num:\n                if not flag[y - 1]:\n                    dfs(y)\n            if y == num:\n                if not flag[x - 1]:\n                    dfs(x)\n\n    for i in range(m):\n        bridge = edge.pop(i)\n        flag = [0] * node\n        s = edge[0][0]\n        dfs(s)\n        if not all(flag):\n            res += 1\n        edge.insert(i, bridge)\n    print(res)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"\"\"\"\nhttps:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_c?lang=ja\n\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3067\u3082\u89e3\u3051\u308b\n\"\"\"\n\n\ndef main():\n    import sys\n\n    # input = sys.stdin.readline\n    sys.setrecursionlimit(10000000)\n    from collections import Counter, deque\n\n    # from collections import defaultdict\n    from itertools import combinations, permutations\n\n    # from itertools import accumulate, product\n    from bisect import bisect_left, bisect_right\n    from math import floor, ceil\n\n    # from operator import itemgetter\n    # mod = 1000000007\n    class UnionFind:\n        # n\u500b\u306e\u8981\u7d20\u3092\u756a\u53f70~n-1\u3067\u7ba1\u7406\u3059\u308b\n        # parents:\u8981\u7d20\u306e\u89aa(1\u3064\u4e0a), \u8981\u7d20\u304c\u6839\u306e\u5834\u5408\u30b5\u30a4\u30ba\u3092\u8868\u3059\n        def __init__(self, n):\n            self.n = n\n            self.parents = [-1] * n\n\n        # \u8981\u7d20x\u306e\u6839\u3092\u8fd4\u3059, \u305d\u306e\u904e\u7a0b\u3067\u7d4c\u8def\u5727\u7e2e\u3082\u884c\u3046\n        def find(self, x):\n            if self.parents[x] < 0:\n                return x\n            else:\n                self.parents[x] = self.find(self.parents[x])\n                return self.parents[x]\n\n        def union(self, x, y):\n            x = self.find(x)\n            y = self.find(y)\n            if x == y:\n                return\n            # \u305d\u308c\u305e\u308c\u306esize\u3067\u6bd4\u3079\u308b\n            if self.parents[x] > self.parents[y]:\n                x, y = y, x\n            self.parents[x] += self.parents[y]\n            self.parents[y] = x  # \u6839\u3092\u304f\u3063\u3064\u3051\u308b(\u7247\u65b9\u3092\u89aa\u306b\u3059\u308b)\n\n        # x\u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u306esize\n        def size(self, x):\n            return -self.parents[self.find(x)]\n\n        # x\u3068y\u304c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u304b\u3069\u3046\u304b\n        def same(self, x, y):\n            return self.find(x) == self.find(y)\n\n        # x\u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u306e\u8981\u7d20\u5168\u3066\u3092\u8fd4\u3059\n        def members(self, x):\n            root = self.find(x)\n            return [i for i in range(self.n) if self.find(i) == root]\n\n        # \u5168\u3066\u306e\u6839\u306e\u8981\u7d20\u3092\u8fd4\u3059\n        def roots(self):\n            return [i for i, x in enumerate(self.parents) if x < 0]\n\n        # \u5404\u30b0\u30eb\u30fc\u30d7\u306e\u8981\u7d20\u3092\u8f9e\u66f8\u3067\u8fd4\u3059\n        def all_group_members(self):\n            return {r: self.members(r) for r in self.roots()}\n\n        # print(uf)\n        def __str__(self):\n            return \"\\n\".join(\"{}: {}\".format(r, self.members(r)) for r in self.roots())\n\n    n, m = list(map(int, input().split()))\n    edge = [list(map(int, input().split())) for _ in range(m)]\n    res = 0\n    for i in range(m):\n        uf = UnionFind(n)\n        for j in range(m):\n            if i == j:\n                continue\n            a, b = edge[j]\n            uf.union(a - 1, b - 1)\n        if uf.size(0) != n:\n            res += 1\n    print(res)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":48.8095238095,"diff":["-\u7121\u5411\u30b0\u30e9\u30d5\u306e\u6a4b\u306e\u6570\u3092\u8abf\u3079\u308b","-\u30eb\u30fc\u30d7\u7121\u3057\/2\u91cd\u8fba\u7121\u3057","+https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_c?lang=ja","+\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3067\u3082\u89e3\u3051\u308b","-    from itertools import combinations","+    from itertools import combinations, permutations","-    # from itertools import accumulate, product, permutations","+    # from itertools import accumulate, product","+    from bisect import bisect_left, bisect_right","+    # from operator import itemgetter","-    node, m = list(map(int, input().split()))","+    class UnionFind:","+        # n\u500b\u306e\u8981\u7d20\u3092\u756a\u53f70~n-1\u3067\u7ba1\u7406\u3059\u308b","+        # parents:\u8981\u7d20\u306e\u89aa(1\u3064\u4e0a), \u8981\u7d20\u304c\u6839\u306e\u5834\u5408\u30b5\u30a4\u30ba\u3092\u8868\u3059","+        def __init__(self, n):","+            self.n = n","+            self.parents = [-1] * n","+","+        # \u8981\u7d20x\u306e\u6839\u3092\u8fd4\u3059, \u305d\u306e\u904e\u7a0b\u3067\u7d4c\u8def\u5727\u7e2e\u3082\u884c\u3046","+        def find(self, x):","+            if self.parents[x] < 0:","+                return x","+            else:","+                self.parents[x] = self.find(self.parents[x])","+                return self.parents[x]","+","+        def union(self, x, y):","+            x = self.find(x)","+            y = self.find(y)","+            if x == y:","+                return","+            # \u305d\u308c\u305e\u308c\u306esize\u3067\u6bd4\u3079\u308b","+            if self.parents[x] > self.parents[y]:","+                x, y = y, x","+            self.parents[x] += self.parents[y]","+            self.parents[y] = x  # \u6839\u3092\u304f\u3063\u3064\u3051\u308b(\u7247\u65b9\u3092\u89aa\u306b\u3059\u308b)","+","+        # x\u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u306esize","+        def size(self, x):","+            return -self.parents[self.find(x)]","+","+        # x\u3068y\u304c\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u304b\u3069\u3046\u304b","+        def same(self, x, y):","+            return self.find(x) == self.find(y)","+","+        # x\u304c\u5c5e\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u306e\u8981\u7d20\u5168\u3066\u3092\u8fd4\u3059","+        def members(self, x):","+            root = self.find(x)","+            return [i for i in range(self.n) if self.find(i) == root]","+","+        # \u5168\u3066\u306e\u6839\u306e\u8981\u7d20\u3092\u8fd4\u3059","+        def roots(self):","+            return [i for i, x in enumerate(self.parents) if x < 0]","+","+        # \u5404\u30b0\u30eb\u30fc\u30d7\u306e\u8981\u7d20\u3092\u8f9e\u66f8\u3067\u8fd4\u3059","+        def all_group_members(self):","+            return {r: self.members(r) for r in self.roots()}","+","+        # print(uf)","+        def __str__(self):","+            return \"\\n\".join(\"{}: {}\".format(r, self.members(r)) for r in self.roots())","+","+    n, m = list(map(int, input().split()))","-","-    def dfs(num):","-        flag[num - 1] = 1","-        for x, y in edge:","-            if x == num:","-                if not flag[y - 1]:","-                    dfs(y)","-            if y == num:","-                if not flag[x - 1]:","-                    dfs(x)","-","-        bridge = edge.pop(i)","-        flag = [0] * node","-        s = edge[0][0]","-        dfs(s)","-        if not all(flag):","+        uf = UnionFind(n)","+        for j in range(m):","+            if i == j:","+                continue","+            a, b = edge[j]","+            uf.union(a - 1, b - 1)","+        if uf.size(0) != n:","-        edge.insert(i, bridge)"],"diff_only_import_comment":false,"measured_runtime_v0":0.1590786695,"measured_runtime_v1":0.0066230161,"runtime_lift":24.0190672119,"key":["s261596847","s475565358"]}
{"user_id":"u077898957","problem_id":"p03796","language":"python","submission_id_v0":"s080864979","submission_id_v1":"s354066004","cpu_time_v0":230,"cpu_time_v1":42,"memory_v0":3980,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":81.74,"input":"import math\n\nn = int(eval(input()))\n\nprint((math.factorial(n)%(10**9+7)))\n","target":"n = int(eval(input()))\n\npw = 1\n\nfor i in range(n):\n\n  pw *= (i+1)\n\n  pw %= 10**9+7\n\nprint(pw)","code_v0_loc":3,"code_v1_loc":6,"code_v0_num_chars":66,"code_v1_num_chars":87,"code_v0_no_empty_lines":"import math\n\nn = int(eval(input()))\nprint((math.factorial(n) % (10**9 + 7)))\n","code_v1_no_empty_lines":"n = int(eval(input()))\npw = 1\nfor i in range(n):\n    pw *= i + 1\n    pw %= 10**9 + 7\nprint(pw)\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-import math","-","-print((math.factorial(n) % (10**9 + 7)))","+pw = 1","+for i in range(n):","+    pw *= i + 1","+    pw %= 10**9 + 7","+print(pw)"],"diff_only_import_comment":false,"measured_runtime_v0":0.9190823469,"measured_runtime_v1":0.4266894727,"runtime_lift":2.1539841167,"key":["s080864979","s354066004"]}
{"user_id":"u391731808","problem_id":"p03634","language":"python","submission_id_v0":"s145761901","submission_id_v1":"s949294302","cpu_time_v0":1740,"cpu_time_v1":1056,"memory_v0":98856,"memory_v1":98636,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":39.31,"input":"import heapq\n\n\n\nN = int(eval(input()))\n\nabc = [list(map(int,input().split())) for _ in range(N-1)]\n\nQ,K = list(map(int,input().split()))\n\nxy = [list(map(int,input().split())) for _ in range(Q)]\n\n\n\nconnect = [[] for _ in range(N)]\n\nINFTY = 10**15\n\nfor a,b,c in abc:\n\n    connect[a-1].append([b-1,c])\n\n    connect[b-1].append([a-1,c])\n\n\n\ncost = [[INFTY,False] for _  in range(N)]\n\ncost[K-1][0] = 0\n\nq = [(0,K-1)]\n\nwhile q:\n\n    _,i = heapq.heappop(q)\n\n    if cost[i][1]:\n\n        continue\n\n    cost[i][1] = True\n\n    ci0 = cost[i][0]\n\n    for j,c in connect[i]:\n\n        if cost[j][1]:\n\n            continue\n\n        tmp_cost = ci0+c\n\n        if tmp_cost < cost[j][0]:\n\n            cost[j][0] = tmp_cost\n\n            heapq.heappush(q,(tmp_cost,j))\n\n\n\nfor x,y in xy:\n\n    print((cost[x-1][0] + cost[y-1][0]))","target":"N = int(eval(input()))\n\nABC = [list(map(int,input().split())) for _ in [0]*(N-1)]\n\nQ,K = list(map(int,input().split()))\n\nXY = [list(map(int,input().split())) for _ in [0]*Q]\n\n\n\nE = [{} for _ in [0]*N]\n\nfor a,b,c in ABC:\n\n    E[a-1][b-1] = c\n\n    E[b-1][a-1] = c\n\n\n\ndef dist_dfs_tree(N,E,start):\n\n    d = [-1]*N\n\n    d[start] = 0\n\n    q = [start]\n\n    while q:\n\n        i = q.pop()\n\n        ci = d[i]\n\n        for j,cj in list(E[i].items()):\n\n            if d[j] !=-1:continue\n\n            d[j] = ci+cj\n\n            q.append(j)\n\n    return d\n\n\n\nd = dist_dfs_tree(N,E,K-1)\n\nfor x,y in XY:\n\n    print((d[x-1]+d[y-1]))","code_v0_loc":32,"code_v1_loc":26,"code_v0_num_chars":797,"code_v1_num_chars":594,"code_v0_no_empty_lines":"import heapq\n\nN = int(eval(input()))\nabc = [list(map(int, input().split())) for _ in range(N - 1)]\nQ, K = list(map(int, input().split()))\nxy = [list(map(int, input().split())) for _ in range(Q)]\nconnect = [[] for _ in range(N)]\nINFTY = 10**15\nfor a, b, c in abc:\n    connect[a - 1].append([b - 1, c])\n    connect[b - 1].append([a - 1, c])\ncost = [[INFTY, False] for _ in range(N)]\ncost[K - 1][0] = 0\nq = [(0, K - 1)]\nwhile q:\n    _, i = heapq.heappop(q)\n    if cost[i][1]:\n        continue\n    cost[i][1] = True\n    ci0 = cost[i][0]\n    for j, c in connect[i]:\n        if cost[j][1]:\n            continue\n        tmp_cost = ci0 + c\n        if tmp_cost < cost[j][0]:\n            cost[j][0] = tmp_cost\n            heapq.heappush(q, (tmp_cost, j))\nfor x, y in xy:\n    print((cost[x - 1][0] + cost[y - 1][0]))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nABC = [list(map(int, input().split())) for _ in [0] * (N - 1)]\nQ, K = list(map(int, input().split()))\nXY = [list(map(int, input().split())) for _ in [0] * Q]\nE = [{} for _ in [0] * N]\nfor a, b, c in ABC:\n    E[a - 1][b - 1] = c\n    E[b - 1][a - 1] = c\n\n\ndef dist_dfs_tree(N, E, start):\n    d = [-1] * N\n    d[start] = 0\n    q = [start]\n    while q:\n        i = q.pop()\n        ci = d[i]\n        for j, cj in list(E[i].items()):\n            if d[j] != -1:\n                continue\n            d[j] = ci + cj\n            q.append(j)\n    return d\n\n\nd = dist_dfs_tree(N, E, K - 1)\nfor x, y in XY:\n    print((d[x - 1] + d[y - 1]))\n","code_same":false,"relative_loc_diff_percent":18.75,"diff":["-import heapq","+N = int(eval(input()))","+ABC = [list(map(int, input().split())) for _ in [0] * (N - 1)]","+Q, K = list(map(int, input().split()))","+XY = [list(map(int, input().split())) for _ in [0] * Q]","+E = [{} for _ in [0] * N]","+for a, b, c in ABC:","+    E[a - 1][b - 1] = c","+    E[b - 1][a - 1] = c","-N = int(eval(input()))","-abc = [list(map(int, input().split())) for _ in range(N - 1)]","-Q, K = list(map(int, input().split()))","-xy = [list(map(int, input().split())) for _ in range(Q)]","-connect = [[] for _ in range(N)]","-INFTY = 10**15","-for a, b, c in abc:","-    connect[a - 1].append([b - 1, c])","-    connect[b - 1].append([a - 1, c])","-cost = [[INFTY, False] for _ in range(N)]","-cost[K - 1][0] = 0","-q = [(0, K - 1)]","-while q:","-    _, i = heapq.heappop(q)","-    if cost[i][1]:","-        continue","-    cost[i][1] = True","-    ci0 = cost[i][0]","-    for j, c in connect[i]:","-        if cost[j][1]:","-            continue","-        tmp_cost = ci0 + c","-        if tmp_cost < cost[j][0]:","-            cost[j][0] = tmp_cost","-            heapq.heappush(q, (tmp_cost, j))","-for x, y in xy:","-    print((cost[x - 1][0] + cost[y - 1][0]))","+","+def dist_dfs_tree(N, E, start):","+    d = [-1] * N","+    d[start] = 0","+    q = [start]","+    while q:","+        i = q.pop()","+        ci = d[i]","+        for j, cj in list(E[i].items()):","+            if d[j] != -1:","+                continue","+            d[j] = ci + cj","+            q.append(j)","+    return d","+","+","+d = dist_dfs_tree(N, E, K - 1)","+for x, y in XY:","+    print((d[x - 1] + d[y - 1]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2932223577,"measured_runtime_v1":0.2194568303,"runtime_lift":1.3361277359,"key":["s145761901","s949294302"]}
{"user_id":"u467041847","problem_id":"p03416","language":"python","submission_id_v0":"s364629573","submission_id_v1":"s490395080","cpu_time_v0":93,"cpu_time_v1":62,"memory_v0":3316,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":33.33,"input":"A,B = list(map(int,input().split()))\n\n\n\n\n\ndef kaibun(n):\n\n\tkey = 0\n\n\tfor i in range(1,n+1):\n\n\t\tif str(i) == str(i)[::-1]:\n\n\t\t\tkey += 1\n\n\treturn key\n\n\n\nprint((kaibun(B)-kaibun(A-1)))","target":"A,B = list(map(int,input().split()))\n\n\n\n\n\ndef kaibun(m, n):\n\n\tkey = 0\n\n\tfor i in range(m,n+1):\n\n\t\tif str(i) == str(i)[::-1]:\n\n\t\t\tkey += 1\n\n\treturn key\n\n\n\nprint((kaibun(A,B)))","code_v0_loc":11,"code_v1_loc":11,"code_v0_num_chars":173,"code_v1_num_chars":166,"code_v0_no_empty_lines":"A, B = list(map(int, input().split()))\n\n\ndef kaibun(n):\n    key = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            key += 1\n    return key\n\n\nprint((kaibun(B) - kaibun(A - 1)))\n","code_v1_no_empty_lines":"A, B = list(map(int, input().split()))\n\n\ndef kaibun(m, n):\n    key = 0\n    for i in range(m, n + 1):\n        if str(i) == str(i)[::-1]:\n            key += 1\n    return key\n\n\nprint((kaibun(A, B)))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-def kaibun(n):","+def kaibun(m, n):","-    for i in range(1, n + 1):","+    for i in range(m, n + 1):","-print((kaibun(B) - kaibun(A - 1)))","+print((kaibun(A, B)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.5900465159,"measured_runtime_v1":0.3264039189,"runtime_lift":1.8077188467,"key":["s364629573","s490395080"]}
{"user_id":"u802963389","problem_id":"p03575","language":"python","submission_id_v0":"s237263897","submission_id_v1":"s723941772","cpu_time_v0":737,"cpu_time_v1":23,"memory_v0":26508,"memory_v1":3436,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":96.88,"input":"from scipy.sparse.csgraph import dijkstra\n\nN, M = list(map(int, input().split()))\n\nedge = [list(map(int, input().split())) for _ in range(M)]\n\n\n\n# \u96a3\u63a5\u884c\u5217\n\ngraph = [[0] * (N + 1) for _ in range(N + 1)]\n\n\n\nfor i, j in edge:\n\n  graph[i][j] = 1\n\n  \n\nans = 0\n\nINF = 10 ** 9\n\nfor a, b in edge:\n\n  # \u8fba\u3092\u53d6\u308a\u9664\u304f-> INF\n\n  graph[a][b] = INF\n\n  dist = dijkstra(graph, indices=a, directed=False) # directed=False -> \u7121\u52b9\u30b0\u30e9\u30d5\u7528\n\n  if dist[b] >= INF:\n\n    ans += 1\n\n  # \u5143\u306b\u623b\u3059 -> 1\n\n  graph[a][b] = 1\n\n\n\nprint(ans)","target":"# C - Bridge\n\n# https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_c\n\n\n\nfrom collections import deque\n\n\n\ndef dfs(n, start, graph):\n\n  visited = [False] * n\n\n  stack = deque()\n\n  stack.append(start)\n\n  visited[start] = True\n\n  while stack:\n\n    q = stack.popleft()\n\n    nxts = graph[q]\n\n    for nxt in nxts:\n\n      if not visited[nxt]:\n\n        visited[nxt] = True\n\n        stack.append(nxt)\n\n  return visited\n\n\n\nn, m = list(map(int, input().split()))\n\nedge = [list(map(int, input().split())) for _ in range(m)]\n\n\n\nans = 0\n\nfor i in range(m):\n\n  graph = [[] for _ in range(n)]\n\n  for itr, (a, b) in enumerate(edge):\n\n    if itr != i:\n\n      graph[a - 1].append(b - 1)\n\n      graph[b - 1].append(a - 1)\n\n\n\n  if not all(dfs(n, 0, graph)):\n\n    ans += 1\n\n\n\nprint(ans)\n","code_v0_loc":22,"code_v1_loc":34,"code_v0_num_chars":482,"code_v1_num_chars":755,"code_v0_no_empty_lines":"from scipy.sparse.csgraph import dijkstra\n\nN, M = list(map(int, input().split()))\nedge = [list(map(int, input().split())) for _ in range(M)]\n# \u96a3\u63a5\u884c\u5217\ngraph = [[0] * (N + 1) for _ in range(N + 1)]\nfor i, j in edge:\n    graph[i][j] = 1\nans = 0\nINF = 10**9\nfor a, b in edge:\n    # \u8fba\u3092\u53d6\u308a\u9664\u304f-> INF\n    graph[a][b] = INF\n    dist = dijkstra(graph, indices=a, directed=False)  # directed=False -> \u7121\u52b9\u30b0\u30e9\u30d5\u7528\n    if dist[b] >= INF:\n        ans += 1\n    # \u5143\u306b\u623b\u3059 -> 1\n    graph[a][b] = 1\nprint(ans)\n","code_v1_no_empty_lines":"# C - Bridge\n# https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_c\nfrom collections import deque\n\n\ndef dfs(n, start, graph):\n    visited = [False] * n\n    stack = deque()\n    stack.append(start)\n    visited[start] = True\n    while stack:\n        q = stack.popleft()\n        nxts = graph[q]\n        for nxt in nxts:\n            if not visited[nxt]:\n                visited[nxt] = True\n                stack.append(nxt)\n    return visited\n\n\nn, m = list(map(int, input().split()))\nedge = [list(map(int, input().split())) for _ in range(m)]\nans = 0\nfor i in range(m):\n    graph = [[] for _ in range(n)]\n    for itr, (a, b) in enumerate(edge):\n        if itr != i:\n            graph[a - 1].append(b - 1)\n            graph[b - 1].append(a - 1)\n    if not all(dfs(n, 0, graph)):\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":35.2941176471,"diff":["-from scipy.sparse.csgraph import dijkstra","+# C - Bridge","+# https:\/\/atcoder.jp\/contests\/abc075\/tasks\/abc075_c","+from collections import deque","-N, M = list(map(int, input().split()))","-edge = [list(map(int, input().split())) for _ in range(M)]","-# \u96a3\u63a5\u884c\u5217","-graph = [[0] * (N + 1) for _ in range(N + 1)]","-for i, j in edge:","-    graph[i][j] = 1","+","+def dfs(n, start, graph):","+    visited = [False] * n","+    stack = deque()","+    stack.append(start)","+    visited[start] = True","+    while stack:","+        q = stack.popleft()","+        nxts = graph[q]","+        for nxt in nxts:","+            if not visited[nxt]:","+                visited[nxt] = True","+                stack.append(nxt)","+    return visited","+","+","+n, m = list(map(int, input().split()))","+edge = [list(map(int, input().split())) for _ in range(m)]","-INF = 10**9","-for a, b in edge:","-    # \u8fba\u3092\u53d6\u308a\u9664\u304f-> INF","-    graph[a][b] = INF","-    dist = dijkstra(graph, indices=a, directed=False)  # directed=False -> \u7121\u52b9\u30b0\u30e9\u30d5\u7528","-    if dist[b] >= INF:","+for i in range(m):","+    graph = [[] for _ in range(n)]","+    for itr, (a, b) in enumerate(edge):","+        if itr != i:","+            graph[a - 1].append(b - 1)","+            graph[b - 1].append(a - 1)","+    if not all(dfs(n, 0, graph)):","-    # \u5143\u306b\u623b\u3059 -> 1","-    graph[a][b] = 1"],"diff_only_import_comment":false,"measured_runtime_v0":2.4053020849,"measured_runtime_v1":0.2385866599,"runtime_lift":10.0814609071,"key":["s237263897","s723941772"]}
{"user_id":"u868628468","problem_id":"p02555","language":"python","submission_id_v0":"s517832809","submission_id_v1":"s490323912","cpu_time_v0":151,"cpu_time_v1":62,"memory_v0":73984,"memory_v1":63380,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":58.94,"input":"from sys import stdin\n\ndef solve():\n\n    s = int(stdin.readline())\n\n    mod = 10**9+7\n\n    if s < 3: return 0\n\n    dp = [0]*(s+1)\n\n    dp[0] = 1\n\n    for i in range(3,s+1):\n\n        for x in range(3,i+1):\n\n            if x in [i-1,i-2]:\n\n                continue\n\n            dp[i] += dp[i-x]\n\n    return dp[s]%mod\n\nprint((solve()))","target":"from sys import stdin\n\ndef solve():\n\n    s = int(stdin.readline())\n\n    mod = 10**9+7\n\n    if s < 3: return 0\n\n    dp = [0]*(s+1)\n\n    dp[0] = 1\n\n    for i in range(3,s+1):\n\n        dp[i] = dp[i-1] + dp[i-3]\n\n    return dp[s]%mod\n\nprint((solve()))","code_v0_loc":14,"code_v1_loc":11,"code_v0_num_chars":330,"code_v1_num_chars":245,"code_v0_no_empty_lines":"from sys import stdin\n\n\ndef solve():\n    s = int(stdin.readline())\n    mod = 10**9 + 7\n    if s < 3:\n        return 0\n    dp = [0] * (s + 1)\n    dp[0] = 1\n    for i in range(3, s + 1):\n        for x in range(3, i + 1):\n            if x in [i - 1, i - 2]:\n                continue\n            dp[i] += dp[i - x]\n    return dp[s] % mod\n\n\nprint((solve()))\n","code_v1_no_empty_lines":"from sys import stdin\n\n\ndef solve():\n    s = int(stdin.readline())\n    mod = 10**9 + 7\n    if s < 3:\n        return 0\n    dp = [0] * (s + 1)\n    dp[0] = 1\n    for i in range(3, s + 1):\n        dp[i] = dp[i - 1] + dp[i - 3]\n    return dp[s] % mod\n\n\nprint((solve()))\n","code_same":false,"relative_loc_diff_percent":21.4285714286,"diff":["-        for x in range(3, i + 1):","-            if x in [i - 1, i - 2]:","-                continue","-            dp[i] += dp[i - x]","+        dp[i] = dp[i - 1] + dp[i - 3]"],"diff_only_import_comment":false,"measured_runtime_v0":0.6190335753,"measured_runtime_v1":0.2015811858,"runtime_lift":3.0708896406,"key":["s517832809","s490323912"]}
{"user_id":"u595289165","problem_id":"p02780","language":"python","submission_id_v0":"s893034804","submission_id_v1":"s639832443","cpu_time_v0":386,"cpu_time_v1":218,"memory_v0":33972,"memory_v1":25060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":43.52,"input":"import numpy as np\n\nn, k = list(map(int, input().split()))\n\np = np.array(list(map(int, input().split())))\n\np += 1\n\nsum_E = np.cumsum(p)\n\nsum_e = np.append([0], sum_E)\n\nans = -1\n\nfor i in range(n-k+1):\n\n    ans = max(ans, sum_e[i+k] - sum_e[i])\n\nprint((ans\/2))","target":"n, k = list(map(int, input().split()))\n\np = list(map(int, input().split()))\n\n\n\ndef calc(x):\n\n    return (x + 1) \/ 2\n\n\n\n\n\nw = 0\n\n\n\nfor i in range(k):\n\n    w += calc(p[i])\n\n\n\nans = w\n\nfor i in range(k, n):\n\n    w += calc(p[i]) - calc(p[i - k])\n\n    ans = max(ans, w)\n\nprint(ans)","code_v0_loc":10,"code_v1_loc":17,"code_v0_num_chars":251,"code_v1_num_chars":270,"code_v0_no_empty_lines":"import numpy as np\n\nn, k = list(map(int, input().split()))\np = np.array(list(map(int, input().split())))\np += 1\nsum_E = np.cumsum(p)\nsum_e = np.append([0], sum_E)\nans = -1\nfor i in range(n - k + 1):\n    ans = max(ans, sum_e[i + k] - sum_e[i])\nprint((ans \/ 2))\n","code_v1_no_empty_lines":"n, k = list(map(int, input().split()))\np = list(map(int, input().split()))\n\n\ndef calc(x):\n    return (x + 1) \/ 2\n\n\nw = 0\nfor i in range(k):\n    w += calc(p[i])\nans = w\nfor i in range(k, n):\n    w += calc(p[i]) - calc(p[i - k])\n    ans = max(ans, w)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":41.1764705882,"diff":["-import numpy as np","+n, k = list(map(int, input().split()))","+p = list(map(int, input().split()))","-n, k = list(map(int, input().split()))","-p = np.array(list(map(int, input().split())))","-p += 1","-sum_E = np.cumsum(p)","-sum_e = np.append([0], sum_E)","-ans = -1","-for i in range(n - k + 1):","-    ans = max(ans, sum_e[i + k] - sum_e[i])","-print((ans \/ 2))","+","+def calc(x):","+    return (x + 1) \/ 2","+","+","+w = 0","+for i in range(k):","+    w += calc(p[i])","+ans = w","+for i in range(k, n):","+    w += calc(p[i]) - calc(p[i - k])","+    ans = max(ans, w)","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.3460690436,"measured_runtime_v1":0.2107389896,"runtime_lift":6.3873754267,"key":["s893034804","s639832443"]}
{"user_id":"u606878291","problem_id":"p03013","language":"python","submission_id_v0":"s651904471","submission_id_v1":"s107901717","cpu_time_v0":460,"cpu_time_v1":177,"memory_v0":21064,"memory_v1":11968,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":61.52,"input":"import numpy as np\n\n\n\n\n\ndef main(n, m, a):\n\n    dp = np.zeros(n + 1, dtype=int)\n\n    dp[0] = 1\n\n    dp[1] = 1 if 1 not in a else 0\n\n\n\n    for i in range(2, len(dp)):\n\n        dp[i] = dp[i - 1] + dp[i - 2] if i not in a else 0\n\n        dp[i] %= 1000000007\n\n\n\n    return dp[-1]\n\n\n\n\n\nif __name__ == '__main__':\n\n    N, M = list(map(int, input().split()))\n\n    A = set()\n\n    for _ in range(M):\n\n        A.add(int(eval(input())))\n\n\n\n    print((main(N, M, A)))\n","target":"import math\n\n\n\nMOD = int(math.pow(10, 9)) + 7\n\nN, M = list(map(int, input().split(' ')))\n\nbroken_steps = {int(eval(input())) for _ in range(M)}\n\n\n\ndp = [0] * (N + 1)\n\n\n\ndp[0] = 1\n\nif 1 not in broken_steps:\n\n    dp[1] = 1\n\n\n\nfor step in range(2, N + 1):\n\n    if step not in broken_steps:\n\n        dp[step] = (dp[step - 1] + dp[step - 2]) % MOD\n\n\n\nprint((dp[N]))\n","code_v0_loc":22,"code_v1_loc":17,"code_v0_num_chars":442,"code_v1_num_chars":347,"code_v0_no_empty_lines":"import numpy as np\n\n\ndef main(n, m, a):\n    dp = np.zeros(n + 1, dtype=int)\n    dp[0] = 1\n    dp[1] = 1 if 1 not in a else 0\n    for i in range(2, len(dp)):\n        dp[i] = dp[i - 1] + dp[i - 2] if i not in a else 0\n        dp[i] %= 1000000007\n    return dp[-1]\n\n\nif __name__ == \"__main__\":\n    N, M = list(map(int, input().split()))\n    A = set()\n    for _ in range(M):\n        A.add(int(eval(input())))\n    print((main(N, M, A)))\n","code_v1_no_empty_lines":"import math\n\nMOD = int(math.pow(10, 9)) + 7\nN, M = list(map(int, input().split(\" \")))\nbroken_steps = {int(eval(input())) for _ in range(M)}\ndp = [0] * (N + 1)\ndp[0] = 1\nif 1 not in broken_steps:\n    dp[1] = 1\nfor step in range(2, N + 1):\n    if step not in broken_steps:\n        dp[step] = (dp[step - 1] + dp[step - 2]) % MOD\nprint((dp[N]))\n","code_same":false,"relative_loc_diff_percent":22.7272727273,"diff":["-import numpy as np","+import math","-","-def main(n, m, a):","-    dp = np.zeros(n + 1, dtype=int)","-    dp[0] = 1","-    dp[1] = 1 if 1 not in a else 0","-    for i in range(2, len(dp)):","-        dp[i] = dp[i - 1] + dp[i - 2] if i not in a else 0","-        dp[i] %= 1000000007","-    return dp[-1]","-","-","-if __name__ == \"__main__\":","-    N, M = list(map(int, input().split()))","-    A = set()","-    for _ in range(M):","-        A.add(int(eval(input())))","-    print((main(N, M, A)))","+MOD = int(math.pow(10, 9)) + 7","+N, M = list(map(int, input().split(\" \")))","+broken_steps = {int(eval(input())) for _ in range(M)}","+dp = [0] * (N + 1)","+dp[0] = 1","+if 1 not in broken_steps:","+    dp[1] = 1","+for step in range(2, N + 1):","+    if step not in broken_steps:","+        dp[step] = (dp[step - 1] + dp[step - 2]) % MOD","+print((dp[N]))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3399993193,"measured_runtime_v1":0.5207966185,"runtime_lift":2.572980069,"key":["s651904471","s107901717"]}
{"user_id":"u813993459","problem_id":"p02690","language":"python","submission_id_v0":"s822177134","submission_id_v1":"s188572308","cpu_time_v0":110,"cpu_time_v1":41,"memory_v0":27216,"memory_v1":9056,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":62.73,"input":"import numpy as np\n\nx = int(eval(input()))\n\ntmp_list=[]\n\nc=0\n\ntmp_2=0\n\nwhile(1):\n\n    tmp_1=c**5\n\n    if (tmp_1 - tmp_2)<=x:\n\n        tmp_list+=[tmp_1]\n\n    else:\n\n        break\n\n    tmp_2=tmp_1\n\n    c+=1\n\n \n\ndef \u305b\u3044\u304c\u308f(target:list,x) -> list:\n\n    for i in np.flipud(target):\n\n        for j in target:\n\n            tmp=i+j\n\n            if tmp==x:\n\n                return [int(i**(1\/5)),int(j**(1\/5))*-1]\n\n            if tmp>x:\n\n                break\n\n    return 0\n\n \n\ndef \u3075\u304c\u308f(target:list,x) -> list:\n\n    for i in np.flipud(target):\n\n        for j in target:\n\n            tmp=i-j\n\n            if tmp==x:\n\n                return [int(i**(1\/5)),int(j**(1\/5))]\n\n            if tmp<x:\n\n                break\n\n    return 0\n\n  \n\nans=\u3075\u304c\u308f(tmp_list,x)\n\nif ans==0:\n\n    ans=\u305b\u3044\u304c\u308f(tmp_list,x)\n\nprint((ans[0],ans[1]))","target":"X = int(eval(input()))\n\nfor a in range(0, 121):\n\n    for b in range(0, 121):\n\n        if X == a**5 - b**5:\n\n            print((a, b))\n\n            exit()\n\n        elif X == a**5 + b**5:\n\n            print((a, -b))\n\n            exit()\n\n        elif X == -a**5 - (10**4 - b)**5:\n\n            print((-a, 10**4 - b))\n\n            exit()","code_v0_loc":38,"code_v1_loc":12,"code_v0_num_chars":795,"code_v1_num_chars":320,"code_v0_no_empty_lines":"import numpy as np\n\nx = int(eval(input()))\ntmp_list = []\nc = 0\ntmp_2 = 0\nwhile 1:\n    tmp_1 = c**5\n    if (tmp_1 - tmp_2) <= x:\n        tmp_list += [tmp_1]\n    else:\n        break\n    tmp_2 = tmp_1\n    c += 1\n\n\ndef \u305b\u3044\u304c\u308f(target: list, x) -> list:\n    for i in np.flipud(target):\n        for j in target:\n            tmp = i + j\n            if tmp == x:\n                return [int(i ** (1 \/ 5)), int(j ** (1 \/ 5)) * -1]\n            if tmp > x:\n                break\n    return 0\n\n\ndef \u3075\u304c\u308f(target: list, x) -> list:\n    for i in np.flipud(target):\n        for j in target:\n            tmp = i - j\n            if tmp == x:\n                return [int(i ** (1 \/ 5)), int(j ** (1 \/ 5))]\n            if tmp < x:\n                break\n    return 0\n\n\nans = \u3075\u304c\u308f(tmp_list, x)\nif ans == 0:\n    ans = \u305b\u3044\u304c\u308f(tmp_list, x)\nprint((ans[0], ans[1]))\n","code_v1_no_empty_lines":"X = int(eval(input()))\nfor a in range(0, 121):\n    for b in range(0, 121):\n        if X == a**5 - b**5:\n            print((a, b))\n            exit()\n        elif X == a**5 + b**5:\n            print((a, -b))\n            exit()\n        elif X == -(a**5) - (10**4 - b) ** 5:\n            print((-a, 10**4 - b))\n            exit()\n","code_same":false,"relative_loc_diff_percent":68.4210526316,"diff":["-import numpy as np","-","-x = int(eval(input()))","-tmp_list = []","-c = 0","-tmp_2 = 0","-while 1:","-    tmp_1 = c**5","-    if (tmp_1 - tmp_2) <= x:","-        tmp_list += [tmp_1]","-    else:","-        break","-    tmp_2 = tmp_1","-    c += 1","-","-","-def \u305b\u3044\u304c\u308f(target: list, x) -> list:","-    for i in np.flipud(target):","-        for j in target:","-            tmp = i + j","-            if tmp == x:","-                return [int(i ** (1 \/ 5)), int(j ** (1 \/ 5)) * -1]","-            if tmp > x:","-                break","-    return 0","-","-","-def \u3075\u304c\u308f(target: list, x) -> list:","-    for i in np.flipud(target):","-        for j in target:","-            tmp = i - j","-            if tmp == x:","-                return [int(i ** (1 \/ 5)), int(j ** (1 \/ 5))]","-            if tmp < x:","-                break","-    return 0","-","-","-ans = \u3075\u304c\u308f(tmp_list, x)","-if ans == 0:","-    ans = \u305b\u3044\u304c\u308f(tmp_list, x)","-print((ans[0], ans[1]))","+X = int(eval(input()))","+for a in range(0, 121):","+    for b in range(0, 121):","+        if X == a**5 - b**5:","+            print((a, b))","+            exit()","+        elif X == a**5 + b**5:","+            print((a, -b))","+            exit()","+        elif X == -(a**5) - (10**4 - b) ** 5:","+            print((-a, 10**4 - b))","+            exit()"],"diff_only_import_comment":false,"measured_runtime_v0":2.0893567204,"measured_runtime_v1":0.3149728358,"runtime_lift":6.6334505171,"key":["s822177134","s188572308"]}
{"user_id":"u172035535","problem_id":"p03038","language":"python","submission_id_v0":"s297180816","submission_id_v1":"s388125708","cpu_time_v0":582,"cpu_time_v1":497,"memory_v0":32968,"memory_v1":32976,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.6,"input":"n,m = list(map(int,input().split()))\n\nA = list(map(int,input().split()))\n\nA.sort()\n\nbc = [list(map(int,input().split())) for _ in range(m)]\n\n\n\nbc.sort(key=lambda x:x[1],reverse=1)\n\n\n\ni = 0#bc\u306e\u6dfb\u3048\u5b57\n\nj = 0#A\u306e\u6dfb\u3048\u5b57\n\nwhile 1:\n\n\tif i >= m or j >= n:\n\n\t\t#print('i\u304bj\u304c\u8d85\u3048\u305f\uff01')\n\n\t\tbreak\n\n\tif bc[i][1] < A[j]:\n\n\t\t#print('A\u3067\u3063\u304b')\n\n\t\tbreak\n\n\tfor k in range(bc[i][0]):\n\n\t\t#print(i,j,k)\n\n\t\tA[j] = bc[i][1]\n\n\t\tj+=1\n\n\t\tif j >= n:\n\n\t\t\t#print('for\u6587\u5185\u3001j\u304c\u8d85\u3048\u305f')\n\n\t\t\tbreak\n\n\t\tif A[j] > bc[i][1]:\n\n\t\t\t#print('for\u6587\u5185\u3001A\u3067\u3063\u304b')\n\n\t\t\tbreak\n\n\ti+=1\n\n# print(A)\n\nprint((sum(A)))","target":"from heapq import heapify,heappop,heappush\n\nn,m = list(map(int,input().split()))\n\nA = list(map(int,input().split()))\n\nheapify(A)\n\nbc = [list(map(int,input().split())) for i in range(m)]\n\nbc.sort(key=lambda x:x[1],reverse=1)\n\n\n\nflag = 0\n\n# print(A)\n\nfor b,c in bc:\n\n\tif flag:\n\n\t\tbreak\n\n\tfor i in range(b):\n\n\t\ta = heappop(A)\n\n\t\tif c <= a:\n\n\t\t\theappush(A,a)\n\n\t\t\tflag = 1\n\n\t\t\tbreak\n\n\t\telse:\n\n\t\t\theappush(A,c)\n\nprint((sum(A)))","code_v0_loc":29,"code_v1_loc":21,"code_v0_num_chars":529,"code_v1_num_chars":413,"code_v0_no_empty_lines":"n, m = list(map(int, input().split()))\nA = list(map(int, input().split()))\nA.sort()\nbc = [list(map(int, input().split())) for _ in range(m)]\nbc.sort(key=lambda x: x[1], reverse=1)\ni = 0  # bc\u306e\u6dfb\u3048\u5b57\nj = 0  # A\u306e\u6dfb\u3048\u5b57\nwhile 1:\n    if i >= m or j >= n:\n        # print('i\u304bj\u304c\u8d85\u3048\u305f\uff01')\n        break\n    if bc[i][1] < A[j]:\n        # print('A\u3067\u3063\u304b')\n        break\n    for k in range(bc[i][0]):\n        # print(i,j,k)\n        A[j] = bc[i][1]\n        j += 1\n        if j >= n:\n            # print('for\u6587\u5185\u3001j\u304c\u8d85\u3048\u305f')\n            break\n        if A[j] > bc[i][1]:\n            # print('for\u6587\u5185\u3001A\u3067\u3063\u304b')\n            break\n    i += 1\n# print(A)\nprint((sum(A)))\n","code_v1_no_empty_lines":"from heapq import heapify, heappop, heappush\n\nn, m = list(map(int, input().split()))\nA = list(map(int, input().split()))\nheapify(A)\nbc = [list(map(int, input().split())) for i in range(m)]\nbc.sort(key=lambda x: x[1], reverse=1)\nflag = 0\n# print(A)\nfor b, c in bc:\n    if flag:\n        break\n    for i in range(b):\n        a = heappop(A)\n        if c <= a:\n            heappush(A, a)\n            flag = 1\n            break\n        else:\n            heappush(A, c)\nprint((sum(A)))\n","code_same":false,"relative_loc_diff_percent":27.5862068966,"diff":["+from heapq import heapify, heappop, heappush","+","-A.sort()","-bc = [list(map(int, input().split())) for _ in range(m)]","+heapify(A)","+bc = [list(map(int, input().split())) for i in range(m)]","-i = 0  # bc\u306e\u6dfb\u3048\u5b57","-j = 0  # A\u306e\u6dfb\u3048\u5b57","-while 1:","-    if i >= m or j >= n:","-        # print('i\u304bj\u304c\u8d85\u3048\u305f\uff01')","+flag = 0","+# print(A)","+for b, c in bc:","+    if flag:","-    if bc[i][1] < A[j]:","-        # print('A\u3067\u3063\u304b')","-        break","-    for k in range(bc[i][0]):","-        # print(i,j,k)","-        A[j] = bc[i][1]","-        j += 1","-        if j >= n:","-            # print('for\u6587\u5185\u3001j\u304c\u8d85\u3048\u305f')","+    for i in range(b):","+        a = heappop(A)","+        if c <= a:","+            heappush(A, a)","+            flag = 1","-        if A[j] > bc[i][1]:","-            # print('for\u6587\u5185\u3001A\u3067\u3063\u304b')","-            break","-    i += 1","-# print(A)","+        else:","+            heappush(A, c)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2036247263,"measured_runtime_v1":0.0063813381,"runtime_lift":31.9094086793,"key":["s297180816","s388125708"]}
{"user_id":"u678167152","problem_id":"p02773","language":"python","submission_id_v0":"s779115559","submission_id_v1":"s953043553","cpu_time_v0":682,"cpu_time_v1":392,"memory_v0":32096,"memory_v1":38716,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":42.52,"input":"N = int(eval(input()))\n\ns_list = {}\n\nfor i in range(N):\n\n  S = eval(input())\n\n  if S in list(s_list.keys()):\n\n    s_list[S] += 1\n\n  else:\n\n    s_list[S] = 0\n\nmax = 0\n\nmaxs = []\n\nfor s,c in list(s_list.items()):\n\n  if c > max:\n\n    maxs = [s]\n\n    max = c\n\n  elif c == max:\n\n    maxs.append(s)\n\nmaxs.sort()\n\nfor m in maxs:\n\n  print(m)","target":"from collections import Counter\n\ndef solve():\n\n  N = int(input())\n\n  S = [input() for _ in range(N)]\n\n  c = Counter(S)\n\n  M = max(c.values())\n\n  ans = []\n\n  for k,v in c.items():\n\n    if v==M:\n\n      ans.append(k)\n\n  ans.sort()\n\n  return ans\n\nprint(*solve(),sep='\\n')\n","code_v0_loc":19,"code_v1_loc":13,"code_v0_num_chars":309,"code_v1_num_chars":267,"code_v0_no_empty_lines":"N = int(eval(input()))\ns_list = {}\nfor i in range(N):\n    S = eval(input())\n    if S in list(s_list.keys()):\n        s_list[S] += 1\n    else:\n        s_list[S] = 0\nmax = 0\nmaxs = []\nfor s, c in list(s_list.items()):\n    if c > max:\n        maxs = [s]\n        max = c\n    elif c == max:\n        maxs.append(s)\nmaxs.sort()\nfor m in maxs:\n    print(m)\n","code_v1_no_empty_lines":"from collections import Counter\n\n\ndef solve():\n    N = int(input())\n    S = [input() for _ in range(N)]\n    c = Counter(S)\n    M = max(c.values())\n    ans = []\n    for k, v in c.items():\n        if v == M:\n            ans.append(k)\n    ans.sort()\n    return ans\n\n\nprint(*solve(), sep=\"\\n\")\n","code_same":false,"relative_loc_diff_percent":31.5789473684,"diff":["-N = int(eval(input()))","-s_list = {}","-for i in range(N):","-    S = eval(input())","-    if S in list(s_list.keys()):","-        s_list[S] += 1","-    else:","-        s_list[S] = 0","-max = 0","-maxs = []","-for s, c in list(s_list.items()):","-    if c > max:","-        maxs = [s]","-        max = c","-    elif c == max:","-        maxs.append(s)","-maxs.sort()","-for m in maxs:","-    print(m)","+from collections import Counter","+","+","+def solve():","+    N = int(input())","+    S = [input() for _ in range(N)]","+    c = Counter(S)","+    M = max(c.values())","+    ans = []","+    for k, v in c.items():","+        if v == M:","+            ans.append(k)","+    ans.sort()","+    return ans","+","+","+print(*solve(), sep=\"\\n\")"],"diff_only_import_comment":false,"measured_runtime_v0":0.1935686147,"measured_runtime_v1":0.0062823365,"runtime_lift":30.8115643329,"key":["s779115559","s953043553"]}
{"user_id":"u164727245","problem_id":"p02874","language":"python","submission_id_v0":"s481111092","submission_id_v1":"s203996294","cpu_time_v0":768,"cpu_time_v1":607,"memory_v0":65432,"memory_v1":56424,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":20.96,"input":"# coding: utf-8\n\nimport numpy as np\n\n\n\n\n\ndef solve(*args: str) -> str:\n\n    n = int(args[0])\n\n    LR = [tuple(map(int, a.split())) for a in args[1:]]\n\n    L, R = list(zip(*LR))\n\n\n\n    ret = 0\n\n\n\n    p, q = np.argmax(L), np.argmin(R)\n\n    lp, rq = L[p], R[q]\n\n\n\n    ret = max(0, 1+rq-lp) + max(0, max(1+r-l for l, r in LR))\n\n\n\n    AB = [[max(0, 1+r-lp), max(0, 1+rq-l)] for l, r in LR]\n\n    AB.sort(key=lambda x: (x[0], -x[1]))\n\n    A, B = list(map(list, list(zip(*AB))))\n\n\n\n    # for i in range(1, n):\n\n    #     ret = max(ret, min(A[i:]) + min(B[:i]))\n\n    b_min = 1+10**9\n\n    for i in range(n-1):\n\n        b_min = min(b_min, B[i])\n\n        ret = max(ret, b_min + A[i+1])\n\n\n\n    return str(ret)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    print((solve(*(open(0).read().splitlines()))))\n","target":"# coding: utf-8\n\n\n\n\n\ndef solve(*args: str) -> str:\n\n    n = int(args[0])\n\n    LR = [tuple(map(int, a.split())) for a in args[1:]]\n\n    L, R = list(zip(*LR))\n\n\n\n    ret = 0\n\n\n\n    # lp, rq = max(L), min(R)\n\n    lp, rq = 0, 1+10**9\n\n    for l, r in LR:\n\n        lp, rq = max(lp, l), min(rq, r)\n\n\n\n    ret = max(0, 1+rq-lp) + max(0, max(1+r-l for l, r in LR))\n\n\n\n    AB = [[max(0, 1+r-lp), max(0, 1+rq-l)] for l, r in LR]\n\n    AB.sort(key=lambda x: (x[0], -x[1]))\n\n    A, B = list(map(list, list(zip(*AB))))\n\n\n\n    # for i in range(1, n):\n\n    #     ret = max(ret, min(A[i:]) + min(B[:i]))\n\n    b_min = 1+10**9\n\n    for i in range(n-1):\n\n        b_min = min(b_min, B[i])\n\n        ret = max(ret, b_min + A[i+1])\n\n\n\n    return str(ret)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    print((solve(*(open(0).read().splitlines()))))\n","code_v0_loc":32,"code_v1_loc":33,"code_v0_num_chars":761,"code_v1_num_chars":795,"code_v0_no_empty_lines":"# coding: utf-8\nimport numpy as np\n\n\ndef solve(*args: str) -> str:\n    n = int(args[0])\n    LR = [tuple(map(int, a.split())) for a in args[1:]]\n    L, R = list(zip(*LR))\n    ret = 0\n    p, q = np.argmax(L), np.argmin(R)\n    lp, rq = L[p], R[q]\n    ret = max(0, 1 + rq - lp) + max(0, max(1 + r - l for l, r in LR))\n    AB = [[max(0, 1 + r - lp), max(0, 1 + rq - l)] for l, r in LR]\n    AB.sort(key=lambda x: (x[0], -x[1]))\n    A, B = list(map(list, list(zip(*AB))))\n    # for i in range(1, n):\n    #     ret = max(ret, min(A[i:]) + min(B[:i]))\n    b_min = 1 + 10**9\n    for i in range(n - 1):\n        b_min = min(b_min, B[i])\n        ret = max(ret, b_min + A[i + 1])\n    return str(ret)\n\n\nif __name__ == \"__main__\":\n    print((solve(*(open(0).read().splitlines()))))\n","code_v1_no_empty_lines":"# coding: utf-8\ndef solve(*args: str) -> str:\n    n = int(args[0])\n    LR = [tuple(map(int, a.split())) for a in args[1:]]\n    L, R = list(zip(*LR))\n    ret = 0\n    # lp, rq = max(L), min(R)\n    lp, rq = 0, 1 + 10**9\n    for l, r in LR:\n        lp, rq = max(lp, l), min(rq, r)\n    ret = max(0, 1 + rq - lp) + max(0, max(1 + r - l for l, r in LR))\n    AB = [[max(0, 1 + r - lp), max(0, 1 + rq - l)] for l, r in LR]\n    AB.sort(key=lambda x: (x[0], -x[1]))\n    A, B = list(map(list, list(zip(*AB))))\n    # for i in range(1, n):\n    #     ret = max(ret, min(A[i:]) + min(B[:i]))\n    b_min = 1 + 10**9\n    for i in range(n - 1):\n        b_min = min(b_min, B[i])\n        ret = max(ret, b_min + A[i + 1])\n    return str(ret)\n\n\nif __name__ == \"__main__\":\n    print((solve(*(open(0).read().splitlines()))))\n","code_same":false,"relative_loc_diff_percent":3.0303030303,"diff":["-import numpy as np","-","-","-    p, q = np.argmax(L), np.argmin(R)","-    lp, rq = L[p], R[q]","+    # lp, rq = max(L), min(R)","+    lp, rq = 0, 1 + 10**9","+    for l, r in LR:","+        lp, rq = max(lp, l), min(rq, r)"],"diff_only_import_comment":false,"measured_runtime_v0":1.336892437,"measured_runtime_v1":0.216103163,"runtime_lift":6.1863621908,"key":["s481111092","s203996294"]}
{"user_id":"u324197506","problem_id":"p03164","language":"python","submission_id_v0":"s068179226","submission_id_v1":"s647331136","cpu_time_v0":1752,"cpu_time_v1":324,"memory_v0":35900,"memory_v1":20624,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":81.51,"input":"import sys\n\ninput = sys.stdin.readline\n\nimport numpy as np\n\n \n\nN,W = list(map(int, input().split()))\n\n \n\ndp = [10 ** 10] * N * (10 ** 4)\n\ndp[0] = 0\n\ndp = np.array(dp)\n\n \n\n \n\nfor i in range(N):\n\n    w,v = list(map(int, input().split()))\n\n    dp[v:] = np.minimum(dp[v:] , dp[:-v] + w)\n\n  \n\nfor i,count in enumerate(dp):\n\n    if dp[i] <= W:\n\n        ans = i\n\nprint(ans)","target":"import sys\n\ninput = sys.stdin.readline\n\nimport numpy as np\n\n \n\nN,W = list(map(int, input().split()))\n\n \n\ndp = [10 ** 10] * (N * (10 ** 3) + 1)\n\ndp[0] = 0\n\ndp = np.array(dp)\n\n \n\n \n\nfor i in range(N):\n\n    w,v = list(map(int, input().split()))\n\n    dp[v:] = np.minimum(dp[v:] , dp[:-v] + w)\n\n  \n\nfor i,count in enumerate(dp):\n\n    if dp[i] <= W:\n\n        ans = i\n\nprint(ans)","code_v0_loc":19,"code_v1_loc":19,"code_v0_num_chars":354,"code_v1_num_chars":360,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nimport numpy as np\n\nN, W = list(map(int, input().split()))\ndp = [10**10] * N * (10**4)\ndp[0] = 0\ndp = np.array(dp)\nfor i in range(N):\n    w, v = list(map(int, input().split()))\n    dp[v:] = np.minimum(dp[v:], dp[:-v] + w)\nfor i, count in enumerate(dp):\n    if dp[i] <= W:\n        ans = i\nprint(ans)\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nimport numpy as np\n\nN, W = list(map(int, input().split()))\ndp = [10**10] * (N * (10**3) + 1)\ndp[0] = 0\ndp = np.array(dp)\nfor i in range(N):\n    w, v = list(map(int, input().split()))\n    dp[v:] = np.minimum(dp[v:], dp[:-v] + w)\nfor i, count in enumerate(dp):\n    if dp[i] <= W:\n        ans = i\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-dp = [10**10] * N * (10**4)","+dp = [10**10] * (N * (10**3) + 1)"],"diff_only_import_comment":false,"measured_runtime_v0":2.3342260687,"measured_runtime_v1":1.6798749726,"runtime_lift":1.3895236889,"key":["s068179226","s647331136"]}
{"user_id":"u018679195","problem_id":"p03796","language":"python","submission_id_v0":"s992615685","submission_id_v1":"s822858934","cpu_time_v0":232,"cpu_time_v1":36,"memory_v0":4024,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":84.48,"input":"import math\n\nx = int(eval(input()))\n\nprint((math.factorial(x) % (10**9 + 7)))","target":"M = 1000000007\n\nn=int(eval(input()))\n\nf = 1\n\nfor i in range(1, n + 1):  \n\n    f = (f * i) % M \n\nprint(f)","code_v0_loc":3,"code_v1_loc":6,"code_v0_num_chars":69,"code_v1_num_chars":98,"code_v0_no_empty_lines":"import math\n\nx = int(eval(input()))\nprint((math.factorial(x) % (10**9 + 7)))\n","code_v1_no_empty_lines":"M = 1000000007\nn = int(eval(input()))\nf = 1\nfor i in range(1, n + 1):\n    f = (f * i) % M\nprint(f)\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-import math","-","-x = int(eval(input()))","-print((math.factorial(x) % (10**9 + 7)))","+M = 1000000007","+n = int(eval(input()))","+f = 1","+for i in range(1, n + 1):","+    f = (f * i) % M","+print(f)"],"diff_only_import_comment":false,"measured_runtime_v0":0.5256081567,"measured_runtime_v1":0.2486211307,"runtime_lift":2.1140928576,"key":["s992615685","s822858934"]}
{"user_id":"u926412290","problem_id":"p02730","language":"python","submission_id_v0":"s449146060","submission_id_v1":"s811980926","cpu_time_v0":19,"cpu_time_v1":17,"memory_v0":3064,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.53,"input":"S = eval(input())\n\nN = len(S)\n\nleft = S[:int(N\/2)]\n\nright = S[int((N+2)\/2):]\n\nS_reversed = \"\".join(reversed(list(S)))\n\nleft_reversed = \"\".join(reversed(list(left)))\n\nright_reversed = \"\".join(reversed(list(right)))\n\n\n\nif S == S_reversed and left == left_reversed and right == right_reversed:\n\n    print(\"Yes\")\n\nelse:\n\n    print(\"No\")","target":"S = eval(input())\n\nN = len(S)\n\nleft = S[:int(N\/2)]\n\nright = S[int((N+2)\/2):]\n\n\n\nif S == S[::-1] and left == left[::-1] and right == right[::-1]:\n\n    print(\"Yes\")\n\nelse:\n\n    print(\"No\")","code_v0_loc":12,"code_v1_loc":9,"code_v0_num_chars":326,"code_v1_num_chars":180,"code_v0_no_empty_lines":"S = eval(input())\nN = len(S)\nleft = S[: int(N \/ 2)]\nright = S[int((N + 2) \/ 2) :]\nS_reversed = \"\".join(reversed(list(S)))\nleft_reversed = \"\".join(reversed(list(left)))\nright_reversed = \"\".join(reversed(list(right)))\nif S == S_reversed and left == left_reversed and right == right_reversed:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","code_v1_no_empty_lines":"S = eval(input())\nN = len(S)\nleft = S[: int(N \/ 2)]\nright = S[int((N + 2) \/ 2) :]\nif S == S[::-1] and left == left[::-1] and right == right[::-1]:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-S_reversed = \"\".join(reversed(list(S)))","-left_reversed = \"\".join(reversed(list(left)))","-right_reversed = \"\".join(reversed(list(right)))","-if S == S_reversed and left == left_reversed and right == right_reversed:","+if S == S[::-1] and left == left[::-1] and right == right[::-1]:"],"diff_only_import_comment":false,"measured_runtime_v0":0.2928721476,"measured_runtime_v1":0.0555575957,"runtime_lift":5.2715050689,"key":["s449146060","s811980926"]}
{"user_id":"u896741788","problem_id":"p03416","language":"python","submission_id_v0":"s606562684","submission_id_v1":"s721402043","cpu_time_v0":284,"cpu_time_v1":62,"memory_v0":3064,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":78.17,"input":"a,b=list(map(int,input().split()))\n\nans=0\n\nfor i in range(b+1)[a:]:\n\n  if len(str(i))%2==0:\n\n    p=list(str(i))[:len(str(i))\/\/2]\n\n    q=list(reversed(list(str(i))[len(str(i))\/\/2:]))\n\n    if p==q:\n\n      ans+=1\n\n  else:\n\n    s=list(str(i))[:len(str(i))\/\/2+1]\n\n    d=list(reversed(list(str(i))[len(str(i))\/\/2:]))\n\n    if s==d:\n\n      ans += 1\n\nprint(ans)","target":"a,s=list(map(int,input().split()))\n\nad=0\n\nfor i in range(a,s+1):\n\n  if str(i)==str(i)[::-1]:ad+=1\n\nprint(ad)","code_v0_loc":14,"code_v1_loc":5,"code_v0_num_chars":346,"code_v1_num_chars":102,"code_v0_no_empty_lines":"a, b = list(map(int, input().split()))\nans = 0\nfor i in range(b + 1)[a:]:\n    if len(str(i)) % 2 == 0:\n        p = list(str(i))[: len(str(i)) \/\/ 2]\n        q = list(reversed(list(str(i))[len(str(i)) \/\/ 2 :]))\n        if p == q:\n            ans += 1\n    else:\n        s = list(str(i))[: len(str(i)) \/\/ 2 + 1]\n        d = list(reversed(list(str(i))[len(str(i)) \/\/ 2 :]))\n        if s == d:\n            ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"a, s = list(map(int, input().split()))\nad = 0\nfor i in range(a, s + 1):\n    if str(i) == str(i)[::-1]:\n        ad += 1\nprint(ad)\n","code_same":false,"relative_loc_diff_percent":64.2857142857,"diff":["-a, b = list(map(int, input().split()))","-ans = 0","-for i in range(b + 1)[a:]:","-    if len(str(i)) % 2 == 0:","-        p = list(str(i))[: len(str(i)) \/\/ 2]","-        q = list(reversed(list(str(i))[len(str(i)) \/\/ 2 :]))","-        if p == q:","-            ans += 1","-    else:","-        s = list(str(i))[: len(str(i)) \/\/ 2 + 1]","-        d = list(reversed(list(str(i))[len(str(i)) \/\/ 2 :]))","-        if s == d:","-            ans += 1","-print(ans)","+a, s = list(map(int, input().split()))","+ad = 0","+for i in range(a, s + 1):","+    if str(i) == str(i)[::-1]:","+        ad += 1","+print(ad)"],"diff_only_import_comment":false,"measured_runtime_v0":0.6921946588,"measured_runtime_v1":0.3831296915,"runtime_lift":1.8066849794,"key":["s606562684","s721402043"]}
{"user_id":"u036104576","problem_id":"p02814","language":"python","submission_id_v0":"s934732087","submission_id_v1":"s059526149","cpu_time_v0":249,"cpu_time_v1":174,"memory_v0":14544,"memory_v1":90620,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":30.12,"input":"import sys\n\nimport itertools\n\n# import numpy as np\n\nimport time\n\nimport math\n\n \n\nsys.setrecursionlimit(10 ** 7)\n\n \n\nfrom collections import defaultdict\n\n \n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n \n\n \n\nfrom functools import reduce\n\n# from math import *\n\nfrom fractions import *\n\nN, M = list(map(int, readline().split()))\n\nA = list(sorted([int(x) \/\/ 2 for x in readline().split()]))\n\nmin_cm = reduce(lambda a, b: (a * b) \/\/ gcd(a, b), A)\n\n \n\n# print(all(map(lambda x: (min_cm \/\/ x) % 2 == 1, A)))\n\nif not all([(min_cm \/\/ x) % 2 == 1 for x in A]):\n\n    print((0))\n\n    exit(0)\n\nif min_cm > M:\n\n    print((0))\n\n    exit(0)\n\nans = (M \/\/ min_cm + 1) \/\/ 2\n\nprint(ans)","target":"import sys\n\nimport itertools\n\n# import numpy as np\n\nimport time\n\nimport math\n\nimport heapq\n\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10 ** 7)\n\n \n\nINF = 10 ** 9 + 7\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\n# map(int, input().split())\n\n\n\nN, M = list(map(int, input().split()))\n\nA = list([int(x) \/\/ 2 for x in input().split()])\n\n\n\ndef f(n):\n\n    res = 0\n\n    while n % 2 == 0:\n\n        n \/\/= 2\n\n        res += 1\n\n    return res\n\n\n\ndef gcd(a, b):\n\n    if b == 0:\n\n        return a\n\n    return gcd(b, a % b)\n\n\n\nx = f(A[0])\n\nfor a in A:\n\n    y = f(a)\n\n    if y != x:\n\n        print((0))\n\n        exit()\n\n\n\nlcm = A[0]\n\nfor i in range(1, N):\n\n    lcm = lcm * A[i] \/\/  gcd(lcm, A[i])\n\n\n\nprint(((M \/\/ lcm + 1) \/\/ 2))","code_v0_loc":31,"code_v1_loc":43,"code_v0_num_chars":729,"code_v1_num_chars":789,"code_v0_no_empty_lines":"import sys\nimport itertools\n\n# import numpy as np\nimport time\nimport math\n\nsys.setrecursionlimit(10**7)\nfrom collections import defaultdict\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nfrom functools import reduce\n\n# from math import *\nfrom fractions import *\n\nN, M = list(map(int, readline().split()))\nA = list(sorted([int(x) \/\/ 2 for x in readline().split()]))\nmin_cm = reduce(lambda a, b: (a * b) \/\/ gcd(a, b), A)\n# print(all(map(lambda x: (min_cm \/\/ x) % 2 == 1, A)))\nif not all([(min_cm \/\/ x) % 2 == 1 for x in A]):\n    print((0))\n    exit(0)\nif min_cm > M:\n    print((0))\n    exit(0)\nans = (M \/\/ min_cm + 1) \/\/ 2\nprint(ans)\n","code_v1_no_empty_lines":"import sys\nimport itertools\n\n# import numpy as np\nimport time\nimport math\nimport heapq\nfrom collections import defaultdict\n\nsys.setrecursionlimit(10**7)\nINF = 10**9 + 7\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n# map(int, input().split())\nN, M = list(map(int, input().split()))\nA = list([int(x) \/\/ 2 for x in input().split()])\n\n\ndef f(n):\n    res = 0\n    while n % 2 == 0:\n        n \/\/= 2\n        res += 1\n    return res\n\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\n\nx = f(A[0])\nfor a in A:\n    y = f(a)\n    if y != x:\n        print((0))\n        exit()\nlcm = A[0]\nfor i in range(1, N):\n    lcm = lcm * A[i] \/\/ gcd(lcm, A[i])\nprint(((M \/\/ lcm + 1) \/\/ 2))\n","code_same":false,"relative_loc_diff_percent":27.9069767442,"diff":["+import heapq","+from collections import defaultdict","-from collections import defaultdict","-","+INF = 10**9 + 7","-from functools import reduce","+# map(int, input().split())","+N, M = list(map(int, input().split()))","+A = list([int(x) \/\/ 2 for x in input().split()])","-# from math import *","-from fractions import *","-N, M = list(map(int, readline().split()))","-A = list(sorted([int(x) \/\/ 2 for x in readline().split()]))","-min_cm = reduce(lambda a, b: (a * b) \/\/ gcd(a, b), A)","-# print(all(map(lambda x: (min_cm \/\/ x) % 2 == 1, A)))","-if not all([(min_cm \/\/ x) % 2 == 1 for x in A]):","-    print((0))","-    exit(0)","-if min_cm > M:","-    print((0))","-    exit(0)","-ans = (M \/\/ min_cm + 1) \/\/ 2","-print(ans)","+def f(n):","+    res = 0","+    while n % 2 == 0:","+        n \/\/= 2","+        res += 1","+    return res","+","+","+def gcd(a, b):","+    if b == 0:","+        return a","+    return gcd(b, a % b)","+","+","+x = f(A[0])","+for a in A:","+    y = f(a)","+    if y != x:","+        print((0))","+        exit()","+lcm = A[0]","+for i in range(1, N):","+    lcm = lcm * A[i] \/\/ gcd(lcm, A[i])","+print(((M \/\/ lcm + 1) \/\/ 2))"],"diff_only_import_comment":false,"measured_runtime_v0":0.414138025,"measured_runtime_v1":0.277947119,"runtime_lift":1.4899885508,"key":["s934732087","s059526149"]}
{"user_id":"u150984829","problem_id":"p00447","language":"python","submission_id_v0":"s670764208","submission_id_v1":"s671843082","cpu_time_v0":80,"cpu_time_v1":50,"memory_v0":6096,"memory_v1":6104,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":37.5,"input":"import operator\n\nfor e in iter(input,'0'):\n\n    target = [[*list(map(int,input().split()))]for _ in[0]*int(e)]\n\n    bx, by = target[0]\n\n    target = {(x - bx, y - by) for x, y in target}\n\n    max_tx = max(list(map(operator.itemgetter(0), target)))\n\n    b = {tuple(map(int,input().split()))for _ in[0]*int(eval(input()))}\n\n    max_sx = max(list(map(operator.itemgetter(0), b)))\n\n    lim_x = max_sx - max_tx\n\n    for x,y in b:\n\n        if x > lim_x:continue\n\n        for u,v in target:\n\n            if (x + u, y + v) not in b:break\n\n        else:\n\n            print((x - bx, y - by))\n\n            break\n","target":"import operator\n\nfor e in iter(input,'0'):\n\n    target = [[*list(map(int,input().split()))]for _ in[0]*int(e)]\n\n    bx, by = min(target)\n\n    target = {(x - bx, y - by) for x, y in target}\n\n    max_tx = max(list(map(operator.itemgetter(0), target)))\n\n    b = {tuple(map(int,input().split()))for _ in[0]*int(eval(input()))}\n\n    max_sx = max(list(map(operator.itemgetter(0), b)))\n\n    lim_x = max_sx - max_tx\n\n    for x,y in b:\n\n        if x > lim_x:continue\n\n        for u,v in target:\n\n            if (x + u, y + v) not in b:break\n\n        else:\n\n            print((x - bx, y - by))\n\n            break\n","code_v0_loc":16,"code_v1_loc":16,"code_v0_num_chars":575,"code_v1_num_chars":577,"code_v0_no_empty_lines":"import operator\n\nfor e in iter(input, \"0\"):\n    target = [[*list(map(int, input().split()))] for _ in [0] * int(e)]\n    bx, by = target[0]\n    target = {(x - bx, y - by) for x, y in target}\n    max_tx = max(list(map(operator.itemgetter(0), target)))\n    b = {tuple(map(int, input().split())) for _ in [0] * int(eval(input()))}\n    max_sx = max(list(map(operator.itemgetter(0), b)))\n    lim_x = max_sx - max_tx\n    for x, y in b:\n        if x > lim_x:\n            continue\n        for u, v in target:\n            if (x + u, y + v) not in b:\n                break\n        else:\n            print((x - bx, y - by))\n            break\n","code_v1_no_empty_lines":"import operator\n\nfor e in iter(input, \"0\"):\n    target = [[*list(map(int, input().split()))] for _ in [0] * int(e)]\n    bx, by = min(target)\n    target = {(x - bx, y - by) for x, y in target}\n    max_tx = max(list(map(operator.itemgetter(0), target)))\n    b = {tuple(map(int, input().split())) for _ in [0] * int(eval(input()))}\n    max_sx = max(list(map(operator.itemgetter(0), b)))\n    lim_x = max_sx - max_tx\n    for x, y in b:\n        if x > lim_x:\n            continue\n        for u, v in target:\n            if (x + u, y + v) not in b:\n                break\n        else:\n            print((x - bx, y - by))\n            break\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    bx, by = target[0]","+    bx, by = min(target)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3549797328,"measured_runtime_v1":0.2644668722,"runtime_lift":1.3422464968,"key":["s670764208","s671843082"]}
{"user_id":"u102461423","problem_id":"p03718","language":"python","submission_id_v0":"s887046149","submission_id_v1":"s961575139","cpu_time_v0":1273,"cpu_time_v1":312,"memory_v0":17580,"memory_v1":4724,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":75.49,"input":"import sys\n\ninput = sys.stdin.readline\n\n\n\nfrom scipy.sparse.csgraph import dijkstra\n\n\n\nH,W = list(map(int,input().split()))\n\n\n\n# start = 0\n\n# rows = 1,2,...,H\n\n# cols = H+1,...,H+W\n\n# goal = H+W+1\n\n\n\nINF = 10 ** 9\n\nstart = 0\n\ngoal = H+W+1\n\nV = H+W+2\n\ngraph = [[0] * V for _ in range(V)]\n\nedges = [] # \u96a3\u63a5\u30ea\u30b9\u30c8\n\nfor i in range(H):\n\n    row = eval(input())\n\n    for j,cell in enumerate(row):\n\n        if cell == 'o':\n\n            graph[1+i][1+H+j] = 1\n\n            graph[1+H+j][1+i] = 1\n\n    s = row.find('S')\n\n    t = row.find('T')\n\n    if s != -1:\n\n        graph[start][1+i] = INF\n\n        graph[start][1+H+s] = INF\n\n    if t != -1:\n\n        graph[1+i][goal] = INF\n\n        graph[1+H+t][goal] = INF\n\n\n\n# \u3042\u3068\u306f max flow \u3092\u6c42\u3081\u308c\u3070\u3088\u3044\n\n\n\ndef max_flow(graph):\n\n    f = 0\n\n    while True:\n\n        if f > 200:\n\n            return -1\n\n        dist,pred = dijkstra(graph, indices = start, unweighted = True, return_predecessors = True)\n\n        if dist[goal] > INF:\n\n            return f\n\n        f += 1\n\n        after = goal\n\n        while after != start:\n\n            before = pred[after]\n\n            graph[before][after] -= 1\n\n            graph[after][before] += 1\n\n            after = before\n\n\n\nanswer = max_flow(graph)\n\nprint(answer)","target":"import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nfrom collections import defaultdict\n\n\n\nH,W = list(map(int,readline().split()))\n\nA = [line.rstrip().decode('utf-8') for line in readlines()]\n\n\n\nsource = 0\n\nsink = H+W+1\n\n\n\ngraph = [defaultdict(int) for _ in range(H+W+2)]\n\n\n\nINF = 10 ** 18\n\nfor h in range(1,H+1):\n\n    for w,ox in enumerate(A[h-1],1):\n\n        if ox == 'x':\n\n            continue\n\n        elif ox == 'o':\n\n            graph[h][H+w] = 1\n\n            graph[H+w][h] = 1\n\n        elif ox == 'S':\n\n            graph[source][h] = INF\n\n            graph[h][source] = INF\n\n            graph[source][H+w] = INF\n\n            graph[H+w][source] = INF\n\n        elif ox == 'T':\n\n            graph[sink][h] = INF\n\n            graph[h][sink] = INF\n\n            graph[sink][H+w] = INF\n\n            graph[H+w][sink] = INF\n\n\n\n\n\nclass Dinic():\n\n    def __init__(self,graph,V,source,sink):\n\n        self.graph = graph\n\n        self.sink = sink\n\n        self.source = source\n\n        self.V = V\n\n#        self.compress()\n\n        self.N = len(V)\n\n    \n\n    def compress(self):\n\n        self.N = len(self.V)\n\n        v_to_i = {x:i for i,x in enumerate(self.V)}\n\n        self.sink = v_to_i[self.sink]\n\n        self.source = v_to_i[self.source]\n\n        g = [dict() for _ in range(self.N)]\n\n        for v,e in list(self.graph.items()):\n\n            vn = v_to_i[v]\n\n            g[vn] = {v_to_i[w]:c for w,c in list(e.items())}\n\n        self.graph = g\n\n        \n\n    def bfs(self):\n\n        level = [0]*self.N\n\n        q = [self.source]\n\n        level[self.source] = 1\n\n        d = 1\n\n        while q:\n\n            if level[self.sink]:\n\n                break\n\n            qq = []\n\n            d += 1\n\n            for v in q:\n\n                for w,cap in list(self.graph[v].items()):\n\n                    if cap == 0:\n\n                        continue\n\n                    if level[w]:\n\n                        continue\n\n                    level[w] = d\n\n                    qq.append(w)\n\n            q = qq\n\n        self.level = level\n\n        \n\n    def dfs(self,v,f):\n\n        if v == self.sink:\n\n            return f\n\n        for w,cap in self.itr[v]:\n\n            if cap == 0 or self.level[w] != self.level[v] + 1:\n\n                continue\n\n            d = self.dfs(w,min(f,cap))\n\n            if d:\n\n                self.graph[v][w] -= d\n\n                self.graph[w][v] += d\n\n                return d\n\n        return 0\n\n    \n\n    def max_flow(self):\n\n        INF = 10**18\n\n        flow = 0\n\n        while True:\n\n            self.bfs()\n\n            if self.level[self.sink] == 0:\n\n                break\n\n            self.itr = [iter(list(e.items())) for e in self.graph]\n\n            while True:\n\n                f = self.dfs(self.source,INF)\n\n                if f == 0:\n\n                    break\n\n                flow += f\n\n        return flow\n\n\n\nanswer = Dinic(graph=graph,V=list(range(H+W+2)),source=0,sink=H+W+1).max_flow()\n\nif answer >= INF:\n\n    answer = -1\n\nprint(answer)","code_v0_loc":53,"code_v1_loc":108,"code_v0_num_chars":1210,"code_v1_num_chars":3016,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nfrom scipy.sparse.csgraph import dijkstra\n\nH, W = list(map(int, input().split()))\n# start = 0\n# rows = 1,2,...,H\n# cols = H+1,...,H+W\n# goal = H+W+1\nINF = 10**9\nstart = 0\ngoal = H + W + 1\nV = H + W + 2\ngraph = [[0] * V for _ in range(V)]\nedges = []  # \u96a3\u63a5\u30ea\u30b9\u30c8\nfor i in range(H):\n    row = eval(input())\n    for j, cell in enumerate(row):\n        if cell == \"o\":\n            graph[1 + i][1 + H + j] = 1\n            graph[1 + H + j][1 + i] = 1\n    s = row.find(\"S\")\n    t = row.find(\"T\")\n    if s != -1:\n        graph[start][1 + i] = INF\n        graph[start][1 + H + s] = INF\n    if t != -1:\n        graph[1 + i][goal] = INF\n        graph[1 + H + t][goal] = INF\n# \u3042\u3068\u306f max flow \u3092\u6c42\u3081\u308c\u3070\u3088\u3044\ndef max_flow(graph):\n    f = 0\n    while True:\n        if f > 200:\n            return -1\n        dist, pred = dijkstra(\n            graph, indices=start, unweighted=True, return_predecessors=True\n        )\n        if dist[goal] > INF:\n            return f\n        f += 1\n        after = goal\n        while after != start:\n            before = pred[after]\n            graph[before][after] -= 1\n            graph[after][before] += 1\n            after = before\n\n\nanswer = max_flow(graph)\nprint(answer)\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nfrom collections import defaultdict\n\nH, W = list(map(int, readline().split()))\nA = [line.rstrip().decode(\"utf-8\") for line in readlines()]\nsource = 0\nsink = H + W + 1\ngraph = [defaultdict(int) for _ in range(H + W + 2)]\nINF = 10**18\nfor h in range(1, H + 1):\n    for w, ox in enumerate(A[h - 1], 1):\n        if ox == \"x\":\n            continue\n        elif ox == \"o\":\n            graph[h][H + w] = 1\n            graph[H + w][h] = 1\n        elif ox == \"S\":\n            graph[source][h] = INF\n            graph[h][source] = INF\n            graph[source][H + w] = INF\n            graph[H + w][source] = INF\n        elif ox == \"T\":\n            graph[sink][h] = INF\n            graph[h][sink] = INF\n            graph[sink][H + w] = INF\n            graph[H + w][sink] = INF\n\n\nclass Dinic:\n    def __init__(self, graph, V, source, sink):\n        self.graph = graph\n        self.sink = sink\n        self.source = source\n        self.V = V\n        #        self.compress()\n        self.N = len(V)\n\n    def compress(self):\n        self.N = len(self.V)\n        v_to_i = {x: i for i, x in enumerate(self.V)}\n        self.sink = v_to_i[self.sink]\n        self.source = v_to_i[self.source]\n        g = [dict() for _ in range(self.N)]\n        for v, e in list(self.graph.items()):\n            vn = v_to_i[v]\n            g[vn] = {v_to_i[w]: c for w, c in list(e.items())}\n        self.graph = g\n\n    def bfs(self):\n        level = [0] * self.N\n        q = [self.source]\n        level[self.source] = 1\n        d = 1\n        while q:\n            if level[self.sink]:\n                break\n            qq = []\n            d += 1\n            for v in q:\n                for w, cap in list(self.graph[v].items()):\n                    if cap == 0:\n                        continue\n                    if level[w]:\n                        continue\n                    level[w] = d\n                    qq.append(w)\n            q = qq\n        self.level = level\n\n    def dfs(self, v, f):\n        if v == self.sink:\n            return f\n        for w, cap in self.itr[v]:\n            if cap == 0 or self.level[w] != self.level[v] + 1:\n                continue\n            d = self.dfs(w, min(f, cap))\n            if d:\n                self.graph[v][w] -= d\n                self.graph[w][v] += d\n                return d\n        return 0\n\n    def max_flow(self):\n        INF = 10**18\n        flow = 0\n        while True:\n            self.bfs()\n            if self.level[self.sink] == 0:\n                break\n            self.itr = [iter(list(e.items())) for e in self.graph]\n            while True:\n                f = self.dfs(self.source, INF)\n                if f == 0:\n                    break\n                flow += f\n        return flow\n\n\nanswer = Dinic(\n    graph=graph, V=list(range(H + W + 2)), source=0, sink=H + W + 1\n).max_flow()\nif answer >= INF:\n    answer = -1\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":50.9259259259,"diff":["-input = sys.stdin.readline","-from scipy.sparse.csgraph import dijkstra","+read = sys.stdin.buffer.read","+readline = sys.stdin.buffer.readline","+readlines = sys.stdin.buffer.readlines","+from collections import defaultdict","-H, W = list(map(int, input().split()))","-# start = 0","-# rows = 1,2,...,H","-# cols = H+1,...,H+W","-# goal = H+W+1","-INF = 10**9","-start = 0","-goal = H + W + 1","-V = H + W + 2","-graph = [[0] * V for _ in range(V)]","-edges = []  # \u96a3\u63a5\u30ea\u30b9\u30c8","-for i in range(H):","-    row = eval(input())","-    for j, cell in enumerate(row):","-        if cell == \"o\":","-            graph[1 + i][1 + H + j] = 1","-            graph[1 + H + j][1 + i] = 1","-    s = row.find(\"S\")","-    t = row.find(\"T\")","-    if s != -1:","-        graph[start][1 + i] = INF","-        graph[start][1 + H + s] = INF","-    if t != -1:","-        graph[1 + i][goal] = INF","-        graph[1 + H + t][goal] = INF","-# \u3042\u3068\u306f max flow \u3092\u6c42\u3081\u308c\u3070\u3088\u3044","-def max_flow(graph):","-    f = 0","-    while True:","-        if f > 200:","-            return -1","-        dist, pred = dijkstra(","-            graph, indices=start, unweighted=True, return_predecessors=True","-        )","-        if dist[goal] > INF:","-            return f","-        f += 1","-        after = goal","-        while after != start:","-            before = pred[after]","-            graph[before][after] -= 1","-            graph[after][before] += 1","-            after = before","+H, W = list(map(int, readline().split()))","+A = [line.rstrip().decode(\"utf-8\") for line in readlines()]","+source = 0","+sink = H + W + 1","+graph = [defaultdict(int) for _ in range(H + W + 2)]","+INF = 10**18","+for h in range(1, H + 1):","+    for w, ox in enumerate(A[h - 1], 1):","+        if ox == \"x\":","+            continue","+        elif ox == \"o\":","+            graph[h][H + w] = 1","+            graph[H + w][h] = 1","+        elif ox == \"S\":","+            graph[source][h] = INF","+            graph[h][source] = INF","+            graph[source][H + w] = INF","+            graph[H + w][source] = INF","+        elif ox == \"T\":","+            graph[sink][h] = INF","+            graph[h][sink] = INF","+            graph[sink][H + w] = INF","+            graph[H + w][sink] = INF","-answer = max_flow(graph)","+class Dinic:","+    def __init__(self, graph, V, source, sink):","+        self.graph = graph","+        self.sink = sink","+        self.source = source","+        self.V = V","+        #        self.compress()","+        self.N = len(V)","+","+    def compress(self):","+        self.N = len(self.V)","+        v_to_i = {x: i for i, x in enumerate(self.V)}","+        self.sink = v_to_i[self.sink]","+        self.source = v_to_i[self.source]","+        g = [dict() for _ in range(self.N)]","+        for v, e in list(self.graph.items()):","+            vn = v_to_i[v]","+            g[vn] = {v_to_i[w]: c for w, c in list(e.items())}","+        self.graph = g","+","+    def bfs(self):","+        level = [0] * self.N","+        q = [self.source]","+        level[self.source] = 1","+        d = 1","+        while q:","+            if level[self.sink]:","+                break","+            qq = []","+            d += 1","+            for v in q:","+                for w, cap in list(self.graph[v].items()):","+                    if cap == 0:","+                        continue","+                    if level[w]:","+                        continue","+                    level[w] = d","+                    qq.append(w)","+            q = qq","+        self.level = level","+","+    def dfs(self, v, f):","+        if v == self.sink:","+            return f","+        for w, cap in self.itr[v]:","+            if cap == 0 or self.level[w] != self.level[v] + 1:","+                continue","+            d = self.dfs(w, min(f, cap))","+            if d:","+                self.graph[v][w] -= d","+                self.graph[w][v] += d","+                return d","+        return 0","+","+    def max_flow(self):","+        INF = 10**18","+        flow = 0","+        while True:","+            self.bfs()","+            if self.level[self.sink] == 0:","+                break","+            self.itr = [iter(list(e.items())) for e in self.graph]","+            while True:","+                f = self.dfs(self.source, INF)","+                if f == 0:","+                    break","+                flow += f","+        return flow","+","+","+answer = Dinic(","+    graph=graph, V=list(range(H + W + 2)), source=0, sink=H + W + 1","+).max_flow()","+if answer >= INF:","+    answer = -1"],"diff_only_import_comment":false,"measured_runtime_v0":2.0169065313,"measured_runtime_v1":0.3407753515,"runtime_lift":5.9185810307,"key":["s887046149","s961575139"]}
{"user_id":"u590871958","problem_id":"p01093","language":"python","submission_id_v0":"s330226420","submission_id_v1":"s459093378","cpu_time_v0":50,"cpu_time_v1":40,"memory_v0":7684,"memory_v1":7704,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":20.0,"input":"while int(eval(input())) > 0:\n\n    s = sorted(map(int, input().split()))\n\n    print((min(abs(a - b) for (a, b) in zip(s, s[1:]))))","target":"while True:\n\n    if int(eval(input())) == 0:\n\n        break\n\n    s = sorted(map(int, input().split()))\n\n    r = min(abs(x - y) for (x, y) in zip(s, s[1:]))\n\n    print(r)","code_v0_loc":3,"code_v1_loc":6,"code_v0_num_chars":122,"code_v1_num_chars":163,"code_v0_no_empty_lines":"while int(eval(input())) > 0:\n    s = sorted(map(int, input().split()))\n    print((min(abs(a - b) for (a, b) in zip(s, s[1:]))))\n","code_v1_no_empty_lines":"while True:\n    if int(eval(input())) == 0:\n        break\n    s = sorted(map(int, input().split()))\n    r = min(abs(x - y) for (x, y) in zip(s, s[1:]))\n    print(r)\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-while int(eval(input())) > 0:","+while True:","+    if int(eval(input())) == 0:","+        break","-    print((min(abs(a - b) for (a, b) in zip(s, s[1:]))))","+    r = min(abs(x - y) for (x, y) in zip(s, s[1:]))","+    print(r)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2760278752,"measured_runtime_v1":0.2140542445,"runtime_lift":1.2895230169,"key":["s330226420","s459093378"]}
{"user_id":"u970197315","problem_id":"p02814","language":"python","submission_id_v0":"s991587805","submission_id_v1":"s856136819","cpu_time_v0":253,"cpu_time_v1":206,"memory_v0":16276,"memory_v1":20232,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":18.58,"input":"# ABC150 D\n\nsi = lambda: eval(input())\n\nni = lambda: int(eval(input()))\n\nnm = lambda: list(map(int, input().split()))\n\nnl = lambda: list(map(int, input().split()))\n\nfrom fractions import gcd\n\nfrom math import ceil\n\ndef lcm(x, y):\n\n    return (x * y) \/\/ gcd(x, y)\n\nn,m=nm()\n\na=nl()\n\nans=0\n\na=[x\/\/2 for x in a] \n\n\n\nlcm_v=a[0]\n\nfor i in range(n):\n\n    lcm_v=lcm(lcm_v,a[i])\n\nok_flg=[(lcm_v\/\/i)%2==1 for i in a]\n\nif all(ok_flg):\n\n    ans=((m\/\/lcm_v)+1)\/\/2\n\nprint(ans)\n\n\n","target":"from math import gcd, ceil\n\n\n\n\n\ndef lcm(a, b):\n\n    return (a*b)\/\/gcd(a, b)\n\n\n\n\n\nn, m = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\n\n\nfor i in range(n):\n\n    a[i] = a[i]\/\/2\n\n\n\nlcm_v = a[0]\n\nfor i in range(1, n):\n\n    lcm_v = lcm(lcm_v, a[i])\n\n\n\nok = True\n\nfor aa in a:\n\n    if (lcm_v\/\/aa) % 2 != 1:\n\n        ok = False\n\n        break\n\nans = 0\n\nif ok:\n\n    ans = ((m\/\/lcm_v)+1)\/\/2\n\nprint(ans)\n","code_v0_loc":22,"code_v1_loc":26,"code_v0_num_chars":448,"code_v1_num_chars":412,"code_v0_no_empty_lines":"# ABC150 D\nsi = lambda: eval(input())\nni = lambda: int(eval(input()))\nnm = lambda: list(map(int, input().split()))\nnl = lambda: list(map(int, input().split()))\nfrom fractions import gcd\nfrom math import ceil\n\n\ndef lcm(x, y):\n    return (x * y) \/\/ gcd(x, y)\n\n\nn, m = nm()\na = nl()\nans = 0\na = [x \/\/ 2 for x in a]\nlcm_v = a[0]\nfor i in range(n):\n    lcm_v = lcm(lcm_v, a[i])\nok_flg = [(lcm_v \/\/ i) % 2 == 1 for i in a]\nif all(ok_flg):\n    ans = ((m \/\/ lcm_v) + 1) \/\/ 2\nprint(ans)\n","code_v1_no_empty_lines":"from math import gcd, ceil\n\n\ndef lcm(a, b):\n    return (a * b) \/\/ gcd(a, b)\n\n\nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))\nfor i in range(n):\n    a[i] = a[i] \/\/ 2\nlcm_v = a[0]\nfor i in range(1, n):\n    lcm_v = lcm(lcm_v, a[i])\nok = True\nfor aa in a:\n    if (lcm_v \/\/ aa) % 2 != 1:\n        ok = False\n        break\nans = 0\nif ok:\n    ans = ((m \/\/ lcm_v) + 1) \/\/ 2\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":15.3846153846,"diff":["-# ABC150 D","-si = lambda: eval(input())","-ni = lambda: int(eval(input()))","-nm = lambda: list(map(int, input().split()))","-nl = lambda: list(map(int, input().split()))","-from fractions import gcd","-from math import ceil","+from math import gcd, ceil","-def lcm(x, y):","-    return (x * y) \/\/ gcd(x, y)","+def lcm(a, b):","+    return (a * b) \/\/ gcd(a, b)","-n, m = nm()","-a = nl()","+n, m = list(map(int, input().split()))","+a = list(map(int, input().split()))","+for i in range(n):","+    a[i] = a[i] \/\/ 2","+lcm_v = a[0]","+for i in range(1, n):","+    lcm_v = lcm(lcm_v, a[i])","+ok = True","+for aa in a:","+    if (lcm_v \/\/ aa) % 2 != 1:","+        ok = False","+        break","-a = [x \/\/ 2 for x in a]","-lcm_v = a[0]","-for i in range(n):","-    lcm_v = lcm(lcm_v, a[i])","-ok_flg = [(lcm_v \/\/ i) % 2 == 1 for i in a]","-if all(ok_flg):","+if ok:"],"diff_only_import_comment":false,"measured_runtime_v0":0.4063324592,"measured_runtime_v1":0.2545481203,"runtime_lift":1.5962893726,"key":["s991587805","s856136819"]}
{"user_id":"u400765446","problem_id":"p02412","language":"python","submission_id_v0":"s921182397","submission_id_v1":"s148735991","cpu_time_v0":320,"cpu_time_v1":20,"memory_v0":5600,"memory_v1":5600,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":93.75,"input":"def main():\n\n\n\n    while True:\n\n        n, x = tuple(map(int, input().split()))\n\n        pattern = 0\n\n\n\n        if n == x == 0:\n\n            break\n\n        else:\n\n            for a in range(1, n+1):\n\n                for b in range(1, a):\n\n                    for c in range(1, b):\n\n                        pattern += 1 if a + b + c == x and a > b > c else 0\n\n            print(pattern)\n\n                            \n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"def divide_two(c, z):\n\n    min_b = z \/\/ 2 + 1\n\n    max_b = min(c-1, z-1)\n\n    return max(max_b-min_b+1, 0)\n\n    \n\n\n\nnum_set = []\n\ncnt = 0\n\nwhile True:\n\n    n, x = list(map(int, input().split()))\n\n    if (n, x) == (0, 0):\n\n        break\n\n    else:\n\n        num_set.append((n, x))\n\n        cnt += 1\n\n\n\nfor i in range(cnt):\n\n    num_count = 0\n\n    (n, x) = num_set[i]\n\n    for c in range(x\/\/3, n+1):\n\n        num_count += divide_two(c, x-c)\n\n    print(num_count)\n","code_v0_loc":18,"code_v1_loc":22,"code_v0_num_chars":458,"code_v1_num_chars":454,"code_v0_no_empty_lines":"def main():\n    while True:\n        n, x = tuple(map(int, input().split()))\n        pattern = 0\n        if n == x == 0:\n            break\n        else:\n            for a in range(1, n + 1):\n                for b in range(1, a):\n                    for c in range(1, b):\n                        pattern += 1 if a + b + c == x and a > b > c else 0\n            print(pattern)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def divide_two(c, z):\n    min_b = z \/\/ 2 + 1\n    max_b = min(c - 1, z - 1)\n    return max(max_b - min_b + 1, 0)\n\n\nnum_set = []\ncnt = 0\nwhile True:\n    n, x = list(map(int, input().split()))\n    if (n, x) == (0, 0):\n        break\n    else:\n        num_set.append((n, x))\n        cnt += 1\nfor i in range(cnt):\n    num_count = 0\n    (n, x) = num_set[i]\n    for c in range(x \/\/ 3, n + 1):\n        num_count += divide_two(c, x - c)\n    print(num_count)\n","code_same":false,"relative_loc_diff_percent":18.1818181818,"diff":["-def main():","-    while True:","-        n, x = tuple(map(int, input().split()))","-        pattern = 0","-        if n == x == 0:","-            break","-        else:","-            for a in range(1, n + 1):","-                for b in range(1, a):","-                    for c in range(1, b):","-                        pattern += 1 if a + b + c == x and a > b > c else 0","-            print(pattern)","+def divide_two(c, z):","+    min_b = z \/\/ 2 + 1","+    max_b = min(c - 1, z - 1)","+    return max(max_b - min_b + 1, 0)","-if __name__ == \"__main__\":","-    main()","+num_set = []","+cnt = 0","+while True:","+    n, x = list(map(int, input().split()))","+    if (n, x) == (0, 0):","+        break","+    else:","+        num_set.append((n, x))","+        cnt += 1","+for i in range(cnt):","+    num_count = 0","+    (n, x) = num_set[i]","+    for c in range(x \/\/ 3, n + 1):","+        num_count += divide_two(c, x - c)","+    print(num_count)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2920441294,"measured_runtime_v1":0.2327923727,"runtime_lift":1.2545261942,"key":["s921182397","s148735991"]}
{"user_id":"u392029857","problem_id":"p03416","language":"python","submission_id_v0":"s263636434","submission_id_v1":"s255168613","cpu_time_v0":110,"cpu_time_v1":20,"memory_v0":2940,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":81.82,"input":"A, B = list(map(int, input().split()))\n\nnumbers = list(range(A, B+1))\n\ncount = 0\n\nfor i in numbers:\n\n    m = str(i)\n\n    rm = ''.join(list(reversed(m)))\n\n    if m == rm:\n\n        count += 1\n\nprint(count)","target":"A, B = list(map(int, input().split()))\n\nx = list(range(1,10))\n\ny = list(range(10))\n\ncount = 0\n\nfor p in x:\n\n    for q in y:\n\n        for r in y:\n\n            sakasama = int(str(p)+str(q)+str(r)+str(q)+str(p))\n\n            if A <= sakasama <= B:\n\n                count += 1\n\nprint(count)","code_v0_loc":9,"code_v1_loc":11,"code_v0_num_chars":191,"code_v1_num_chars":268,"code_v0_no_empty_lines":"A, B = list(map(int, input().split()))\nnumbers = list(range(A, B + 1))\ncount = 0\nfor i in numbers:\n    m = str(i)\n    rm = \"\".join(list(reversed(m)))\n    if m == rm:\n        count += 1\nprint(count)\n","code_v1_no_empty_lines":"A, B = list(map(int, input().split()))\nx = list(range(1, 10))\ny = list(range(10))\ncount = 0\nfor p in x:\n    for q in y:\n        for r in y:\n            sakasama = int(str(p) + str(q) + str(r) + str(q) + str(p))\n            if A <= sakasama <= B:\n                count += 1\nprint(count)\n","code_same":false,"relative_loc_diff_percent":18.1818181818,"diff":["-numbers = list(range(A, B + 1))","+x = list(range(1, 10))","+y = list(range(10))","-for i in numbers:","-    m = str(i)","-    rm = \"\".join(list(reversed(m)))","-    if m == rm:","-        count += 1","+for p in x:","+    for q in y:","+        for r in y:","+            sakasama = int(str(p) + str(q) + str(r) + str(q) + str(p))","+            if A <= sakasama <= B:","+                count += 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.3536295901,"measured_runtime_v1":0.1996227459,"runtime_lift":1.7714894587,"key":["s263636434","s255168613"]}
{"user_id":"u634461820","problem_id":"p02863","language":"python","submission_id_v0":"s061535189","submission_id_v1":"s586045080","cpu_time_v0":1058,"cpu_time_v1":461,"memory_v0":183896,"memory_v1":117976,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":56.43,"input":"import sys\n\nfrom operator import itemgetter\n\nfrom heapq import heapify, heappop, heappush\n\nMAX_INT = int(10e15)\n\nMIN_INT = -MAX_INT\n\nmod = 1000000007\n\nsys.setrecursionlimit(1000000)\n\ndef IL(): return list(map(int,input().split()))\n\ndef SL(): return input().split()\n\ndef I(): return int(sys.stdin.readline())\n\ndef S(): return eval(input())\n\n\n\nN, T = IL()\n\nab = [IL() for i in range(N)]\n\nab.sort(key=itemgetter(0))\n\n#print(ab)\n\n\n\ndp = [[0]*(T+1+3000+1) for _ in range(N+1)]\n\nans = 0\n\nfor i in range(N):\n\n  for j in range(T+1+3000+1):\n\n    time, deli = ab[i]\n\n    if 0 <= j-time < T:\n\n      dp[i + 1][j] = max(dp[i][j], dp[i][j - time] + deli)\n\n    else:\n\n      dp[i + 1][j] = dp[i][j]\n\n    ans = max(ans, dp[i + 1][j])\n\nprint(ans)\n\n\n\n#print(dp)\n","target":"import sys\n\nfrom collections import deque\n\nMAX_INT = int(10e10)\n\nMIN_INT = -MAX_INT\n\nmod = 1000000007\n\nsys.setrecursionlimit(1000000)\n\ndef IL(): return list(map(int,input().split()))\n\ndef SL(): return input().split()\n\ndef I(): return int(sys.stdin.readline())\n\ndef S(): return eval(input())\n\n\n\nN,T = IL()\n\nab = [IL() for i in range(N)]\n\nab.sort()\n\n\n\nans = 0\n\ndp = [[0]*T for i in range(N+1)]\n\nfor i in range(1,N+1):\n\n  a,b = ab[i-1]\n\n  for j in range(T):\n\n    if 0 <= j-a < T:\n\n      dp[i][j] = max(dp[i-1][j], dp[i-1][j-a] + b)\n\n    else:\n\n      dp[i][j] = dp[i-1][j]\n\n  else:\n\n    ans = max(ans, dp[i-1][-1] + b)\n\nprint(ans)","code_v0_loc":30,"code_v1_loc":27,"code_v0_num_chars":737,"code_v1_num_chars":620,"code_v0_no_empty_lines":"import sys\nfrom operator import itemgetter\nfrom heapq import heapify, heappop, heappush\n\nMAX_INT = int(10e15)\nMIN_INT = -MAX_INT\nmod = 1000000007\nsys.setrecursionlimit(1000000)\n\n\ndef IL():\n    return list(map(int, input().split()))\n\n\ndef SL():\n    return input().split()\n\n\ndef I():\n    return int(sys.stdin.readline())\n\n\ndef S():\n    return eval(input())\n\n\nN, T = IL()\nab = [IL() for i in range(N)]\nab.sort(key=itemgetter(0))\n# print(ab)\ndp = [[0] * (T + 1 + 3000 + 1) for _ in range(N + 1)]\nans = 0\nfor i in range(N):\n    for j in range(T + 1 + 3000 + 1):\n        time, deli = ab[i]\n        if 0 <= j - time < T:\n            dp[i + 1][j] = max(dp[i][j], dp[i][j - time] + deli)\n        else:\n            dp[i + 1][j] = dp[i][j]\n        ans = max(ans, dp[i + 1][j])\nprint(ans)\n# print(dp)\n","code_v1_no_empty_lines":"import sys\nfrom collections import deque\n\nMAX_INT = int(10e10)\nMIN_INT = -MAX_INT\nmod = 1000000007\nsys.setrecursionlimit(1000000)\n\n\ndef IL():\n    return list(map(int, input().split()))\n\n\ndef SL():\n    return input().split()\n\n\ndef I():\n    return int(sys.stdin.readline())\n\n\ndef S():\n    return eval(input())\n\n\nN, T = IL()\nab = [IL() for i in range(N)]\nab.sort()\nans = 0\ndp = [[0] * T for i in range(N + 1)]\nfor i in range(1, N + 1):\n    a, b = ab[i - 1]\n    for j in range(T):\n        if 0 <= j - a < T:\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a] + b)\n        else:\n            dp[i][j] = dp[i - 1][j]\n    else:\n        ans = max(ans, dp[i - 1][-1] + b)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":10.0,"diff":["-from operator import itemgetter","-from heapq import heapify, heappop, heappush","+from collections import deque","-MAX_INT = int(10e15)","+MAX_INT = int(10e10)","-ab.sort(key=itemgetter(0))","-# print(ab)","-dp = [[0] * (T + 1 + 3000 + 1) for _ in range(N + 1)]","+ab.sort()","-for i in range(N):","-    for j in range(T + 1 + 3000 + 1):","-        time, deli = ab[i]","-        if 0 <= j - time < T:","-            dp[i + 1][j] = max(dp[i][j], dp[i][j - time] + deli)","+dp = [[0] * T for i in range(N + 1)]","+for i in range(1, N + 1):","+    a, b = ab[i - 1]","+    for j in range(T):","+        if 0 <= j - a < T:","+            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - a] + b)","-            dp[i + 1][j] = dp[i][j]","-        ans = max(ans, dp[i + 1][j])","+            dp[i][j] = dp[i - 1][j]","+    else:","+        ans = max(ans, dp[i - 1][-1] + b)","-# print(dp)"],"diff_only_import_comment":false,"measured_runtime_v0":0.4860900669,"measured_runtime_v1":0.3545958745,"runtime_lift":1.3708283197,"key":["s061535189","s586045080"]}
{"user_id":"u562935282","problem_id":"p02792","language":"python","submission_id_v0":"s535465245","submission_id_v1":"s657178579","cpu_time_v0":830,"cpu_time_v1":146,"memory_v0":3572,"memory_v1":3316,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":82.41,"input":"from functools import lru_cache\n\nimport sys\n\n\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\n\n\n@lru_cache(maxsize=None)\n\ndef check(l, r, n, k=1):\n\n    t = l + '0' * k + r\n\n    e = l + '9' * k + r\n\n\n\n    if int(e) <= n:\n\n        return pow(10, k) + check(l, r, n, k + 1)\n\n\n\n    if int(t) <= n < int(e):\n\n        x = int(str(n)[1:-1])\n\n        if int(str(n)[-1]) < int(r):\n\n            x -= 1\n\n        return x + 1\n\n\n\n    if n < int(t):\n\n        return 0\n\n\n\n\n\ndef main():\n\n    n = int(eval(input()))\n\n\n\n    ret = 0\n\n    for x in range(1, n + 1):\n\n        if x % 10 == 0:\n\n            continue\n\n        s = str(x)\n\n        t = s[-1] + s[0]\n\n        if s[0] == s[-1]:\n\n            ret += 1\n\n        if int(t) <= n:\n\n            ret += 1\n\n        ret += check(s[-1], s[0], n, k=1)\n\n\n\n    print(ret)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"# \u89e3\u8aac\u653e\u9001\n\n\n\ndef main():\n\n    from collections import defaultdict\n\n\n\n    n = int(eval(input()))\n\n\n\n    d = defaultdict(int)\n\n    for x in range(1, n + 1):\n\n        if x % 10 == 0:\n\n            continue\n\n\n\n        tail = x % 10\n\n        head = 0\n\n        while x:\n\n            head = x\n\n            x \/\/= 10\n\n\n\n        d[head, tail] += 1\n\n\n\n    ret = 0\n\n    for (head, tail), cnt in tuple(d.items()):\n\n        # RuntimeError: dictionary changed size during iteration\n\n        # defaultdict\u306e\u672a\u5b9a\u7fa9(?)\u306ekey\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305b\u3044\u3067\u3001RE\u306b\u306a\u308b\n\n        # d.items()\u3092tuple\u5316\u3057\u3066\u56de\u907f\n\n        ret += d[head, tail] * d[tail, head]\n\n        # (head,tail)\u306e\u51fa\u73fe\u6570\u3092\u8f9e\u66f8\u3067\u7ba1\u7406\u3059\u308b\n\n        # (head,tail)*(tail,head)\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u3042\u308b\n\n\n\n    print(ret)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":44,"code_v1_loc":34,"code_v0_num_chars":820,"code_v1_num_chars":726,"code_v0_no_empty_lines":"from functools import lru_cache\nimport sys\n\nsys.setrecursionlimit(10**7)\n\n\n@lru_cache(maxsize=None)\ndef check(l, r, n, k=1):\n    t = l + \"0\" * k + r\n    e = l + \"9\" * k + r\n    if int(e) <= n:\n        return pow(10, k) + check(l, r, n, k + 1)\n    if int(t) <= n < int(e):\n        x = int(str(n)[1:-1])\n        if int(str(n)[-1]) < int(r):\n            x -= 1\n        return x + 1\n    if n < int(t):\n        return 0\n\n\ndef main():\n    n = int(eval(input()))\n    ret = 0\n    for x in range(1, n + 1):\n        if x % 10 == 0:\n            continue\n        s = str(x)\n        t = s[-1] + s[0]\n        if s[0] == s[-1]:\n            ret += 1\n        if int(t) <= n:\n            ret += 1\n        ret += check(s[-1], s[0], n, k=1)\n    print(ret)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"# \u89e3\u8aac\u653e\u9001\ndef main():\n    from collections import defaultdict\n\n    n = int(eval(input()))\n    d = defaultdict(int)\n    for x in range(1, n + 1):\n        if x % 10 == 0:\n            continue\n        tail = x % 10\n        head = 0\n        while x:\n            head = x\n            x \/\/= 10\n        d[head, tail] += 1\n    ret = 0\n    for (head, tail), cnt in tuple(d.items()):\n        # RuntimeError: dictionary changed size during iteration\n        # defaultdict\u306e\u672a\u5b9a\u7fa9(?)\u306ekey\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305b\u3044\u3067\u3001RE\u306b\u306a\u308b\n        # d.items()\u3092tuple\u5316\u3057\u3066\u56de\u907f\n        ret += d[head, tail] * d[tail, head]\n        # (head,tail)\u306e\u51fa\u73fe\u6570\u3092\u8f9e\u66f8\u3067\u7ba1\u7406\u3059\u308b\n        # (head,tail)*(tail,head)\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u3042\u308b\n    print(ret)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":22.7272727273,"diff":["-from functools import lru_cache","-import sys","+# \u89e3\u8aac\u653e\u9001","+def main():","+    from collections import defaultdict","-sys.setrecursionlimit(10**7)","-","-","-@lru_cache(maxsize=None)","-def check(l, r, n, k=1):","-    t = l + \"0\" * k + r","-    e = l + \"9\" * k + r","-    if int(e) <= n:","-        return pow(10, k) + check(l, r, n, k + 1)","-    if int(t) <= n < int(e):","-        x = int(str(n)[1:-1])","-        if int(str(n)[-1]) < int(r):","-            x -= 1","-        return x + 1","-    if n < int(t):","-        return 0","-","-","-def main():","-    ret = 0","+    d = defaultdict(int)","-        s = str(x)","-        t = s[-1] + s[0]","-        if s[0] == s[-1]:","-            ret += 1","-        if int(t) <= n:","-            ret += 1","-        ret += check(s[-1], s[0], n, k=1)","+        tail = x % 10","+        head = 0","+        while x:","+            head = x","+            x \/\/= 10","+        d[head, tail] += 1","+    ret = 0","+    for (head, tail), cnt in tuple(d.items()):","+        # RuntimeError: dictionary changed size during iteration","+        # defaultdict\u306e\u672a\u5b9a\u7fa9(?)\u306ekey\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305b\u3044\u3067\u3001RE\u306b\u306a\u308b","+        # d.items()\u3092tuple\u5316\u3057\u3066\u56de\u907f","+        ret += d[head, tail] * d[tail, head]","+        # (head,tail)\u306e\u51fa\u73fe\u6570\u3092\u8f9e\u66f8\u3067\u7ba1\u7406\u3059\u308b","+        # (head,tail)*(tail,head)\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u3042\u308b"],"diff_only_import_comment":false,"measured_runtime_v0":0.5728231148,"measured_runtime_v1":0.440412906,"runtime_lift":1.3006501557,"key":["s535465245","s657178579"]}
{"user_id":"u699089116","problem_id":"p03325","language":"python","submission_id_v0":"s752541577","submission_id_v1":"s744339126","cpu_time_v0":526,"cpu_time_v1":204,"memory_v0":42860,"memory_v1":42220,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":61.22,"input":"import math\n\nn = int(eval(input()))\n\na = list(map(int, input().split()))\n\n\n\n\n\ndef trial_division(n):\n\n    factor = []\n\n    tmp = int(math.sqrt(n)) + 1\n\n    for _ in range(2,tmp):\n\n        while n % 2 == 0:\n\n            n \/\/= 2\n\n            factor.append(2)\n\n    if not factor:\n\n        return [n]\n\n    else:\n\n        factor.append(n)\n\n        return factor\n\n\n\n\n\ncount = 0\n\nfor i in a:\n\n    temp = trial_division(i)\n\n    count += temp.count(2)\n\n\n\nprint(count)","target":"n = int(eval(input()))\n\na = list(map(int, input().split()))\n\n\n\n\n\ndef trial_division(n):\n\n    #\uff12\u3067\u5272\u3063\u305f\u56e0\u6570\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\n\n    factor = []\n\n    #2\u3067\u5272\u308c\u306a\u304f\u306a\u3063\u305f\u6642\u70b9\u3067\u30b9\u30c8\u30c3\u30d7\n\n    while n % 2 == 0:\n\n        n \/\/= 2    # \uff12\u3067\u5272\u3063\u305f\u5546\u3092\u5207\u308a\u6368\u3066\u3066\u4ee3\u5165\n\n        factor.append(2)\n\n    #n\u304c\u4e00\u5ea6\u3082\uff12\u3067\u5272\u308c\u306a\u304b\u3063\u305f\u3089\u305d\u306e\u307e\u307e\u8fd4\u3059\n\n    if not factor:\n\n        return [n]\n\n    else:\n\n        factor.append(n)\n\n        return factor\n\n\n\n\n\ncount = 0\n\nfor i in a:\n\n    temp = trial_division(i)\n\n    count += temp.count(2)\n\n\n\nprint(count)","code_v0_loc":25,"code_v1_loc":25,"code_v0_num_chars":452,"code_v1_num_chars":458,"code_v0_no_empty_lines":"import math\n\nn = int(eval(input()))\na = list(map(int, input().split()))\n\n\ndef trial_division(n):\n    factor = []\n    tmp = int(math.sqrt(n)) + 1\n    for _ in range(2, tmp):\n        while n % 2 == 0:\n            n \/\/= 2\n            factor.append(2)\n    if not factor:\n        return [n]\n    else:\n        factor.append(n)\n        return factor\n\n\ncount = 0\nfor i in a:\n    temp = trial_division(i)\n    count += temp.count(2)\nprint(count)\n","code_v1_no_empty_lines":"n = int(eval(input()))\na = list(map(int, input().split()))\n\n\ndef trial_division(n):\n    # \uff12\u3067\u5272\u3063\u305f\u56e0\u6570\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\n    factor = []\n    # 2\u3067\u5272\u308c\u306a\u304f\u306a\u3063\u305f\u6642\u70b9\u3067\u30b9\u30c8\u30c3\u30d7\n    while n % 2 == 0:\n        n \/\/= 2  # \uff12\u3067\u5272\u3063\u305f\u5546\u3092\u5207\u308a\u6368\u3066\u3066\u4ee3\u5165\n        factor.append(2)\n    # n\u304c\u4e00\u5ea6\u3082\uff12\u3067\u5272\u308c\u306a\u304b\u3063\u305f\u3089\u305d\u306e\u307e\u307e\u8fd4\u3059\n    if not factor:\n        return [n]\n    else:\n        factor.append(n)\n        return factor\n\n\ncount = 0\nfor i in a:\n    temp = trial_division(i)\n    count += temp.count(2)\nprint(count)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-import math","-","+    # \uff12\u3067\u5272\u3063\u305f\u56e0\u6570\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8","-    tmp = int(math.sqrt(n)) + 1","-    for _ in range(2, tmp):","-        while n % 2 == 0:","-            n \/\/= 2","-            factor.append(2)","+    # 2\u3067\u5272\u308c\u306a\u304f\u306a\u3063\u305f\u6642\u70b9\u3067\u30b9\u30c8\u30c3\u30d7","+    while n % 2 == 0:","+        n \/\/= 2  # \uff12\u3067\u5272\u3063\u305f\u5546\u3092\u5207\u308a\u6368\u3066\u3066\u4ee3\u5165","+        factor.append(2)","+    # n\u304c\u4e00\u5ea6\u3082\uff12\u3067\u5272\u308c\u306a\u304b\u3063\u305f\u3089\u305d\u306e\u307e\u307e\u8fd4\u3059"],"diff_only_import_comment":false,"measured_runtime_v0":0.4331856866,"measured_runtime_v1":0.3346704168,"runtime_lift":1.2943650373,"key":["s752541577","s744339126"]}
{"user_id":"u433532588","problem_id":"p03164","language":"python","submission_id_v0":"s155060992","submission_id_v1":"s347020442","cpu_time_v0":1982,"cpu_time_v1":1050,"memory_v0":320832,"memory_v1":314932,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":47.02,"input":"\n\n\n\n# N\u500b\u306e\u8377\u7269\u3001\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u306e\u5bb9\u91cf\u306fW\n\nN, W = list(map(int, input().split()))\n\nw = [0] * N\n\nv = [0] * N\n\n\n\nfor i in range(N):\n\n    a, b = list(map(int, input().split()))\n\n    w[i] = a\n\n    v[i] = b\n\n\n\n# 1 <= W <= 10^9\u306a\u306e\u3067\u6a2a\u8ef8\u3092W\u306b\u3059\u308b\u3068\u30c6\u30fc\u30d6\u30eb\u304c\u3067\u304b\u3059\u304e\u308b\n\n# \u305d\u306e\u304b\u308f\u308a\u306bV\u306e\u65b9\u3092\u6a2a\u8ef8\u306b\u3059\u308b\n\n\n\n# \u4fa1\u5024\u306e\u7dcf\u5408\u8a08\u306f\u307e\u3060\u4e0d\u660e\u306a\u306e\u3067\u3001\u9069\u5f53\u306b\u3067\u304b\u3044\u5024\u306b\u3057\u3068\u304f\n\n# \u6700\u4e0a\u90e8\u3068\u6700\u5de6\u90e8\u306b0\u304c\u5165\u308b\u306e\u3067\u3001\u305d\u306e\u5206\u3092+1\n\nV = N*1000+1\n\ndp = [ [float('inf') for _ in range(V+1)] for _ in range(N+1) ]\n\n\n\n# \u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\u306e\u3067\u3001\u4e0a\u8a18\u3067inf\u304c\u5165\u3063\u3066\u308b\u306e\u3067\u3001\u521d\u671f\u5024\u306f0\u3092\u3044\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b\n\ndp[0][0] = 0\n\n\n\n# dp[i][sum_v] = \u3053\u308c\u307e\u3067(i-1)\u756a\u76ee\u307e\u3067\u306e\u54c1\u7269\u304b\u3089\u4fa1\u5024\u304csum_v\u4ee5\u4e0a\u306b\u306a\u308b\u3088\u3046\u306b\u9078\u3093\u3060\u3068\u304d\u306e\u3001\u91cd\u3055\u306e\u7dcf\u548c\u306e\u6700\u5c0f\u5024\n\nfor i in range(N):\n\n    for sum_v in range(V):\n\n        if sum_v - v[i] >= 0:\n\n            dp[i+1][sum_v] = min(dp[i+1][sum_v], dp[i][sum_v-v[i]]+w[i])\n\n\n\n        dp[i+1][sum_v] = min(dp[i+1][sum_v], dp[i][sum_v])\n\n\n\n\n\n# \u4e2d\u8eab\u304cW\u306a\u306e\u3067\u3001W\u4ee5\u4e0b\u3067\u3042\u308b\u3046\u3061\u306esum_v\u306e\u6700\u5927\u5024\u3092\u6c42\u3081\u308c\u3070\u3044\u3044\n\nfor sum_v in range(V):\n\n    # \u6700\u7d42\u884c\u3060\u3051\u898b\u308c\u3070\u3044\u3044\u306e\u3067\u3001\u7aef\u304b\u3089sum_v\u306e\u6700\u5927\u5024\u3092\u306a\u3081\u308b\u3060\u3051\n\n    if dp[N][sum_v] <= W:\n\n        ans = sum_v\n\n\n\nprint(ans)","target":"\n\n\n\nimport sys\n\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(2147483647)\n\nINF=float(\"inf\")\n\nMOD=10**9+7\n\n# A = [ int(input()) for _ in range(N) ]\n\n##############################\n\n\n\nN, W = list(map(int, input().split()))\n\nw = []\n\nv = []\n\nfor i in range(N):\n\n    a, b = list(map(int, input().split()))\n\n    w.append(a)\n\n    v.append(b)\n\n\n\nV = sum(v)\n\n\n\ndp = [ [INF for _ in range(V+1)] for _ in range(N+1) ]\n\n\n\ndp[0][0] = 0\n\n\n\nfor i in range(N):\n\n    for j in range(V+1):\n\n        if j - v[i] < 0:\n\n            dp[i+1][j] = dp[i][j]\n\n        else:\n\n            dp[i+1][j] = min(dp[i][j], dp[i][j-v[i]]+w[i])\n\n\n\n#print(dp[N])\n\n\n\nans = 0\n\nfor v in range(V+1):\n\n    if dp[N][v] <= W:\n\n        ans = v\n\n\n\nprint(ans)\n","code_v0_loc":39,"code_v1_loc":39,"code_v0_num_chars":877,"code_v1_num_chars":703,"code_v0_no_empty_lines":"# N\u500b\u306e\u8377\u7269\u3001\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u306e\u5bb9\u91cf\u306fW\nN, W = list(map(int, input().split()))\nw = [0] * N\nv = [0] * N\nfor i in range(N):\n    a, b = list(map(int, input().split()))\n    w[i] = a\n    v[i] = b\n# 1 <= W <= 10^9\u306a\u306e\u3067\u6a2a\u8ef8\u3092W\u306b\u3059\u308b\u3068\u30c6\u30fc\u30d6\u30eb\u304c\u3067\u304b\u3059\u304e\u308b\n# \u305d\u306e\u304b\u308f\u308a\u306bV\u306e\u65b9\u3092\u6a2a\u8ef8\u306b\u3059\u308b\n# \u4fa1\u5024\u306e\u7dcf\u5408\u8a08\u306f\u307e\u3060\u4e0d\u660e\u306a\u306e\u3067\u3001\u9069\u5f53\u306b\u3067\u304b\u3044\u5024\u306b\u3057\u3068\u304f\n# \u6700\u4e0a\u90e8\u3068\u6700\u5de6\u90e8\u306b0\u304c\u5165\u308b\u306e\u3067\u3001\u305d\u306e\u5206\u3092+1\nV = N * 1000 + 1\ndp = [[float(\"inf\") for _ in range(V + 1)] for _ in range(N + 1)]\n# \u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\u306e\u3067\u3001\u4e0a\u8a18\u3067inf\u304c\u5165\u3063\u3066\u308b\u306e\u3067\u3001\u521d\u671f\u5024\u306f0\u3092\u3044\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b\ndp[0][0] = 0\n# dp[i][sum_v] = \u3053\u308c\u307e\u3067(i-1)\u756a\u76ee\u307e\u3067\u306e\u54c1\u7269\u304b\u3089\u4fa1\u5024\u304csum_v\u4ee5\u4e0a\u306b\u306a\u308b\u3088\u3046\u306b\u9078\u3093\u3060\u3068\u304d\u306e\u3001\u91cd\u3055\u306e\u7dcf\u548c\u306e\u6700\u5c0f\u5024\nfor i in range(N):\n    for sum_v in range(V):\n        if sum_v - v[i] >= 0:\n            dp[i + 1][sum_v] = min(dp[i + 1][sum_v], dp[i][sum_v - v[i]] + w[i])\n        dp[i + 1][sum_v] = min(dp[i + 1][sum_v], dp[i][sum_v])\n# \u4e2d\u8eab\u304cW\u306a\u306e\u3067\u3001W\u4ee5\u4e0b\u3067\u3042\u308b\u3046\u3061\u306esum_v\u306e\u6700\u5927\u5024\u3092\u6c42\u3081\u308c\u3070\u3044\u3044\nfor sum_v in range(V):\n    # \u6700\u7d42\u884c\u3060\u3051\u898b\u308c\u3070\u3044\u3044\u306e\u3067\u3001\u7aef\u304b\u3089sum_v\u306e\u6700\u5927\u5024\u3092\u306a\u3081\u308b\u3060\u3051\n    if dp[N][sum_v] <= W:\n        ans = sum_v\nprint(ans)\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nsys.setrecursionlimit(2147483647)\nINF = float(\"inf\")\nMOD = 10**9 + 7\n# A = [ int(input()) for _ in range(N) ]\n##############################\nN, W = list(map(int, input().split()))\nw = []\nv = []\nfor i in range(N):\n    a, b = list(map(int, input().split()))\n    w.append(a)\n    v.append(b)\nV = sum(v)\ndp = [[INF for _ in range(V + 1)] for _ in range(N + 1)]\ndp[0][0] = 0\nfor i in range(N):\n    for j in range(V + 1):\n        if j - v[i] < 0:\n            dp[i + 1][j] = dp[i][j]\n        else:\n            dp[i + 1][j] = min(dp[i][j], dp[i][j - v[i]] + w[i])\n# print(dp[N])\nans = 0\nfor v in range(V + 1):\n    if dp[N][v] <= W:\n        ans = v\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-# N\u500b\u306e\u8377\u7269\u3001\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u306e\u5bb9\u91cf\u306fW","+import sys","+","+input = sys.stdin.readline","+sys.setrecursionlimit(2147483647)","+INF = float(\"inf\")","+MOD = 10**9 + 7","+# A = [ int(input()) for _ in range(N) ]","+##############################","-w = [0] * N","-v = [0] * N","+w = []","+v = []","-    w[i] = a","-    v[i] = b","-# 1 <= W <= 10^9\u306a\u306e\u3067\u6a2a\u8ef8\u3092W\u306b\u3059\u308b\u3068\u30c6\u30fc\u30d6\u30eb\u304c\u3067\u304b\u3059\u304e\u308b","-# \u305d\u306e\u304b\u308f\u308a\u306bV\u306e\u65b9\u3092\u6a2a\u8ef8\u306b\u3059\u308b","-# \u4fa1\u5024\u306e\u7dcf\u5408\u8a08\u306f\u307e\u3060\u4e0d\u660e\u306a\u306e\u3067\u3001\u9069\u5f53\u306b\u3067\u304b\u3044\u5024\u306b\u3057\u3068\u304f","-# \u6700\u4e0a\u90e8\u3068\u6700\u5de6\u90e8\u306b0\u304c\u5165\u308b\u306e\u3067\u3001\u305d\u306e\u5206\u3092+1","-V = N * 1000 + 1","-dp = [[float(\"inf\") for _ in range(V + 1)] for _ in range(N + 1)]","-# \u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\u306e\u3067\u3001\u4e0a\u8a18\u3067inf\u304c\u5165\u3063\u3066\u308b\u306e\u3067\u3001\u521d\u671f\u5024\u306f0\u3092\u3044\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b","+    w.append(a)","+    v.append(b)","+V = sum(v)","+dp = [[INF for _ in range(V + 1)] for _ in range(N + 1)]","-# dp[i][sum_v] = \u3053\u308c\u307e\u3067(i-1)\u756a\u76ee\u307e\u3067\u306e\u54c1\u7269\u304b\u3089\u4fa1\u5024\u304csum_v\u4ee5\u4e0a\u306b\u306a\u308b\u3088\u3046\u306b\u9078\u3093\u3060\u3068\u304d\u306e\u3001\u91cd\u3055\u306e\u7dcf\u548c\u306e\u6700\u5c0f\u5024","-    for sum_v in range(V):","-        if sum_v - v[i] >= 0:","-            dp[i + 1][sum_v] = min(dp[i + 1][sum_v], dp[i][sum_v - v[i]] + w[i])","-        dp[i + 1][sum_v] = min(dp[i + 1][sum_v], dp[i][sum_v])","-# \u4e2d\u8eab\u304cW\u306a\u306e\u3067\u3001W\u4ee5\u4e0b\u3067\u3042\u308b\u3046\u3061\u306esum_v\u306e\u6700\u5927\u5024\u3092\u6c42\u3081\u308c\u3070\u3044\u3044","-for sum_v in range(V):","-    # \u6700\u7d42\u884c\u3060\u3051\u898b\u308c\u3070\u3044\u3044\u306e\u3067\u3001\u7aef\u304b\u3089sum_v\u306e\u6700\u5927\u5024\u3092\u306a\u3081\u308b\u3060\u3051","-    if dp[N][sum_v] <= W:","-        ans = sum_v","+    for j in range(V + 1):","+        if j - v[i] < 0:","+            dp[i + 1][j] = dp[i][j]","+        else:","+            dp[i + 1][j] = min(dp[i][j], dp[i][j - v[i]] + w[i])","+# print(dp[N])","+ans = 0","+for v in range(V + 1):","+    if dp[N][v] <= W:","+        ans = v"],"diff_only_import_comment":false,"measured_runtime_v0":0.3746892574,"measured_runtime_v1":0.2039975414,"runtime_lift":1.8367341819,"key":["s155060992","s347020442"]}
{"user_id":"u968166680","problem_id":"p02599","language":"python","submission_id_v0":"s648865207","submission_id_v1":"s892817156","cpu_time_v0":1665,"cpu_time_v1":1042,"memory_v0":247668,"memory_v1":267648,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":37.42,"input":"import sys\n\n\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = 1 << 60\n\nMOD = 1000000007\n\n\n\n# Reference: https:\/\/www.geeksforgeeks.org\/queries-number-distinct-elements-subarray\/\n\n# Python3 code to find number of\n\n# distinct numbers in a subarray\n\nMAX = 1000001\n\n\n\n# structure to store queries\n\nclass Query:\n\n    def __init__(self, l, r, idx):\n\n        self.l = l\n\n        self.r = r\n\n        self.idx = idx\n\n\n\n\n\n# updating the bit array\n\ndef update(idx, val, bit, n):\n\n    while idx <= n:\n\n        bit[idx] += val\n\n        idx += idx & -idx\n\n\n\n\n\n# querying the bit array\n\ndef query(idx, bit, n):\n\n    summ = 0\n\n    while idx:\n\n        summ += bit[idx]\n\n        idx -= idx & -idx\n\n    return summ\n\n\n\n\n\ndef answeringQueries(arr, n, queries, q):\n\n\n\n    # initialising bit array\n\n    bit = [0] * (n + 1)\n\n\n\n    # holds the rightmost index of\n\n    # any number as numbers of a[i]\n\n    # are less than or equal to 10^6\n\n    last_visit = [-1] * MAX\n\n\n\n    # answer for each query\n\n    ans = [0] * q\n\n\n\n    query_counter = 0\n\n    for i in range(n):\n\n\n\n        # If last visit is not -1 update -1 at the\n\n        # idx equal to last_visit[arr[i]]\n\n        if last_visit[arr[i]] != -1:\n\n            update(last_visit[arr[i]] + 1, -1, bit, n)\n\n\n\n        # Setting last_visit[arr[i]] as i and\n\n        # updating the bit array accordingly\n\n        last_visit[arr[i]] = i\n\n        update(i + 1, 1, bit, n)\n\n\n\n        # If i is equal to r of any query store answer\n\n        # for that query in ans[]\n\n        while query_counter < q and queries[query_counter].r == i:\n\n            ans[queries[query_counter].idx] = query(queries[query_counter].r + 1, bit, n) - query(\n\n                queries[query_counter].l, bit, n\n\n            )\n\n            query_counter += 1\n\n\n\n    # print answer for each query\n\n    for i in range(q):\n\n        print((ans[i]))\n\n\n\n\n\n# This code is contributed by\n\n# sanjeev2552\n\n\n\n\n\ndef main():\n\n    N, Q = list(map(int, readline().split()))\n\n    C = list(map(int, readline().split()))\n\n    (*LR,) = list(map(int, read().split()))\n\n\n\n    queries = [0] * Q\n\n    for i, (l, r) in enumerate(zip(*[iter(LR)] * 2)):\n\n        queries[i] = Query(l - 1, r - 1, i)\n\n\n\n    queries.sort(key=lambda x: x.r)\n\n    answeringQueries(C, N, queries, Q)\n\n\n\n    return\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n\n\n","target":"import sys\n\n\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = 1 << 60\n\nMOD = 1000000007\n\n\n\n\n\nclass BIT:\n\n    def __init__(self, n):\n\n        self.n = n\n\n        self.data = [0] * (n + 1)\n\n\n\n    def add(self, i, x=1):\n\n        i += 1\n\n        while i <= self.n:\n\n            self.data[i] += x\n\n            i += i & -i\n\n\n\n    def get_sum(self, i):\n\n        i += 1\n\n        x = 0\n\n        while i > 0:\n\n            x += self.data[i]\n\n            i -= i & -i\n\n        return x\n\n\n\n    # Return sum for [l, r)\n\n    def get_sum_range(self, l, r):\n\n        return self.get_sum(r - 1) - self.get_sum(l - 1)\n\n\n\n\n\ndef main():\n\n    N, Q = map(int, readline().split())\n\n    C = list(map(int, readline().split()))\n\n    LR = map(int, read().split())\n\n\n\n    prev = [-1] * (N + 1)\n\n    ps = [[] for _ in range(N)]\n\n    for i, c in enumerate(C):\n\n        if prev[c] != -1:\n\n            ps[prev[c]].append(i)\n\n        prev[c] = i\n\n\n\n    qs = [[] for _ in range(N + 1)]\n\n    for i, (l, r) in enumerate(zip(*[iter(LR)] * 2)):\n\n        l -= 1\n\n        r -= 1\n\n        qs[l].append((r, i))\n\n\n\n    ans = [0] * Q\n\n    bit = BIT(N)\n\n\n\n    for l in range(N - 1, -1, -1):\n\n        for r in ps[l]:\n\n            bit.add(r)\n\n        for r, i in qs[l]:\n\n            ans[i] = (r - l + 1) - bit.get_sum(r)\n\n\n\n    print(*ans, sep='\\n')\n\n\n\n    return\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":99,"code_v1_loc":68,"code_v0_num_chars":2366,"code_v1_num_chars":1436,"code_v0_no_empty_lines":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10**9)\nINF = 1 << 60\nMOD = 1000000007\n# Reference: https:\/\/www.geeksforgeeks.org\/queries-number-distinct-elements-subarray\/\n# Python3 code to find number of\n# distinct numbers in a subarray\nMAX = 1000001\n# structure to store queries\nclass Query:\n    def __init__(self, l, r, idx):\n        self.l = l\n        self.r = r\n        self.idx = idx\n\n\n# updating the bit array\ndef update(idx, val, bit, n):\n    while idx <= n:\n        bit[idx] += val\n        idx += idx & -idx\n\n\n# querying the bit array\ndef query(idx, bit, n):\n    summ = 0\n    while idx:\n        summ += bit[idx]\n        idx -= idx & -idx\n    return summ\n\n\ndef answeringQueries(arr, n, queries, q):\n    # initialising bit array\n    bit = [0] * (n + 1)\n    # holds the rightmost index of\n    # any number as numbers of a[i]\n    # are less than or equal to 10^6\n    last_visit = [-1] * MAX\n    # answer for each query\n    ans = [0] * q\n    query_counter = 0\n    for i in range(n):\n        # If last visit is not -1 update -1 at the\n        # idx equal to last_visit[arr[i]]\n        if last_visit[arr[i]] != -1:\n            update(last_visit[arr[i]] + 1, -1, bit, n)\n        # Setting last_visit[arr[i]] as i and\n        # updating the bit array accordingly\n        last_visit[arr[i]] = i\n        update(i + 1, 1, bit, n)\n        # If i is equal to r of any query store answer\n        # for that query in ans[]\n        while query_counter < q and queries[query_counter].r == i:\n            ans[queries[query_counter].idx] = query(\n                queries[query_counter].r + 1, bit, n\n            ) - query(queries[query_counter].l, bit, n)\n            query_counter += 1\n    # print answer for each query\n    for i in range(q):\n        print((ans[i]))\n\n\n# This code is contributed by\n# sanjeev2552\ndef main():\n    N, Q = list(map(int, readline().split()))\n    C = list(map(int, readline().split()))\n    (*LR,) = list(map(int, read().split()))\n    queries = [0] * Q\n    for i, (l, r) in enumerate(zip(*[iter(LR)] * 2)):\n        queries[i] = Query(l - 1, r - 1, i)\n    queries.sort(key=lambda x: x.r)\n    answeringQueries(C, N, queries, Q)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10**9)\nINF = 1 << 60\nMOD = 1000000007\n\n\nclass BIT:\n    def __init__(self, n):\n        self.n = n\n        self.data = [0] * (n + 1)\n\n    def add(self, i, x=1):\n        i += 1\n        while i <= self.n:\n            self.data[i] += x\n            i += i & -i\n\n    def get_sum(self, i):\n        i += 1\n        x = 0\n        while i > 0:\n            x += self.data[i]\n            i -= i & -i\n        return x\n\n    # Return sum for [l, r)\n    def get_sum_range(self, l, r):\n        return self.get_sum(r - 1) - self.get_sum(l - 1)\n\n\ndef main():\n    N, Q = map(int, readline().split())\n    C = list(map(int, readline().split()))\n    LR = map(int, read().split())\n    prev = [-1] * (N + 1)\n    ps = [[] for _ in range(N)]\n    for i, c in enumerate(C):\n        if prev[c] != -1:\n            ps[prev[c]].append(i)\n        prev[c] = i\n    qs = [[] for _ in range(N + 1)]\n    for i, (l, r) in enumerate(zip(*[iter(LR)] * 2)):\n        l -= 1\n        r -= 1\n        qs[l].append((r, i))\n    ans = [0] * Q\n    bit = BIT(N)\n    for l in range(N - 1, -1, -1):\n        for r in ps[l]:\n            bit.add(r)\n        for r, i in qs[l]:\n            ans[i] = (r - l + 1) - bit.get_sum(r)\n    print(*ans, sep=\"\\n\")\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":31.3131313131,"diff":["-# Reference: https:\/\/www.geeksforgeeks.org\/queries-number-distinct-elements-subarray\/","-# Python3 code to find number of","-# distinct numbers in a subarray","-MAX = 1000001","-# structure to store queries","-class Query:","-    def __init__(self, l, r, idx):","-        self.l = l","-        self.r = r","-        self.idx = idx","-# updating the bit array","-def update(idx, val, bit, n):","-    while idx <= n:","-        bit[idx] += val","-        idx += idx & -idx","+class BIT:","+    def __init__(self, n):","+        self.n = n","+        self.data = [0] * (n + 1)","+","+    def add(self, i, x=1):","+        i += 1","+        while i <= self.n:","+            self.data[i] += x","+            i += i & -i","+","+    def get_sum(self, i):","+        i += 1","+        x = 0","+        while i > 0:","+            x += self.data[i]","+            i -= i & -i","+        return x","+","+    # Return sum for [l, r)","+    def get_sum_range(self, l, r):","+        return self.get_sum(r - 1) - self.get_sum(l - 1)","-# querying the bit array","-def query(idx, bit, n):","-    summ = 0","-    while idx:","-        summ += bit[idx]","-        idx -= idx & -idx","-    return summ","-","-","-def answeringQueries(arr, n, queries, q):","-    # initialising bit array","-    bit = [0] * (n + 1)","-    # holds the rightmost index of","-    # any number as numbers of a[i]","-    # are less than or equal to 10^6","-    last_visit = [-1] * MAX","-    # answer for each query","-    ans = [0] * q","-    query_counter = 0","-    for i in range(n):","-        # If last visit is not -1 update -1 at the","-        # idx equal to last_visit[arr[i]]","-        if last_visit[arr[i]] != -1:","-            update(last_visit[arr[i]] + 1, -1, bit, n)","-        # Setting last_visit[arr[i]] as i and","-        # updating the bit array accordingly","-        last_visit[arr[i]] = i","-        update(i + 1, 1, bit, n)","-        # If i is equal to r of any query store answer","-        # for that query in ans[]","-        while query_counter < q and queries[query_counter].r == i:","-            ans[queries[query_counter].idx] = query(","-                queries[query_counter].r + 1, bit, n","-            ) - query(queries[query_counter].l, bit, n)","-            query_counter += 1","-    # print answer for each query","-    for i in range(q):","-        print((ans[i]))","-","-","-# This code is contributed by","-# sanjeev2552","-    N, Q = list(map(int, readline().split()))","+    N, Q = map(int, readline().split())","-    (*LR,) = list(map(int, read().split()))","-    queries = [0] * Q","+    LR = map(int, read().split())","+    prev = [-1] * (N + 1)","+    ps = [[] for _ in range(N)]","+    for i, c in enumerate(C):","+        if prev[c] != -1:","+            ps[prev[c]].append(i)","+        prev[c] = i","+    qs = [[] for _ in range(N + 1)]","-        queries[i] = Query(l - 1, r - 1, i)","-    queries.sort(key=lambda x: x.r)","-    answeringQueries(C, N, queries, Q)","+        l -= 1","+        r -= 1","+        qs[l].append((r, i))","+    ans = [0] * Q","+    bit = BIT(N)","+    for l in range(N - 1, -1, -1):","+        for r in ps[l]:","+            bit.add(r)","+        for r, i in qs[l]:","+            ans[i] = (r - l + 1) - bit.get_sum(r)","+    print(*ans, sep=\"\\n\")"],"diff_only_import_comment":false,"measured_runtime_v0":0.264044944,"measured_runtime_v1":0.2106282006,"runtime_lift":1.2536067971,"key":["s648865207","s892817156"]}
{"user_id":"u855831834","problem_id":"p02596","language":"python","submission_id_v0":"s777833838","submission_id_v1":"s349314776","cpu_time_v0":179,"cpu_time_v1":88,"memory_v0":9072,"memory_v1":63520,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":50.84,"input":"k = int(eval(input()))\n\nnum = 0\n\nif not k%2:\n\n    print((-1))\n\nelse:\n\n    for i in range(k):\n\n        num = (num*10+7)%k\n\n        if num == 0:\n\n            print((i+1))\n\n            break\n\n    else:\n\n        print((-1))","target":"K = int(eval(input()))\n\n\n\nans = 1\n\nnum = 0\n\nseven = 7\n\n\n\nif not K%2:\n\n    print((-1))\n\nelse:\n\n    for i in range(K):\n\n        num = num + seven\n\n        seven = seven*10%K\n\n        num = num%K\n\n        if num == 0:\n\n            print(ans)\n\n            break\n\n        ans += 1\n\n    else:\n\n        print((-1))","code_v0_loc":12,"code_v1_loc":19,"code_v0_num_chars":207,"code_v1_num_chars":297,"code_v0_no_empty_lines":"k = int(eval(input()))\nnum = 0\nif not k % 2:\n    print((-1))\nelse:\n    for i in range(k):\n        num = (num * 10 + 7) % k\n        if num == 0:\n            print((i + 1))\n            break\n    else:\n        print((-1))\n","code_v1_no_empty_lines":"K = int(eval(input()))\nans = 1\nnum = 0\nseven = 7\nif not K % 2:\n    print((-1))\nelse:\n    for i in range(K):\n        num = num + seven\n        seven = seven * 10 % K\n        num = num % K\n        if num == 0:\n            print(ans)\n            break\n        ans += 1\n    else:\n        print((-1))\n","code_same":false,"relative_loc_diff_percent":36.8421052632,"diff":["-k = int(eval(input()))","+K = int(eval(input()))","+ans = 1","-if not k % 2:","+seven = 7","+if not K % 2:","-    for i in range(k):","-        num = (num * 10 + 7) % k","+    for i in range(K):","+        num = num + seven","+        seven = seven * 10 % K","+        num = num % K","-            print((i + 1))","+            print(ans)","+        ans += 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.513984643,"measured_runtime_v1":0.3340408325,"runtime_lift":1.5386880672,"key":["s777833838","s349314776"]}
{"user_id":"u488636998","problem_id":"p02886","language":"python","submission_id_v0":"s711137678","submission_id_v1":"s721979470","cpu_time_v0":150,"cpu_time_v1":17,"memory_v0":12496,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.67,"input":"N=int(eval(input()))\n\nd=list(map(int, input().split()))\n\n\n\nimport numpy as np\n\nd = np.array(d)\n\n\n\nprint(( ( (np.sum(d))**2 - np.sum(d**2) ) \/\/ 2 ))\n","target":"N=int(eval(input()))\n\nd=list(map(int, input().split()))\n\n\n\ncumsum = 0\n\nfor n in range(N):\n\n    cumsum += d[n]\n\nsub_cumsum = 0\n\nans = 0\n\nfor n in range(N):\n\n    sub_cumsum += d[n]\n\n    ans += d[n] * (cumsum-sub_cumsum)\n\nprint(ans)\n","code_v0_loc":7,"code_v1_loc":12,"code_v0_num_chars":140,"code_v1_num_chars":224,"code_v0_no_empty_lines":"N = int(eval(input()))\nd = list(map(int, input().split()))\nimport numpy as np\n\nd = np.array(d)\nprint((((np.sum(d)) ** 2 - np.sum(d**2)) \/\/ 2))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nd = list(map(int, input().split()))\ncumsum = 0\nfor n in range(N):\n    cumsum += d[n]\nsub_cumsum = 0\nans = 0\nfor n in range(N):\n    sub_cumsum += d[n]\n    ans += d[n] * (cumsum - sub_cumsum)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":41.6666666667,"diff":["-import numpy as np","-","-d = np.array(d)","-print((((np.sum(d)) ** 2 - np.sum(d**2)) \/\/ 2))","+cumsum = 0","+for n in range(N):","+    cumsum += d[n]","+sub_cumsum = 0","+ans = 0","+for n in range(N):","+    sub_cumsum += d[n]","+    ans += d[n] * (cumsum - sub_cumsum)","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.6732356335,"measured_runtime_v1":0.2734009403,"runtime_lift":6.1200800239,"key":["s711137678","s721979470"]}
{"user_id":"u444560129","problem_id":"p02596","language":"python","submission_id_v0":"s838540391","submission_id_v1":"s786083962","cpu_time_v0":192,"cpu_time_v1":156,"memory_v0":9088,"memory_v1":9172,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":18.75,"input":"k = int(eval(input()))\n\ncount = 1\n\nn = 0\n\nif k % 2 == 0 or k % 5 == 0:\n\n    print((-1))\n\nelse:\n\n  while 1:\n\n      n = (n * 10 + 7) % k  \n\n      if n == 0:\n\n        break \n\n      count += 1\n\n  print(count)","target":"def main(h):\n\n  count = 1\n\n  n = 0\n\n  for i in range (k):\n\n    n = (n * 10 + 7) % k  \n\n    if n == 0: \n\n      print(count)\n\n      return 0\n\n    count += 1\n\n  print((-1))\n\n  \n\nif __name__ == '__main__':\n\n  k = int(eval(input()))\n\n  main(k)","code_v0_loc":12,"code_v1_loc":14,"code_v0_num_chars":196,"code_v1_num_chars":230,"code_v0_no_empty_lines":"k = int(eval(input()))\ncount = 1\nn = 0\nif k % 2 == 0 or k % 5 == 0:\n    print((-1))\nelse:\n    while 1:\n        n = (n * 10 + 7) % k\n        if n == 0:\n            break\n        count += 1\n    print(count)\n","code_v1_no_empty_lines":"def main(h):\n    count = 1\n    n = 0\n    for i in range(k):\n        n = (n * 10 + 7) % k\n        if n == 0:\n            print(count)\n            return 0\n        count += 1\n    print((-1))\n\n\nif __name__ == \"__main__\":\n    k = int(eval(input()))\n    main(k)\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["-k = int(eval(input()))","-count = 1","-n = 0","-if k % 2 == 0 or k % 5 == 0:","-    print((-1))","-else:","-    while 1:","+def main(h):","+    count = 1","+    n = 0","+    for i in range(k):","-            break","+            print(count)","+            return 0","-    print(count)","+    print((-1))","+","+","+if __name__ == \"__main__\":","+    k = int(eval(input()))","+    main(k)"],"diff_only_import_comment":false,"measured_runtime_v0":0.359774395,"measured_runtime_v1":0.0061541715,"runtime_lift":58.4602486856,"key":["s838540391","s786083962"]}
{"user_id":"u089376182","problem_id":"p03250","language":"python","submission_id_v0":"s131709017","submission_id_v1":"s244884559","cpu_time_v0":19,"cpu_time_v1":17,"memory_v0":3060,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.53,"input":"a, b, c = sorted(map(int, input().split()))\n\n\n\nprint((c*10 + b + a))","target":"a, b, c = list(map(int, input().split()))\n\n\n\nprint((max(a, b, c)*9 + (a + b + c)))","code_v0_loc":3,"code_v1_loc":3,"code_v0_num_chars":66,"code_v1_num_chars":74,"code_v0_no_empty_lines":"a, b, c = sorted(map(int, input().split()))\nprint((c * 10 + b + a))\n","code_v1_no_empty_lines":"a, b, c = list(map(int, input().split()))\nprint((max(a, b, c) * 9 + (a + b + c)))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-a, b, c = sorted(map(int, input().split()))","-print((c * 10 + b + a))","+a, b, c = list(map(int, input().split()))","+print((max(a, b, c) * 9 + (a + b + c)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2633334219,"measured_runtime_v1":0.0501041813,"runtime_lift":5.2557174893,"key":["s131709017","s244884559"]}
{"user_id":"u813098295","problem_id":"p03371","language":"python","submission_id_v0":"s229566237","submission_id_v1":"s072536815","cpu_time_v0":222,"cpu_time_v1":129,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":41.89,"input":"a, b, c, x, y = list(map(int, input().split()))\n\nans = float('inf')\n\n\n\nfor i in range(200005):\n\n    tmp = i * 2 * c\n\n    tmp += max(0, x-i) * a\n\n    tmp += max(0, y-i) * b\n\n    ans = min(ans, tmp)\n\n\n\nprint(ans)","target":"a, b, c, x, y = list(map(int, input().split()))\n\nans = float('inf')\n\n\n\nfor i in range(100005):\n\n    tmp = i * 2 * c\n\n    tmp += max(0, x-i) * a\n\n    tmp += max(0, y-i) * b\n\n    ans = min(ans, tmp)\n\n\n\nprint(ans)","code_v0_loc":10,"code_v1_loc":10,"code_v0_num_chars":204,"code_v1_num_chars":204,"code_v0_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nans = float(\"inf\")\nfor i in range(200005):\n    tmp = i * 2 * c\n    tmp += max(0, x - i) * a\n    tmp += max(0, y - i) * b\n    ans = min(ans, tmp)\nprint(ans)\n","code_v1_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nans = float(\"inf\")\nfor i in range(100005):\n    tmp = i * 2 * c\n    tmp += max(0, x - i) * a\n    tmp += max(0, y - i) * b\n    ans = min(ans, tmp)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-for i in range(200005):","+for i in range(100005):"],"diff_only_import_comment":false,"measured_runtime_v0":2.0992211397,"measured_runtime_v1":1.3130319312,"runtime_lift":1.5987586363,"key":["s229566237","s072536815"]}
{"user_id":"u179169725","problem_id":"p02574","language":"python","submission_id_v0":"s667619941","submission_id_v1":"s202036773","cpu_time_v0":600,"cpu_time_v1":355,"memory_v0":203704,"memory_v1":215292,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":40.83,"input":"import sys\n\nsys.setrecursionlimit(1 << 25)\n\nreadline = sys.stdin.buffer.readline\n\nread = sys.stdin.readline  # \u6587\u5b57\u5217\u8aad\u307f\u8fbc\u3080\u6642\u306f\u3053\u3063\u3061\n\nra = range\n\nenu = enumerate\n\n\n\n\n\ndef exit(*argv, **kwarg):\n\n    print(*argv, **kwarg)\n\n    sys.exit()\n\n\n\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n\n# \u53d7\u3051\u6e21\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u8981\u7d20\u304b\u3089sub\u3060\u3051\u5f15\u304f.\u30ea\u30b9\u30c8\u3092*\u3092\u3064\u3051\u3066\u5c55\u958b\u3057\u3066\u304a\u304f\u3053\u3068\n\n\n\n\n\ndef a_int(): return int(readline())\n\n\n\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\n\n\n\ndef _make_minimum_prime(N: int):\n\n    # x\u306e\u6700\u5c0f\u306e\u7d20\u56e0\u6570\u8868\u3092\u4f5c\u6210\n\n    min_prime = [x for x in range(N + 1)]\n\n    # min_prime[0] = 0  # 0\u30681\u306f\u7d20\u6570\u3067\u306f\u306a\u3044\n\n    # min_prime[1] = 1\n\n    for i in range(2, int(N ** 0.5) + 1):\n\n        if min_prime[i] == i:  # \u7d20\u6570\u3060\u3063\u305f\u3089\u66f4\u65b0\n\n            for j in range(2 * i, N + 1, i):  # i\u306e\u500d\u6570\u306f\u7d20\u6570\u3067\u306a\u3044\n\n                if min_prime[j] == j:\n\n                    min_prime[j] = i\n\n    return min_prime\n\n\n\n\n\nmin_prime = _make_minimum_prime(10**6)\n\n\n\n\n\nfrom collections import Counter\n\n\n\n\n\ndef fast_factorization(N: int):\n\n    # -> List[Tuple[int,int]] (\u7d20\u6570,\u51aa\u6570)\u3092\u683c\u7d0d\n\n    # \u6700\u5c0f\u7d20\u6570\u914d\u5217min_prime\u3092\u4f7f\u3063\u3066O(log N)\u3067\u56e0\u6570\u5206\u89e3\n\n    if N == 1:\n\n        return Counter()  # 1\u306f\u7d20\u6570\u3067\u306f\u306a\u3044\n\n    # \u7d20\u56e0\u6570\u5206\u89e3\n\n    arr = []\n\n    tmp = N\n\n    while tmp != 1:\n\n        p = min_prime[tmp]\n\n        tmp \/\/= p\n\n        arr.append(p)\n\n\n\n    return Counter(arr)\n\n\n\n\n\nMOD = 10**9 + 7\n\nINF = 2**31  # 2147483648 > 10**9\n\n# default import\n\nfrom collections import defaultdict, Counter, deque\n\nimport random\n\nfrom math import gcd\n\n\n\n\n\nN = a_int()\n\nA = ints()\n\nrandom.shuffle(A)\n\n\n\n# set\u304b\u306f\u3059\u3050\u308f\u304b\u308b\n\n# set\u3067\u306a\u3051\u308c\u3070 not coprime\n\n# pair\u306f\u4e92\u3044\u306b\u7d20\u304b\u3092\u307f\u308c\u3070\u3044\u3044\u306e\u304b\n\n# \u3064\u307e\u308a\u56e0\u6570\u5206\u89e3\u3057\u3066\u8db3\u3057\u3066\u3063\u305f\u3068\u304d\u306b\u3059\u3079\u3066\u306e\u7d20\u6570\u306e\u3079\u304d\u6570\u304c1\u4ee5\u4e0b\u3067\u3042\u308c\u3070\u826f\u3044\n\n\n\ng_set = 0\n\ncnt = defaultdict(lambda: 0)\n\nflg = 1  # pairwise\u3067\u3042\u308b\u30d5\u30e9\u30b0\n\nfor a in A:\n\n    g_set = gcd(g_set, a)\n\n    if flg:\n\n        for p, n in fast_factorization(a).items():\n\n            if cnt[p] != 0:\n\n                flg = 0\n\n            cnt[p] += n\n\n\n\n\n\n# print(cnt)\n\n# for v in cnt.values():\n\n#     if v > 1:\n\n#         flg = 0\n\n#         break\n\n\n\nif g_set > 1:\n\n    print('not coprime')\n\nelif flg:\n\n    print('pairwise coprime')\n\nelse:\n\n    print('setwise coprime')\n","target":"import sys\n\nsys.setrecursionlimit(1 << 25)\n\nreadline = sys.stdin.buffer.readline\n\nread = sys.stdin.readline  # \u6587\u5b57\u5217\u8aad\u307f\u8fbc\u3080\u6642\u306f\u3053\u3063\u3061\n\nra = range\n\nenu = enumerate\n\n\n\n\n\ndef exit(*argv, **kwarg):\n\n    print(*argv, **kwarg)\n\n    sys.exit()\n\n\n\n\n\ndef mina(*argv, sub=1): return list(map(lambda x: x - sub, argv))\n\n# \u53d7\u3051\u6e21\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u8981\u7d20\u304b\u3089sub\u3060\u3051\u5f15\u304f.\u30ea\u30b9\u30c8\u3092*\u3092\u3064\u3051\u3066\u5c55\u958b\u3057\u3066\u304a\u304f\u3053\u3068\n\n\n\n\n\ndef a_int(): return int(readline())\n\n\n\n\n\ndef ints(): return list(map(int, readline().split()))\n\n\n\n\n\nfrom collections import Counter\n\n\n\n\n\nclass FastFactorization:\n\n    def __init__(self, N: int):\n\n        '''\u69cb\u7bc9O(NloglogN)\u3001\u30af\u30a8\u30eaO(logN)'''\n\n        self.N = N\n\n        self.min_prime = self._make_minimum_prime()\n\n\n\n    def _make_minimum_prime(self):\n\n        # x\u306e\u6700\u5c0f\u306e\u7d20\u56e0\u6570\u8868\u3092\u4f5c\u6210\n\n        min_prime = [x for x in range(self.N + 1)]\n\n        # min_prime[0] = 0  # 0\u30681\u306f\u7d20\u6570\u3067\u306f\u306a\u3044\n\n        # min_prime[1] = 1\n\n        for i in range(2, int(self.N ** 0.5) + 1):\n\n            if min_prime[i] == i:  # \u7d20\u6570\u3060\u3063\u305f\u3089\u66f4\u65b0\n\n                for j in range(2 * i, self.N + 1, i):  # i\u306e\u500d\u6570\u306f\u7d20\u6570\u3067\u306a\u3044\n\n                    if min_prime[j] == j:\n\n                        min_prime[j] = i\n\n        return min_prime\n\n\n\n    def query(self, x: int):\n\n        # -> Counter[p,n] (\u7d20\u6570,\u51aa\u6570) \u3092\u683c\u7d0d\n\n        # \u6700\u5c0f\u7d20\u6570\u914d\u5217min_prime\u3092\u4f7f\u3063\u3066O(log N)\u3067\u56e0\u6570\u5206\u89e3\n\n        if x == 1:\n\n            return Counter()  # 1\u306f\u7d20\u6570\u3067\u306f\u306a\u3044\n\n\n\n        # \u7d20\u56e0\u6570\u5206\u89e3\n\n        arr = []\n\n        tmp = x\n\n        while tmp != 1:\n\n            p = self.min_prime[tmp]\n\n            tmp \/\/= p\n\n            arr.append(p)\n\n        return Counter(arr)\n\n\n\n\n\nMOD = 10**9 + 7\n\nINF = 2**31  # 2147483648 > 10**9\n\n# default import\n\nfrom collections import defaultdict, Counter, deque\n\nfrom math import gcd\n\n\n\n\n\nN = a_int()\n\nA = ints()\n\n\n\nfact = FastFactorization(max(A))\n\n\n\n# set\u304b\u306f\u3059\u3050\u308f\u304b\u308b\n\n# set\u3067\u306a\u3051\u308c\u3070 not coprime\n\n# pair\u306f\u4e92\u3044\u306b\u7d20\u304b\u3092\u307f\u308c\u3070\u3044\u3044\u306e\u304b\n\n# \u3064\u307e\u308a\u56e0\u6570\u5206\u89e3\u3057\u3066\u8db3\u3057\u3066\u3063\u305f\u3068\u304d\u306b\u3059\u3079\u3066\u306e\u7d20\u6570\u306e\u3079\u304d\u6570\u304c1\u4ee5\u4e0b\u3067\u3042\u308c\u3070\u826f\u3044\n\n\n\ng_set = 0\n\ncnt = defaultdict(lambda: 0)\n\nflg = 1  # pairwise\u3067\u3042\u308b\u30d5\u30e9\u30b0\n\nfor a in A:\n\n    g_set = gcd(g_set, a)\n\n    if flg:\n\n        for p, n in fact.query(a).items():\n\n            if cnt[p] != 0:\n\n                flg = 0\n\n            cnt[p] += n\n\n\n\n\n\n# print(cnt)\n\n# for v in cnt.values():\n\n#     if v > 1:\n\n#         flg = 0\n\n#         break\n\n\n\nif g_set > 1:\n\n    print('not coprime')\n\nelif flg:\n\n    print('pairwise coprime')\n\nelse:\n\n    print('setwise coprime')\n","code_v0_loc":99,"code_v1_loc":101,"code_v0_num_chars":2049,"code_v1_num_chars":2271,"code_v0_no_empty_lines":"import sys\n\nsys.setrecursionlimit(1 << 25)\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline  # \u6587\u5b57\u5217\u8aad\u307f\u8fbc\u3080\u6642\u306f\u3053\u3063\u3061\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\n\ndef mina(*argv, sub=1):\n    return list(map(lambda x: x - sub, argv))\n\n\n# \u53d7\u3051\u6e21\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u8981\u7d20\u304b\u3089sub\u3060\u3051\u5f15\u304f.\u30ea\u30b9\u30c8\u3092*\u3092\u3064\u3051\u3066\u5c55\u958b\u3057\u3066\u304a\u304f\u3053\u3068\ndef a_int():\n    return int(readline())\n\n\ndef ints():\n    return list(map(int, readline().split()))\n\n\ndef _make_minimum_prime(N: int):\n    # x\u306e\u6700\u5c0f\u306e\u7d20\u56e0\u6570\u8868\u3092\u4f5c\u6210\n    min_prime = [x for x in range(N + 1)]\n    # min_prime[0] = 0  # 0\u30681\u306f\u7d20\u6570\u3067\u306f\u306a\u3044\n    # min_prime[1] = 1\n    for i in range(2, int(N**0.5) + 1):\n        if min_prime[i] == i:  # \u7d20\u6570\u3060\u3063\u305f\u3089\u66f4\u65b0\n            for j in range(2 * i, N + 1, i):  # i\u306e\u500d\u6570\u306f\u7d20\u6570\u3067\u306a\u3044\n                if min_prime[j] == j:\n                    min_prime[j] = i\n    return min_prime\n\n\nmin_prime = _make_minimum_prime(10**6)\nfrom collections import Counter\n\n\ndef fast_factorization(N: int):\n    # -> List[Tuple[int,int]] (\u7d20\u6570,\u51aa\u6570)\u3092\u683c\u7d0d\n    # \u6700\u5c0f\u7d20\u6570\u914d\u5217min_prime\u3092\u4f7f\u3063\u3066O(log N)\u3067\u56e0\u6570\u5206\u89e3\n    if N == 1:\n        return Counter()  # 1\u306f\u7d20\u6570\u3067\u306f\u306a\u3044\n    # \u7d20\u56e0\u6570\u5206\u89e3\n    arr = []\n    tmp = N\n    while tmp != 1:\n        p = min_prime[tmp]\n        tmp \/\/= p\n        arr.append(p)\n    return Counter(arr)\n\n\nMOD = 10**9 + 7\nINF = 2**31  # 2147483648 > 10**9\n# default import\nfrom collections import defaultdict, Counter, deque\nimport random\nfrom math import gcd\n\nN = a_int()\nA = ints()\nrandom.shuffle(A)\n# set\u304b\u306f\u3059\u3050\u308f\u304b\u308b\n# set\u3067\u306a\u3051\u308c\u3070 not coprime\n# pair\u306f\u4e92\u3044\u306b\u7d20\u304b\u3092\u307f\u308c\u3070\u3044\u3044\u306e\u304b\n# \u3064\u307e\u308a\u56e0\u6570\u5206\u89e3\u3057\u3066\u8db3\u3057\u3066\u3063\u305f\u3068\u304d\u306b\u3059\u3079\u3066\u306e\u7d20\u6570\u306e\u3079\u304d\u6570\u304c1\u4ee5\u4e0b\u3067\u3042\u308c\u3070\u826f\u3044\ng_set = 0\ncnt = defaultdict(lambda: 0)\nflg = 1  # pairwise\u3067\u3042\u308b\u30d5\u30e9\u30b0\nfor a in A:\n    g_set = gcd(g_set, a)\n    if flg:\n        for p, n in fast_factorization(a).items():\n            if cnt[p] != 0:\n                flg = 0\n            cnt[p] += n\n# print(cnt)\n# for v in cnt.values():\n#     if v > 1:\n#         flg = 0\n#         break\nif g_set > 1:\n    print(\"not coprime\")\nelif flg:\n    print(\"pairwise coprime\")\nelse:\n    print(\"setwise coprime\")\n","code_v1_no_empty_lines":"import sys\n\nsys.setrecursionlimit(1 << 25)\nreadline = sys.stdin.buffer.readline\nread = sys.stdin.readline  # \u6587\u5b57\u5217\u8aad\u307f\u8fbc\u3080\u6642\u306f\u3053\u3063\u3061\nra = range\nenu = enumerate\n\n\ndef exit(*argv, **kwarg):\n    print(*argv, **kwarg)\n    sys.exit()\n\n\ndef mina(*argv, sub=1):\n    return list(map(lambda x: x - sub, argv))\n\n\n# \u53d7\u3051\u6e21\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u8981\u7d20\u304b\u3089sub\u3060\u3051\u5f15\u304f.\u30ea\u30b9\u30c8\u3092*\u3092\u3064\u3051\u3066\u5c55\u958b\u3057\u3066\u304a\u304f\u3053\u3068\ndef a_int():\n    return int(readline())\n\n\ndef ints():\n    return list(map(int, readline().split()))\n\n\nfrom collections import Counter\n\n\nclass FastFactorization:\n    def __init__(self, N: int):\n        \"\"\"\u69cb\u7bc9O(NloglogN)\u3001\u30af\u30a8\u30eaO(logN)\"\"\"\n        self.N = N\n        self.min_prime = self._make_minimum_prime()\n\n    def _make_minimum_prime(self):\n        # x\u306e\u6700\u5c0f\u306e\u7d20\u56e0\u6570\u8868\u3092\u4f5c\u6210\n        min_prime = [x for x in range(self.N + 1)]\n        # min_prime[0] = 0  # 0\u30681\u306f\u7d20\u6570\u3067\u306f\u306a\u3044\n        # min_prime[1] = 1\n        for i in range(2, int(self.N**0.5) + 1):\n            if min_prime[i] == i:  # \u7d20\u6570\u3060\u3063\u305f\u3089\u66f4\u65b0\n                for j in range(2 * i, self.N + 1, i):  # i\u306e\u500d\u6570\u306f\u7d20\u6570\u3067\u306a\u3044\n                    if min_prime[j] == j:\n                        min_prime[j] = i\n        return min_prime\n\n    def query(self, x: int):\n        # -> Counter[p,n] (\u7d20\u6570,\u51aa\u6570) \u3092\u683c\u7d0d\n        # \u6700\u5c0f\u7d20\u6570\u914d\u5217min_prime\u3092\u4f7f\u3063\u3066O(log N)\u3067\u56e0\u6570\u5206\u89e3\n        if x == 1:\n            return Counter()  # 1\u306f\u7d20\u6570\u3067\u306f\u306a\u3044\n        # \u7d20\u56e0\u6570\u5206\u89e3\n        arr = []\n        tmp = x\n        while tmp != 1:\n            p = self.min_prime[tmp]\n            tmp \/\/= p\n            arr.append(p)\n        return Counter(arr)\n\n\nMOD = 10**9 + 7\nINF = 2**31  # 2147483648 > 10**9\n# default import\nfrom collections import defaultdict, Counter, deque\nfrom math import gcd\n\nN = a_int()\nA = ints()\nfact = FastFactorization(max(A))\n# set\u304b\u306f\u3059\u3050\u308f\u304b\u308b\n# set\u3067\u306a\u3051\u308c\u3070 not coprime\n# pair\u306f\u4e92\u3044\u306b\u7d20\u304b\u3092\u307f\u308c\u3070\u3044\u3044\u306e\u304b\n# \u3064\u307e\u308a\u56e0\u6570\u5206\u89e3\u3057\u3066\u8db3\u3057\u3066\u3063\u305f\u3068\u304d\u306b\u3059\u3079\u3066\u306e\u7d20\u6570\u306e\u3079\u304d\u6570\u304c1\u4ee5\u4e0b\u3067\u3042\u308c\u3070\u826f\u3044\ng_set = 0\ncnt = defaultdict(lambda: 0)\nflg = 1  # pairwise\u3067\u3042\u308b\u30d5\u30e9\u30b0\nfor a in A:\n    g_set = gcd(g_set, a)\n    if flg:\n        for p, n in fact.query(a).items():\n            if cnt[p] != 0:\n                flg = 0\n            cnt[p] += n\n# print(cnt)\n# for v in cnt.values():\n#     if v > 1:\n#         flg = 0\n#         break\nif g_set > 1:\n    print(\"not coprime\")\nelif flg:\n    print(\"pairwise coprime\")\nelse:\n    print(\"setwise coprime\")\n","code_same":false,"relative_loc_diff_percent":1.9801980198,"diff":["-def _make_minimum_prime(N: int):","-    # x\u306e\u6700\u5c0f\u306e\u7d20\u56e0\u6570\u8868\u3092\u4f5c\u6210","-    min_prime = [x for x in range(N + 1)]","-    # min_prime[0] = 0  # 0\u30681\u306f\u7d20\u6570\u3067\u306f\u306a\u3044","-    # min_prime[1] = 1","-    for i in range(2, int(N**0.5) + 1):","-        if min_prime[i] == i:  # \u7d20\u6570\u3060\u3063\u305f\u3089\u66f4\u65b0","-            for j in range(2 * i, N + 1, i):  # i\u306e\u500d\u6570\u306f\u7d20\u6570\u3067\u306a\u3044","-                if min_prime[j] == j:","-                    min_prime[j] = i","-    return min_prime","-","-","-min_prime = _make_minimum_prime(10**6)","-def fast_factorization(N: int):","-    # -> List[Tuple[int,int]] (\u7d20\u6570,\u51aa\u6570)\u3092\u683c\u7d0d","-    # \u6700\u5c0f\u7d20\u6570\u914d\u5217min_prime\u3092\u4f7f\u3063\u3066O(log N)\u3067\u56e0\u6570\u5206\u89e3","-    if N == 1:","-        return Counter()  # 1\u306f\u7d20\u6570\u3067\u306f\u306a\u3044","-    # \u7d20\u56e0\u6570\u5206\u89e3","-    arr = []","-    tmp = N","-    while tmp != 1:","-        p = min_prime[tmp]","-        tmp \/\/= p","-        arr.append(p)","-    return Counter(arr)","+class FastFactorization:","+    def __init__(self, N: int):","+        \"\"\"\u69cb\u7bc9O(NloglogN)\u3001\u30af\u30a8\u30eaO(logN)\"\"\"","+        self.N = N","+        self.min_prime = self._make_minimum_prime()","+","+    def _make_minimum_prime(self):","+        # x\u306e\u6700\u5c0f\u306e\u7d20\u56e0\u6570\u8868\u3092\u4f5c\u6210","+        min_prime = [x for x in range(self.N + 1)]","+        # min_prime[0] = 0  # 0\u30681\u306f\u7d20\u6570\u3067\u306f\u306a\u3044","+        # min_prime[1] = 1","+        for i in range(2, int(self.N**0.5) + 1):","+            if min_prime[i] == i:  # \u7d20\u6570\u3060\u3063\u305f\u3089\u66f4\u65b0","+                for j in range(2 * i, self.N + 1, i):  # i\u306e\u500d\u6570\u306f\u7d20\u6570\u3067\u306a\u3044","+                    if min_prime[j] == j:","+                        min_prime[j] = i","+        return min_prime","+","+    def query(self, x: int):","+        # -> Counter[p,n] (\u7d20\u6570,\u51aa\u6570) \u3092\u683c\u7d0d","+        # \u6700\u5c0f\u7d20\u6570\u914d\u5217min_prime\u3092\u4f7f\u3063\u3066O(log N)\u3067\u56e0\u6570\u5206\u89e3","+        if x == 1:","+            return Counter()  # 1\u306f\u7d20\u6570\u3067\u306f\u306a\u3044","+        # \u7d20\u56e0\u6570\u5206\u89e3","+        arr = []","+        tmp = x","+        while tmp != 1:","+            p = self.min_prime[tmp]","+            tmp \/\/= p","+            arr.append(p)","+        return Counter(arr)","-import random","-random.shuffle(A)","+fact = FastFactorization(max(A))","-        for p, n in fast_factorization(a).items():","+        for p, n in fact.query(a).items():"],"diff_only_import_comment":false,"measured_runtime_v0":3.5886808305,"measured_runtime_v1":0.2258392296,"runtime_lift":15.8904227442,"key":["s667619941","s202036773"]}
{"user_id":"u499259667","problem_id":"p03844","language":"python","submission_id_v0":"s838870777","submission_id_v1":"s858116598","cpu_time_v0":12,"cpu_time_v1":10,"memory_v0":2572,"memory_v1":2572,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.67,"input":"print((eval(input())))","target":"print(eval(input()))","code_v0_loc":1,"code_v1_loc":1,"code_v0_num_chars":14,"code_v1_num_chars":13,"code_v0_no_empty_lines":"print((eval(input())))\n","code_v1_no_empty_lines":"print(eval(input()))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-print((eval(input())))","+print(eval(input()))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3375790837,"measured_runtime_v1":0.2112844212,"runtime_lift":1.5977471587,"key":["s838870777","s858116598"]}
{"user_id":"u576434377","problem_id":"p03568","language":"python","submission_id_v0":"s245503579","submission_id_v1":"s305475228","cpu_time_v0":101,"cpu_time_v1":17,"memory_v0":3064,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":83.17,"input":"N = int(eval(input()))\n\nAs = list(map(int,input().split()))\n\n\n\n\n\ndef dfs(A_s, index,Bss):\n\n    if index == N:\n\n        tmp = 1\n\n        for b in Bss:\n\n            tmp *= b\n\n        return 1 if tmp % 2 == 0 else 0\n\n    b_mi = Bss.copy()\n\n    b_mi.append(A_s[index] - 1)\n\n\n\n    b = Bss.copy()\n\n    b.append(A_s[index])\n\n\n\n    b_pl = Bss.copy()\n\n    b_pl.append(A_s[index] + 1)\n\n    return dfs(A_s,index + 1, b_mi) + dfs(A_s,index + 1,b) + dfs(A_s,index + 1,b_pl)\n\n\n\n\n\nprint((dfs(As,0,[])))\n","target":"N = int(eval(input()))\n\nAs = list(map(int,input().split()))\n\n\n\ntmp = 1\n\nfor i in range(N):\n\n    if As[i] % 2 == 0:\n\n       tmp *= 2\n\n\n\nprint((3 ** N - tmp))","code_v0_loc":22,"code_v1_loc":9,"code_v0_num_chars":480,"code_v1_num_chars":148,"code_v0_no_empty_lines":"N = int(eval(input()))\nAs = list(map(int, input().split()))\n\n\ndef dfs(A_s, index, Bss):\n    if index == N:\n        tmp = 1\n        for b in Bss:\n            tmp *= b\n        return 1 if tmp % 2 == 0 else 0\n    b_mi = Bss.copy()\n    b_mi.append(A_s[index] - 1)\n    b = Bss.copy()\n    b.append(A_s[index])\n    b_pl = Bss.copy()\n    b_pl.append(A_s[index] + 1)\n    return (\n        dfs(A_s, index + 1, b_mi) + dfs(A_s, index + 1, b) + dfs(A_s, index + 1, b_pl)\n    )\n\n\nprint((dfs(As, 0, [])))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nAs = list(map(int, input().split()))\ntmp = 1\nfor i in range(N):\n    if As[i] % 2 == 0:\n        tmp *= 2\nprint((3**N - tmp))\n","code_same":false,"relative_loc_diff_percent":59.0909090909,"diff":["-","-","-def dfs(A_s, index, Bss):","-    if index == N:","-        tmp = 1","-        for b in Bss:","-            tmp *= b","-        return 1 if tmp % 2 == 0 else 0","-    b_mi = Bss.copy()","-    b_mi.append(A_s[index] - 1)","-    b = Bss.copy()","-    b.append(A_s[index])","-    b_pl = Bss.copy()","-    b_pl.append(A_s[index] + 1)","-    return (","-        dfs(A_s, index + 1, b_mi) + dfs(A_s, index + 1, b) + dfs(A_s, index + 1, b_pl)","-    )","-","-","-print((dfs(As, 0, [])))","+tmp = 1","+for i in range(N):","+    if As[i] % 2 == 0:","+        tmp *= 2","+print((3**N - tmp))"],"diff_only_import_comment":false,"measured_runtime_v0":0.4574659042,"measured_runtime_v1":0.2742938831,"runtime_lift":1.6677947721,"key":["s245503579","s305475228"]}
{"user_id":"u638456847","problem_id":"p02767","language":"python","submission_id_v0":"s863703424","submission_id_v1":"s161615946","cpu_time_v0":171,"cpu_time_v1":20,"memory_v0":13232,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.3,"input":"import numpy as np\n\nimport sys\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\n\n\ndef main():\n\n    N = int(readline())\n\n    X = [int(i) for i in readline().split()]\n\n    X = np.array(X)\n\n\n\n    ans = np.min(np.sum((X - np.arange(1,101).reshape(100, 1))**2, axis=1))\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"import sys\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\n\n\ndef main():\n\n    N = int(readline())\n\n    X = [int(i) for i in readline().split()]\n\n\n\n    ans = float('inf')\n\n    for i in range(1,101):\n\n        tmp = 0\n\n        for x in X:\n\n            tmp += (x - i)**2\n\n        \n\n        if tmp < ans:\n\n            ans = tmp\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":17,"code_v1_loc":23,"code_v0_num_chars":364,"code_v1_num_chars":425,"code_v0_no_empty_lines":"import numpy as np\nimport sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\n\n\ndef main():\n    N = int(readline())\n    X = [int(i) for i in readline().split()]\n    X = np.array(X)\n    ans = np.min(np.sum((X - np.arange(1, 101).reshape(100, 1)) ** 2, axis=1))\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\n\n\ndef main():\n    N = int(readline())\n    X = [int(i) for i in readline().split()]\n    ans = float(\"inf\")\n    for i in range(1, 101):\n        tmp = 0\n        for x in X:\n            tmp += (x - i) ** 2\n        if tmp < ans:\n            ans = tmp\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":26.0869565217,"diff":["-import numpy as np","-    X = np.array(X)","-    ans = np.min(np.sum((X - np.arange(1, 101).reshape(100, 1)) ** 2, axis=1))","+    ans = float(\"inf\")","+    for i in range(1, 101):","+        tmp = 0","+        for x in X:","+            tmp += (x - i) ** 2","+        if tmp < ans:","+            ans = tmp"],"diff_only_import_comment":false,"measured_runtime_v0":1.4478538656,"measured_runtime_v1":0.2722764146,"runtime_lift":5.3175882587,"key":["s863703424","s161615946"]}
{"user_id":"u414877092","problem_id":"p03796","language":"python","submission_id_v0":"s477602976","submission_id_v1":"s500304823","cpu_time_v0":230,"cpu_time_v1":31,"memory_v0":4024,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":86.52,"input":"import math\n\nn=int(eval(input()))\n\nprint((math.factorial(n)%(10**9+7)))","target":"N=int(eval(input()))\n\ndef fact(n):\n\n    val=1\n\n    for i in range(2,n+1):\n\n        val*=i\n\n        val%=1000000007\n\n    return val\n\nprint((fact(N)))","code_v0_loc":3,"code_v1_loc":8,"code_v0_num_chars":63,"code_v1_num_chars":140,"code_v0_no_empty_lines":"import math\n\nn = int(eval(input()))\nprint((math.factorial(n) % (10**9 + 7)))\n","code_v1_no_empty_lines":"N = int(eval(input()))\n\n\ndef fact(n):\n    val = 1\n    for i in range(2, n + 1):\n        val *= i\n        val %= 1000000007\n    return val\n\n\nprint((fact(N)))\n","code_same":false,"relative_loc_diff_percent":62.5,"diff":["-import math","+N = int(eval(input()))","-n = int(eval(input()))","-print((math.factorial(n) % (10**9 + 7)))","+","+def fact(n):","+    val = 1","+    for i in range(2, n + 1):","+        val *= i","+        val %= 1000000007","+    return val","+","+","+print((fact(N)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.5394072673,"measured_runtime_v1":0.259771318,"runtime_lift":2.0764696871,"key":["s477602976","s500304823"]}
{"user_id":"u503227287","problem_id":"p02555","language":"python","submission_id_v0":"s596282425","submission_id_v1":"s780625634","cpu_time_v0":177,"cpu_time_v1":66,"memory_v0":73480,"memory_v1":64124,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":62.71,"input":"from sys import stdin\n\nfrom math import factorial\n\n\n\n\n\ndef combinations_count(n, r):\n\n    return factorial(n) \/\/ (factorial(n - r) * factorial(r))\n\n\n\n\n\ndef combinations_with_replacement_count(n, r):\n\n    return combinations_count(n + r - 1, r)\n\n\n\n\n\ndef main():\n\n    _in = [_.rstrip() for _ in stdin.readlines()]\n\n    S = int(_in[0])  # type:int\n\n    # vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n    min_ = 1\n\n    max_ = S \/\/ 3\n\n    ans = 0\n\n    for i in range(min_, max_ + 1):\n\n        mod = S - i * 3\n\n        ans += combinations_with_replacement_count(mod + 1, i - 1) % (10**9 + 7)\n\n    ans %= (10**9 + 7)\n\n    # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"from sys import stdin\n\n\n\n\n\nclass ModComb():\n\n    def __init__(self, n_max, mod):\n\n        self.fac = None\n\n        self.mod = mod\n\n        self.make_fac_table(n_max)\n\n\n\n    def make_fac_table(self, n_max):\n\n        self.fac = [1] + [0] * n_max\n\n        for i in range(1, n_max + 1):\n\n            self.fac[i] = self.fac[i - 1] * i % self.mod\n\n\n\n    def mod_comb(self, n, k):\n\n        if n == 0 and k == 0:\n\n            return 1\n\n        elif n < k or k < 0:\n\n            return 0\n\n        else:\n\n            return self.fac[n] * pow(self.fac[n - k], self.mod - 2, self.mod) * \\\n\n                pow(self.fac[k], self.mod - 2, self.mod) % self.mod\n\n\n\n    def mod_comb_with_rep(self, n, k):\n\n        return self.mod_comb(n + k - 1, k)\n\n\n\n\n\ndef main():\n\n    _in = [_.rstrip() for _ in stdin.readlines()]\n\n    S = int(_in[0])  # type:int\n\n    # vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\n    ans = 0\n\n    MOD = 10**9 + 7\n\n    modcomb = ModComb(S + 1, MOD)\n\n    min_ = 1\n\n    max_ = S \/\/ 3\n\n    for i in range(min_, max_ + 1):\n\n        res = S - i * 3\n\n        ans += modcomb.mod_comb_with_rep(res + 1, i - 1)\n\n        ans %= MOD\n\n    # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":29,"code_v1_loc":46,"code_v0_num_chars":737,"code_v1_num_chars":1252,"code_v0_no_empty_lines":"from sys import stdin\nfrom math import factorial\n\n\ndef combinations_count(n, r):\n    return factorial(n) \/\/ (factorial(n - r) * factorial(r))\n\n\ndef combinations_with_replacement_count(n, r):\n    return combinations_count(n + r - 1, r)\n\n\ndef main():\n    _in = [_.rstrip() for _ in stdin.readlines()]\n    S = int(_in[0])  # type:int\n    # vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n    min_ = 1\n    max_ = S \/\/ 3\n    ans = 0\n    for i in range(min_, max_ + 1):\n        mod = S - i * 3\n        ans += combinations_with_replacement_count(mod + 1, i - 1) % (10**9 + 7)\n    ans %= 10**9 + 7\n    # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"from sys import stdin\n\n\nclass ModComb:\n    def __init__(self, n_max, mod):\n        self.fac = None\n        self.mod = mod\n        self.make_fac_table(n_max)\n\n    def make_fac_table(self, n_max):\n        self.fac = [1] + [0] * n_max\n        for i in range(1, n_max + 1):\n            self.fac[i] = self.fac[i - 1] * i % self.mod\n\n    def mod_comb(self, n, k):\n        if n == 0 and k == 0:\n            return 1\n        elif n < k or k < 0:\n            return 0\n        else:\n            return (\n                self.fac[n]\n                * pow(self.fac[n - k], self.mod - 2, self.mod)\n                * pow(self.fac[k], self.mod - 2, self.mod)\n                % self.mod\n            )\n\n    def mod_comb_with_rep(self, n, k):\n        return self.mod_comb(n + k - 1, k)\n\n\ndef main():\n    _in = [_.rstrip() for _ in stdin.readlines()]\n    S = int(_in[0])  # type:int\n    # vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n    ans = 0\n    MOD = 10**9 + 7\n    modcomb = ModComb(S + 1, MOD)\n    min_ = 1\n    max_ = S \/\/ 3\n    for i in range(min_, max_ + 1):\n        res = S - i * 3\n        ans += modcomb.mod_comb_with_rep(res + 1, i - 1)\n        ans %= MOD\n    # ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":36.9565217391,"diff":["-from math import factorial","-def combinations_count(n, r):","-    return factorial(n) \/\/ (factorial(n - r) * factorial(r))","+class ModComb:","+    def __init__(self, n_max, mod):","+        self.fac = None","+        self.mod = mod","+        self.make_fac_table(n_max)","+    def make_fac_table(self, n_max):","+        self.fac = [1] + [0] * n_max","+        for i in range(1, n_max + 1):","+            self.fac[i] = self.fac[i - 1] * i % self.mod","-def combinations_with_replacement_count(n, r):","-    return combinations_count(n + r - 1, r)","+    def mod_comb(self, n, k):","+        if n == 0 and k == 0:","+            return 1","+        elif n < k or k < 0:","+            return 0","+        else:","+            return (","+                self.fac[n]","+                * pow(self.fac[n - k], self.mod - 2, self.mod)","+                * pow(self.fac[k], self.mod - 2, self.mod)","+                % self.mod","+            )","+","+    def mod_comb_with_rep(self, n, k):","+        return self.mod_comb(n + k - 1, k)","+    ans = 0","+    MOD = 10**9 + 7","+    modcomb = ModComb(S + 1, MOD)","-    ans = 0","-        mod = S - i * 3","-        ans += combinations_with_replacement_count(mod + 1, i - 1) % (10**9 + 7)","-    ans %= 10**9 + 7","+        res = S - i * 3","+        ans += modcomb.mod_comb_with_rep(res + 1, i - 1)","+        ans %= MOD"],"diff_only_import_comment":false,"measured_runtime_v0":0.1465539389,"measured_runtime_v1":0.1122963901,"runtime_lift":1.3050636693,"key":["s596282425","s780625634"]}
{"user_id":"u970308980","problem_id":"p03309","language":"python","submission_id_v0":"s685396762","submission_id_v1":"s566858224","cpu_time_v0":318,"cpu_time_v1":239,"memory_v0":101332,"memory_v1":27244,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":24.84,"input":"N = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n# \u4e2d\u592e\u5024\n\nB = []\n\nfor i in range(N):\n\n    B.append(A[i] - (i+1))\n\nb = sorted(B)[N\/\/2]\n\n\n\nans = 0\n\nfor i in range(N):\n\n    ans += abs(A[i] - (i + 1) - b)\n\n\n\nprint(ans)\n\n\n","target":"from statistics import median_low\n\n\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n\n\nD = []\n\nfor i in range(N):\n\n    D.append(A[i] - (i+1))\n\n\n\nm = median_low(D)\n\nans = 0\n\nfor d in D:\n\n    ans += abs(d - m)\n\n\n\nprint(ans)\n","code_v0_loc":14,"code_v1_loc":15,"code_v0_num_chars":221,"code_v1_num_chars":229,"code_v0_no_empty_lines":"N = int(eval(input()))\nA = list(map(int, input().split()))\n# \u4e2d\u592e\u5024\nB = []\nfor i in range(N):\n    B.append(A[i] - (i + 1))\nb = sorted(B)[N \/\/ 2]\nans = 0\nfor i in range(N):\n    ans += abs(A[i] - (i + 1) - b)\nprint(ans)\n","code_v1_no_empty_lines":"from statistics import median_low\n\nN = int(eval(input()))\nA = list(map(int, input().split()))\nD = []\nfor i in range(N):\n    D.append(A[i] - (i + 1))\nm = median_low(D)\nans = 0\nfor d in D:\n    ans += abs(d - m)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":6.6666666667,"diff":["+from statistics import median_low","+","-# \u4e2d\u592e\u5024","-B = []","+D = []","-    B.append(A[i] - (i + 1))","-b = sorted(B)[N \/\/ 2]","+    D.append(A[i] - (i + 1))","+m = median_low(D)","-for i in range(N):","-    ans += abs(A[i] - (i + 1) - b)","+for d in D:","+    ans += abs(d - m)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2779975181,"measured_runtime_v1":0.211870023,"runtime_lift":1.3121135029,"key":["s685396762","s566858224"]}
{"user_id":"u893063840","problem_id":"p03801","language":"python","submission_id_v0":"s790222372","submission_id_v1":"s964537161","cpu_time_v0":316,"cpu_time_v1":278,"memory_v0":40396,"memory_v1":31800,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":12.03,"input":"n = int(input())\n\na = list(map(int, input().split()))\n\n\n\ntmp = [[e, n - i] for i, e in enumerate(a)]\n\ntmp.sort(reverse=True)\n\n\n\naa = [[e, n - i] for e, i in tmp] + [[0, -1]]\n\n\n\nv_prev, i_prev = aa[0]\n\ni = 0\n\nans = [0] * n\n\nsm = 0\n\nwhile i < n:\n\n    while aa[i][1] >= i_prev:\n\n        sm += aa[i][0]\n\n        i += 1\n\n\n\n    ans[i_prev] += sm - aa[i][0] * i\n\n    sm = aa[i][0] * i\n\n    v_prev, i_prev = aa[i]\n\n\n\nprint(*ans, sep=\"\\n\")\n","target":"from bisect import bisect_right\n\n\n\nn = int(input())\n\na = list(map(int, input().split()))\n\n\n\nli = [[0, -1]]\n\nfor i, e in enumerate(a):\n\n    if e > li[-1][0]:\n\n        li.append([e, i])\n\n\n\nli = li[::-1]\n\n\n\na.sort()\n\nacc = [0] * (n + 1)\n\nfor i in range(n - 1, -1, -1):\n\n    acc[i] = acc[i+1] + a[i]\n\n\n\nans = [0] * n\n\nsub = 0\n\nans_prev = 0\n\nfor (ep, ip), (e, i) in zip(li, li[1:]):\n\n    j = bisect_right(a, e)\n\n    ans[ip] = acc[j] - e * (n - j)\n\n\n\ni_prev = 0\n\nfor i in range(1, n):\n\n    if ans[i]:\n\n        ans[i_prev] -= ans[i]\n\n        i_prev = i\n\n\n\nprint(*ans, sep=\"\\n\")\n","code_v0_loc":22,"code_v1_loc":31,"code_v0_num_chars":431,"code_v1_num_chars":571,"code_v0_no_empty_lines":"n = int(input())\na = list(map(int, input().split()))\ntmp = [[e, n - i] for i, e in enumerate(a)]\ntmp.sort(reverse=True)\naa = [[e, n - i] for e, i in tmp] + [[0, -1]]\nv_prev, i_prev = aa[0]\ni = 0\nans = [0] * n\nsm = 0\nwhile i < n:\n    while aa[i][1] >= i_prev:\n        sm += aa[i][0]\n        i += 1\n    ans[i_prev] += sm - aa[i][0] * i\n    sm = aa[i][0] * i\n    v_prev, i_prev = aa[i]\nprint(*ans, sep=\"\\n\")\n","code_v1_no_empty_lines":"from bisect import bisect_right\n\nn = int(input())\na = list(map(int, input().split()))\nli = [[0, -1]]\nfor i, e in enumerate(a):\n    if e > li[-1][0]:\n        li.append([e, i])\nli = li[::-1]\na.sort()\nacc = [0] * (n + 1)\nfor i in range(n - 1, -1, -1):\n    acc[i] = acc[i + 1] + a[i]\nans = [0] * n\nsub = 0\nans_prev = 0\nfor (ep, ip), (e, i) in zip(li, li[1:]):\n    j = bisect_right(a, e)\n    ans[ip] = acc[j] - e * (n - j)\ni_prev = 0\nfor i in range(1, n):\n    if ans[i]:\n        ans[i_prev] -= ans[i]\n        i_prev = i\nprint(*ans, sep=\"\\n\")\n","code_same":false,"relative_loc_diff_percent":29.0322580645,"diff":["+from bisect import bisect_right","+","-tmp = [[e, n - i] for i, e in enumerate(a)]","-tmp.sort(reverse=True)","-aa = [[e, n - i] for e, i in tmp] + [[0, -1]]","-v_prev, i_prev = aa[0]","-i = 0","+li = [[0, -1]]","+for i, e in enumerate(a):","+    if e > li[-1][0]:","+        li.append([e, i])","+li = li[::-1]","+a.sort()","+acc = [0] * (n + 1)","+for i in range(n - 1, -1, -1):","+    acc[i] = acc[i + 1] + a[i]","-sm = 0","-while i < n:","-    while aa[i][1] >= i_prev:","-        sm += aa[i][0]","-        i += 1","-    ans[i_prev] += sm - aa[i][0] * i","-    sm = aa[i][0] * i","-    v_prev, i_prev = aa[i]","+sub = 0","+ans_prev = 0","+for (ep, ip), (e, i) in zip(li, li[1:]):","+    j = bisect_right(a, e)","+    ans[ip] = acc[j] - e * (n - j)","+i_prev = 0","+for i in range(1, n):","+    if ans[i]:","+        ans[i_prev] -= ans[i]","+        i_prev = i"],"diff_only_import_comment":false,"measured_runtime_v0":0.2510323788,"measured_runtime_v1":0.1409289612,"runtime_lift":1.7812689216,"key":["s790222372","s964537161"]}
{"user_id":"u970197315","problem_id":"p03013","language":"python","submission_id_v0":"s479618893","submission_id_v1":"s899240371","cpu_time_v0":212,"cpu_time_v1":187,"memory_v0":9612,"memory_v1":7848,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.79,"input":"N, M = list(map(int, input().split()))\n\nA_ = [int(eval(input())) for _ in range(M)]\n\nA = [0] * (N+3)\n\nfor a in A_:\n\n    A[a] = 1\n\ndp = [0] * (N+3)\n\ndp[0] = 1\n\n\n\nmod = 10**9+7\n\n\n\nfor i in range(1, N+1):\n\n    if A[i-1] == 0:\n\n        dp[i] += dp[i-1]\n\n    if A[i-2] == 0:\n\n        dp[i] += dp[i-2]\n\n    dp[i] %= mod\n\nprint((dp[N]))","target":"n,m=list(map(int,input().split()))\n\ndp=[0]*(n+3)\n\na=[int(eval(input())) for i in range(m)]\n\nmod=10**9+7\n\nfor i in range(m):\n\n    dp[a[i]]=-1\n\n\n\ndp[0]=1\n\nif dp[1]!=-1:\n\n    dp[1]+=dp[0]\n\n\n\nfor i in range(n+1):\n\n    if dp[i+2]==-1:\n\n        continue\n\n    if dp[i]!=-1:\n\n        dp[i+2]+=dp[i]\n\n    if dp[i+1]!=-1:\n\n        dp[i+2]+=dp[i+1]\n\n    dp[i+2]%=mod\n\nprint((dp[n]%mod))","code_v0_loc":17,"code_v1_loc":20,"code_v0_num_chars":315,"code_v1_num_chars":361,"code_v0_no_empty_lines":"N, M = list(map(int, input().split()))\nA_ = [int(eval(input())) for _ in range(M)]\nA = [0] * (N + 3)\nfor a in A_:\n    A[a] = 1\ndp = [0] * (N + 3)\ndp[0] = 1\nmod = 10**9 + 7\nfor i in range(1, N + 1):\n    if A[i - 1] == 0:\n        dp[i] += dp[i - 1]\n    if A[i - 2] == 0:\n        dp[i] += dp[i - 2]\n    dp[i] %= mod\nprint((dp[N]))\n","code_v1_no_empty_lines":"n, m = list(map(int, input().split()))\ndp = [0] * (n + 3)\na = [int(eval(input())) for i in range(m)]\nmod = 10**9 + 7\nfor i in range(m):\n    dp[a[i]] = -1\ndp[0] = 1\nif dp[1] != -1:\n    dp[1] += dp[0]\nfor i in range(n + 1):\n    if dp[i + 2] == -1:\n        continue\n    if dp[i] != -1:\n        dp[i + 2] += dp[i]\n    if dp[i + 1] != -1:\n        dp[i + 2] += dp[i + 1]\n    dp[i + 2] %= mod\nprint((dp[n] % mod))\n","code_same":false,"relative_loc_diff_percent":15.0,"diff":["-N, M = list(map(int, input().split()))","-A_ = [int(eval(input())) for _ in range(M)]","-A = [0] * (N + 3)","-for a in A_:","-    A[a] = 1","-dp = [0] * (N + 3)","+n, m = list(map(int, input().split()))","+dp = [0] * (n + 3)","+a = [int(eval(input())) for i in range(m)]","+mod = 10**9 + 7","+for i in range(m):","+    dp[a[i]] = -1","-mod = 10**9 + 7","-for i in range(1, N + 1):","-    if A[i - 1] == 0:","-        dp[i] += dp[i - 1]","-    if A[i - 2] == 0:","-        dp[i] += dp[i - 2]","-    dp[i] %= mod","-print((dp[N]))","+if dp[1] != -1:","+    dp[1] += dp[0]","+for i in range(n + 1):","+    if dp[i + 2] == -1:","+        continue","+    if dp[i] != -1:","+        dp[i + 2] += dp[i]","+    if dp[i + 1] != -1:","+        dp[i + 2] += dp[i + 1]","+    dp[i + 2] %= mod","+print((dp[n] % mod))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2706730585,"measured_runtime_v1":0.2065423949,"runtime_lift":1.3104963688,"key":["s479618893","s899240371"]}
{"user_id":"u875291233","problem_id":"p02635","language":"python","submission_id_v0":"s814224345","submission_id_v1":"s367618693","cpu_time_v0":2432,"cpu_time_v1":323,"memory_v0":86376,"memory_v1":73692,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":86.72,"input":"# coding: utf-8\n\n# Your code here!\n\nimport sys\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\n\n\n#a,b,c,d = map(int,readline().split())\n\ns,k = readline().split()\n\n\n\n\n\na = [len(i) for i in s.split(\"0\")]\n\nwhile a and a[-1] == 0: a.pop()\n\n\n\nif not a:\n\n    print((1))\n\n    exit()\n\n\n\nMOD = 998244353\n\n\n\nM = sum(a)+1\n\nk = min(int(k),M)\n\n\n\n\n\ndp = [[0]*M for _ in range(k+1)] # j \u4f7f\u3063\u3066\uff08\u4e0a\u9650 k\uff09\u3001l \u4f59\u3063\u3066\u308b\n\ndp[0][0] = 1\n\n\n\n#print(a)\n\nfor ai in a[::-1]:\n\n    ndp = [[0]*M for _ in range(k+1)] # j \u4f7f\u3063\u3066\uff08\u4e0a\u9650 k\uff09\u3001l \u4f59\u3063\u3066\u308b\n\n    for j in range(k+1):\n\n        for l in range(M):\n\n            for ll in range(l):\n\n                ndp[j][ll] += dp[j][l]\n\n                ndp[j][ll] %= MOD\n\n            \n\n            V = min(M-l,k-j+1,ai+1)\n\n            for i in range(V):\n\n                #if j+i > k: break\n\n                ndp[j+i][l+i] += dp[j][l]\n\n                ndp[j+i][l+i] %= MOD\n\n    \n\n    dp = ndp\n\n    #print(dp)\n\n\n\nans = 0\n\nfor jj in range(k+1):\n\n    ans += dp[jj][0]\n\n\n\nprint((ans%MOD))\n\n\n\n\n\n\n\n\n\n\n","target":"# coding: utf-8\n\n# Your code here!\n\nimport sys\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\n\n\n#a,b,c,d = map(int,readline().split())\n\ns,k = readline().split()\n\n\n\n\n\na = [len(i) for i in s.split(\"0\")]\n\nwhile a and a[-1] == 0: a.pop()\n\n\n\nif not a:\n\n    print((1))\n\n    exit()\n\n\n\nMOD = 998244353\n\n\n\nM = sum(a)+1\n\nk = min(int(k),M)\n\n\n\n\n\ndp = [[0]*M for _ in range(k+1)] # j \u4f7f\u3063\u3066\uff08\u4e0a\u9650 k\uff09\u3001l \u4f59\u3063\u3066\u308b\n\ndp[0][0] = 1\n\n\n\n#print(a)\n\nfor ai in a[::-1]:\n\n    ndp = [[0]*M for _ in range(k+1)] # j \u4f7f\u3063\u3066\uff08\u4e0a\u9650 k\uff09\u3001l \u4f59\u3063\u3066\u308b\n\n    for j in range(k+1):\n\n        for l in range(M):\n\n            if dp[j][l]:\n\n                for ll in range(l):\n\n                    ndp[j][ll] += dp[j][l]\n\n                    ndp[j][ll] %= MOD\n\n\n\n                V = min(M-l,k-j+1,ai+1)\n\n                for i in range(V):\n\n                    #if j+i > k: break\n\n                    ndp[j+i][l+i] += dp[j][l]\n\n                    ndp[j+i][l+i] %= MOD\n\n    \n\n    dp = ndp\n\n    #print(dp)\n\n\n\nans = 0\n\nfor jj in range(k+1):\n\n    ans += dp[jj][0]\n\n\n\nprint((ans%MOD))\n\n\n\n\n\n\n\n\n\n\n","code_v0_loc":54,"code_v1_loc":55,"code_v0_num_chars":983,"code_v1_num_chars":1029,"code_v0_no_empty_lines":"# coding: utf-8\n# Your code here!\nimport sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\n# a,b,c,d = map(int,readline().split())\ns, k = readline().split()\na = [len(i) for i in s.split(\"0\")]\nwhile a and a[-1] == 0:\n    a.pop()\nif not a:\n    print((1))\n    exit()\nMOD = 998244353\nM = sum(a) + 1\nk = min(int(k), M)\ndp = [[0] * M for _ in range(k + 1)]  # j \u4f7f\u3063\u3066\uff08\u4e0a\u9650 k\uff09\u3001l \u4f59\u3063\u3066\u308b\ndp[0][0] = 1\n# print(a)\nfor ai in a[::-1]:\n    ndp = [[0] * M for _ in range(k + 1)]  # j \u4f7f\u3063\u3066\uff08\u4e0a\u9650 k\uff09\u3001l \u4f59\u3063\u3066\u308b\n    for j in range(k + 1):\n        for l in range(M):\n            for ll in range(l):\n                ndp[j][ll] += dp[j][l]\n                ndp[j][ll] %= MOD\n            V = min(M - l, k - j + 1, ai + 1)\n            for i in range(V):\n                # if j+i > k: break\n                ndp[j + i][l + i] += dp[j][l]\n                ndp[j + i][l + i] %= MOD\n    dp = ndp\n    # print(dp)\nans = 0\nfor jj in range(k + 1):\n    ans += dp[jj][0]\nprint((ans % MOD))\n","code_v1_no_empty_lines":"# coding: utf-8\n# Your code here!\nimport sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\n# a,b,c,d = map(int,readline().split())\ns, k = readline().split()\na = [len(i) for i in s.split(\"0\")]\nwhile a and a[-1] == 0:\n    a.pop()\nif not a:\n    print((1))\n    exit()\nMOD = 998244353\nM = sum(a) + 1\nk = min(int(k), M)\ndp = [[0] * M for _ in range(k + 1)]  # j \u4f7f\u3063\u3066\uff08\u4e0a\u9650 k\uff09\u3001l \u4f59\u3063\u3066\u308b\ndp[0][0] = 1\n# print(a)\nfor ai in a[::-1]:\n    ndp = [[0] * M for _ in range(k + 1)]  # j \u4f7f\u3063\u3066\uff08\u4e0a\u9650 k\uff09\u3001l \u4f59\u3063\u3066\u308b\n    for j in range(k + 1):\n        for l in range(M):\n            if dp[j][l]:\n                for ll in range(l):\n                    ndp[j][ll] += dp[j][l]\n                    ndp[j][ll] %= MOD\n                V = min(M - l, k - j + 1, ai + 1)\n                for i in range(V):\n                    # if j+i > k: break\n                    ndp[j + i][l + i] += dp[j][l]\n                    ndp[j + i][l + i] %= MOD\n    dp = ndp\n    # print(dp)\nans = 0\nfor jj in range(k + 1):\n    ans += dp[jj][0]\nprint((ans % MOD))\n","code_same":false,"relative_loc_diff_percent":1.8181818182,"diff":["-            for ll in range(l):","-                ndp[j][ll] += dp[j][l]","-                ndp[j][ll] %= MOD","-            V = min(M - l, k - j + 1, ai + 1)","-            for i in range(V):","-                # if j+i > k: break","-                ndp[j + i][l + i] += dp[j][l]","-                ndp[j + i][l + i] %= MOD","+            if dp[j][l]:","+                for ll in range(l):","+                    ndp[j][ll] += dp[j][l]","+                    ndp[j][ll] %= MOD","+                V = min(M - l, k - j + 1, ai + 1)","+                for i in range(V):","+                    # if j+i > k: break","+                    ndp[j + i][l + i] += dp[j][l]","+                    ndp[j + i][l + i] %= MOD"],"diff_only_import_comment":false,"measured_runtime_v0":0.6928678901,"measured_runtime_v1":0.2517437787,"runtime_lift":2.7522741323,"key":["s814224345","s367618693"]}
{"user_id":"u573754721","problem_id":"p02792","language":"python","submission_id_v0":"s001079757","submission_id_v1":"s791261959","cpu_time_v0":461,"cpu_time_v1":326,"memory_v0":40684,"memory_v1":40428,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":29.28,"input":"n=int(eval(input()))\n\nD={}\n\nDD={}\n\nfor i in range(1,n+1):\n\n   s=(str(i)[0],str(i)[-1])\n\n   t=(str(i)[-1],str(i)[0])\n\n   if s not in D:\n\n      D[s]=1\n\n   else:\n\n      D[s]+=1\n\n   if t not in DD:\n\n      DD[t]=1\n\n   else:\n\n      DD[t]+=1\n\nans=0\n\nfor i in D:\n\n   if i in DD:\n\n      ans+=D[i]*DD[i]\n\nprint(ans)\n\n      ","target":"n=int(eval(input()))\n\nD={}\n\nfor i in range(1,n+1):\n\n   s=(str(i)[0],str(i)[-1])\n\n   if s in D:\n\n      D[s]+=1\n\n   else:\n\n      D[s]=1\n\n\n\nans=0\n\nfor aj,bj in D:\n\n   if (bj,aj) in D:\n\n      ans+=D[(aj,bj)]*D[(bj,aj)]\n\nprint(ans)","code_v0_loc":20,"code_v1_loc":14,"code_v0_num_chars":307,"code_v1_num_chars":220,"code_v0_no_empty_lines":"n = int(eval(input()))\nD = {}\nDD = {}\nfor i in range(1, n + 1):\n    s = (str(i)[0], str(i)[-1])\n    t = (str(i)[-1], str(i)[0])\n    if s not in D:\n        D[s] = 1\n    else:\n        D[s] += 1\n    if t not in DD:\n        DD[t] = 1\n    else:\n        DD[t] += 1\nans = 0\nfor i in D:\n    if i in DD:\n        ans += D[i] * DD[i]\nprint(ans)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nD = {}\nfor i in range(1, n + 1):\n    s = (str(i)[0], str(i)[-1])\n    if s in D:\n        D[s] += 1\n    else:\n        D[s] = 1\nans = 0\nfor aj, bj in D:\n    if (bj, aj) in D:\n        ans += D[(aj, bj)] * D[(bj, aj)]\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":30.0,"diff":["-DD = {}","-    t = (str(i)[-1], str(i)[0])","-    if s not in D:","+    if s in D:","+        D[s] += 1","+    else:","-    else:","-        D[s] += 1","-    if t not in DD:","-        DD[t] = 1","-    else:","-        DD[t] += 1","-for i in D:","-    if i in DD:","-        ans += D[i] * DD[i]","+for aj, bj in D:","+    if (bj, aj) in D:","+        ans += D[(aj, bj)] * D[(bj, aj)]"],"diff_only_import_comment":false,"measured_runtime_v0":0.4521915812,"measured_runtime_v1":0.3498246684,"runtime_lift":1.2926234825,"key":["s001079757","s791261959"]}
{"user_id":"u092301301","problem_id":"p03013","language":"python","submission_id_v0":"s709013905","submission_id_v1":"s416556005","cpu_time_v0":482,"cpu_time_v1":235,"memory_v0":56536,"memory_v1":53084,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":51.24,"input":"n,m=[int(i) for i in input().split()]\n\ndp=[1,1] ;a=set() ; mod=(10**9+7)\n\nfor i in range(m):\n\n    a.add(int(eval(input())))\n\nif 1 in a: dp[1]=0\n\nfor i in range(2,n+1):\n\n    if i not in a:\n\n        dp.append((dp[-1]+dp[-2])%mod)\n\n    else:\n\n        dp.append(0)\n\nprint((dp[-1]))\n\n    \n","target":"import sys\n\ninput = lambda: sys.stdin.readline().rstrip()\n\nn,m=[int(i) for i in input().split()]\n\ndp=[1,1] ;a=set() ; mod=(10**9+7)\n\nfor i in range(m):\n\n    a.add(int(eval(input())))\n\nif 1 in a: dp[1]=0\n\nfor i in range(2,n+1):\n\n    if i not in a:\n\n        dp.append((dp[-1]+dp[-2])%mod)\n\n    else:\n\n        dp.append(0)\n\nprint((dp[-1]))\n\n    \n","code_v0_loc":12,"code_v1_loc":14,"code_v0_num_chars":276,"code_v1_num_chars":335,"code_v0_no_empty_lines":"n, m = [int(i) for i in input().split()]\ndp = [1, 1]\na = set()\nmod = 10**9 + 7\nfor i in range(m):\n    a.add(int(eval(input())))\nif 1 in a:\n    dp[1] = 0\nfor i in range(2, n + 1):\n    if i not in a:\n        dp.append((dp[-1] + dp[-2]) % mod)\n    else:\n        dp.append(0)\nprint((dp[-1]))\n","code_v1_no_empty_lines":"import sys\n\ninput = lambda: sys.stdin.readline().rstrip()\nn, m = [int(i) for i in input().split()]\ndp = [1, 1]\na = set()\nmod = 10**9 + 7\nfor i in range(m):\n    a.add(int(eval(input())))\nif 1 in a:\n    dp[1] = 0\nfor i in range(2, n + 1):\n    if i not in a:\n        dp.append((dp[-1] + dp[-2]) % mod)\n    else:\n        dp.append(0)\nprint((dp[-1]))\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["+import sys","+","+input = lambda: sys.stdin.readline().rstrip()"],"diff_only_import_comment":false,"measured_runtime_v0":0.1801067755,"measured_runtime_v1":0.0061562738,"runtime_lift":29.2558095784,"key":["s709013905","s416556005"]}
{"user_id":"u546338822","problem_id":"p03013","language":"python","submission_id_v0":"s185507084","submission_id_v1":"s217859496","cpu_time_v0":410,"cpu_time_v1":152,"memory_v0":21760,"memory_v1":12836,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":62.93,"input":"from functools import lru_cache\n\n\n\ndef main():\n\n    n,m = list(map(int,input().split()))\n\n    import numpy as np\n\n    ans = np.ones(n+1,dtype=int)*-1\n\n    ans[0] = 1\n\n    mod = 10**9+7\n\n    for _ in range(m):\n\n        a = int(eval(input()))\n\n        ans[a]=0\n\n    if ans[1]!=0:\n\n        ans[1]=1\n\n    for i in range(2,n+1):\n\n        if ans[i]!=0:\n\n            ans[i] = (ans[i-1]+ans[i-2])%mod\n\n    print((ans[-1]))\n\n        \n\n\n\nif __name__ == \"__main__\":\n\n    main()","target":"def main():\n\n    n,m = list(map(int,input().split()))\n\n    dp = [0 for i in range(n+1)]\n\n    mod = 10**9+7\n\n    for i in range(m):\n\n        a = int(eval(input()))\n\n        dp[a] = -1\n\n    dp[0] = 1\n\n    if dp[1]!=-1:\n\n        dp[1] = 1\n\n    for i in range(2,n+1):\n\n        if dp[i]==-1:\n\n            continue\n\n        if dp[i-1]!=-1 and dp[i-2]!=-1:\n\n            dp[i] = dp[i-1] + dp[i-2]\n\n            dp[i] = dp[i]%mod\n\n        elif dp[i-1]!=-1 and dp[i-2]==-1:\n\n            dp[i] = dp[i-1]\n\n        elif dp[i-1]==-1 and dp[i-2]!=-1:\n\n            dp[i] = dp[i-2]\n\n        else:\n\n            dp[i] = 0\n\n    print((dp[-1]))\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":21,"code_v1_loc":26,"code_v0_num_chars":452,"code_v1_num_chars":651,"code_v0_no_empty_lines":"from functools import lru_cache\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    import numpy as np\n\n    ans = np.ones(n + 1, dtype=int) * -1\n    ans[0] = 1\n    mod = 10**9 + 7\n    for _ in range(m):\n        a = int(eval(input()))\n        ans[a] = 0\n    if ans[1] != 0:\n        ans[1] = 1\n    for i in range(2, n + 1):\n        if ans[i] != 0:\n            ans[i] = (ans[i - 1] + ans[i - 2]) % mod\n    print((ans[-1]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def main():\n    n, m = list(map(int, input().split()))\n    dp = [0 for i in range(n + 1)]\n    mod = 10**9 + 7\n    for i in range(m):\n        a = int(eval(input()))\n        dp[a] = -1\n    dp[0] = 1\n    if dp[1] != -1:\n        dp[1] = 1\n    for i in range(2, n + 1):\n        if dp[i] == -1:\n            continue\n        if dp[i - 1] != -1 and dp[i - 2] != -1:\n            dp[i] = dp[i - 1] + dp[i - 2]\n            dp[i] = dp[i] % mod\n        elif dp[i - 1] != -1 and dp[i - 2] == -1:\n            dp[i] = dp[i - 1]\n        elif dp[i - 1] == -1 and dp[i - 2] != -1:\n            dp[i] = dp[i - 2]\n        else:\n            dp[i] = 0\n    print((dp[-1]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":19.2307692308,"diff":["-from functools import lru_cache","-","-","-    import numpy as np","-","-    ans = np.ones(n + 1, dtype=int) * -1","-    ans[0] = 1","+    dp = [0 for i in range(n + 1)]","-    for _ in range(m):","+    for i in range(m):","-        ans[a] = 0","-    if ans[1] != 0:","-        ans[1] = 1","+        dp[a] = -1","+    dp[0] = 1","+    if dp[1] != -1:","+        dp[1] = 1","-        if ans[i] != 0:","-            ans[i] = (ans[i - 1] + ans[i - 2]) % mod","-    print((ans[-1]))","+        if dp[i] == -1:","+            continue","+        if dp[i - 1] != -1 and dp[i - 2] != -1:","+            dp[i] = dp[i - 1] + dp[i - 2]","+            dp[i] = dp[i] % mod","+        elif dp[i - 1] != -1 and dp[i - 2] == -1:","+            dp[i] = dp[i - 1]","+        elif dp[i - 1] == -1 and dp[i - 2] != -1:","+            dp[i] = dp[i - 2]","+        else:","+            dp[i] = 0","+    print((dp[-1]))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3205960586,"measured_runtime_v1":0.2082385263,"runtime_lift":6.3417470423,"key":["s185507084","s217859496"]}
{"user_id":"u486297080","problem_id":"p03796","language":"python","submission_id_v0":"s015826115","submission_id_v1":"s256698183","cpu_time_v0":231,"cpu_time_v1":37,"memory_v0":4020,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":83.98,"input":"import math\n\n\n\nN = int(eval(input()))\n\nans = 0\n\n\n\nans =math.factorial(N) % (10**9 +7)\n\n\n\nprint(ans)","target":"N = int(eval(input()))\n\npower = 1\n\n\n\nfor i in range(N):\n\n    power = ((i+1) * power) % 1000000007\n\n\n\nprint(power)","code_v0_loc":8,"code_v1_loc":7,"code_v0_num_chars":93,"code_v1_num_chars":107,"code_v0_no_empty_lines":"import math\n\nN = int(eval(input()))\nans = 0\nans = math.factorial(N) % (10**9 + 7)\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\npower = 1\nfor i in range(N):\n    power = ((i + 1) * power) % 1000000007\nprint(power)\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-import math","-","-ans = 0","-ans = math.factorial(N) % (10**9 + 7)","-print(ans)","+power = 1","+for i in range(N):","+    power = ((i + 1) * power) % 1000000007","+print(power)"],"diff_only_import_comment":false,"measured_runtime_v0":0.5450858786,"measured_runtime_v1":0.2547745125,"runtime_lift":2.1394835503,"key":["s015826115","s256698183"]}
{"user_id":"u023958502","problem_id":"p03078","language":"python","submission_id_v0":"s928848207","submission_id_v1":"s406476908","cpu_time_v0":1927,"cpu_time_v1":827,"memory_v0":4720,"memory_v1":4592,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":57.08,"input":"X,Y,Z,K = list(map(int,input().split()))\n\nA = list(map(int,input().split()))\n\nB = list(map(int,input().split()))\n\nC = list(map(int,input().split()))\n\nasort,bsort,csort = sorted(A,reverse=True),sorted(B,reverse=True),sorted(C,reverse=True)\n\nprint((asort[0] + bsort[0] + csort[0]))\n\nalready = [[0,0,0]]\n\nx,y,z = 0,0,0\n\nplace_sum = []\n\ncheck = []\n\nfor k in range(K - 1):\n\n    if [x + 1,y,z] not in already and x + 1 < X:\n\n        already.append([x + 1,y,z])\n\n        place_sum.append([x + 1,y,z])\n\n        check.append(asort[x + 1] + bsort[y] + csort[z])\n\n    if [x,y + 1,z] not in already and y + 1 < Y:\n\n        already.append([x,y + 1,z])\n\n        place_sum.append([x,y + 1,z])\n\n        check.append(asort[x] + bsort[y + 1] + csort[z])\n\n    if [x,y,z + 1] not in already and z + 1 < Z:\n\n        already.append([x,y,z + 1])\n\n        place_sum.append([x,y,z + 1])\n\n        check.append(asort[x] + bsort[y] + csort[z + 1])\n\n    print((max(check)))\n\n    x,y,z = place_sum[check.index(max(check))][0],place_sum[check.index(max(check))][1],place_sum[check.index(max(check))][2]\n\n    place_sum.pop(check.index(max(check)))\n\n    check.remove(max(check))","target":"import heapq\n\nX,Y,Z,K = list(map(int,input().split()))\n\nA = list(map(int,input().split()))\n\nB = list(map(int,input().split()))\n\nC = list(map(int,input().split()))\n\nasort,bsort,csort = sorted(A,reverse=True),sorted(B,reverse=True),sorted(C,reverse=True)\n\nalready = [[0,0,0]]\n\nprint((asort[0] + bsort[0] + csort[0]))\n\nx,y,z = 0,0,0\n\ncheck = []\n\nfor k in range(K - 1):\n\n    if [x + 1,y,z] not in already and x + 1 < X:\n\n        already.append([x + 1,y,z])\n\n        heapq.heappush(check,(-(asort[x + 1] + bsort[y] + csort[z]),x + 1,y,z))\n\n    if [x,y + 1,z] not in already and y + 1 < Y:\n\n        already.append([x,y + 1,z])\n\n        heapq.heappush(check,(-(asort[x] + bsort[y + 1] + csort[z]),x,y + 1,z))\n\n    if [x,y,z + 1] not in already and z + 1 < Z:\n\n        already.append([x,y,z + 1])\n\n        heapq.heappush(check,(-(asort[x] + bsort[y] + csort[z + 1]),x,y,z + 1))\n\n    maxsum = heapq.heappop(check)\n\n    print((-maxsum[0]))\n\n    x,y,z = maxsum[1],maxsum[2],maxsum[3]","code_v0_loc":27,"code_v1_loc":23,"code_v0_num_chars":1135,"code_v1_num_chars":962,"code_v0_no_empty_lines":"X, Y, Z, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\nasort, bsort, csort = (\n    sorted(A, reverse=True),\n    sorted(B, reverse=True),\n    sorted(C, reverse=True),\n)\nprint((asort[0] + bsort[0] + csort[0]))\nalready = [[0, 0, 0]]\nx, y, z = 0, 0, 0\nplace_sum = []\ncheck = []\nfor k in range(K - 1):\n    if [x + 1, y, z] not in already and x + 1 < X:\n        already.append([x + 1, y, z])\n        place_sum.append([x + 1, y, z])\n        check.append(asort[x + 1] + bsort[y] + csort[z])\n    if [x, y + 1, z] not in already and y + 1 < Y:\n        already.append([x, y + 1, z])\n        place_sum.append([x, y + 1, z])\n        check.append(asort[x] + bsort[y + 1] + csort[z])\n    if [x, y, z + 1] not in already and z + 1 < Z:\n        already.append([x, y, z + 1])\n        place_sum.append([x, y, z + 1])\n        check.append(asort[x] + bsort[y] + csort[z + 1])\n    print((max(check)))\n    x, y, z = (\n        place_sum[check.index(max(check))][0],\n        place_sum[check.index(max(check))][1],\n        place_sum[check.index(max(check))][2],\n    )\n    place_sum.pop(check.index(max(check)))\n    check.remove(max(check))\n","code_v1_no_empty_lines":"import heapq\n\nX, Y, Z, K = list(map(int, input().split()))\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list(map(int, input().split()))\nasort, bsort, csort = (\n    sorted(A, reverse=True),\n    sorted(B, reverse=True),\n    sorted(C, reverse=True),\n)\nalready = [[0, 0, 0]]\nprint((asort[0] + bsort[0] + csort[0]))\nx, y, z = 0, 0, 0\ncheck = []\nfor k in range(K - 1):\n    if [x + 1, y, z] not in already and x + 1 < X:\n        already.append([x + 1, y, z])\n        heapq.heappush(check, (-(asort[x + 1] + bsort[y] + csort[z]), x + 1, y, z))\n    if [x, y + 1, z] not in already and y + 1 < Y:\n        already.append([x, y + 1, z])\n        heapq.heappush(check, (-(asort[x] + bsort[y + 1] + csort[z]), x, y + 1, z))\n    if [x, y, z + 1] not in already and z + 1 < Z:\n        already.append([x, y, z + 1])\n        heapq.heappush(check, (-(asort[x] + bsort[y] + csort[z + 1]), x, y, z + 1))\n    maxsum = heapq.heappop(check)\n    print((-maxsum[0]))\n    x, y, z = maxsum[1], maxsum[2], maxsum[3]\n","code_same":false,"relative_loc_diff_percent":14.8148148148,"diff":["+import heapq","+","+already = [[0, 0, 0]]","-already = [[0, 0, 0]]","-place_sum = []","-        place_sum.append([x + 1, y, z])","-        check.append(asort[x + 1] + bsort[y] + csort[z])","+        heapq.heappush(check, (-(asort[x + 1] + bsort[y] + csort[z]), x + 1, y, z))","-        place_sum.append([x, y + 1, z])","-        check.append(asort[x] + bsort[y + 1] + csort[z])","+        heapq.heappush(check, (-(asort[x] + bsort[y + 1] + csort[z]), x, y + 1, z))","-        place_sum.append([x, y, z + 1])","-        check.append(asort[x] + bsort[y] + csort[z + 1])","-    print((max(check)))","-    x, y, z = (","-        place_sum[check.index(max(check))][0],","-        place_sum[check.index(max(check))][1],","-        place_sum[check.index(max(check))][2],","-    )","-    place_sum.pop(check.index(max(check)))","-    check.remove(max(check))","+        heapq.heappush(check, (-(asort[x] + bsort[y] + csort[z + 1]), x, y, z + 1))","+    maxsum = heapq.heappop(check)","+    print((-maxsum[0]))","+    x, y, z = maxsum[1], maxsum[2], maxsum[3]"],"diff_only_import_comment":false,"measured_runtime_v0":0.2974797392,"measured_runtime_v1":0.2210724421,"runtime_lift":1.3456210843,"key":["s928848207","s406476908"]}
{"user_id":"u589913372","problem_id":"p02725","language":"python","submission_id_v0":"s166950001","submission_id_v1":"s469408932","cpu_time_v0":439,"cpu_time_v1":117,"memory_v0":42676,"memory_v1":26420,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":73.35,"input":"import numpy as np\n\nk,n = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nb = np.zeros(n)\n\nfor i in range(0,n-1):\n\n  b[i] = a[i+1] -a[i]\n\n  \n\nb[n-1] = k - a[n-1] + a[0]\n\nans = k - max(b)\n\nprint((int(ans)))","target":"k,n = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nb = [0 for i in range(n)]\n\nfor i in range(0,n-1):\n\n  b[i] = a[i+1] -a[i]\n\n\n\nb[n-1] = k - a[n-1] + a[0]\n\nans = k - max(b)\n\nprint((int(ans)))","code_v0_loc":10,"code_v1_loc":9,"code_v0_num_chars":219,"code_v1_num_chars":207,"code_v0_no_empty_lines":"import numpy as np\n\nk, n = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = np.zeros(n)\nfor i in range(0, n - 1):\n    b[i] = a[i + 1] - a[i]\nb[n - 1] = k - a[n - 1] + a[0]\nans = k - max(b)\nprint((int(ans)))\n","code_v1_no_empty_lines":"k, n = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = [0 for i in range(n)]\nfor i in range(0, n - 1):\n    b[i] = a[i + 1] - a[i]\nb[n - 1] = k - a[n - 1] + a[0]\nans = k - max(b)\nprint((int(ans)))\n","code_same":false,"relative_loc_diff_percent":10.0,"diff":["-import numpy as np","-","-b = np.zeros(n)","+b = [0 for i in range(n)]"],"diff_only_import_comment":false,"measured_runtime_v0":1.4599362758,"measured_runtime_v1":0.2181204931,"runtime_lift":6.6932558928,"key":["s166950001","s469408932"]}
{"user_id":"u652656291","problem_id":"p02996","language":"python","submission_id_v0":"s858472018","submission_id_v1":"s501268558","cpu_time_v0":821,"cpu_time_v1":719,"memory_v0":49964,"memory_v1":33396,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":12.42,"input":"import numpy as np\n\n# \u7de0\u5207\u304c\u65e9\u3044\u3082\u306e\u304b\u3089\u51e6\u7406\n\nN = int(eval(input()))\n\nAB = np.array([[int(x) for x in input().split()] for _ in range(N)])\n\nA = AB[:,0]\n\nB = AB[:,1]\n\nidx = B.argsort()\n\nA = A[idx]\n\nB = B[idx]\n\nnp.cumsum(A, out = A)\n\nbl = (A <= B).all()\n\nanswer = 'Yes' if bl else 'No'\n\nprint(answer)\n","target":"def main():\n\n    N = int(eval(input()))\n\n    A = []\n\n    for _ in range(N):\n\n        a, b = list(map(int, input().split()))\n\n        A.append((a, b))\n\n\n\n    A = sorted(A, key=lambda x: x[1])\n\n    time = 0\n\n    for a, b in A:\n\n        time += a\n\n        if time > b:\n\n            return 'No'\n\n\n\n    return 'Yes'\n\n\n\nif __name__ == '__main__':\n\n    print((main()))\n","code_v0_loc":13,"code_v1_loc":18,"code_v0_num_chars":282,"code_v1_num_chars":348,"code_v0_no_empty_lines":"import numpy as np\n\n# \u7de0\u5207\u304c\u65e9\u3044\u3082\u306e\u304b\u3089\u51e6\u7406\nN = int(eval(input()))\nAB = np.array([[int(x) for x in input().split()] for _ in range(N)])\nA = AB[:, 0]\nB = AB[:, 1]\nidx = B.argsort()\nA = A[idx]\nB = B[idx]\nnp.cumsum(A, out=A)\nbl = (A <= B).all()\nanswer = \"Yes\" if bl else \"No\"\nprint(answer)\n","code_v1_no_empty_lines":"def main():\n    N = int(eval(input()))\n    A = []\n    for _ in range(N):\n        a, b = list(map(int, input().split()))\n        A.append((a, b))\n    A = sorted(A, key=lambda x: x[1])\n    time = 0\n    for a, b in A:\n        time += a\n        if time > b:\n            return \"No\"\n    return \"Yes\"\n\n\nif __name__ == \"__main__\":\n    print((main()))\n","code_same":false,"relative_loc_diff_percent":27.7777777778,"diff":["-import numpy as np","+def main():","+    N = int(eval(input()))","+    A = []","+    for _ in range(N):","+        a, b = list(map(int, input().split()))","+        A.append((a, b))","+    A = sorted(A, key=lambda x: x[1])","+    time = 0","+    for a, b in A:","+        time += a","+        if time > b:","+            return \"No\"","+    return \"Yes\"","-# \u7de0\u5207\u304c\u65e9\u3044\u3082\u306e\u304b\u3089\u51e6\u7406","-N = int(eval(input()))","-AB = np.array([[int(x) for x in input().split()] for _ in range(N)])","-A = AB[:, 0]","-B = AB[:, 1]","-idx = B.argsort()","-A = A[idx]","-B = B[idx]","-np.cumsum(A, out=A)","-bl = (A <= B).all()","-answer = \"Yes\" if bl else \"No\"","-print(answer)","+","+if __name__ == \"__main__\":","+    print((main()))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3914355583,"measured_runtime_v1":0.2070376647,"runtime_lift":6.7206880477,"key":["s858472018","s501268558"]}
{"user_id":"u969190727","problem_id":"p03371","language":"python","submission_id_v0":"s944521020","submission_id_v1":"s713825460","cpu_time_v0":121,"cpu_time_v1":17,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":85.95,"input":"a,b,c,x,y=list(map(int,input().split()))\n\nans=a*x+b*y\n\nn=max(x,y)\n\nfor i in range(1,n+1):\n\n  ans=min(ans,2*i*c+a*max(0,x-i)+b*max(0,y-i))\n\nprint(ans)\n\n\n\n\n","target":"a,b,c,x,y=list(map(int,input().split()))\n\nans1=a*x+b*y\n\nans2=2*c*max(x,y)\n\nans3=2*c*min(x,y)+a*(x-min(x,y))+b*(y-min(x,y))\n\nprint((min(ans1,ans2,ans3)))","code_v0_loc":8,"code_v1_loc":5,"code_v0_num_chars":148,"code_v1_num_chars":144,"code_v0_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nans = a * x + b * y\nn = max(x, y)\nfor i in range(1, n + 1):\n    ans = min(ans, 2 * i * c + a * max(0, x - i) + b * max(0, y - i))\nprint(ans)\n","code_v1_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nans1 = a * x + b * y\nans2 = 2 * c * max(x, y)\nans3 = 2 * c * min(x, y) + a * (x - min(x, y)) + b * (y - min(x, y))\nprint((min(ans1, ans2, ans3)))\n","code_same":false,"relative_loc_diff_percent":37.5,"diff":["-ans = a * x + b * y","-n = max(x, y)","-for i in range(1, n + 1):","-    ans = min(ans, 2 * i * c + a * max(0, x - i) + b * max(0, y - i))","-print(ans)","+ans1 = a * x + b * y","+ans2 = 2 * c * max(x, y)","+ans3 = 2 * c * min(x, y) + a * (x - min(x, y)) + b * (y - min(x, y))","+print((min(ans1, ans2, ans3)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.247306282,"measured_runtime_v1":0.1774894836,"runtime_lift":1.3933573811,"key":["s944521020","s713825460"]}
{"user_id":"u879870653","problem_id":"p03325","language":"python","submission_id_v0":"s933212033","submission_id_v1":"s130104970","cpu_time_v0":143,"cpu_time_v1":121,"memory_v0":4148,"memory_v1":4148,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.38,"input":"answer = 0\n\nN = int(eval(input()))\n\nA = list(map(int,input().split()))\n\nfor i in range(N) :\n\n    while A[i] % 2 == 0 :\n\n        A[i] = A[i] \/ 2\n\n        answer += 1\n\nprint(answer)\n\n\n","target":"N = int(eval(input()))\n\nL = list(map(int,input().split()))\n\n\n\nans = 0\n\nfor i in range(N) :\n\n    flag = 0\n\n    while flag == 0 :\n\n        if (L[i] % 2) == 0 :\n\n            ans += 1\n\n            L[i] = L[i]\/\/2\n\n        else :\n\n            flag = 1\n\nprint(ans)\n","code_v0_loc":9,"code_v1_loc":13,"code_v0_num_chars":176,"code_v1_num_chars":252,"code_v0_no_empty_lines":"answer = 0\nN = int(eval(input()))\nA = list(map(int, input().split()))\nfor i in range(N):\n    while A[i] % 2 == 0:\n        A[i] = A[i] \/ 2\n        answer += 1\nprint(answer)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nL = list(map(int, input().split()))\nans = 0\nfor i in range(N):\n    flag = 0\n    while flag == 0:\n        if (L[i] % 2) == 0:\n            ans += 1\n            L[i] = L[i] \/\/ 2\n        else:\n            flag = 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":30.7692307692,"diff":["-answer = 0","-A = list(map(int, input().split()))","+L = list(map(int, input().split()))","+ans = 0","-    while A[i] % 2 == 0:","-        A[i] = A[i] \/ 2","-        answer += 1","-print(answer)","+    flag = 0","+    while flag == 0:","+        if (L[i] % 2) == 0:","+            ans += 1","+            L[i] = L[i] \/\/ 2","+        else:","+            flag = 1","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2890260706,"measured_runtime_v1":0.1461268132,"runtime_lift":1.9779126383,"key":["s933212033","s130104970"]}
{"user_id":"u390193191","problem_id":"p02647","language":"python","submission_id_v0":"s850341435","submission_id_v1":"s306393223","cpu_time_v0":1961,"cpu_time_v1":306,"memory_v0":185864,"memory_v1":162940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":84.4,"input":"import sys\n\nfrom collections import defaultdict, Counter, namedtuple, deque\n\nimport itertools\n\nimport functools\n\nimport bisect\n\nimport heapq\n\nimport math\n\n# from fractions import gcd\n\n\n\nMOD = 10 ** 9 + 7\n\n# MOD = 998244353\n\n# sys.setrecursionlimit(10**8)\n\n\n\nN, k = list(map(int, input().split()))\n\nprev_arr = list(map(int, input().split()))\n\n\n\n# N = k = 200000\n\n# prev_arr = [0]*N\n\n\n\ncount = 0\n\nfor i in range(min(k, 3*int(math.log(N))+5)):\n\n    que = []\n\n    arr = [0]*N\n\n    for j in range(N):\n\n        heapq.heappush(que, j+prev_arr[j])\n\n        while que[0] < j:\n\n            heapq.heappop(que)\n\n        arr[j] += len(que)\n\n    # print(arr)\n\n\n\n    que = []\n\n    for j in reversed(list(range(N))):\n\n        heapq.heappush(que, -(j-prev_arr[j]))\n\n        while -que[0] > j:\n\n            heapq.heappop(que)\n\n        arr[j] += len(que) - 1\n\n\n\n    prev_arr = arr\n\n    count += 1\n\n\n\n# print(count)\n\nprint((*prev_arr))\n","target":"import sys\n\nfrom collections import defaultdict, Counter, namedtuple, deque\n\nimport itertools\n\nimport functools\n\nimport bisect\n\nimport heapq\n\nimport math\n\n# from fractions import gcd\n\n\n\nMOD = 10 ** 9 + 7\n\n# MOD = 998244353\n\n# sys.setrecursionlimit(10**8)\n\n\n\nN, k = list(map(int, input().split()))\n\nprev_arr = list(map(int, input().split()))\n\n\n\ncount = 0\n\nfor i in range(min(k, 3*int(math.log(N))+10)):\n\n    arr = [0]*N\n\n    for j in range(N):\n\n        left = max(0, j-prev_arr[j])\n\n        right = min(N-1, j+prev_arr[j])\n\n        arr[left] += 1\n\n        if right < N-1:\n\n            arr[right+1] -= 1\n\n\n\n    # print(arr)\n\n    for j in range(1, N):\n\n        arr[j] += arr[j-1]\n\n\n\n    # print(arr)\n\n    prev_arr = arr\n\n    count += 1\n\n\n\n# print(count)\n\nprint((*prev_arr))\n","code_v0_loc":42,"code_v1_loc":36,"code_v0_num_chars":902,"code_v1_num_chars":763,"code_v0_no_empty_lines":"import sys\nfrom collections import defaultdict, Counter, namedtuple, deque\nimport itertools\nimport functools\nimport bisect\nimport heapq\nimport math\n\n# from fractions import gcd\nMOD = 10**9 + 7\n# MOD = 998244353\n# sys.setrecursionlimit(10**8)\nN, k = list(map(int, input().split()))\nprev_arr = list(map(int, input().split()))\n# N = k = 200000\n# prev_arr = [0]*N\ncount = 0\nfor i in range(min(k, 3 * int(math.log(N)) + 5)):\n    que = []\n    arr = [0] * N\n    for j in range(N):\n        heapq.heappush(que, j + prev_arr[j])\n        while que[0] < j:\n            heapq.heappop(que)\n        arr[j] += len(que)\n    # print(arr)\n    que = []\n    for j in reversed(list(range(N))):\n        heapq.heappush(que, -(j - prev_arr[j]))\n        while -que[0] > j:\n            heapq.heappop(que)\n        arr[j] += len(que) - 1\n    prev_arr = arr\n    count += 1\n# print(count)\nprint((*prev_arr))\n","code_v1_no_empty_lines":"import sys\nfrom collections import defaultdict, Counter, namedtuple, deque\nimport itertools\nimport functools\nimport bisect\nimport heapq\nimport math\n\n# from fractions import gcd\nMOD = 10**9 + 7\n# MOD = 998244353\n# sys.setrecursionlimit(10**8)\nN, k = list(map(int, input().split()))\nprev_arr = list(map(int, input().split()))\ncount = 0\nfor i in range(min(k, 3 * int(math.log(N)) + 10)):\n    arr = [0] * N\n    for j in range(N):\n        left = max(0, j - prev_arr[j])\n        right = min(N - 1, j + prev_arr[j])\n        arr[left] += 1\n        if right < N - 1:\n            arr[right + 1] -= 1\n    # print(arr)\n    for j in range(1, N):\n        arr[j] += arr[j - 1]\n    # print(arr)\n    prev_arr = arr\n    count += 1\n# print(count)\nprint((*prev_arr))\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["-# N = k = 200000","-# prev_arr = [0]*N","-for i in range(min(k, 3 * int(math.log(N)) + 5)):","-    que = []","+for i in range(min(k, 3 * int(math.log(N)) + 10)):","-        heapq.heappush(que, j + prev_arr[j])","-        while que[0] < j:","-            heapq.heappop(que)","-        arr[j] += len(que)","+        left = max(0, j - prev_arr[j])","+        right = min(N - 1, j + prev_arr[j])","+        arr[left] += 1","+        if right < N - 1:","+            arr[right + 1] -= 1","-    que = []","-    for j in reversed(list(range(N))):","-        heapq.heappush(que, -(j - prev_arr[j]))","-        while -que[0] > j:","-            heapq.heappop(que)","-        arr[j] += len(que) - 1","+    for j in range(1, N):","+        arr[j] += arr[j - 1]","+    # print(arr)"],"diff_only_import_comment":false,"measured_runtime_v0":0.1608536727,"measured_runtime_v1":0.1279424147,"runtime_lift":1.2572349291,"key":["s850341435","s306393223"]}
{"user_id":"u619458041","problem_id":"p03034","language":"python","submission_id_v0":"s001695168","submission_id_v1":"s404140535","cpu_time_v0":1002,"cpu_time_v1":783,"memory_v0":17360,"memory_v1":14388,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":21.86,"input":"import sys\n\n\n\ndef main():\n\n    input = sys.stdin.readline\n\n    N = int(eval(input()))\n\n    S = list(map(int, input().split()))\n\n\n\n    ans = 0\n\n    for C in range(1, N\/\/2):\n\n        n = N \/\/ C\n\n        point = 0\n\n        used = set([0])\n\n        for k in range(1, n):\n\n            A = N - 1 - k*C\n\n\n\n            if A in used or k*C in used or A == k*C:\n\n                break\n\n            used.add(A)\n\n            used.add(k*C)\n\n\n\n            point += S[A] + S[k*C]\n\n            ans = max(ans, point)\n\n\n\n    return ans\n\n\n\n\n\nif __name__ == '__main__':\n\n    print((main()))\n","target":"import sys\n\n\n\ndef main():\n\n    input = sys.stdin.readline\n\n    N = int(eval(input()))\n\n    S = list(map(int, input().split()))\n\n\n\n    ans = 0\n\n    # C = A - B\n\n    for C in range(1, N\/\/2):\n\n        n = (N-1) \/\/ C\n\n        point = 0\n\n        for k in range(1, n):\n\n            A = N-1 - k*C\n\n\n\n            # Check A and B are positive integer, and S_i is not used twice.\n\n            #\n\n            # B = A - C and B >= 0, so A must be over C (A > C).\n\n            #\n\n            # If C is aliquot of N-1 (N-1 % C = 0), A is also aliquot of N-1\n\n            # (N-1 % A = 0) because A + kC = N-1. Therefore when A is less than\n\n            # or equal kC, the A's value is already used by kC.\n\n            if A < C or ((N-1) % C == 0 and A <= k*C):\n\n                break\n\n\n\n            point += S[A] + S[k*C]\n\n            ans = max(ans, point)\n\n\n\n    return ans\n\n\n\n\n\nif __name__ == '__main__':\n\n    print((main()))\n","code_v0_loc":28,"code_v1_loc":33,"code_v0_num_chars":563,"code_v1_num_chars":905,"code_v0_no_empty_lines":"import sys\n\n\ndef main():\n    input = sys.stdin.readline\n    N = int(eval(input()))\n    S = list(map(int, input().split()))\n    ans = 0\n    for C in range(1, N \/\/ 2):\n        n = N \/\/ C\n        point = 0\n        used = set([0])\n        for k in range(1, n):\n            A = N - 1 - k * C\n            if A in used or k * C in used or A == k * C:\n                break\n            used.add(A)\n            used.add(k * C)\n            point += S[A] + S[k * C]\n            ans = max(ans, point)\n    return ans\n\n\nif __name__ == \"__main__\":\n    print((main()))\n","code_v1_no_empty_lines":"import sys\n\n\ndef main():\n    input = sys.stdin.readline\n    N = int(eval(input()))\n    S = list(map(int, input().split()))\n    ans = 0\n    # C = A - B\n    for C in range(1, N \/\/ 2):\n        n = (N - 1) \/\/ C\n        point = 0\n        for k in range(1, n):\n            A = N - 1 - k * C\n            # Check A and B are positive integer, and S_i is not used twice.\n            #\n            # B = A - C and B >= 0, so A must be over C (A > C).\n            #\n            # If C is aliquot of N-1 (N-1 % C = 0), A is also aliquot of N-1\n            # (N-1 % A = 0) because A + kC = N-1. Therefore when A is less than\n            # or equal kC, the A's value is already used by kC.\n            if A < C or ((N - 1) % C == 0 and A <= k * C):\n                break\n            point += S[A] + S[k * C]\n            ans = max(ans, point)\n    return ans\n\n\nif __name__ == \"__main__\":\n    print((main()))\n","code_same":false,"relative_loc_diff_percent":15.1515151515,"diff":["+    # C = A - B","-        n = N \/\/ C","+        n = (N - 1) \/\/ C","-        used = set([0])","-            if A in used or k * C in used or A == k * C:","+            # Check A and B are positive integer, and S_i is not used twice.","+            #","+            # B = A - C and B >= 0, so A must be over C (A > C).","+            #","+            # If C is aliquot of N-1 (N-1 % C = 0), A is also aliquot of N-1","+            # (N-1 % A = 0) because A + kC = N-1. Therefore when A is less than","+            # or equal kC, the A's value is already used by kC.","+            if A < C or ((N - 1) % C == 0 and A <= k * C):","-            used.add(A)","-            used.add(k * C)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3095349545,"measured_runtime_v1":0.0814658375,"runtime_lift":3.7995675745,"key":["s001695168","s404140535"]}
{"user_id":"u498487134","problem_id":"p03038","language":"python","submission_id_v0":"s547925628","submission_id_v1":"s764313725","cpu_time_v0":649,"cpu_time_v1":471,"memory_v0":68588,"memory_v1":102672,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":27.43,"input":"import sys\n\ninput = sys.stdin.readline\n\n\n\ndef I(): return int(eval(input()))\n\ndef MI(): return list(map(int, input().split()))\n\ndef LI(): return list(map(int, input().split()))\n\n\n\ndef main():\n\n    mod=10**9+7\n\n    N,M=MI()\n\n    A=LI()\n\n    CB=[[0,0]for _ in range(M)]\n\n    A.sort()\n\n    for i in range(M):\n\n        CB[i][1],CB[i][0]=MI()\n\n        \n\n    CB.sort(reverse=True)\n\n    now=0\n\n    \n\n    for i in range(N):\n\n        if CB[now][1]<=0:\n\n            now+=1\n\n        \n\n        if now>=M:\n\n            break    \n\n        \n\n        ch=CB[now][0]\n\n        if A[i]<ch:\n\n            A[i]=ch\n\n            CB[now][1]-=1\n\n        else:\n\n            break\n\n        \n\n    print((sum(A)))\n\n    \n\n\n\nmain()\n","target":"import sys\n\ninput = sys.stdin.readline\n\n\n\ndef I(): return int(eval(input()))\n\ndef MI(): return list(map(int, input().split()))\n\ndef LI(): return list(map(int, input().split()))\n\n\n\ndef main():\n\n    mod=10**9+7\n\n    N,M=MI()\n\n    A=LI()\n\n    B=[0]*M\n\n    C=[0]*M\n\n    for i in range(M):\n\n        B[i],C[i]=MI()\n\n    \n\n    C,B=list(zip(*sorted(zip(C,B))))\n\n    B=B[::-1]\n\n    C=C[::-1]\n\n    \n\n    import heapq\n\n    heapq.heapify(A)\n\n    \n\n    for i in range(M):\n\n        b=B[i]\n\n        c=C[i]\n\n        for _ in range(b):\n\n            a=heapq.heappop(A)\n\n            if a>=c:\n\n                heapq.heappush(A,a)\n\n                break\n\n            else:\n\n                heapq.heappush(A,c)\n\n                \n\n    ans=0\n\n    for i in range(N):\n\n        a=heapq.heappop(A)\n\n        ans+=a\n\n        \n\n    print(ans)\n\n\n\nmain()\n","code_v0_loc":37,"code_v1_loc":42,"code_v0_num_chars":685,"code_v1_num_chars":804,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\n\n\ndef I():\n    return int(eval(input()))\n\n\ndef MI():\n    return list(map(int, input().split()))\n\n\ndef LI():\n    return list(map(int, input().split()))\n\n\ndef main():\n    mod = 10**9 + 7\n    N, M = MI()\n    A = LI()\n    CB = [[0, 0] for _ in range(M)]\n    A.sort()\n    for i in range(M):\n        CB[i][1], CB[i][0] = MI()\n    CB.sort(reverse=True)\n    now = 0\n    for i in range(N):\n        if CB[now][1] <= 0:\n            now += 1\n        if now >= M:\n            break\n        ch = CB[now][0]\n        if A[i] < ch:\n            A[i] = ch\n            CB[now][1] -= 1\n        else:\n            break\n    print((sum(A)))\n\n\nmain()\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\n\n\ndef I():\n    return int(eval(input()))\n\n\ndef MI():\n    return list(map(int, input().split()))\n\n\ndef LI():\n    return list(map(int, input().split()))\n\n\ndef main():\n    mod = 10**9 + 7\n    N, M = MI()\n    A = LI()\n    B = [0] * M\n    C = [0] * M\n    for i in range(M):\n        B[i], C[i] = MI()\n    C, B = list(zip(*sorted(zip(C, B))))\n    B = B[::-1]\n    C = C[::-1]\n    import heapq\n\n    heapq.heapify(A)\n    for i in range(M):\n        b = B[i]\n        c = C[i]\n        for _ in range(b):\n            a = heapq.heappop(A)\n            if a >= c:\n                heapq.heappush(A, a)\n                break\n            else:\n                heapq.heappush(A, c)\n    ans = 0\n    for i in range(N):\n        a = heapq.heappop(A)\n        ans += a\n    print(ans)\n\n\nmain()\n","code_same":false,"relative_loc_diff_percent":11.9047619048,"diff":["-    CB = [[0, 0] for _ in range(M)]","-    A.sort()","+    B = [0] * M","+    C = [0] * M","-        CB[i][1], CB[i][0] = MI()","-    CB.sort(reverse=True)","-    now = 0","+        B[i], C[i] = MI()","+    C, B = list(zip(*sorted(zip(C, B))))","+    B = B[::-1]","+    C = C[::-1]","+    import heapq","+","+    heapq.heapify(A)","+    for i in range(M):","+        b = B[i]","+        c = C[i]","+        for _ in range(b):","+            a = heapq.heappop(A)","+            if a >= c:","+                heapq.heappush(A, a)","+                break","+            else:","+                heapq.heappush(A, c)","+    ans = 0","-        if CB[now][1] <= 0:","-            now += 1","-        if now >= M:","-            break","-        ch = CB[now][0]","-        if A[i] < ch:","-            A[i] = ch","-            CB[now][1] -= 1","-        else:","-            break","-    print((sum(A)))","+        a = heapq.heappop(A)","+        ans += a","+    print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2322117374,"measured_runtime_v1":0.1336252203,"runtime_lift":1.7377837571,"key":["s547925628","s764313725"]}
{"user_id":"u396211450","problem_id":"p03828","language":"python","submission_id_v0":"s749493108","submission_id_v1":"s831049300","cpu_time_v0":39,"cpu_time_v1":31,"memory_v0":9360,"memory_v1":9168,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":20.51,"input":"from math import factorial\n\n\n\nn = int(eval(input()))\n\nf = factorial(n)\n\n\n\nmod = 10 ** 9 + 7\n\n\n\ndef primes(n):\n\n    is_prime = [True] * (n + 1)\n\n    is_prime[0] = False\n\n    is_prime[1] = False\n\n    for i in range(2, int(n ** 0.5) + 1):\n\n        if not is_prime[i]:\n\n            continue\n\n        for j in range(i * 2, n + 1, i):\n\n            is_prime[j] = False\n\n    return [i for i in range(n + 1) if is_prime[i]]\n\n\n\nans = 1\n\nfor p in primes(n):\n\n    temp = 1\n\n    while f % p == 0:\n\n        temp += 1\n\n        f \/\/= p\n\n    ans = (ans * temp) % mod\n\nprint(ans)\n","target":"n=int(eval(input()))\n\nm=10**9+7\n\np=[1 for i in range(10000)]\n\np[0]=0\n\np[1]=0\n\nfor i in range(2,n+1):\n\n  if p[i]==1:\n\n    for j in range(i*i,n+1,i):\n\n        p[j]=0\n\nans=1\n\nfor i in range(2,n+1):\n\n  if p[i]:\n\n    c=0\n\n    k=i\n\n    while n\/\/k>0:\n\n      c=c+(n\/\/k)%m\n\n      k=k*i\n\n    ans=(ans*((c+1)%m))%m\n\nprint((ans%m))\n\n    \n\n    \n\n      \n\n      \n","code_v0_loc":26,"code_v1_loc":23,"code_v0_num_chars":556,"code_v1_num_chars":340,"code_v0_no_empty_lines":"from math import factorial\n\nn = int(eval(input()))\nf = factorial(n)\nmod = 10**9 + 7\n\n\ndef primes(n):\n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if not is_prime[i]:\n            continue\n        for j in range(i * 2, n + 1, i):\n            is_prime[j] = False\n    return [i for i in range(n + 1) if is_prime[i]]\n\n\nans = 1\nfor p in primes(n):\n    temp = 1\n    while f % p == 0:\n        temp += 1\n        f \/\/= p\n    ans = (ans * temp) % mod\nprint(ans)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nm = 10**9 + 7\np = [1 for i in range(10000)]\np[0] = 0\np[1] = 0\nfor i in range(2, n + 1):\n    if p[i] == 1:\n        for j in range(i * i, n + 1, i):\n            p[j] = 0\nans = 1\nfor i in range(2, n + 1):\n    if p[i]:\n        c = 0\n        k = i\n        while n \/\/ k > 0:\n            c = c + (n \/\/ k) % m\n            k = k * i\n        ans = (ans * ((c + 1) % m)) % m\nprint((ans % m))\n","code_same":false,"relative_loc_diff_percent":11.5384615385,"diff":["-from math import factorial","-","-f = factorial(n)","-mod = 10**9 + 7","-","-","-def primes(n):","-    is_prime = [True] * (n + 1)","-    is_prime[0] = False","-    is_prime[1] = False","-    for i in range(2, int(n**0.5) + 1):","-        if not is_prime[i]:","-            continue","-        for j in range(i * 2, n + 1, i):","-            is_prime[j] = False","-    return [i for i in range(n + 1) if is_prime[i]]","-","-","+m = 10**9 + 7","+p = [1 for i in range(10000)]","+p[0] = 0","+p[1] = 0","+for i in range(2, n + 1):","+    if p[i] == 1:","+        for j in range(i * i, n + 1, i):","+            p[j] = 0","-for p in primes(n):","-    temp = 1","-    while f % p == 0:","-        temp += 1","-        f \/\/= p","-    ans = (ans * temp) % mod","-print(ans)","+for i in range(2, n + 1):","+    if p[i]:","+        c = 0","+        k = i","+        while n \/\/ k > 0:","+            c = c + (n \/\/ k) % m","+            k = k * i","+        ans = (ans * ((c + 1) % m)) % m","+print((ans % m))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2370509479,"measured_runtime_v1":0.0064624088,"runtime_lift":36.6815154487,"key":["s749493108","s831049300"]}
{"user_id":"u116038906","problem_id":"p02690","language":"python","submission_id_v0":"s071046681","submission_id_v1":"s692199747","cpu_time_v0":65,"cpu_time_v1":22,"memory_v0":9388,"memory_v1":9448,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":66.15,"input":"# \u521d\u671f\u5165\u529b\n\nimport sys\n\nimport math\n\n#input = sys.stdin.readline\n\nX = int(eval(input()))\n\nlimit =10**5\n\na=0\n\nb=0\n\nfor b in range(-1*limit ,limit):\n\n    a5 =X+pow(b,5)\n\n    if 0 <= a5: \n\n        a=math.pow(a5,0.2)\n\n        a_int =int(a)\n\n        dif =a_int**5 -b**5 -X\n\n        if abs(dif)<10**(-5):\n\n            break\n\n    else:\n\n        continue\n\nprint((a_int,b))","target":"X = int(eval(input()))\n\ny =120\n\na ={i**5 for i in range(-y,y)}\n\nans_a =0\n\nans_b =0\n\nfor b in range(-y,y):\n\n    if X +b**5 in a:\n\n        #ans_a =int( (X +b**5 +1)**0.2 )\n\n        if X +b**5 >0:\n\n            ans_a =int( (X +b**5 )**0.2 )\n\n        else:\n\n            ans_a = -int( abs(X +b**5 )**0.2 )\n\n        ans_b =b\n\n        break\n\nprint((ans_a,ans_b))\n","code_v0_loc":19,"code_v1_loc":15,"code_v0_num_chars":352,"code_v1_num_chars":347,"code_v0_no_empty_lines":"# \u521d\u671f\u5165\u529b\nimport sys\nimport math\n\n# input = sys.stdin.readline\nX = int(eval(input()))\nlimit = 10**5\na = 0\nb = 0\nfor b in range(-1 * limit, limit):\n    a5 = X + pow(b, 5)\n    if 0 <= a5:\n        a = math.pow(a5, 0.2)\n        a_int = int(a)\n        dif = a_int**5 - b**5 - X\n        if abs(dif) < 10 ** (-5):\n            break\n    else:\n        continue\nprint((a_int, b))\n","code_v1_no_empty_lines":"X = int(eval(input()))\ny = 120\na = {i**5 for i in range(-y, y)}\nans_a = 0\nans_b = 0\nfor b in range(-y, y):\n    if X + b**5 in a:\n        # ans_a =int( (X +b**5 +1)**0.2 )\n        if X + b**5 > 0:\n            ans_a = int((X + b**5) ** 0.2)\n        else:\n            ans_a = -int(abs(X + b**5) ** 0.2)\n        ans_b = b\n        break\nprint((ans_a, ans_b))\n","code_same":false,"relative_loc_diff_percent":21.0526315789,"diff":["-# \u521d\u671f\u5165\u529b","-import sys","-import math","-","-# input = sys.stdin.readline","-limit = 10**5","-a = 0","-b = 0","-for b in range(-1 * limit, limit):","-    a5 = X + pow(b, 5)","-    if 0 <= a5:","-        a = math.pow(a5, 0.2)","-        a_int = int(a)","-        dif = a_int**5 - b**5 - X","-        if abs(dif) < 10 ** (-5):","-            break","-    else:","-        continue","-print((a_int, b))","+y = 120","+a = {i**5 for i in range(-y, y)}","+ans_a = 0","+ans_b = 0","+for b in range(-y, y):","+    if X + b**5 in a:","+        # ans_a =int( (X +b**5 +1)**0.2 )","+        if X + b**5 > 0:","+            ans_a = int((X + b**5) ** 0.2)","+        else:","+            ans_a = -int(abs(X + b**5) ** 0.2)","+        ans_b = b","+        break","+print((ans_a, ans_b))"],"diff_only_import_comment":false,"measured_runtime_v0":0.6969227076,"measured_runtime_v1":0.2305529813,"runtime_lift":3.022831037,"key":["s071046681","s692199747"]}
{"user_id":"u648212584","problem_id":"p02883","language":"python","submission_id_v0":"s240795971","submission_id_v1":"s404695253","cpu_time_v0":613,"cpu_time_v1":511,"memory_v0":38924,"memory_v1":83684,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.64,"input":"import sys\n\ninput = sys.stdin.buffer.readline\n\nimport numpy as np\n\n\n\ndef main():\n\n    N,K = list(map(int,input().split()))\n\n    a = list(map(int,input().split()))\n\n    f = list(map(int,input().split()))\n\n    a.sort()\n\n    f.sort(reverse=True)\n\n\n\n    if sum(a) <= K:\n\n        print((0))\n\n    else:\n\n        a = np.array(a)\n\n        f = np.array(f)\n\n        left,right = 0,max(a)*max(f)\n\n        while right-left > 1:\n\n            mid = (left+right)\/\/2\n\n            pra = a-mid\/\/f\n\n            pra[pra<0] = 0\n\n            if np.sum(pra) > K:\n\n                left = mid\n\n            else:\n\n                right = mid\n\n        print(right)\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"import sys\n\ninput = sys.stdin.buffer.readline\n\n\n\ndef main():\n\n    N,K = list(map(int,input().split()))\n\n    a = list(map(int,input().split()))\n\n    f = list(map(int,input().split()))\n\n    \n\n    a.sort()\n\n    f.sort(reverse=True)\n\n    \n\n    l,r = -1,max(a)*max(f)+1\n\n    \n\n    while r-l>1:\n\n        mid = (r+l)\/\/2\n\n        count = 0\n\n        for cost,dif in zip(a,f):\n\n            if mid >= cost*dif:\n\n                continue\n\n            rest = cost*dif-mid\n\n            count += -(-rest\/\/dif)\n\n        if count <= K:\n\n            r = mid\n\n        else:\n\n            l = mid\n\n            \n\n    print(r)\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":29,"code_v1_loc":30,"code_v0_num_chars":672,"code_v1_num_chars":640,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.buffer.readline\nimport numpy as np\n\n\ndef main():\n    N, K = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    a.sort()\n    f.sort(reverse=True)\n    if sum(a) <= K:\n        print((0))\n    else:\n        a = np.array(a)\n        f = np.array(f)\n        left, right = 0, max(a) * max(f)\n        while right - left > 1:\n            mid = (left + right) \/\/ 2\n            pra = a - mid \/\/ f\n            pra[pra < 0] = 0\n            if np.sum(pra) > K:\n                left = mid\n            else:\n                right = mid\n        print(right)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.buffer.readline\n\n\ndef main():\n    N, K = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    a.sort()\n    f.sort(reverse=True)\n    l, r = -1, max(a) * max(f) + 1\n    while r - l > 1:\n        mid = (r + l) \/\/ 2\n        count = 0\n        for cost, dif in zip(a, f):\n            if mid >= cost * dif:\n                continue\n            rest = cost * dif - mid\n            count += -(-rest \/\/ dif)\n        if count <= K:\n            r = mid\n        else:\n            l = mid\n    print(r)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":3.3333333333,"diff":["-import numpy as np","-    if sum(a) <= K:","-        print((0))","-    else:","-        a = np.array(a)","-        f = np.array(f)","-        left, right = 0, max(a) * max(f)","-        while right - left > 1:","-            mid = (left + right) \/\/ 2","-            pra = a - mid \/\/ f","-            pra[pra < 0] = 0","-            if np.sum(pra) > K:","-                left = mid","-            else:","-                right = mid","-        print(right)","+    l, r = -1, max(a) * max(f) + 1","+    while r - l > 1:","+        mid = (r + l) \/\/ 2","+        count = 0","+        for cost, dif in zip(a, f):","+            if mid >= cost * dif:","+                continue","+            rest = cost * dif - mid","+            count += -(-rest \/\/ dif)","+        if count <= K:","+            r = mid","+        else:","+            l = mid","+    print(r)"],"diff_only_import_comment":false,"measured_runtime_v0":1.4018948729,"measured_runtime_v1":0.2158444211,"runtime_lift":6.4949321617,"key":["s240795971","s404695253"]}
{"user_id":"u670180528","problem_id":"p02937","language":"python","submission_id_v0":"s126195271","submission_id_v1":"s641311638","cpu_time_v0":161,"cpu_time_v1":122,"memory_v0":12200,"memory_v1":12072,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":24.22,"input":"from collections import defaultdict\n\nfrom bisect import bisect_left\n\n\n\ns = eval(input())\n\nn = len(s)\n\ns = s + s\n\nt = eval(input())\n\nif set(t) - set(s):\n\n\tprint((-1))\n\n\texit()\n\nd = defaultdict(list)\n\nfor i in range(2 * n):\n\n\td[s[i]] += [i]\n\ncur = tot = 0\n\nfor c in t:\n\n\tx = d[c][bisect_left(d[c], cur)]\n\n\tif x < n:\n\n\t\tcur = x + 1\n\n\telse:\n\n\t\tcur = x - n + 1\n\n\t\ttot += n\n\ntot += cur\n\nprint(tot)\n","target":"from collections import defaultdict\n\nfrom bisect import bisect_left\n\n\n\n\n\ndef main():\n\n\ts = eval(input())\n\n\tn = len(s)\n\n\ts = s + s\n\n\tt = eval(input())\n\n\tif set(t) - set(s):\n\n\t\tprint((-1))\n\n\t\texit()\n\n\td = defaultdict(list)\n\n\tfor i in range(2 * n):\n\n\t\td[s[i]] += [i]\n\n\tcur = ncnt = 0\n\n\n\n\tfor c in t:\n\n\t\tx = d[c][bisect_left(d[c], cur)]\n\n\t\tif x < n:\n\n\t\t\tcur = x + 1\n\n\t\telse:\n\n\t\t\tcur = x - n + 1\n\n\t\t\tncnt += 1\n\n\tprint((ncnt*n + cur))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n\tmain()","code_v0_loc":23,"code_v1_loc":29,"code_v0_num_chars":378,"code_v1_num_chars":453,"code_v0_no_empty_lines":"from collections import defaultdict\nfrom bisect import bisect_left\n\ns = eval(input())\nn = len(s)\ns = s + s\nt = eval(input())\nif set(t) - set(s):\n    print((-1))\n    exit()\nd = defaultdict(list)\nfor i in range(2 * n):\n    d[s[i]] += [i]\ncur = tot = 0\nfor c in t:\n    x = d[c][bisect_left(d[c], cur)]\n    if x < n:\n        cur = x + 1\n    else:\n        cur = x - n + 1\n        tot += n\ntot += cur\nprint(tot)\n","code_v1_no_empty_lines":"from collections import defaultdict\nfrom bisect import bisect_left\n\n\ndef main():\n    s = eval(input())\n    n = len(s)\n    s = s + s\n    t = eval(input())\n    if set(t) - set(s):\n        print((-1))\n        exit()\n    d = defaultdict(list)\n    for i in range(2 * n):\n        d[s[i]] += [i]\n    cur = ncnt = 0\n    for c in t:\n        x = d[c][bisect_left(d[c], cur)]\n        if x < n:\n            cur = x + 1\n        else:\n            cur = x - n + 1\n            ncnt += 1\n    print((ncnt * n + cur))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":20.6896551724,"diff":["-s = eval(input())","-n = len(s)","-s = s + s","-t = eval(input())","-if set(t) - set(s):","-    print((-1))","-    exit()","-d = defaultdict(list)","-for i in range(2 * n):","-    d[s[i]] += [i]","-cur = tot = 0","-for c in t:","-    x = d[c][bisect_left(d[c], cur)]","-    if x < n:","-        cur = x + 1","-    else:","-        cur = x - n + 1","-        tot += n","-tot += cur","-print(tot)","+","+def main():","+    s = eval(input())","+    n = len(s)","+    s = s + s","+    t = eval(input())","+    if set(t) - set(s):","+        print((-1))","+        exit()","+    d = defaultdict(list)","+    for i in range(2 * n):","+        d[s[i]] += [i]","+    cur = ncnt = 0","+    for c in t:","+        x = d[c][bisect_left(d[c], cur)]","+        if x < n:","+            cur = x + 1","+        else:","+            cur = x - n + 1","+            ncnt += 1","+    print((ncnt * n + cur))","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.2683695219,"measured_runtime_v1":0.0063027716,"runtime_lift":42.5796046267,"key":["s126195271","s641311638"]}
{"user_id":"u631277801","problem_id":"p02996","language":"python","submission_id_v0":"s825135097","submission_id_v1":"s901008925","cpu_time_v0":649,"cpu_time_v1":495,"memory_v0":54192,"memory_v1":31936,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":23.73,"input":"import sys\n\nstdin = sys.stdin\n\n\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\ndef li(): return list(map(int, stdin.readline().split()))\n\ndef li_(): return [int(x) - 1 for x in stdin.readline().split()]\n\ndef lf(): return list(map(float, stdin.readline().split()))\n\ndef ls(): return stdin.readline().split()\n\ndef ns(): return stdin.readline().rstrip()\n\ndef lc(): return list(ns())\n\ndef ni(): return int(stdin.readline())\n\ndef nf(): return float(stdin.readline())\n\n\n\nn = ni()\n\nab = [list(li()) for _ in range(n)]\n\n\n\nab.sort(key=lambda x: x[1])\n\n\n\ncur = 0\n\n\n\nans = True\n\n\n\nfor ai, bi in ab:\n\n    cur += ai\n\n    if cur > bi:\n\n        ans = False\n\n\n\nprint((\"Yes\" if ans else \"No\"))","target":"import sys\n\nstdin = sys.stdin\n\n\n\nsys.setrecursionlimit(10 ** 7)\n\n\n\ndef li(): return list(map(int, stdin.readline().split()))\n\ndef li_(): return [int(x) - 1 for x in stdin.readline().split()]\n\ndef lf(): return list(map(float, stdin.readline().split()))\n\ndef ls(): return stdin.readline().split()\n\ndef ns(): return stdin.readline().rstrip()\n\ndef lc(): return list(ns())\n\ndef ni(): return int(stdin.readline())\n\ndef nf(): return float(stdin.readline())\n\n\n\nn = ni()\n\nab = [tuple(li()) for _ in range(n)]\n\n\n\nab.sort(key=lambda x: x[1])\n\ncur = 0\n\nok = True\n\n\n\nfor ai, bi in ab:\n\n    cur += ai\n\n    if cur > bi:\n\n        ok = False\n\n        break\n\n\n\nprint((\"Yes\" if ok else \"No\"))\n","code_v0_loc":29,"code_v1_loc":28,"code_v0_num_chars":655,"code_v1_num_chars":665,"code_v0_no_empty_lines":"import sys\n\nstdin = sys.stdin\nsys.setrecursionlimit(10**7)\n\n\ndef li():\n    return list(map(int, stdin.readline().split()))\n\n\ndef li_():\n    return [int(x) - 1 for x in stdin.readline().split()]\n\n\ndef lf():\n    return list(map(float, stdin.readline().split()))\n\n\ndef ls():\n    return stdin.readline().split()\n\n\ndef ns():\n    return stdin.readline().rstrip()\n\n\ndef lc():\n    return list(ns())\n\n\ndef ni():\n    return int(stdin.readline())\n\n\ndef nf():\n    return float(stdin.readline())\n\n\nn = ni()\nab = [list(li()) for _ in range(n)]\nab.sort(key=lambda x: x[1])\ncur = 0\nans = True\nfor ai, bi in ab:\n    cur += ai\n    if cur > bi:\n        ans = False\nprint((\"Yes\" if ans else \"No\"))\n","code_v1_no_empty_lines":"import sys\n\nstdin = sys.stdin\nsys.setrecursionlimit(10**7)\n\n\ndef li():\n    return list(map(int, stdin.readline().split()))\n\n\ndef li_():\n    return [int(x) - 1 for x in stdin.readline().split()]\n\n\ndef lf():\n    return list(map(float, stdin.readline().split()))\n\n\ndef ls():\n    return stdin.readline().split()\n\n\ndef ns():\n    return stdin.readline().rstrip()\n\n\ndef lc():\n    return list(ns())\n\n\ndef ni():\n    return int(stdin.readline())\n\n\ndef nf():\n    return float(stdin.readline())\n\n\nn = ni()\nab = [tuple(li()) for _ in range(n)]\nab.sort(key=lambda x: x[1])\ncur = 0\nok = True\nfor ai, bi in ab:\n    cur += ai\n    if cur > bi:\n        ok = False\n        break\nprint((\"Yes\" if ok else \"No\"))\n","code_same":false,"relative_loc_diff_percent":3.4482758621,"diff":["-ab = [list(li()) for _ in range(n)]","+ab = [tuple(li()) for _ in range(n)]","-ans = True","+ok = True","-        ans = False","-print((\"Yes\" if ans else \"No\"))","+        ok = False","+        break","+print((\"Yes\" if ok else \"No\"))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2910801413,"measured_runtime_v1":0.1842719517,"runtime_lift":1.5796226102,"key":["s825135097","s901008925"]}
{"user_id":"u728498511","problem_id":"p03416","language":"python","submission_id_v0":"s773095214","submission_id_v1":"s841162290","cpu_time_v0":111,"cpu_time_v1":67,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":39.64,"input":"n, m = list(map(int, input().split()))\n\nans = 0\n\nfor i in range(n, m+1):\n\n    if str(i)[0]+str(i)[1] == str(i)[-1]+str(i)[-2]: ans += 1\n\nprint(ans)","target":"a, b = list(map(int, input().split()))\n\nans = 0\n\nfor n in range(a, b+1):\n\n    if str(n) == str(n)[::-1]: ans += 1\n\nprint(ans)","code_v0_loc":5,"code_v1_loc":5,"code_v0_num_chars":141,"code_v1_num_chars":119,"code_v0_no_empty_lines":"n, m = list(map(int, input().split()))\nans = 0\nfor i in range(n, m + 1):\n    if str(i)[0] + str(i)[1] == str(i)[-1] + str(i)[-2]:\n        ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"a, b = list(map(int, input().split()))\nans = 0\nfor n in range(a, b + 1):\n    if str(n) == str(n)[::-1]:\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-n, m = list(map(int, input().split()))","+a, b = list(map(int, input().split()))","-for i in range(n, m + 1):","-    if str(i)[0] + str(i)[1] == str(i)[-1] + str(i)[-2]:","+for n in range(a, b + 1):","+    if str(n) == str(n)[::-1]:"],"diff_only_import_comment":false,"measured_runtime_v0":0.6137721554,"measured_runtime_v1":0.3378130706,"runtime_lift":1.8168987785,"key":["s773095214","s841162290"]}
{"user_id":"u498511622","problem_id":"p00001","language":"python","submission_id_v0":"s534000808","submission_id_v1":"s891056906","cpu_time_v0":30,"cpu_time_v1":20,"memory_v0":7536,"memory_v1":7656,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":33.33,"input":"ans=[]\n\nfor i in range (0,10):\n\n    ans.append(int(eval(input())))\n\nans.sort(reverse=True)\n\nfor i in range (0,3):\n\n    print((ans[i]))","target":"mountain=[]\n\nfor s in range(0,10):\n\n    mountain.append(int(eval(input())))\n\nmountain.sort(reverse=True)\n\nfor s in range(0,3):\n\n print((mountain[s]))","code_v0_loc":6,"code_v1_loc":6,"code_v0_num_chars":126,"code_v1_num_chars":141,"code_v0_no_empty_lines":"ans = []\nfor i in range(0, 10):\n    ans.append(int(eval(input())))\nans.sort(reverse=True)\nfor i in range(0, 3):\n    print((ans[i]))\n","code_v1_no_empty_lines":"mountain = []\nfor s in range(0, 10):\n    mountain.append(int(eval(input())))\nmountain.sort(reverse=True)\nfor s in range(0, 3):\n    print((mountain[s]))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-ans = []","-for i in range(0, 10):","-    ans.append(int(eval(input())))","-ans.sort(reverse=True)","-for i in range(0, 3):","-    print((ans[i]))","+mountain = []","+for s in range(0, 10):","+    mountain.append(int(eval(input())))","+mountain.sort(reverse=True)","+for s in range(0, 3):","+    print((mountain[s]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3030959003,"measured_runtime_v1":0.0643225815,"runtime_lift":4.7121227575,"key":["s534000808","s891056906"]}
{"user_id":"u609061751","problem_id":"p03273","language":"python","submission_id_v0":"s992799348","submission_id_v1":"s715280512","cpu_time_v0":181,"cpu_time_v1":21,"memory_v0":13552,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.4,"input":"import sys\n\ninput = sys.stdin.readline\n\nH, W = [int(x) for x in input().split()]\n\na = []\n\nfor _ in range(H):\n\n    a.append(list(input().rstrip()))\n\nimport numpy as np\n\na = np.array(a, np.object)\n\na = a.T\n\nretsu = []\n\ngyou = []\n\nfor i in range(W):\n\n    if \"#\" not in a[i]:\n\n        retsu.append(i)\n\na = a.T\n\nfor i in range(H):\n\n    if \"#\" not in a[i]:\n\n        gyou.append(i)\n\na = np.delete(a, retsu, 1)\n\na = np.delete(a, gyou, 0)\n\nfor j in a:\n\n    j = list(j)\n\n    print((\"\".join(j)))","target":"import sys\n\ninput = sys.stdin.readline\n\n\n\nh, w = [int(x) for x in input().split()]\n\na = []\n\nfor _ in range(h):\n\n    b = list(input().rstrip())\n\n    if '#' in b:\n\n        a.append(b)\n\nh = len(a)\n\nc = [1]*w\n\nfor i in range(w):\n\n    flag = 1\n\n    for j in range(h):\n\n        if a[j][i] == \"#\":\n\n            flag = 0\n\n            break\n\n    if flag:\n\n        c[i] = 0\n\nans = []\n\nfor i in range(h):\n\n    res = []\n\n    for j in range(w):\n\n        if c[j]:\n\n            res.append(a[i][j])\n\n    ans.append(\"\".join(res))\n\nfor i in ans:\n\n    print(i)\n\n\n","code_v0_loc":23,"code_v1_loc":29,"code_v0_num_chars":482,"code_v1_num_chars":544,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nH, W = [int(x) for x in input().split()]\na = []\nfor _ in range(H):\n    a.append(list(input().rstrip()))\nimport numpy as np\n\na = np.array(a, np.object)\na = a.T\nretsu = []\ngyou = []\nfor i in range(W):\n    if \"#\" not in a[i]:\n        retsu.append(i)\na = a.T\nfor i in range(H):\n    if \"#\" not in a[i]:\n        gyou.append(i)\na = np.delete(a, retsu, 1)\na = np.delete(a, gyou, 0)\nfor j in a:\n    j = list(j)\n    print((\"\".join(j)))\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nh, w = [int(x) for x in input().split()]\na = []\nfor _ in range(h):\n    b = list(input().rstrip())\n    if \"#\" in b:\n        a.append(b)\nh = len(a)\nc = [1] * w\nfor i in range(w):\n    flag = 1\n    for j in range(h):\n        if a[j][i] == \"#\":\n            flag = 0\n            break\n    if flag:\n        c[i] = 0\nans = []\nfor i in range(h):\n    res = []\n    for j in range(w):\n        if c[j]:\n            res.append(a[i][j])\n    ans.append(\"\".join(res))\nfor i in ans:\n    print(i)\n","code_same":false,"relative_loc_diff_percent":20.6896551724,"diff":["-H, W = [int(x) for x in input().split()]","+h, w = [int(x) for x in input().split()]","-for _ in range(H):","-    a.append(list(input().rstrip()))","-import numpy as np","-","-a = np.array(a, np.object)","-a = a.T","-retsu = []","-gyou = []","-for i in range(W):","-    if \"#\" not in a[i]:","-        retsu.append(i)","-a = a.T","-for i in range(H):","-    if \"#\" not in a[i]:","-        gyou.append(i)","-a = np.delete(a, retsu, 1)","-a = np.delete(a, gyou, 0)","-for j in a:","-    j = list(j)","-    print((\"\".join(j)))","+for _ in range(h):","+    b = list(input().rstrip())","+    if \"#\" in b:","+        a.append(b)","+h = len(a)","+c = [1] * w","+for i in range(w):","+    flag = 1","+    for j in range(h):","+        if a[j][i] == \"#\":","+            flag = 0","+            break","+    if flag:","+        c[i] = 0","+ans = []","+for i in range(h):","+    res = []","+    for j in range(w):","+        if c[j]:","+            res.append(a[i][j])","+    ans.append(\"\".join(res))","+for i in ans:","+    print(i)"],"diff_only_import_comment":false,"measured_runtime_v0":1.198312089,"measured_runtime_v1":0.1897079278,"runtime_lift":6.316615773,"key":["s992799348","s715280512"]}
{"user_id":"u530383736","problem_id":"p02555","language":"python","submission_id_v0":"s720124366","submission_id_v1":"s340965185","cpu_time_v0":275,"cpu_time_v1":33,"memory_v0":9116,"memory_v1":9000,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.0,"input":"# -*- coding: utf-8 -*-\n\nimport sys\n\n\n\n\n\ndef main():\n\n    S = int( sys.stdin.readline() )\n\n\n\n    dp = [0]*(S+1)\n\n    dp[0] = 1\n\n    mod = 10**9 + 7\n\n\n\n    for i in range(3, S+1):\n\n        cnt = 0\n\n\n\n        for j in range(3, i+1):\n\n            cnt += dp[i-j]\n\n            cnt %= mod\n\n        \n\n        dp[i] = cnt\n\n\n\n\n\n    print((dp[-1]))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"# -*- coding: utf-8 -*-\n\nimport sys\n\n\n\n\n\ndef main():\n\n    S = int( sys.stdin.readline() )\n\n\n\n    dp = [0]*(S+1)\n\n    dp[0] = 1\n\n    mod = 10**9 + 7\n\n\n\n    for i in range(3, S+1):\n\n        dp[i] = dp[i-3] + dp[i-1]\n\n        dp[i] %= mod\n\n    \n\n\n\n    print((dp[-1]))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":26,"code_v1_loc":21,"code_v0_num_chars":381,"code_v1_num_chars":307,"code_v0_no_empty_lines":"# -*- coding: utf-8 -*-\nimport sys\n\n\ndef main():\n    S = int(sys.stdin.readline())\n    dp = [0] * (S + 1)\n    dp[0] = 1\n    mod = 10**9 + 7\n    for i in range(3, S + 1):\n        cnt = 0\n        for j in range(3, i + 1):\n            cnt += dp[i - j]\n            cnt %= mod\n        dp[i] = cnt\n    print((dp[-1]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"# -*- coding: utf-8 -*-\nimport sys\n\n\ndef main():\n    S = int(sys.stdin.readline())\n    dp = [0] * (S + 1)\n    dp[0] = 1\n    mod = 10**9 + 7\n    for i in range(3, S + 1):\n        dp[i] = dp[i - 3] + dp[i - 1]\n        dp[i] %= mod\n    print((dp[-1]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":19.2307692308,"diff":["-        cnt = 0","-        for j in range(3, i + 1):","-            cnt += dp[i - j]","-            cnt %= mod","-        dp[i] = cnt","+        dp[i] = dp[i - 3] + dp[i - 1]","+        dp[i] %= mod"],"diff_only_import_comment":false,"measured_runtime_v0":0.4620170944,"measured_runtime_v1":0.1881556332,"runtime_lift":2.4555049799,"key":["s720124366","s340965185"]}
{"user_id":"u102461423","problem_id":"p03363","language":"python","submission_id_v0":"s190694143","submission_id_v1":"s770093154","cpu_time_v0":295,"cpu_time_v1":188,"memory_v0":39356,"memory_v1":41444,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":36.27,"input":"from collections import Counter\n\nimport numpy as np\n\n\n\nN = int(eval(input()))\n\nA = np.array(input().split(), dtype = np.int64)\n\n\n\nc = Counter(A.cumsum())\n\nc[0] += 1\n\nanswer = sum(x*(x-1)\/\/2 for x in list(c.values()))\n\nprint(answer)","target":"import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nimport itertools\n\nfrom collections import defaultdict\n\n\n\nN,*A = list(map(int,read().split()))\n\n\n\nAcum = [0] + list(itertools.accumulate(A))\n\n\n\ncounter = defaultdict(int)\n\nanswer = 0\n\nfor x in Acum:\n\n    answer += counter[x]\n\n    counter[x] += 1\n\n\n\nprint(answer)","code_v0_loc":10,"code_v1_loc":19,"code_v0_num_chars":219,"code_v1_num_chars":377,"code_v0_no_empty_lines":"from collections import Counter\nimport numpy as np\n\nN = int(eval(input()))\nA = np.array(input().split(), dtype=np.int64)\nc = Counter(A.cumsum())\nc[0] += 1\nanswer = sum(x * (x - 1) \/\/ 2 for x in list(c.values()))\nprint(answer)\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nimport itertools\nfrom collections import defaultdict\n\nN, *A = list(map(int, read().split()))\nAcum = [0] + list(itertools.accumulate(A))\ncounter = defaultdict(int)\nanswer = 0\nfor x in Acum:\n    answer += counter[x]\n    counter[x] += 1\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":47.3684210526,"diff":["-from collections import Counter","-import numpy as np","+import sys","-N = int(eval(input()))","-A = np.array(input().split(), dtype=np.int64)","-c = Counter(A.cumsum())","-c[0] += 1","-answer = sum(x * (x - 1) \/\/ 2 for x in list(c.values()))","+read = sys.stdin.buffer.read","+readline = sys.stdin.buffer.readline","+readlines = sys.stdin.buffer.readlines","+import itertools","+from collections import defaultdict","+","+N, *A = list(map(int, read().split()))","+Acum = [0] + list(itertools.accumulate(A))","+counter = defaultdict(int)","+answer = 0","+for x in Acum:","+    answer += counter[x]","+    counter[x] += 1"],"diff_only_import_comment":false,"measured_runtime_v0":1.3316387413,"measured_runtime_v1":0.2116157196,"runtime_lift":6.2927212779,"key":["s190694143","s770093154"]}
{"user_id":"u903005414","problem_id":"p02731","language":"python","submission_id_v0":"s953070867","submission_id_v1":"s699633695","cpu_time_v0":299,"cpu_time_v1":152,"memory_v0":21532,"memory_v1":12420,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":49.16,"input":"import numpy as np\n\nL = np.array(int(eval(input())), dtype='float128')\n\nans = (L \/ 3)**3\n\nprint(ans)\n","target":"import numpy as np\n\nL = int(eval(input()))\n\nans = (L \/ 3)**3\n\nprint(ans)\n","code_v0_loc":4,"code_v1_loc":4,"code_v0_num_chars":95,"code_v1_num_chars":67,"code_v0_no_empty_lines":"import numpy as np\n\nL = np.array(int(eval(input())), dtype=\"float128\")\nans = (L \/ 3) ** 3\nprint(ans)\n","code_v1_no_empty_lines":"import numpy as np\n\nL = int(eval(input()))\nans = (L \/ 3) ** 3\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-L = np.array(int(eval(input())), dtype=\"float128\")","+L = int(eval(input()))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3999788343,"measured_runtime_v1":0.259592965,"runtime_lift":5.3929767875,"key":["s953070867","s699633695"]}
{"user_id":"u678167152","problem_id":"p02785","language":"python","submission_id_v0":"s271865493","submission_id_v1":"s007549888","cpu_time_v0":145,"cpu_time_v1":112,"memory_v0":104796,"memory_v1":31552,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":22.76,"input":"def solve():\n\n  N, K = list(map(int, input().split()))\n\n  H = list(map(int, input().split()))\n\n  if K>=N:\n\n    return 0\n\n  H.sort()\n\n  ans = sum(H[:N-K])\n\n  return ans\n\nprint((solve()))","target":"def solve():\n\n  N, K = list(map(int, input().split()))\n\n  H = list(map(int, input().split()))\n\n  H.sort()\n\n  ans = sum(H[:max(N-K,0)])\n\n  return ans\n\nprint((solve()))","code_v0_loc":9,"code_v1_loc":7,"code_v0_num_chars":177,"code_v1_num_chars":158,"code_v0_no_empty_lines":"def solve():\n    N, K = list(map(int, input().split()))\n    H = list(map(int, input().split()))\n    if K >= N:\n        return 0\n    H.sort()\n    ans = sum(H[: N - K])\n    return ans\n\n\nprint((solve()))\n","code_v1_no_empty_lines":"def solve():\n    N, K = list(map(int, input().split()))\n    H = list(map(int, input().split()))\n    H.sort()\n    ans = sum(H[: max(N - K, 0)])\n    return ans\n\n\nprint((solve()))\n","code_same":false,"relative_loc_diff_percent":22.2222222222,"diff":["-    if K >= N:","-        return 0","-    ans = sum(H[: N - K])","+    ans = sum(H[: max(N - K, 0)])"],"diff_only_import_comment":false,"measured_runtime_v0":0.1896718335,"measured_runtime_v1":0.0060620093,"runtime_lift":31.2886079077,"key":["s271865493","s007549888"]}
{"user_id":"u583507988","problem_id":"p03835","language":"python","submission_id_v0":"s254920914","submission_id_v1":"s788748142","cpu_time_v0":1001,"cpu_time_v1":785,"memory_v0":9104,"memory_v1":9072,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":21.58,"input":"k, s = list(map(int, input().split()))\n\n\n\nans = 0\n\nfor x in range(k+1):\n\n  for y in range(k+1):\n\n    if 0<=s-x-y<=k:\n\n      ans += 1\n\n      \n\nprint(ans)","target":"k,s=list(map(int,input().split()))\n\nans=0\n\nfor i in range(k+1):\n\n  num=s-i\n\n  for j in range(min(num+1,k+1)):\n\n    if 0<=num-j<=k:\n\n      ans+=1\n\nprint(ans)","code_v0_loc":9,"code_v1_loc":8,"code_v0_num_chars":146,"code_v1_num_chars":150,"code_v0_no_empty_lines":"k, s = list(map(int, input().split()))\nans = 0\nfor x in range(k + 1):\n    for y in range(k + 1):\n        if 0 <= s - x - y <= k:\n            ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"k, s = list(map(int, input().split()))\nans = 0\nfor i in range(k + 1):\n    num = s - i\n    for j in range(min(num + 1, k + 1)):\n        if 0 <= num - j <= k:\n            ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["-for x in range(k + 1):","-    for y in range(k + 1):","-        if 0 <= s - x - y <= k:","+for i in range(k + 1):","+    num = s - i","+    for j in range(min(num + 1, k + 1)):","+        if 0 <= num - j <= k:"],"diff_only_import_comment":false,"measured_runtime_v0":0.2276177601,"measured_runtime_v1":0.0063076721,"runtime_lift":36.0858579862,"key":["s254920914","s788748142"]}
{"user_id":"u528470578","problem_id":"p03680","language":"python","submission_id_v0":"s142356798","submission_id_v1":"s532531190","cpu_time_v0":547,"cpu_time_v1":248,"memory_v0":7084,"memory_v1":7084,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":54.66,"input":"import sys\n\n\n\nN = int(eval(input()))\n\na = [int(eval(input())) for _ in range(N)]\n\n\n\nl = 1\n\np = a[0] - 1\n\n\n\nif a[0] == 2:\n\n    print(l)\n\n    sys.exit()\n\n\n\nwhile l < int(1e6):\n\n    l += 1\n\n    if a[p] == 2:\n\n        print(l)\n\n        break\n\n    else:\n\n        p = a[p] - 1\n\nelse:\n\n    print((-1))","target":"import sys\n\n\n\nN = int(eval(input()))\n\na = [int(eval(input())) for _ in range(N)]\n\n\n\nl = 1\n\np = a[0] - 1\n\n\n\nif a[0] == 2:\n\n    print(l)\n\n    sys.exit()\n\n\n\nwhile l < int(2e5):\n\n    l += 1\n\n    if a[p] == 2:\n\n        print(l)\n\n        break\n\n    else:\n\n        p = a[p] - 1\n\nelse:\n\n    print((-1))","code_v0_loc":21,"code_v1_loc":21,"code_v0_num_chars":280,"code_v1_num_chars":280,"code_v0_no_empty_lines":"import sys\n\nN = int(eval(input()))\na = [int(eval(input())) for _ in range(N)]\nl = 1\np = a[0] - 1\nif a[0] == 2:\n    print(l)\n    sys.exit()\nwhile l < int(1e6):\n    l += 1\n    if a[p] == 2:\n        print(l)\n        break\n    else:\n        p = a[p] - 1\nelse:\n    print((-1))\n","code_v1_no_empty_lines":"import sys\n\nN = int(eval(input()))\na = [int(eval(input())) for _ in range(N)]\nl = 1\np = a[0] - 1\nif a[0] == 2:\n    print(l)\n    sys.exit()\nwhile l < int(2e5):\n    l += 1\n    if a[p] == 2:\n        print(l)\n        break\n    else:\n        p = a[p] - 1\nelse:\n    print((-1))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-while l < int(1e6):","+while l < int(2e5):"],"diff_only_import_comment":false,"measured_runtime_v0":1.1321929171,"measured_runtime_v1":0.4105077217,"runtime_lift":2.7580307442,"key":["s142356798","s532531190"]}
{"user_id":"u285891772","problem_id":"p02760","language":"python","submission_id_v0":"s467740941","submission_id_v1":"s972156170","cpu_time_v0":157,"cpu_time_v1":38,"memory_v0":13684,"memory_v1":5204,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":75.8,"input":"import sys, re\n\nfrom collections import deque, defaultdict, Counter\n\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\n\nfrom itertools import accumulate, permutations, combinations, product, groupby\n\nfrom operator import itemgetter, mul\n\nfrom copy import deepcopy\n\nfrom string import ascii_lowercase, ascii_uppercase, digits\n\nfrom bisect import bisect, bisect_left\n\nfrom fractions import gcd\n\nfrom heapq import heappush, heappop\n\nfrom functools import reduce\n\ndef input(): return sys.stdin.readline().strip()\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(): return list(map(int, input().split()))\n\ndef ZIP(n): return list(zip(*(MAP() for _ in range(n))))\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = float('inf')\n\nmod = 10 ** 9 + 7\n\nimport numpy as np\n\n\n\nA1 = LIST()\n\nA2 = LIST()\n\nA3 = LIST()\n\nN = INT()\n\nB = np.ones(N)\n\nfor i in range(N):\n\n  B[i] = INT()\n\n  \n\nB = list(B)\n\n\n\ndef bingo_array(A, B):\n\n  for i in range(3):\n\n    for x in B:\n\n      if A[i] == x:\n\n        A[i] *= 0\n\n       \n\nbingo_array(A1, B)\n\nbingo_array(A2, B)\n\nbingo_array(A3, B)\n\n\n\nif sum(A1) == 0 or sum(A2) == 0 or sum(A3) == 0:\n\n  print(\"Yes\")\n\nelif A1[0]+A2[0]+A3[0] == 0 or A1[1]+A2[1]+A3[1] == 0 or A1[2]+A2[2]+A3[2] == 0:\n\n  print(\"Yes\")\n\nelif A1[0]+A2[1]+A3[2] == 0 or A1[2]+A2[1]+A3[0] == 0:\n\n  print(\"Yes\")\n\nelse:\n\n  print(\"No\")","target":"import sys, re\n\nfrom collections import deque, defaultdict, Counter\n\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\n\nfrom itertools import accumulate, permutations, combinations, product\n\nfrom operator import itemgetter, mul\n\nfrom copy import deepcopy\n\nfrom string import ascii_lowercase, ascii_uppercase, digits\n\nfrom bisect import bisect, bisect_left\n\nfrom fractions import gcd\n\nfrom heapq import heappush, heappop\n\nfrom functools import reduce\n\ndef input(): return sys.stdin.readline().strip()\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(): return list(map(int, input().split()))\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = float('inf')\n\nmod = 10 ** 9 + 7\n\n\n\nA = [LIST() for _ in range(3)]\n\nN = INT()\n\nb = [INT() for _ in range(N)]\n\n\n\ncheck = [[0]*3 for _ in range(3)]\n\n\n\nfor n in b:\n\n  for i in range(3):\n\n    for j in range(3):\n\n      if A[i][j] == n:\n\n        check[i][j] = 1\n\n\n\nfor i in range(3):\n\n  if sum(check[i]) == 3:\n\n    print(\"Yes\")\n\n    exit()\n\n\n\nfor i in range(3):\n\n  if check[0][i] and check[1][i] and check[2][i]:\n\n    print(\"Yes\")\n\n    exit()\n\n    \n\nif check[0][0] and check[1][1] and check[2][2]:\n\n  print(\"Yes\")\n\n  exit()\n\n  \n\nif check[0][2] and check[1][1] and check[2][0]:\n\n  print(\"Yes\")\n\n  exit()\n\n  \n\nprint(\"No\")","code_v0_loc":49,"code_v1_loc":50,"code_v0_num_chars":1354,"code_v1_num_chars":1299,"code_v0_no_empty_lines":"import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product, groupby\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef INT():\n    return int(eval(input()))\n\n\ndef MAP():\n    return list(map(int, input().split()))\n\n\ndef LIST():\n    return list(map(int, input().split()))\n\n\ndef ZIP(n):\n    return list(zip(*(MAP() for _ in range(n))))\n\n\nsys.setrecursionlimit(10**9)\nINF = float(\"inf\")\nmod = 10**9 + 7\nimport numpy as np\n\nA1 = LIST()\nA2 = LIST()\nA3 = LIST()\nN = INT()\nB = np.ones(N)\nfor i in range(N):\n    B[i] = INT()\nB = list(B)\n\n\ndef bingo_array(A, B):\n    for i in range(3):\n        for x in B:\n            if A[i] == x:\n                A[i] *= 0\n\n\nbingo_array(A1, B)\nbingo_array(A2, B)\nbingo_array(A3, B)\nif sum(A1) == 0 or sum(A2) == 0 or sum(A3) == 0:\n    print(\"Yes\")\nelif (\n    A1[0] + A2[0] + A3[0] == 0\n    or A1[1] + A2[1] + A3[1] == 0\n    or A1[2] + A2[2] + A3[2] == 0\n):\n    print(\"Yes\")\nelif A1[0] + A2[1] + A3[2] == 0 or A1[2] + A2[1] + A3[0] == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","code_v1_no_empty_lines":"import sys, re\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\nfrom itertools import accumulate, permutations, combinations, product\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom bisect import bisect, bisect_left\nfrom fractions import gcd\nfrom heapq import heappush, heappop\nfrom functools import reduce\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef INT():\n    return int(eval(input()))\n\n\ndef MAP():\n    return list(map(int, input().split()))\n\n\ndef LIST():\n    return list(map(int, input().split()))\n\n\nsys.setrecursionlimit(10**9)\nINF = float(\"inf\")\nmod = 10**9 + 7\nA = [LIST() for _ in range(3)]\nN = INT()\nb = [INT() for _ in range(N)]\ncheck = [[0] * 3 for _ in range(3)]\nfor n in b:\n    for i in range(3):\n        for j in range(3):\n            if A[i][j] == n:\n                check[i][j] = 1\nfor i in range(3):\n    if sum(check[i]) == 3:\n        print(\"Yes\")\n        exit()\nfor i in range(3):\n    if check[0][i] and check[1][i] and check[2][i]:\n        print(\"Yes\")\n        exit()\nif check[0][0] and check[1][1] and check[2][2]:\n    print(\"Yes\")\n    exit()\nif check[0][2] and check[1][1] and check[2][0]:\n    print(\"Yes\")\n    exit()\nprint(\"No\")\n","code_same":false,"relative_loc_diff_percent":2.0,"diff":["-from itertools import accumulate, permutations, combinations, product, groupby","+from itertools import accumulate, permutations, combinations, product","-def ZIP(n):","-    return list(zip(*(MAP() for _ in range(n))))","-","-","-import numpy as np","-","-A1 = LIST()","-A2 = LIST()","-A3 = LIST()","+A = [LIST() for _ in range(3)]","-B = np.ones(N)","-for i in range(N):","-    B[i] = INT()","-B = list(B)","-","-","-def bingo_array(A, B):","+b = [INT() for _ in range(N)]","+check = [[0] * 3 for _ in range(3)]","+for n in b:","-        for x in B:","-            if A[i] == x:","-                A[i] *= 0","-","-","-bingo_array(A1, B)","-bingo_array(A2, B)","-bingo_array(A3, B)","-if sum(A1) == 0 or sum(A2) == 0 or sum(A3) == 0:","+        for j in range(3):","+            if A[i][j] == n:","+                check[i][j] = 1","+for i in range(3):","+    if sum(check[i]) == 3:","+        print(\"Yes\")","+        exit()","+for i in range(3):","+    if check[0][i] and check[1][i] and check[2][i]:","+        print(\"Yes\")","+        exit()","+if check[0][0] and check[1][1] and check[2][2]:","-elif (","-    A1[0] + A2[0] + A3[0] == 0","-    or A1[1] + A2[1] + A3[1] == 0","-    or A1[2] + A2[2] + A3[2] == 0","-):","+    exit()","+if check[0][2] and check[1][1] and check[2][0]:","-elif A1[0] + A2[1] + A3[2] == 0 or A1[2] + A2[1] + A3[0] == 0:","-    print(\"Yes\")","-else:","-    print(\"No\")","+    exit()","+print(\"No\")"],"diff_only_import_comment":false,"measured_runtime_v0":1.2329144027,"measured_runtime_v1":0.183397862,"runtime_lift":6.7226214608,"key":["s467740941","s972156170"]}
{"user_id":"u477977638","problem_id":"p03752","language":"python","submission_id_v0":"s572800870","submission_id_v1":"s011317183","cpu_time_v0":481,"cpu_time_v1":42,"memory_v0":12524,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":91.27,"input":"import sys\n\ninput = sys.stdin.readline\n\ninput = sys.stdin.buffer.readline\n\n\n\n\n\ndef RD(): return sys.stdin.read()\n\ndef II(): return int(eval(input()))\n\ndef MI(): return list(map(int,input().split()))\n\ndef LI(): return list(map(int,input().split()))\n\ndef TI(): return tuple(map(int,input().split()))\n\n\n\n# mod=10**9+7\n\n# rstrip().decode('utf-8')\n\n\n\nimport numpy as np\n\nfrom itertools import combinations\n\n\n\ndef main():\n\n\tn,k=MI()\n\n\tans=10**18\n\n\n\n\tA=LI()\n\n\tA=[A[0]-1]+A\n\n\tA=np.array(A)\n\n\n\n\tfor t in combinations(list(range(n)),k):\n\n\t\tB=A.copy()\n\n\t\ttmp=0\n\n\t\tfor i in t:\n\n\t\t\ti+=1\n\n\t\t\tB[i]=max(B[:i].max()+1,A[i])\n\n\t\t\ttmp+=B[i]-A[i]\n\n\t\tans=min(ans,tmp)\n\n\tprint(ans)\n\n\n\nif __name__ == \"__main__\":\n\n\tmain()\n","target":"import sys\n\ninput = sys.stdin.readline\n\ninput = sys.stdin.buffer.readline\n\n\n\n\n\ndef RD(): return sys.stdin.read()\n\ndef II(): return int(eval(input()))\n\ndef MI(): return list(map(int,input().split()))\n\ndef LI(): return list(map(int,input().split()))\n\ndef TI(): return tuple(map(int,input().split()))\n\n\n\n# mod=10**9+7\n\n# rstrip().decode('utf-8')\n\n\n\n#import numpy as np\n\nfrom itertools import combinations\n\n\n\ndef main():\n\n\tn,k=MI()\n\n\tans=10**18\n\n\n\n\tA=LI()\n\n\tA=[A[0]-1]+A\n\n\n\n\tfor t in combinations(list(range(n)),k):\n\n\t\tB=A.copy()\n\n\t\ttmp=0\n\n\t\tfor i in t:\n\n\t\t\ti+=1\n\n\t\t\tB[i]=max(max(B[:i])+1,A[i])\n\n\t\t\ttmp+=B[i]-A[i]\n\n\t\tans=min(ans,tmp)\n\n\tprint(ans)\n\n\n\nif __name__ == \"__main__\":\n\n\tmain()\n","code_v0_loc":37,"code_v1_loc":36,"code_v0_num_chars":680,"code_v1_num_chars":664,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\ninput = sys.stdin.buffer.readline\n\n\ndef RD():\n    return sys.stdin.read()\n\n\ndef II():\n    return int(eval(input()))\n\n\ndef MI():\n    return list(map(int, input().split()))\n\n\ndef LI():\n    return list(map(int, input().split()))\n\n\ndef TI():\n    return tuple(map(int, input().split()))\n\n\n# mod=10**9+7\n# rstrip().decode('utf-8')\nimport numpy as np\nfrom itertools import combinations\n\n\ndef main():\n    n, k = MI()\n    ans = 10**18\n    A = LI()\n    A = [A[0] - 1] + A\n    A = np.array(A)\n    for t in combinations(list(range(n)), k):\n        B = A.copy()\n        tmp = 0\n        for i in t:\n            i += 1\n            B[i] = max(B[:i].max() + 1, A[i])\n            tmp += B[i] - A[i]\n        ans = min(ans, tmp)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\ninput = sys.stdin.buffer.readline\n\n\ndef RD():\n    return sys.stdin.read()\n\n\ndef II():\n    return int(eval(input()))\n\n\ndef MI():\n    return list(map(int, input().split()))\n\n\ndef LI():\n    return list(map(int, input().split()))\n\n\ndef TI():\n    return tuple(map(int, input().split()))\n\n\n# mod=10**9+7\n# rstrip().decode('utf-8')\n# import numpy as np\nfrom itertools import combinations\n\n\ndef main():\n    n, k = MI()\n    ans = 10**18\n    A = LI()\n    A = [A[0] - 1] + A\n    for t in combinations(list(range(n)), k):\n        B = A.copy()\n        tmp = 0\n        for i in t:\n            i += 1\n            B[i] = max(max(B[:i]) + 1, A[i])\n            tmp += B[i] - A[i]\n        ans = min(ans, tmp)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":2.7027027027,"diff":["-import numpy as np","+# import numpy as np","-    A = np.array(A)","-            B[i] = max(B[:i].max() + 1, A[i])","+            B[i] = max(max(B[:i]) + 1, A[i])"],"diff_only_import_comment":false,"measured_runtime_v0":1.4463615463,"measured_runtime_v1":0.2103404913,"runtime_lift":6.8762868115,"key":["s572800870","s011317183"]}
{"user_id":"u933622697","problem_id":"p03434","language":"python","submission_id_v0":"s339676301","submission_id_v1":"s687508322","cpu_time_v0":150,"cpu_time_v1":18,"memory_v0":12388,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.0,"input":"import numpy as np\n\n\n\nn = int(eval(input()))\n\na_list = list(map(int, input().split()))\n\n\n\nalice_point = 0\n\nbob_point = 0\n\nfor i in range(n):\n\n    argmax_a = np.argmax(a_list)\n\n    max_a = np.max(a_list)\n\n    if i % 2 == 0: # If Alice takes a card\n\n        alice_point += max_a\n\n    else: # If Bob takes a card\n\n        bob_point += max_a\n\n    del a_list[argmax_a] # No confidence -> Review how to delete list element!\n\n\n\nprint((alice_point - bob_point))","target":"n = int(eval(input()))\n\na_list = list(map(int, input().split()))\n\na_list = sorted(a_list, reverse=True)\n\n\n\nalice_point = 0\n\nbob_point = 0\n\nfor i in range(n):\n\n    if i % 2 == 0:\n\n        alice_point += a_list[i]\n\n    else:\n\n        bob_point += a_list[i]\n\n\n\nprint((alice_point - bob_point))","code_v0_loc":17,"code_v1_loc":13,"code_v0_num_chars":445,"code_v1_num_chars":282,"code_v0_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\na_list = list(map(int, input().split()))\nalice_point = 0\nbob_point = 0\nfor i in range(n):\n    argmax_a = np.argmax(a_list)\n    max_a = np.max(a_list)\n    if i % 2 == 0:  # If Alice takes a card\n        alice_point += max_a\n    else:  # If Bob takes a card\n        bob_point += max_a\n    del a_list[argmax_a]  # No confidence -> Review how to delete list element!\nprint((alice_point - bob_point))\n","code_v1_no_empty_lines":"n = int(eval(input()))\na_list = list(map(int, input().split()))\na_list = sorted(a_list, reverse=True)\nalice_point = 0\nbob_point = 0\nfor i in range(n):\n    if i % 2 == 0:\n        alice_point += a_list[i]\n    else:\n        bob_point += a_list[i]\nprint((alice_point - bob_point))\n","code_same":false,"relative_loc_diff_percent":23.5294117647,"diff":["-import numpy as np","-","+a_list = sorted(a_list, reverse=True)","-    argmax_a = np.argmax(a_list)","-    max_a = np.max(a_list)","-    if i % 2 == 0:  # If Alice takes a card","-        alice_point += max_a","-    else:  # If Bob takes a card","-        bob_point += max_a","-    del a_list[argmax_a]  # No confidence -> Review how to delete list element!","+    if i % 2 == 0:","+        alice_point += a_list[i]","+    else:","+        bob_point += a_list[i]"],"diff_only_import_comment":false,"measured_runtime_v0":1.5290555863,"measured_runtime_v1":0.1577071764,"runtime_lift":9.6955358703,"key":["s339676301","s687508322"]}
{"user_id":"u359358631","problem_id":"p03796","language":"python","submission_id_v0":"s916466489","submission_id_v1":"s520315696","cpu_time_v0":158,"cpu_time_v1":44,"memory_v0":10172,"memory_v1":8932,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":72.15,"input":"import math\n\n\n\n\n\ndef main():\n\n    N = int(eval(input()))\n\n    power = math.factorial(N)\n\n    print((power % (10 ** 9 + 7)))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"def main():\n\n    N = int(eval(input()))\n\n    power = 1\n\n    for i in range(1, N + 1):\n\n        power *= i\n\n        power %= 10 ** 9 + 7\n\n    print(power)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":11,"code_v1_loc":11,"code_v0_num_chars":160,"code_v1_num_chars":192,"code_v0_no_empty_lines":"import math\n\n\ndef main():\n    N = int(eval(input()))\n    power = math.factorial(N)\n    print((power % (10**9 + 7)))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def main():\n    N = int(eval(input()))\n    power = 1\n    for i in range(1, N + 1):\n        power *= i\n        power %= 10**9 + 7\n    print(power)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-import math","-","-","-    power = math.factorial(N)","-    print((power % (10**9 + 7)))","+    power = 1","+    for i in range(1, N + 1):","+        power *= i","+        power %= 10**9 + 7","+    print(power)"],"diff_only_import_comment":false,"measured_runtime_v0":0.7842813587,"measured_runtime_v1":0.3569579227,"runtime_lift":2.1971255121,"key":["s916466489","s520315696"]}
{"user_id":"u072053884","problem_id":"p02282","language":"python","submission_id_v0":"s375368636","submission_id_v1":"s582750093","cpu_time_v0":40,"cpu_time_v1":20,"memory_v0":7716,"memory_v1":7752,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":50.0,"input":"def post_from_pre_in(preorder_elements, inorder_elements):\n\n    if preorder_elements:\n\n        global cnt\n\n        root = preorder_elements[0]\n\n        root_index = inorder_elements.index(root)\n\n        preorder_left = preorder_elements[1:root_index+1]\n\n        inorder_left = inorder_elements[:root_index]\n\n        preorder_right = preorder_elements[root_index+1:]\n\n        inorder_right = inorder_elements[root_index+1:]\n\n        post_from_pre_in(preorder_left, inorder_left)\n\n        post_from_pre_in(preorder_right, inorder_right)\n\n        if cnt:\n\n            print(root, end = ' ')\n\n            cnt -= 1\n\n        else:\n\n            print(root)\n\n\n\n\n\ncnt = int(input()) - 1\n\n\n\na = list(map(int, input().split()))\n\nb = list(map(int, input().split()))\n\n\n\npost_from_pre_in(a, b)\n","target":"postorder_elements = []\n\n\n\ndef post_from_pre_in(preorder_elements, inorder_elements):\n\n    if preorder_elements:\n\n        root = preorder_elements[0]\n\n        root_index = inorder_elements.index(root)\n\n        preorder_left = preorder_elements[1:root_index+1]\n\n        inorder_left = inorder_elements[:root_index]\n\n        preorder_right = preorder_elements[root_index+1:]\n\n        inorder_right = inorder_elements[root_index+1:]\n\n        post_from_pre_in(preorder_left, inorder_left)\n\n        post_from_pre_in(preorder_right, inorder_right)\n\n        postorder_elements.append(root)\n\n\n\n\n\n\n\nn = int(eval(input()))\n\n\n\na = list(map(int, input().split()))\n\nb = list(map(int, input().split()))\n\n\n\npost_from_pre_in(a, b)\n\n\n\nprint((*postorder_elements))","code_v0_loc":24,"code_v1_loc":24,"code_v0_num_chars":779,"code_v1_num_chars":738,"code_v0_no_empty_lines":"def post_from_pre_in(preorder_elements, inorder_elements):\n    if preorder_elements:\n        global cnt\n        root = preorder_elements[0]\n        root_index = inorder_elements.index(root)\n        preorder_left = preorder_elements[1 : root_index + 1]\n        inorder_left = inorder_elements[:root_index]\n        preorder_right = preorder_elements[root_index + 1 :]\n        inorder_right = inorder_elements[root_index + 1 :]\n        post_from_pre_in(preorder_left, inorder_left)\n        post_from_pre_in(preorder_right, inorder_right)\n        if cnt:\n            print(root, end=\" \")\n            cnt -= 1\n        else:\n            print(root)\n\n\ncnt = int(input()) - 1\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\npost_from_pre_in(a, b)\n","code_v1_no_empty_lines":"postorder_elements = []\n\n\ndef post_from_pre_in(preorder_elements, inorder_elements):\n    if preorder_elements:\n        root = preorder_elements[0]\n        root_index = inorder_elements.index(root)\n        preorder_left = preorder_elements[1 : root_index + 1]\n        inorder_left = inorder_elements[:root_index]\n        preorder_right = preorder_elements[root_index + 1 :]\n        inorder_right = inorder_elements[root_index + 1 :]\n        post_from_pre_in(preorder_left, inorder_left)\n        post_from_pre_in(preorder_right, inorder_right)\n        postorder_elements.append(root)\n\n\nn = int(eval(input()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\npost_from_pre_in(a, b)\nprint((*postorder_elements))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["+postorder_elements = []","+","+","-        global cnt","-        if cnt:","-            print(root, end=\" \")","-            cnt -= 1","-        else:","-            print(root)","+        postorder_elements.append(root)","-cnt = int(input()) - 1","+n = int(eval(input()))","+print((*postorder_elements))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2366878937,"measured_runtime_v1":0.1182743947,"runtime_lift":2.0011761158,"key":["s375368636","s582750093"]}
{"user_id":"u167751176","problem_id":"p03078","language":"python","submission_id_v0":"s149883415","submission_id_v1":"s931960732","cpu_time_v0":641,"cpu_time_v1":91,"memory_v0":97660,"memory_v1":8708,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":85.8,"input":"def main():\n\n\tx, y, z, k = list(map(int, input().split()))\n\n\ta = list(map(int, input().split()))\n\n\tb = list(map(int, input().split()))\n\n\tc = list(map(int, input().split()))\n\n\td = [0]*x*y\n\n\tfor i in range(x):\n\n\t\tfor j in range(y):\n\n\t\t\td[i*y+j] = a[i]+b[j]\n\n\td.sort(reverse=True)\n\n\tc.sort(reverse=True)\n\n\n\n\tc_len = min(k, z)\n\n\td_len = min(k, x*y)\n\n\te = [0]*d_len*c_len\n\n\tfor i in range(d_len):\n\n\t\tfor j in range(c_len):\n\n\t\t\te[i*c_len+j] = d[i] + c[j]\n\n\te.sort(reverse=True)\n\n\tfor i in range(k):\n\n\t\tprint((e[i]))\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()","target":"def main():\n\n\tx, y, z, k = list(map(int, input().split()))\n\n\ta = list(map(int, input().split()))\n\n\tb = list(map(int, input().split()))\n\n\tc = list(map(int, input().split()))\n\n\n\n\tsolve(a, b, c, x, y, z, k)\n\n\n\ndef solve(a, b, c, x, y, z, k):\n\n\ta.sort(reverse=True)\n\n\tb.sort(reverse=True)\n\n\tc.sort(reverse=True)\n\n\tstack = list()\n\n\tfor p in range(x):\n\n\t\tfor q in range(y):\n\n\t\t\tif (p+1)*(q+1) > k:\n\n\t\t\t\tbreak\n\n\t\t\tfor r in range(z):\n\n\t\t\t\tif (p+1)*(q+1)*(r+1) > k:\n\n\t\t\t\t\tbreak\n\n\t\t\t\tstack.append(a[p]+b[q]+c[r])\n\n\tstack.sort(reverse=True)\n\n\tfor i in range(k):\n\n\t\tprint((stack[i]))\n\n\n\nif __name__ == '__main__':\n\n    main()","code_v0_loc":25,"code_v1_loc":27,"code_v0_num_chars":545,"code_v1_num_chars":605,"code_v0_no_empty_lines":"def main():\n    x, y, z, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = [0] * x * y\n    for i in range(x):\n        for j in range(y):\n            d[i * y + j] = a[i] + b[j]\n    d.sort(reverse=True)\n    c.sort(reverse=True)\n    c_len = min(k, z)\n    d_len = min(k, x * y)\n    e = [0] * d_len * c_len\n    for i in range(d_len):\n        for j in range(c_len):\n            e[i * c_len + j] = d[i] + c[j]\n    e.sort(reverse=True)\n    for i in range(k):\n        print((e[i]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def main():\n    x, y, z, k = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    solve(a, b, c, x, y, z, k)\n\n\ndef solve(a, b, c, x, y, z, k):\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    c.sort(reverse=True)\n    stack = list()\n    for p in range(x):\n        for q in range(y):\n            if (p + 1) * (q + 1) > k:\n                break\n            for r in range(z):\n                if (p + 1) * (q + 1) * (r + 1) > k:\n                    break\n                stack.append(a[p] + b[q] + c[r])\n    stack.sort(reverse=True)\n    for i in range(k):\n        print((stack[i]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":7.4074074074,"diff":["-    d = [0] * x * y","-    for i in range(x):","-        for j in range(y):","-            d[i * y + j] = a[i] + b[j]","-    d.sort(reverse=True)","+    solve(a, b, c, x, y, z, k)","+","+","+def solve(a, b, c, x, y, z, k):","+    a.sort(reverse=True)","+    b.sort(reverse=True)","-    c_len = min(k, z)","-    d_len = min(k, x * y)","-    e = [0] * d_len * c_len","-    for i in range(d_len):","-        for j in range(c_len):","-            e[i * c_len + j] = d[i] + c[j]","-    e.sort(reverse=True)","+    stack = list()","+    for p in range(x):","+        for q in range(y):","+            if (p + 1) * (q + 1) > k:","+                break","+            for r in range(z):","+                if (p + 1) * (q + 1) * (r + 1) > k:","+                    break","+                stack.append(a[p] + b[q] + c[r])","+    stack.sort(reverse=True)","-        print((e[i]))","+        print((stack[i]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3135767848,"measured_runtime_v1":0.0401056306,"runtime_lift":7.8187720726,"key":["s149883415","s931960732"]}
{"user_id":"u260980560","problem_id":"p00713","language":"python","submission_id_v0":"s376249504","submission_id_v1":"s496295641","cpu_time_v0":32130,"cpu_time_v1":27750,"memory_v0":6520,"memory_v1":6552,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.63,"input":"from math import sqrt\n\nfrom bisect import bisect_left\n\ndef circle_center(x1, y1, x2, y2):\n\n    xd = x2 - x1; yd = y2 - y1\n\n    d = xd**2 + yd**2\n\n    k = sqrt((4.0 - d) \/ d) \/ 2.0\n\n    xc = (x1 + x2) \/ 2.0\n\n    yc = (y1 + y2) \/ 2.0\n\n    return [[xc - k*yd, yc + k*xd], [xc + k*yd, yc - k*xd]]\n\nwhile 1:\n\n    n = int(input())\n\n    if n==0: break\n\n    p = [list(map(float, input().split())) for i in range(n)]\n\n    p.sort()\n\n    prev = 0\n\n    ans = 1\n\n    for i in range(n):\n\n        bx, by = p[i]\n\n        while bx - p[prev][0] >= 2.0: prev += 1\n\n        for j in range(i+1, n):\n\n            cx, cy = p[j]\n\n            if cx - bx >= 2.0: break\n\n            if (bx - cx)**2 + (by - cy)**2 <= 4.0:\n\n                for ex, ey in circle_center(bx, by, cx, cy):\n\n                    count = 2\n\n                    for k in range(prev, n):\n\n                        if k==i or k==j: continue\n\n                        dx, dy = p[k]\n\n                        if dx - bx >= 2.0: break\n\n                        if (ex - dx)**2 + (ey - dy)**2 <= 1.0:\n\n                            count += 1\n\n                    ans = max(ans, count)\n\n    print(ans)","target":"from math import sqrt\n\nfrom bisect import bisect_left\n\ndef circle_center(x1, y1, x2, y2):\n\n    xd = x2 - x1; yd = y2 - y1\n\n    d = xd**2 + yd**2\n\n    k = sqrt((4.0 - d) \/ d) \/ 2.0\n\n    xc = (x1 + x2) \/ 2.0; yc = (y1 + y2) \/ 2.0\n\n    xd *= k; yd *= k\n\n    return [[xc - yd, yc + xd], [xc + yd, yc - xd]]\n\nwhile 1:\n\n    n = int(input())\n\n    if n==0: break\n\n    p = sorted(list(map(float, input().split())) for i in range(n))\n\n    prev = 0\n\n    ans = 1\n\n    for i in range(n):\n\n        bx, by = p[i]\n\n        while bx - p[prev][0] >= 2.0: prev += 1\n\n        for j in range(i+1, n):\n\n            cx, cy = p[j]\n\n            if cx - bx >= 2.0: break\n\n            if (bx - cx)**2 + (by - cy)**2 <= 4.0:\n\n                for ex, ey in circle_center(bx, by, cx, cy):\n\n                    count = 2\n\n                    for k in range(prev, n):\n\n                        if k==i or k==j: continue\n\n                        dx, dy = p[k]\n\n                        if dx - ex >= 1.0: break\n\n                        if (ex - dx)**2 + (ey - dy)**2 <= 1.0:\n\n                            count += 1\n\n                    ans = max(ans, count)\n\n    print(ans)","code_v0_loc":33,"code_v1_loc":32,"code_v0_num_chars":1141,"code_v1_num_chars":1143,"code_v0_no_empty_lines":"from math import sqrt\nfrom bisect import bisect_left\n\n\ndef circle_center(x1, y1, x2, y2):\n    xd = x2 - x1\n    yd = y2 - y1\n    d = xd**2 + yd**2\n    k = sqrt((4.0 - d) \/ d) \/ 2.0\n    xc = (x1 + x2) \/ 2.0\n    yc = (y1 + y2) \/ 2.0\n    return [[xc - k * yd, yc + k * xd], [xc + k * yd, yc - k * xd]]\n\n\nwhile 1:\n    n = int(input())\n    if n == 0:\n        break\n    p = [list(map(float, input().split())) for i in range(n)]\n    p.sort()\n    prev = 0\n    ans = 1\n    for i in range(n):\n        bx, by = p[i]\n        while bx - p[prev][0] >= 2.0:\n            prev += 1\n        for j in range(i + 1, n):\n            cx, cy = p[j]\n            if cx - bx >= 2.0:\n                break\n            if (bx - cx) ** 2 + (by - cy) ** 2 <= 4.0:\n                for ex, ey in circle_center(bx, by, cx, cy):\n                    count = 2\n                    for k in range(prev, n):\n                        if k == i or k == j:\n                            continue\n                        dx, dy = p[k]\n                        if dx - bx >= 2.0:\n                            break\n                        if (ex - dx) ** 2 + (ey - dy) ** 2 <= 1.0:\n                            count += 1\n                    ans = max(ans, count)\n    print(ans)\n","code_v1_no_empty_lines":"from math import sqrt\nfrom bisect import bisect_left\n\n\ndef circle_center(x1, y1, x2, y2):\n    xd = x2 - x1\n    yd = y2 - y1\n    d = xd**2 + yd**2\n    k = sqrt((4.0 - d) \/ d) \/ 2.0\n    xc = (x1 + x2) \/ 2.0\n    yc = (y1 + y2) \/ 2.0\n    xd *= k\n    yd *= k\n    return [[xc - yd, yc + xd], [xc + yd, yc - xd]]\n\n\nwhile 1:\n    n = int(input())\n    if n == 0:\n        break\n    p = sorted(list(map(float, input().split())) for i in range(n))\n    prev = 0\n    ans = 1\n    for i in range(n):\n        bx, by = p[i]\n        while bx - p[prev][0] >= 2.0:\n            prev += 1\n        for j in range(i + 1, n):\n            cx, cy = p[j]\n            if cx - bx >= 2.0:\n                break\n            if (bx - cx) ** 2 + (by - cy) ** 2 <= 4.0:\n                for ex, ey in circle_center(bx, by, cx, cy):\n                    count = 2\n                    for k in range(prev, n):\n                        if k == i or k == j:\n                            continue\n                        dx, dy = p[k]\n                        if dx - ex >= 1.0:\n                            break\n                        if (ex - dx) ** 2 + (ey - dy) ** 2 <= 1.0:\n                            count += 1\n                    ans = max(ans, count)\n    print(ans)\n","code_same":false,"relative_loc_diff_percent":3.0303030303,"diff":["-    return [[xc - k * yd, yc + k * xd], [xc + k * yd, yc - k * xd]]","+    xd *= k","+    yd *= k","+    return [[xc - yd, yc + xd], [xc + yd, yc - xd]]","-    p = [list(map(float, input().split())) for i in range(n)]","-    p.sort()","+    p = sorted(list(map(float, input().split())) for i in range(n))","-                        if dx - bx >= 2.0:","+                        if dx - ex >= 1.0:"],"diff_only_import_comment":false,"measured_runtime_v0":0.3026192219,"measured_runtime_v1":0.1054183228,"runtime_lift":2.8706510771,"key":["s376249504","s496295641"]}
{"user_id":"u849229491","problem_id":"p02690","language":"python","submission_id_v0":"s006550541","submission_id_v1":"s560841752","cpu_time_v0":67,"cpu_time_v1":54,"memory_v0":9152,"memory_v1":9064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":19.4,"input":"x = int(eval(input()))\n\nfor i in range(-200,200,1):\n\n    for j in range(-200,200,1):\n\n        if i**5-j**5==x:\n\n          print((i,j))\n\n          exit()","target":"import sys\n\nx = int(eval(input()))\n\nfor i in range(-159,159,1):\n\n    for j in range(-159,159,1):\n\n        if i**5 - j**5 == x:\n\n            print((str(i)+' '+str(j)))\n\n            sys.exit()","code_v0_loc":6,"code_v1_loc":7,"code_v0_num_chars":144,"code_v1_num_chars":182,"code_v0_no_empty_lines":"x = int(eval(input()))\nfor i in range(-200, 200, 1):\n    for j in range(-200, 200, 1):\n        if i**5 - j**5 == x:\n            print((i, j))\n            exit()\n","code_v1_no_empty_lines":"import sys\n\nx = int(eval(input()))\nfor i in range(-159, 159, 1):\n    for j in range(-159, 159, 1):\n        if i**5 - j**5 == x:\n            print((str(i) + \" \" + str(j)))\n            sys.exit()\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["+import sys","+","-for i in range(-200, 200, 1):","-    for j in range(-200, 200, 1):","+for i in range(-159, 159, 1):","+    for j in range(-159, 159, 1):","-            print((i, j))","-            exit()","+            print((str(i) + \" \" + str(j)))","+            sys.exit()"],"diff_only_import_comment":false,"measured_runtime_v0":0.6085173706,"measured_runtime_v1":0.478621159,"runtime_lift":1.2713967178,"key":["s006550541","s560841752"]}
{"user_id":"u185249212","problem_id":"p03545","language":"python","submission_id_v0":"s924705208","submission_id_v1":"s871428991","cpu_time_v0":341,"cpu_time_v1":173,"memory_v0":64748,"memory_v1":38384,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":49.27,"input":"\n\n# import numpy as np\n\n# import numpypy as np\n\nimport sys\n\ninput = sys.stdin.readline\n\n\n\ndef eprint(*args, **kwargs):\n\n    print(*args, file=sys.stderr, **kwargs)\n\n    return\n\n\n\nimport math\n\nimport string\n\nimport fractions\n\nfrom fractions import Fraction\n\nfrom fractions import gcd\n\n\n\ndef lcm(n,m):\n\n    return int(n*m\/gcd(n,m))\n\n\n\nimport re\n\nimport array\n\nimport copy\n\nimport functools\n\nimport operator\n\n\n\nimport collections\n\nimport itertools\n\nimport bisect\n\nimport heapq\n\n\n\n\n\nfrom heapq import heappush\n\nfrom heapq import heappop\n\nfrom heapq import heappushpop\n\nfrom heapq import heapify\n\nfrom heapq import heapreplace\n\n\n\nfrom queue import PriorityQueue as pq\n\n\n\ndef reduce(p, q):\n\n    common = fractions.gcd(p, q)\n\n    return (p\/\/common , q\/\/common )\n\n# from itertools import accumulate\n\n# from collections import deque\n\n\n\nimport random\n\n\n\n\n\ndef main():\n\n    # l = list(map(int, input().split()))\n\n    ll=input().strip()\n\n    l=[0 for i in range(4)]\n\n    for i in range(len(l)):\n\n        l[i]=int(ll[i])\n\n    NUM_CASE=3\n\n\n\n    for case in range(2**NUM_CASE):\n\n        # eprint(\"case : \" + str(case))\n\n        sum=l[0]\n\n        \n\n        stack=[]\n\n        S=\"\"\n\n        for index in range(NUM_CASE):\n\n            if (case>>index) & 1 == 1:\n\n                # eprint(\"l[%d] : %d\" % (index+1,l[index+1]) )\n\n                sum+=l[index+1]\n\n                stack.append(\"+\")\n\n            else:\n\n                # eprint(\"l[%d] : %d\" % (index+1,l[index+1]) )\n\n                sum-=l[index+1]\n\n                stack.append(\"-\")\n\n        # eprint(\"sum : \" + str(sum))\n\n        if sum==7:\n\n            for i in range(4):\n\n                S+=str(l[i])\n\n                if i!=3:\n\n                    S+=str(stack[i])\n\n            S+=\"=7\"\n\n            print(S)\n\n            return\n\n    return\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"\n\n# import numpy as np\n\n# import numpypy as np\n\nimport sys\n\ninput = sys.stdin.readline\n\n\n\ndef eprint(*args, **kwargs):\n\n    print(*args, file=sys.stderr, **kwargs)\n\n    return\n\n\n\n# import math\n\n# import string\n\n# import fractions\n\n# from fractions import Fraction\n\n# from fractions import gcd\n\n\n\n# def lcm(n,m):\n\n#     return int(n*m\/gcd(n,m))\n\n\n\n# import re\n\n# import array\n\n# import copy\n\n# import functools\n\n# import operator\n\n\n\n# import collections\n\n# import itertools\n\n# import bisect\n\n# import heapq\n\n\n\n\n\n# from heapq import heappush\n\n# from heapq import heappop\n\n# from heapq import heappushpop\n\n# from heapq import heapify\n\n# from heapq import heapreplace\n\n\n\n# from queue import PriorityQueue as pq\n\n\n\n# def reduce(p, q):\n\n#     common = fractions.gcd(p, q)\n\n#     return (p\/\/common , q\/\/common )\n\n# # from itertools import accumulate\n\n# # from collections import deque\n\n\n\n# from operator import mul\n\n# from functools import reduce\n\n\n\n# def combinations_count(n, r):\n\n#     r = min(r, n - r)\n\n#     numer = reduce(mul, range(n, n - r, -1), 1)\n\n#     denom = reduce(mul, range(1, r + 1), 1)\n\n#     return numer \/\/ denom\n\n\n\n# import random\n\n\n\n\n\ndef main():\n\n    # a,b,c,d = map(int, input().strip().split())\n\n    l_abcd = list(map(int,input().strip()))\n\n    eprint(\"l_abcd \",end=\": \")\n\n    eprint(l_abcd)\n\n    for case in range(2 ** 3):     # \u5834\u5408\u30eb\u30fc\u30d7 # n\u306f\u4eba\u3068\u304b\u30e2\u30ce\u3068\u304b\u306e\u500b\u6570\n\n        l_op_bin = list(map(int,(format(case,'b').zfill(3))))\n\n        # eprint(\"l_op_bin \",end=\": \")\n\n        # eprint(l_op_bin)\n\n        \n\n        #flag=0\n\n        sum_x=l_abcd[0]\n\n        l_op=[]\n\n        for index_location in range(3):      # \u4eba\u3068\u304b\u30e2\u30ce\u3068\u304b\u30eb\u30fc\u30d7\n\n            if l_op_bin[index_location]==1:                   # \u305d\u306e\u6841\u304cyes\u3060\u3068\u4eee\u5b9a\u3057\u3066\u3044\u308b\u5834\u5408\n\n               sum_x += l_abcd[1+index_location]\n\n               l_op.append(\"+\")\n\n            else:                                 # \u305d\u306e\u6841\u304cno\u3060\u3068\u4eee\u5b9a\u3057\u3066\u3044\u308b\u5834\u5408\n\n               sum_x -= l_abcd[1+index_location]\n\n               l_op.append(\"-\")\n\n        if sum_x==7:\n\n            print(l_abcd[0], end=\"\")\n\n            print(l_op[0],end=\"\")\n\n            print(l_abcd[1], end=\"\")    \n\n            print(l_op[1],end=\"\")\n\n            print(l_abcd[2], end=\"\")    \n\n            print(l_op[2],end=\"\")\n\n            print(l_abcd[3], end=\"=7\\n\")\n\n            return\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":84,"code_v1_loc":88,"code_v0_num_chars":1865,"code_v1_num_chars":2336,"code_v0_no_empty_lines":"# import numpy as np\n# import numpypy as np\nimport sys\n\ninput = sys.stdin.readline\n\n\ndef eprint(*args, **kwargs):\n    print(*args, file=sys.stderr, **kwargs)\n    return\n\n\nimport math\nimport string\nimport fractions\nfrom fractions import Fraction\nfrom fractions import gcd\n\n\ndef lcm(n, m):\n    return int(n * m \/ gcd(n, m))\n\n\nimport re\nimport array\nimport copy\nimport functools\nimport operator\nimport collections\nimport itertools\nimport bisect\nimport heapq\nfrom heapq import heappush\nfrom heapq import heappop\nfrom heapq import heappushpop\nfrom heapq import heapify\nfrom heapq import heapreplace\nfrom queue import PriorityQueue as pq\n\n\ndef reduce(p, q):\n    common = fractions.gcd(p, q)\n    return (p \/\/ common, q \/\/ common)\n\n\n# from itertools import accumulate\n# from collections import deque\nimport random\n\n\ndef main():\n    # l = list(map(int, input().split()))\n    ll = input().strip()\n    l = [0 for i in range(4)]\n    for i in range(len(l)):\n        l[i] = int(ll[i])\n    NUM_CASE = 3\n    for case in range(2**NUM_CASE):\n        # eprint(\"case : \" + str(case))\n        sum = l[0]\n        stack = []\n        S = \"\"\n        for index in range(NUM_CASE):\n            if (case >> index) & 1 == 1:\n                # eprint(\"l[%d] : %d\" % (index+1,l[index+1]) )\n                sum += l[index + 1]\n                stack.append(\"+\")\n            else:\n                # eprint(\"l[%d] : %d\" % (index+1,l[index+1]) )\n                sum -= l[index + 1]\n                stack.append(\"-\")\n        # eprint(\"sum : \" + str(sum))\n        if sum == 7:\n            for i in range(4):\n                S += str(l[i])\n                if i != 3:\n                    S += str(stack[i])\n            S += \"=7\"\n            print(S)\n            return\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"# import numpy as np\n# import numpypy as np\nimport sys\n\ninput = sys.stdin.readline\n\n\ndef eprint(*args, **kwargs):\n    print(*args, file=sys.stderr, **kwargs)\n    return\n\n\n# import math\n# import string\n# import fractions\n# from fractions import Fraction\n# from fractions import gcd\n# def lcm(n,m):\n#     return int(n*m\/gcd(n,m))\n# import re\n# import array\n# import copy\n# import functools\n# import operator\n# import collections\n# import itertools\n# import bisect\n# import heapq\n# from heapq import heappush\n# from heapq import heappop\n# from heapq import heappushpop\n# from heapq import heapify\n# from heapq import heapreplace\n# from queue import PriorityQueue as pq\n# def reduce(p, q):\n#     common = fractions.gcd(p, q)\n#     return (p\/\/common , q\/\/common )\n# # from itertools import accumulate\n# # from collections import deque\n# from operator import mul\n# from functools import reduce\n# def combinations_count(n, r):\n#     r = min(r, n - r)\n#     numer = reduce(mul, range(n, n - r, -1), 1)\n#     denom = reduce(mul, range(1, r + 1), 1)\n#     return numer \/\/ denom\n# import random\ndef main():\n    # a,b,c,d = map(int, input().strip().split())\n    l_abcd = list(map(int, input().strip()))\n    eprint(\"l_abcd \", end=\": \")\n    eprint(l_abcd)\n    for case in range(2**3):  # \u5834\u5408\u30eb\u30fc\u30d7 # n\u306f\u4eba\u3068\u304b\u30e2\u30ce\u3068\u304b\u306e\u500b\u6570\n        l_op_bin = list(map(int, (format(case, \"b\").zfill(3))))\n        # eprint(\"l_op_bin \",end=\": \")\n        # eprint(l_op_bin)\n        # flag=0\n        sum_x = l_abcd[0]\n        l_op = []\n        for index_location in range(3):  # \u4eba\u3068\u304b\u30e2\u30ce\u3068\u304b\u30eb\u30fc\u30d7\n            if l_op_bin[index_location] == 1:  # \u305d\u306e\u6841\u304cyes\u3060\u3068\u4eee\u5b9a\u3057\u3066\u3044\u308b\u5834\u5408\n                sum_x += l_abcd[1 + index_location]\n                l_op.append(\"+\")\n            else:  # \u305d\u306e\u6841\u304cno\u3060\u3068\u4eee\u5b9a\u3057\u3066\u3044\u308b\u5834\u5408\n                sum_x -= l_abcd[1 + index_location]\n                l_op.append(\"-\")\n        if sum_x == 7:\n            print(l_abcd[0], end=\"\")\n            print(l_op[0], end=\"\")\n            print(l_abcd[1], end=\"\")\n            print(l_op[1], end=\"\")\n            print(l_abcd[2], end=\"\")\n            print(l_op[2], end=\"\")\n            print(l_abcd[3], end=\"=7\\n\")\n            return\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":4.5454545455,"diff":["-import math","-import string","-import fractions","-from fractions import Fraction","-from fractions import gcd","-","-","-def lcm(n, m):","-    return int(n * m \/ gcd(n, m))","-","-","-import re","-import array","-import copy","-import functools","-import operator","-import collections","-import itertools","-import bisect","-import heapq","-from heapq import heappush","-from heapq import heappop","-from heapq import heappushpop","-from heapq import heapify","-from heapq import heapreplace","-from queue import PriorityQueue as pq","-","-","-def reduce(p, q):","-    common = fractions.gcd(p, q)","-    return (p \/\/ common, q \/\/ common)","-","-","-# from itertools import accumulate","-# from collections import deque","-import random","-","-","+# import math","+# import string","+# import fractions","+# from fractions import Fraction","+# from fractions import gcd","+# def lcm(n,m):","+#     return int(n*m\/gcd(n,m))","+# import re","+# import array","+# import copy","+# import functools","+# import operator","+# import collections","+# import itertools","+# import bisect","+# import heapq","+# from heapq import heappush","+# from heapq import heappop","+# from heapq import heappushpop","+# from heapq import heapify","+# from heapq import heapreplace","+# from queue import PriorityQueue as pq","+# def reduce(p, q):","+#     common = fractions.gcd(p, q)","+#     return (p\/\/common , q\/\/common )","+# # from itertools import accumulate","+# # from collections import deque","+# from operator import mul","+# from functools import reduce","+# def combinations_count(n, r):","+#     r = min(r, n - r)","+#     numer = reduce(mul, range(n, n - r, -1), 1)","+#     denom = reduce(mul, range(1, r + 1), 1)","+#     return numer \/\/ denom","+# import random","-    # l = list(map(int, input().split()))","-    ll = input().strip()","-    l = [0 for i in range(4)]","-    for i in range(len(l)):","-        l[i] = int(ll[i])","-    NUM_CASE = 3","-    for case in range(2**NUM_CASE):","-        # eprint(\"case : \" + str(case))","-        sum = l[0]","-        stack = []","-        S = \"\"","-        for index in range(NUM_CASE):","-            if (case >> index) & 1 == 1:","-                # eprint(\"l[%d] : %d\" % (index+1,l[index+1]) )","-                sum += l[index + 1]","-                stack.append(\"+\")","-            else:","-                # eprint(\"l[%d] : %d\" % (index+1,l[index+1]) )","-                sum -= l[index + 1]","-                stack.append(\"-\")","-        # eprint(\"sum : \" + str(sum))","-        if sum == 7:","-            for i in range(4):","-                S += str(l[i])","-                if i != 3:","-                    S += str(stack[i])","-            S += \"=7\"","-            print(S)","+    # a,b,c,d = map(int, input().strip().split())","+    l_abcd = list(map(int, input().strip()))","+    eprint(\"l_abcd \", end=\": \")","+    eprint(l_abcd)","+    for case in range(2**3):  # \u5834\u5408\u30eb\u30fc\u30d7 # n\u306f\u4eba\u3068\u304b\u30e2\u30ce\u3068\u304b\u306e\u500b\u6570","+        l_op_bin = list(map(int, (format(case, \"b\").zfill(3))))","+        # eprint(\"l_op_bin \",end=\": \")","+        # eprint(l_op_bin)","+        # flag=0","+        sum_x = l_abcd[0]","+        l_op = []","+        for index_location in range(3):  # \u4eba\u3068\u304b\u30e2\u30ce\u3068\u304b\u30eb\u30fc\u30d7","+            if l_op_bin[index_location] == 1:  # \u305d\u306e\u6841\u304cyes\u3060\u3068\u4eee\u5b9a\u3057\u3066\u3044\u308b\u5834\u5408","+                sum_x += l_abcd[1 + index_location]","+                l_op.append(\"+\")","+            else:  # \u305d\u306e\u6841\u304cno\u3060\u3068\u4eee\u5b9a\u3057\u3066\u3044\u308b\u5834\u5408","+                sum_x -= l_abcd[1 + index_location]","+                l_op.append(\"-\")","+        if sum_x == 7:","+            print(l_abcd[0], end=\"\")","+            print(l_op[0], end=\"\")","+            print(l_abcd[1], end=\"\")","+            print(l_op[1], end=\"\")","+            print(l_abcd[2], end=\"\")","+            print(l_op[2], end=\"\")","+            print(l_abcd[3], end=\"=7\\n\")","-    return"],"diff_only_import_comment":false,"measured_runtime_v0":0.3214388018,"measured_runtime_v1":0.2510136111,"runtime_lift":1.2805632347,"key":["s924705208","s871428991"]}
{"user_id":"u057964173","problem_id":"p03371","language":"python","submission_id_v0":"s236240914","submission_id_v1":"s892922951","cpu_time_v0":286,"cpu_time_v1":86,"memory_v0":62304,"memory_v1":7064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":69.93,"input":"import sys\n\ndef input(): return sys.stdin.readline().strip()\n\n\n\ndef resolve():\n\n    import math\n\n    a,b,c,x,y=list(map(int, input().split()))\n\n    cmax=max(x,y)*2\n\n    l=[]\n\n    for i in range(cmax+1):\n\n        amai = max(math.ceil(x - 0.5 * i),0)\n\n        bmai = max(math.ceil(y - 0.5 * i),0)\n\n        l.append(amai*a+bmai*b+i*c)\n\n    print((min(l)))\n\nresolve()","target":"import sys\n\ndef input(): return sys.stdin.readline().strip()\n\n\n\ndef resolve():\n\n    import math\n\n    a,b,c,x,y=list(map(int, input().split()))\n\n    # AB\u30d4\u30b6\u3092\u5947\u6570\u679a\u8cb7\u3063\u3066\u30821\u679a\u7121\u99c4\u306b\u306a\u308b\u304b\u3089\u3001AB\u30d4\u30b6\u306f2\u679a\u30921\u679a\u3060\u3068\u8003\u3048\u308b\n\n    # c\u306e\u5024\u6bb5\u30922\u500d\u306b\u3057\u3066\u679a\u6570\u3092\u534a\u5206\u306b\n\n    cmax=max(x,y) # AB\u30d4\u30b6\u306e\u6700\u5927\u679a\u6570(2\u679a\u30921\u679a\u3068\u8003\u3048\u305f\u3068\u304d)\n\n    c=2*c\n\n    l=[]\n\n    for i in range(cmax+1):\n\n        amai = max(x - i,0)\n\n        bmai = max(y - i,0)\n\n        l.append(amai*a+bmai*b+i*c)\n\n    print((min(l)))\n\nresolve()","code_v0_loc":14,"code_v1_loc":17,"code_v0_num_chars":355,"code_v1_num_chars":424,"code_v0_no_empty_lines":"import sys\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef resolve():\n    import math\n\n    a, b, c, x, y = list(map(int, input().split()))\n    cmax = max(x, y) * 2\n    l = []\n    for i in range(cmax + 1):\n        amai = max(math.ceil(x - 0.5 * i), 0)\n        bmai = max(math.ceil(y - 0.5 * i), 0)\n        l.append(amai * a + bmai * b + i * c)\n    print((min(l)))\n\n\nresolve()\n","code_v1_no_empty_lines":"import sys\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef resolve():\n    import math\n\n    a, b, c, x, y = list(map(int, input().split()))\n    # AB\u30d4\u30b6\u3092\u5947\u6570\u679a\u8cb7\u3063\u3066\u30821\u679a\u7121\u99c4\u306b\u306a\u308b\u304b\u3089\u3001AB\u30d4\u30b6\u306f2\u679a\u30921\u679a\u3060\u3068\u8003\u3048\u308b\n    # c\u306e\u5024\u6bb5\u30922\u500d\u306b\u3057\u3066\u679a\u6570\u3092\u534a\u5206\u306b\n    cmax = max(x, y)  # AB\u30d4\u30b6\u306e\u6700\u5927\u679a\u6570(2\u679a\u30921\u679a\u3068\u8003\u3048\u305f\u3068\u304d)\n    c = 2 * c\n    l = []\n    for i in range(cmax + 1):\n        amai = max(x - i, 0)\n        bmai = max(y - i, 0)\n        l.append(amai * a + bmai * b + i * c)\n    print((min(l)))\n\n\nresolve()\n","code_same":false,"relative_loc_diff_percent":17.6470588235,"diff":["-    cmax = max(x, y) * 2","+    # AB\u30d4\u30b6\u3092\u5947\u6570\u679a\u8cb7\u3063\u3066\u30821\u679a\u7121\u99c4\u306b\u306a\u308b\u304b\u3089\u3001AB\u30d4\u30b6\u306f2\u679a\u30921\u679a\u3060\u3068\u8003\u3048\u308b","+    # c\u306e\u5024\u6bb5\u30922\u500d\u306b\u3057\u3066\u679a\u6570\u3092\u534a\u5206\u306b","+    cmax = max(x, y)  # AB\u30d4\u30b6\u306e\u6700\u5927\u679a\u6570(2\u679a\u30921\u679a\u3068\u8003\u3048\u305f\u3068\u304d)","+    c = 2 * c","-        amai = max(math.ceil(x - 0.5 * i), 0)","-        bmai = max(math.ceil(y - 0.5 * i), 0)","+        amai = max(x - i, 0)","+        bmai = max(y - i, 0)"],"diff_only_import_comment":false,"measured_runtime_v0":0.4395413058,"measured_runtime_v1":0.288304507,"runtime_lift":1.5245731338,"key":["s236240914","s892922951"]}
{"user_id":"u286955577","problem_id":"p03074","language":"python","submission_id_v0":"s853547546","submission_id_v1":"s138697044","cpu_time_v0":74,"cpu_time_v1":66,"memory_v0":4596,"memory_v1":4596,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.81,"input":"def solve():\n\n  N, K = list(map(int, input().split()))\n\n  _S = eval(input())\n\n  S = []\n\n  b = _S[0]\n\n  s = 0\n\n  if b == '0': S.append(0)\n\n  for _s in _S:\n\n    if b == _s:\n\n      s = s + 1\n\n    else:\n\n      b = _s\n\n      S.append(s)\n\n      s = 1\n\n  S.append(s)\n\n  if b == '0': S.append(0)\n\n\n\n  num = min(len(S), 2 * K + 1)\n\n  # n = sum(S[0:num if _S[0] == '1' else (num - 1)])\n\n  n = sum(S[0:num])\n\n  m = n\n\n  # for i in range(0 if _S[0] == '1' else -1, len(S) - num, 2):\n\n  for i in range(0, len(S) - num, 2):\n\n    n = n - sum(S[i:i+2])\n\n    n = n + sum(S[i + num:i + num + 2])\n\n    m = max(m, n)\n\n\n\n  return m\n\n\n\nprint((solve()))","target":"def solve():\n\n  N, K = list(map(int, input().split()))\n\n  s = eval(input())\n\n  S = []\n\n  b = s[0]\n\n  cnt = 0\n\n\n\n  if s[0] == '0': S.append(0)\n\n  for c in s:\n\n    if b == c: cnt = cnt + 1\n\n    else:\n\n      b = c\n\n      S.append(cnt)\n\n      cnt = 1\n\n  S.append(cnt)\n\n  if s[-1] == '0': S.append(0)\n\n\n\n  num = min(len(S), 2 * K + 1)\n\n  part = sum(S[0:num])\n\n  ans = part\n\n\n\n  for i in range(0, len(S) - num, 2):\n\n    part = part - sum(S[i:i+2]) + sum(S[i + num:i + num + 2])\n\n    ans = max(ans, part)\n\n\n\n  return ans\n\n\n\nprint((solve()))\n","code_v0_loc":30,"code_v1_loc":28,"code_v0_num_chars":616,"code_v1_num_chars":520,"code_v0_no_empty_lines":"def solve():\n    N, K = list(map(int, input().split()))\n    _S = eval(input())\n    S = []\n    b = _S[0]\n    s = 0\n    if b == \"0\":\n        S.append(0)\n    for _s in _S:\n        if b == _s:\n            s = s + 1\n        else:\n            b = _s\n            S.append(s)\n            s = 1\n    S.append(s)\n    if b == \"0\":\n        S.append(0)\n    num = min(len(S), 2 * K + 1)\n    # n = sum(S[0:num if _S[0] == '1' else (num - 1)])\n    n = sum(S[0:num])\n    m = n\n    # for i in range(0 if _S[0] == '1' else -1, len(S) - num, 2):\n    for i in range(0, len(S) - num, 2):\n        n = n - sum(S[i : i + 2])\n        n = n + sum(S[i + num : i + num + 2])\n        m = max(m, n)\n    return m\n\n\nprint((solve()))\n","code_v1_no_empty_lines":"def solve():\n    N, K = list(map(int, input().split()))\n    s = eval(input())\n    S = []\n    b = s[0]\n    cnt = 0\n    if s[0] == \"0\":\n        S.append(0)\n    for c in s:\n        if b == c:\n            cnt = cnt + 1\n        else:\n            b = c\n            S.append(cnt)\n            cnt = 1\n    S.append(cnt)\n    if s[-1] == \"0\":\n        S.append(0)\n    num = min(len(S), 2 * K + 1)\n    part = sum(S[0:num])\n    ans = part\n    for i in range(0, len(S) - num, 2):\n        part = part - sum(S[i : i + 2]) + sum(S[i + num : i + num + 2])\n        ans = max(ans, part)\n    return ans\n\n\nprint((solve()))\n","code_same":false,"relative_loc_diff_percent":6.6666666667,"diff":["-    _S = eval(input())","+    s = eval(input())","-    b = _S[0]","-    s = 0","-    if b == \"0\":","+    b = s[0]","+    cnt = 0","+    if s[0] == \"0\":","-    for _s in _S:","-        if b == _s:","-            s = s + 1","+    for c in s:","+        if b == c:","+            cnt = cnt + 1","-            b = _s","-            S.append(s)","-            s = 1","-    S.append(s)","-    if b == \"0\":","+            b = c","+            S.append(cnt)","+            cnt = 1","+    S.append(cnt)","+    if s[-1] == \"0\":","-    # n = sum(S[0:num if _S[0] == '1' else (num - 1)])","-    n = sum(S[0:num])","-    m = n","-    # for i in range(0 if _S[0] == '1' else -1, len(S) - num, 2):","+    part = sum(S[0:num])","+    ans = part","-        n = n - sum(S[i : i + 2])","-        n = n + sum(S[i + num : i + num + 2])","-        m = max(m, n)","-    return m","+        part = part - sum(S[i : i + 2]) + sum(S[i + num : i + num + 2])","+        ans = max(ans, part)","+    return ans"],"diff_only_import_comment":false,"measured_runtime_v0":0.3473945413,"measured_runtime_v1":0.2136866565,"runtime_lift":1.625719392,"key":["s853547546","s138697044"]}
{"user_id":"u259738923","problem_id":"p03796","language":"python","submission_id_v0":"s911512169","submission_id_v1":"s353747803","cpu_time_v0":231,"cpu_time_v1":41,"memory_v0":3972,"memory_v1":7396,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":82.25,"input":"import math\n\nN = int(eval(input()))\n\nans = math.factorial(N) % (10 ** 9 + 7)\n\nprint(ans)","target":"n = int(eval(input()))\n\nfrom functools import reduce\n\nprint((reduce(lambda x,y:x*y%1000000007,list(range(1,n+1)))))","code_v0_loc":4,"code_v1_loc":3,"code_v0_num_chars":82,"code_v1_num_chars":107,"code_v0_no_empty_lines":"import math\n\nN = int(eval(input()))\nans = math.factorial(N) % (10**9 + 7)\nprint(ans)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nfrom functools import reduce\n\nprint((reduce(lambda x, y: x * y % 1000000007, list(range(1, n + 1)))))\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-import math","+n = int(eval(input()))","+from functools import reduce","-N = int(eval(input()))","-ans = math.factorial(N) % (10**9 + 7)","-print(ans)","+print((reduce(lambda x, y: x * y % 1000000007, list(range(1, n + 1)))))"],"diff_only_import_comment":false,"measured_runtime_v0":0.5315986769,"measured_runtime_v1":0.2369310765,"runtime_lift":2.2436848922,"key":["s911512169","s353747803"]}
{"user_id":"u775681539","problem_id":"p03371","language":"python","submission_id_v0":"s986639109","submission_id_v1":"s095330807","cpu_time_v0":186,"cpu_time_v1":89,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":52.15,"input":"#python3\n\nINF = int(1e9)\n\ndef main():\n\n    a, b, c, x, y = list(map(int, input().split()))\n\n    ans = INF\n\n    for i in range(2*10**5+100):\n\n        t = 2*c*i + max(x-i, 0) * a + max(y-i, 0) * b\n\n        ans = min(ans, t)\n\n    print(ans)\n\nmain()","target":"INF = int(1e5)+5\n\n\n\ndef main():\n\n    a, b, c, x, y = list(map(int, input().split()))\n\n    ans = INF*INF\n\n    for i in range(INF):\n\n        tmp = 2*i*c + a*max(x-i, 0) + b*max(y-i, 0) \n\n        ans = min(tmp, ans)\n\n    print(ans)\n\nmain()\n","code_v0_loc":10,"code_v1_loc":10,"code_v0_num_chars":239,"code_v1_num_chars":231,"code_v0_no_empty_lines":"# python3\nINF = int(1e9)\n\n\ndef main():\n    a, b, c, x, y = list(map(int, input().split()))\n    ans = INF\n    for i in range(2 * 10**5 + 100):\n        t = 2 * c * i + max(x - i, 0) * a + max(y - i, 0) * b\n        ans = min(ans, t)\n    print(ans)\n\n\nmain()\n","code_v1_no_empty_lines":"INF = int(1e5) + 5\n\n\ndef main():\n    a, b, c, x, y = list(map(int, input().split()))\n    ans = INF * INF\n    for i in range(INF):\n        tmp = 2 * i * c + a * max(x - i, 0) + b * max(y - i, 0)\n        ans = min(tmp, ans)\n    print(ans)\n\n\nmain()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-# python3","-INF = int(1e9)","+INF = int(1e5) + 5","-    ans = INF","-    for i in range(2 * 10**5 + 100):","-        t = 2 * c * i + max(x - i, 0) * a + max(y - i, 0) * b","-        ans = min(ans, t)","+    ans = INF * INF","+    for i in range(INF):","+        tmp = 2 * i * c + a * max(x - i, 0) + b * max(y - i, 0)","+        ans = min(tmp, ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.3276309614,"measured_runtime_v1":0.7168484554,"runtime_lift":1.8520385325,"key":["s986639109","s095330807"]}
{"user_id":"u575431498","problem_id":"p03828","language":"python","submission_id_v0":"s058426510","submission_id_v1":"s587454237","cpu_time_v0":73,"cpu_time_v1":18,"memory_v0":3572,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":75.34,"input":"from functools import reduce\n\nN = int(eval(input()))\n\n\n\nprime_table = [1] * (N+1)\n\n\n\nfor x in range(2, N+1):\n\n    for t in range(2, x+1):\n\n        while x % t == 0:\n\n            prime_table[t] += 1\n\n            x \/\/= t\n\nprint((reduce(lambda x, y: x * y % (int(1e9) + 7), prime_table)))","target":"def prime_factorize(n):\n\n    while n % 2 == 0:\n\n        a[2] += 1\n\n        n \/\/= 2\n\n    f = 3\n\n    while f * f <= n:\n\n        if n % f == 0:\n\n            a[f] += 1\n\n            n \/\/= f\n\n        else:\n\n            f += 2\n\n    if n != 1:\n\n        a[n] += 1\n\n\n\nN = int(eval(input()))\n\na = [0]*(N+1)\n\nfor i in range(2, N+1):\n\n    prime_factorize(i)\n\nans = 1\n\nfor i in a:\n\n    if i > 0:\n\n        ans *= (i+1)\n\nbig = 10**9 + 7\n\nprint((ans % big))","code_v0_loc":11,"code_v1_loc":24,"code_v0_num_chars":277,"code_v1_num_chars":432,"code_v0_no_empty_lines":"from functools import reduce\n\nN = int(eval(input()))\nprime_table = [1] * (N + 1)\nfor x in range(2, N + 1):\n    for t in range(2, x + 1):\n        while x % t == 0:\n            prime_table[t] += 1\n            x \/\/= t\nprint((reduce(lambda x, y: x * y % (int(1e9) + 7), prime_table)))\n","code_v1_no_empty_lines":"def prime_factorize(n):\n    while n % 2 == 0:\n        a[2] += 1\n        n \/\/= 2\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            a[f] += 1\n            n \/\/= f\n        else:\n            f += 2\n    if n != 1:\n        a[n] += 1\n\n\nN = int(eval(input()))\na = [0] * (N + 1)\nfor i in range(2, N + 1):\n    prime_factorize(i)\nans = 1\nfor i in a:\n    if i > 0:\n        ans *= i + 1\nbig = 10**9 + 7\nprint((ans % big))\n","code_same":false,"relative_loc_diff_percent":54.1666666667,"diff":["-from functools import reduce","+def prime_factorize(n):","+    while n % 2 == 0:","+        a[2] += 1","+        n \/\/= 2","+    f = 3","+    while f * f <= n:","+        if n % f == 0:","+            a[f] += 1","+            n \/\/= f","+        else:","+            f += 2","+    if n != 1:","+        a[n] += 1","+","-prime_table = [1] * (N + 1)","-for x in range(2, N + 1):","-    for t in range(2, x + 1):","-        while x % t == 0:","-            prime_table[t] += 1","-            x \/\/= t","-print((reduce(lambda x, y: x * y % (int(1e9) + 7), prime_table)))","+a = [0] * (N + 1)","+for i in range(2, N + 1):","+    prime_factorize(i)","+ans = 1","+for i in a:","+    if i > 0:","+        ans *= i + 1","+big = 10**9 + 7","+print((ans % big))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2580870204,"measured_runtime_v1":0.1952191839,"runtime_lift":1.3220371851,"key":["s058426510","s587454237"]}
{"user_id":"u394853232","problem_id":"p03457","language":"python","submission_id_v0":"s138460182","submission_id_v1":"s158223063","cpu_time_v0":868,"cpu_time_v1":399,"memory_v0":21636,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":54.03,"input":"import numpy as np\n\nn = int(eval(input()))\n\nT = []\n\nX = []\n\nY = []\n\nt1 = 0\n\nx1 = 0\n\ny1 = 0\n\nfor i in range(n):\n\n    m = input().split()\n\n    T.append(int(m[0]) - t1)\n\n    t1 = int(m[0])\n\n    X.append(abs(int(m[1]) - x1))\n\n    x1 = int(m[1])\n\n    Y.append(abs(int(m[2]) - y1))\n\n    y1 = int(m[2])\n\nT = np.array(T)\n\nX = np.array(X)\n\nY = np.array(Y)\n\nfor i in range(n):\n\n    if X[i] + Y[i] > T[i] or (X[i] + Y[i] + T[i]) % 2 == 1:\n\n        print('No')\n\n        break\n\nelse:\n\n    print('Yes')","target":"n = int(eval(input()))\n\nt1 = 0\n\nx1 = 0\n\ny1 = 0\n\nboolean = True\n\n\n\nfor __ in range(n):\n\n    t, x, y = [int(_) for _ in input().split()]\n\n    if boolean:\n\n        temp1 = x\n\n        temp2 = t\n\n        x = abs(x - x1) + abs(y - y1)\n\n        t -= t1\n\n        x1 = temp1\n\n        y1 = y\n\n        t1 = temp2\n\n        if x > t or (x + t) % 2 == 1:\n\n            boolean = False\n\nif boolean:\n\n    print('Yes')\n\nelse:\n\n    print('No')","code_v0_loc":25,"code_v1_loc":22,"code_v0_num_chars":482,"code_v1_num_chars":418,"code_v0_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\nT = []\nX = []\nY = []\nt1 = 0\nx1 = 0\ny1 = 0\nfor i in range(n):\n    m = input().split()\n    T.append(int(m[0]) - t1)\n    t1 = int(m[0])\n    X.append(abs(int(m[1]) - x1))\n    x1 = int(m[1])\n    Y.append(abs(int(m[2]) - y1))\n    y1 = int(m[2])\nT = np.array(T)\nX = np.array(X)\nY = np.array(Y)\nfor i in range(n):\n    if X[i] + Y[i] > T[i] or (X[i] + Y[i] + T[i]) % 2 == 1:\n        print(\"No\")\n        break\nelse:\n    print(\"Yes\")\n","code_v1_no_empty_lines":"n = int(eval(input()))\nt1 = 0\nx1 = 0\ny1 = 0\nboolean = True\nfor __ in range(n):\n    t, x, y = [int(_) for _ in input().split()]\n    if boolean:\n        temp1 = x\n        temp2 = t\n        x = abs(x - x1) + abs(y - y1)\n        t -= t1\n        x1 = temp1\n        y1 = y\n        t1 = temp2\n        if x > t or (x + t) % 2 == 1:\n            boolean = False\nif boolean:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","code_same":false,"relative_loc_diff_percent":12.0,"diff":["-import numpy as np","-","-T = []","-X = []","-Y = []","-for i in range(n):","-    m = input().split()","-    T.append(int(m[0]) - t1)","-    t1 = int(m[0])","-    X.append(abs(int(m[1]) - x1))","-    x1 = int(m[1])","-    Y.append(abs(int(m[2]) - y1))","-    y1 = int(m[2])","-T = np.array(T)","-X = np.array(X)","-Y = np.array(Y)","-for i in range(n):","-    if X[i] + Y[i] > T[i] or (X[i] + Y[i] + T[i]) % 2 == 1:","-        print(\"No\")","-        break","+boolean = True","+for __ in range(n):","+    t, x, y = [int(_) for _ in input().split()]","+    if boolean:","+        temp1 = x","+        temp2 = t","+        x = abs(x - x1) + abs(y - y1)","+        t -= t1","+        x1 = temp1","+        y1 = y","+        t1 = temp2","+        if x > t or (x + t) % 2 == 1:","+            boolean = False","+if boolean:","+    print(\"Yes\")","-    print(\"Yes\")","+    print(\"No\")"],"diff_only_import_comment":false,"measured_runtime_v0":1.386622709,"measured_runtime_v1":0.2001591682,"runtime_lift":6.927600275,"key":["s138460182","s158223063"]}
{"user_id":"u925364229","problem_id":"p03835","language":"python","submission_id_v0":"s889927917","submission_id_v1":"s987244986","cpu_time_v0":1777,"cpu_time_v1":266,"memory_v0":2940,"memory_v1":42092,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":85.03,"input":"K,S = list(map(int,input().split(\" \")))\n\nans = 0\n\nfor i in range(K+1):\n\n\tfor j in range(K+1):\n\n\t\tif (S - i - j) <= K and (S-i-j) >= 0:\n\n\t\t\tans += 1\n\n\n\nprint(ans)\n","target":"K, S = list(map(int,input().split(\" \")))\n\nans = 0\n\nfor X in range(K+1):\n\n    for Y in range(K+1):\n\n        if 0 <= (S - X - Y) <= K:\n\n            ans += 1\n\n\n\nprint(ans)","code_v0_loc":8,"code_v1_loc":8,"code_v0_num_chars":156,"code_v1_num_chars":162,"code_v0_no_empty_lines":"K, S = list(map(int, input().split(\" \")))\nans = 0\nfor i in range(K + 1):\n    for j in range(K + 1):\n        if (S - i - j) <= K and (S - i - j) >= 0:\n            ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"K, S = list(map(int, input().split(\" \")))\nans = 0\nfor X in range(K + 1):\n    for Y in range(K + 1):\n        if 0 <= (S - X - Y) <= K:\n            ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-for i in range(K + 1):","-    for j in range(K + 1):","-        if (S - i - j) <= K and (S - i - j) >= 0:","+for X in range(K + 1):","+    for Y in range(K + 1):","+        if 0 <= (S - X - Y) <= K:"],"diff_only_import_comment":false,"measured_runtime_v0":0.441297763,"measured_runtime_v1":0.3279348275,"runtime_lift":1.3456873926,"key":["s889927917","s987244986"]}
{"user_id":"u140201022","problem_id":"p02412","language":"python","submission_id_v0":"s179146540","submission_id_v1":"s419434066","cpu_time_v0":420,"cpu_time_v1":30,"memory_v0":4208,"memory_v1":4204,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":92.86,"input":"while 1:\n\n    ans=0\n\n    n,x=list(map(int,input().split()))\n\n    if n:\n\n        for i in range(1,n-1):\n\n            for j in range(i+1,n):\n\n                for k in range(j+1,n+1):\n\n                    if i+j+k==x:ans+=1\n\n    else:break\n\n    print(ans)","target":"while 1:\n\n    a=0\n\n    n,x=list(map(int,input().split()))\n\n    if n==0:break\n\n    for i in range(1,n-1):\n\n        for j in range(i+1,n):\n\n            c=x-i-j\n\n            if c>j and c<=n:a+=1\n\n    print(a)","code_v0_loc":10,"code_v1_loc":9,"code_v0_num_chars":249,"code_v1_num_chars":202,"code_v0_no_empty_lines":"while 1:\n    ans = 0\n    n, x = list(map(int, input().split()))\n    if n:\n        for i in range(1, n - 1):\n            for j in range(i + 1, n):\n                for k in range(j + 1, n + 1):\n                    if i + j + k == x:\n                        ans += 1\n    else:\n        break\n    print(ans)\n","code_v1_no_empty_lines":"while 1:\n    a = 0\n    n, x = list(map(int, input().split()))\n    if n == 0:\n        break\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            c = x - i - j\n            if c > j and c <= n:\n                a += 1\n    print(a)\n","code_same":false,"relative_loc_diff_percent":10.0,"diff":["-    ans = 0","+    a = 0","-    if n:","-        for i in range(1, n - 1):","-            for j in range(i + 1, n):","-                for k in range(j + 1, n + 1):","-                    if i + j + k == x:","-                        ans += 1","-    else:","+    if n == 0:","-    print(ans)","+    for i in range(1, n - 1):","+        for j in range(i + 1, n):","+            c = x - i - j","+            if c > j and c <= n:","+                a += 1","+    print(a)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3642889087,"measured_runtime_v1":0.2896689522,"runtime_lift":1.2576042614,"key":["s179146540","s419434066"]}
{"user_id":"u390727364","problem_id":"p02690","language":"python","submission_id_v0":"s052815695","submission_id_v1":"s461844743","cpu_time_v0":103,"cpu_time_v1":51,"memory_v0":9116,"memory_v1":9132,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":50.49,"input":"x = int(eval(input()))\n\na = 0\n\nb = 0\n\nfor i in range(-200, 200):\n\n    for j in range(-200, 200):\n\n        if i ** 5 - j ** 5 == x:\n\n            a = i\n\n            b = j\n\nprint((a, b))\n","target":"x = int(eval(input()))\n\na = 0\n\nb = 0\n\nfor i in range(-120, 120):\n\n    for j in range(-120, 120):\n\n        if i ** 5 - j ** 5 == x:\n\n            a = i\n\n            b = j\n\nprint((a, b))\n","code_v0_loc":9,"code_v1_loc":9,"code_v0_num_chars":176,"code_v1_num_chars":176,"code_v0_no_empty_lines":"x = int(eval(input()))\na = 0\nb = 0\nfor i in range(-200, 200):\n    for j in range(-200, 200):\n        if i**5 - j**5 == x:\n            a = i\n            b = j\nprint((a, b))\n","code_v1_no_empty_lines":"x = int(eval(input()))\na = 0\nb = 0\nfor i in range(-120, 120):\n    for j in range(-120, 120):\n        if i**5 - j**5 == x:\n            a = i\n            b = j\nprint((a, b))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-for i in range(-200, 200):","-    for j in range(-200, 200):","+for i in range(-120, 120):","+    for j in range(-120, 120):"],"diff_only_import_comment":false,"measured_runtime_v0":0.9439397931,"measured_runtime_v1":0.4738806367,"runtime_lift":1.9919357745,"key":["s052815695","s461844743"]}
{"user_id":"u072717685","problem_id":"p02767","language":"python","submission_id_v0":"s067063811","submission_id_v1":"s910505357","cpu_time_v0":35,"cpu_time_v1":31,"memory_v0":5084,"memory_v1":9036,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.43,"input":"def main():\n\n  from statistics import mean\n\n  from math import floor,ceil\n\n\n\n  n = int(eval(input()))\n\n  x = list(map(int, input().split()))\n\n  x_mean = mean(x) \n\n  if x_mean == 0.5:\n\n      greater_than_x = len([i for i in x if i > x_mean])\n\n      if greater_than_x * 2 >= n:\n\n          x_mean = ceil(x_mean)\n\n      else:\n\n          x_mean = floor(x_mean)\n\n  elif x_mean % 1 > 0.5:\n\n      x_mean = ceil(x_mean)\n\n  else:\n\n      x_mean = floor(x_mean)\n\n  x2 = [(num - x_mean)**2 for num in x]\n\n  print((sum(x2)))\n\n\n\nmain()","target":"import sys\n\nread = sys.stdin.read\n\ndef main():\n\n    n, *x = list(map(int, read().split()))\n\n    r = float('inf')\n\n    for i1 in range(1, 101):\n\n        rt = 0\n\n        for xe in x:\n\n            rt += (xe - i1)**2\n\n        r = min(r, rt)\n\n    print(r)\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":21,"code_v1_loc":14,"code_v0_num_chars":512,"code_v1_num_chars":287,"code_v0_no_empty_lines":"def main():\n    from statistics import mean\n    from math import floor, ceil\n\n    n = int(eval(input()))\n    x = list(map(int, input().split()))\n    x_mean = mean(x)\n    if x_mean == 0.5:\n        greater_than_x = len([i for i in x if i > x_mean])\n        if greater_than_x * 2 >= n:\n            x_mean = ceil(x_mean)\n        else:\n            x_mean = floor(x_mean)\n    elif x_mean % 1 > 0.5:\n        x_mean = ceil(x_mean)\n    else:\n        x_mean = floor(x_mean)\n    x2 = [(num - x_mean) ** 2 for num in x]\n    print((sum(x2)))\n\n\nmain()\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.read\n\n\ndef main():\n    n, *x = list(map(int, read().split()))\n    r = float(\"inf\")\n    for i1 in range(1, 101):\n        rt = 0\n        for xe in x:\n            rt += (xe - i1) ** 2\n        r = min(r, rt)\n    print(r)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-def main():","-    from statistics import mean","-    from math import floor, ceil","+import sys","-    n = int(eval(input()))","-    x = list(map(int, input().split()))","-    x_mean = mean(x)","-    if x_mean == 0.5:","-        greater_than_x = len([i for i in x if i > x_mean])","-        if greater_than_x * 2 >= n:","-            x_mean = ceil(x_mean)","-        else:","-            x_mean = floor(x_mean)","-    elif x_mean % 1 > 0.5:","-        x_mean = ceil(x_mean)","-    else:","-        x_mean = floor(x_mean)","-    x2 = [(num - x_mean) ** 2 for num in x]","-    print((sum(x2)))","+read = sys.stdin.read","-main()","+def main():","+    n, *x = list(map(int, read().split()))","+    r = float(\"inf\")","+    for i1 in range(1, 101):","+        rt = 0","+        for xe in x:","+            rt += (xe - i1) ** 2","+        r = min(r, rt)","+    print(r)","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.3305953437,"measured_runtime_v1":0.2443374534,"runtime_lift":1.3530277041,"key":["s067063811","s910505357"]}
{"user_id":"u190086340","problem_id":"p03854","language":"python","submission_id_v0":"s952373499","submission_id_v1":"s487524594","cpu_time_v0":320,"cpu_time_v1":262,"memory_v0":79600,"memory_v1":58480,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":18.12,"input":"import sys\n\nsys.setrecursionlimit(10 ** 6)\n\n\n\n\n\ndef solve():\n\n    S = eval(input())\n\n    # print(S, len(S))\n\n\n\n    words = {0: \"dream\", 1: \"dreamer\", 2: \"erase\", 3: \"eraser\"}\n\n\n\n    TABLE = [[-1 for x in range(len(S) + 1)] for y in range(len(words) + 1)]\n\n\n\n    def recur(i, w):\n\n        if not TABLE[w][i] == -1:\n\n            return TABLE[w][i]\n\n\n\n        if i >= len(S):\n\n            # print(\"jey\", log)\n\n            return True\n\n\n\n        r1, r2, r3, r4 = False, False, False, False\n\n        if S[i:i + 5] == words[0]:\n\n            r1 = recur(i + 5, 0)\n\n        if S[i:i + 7] == words[1]:\n\n            r2 = recur(i + 7, 1)\n\n        if S[i:i + 5] == words[2]:\n\n            r3 = recur(i + 5, 2)\n\n        if S[i:i + 6] == words[3]:\n\n            r4 = recur(i + 6, 3)\n\n\n\n        TABLE[w][i] = r1 or r2 or r3 or r4 or False\n\n\n\n        return TABLE[w][i]\n\n\n\n    ans = recur(0, 0)\n\n\n\n    return ans\n\n\n\n\n\nif __name__ == '__main__':\n\n    res = solve()\n\n    if res:\n\n        print(\"YES\")\n\n    else:\n\n        print(\"NO\")\n","target":"import sys\n\nsys.setrecursionlimit(10 ** 6)\n\n\n\ndef solve():\n\n    S = eval(input())\n\n    # print(S, len(S))\n\n\n\n    S = S[::-1]\n\n    words = (\"dream\"[::-1], \"dreamer\"[::-1], \"erase\"[::-1], \"eraser\"[::-1])\n\n\n\n    def recur(i):\n\n        if i >= len(S):\n\n            return True\n\n\n\n        for word in words:\n\n            if S[i:i + len(word)] == word:\n\n                if recur(i + len(word)):\n\n                    return True\n\n        return False\n\n\n\n    ans = recur(0)\n\n\n\n    return ans\n\n\n\n\n\nif __name__ == '__main__':\n\n    res = solve()\n\n    if res:\n\n        print(\"YES\")\n\n    else:\n\n        print(\"NO\")\n","code_v0_loc":45,"code_v1_loc":31,"code_v0_num_chars":1006,"code_v1_num_chars":596,"code_v0_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10**6)\n\n\ndef solve():\n    S = eval(input())\n    # print(S, len(S))\n    words = {0: \"dream\", 1: \"dreamer\", 2: \"erase\", 3: \"eraser\"}\n    TABLE = [[-1 for x in range(len(S) + 1)] for y in range(len(words) + 1)]\n\n    def recur(i, w):\n        if not TABLE[w][i] == -1:\n            return TABLE[w][i]\n        if i >= len(S):\n            # print(\"jey\", log)\n            return True\n        r1, r2, r3, r4 = False, False, False, False\n        if S[i : i + 5] == words[0]:\n            r1 = recur(i + 5, 0)\n        if S[i : i + 7] == words[1]:\n            r2 = recur(i + 7, 1)\n        if S[i : i + 5] == words[2]:\n            r3 = recur(i + 5, 2)\n        if S[i : i + 6] == words[3]:\n            r4 = recur(i + 6, 3)\n        TABLE[w][i] = r1 or r2 or r3 or r4 or False\n        return TABLE[w][i]\n\n    ans = recur(0, 0)\n    return ans\n\n\nif __name__ == \"__main__\":\n    res = solve()\n    if res:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n","code_v1_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10**6)\n\n\ndef solve():\n    S = eval(input())\n    # print(S, len(S))\n    S = S[::-1]\n    words = (\"dream\"[::-1], \"dreamer\"[::-1], \"erase\"[::-1], \"eraser\"[::-1])\n\n    def recur(i):\n        if i >= len(S):\n            return True\n        for word in words:\n            if S[i : i + len(word)] == word:\n                if recur(i + len(word)):\n                    return True\n        return False\n\n    ans = recur(0)\n    return ans\n\n\nif __name__ == \"__main__\":\n    res = solve()\n    if res:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n","code_same":false,"relative_loc_diff_percent":31.1111111111,"diff":["-    words = {0: \"dream\", 1: \"dreamer\", 2: \"erase\", 3: \"eraser\"}","-    TABLE = [[-1 for x in range(len(S) + 1)] for y in range(len(words) + 1)]","+    S = S[::-1]","+    words = (\"dream\"[::-1], \"dreamer\"[::-1], \"erase\"[::-1], \"eraser\"[::-1])","-    def recur(i, w):","-        if not TABLE[w][i] == -1:","-            return TABLE[w][i]","+    def recur(i):","-            # print(\"jey\", log)","-        r1, r2, r3, r4 = False, False, False, False","-        if S[i : i + 5] == words[0]:","-            r1 = recur(i + 5, 0)","-        if S[i : i + 7] == words[1]:","-            r2 = recur(i + 7, 1)","-        if S[i : i + 5] == words[2]:","-            r3 = recur(i + 5, 2)","-        if S[i : i + 6] == words[3]:","-            r4 = recur(i + 6, 3)","-        TABLE[w][i] = r1 or r2 or r3 or r4 or False","-        return TABLE[w][i]","+        for word in words:","+            if S[i : i + len(word)] == word:","+                if recur(i + len(word)):","+                    return True","+        return False","-    ans = recur(0, 0)","+    ans = recur(0)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3275957136,"measured_runtime_v1":0.2137343092,"runtime_lift":1.5327240387,"key":["s952373499","s487524594"]}
{"user_id":"u794910686","problem_id":"p03494","language":"python","submission_id_v0":"s844467922","submission_id_v1":"s428626489","cpu_time_v0":148,"cpu_time_v1":19,"memory_v0":12496,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.16,"input":"import numpy as np\n\n\n\neval(input())\n\nA = np.array(list(map(int, input().split())))\n\n\n\nans = 0\n\nwhile(all(A%2==0)):\n\n    A = A\/2\n\n    ans += 1\n\n\n\nprint(ans)\n","target":"eval(input())\n\nA = list(map(int, input().split()))\n\n\n\nans = 0\n\nwhile all(a%2==0 for a in A):\n\n    A=[a\/2 for a in A]\n\n    ans += 1\n\n\n\nprint(ans)","code_v0_loc":11,"code_v1_loc":9,"code_v0_num_chars":150,"code_v1_num_chars":138,"code_v0_no_empty_lines":"import numpy as np\n\neval(input())\nA = np.array(list(map(int, input().split())))\nans = 0\nwhile all(A % 2 == 0):\n    A = A \/ 2\n    ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"eval(input())\nA = list(map(int, input().split()))\nans = 0\nwhile all(a % 2 == 0 for a in A):\n    A = [a \/ 2 for a in A]\n    ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":18.1818181818,"diff":["-import numpy as np","-","-A = np.array(list(map(int, input().split())))","+A = list(map(int, input().split()))","-while all(A % 2 == 0):","-    A = A \/ 2","+while all(a % 2 == 0 for a in A):","+    A = [a \/ 2 for a in A]"],"diff_only_import_comment":false,"measured_runtime_v0":1.3495693932,"measured_runtime_v1":0.2052214348,"runtime_lift":6.5761619599,"key":["s844467922","s428626489"]}
{"user_id":"u112317104","problem_id":"p02773","language":"python","submission_id_v0":"s565064219","submission_id_v1":"s656135042","cpu_time_v0":1126,"cpu_time_v1":742,"memory_v0":46132,"memory_v1":32480,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":34.1,"input":"from collections import defaultdict\n\n\n\nN = int(eval(input()))\n\nA = [eval(input()) for _ in range(N)]\n\nA.sort()\n\nd = defaultdict(int)\n\nfor a in A:\n\n    d[a] += 1\n\n\n\nl = sorted(d.items())\n\nmax_v = 0\n\n\n\nfor _, v in l:\n\n    if v > max_v:\n\n        max_v = v\n\n    \n\nfor k, v in l:\n\n    if v == max_v:\n\n        print(k)\n\n    else:\n\n        continue\n","target":"from collections import defaultdict\n\n\n\ndef solve():\n\n    N = int(eval(input()))\n\n    d = defaultdict(int)\n\n    for _ in range(N):\n\n        a = eval(input())\n\n        d[a] += 1\n\n\n\n    m = 0\n\n    for k, v in list(d.items()):\n\n        m = max(m, v)\n\n    \n\n    l = []\n\n    for k, v in list(d.items()):\n\n        if m == v:\n\n            l.append(k)\n\n    l.sort()\n\n    for ans in l:\n\n        print(ans)\n\n    \n\nsolve()","code_v0_loc":21,"code_v1_loc":22,"code_v0_num_chars":330,"code_v1_num_chars":386,"code_v0_no_empty_lines":"from collections import defaultdict\n\nN = int(eval(input()))\nA = [eval(input()) for _ in range(N)]\nA.sort()\nd = defaultdict(int)\nfor a in A:\n    d[a] += 1\nl = sorted(d.items())\nmax_v = 0\nfor _, v in l:\n    if v > max_v:\n        max_v = v\nfor k, v in l:\n    if v == max_v:\n        print(k)\n    else:\n        continue\n","code_v1_no_empty_lines":"from collections import defaultdict\n\n\ndef solve():\n    N = int(eval(input()))\n    d = defaultdict(int)\n    for _ in range(N):\n        a = eval(input())\n        d[a] += 1\n    m = 0\n    for k, v in list(d.items()):\n        m = max(m, v)\n    l = []\n    for k, v in list(d.items()):\n        if m == v:\n            l.append(k)\n    l.sort()\n    for ans in l:\n        print(ans)\n\n\nsolve()\n","code_same":false,"relative_loc_diff_percent":4.5454545455,"diff":["-N = int(eval(input()))","-A = [eval(input()) for _ in range(N)]","-A.sort()","-d = defaultdict(int)","-for a in A:","-    d[a] += 1","-l = sorted(d.items())","-max_v = 0","-for _, v in l:","-    if v > max_v:","-        max_v = v","-for k, v in l:","-    if v == max_v:","-        print(k)","-    else:","-        continue","+","+def solve():","+    N = int(eval(input()))","+    d = defaultdict(int)","+    for _ in range(N):","+        a = eval(input())","+        d[a] += 1","+    m = 0","+    for k, v in list(d.items()):","+        m = max(m, v)","+    l = []","+    for k, v in list(d.items()):","+        if m == v:","+            l.append(k)","+    l.sort()","+    for ans in l:","+        print(ans)","+","+","+solve()"],"diff_only_import_comment":false,"measured_runtime_v0":0.2730668259,"measured_runtime_v1":0.1417047331,"runtime_lift":1.9270127385,"key":["s565064219","s656135042"]}
{"user_id":"u657901243","problem_id":"p02921","language":"python","submission_id_v0":"s942582713","submission_id_v1":"s970883644","cpu_time_v0":124,"cpu_time_v1":29,"memory_v0":27104,"memory_v1":9024,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":76.61,"input":"import numpy as np\n\ns = np.array(list(eval(input())))\n\nt = np.array(list(eval(input())))\n\nprint((len(s[s==t])))\n","target":"s = eval(input())\n\nt = eval(input())\n\nans = 0\n\nfor i in range(len(s)):\n\n    if s[i] == t[i]:\n\n        ans += 1\n\nprint(ans)\n","code_v0_loc":4,"code_v1_loc":7,"code_v0_num_chars":98,"code_v1_num_chars":111,"code_v0_no_empty_lines":"import numpy as np\n\ns = np.array(list(eval(input())))\nt = np.array(list(eval(input())))\nprint((len(s[s == t])))\n","code_v1_no_empty_lines":"s = eval(input())\nt = eval(input())\nans = 0\nfor i in range(len(s)):\n    if s[i] == t[i]:\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":42.8571428571,"diff":["-import numpy as np","-","-s = np.array(list(eval(input())))","-t = np.array(list(eval(input())))","-print((len(s[s == t])))","+s = eval(input())","+t = eval(input())","+ans = 0","+for i in range(len(s)):","+    if s[i] == t[i]:","+        ans += 1","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.4444875236,"measured_runtime_v1":0.1914589086,"runtime_lift":7.5446346914,"key":["s942582713","s970883644"]}
{"user_id":"u038408819","problem_id":"p02691","language":"python","submission_id_v0":"s116716284","submission_id_v1":"s825945845","cpu_time_v0":328,"cpu_time_v1":178,"memory_v0":73948,"memory_v1":132600,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":45.73,"input":"n = int(eval(input()))\n\na = list(map(int, input().split()))\n\na_index = []\n\nfor i in range(n):\n\n    a_index.append((i, a[i]))\n\ndic1 = {}\n\ndic2 = {}\n\nfor i in range(n):\n\n    one = a_index[i][0] + a_index[i][1]\n\n    two = a_index[i][0] - a_index[i][1]\n\n    if one not in dic1:\n\n        dic1[one] = 1\n\n    else:\n\n        dic1[one] += 1\n\n    if two not in dic2:\n\n        dic2[two] = 1\n\n    else:\n\n        dic2[two] += 1\n\nans = 0\n\nfor i in list(dic1.keys()):\n\n    if i in dic2:\n\n        ans += dic2[i] * dic1[i]\n\nfor i in list(dic2.keys()):\n\n    if i in dic1:\n\n        ans += dic1[i] * dic2[i]\n\n        #print(i)\n\nprint((ans \/\/ 2))\n","target":"n = int(eval(input()))\n\na = list(map(int, input().split()))\n\nimport collections\n\nans = 0\n\ndic = collections.defaultdict(int)\n\nfor i in range(1, n + 1):\n\n    ans += dic[i - a[i - 1]]\n\n    dic[i + a[i - 1]] += 1\n\nprint(ans)","code_v0_loc":27,"code_v1_loc":9,"code_v0_num_chars":606,"code_v1_num_chars":215,"code_v0_no_empty_lines":"n = int(eval(input()))\na = list(map(int, input().split()))\na_index = []\nfor i in range(n):\n    a_index.append((i, a[i]))\ndic1 = {}\ndic2 = {}\nfor i in range(n):\n    one = a_index[i][0] + a_index[i][1]\n    two = a_index[i][0] - a_index[i][1]\n    if one not in dic1:\n        dic1[one] = 1\n    else:\n        dic1[one] += 1\n    if two not in dic2:\n        dic2[two] = 1\n    else:\n        dic2[two] += 1\nans = 0\nfor i in list(dic1.keys()):\n    if i in dic2:\n        ans += dic2[i] * dic1[i]\nfor i in list(dic2.keys()):\n    if i in dic1:\n        ans += dic1[i] * dic2[i]\n        # print(i)\nprint((ans \/\/ 2))\n","code_v1_no_empty_lines":"n = int(eval(input()))\na = list(map(int, input().split()))\nimport collections\n\nans = 0\ndic = collections.defaultdict(int)\nfor i in range(1, n + 1):\n    ans += dic[i - a[i - 1]]\n    dic[i + a[i - 1]] += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":66.6666666667,"diff":["-a_index = []","-for i in range(n):","-    a_index.append((i, a[i]))","-dic1 = {}","-dic2 = {}","-for i in range(n):","-    one = a_index[i][0] + a_index[i][1]","-    two = a_index[i][0] - a_index[i][1]","-    if one not in dic1:","-        dic1[one] = 1","-    else:","-        dic1[one] += 1","-    if two not in dic2:","-        dic2[two] = 1","-    else:","-        dic2[two] += 1","+import collections","+","-for i in list(dic1.keys()):","-    if i in dic2:","-        ans += dic2[i] * dic1[i]","-for i in list(dic2.keys()):","-    if i in dic1:","-        ans += dic1[i] * dic2[i]","-        # print(i)","-print((ans \/\/ 2))","+dic = collections.defaultdict(int)","+for i in range(1, n + 1):","+    ans += dic[i - a[i - 1]]","+    dic[i + a[i - 1]] += 1","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3792731187,"measured_runtime_v1":0.2976846831,"runtime_lift":1.2740767002,"key":["s116716284","s825945845"]}
{"user_id":"u123756661","problem_id":"p03835","language":"python","submission_id_v0":"s113088304","submission_id_v1":"s025062934","cpu_time_v0":1218,"cpu_time_v1":258,"memory_v0":2940,"memory_v1":41580,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":78.82,"input":"k,s=list(map(int,input().split()))\n\nans=chk=0\n\nfor i in range(k+1):\n\n    for j in range(k+1):\n\n        if (0<=s-i-j<=k): ans+=1\n\nprint(ans)","target":"k,s=list(map(int,input().split()))\n\nans=0\n\nx=min(k+1,s+1)\n\ny=max(0,s-k-k)\n\nfor i in range(y,x):\n\n    for j in range(y,x):\n\n        if i+j>s: break\n\n        if 0<=s-i-j<=k:\n\n            ans+=1\n\nprint(ans)","code_v0_loc":6,"code_v1_loc":10,"code_v0_num_chars":133,"code_v1_num_chars":197,"code_v0_no_empty_lines":"k, s = list(map(int, input().split()))\nans = chk = 0\nfor i in range(k + 1):\n    for j in range(k + 1):\n        if 0 <= s - i - j <= k:\n            ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"k, s = list(map(int, input().split()))\nans = 0\nx = min(k + 1, s + 1)\ny = max(0, s - k - k)\nfor i in range(y, x):\n    for j in range(y, x):\n        if i + j > s:\n            break\n        if 0 <= s - i - j <= k:\n            ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":40.0,"diff":["-ans = chk = 0","-for i in range(k + 1):","-    for j in range(k + 1):","+ans = 0","+x = min(k + 1, s + 1)","+y = max(0, s - k - k)","+for i in range(y, x):","+    for j in range(y, x):","+        if i + j > s:","+            break"],"diff_only_import_comment":false,"measured_runtime_v0":0.3946401063,"measured_runtime_v1":0.3009130723,"runtime_lift":1.3114754477,"key":["s113088304","s025062934"]}
{"user_id":"u761320129","problem_id":"p03564","language":"python","submission_id_v0":"s515134391","submission_id_v1":"s980600609","cpu_time_v0":20,"cpu_time_v1":17,"memory_v0":3316,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.0,"input":"N,K = int(eval(input())), int(eval(input()))\n\nnow = 1\n\nfor i in range(N):\n\n    if now*2 < now + K:\n\n        now *= 2\n\n    else:\n\n        now += K\n\nprint(now)\n","target":"N = int(eval(input()))\n\nK = int(eval(input()))\n\nans = 1\n\nfor i in range(N):\n\n    if ans < K:\n\n        ans *= 2\n\n    else:\n\n        ans += K\n\nprint(ans)","code_v0_loc":8,"code_v1_loc":9,"code_v0_num_chars":146,"code_v1_num_chars":139,"code_v0_no_empty_lines":"N, K = int(eval(input())), int(eval(input()))\nnow = 1\nfor i in range(N):\n    if now * 2 < now + K:\n        now *= 2\n    else:\n        now += K\nprint(now)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nK = int(eval(input()))\nans = 1\nfor i in range(N):\n    if ans < K:\n        ans *= 2\n    else:\n        ans += K\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["-N, K = int(eval(input())), int(eval(input()))","-now = 1","+N = int(eval(input()))","+K = int(eval(input()))","+ans = 1","-    if now * 2 < now + K:","-        now *= 2","+    if ans < K:","+        ans *= 2","-        now += K","-print(now)","+        ans += K","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2990638907,"measured_runtime_v1":0.1086408798,"runtime_lift":2.7527749338,"key":["s515134391","s980600609"]}
{"user_id":"u029000441","problem_id":"p02850","language":"python","submission_id_v0":"s037775300","submission_id_v1":"s014062604","cpu_time_v0":655,"cpu_time_v1":577,"memory_v0":74684,"memory_v1":85652,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.91,"input":"#d3\u3068\u540c\u4e00\u89e3\u6cd5\n\nn=int(eval(input()))\n\nimport sys\n\n#\u518d\u5e30\u95a2\u6570\u306e\u518d\u5e30\u56de\u6570\u3092\u5909\u66f4\n\nsys.setrecursionlimit(10**6)\n\ns=[[] for _ in range(n)]\n\n\n\nfor i in range(n-1):\n\n    a,b=list(map(int,input().split()))\n\n    s[a-1].append((b-1,i))\n\n    s[b-1].append((a-1,i))\n\n\n\nl=[0]*(n-1)\n\n\n\ndef dfs(node,pre_col,par):\n\n    col=1\n\n    for nei,i in s[node]:\n\n        if nei==par:\n\n            continue\n\n        if col==pre_col:\n\n            col+=1\n\n        l[i]=col\n\n        dfs(nei,col,node)\n\n        col+=1\n\ndfs(0,-1,-1)\n\nprint((max(l)))\n\nfor i in l:\n\n    print(i)\n","target":"import sys\n\nsys.setrecursionlimit(500000)\n\nN = int(eval(input()))\n\nE = [[] for _ in range(N+1)]\n\nfor i in range(N-1):\n\n    a, b = list(map(int, input().split()))\n\n    E[a].append((b, i))\n\n    E[b].append((a, i))\n\nK = max(len(e) for e in E)\n\nprint(K)\n\nAns = [-1] * (N-1)\n\ndef dfs(v=1, p=0, p_col=-1):\n\n    col = 1\n\n    for u, idx in E[v]:\n\n        if u!=p: #\u6728\u69cb\u9020\u306e\u9006\u5411\u304d\u306e\u77e2\u5370\u3092\u9664\u304f\u305f\u3081\u306e\u6761\u4ef6\n\n            if col == p_col:\n\n                col += 1\n\n            Ans[idx] = col\n\n            #print(p_col)\n\n            dfs(u, v, col) #u;\u8abf\u3079\u308b\u9802\u70b9 v;\u76f4\u524d\u306b\u8abf\u3079\u305f\u8fba\u3067\u3001\u8abf\u3079\u308b\u9802\u70b9\u3068\u7d50\u3070\u308c\u3066\u3044\u308b\u9802\u70b9\u3000col;\u76f4\u524d\u306b\u8abf\u3079\u305f\u8fba\u306e\u8272\u756a\u53f7\n\n            col += 1 #\u6700\u6df1\u90e8\u307e\u3067\u8abf\u3079\u305f\u3089 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u8272=\u6700\u5f8c\u306b\u8abf\u3079\u305f\u8fba\u306e\u8272+1\u3068\u3059\u308b\n\n            #\u6700\u6df1\u90e8\u306b\u7e4b\u304c\u3063\u305f\u8fba\u306e\u8272+1\u3057\u3066\u3084\u308c\u3070\u3001\u6b21\u306e\u8fba\u306e\u8272\u306f\u5fc5\u305a\u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u304f\u308c\u308b\n\n\n\ndfs()\n\nprint((\"\\n\".join(map(str, Ans))))\n","code_v0_loc":28,"code_v1_loc":25,"code_v0_num_chars":512,"code_v1_num_chars":704,"code_v0_no_empty_lines":"# d3\u3068\u540c\u4e00\u89e3\u6cd5\nn = int(eval(input()))\nimport sys\n\n# \u518d\u5e30\u95a2\u6570\u306e\u518d\u5e30\u56de\u6570\u3092\u5909\u66f4\nsys.setrecursionlimit(10**6)\ns = [[] for _ in range(n)]\nfor i in range(n - 1):\n    a, b = list(map(int, input().split()))\n    s[a - 1].append((b - 1, i))\n    s[b - 1].append((a - 1, i))\nl = [0] * (n - 1)\n\n\ndef dfs(node, pre_col, par):\n    col = 1\n    for nei, i in s[node]:\n        if nei == par:\n            continue\n        if col == pre_col:\n            col += 1\n        l[i] = col\n        dfs(nei, col, node)\n        col += 1\n\n\ndfs(0, -1, -1)\nprint((max(l)))\nfor i in l:\n    print(i)\n","code_v1_no_empty_lines":"import sys\n\nsys.setrecursionlimit(500000)\nN = int(eval(input()))\nE = [[] for _ in range(N + 1)]\nfor i in range(N - 1):\n    a, b = list(map(int, input().split()))\n    E[a].append((b, i))\n    E[b].append((a, i))\nK = max(len(e) for e in E)\nprint(K)\nAns = [-1] * (N - 1)\n\n\ndef dfs(v=1, p=0, p_col=-1):\n    col = 1\n    for u, idx in E[v]:\n        if u != p:  # \u6728\u69cb\u9020\u306e\u9006\u5411\u304d\u306e\u77e2\u5370\u3092\u9664\u304f\u305f\u3081\u306e\u6761\u4ef6\n            if col == p_col:\n                col += 1\n            Ans[idx] = col\n            # print(p_col)\n            dfs(u, v, col)  # u;\u8abf\u3079\u308b\u9802\u70b9 v;\u76f4\u524d\u306b\u8abf\u3079\u305f\u8fba\u3067\u3001\u8abf\u3079\u308b\u9802\u70b9\u3068\u7d50\u3070\u308c\u3066\u3044\u308b\u9802\u70b9\u3000col;\u76f4\u524d\u306b\u8abf\u3079\u305f\u8fba\u306e\u8272\u756a\u53f7\n            col += 1  # \u6700\u6df1\u90e8\u307e\u3067\u8abf\u3079\u305f\u3089 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u8272=\u6700\u5f8c\u306b\u8abf\u3079\u305f\u8fba\u306e\u8272+1\u3068\u3059\u308b\n            # \u6700\u6df1\u90e8\u306b\u7e4b\u304c\u3063\u305f\u8fba\u306e\u8272+1\u3057\u3066\u3084\u308c\u3070\u3001\u6b21\u306e\u8fba\u306e\u8272\u306f\u5fc5\u305a\u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u304f\u308c\u308b\n\n\ndfs()\nprint((\"\\n\".join(map(str, Ans))))\n","code_same":false,"relative_loc_diff_percent":10.7142857143,"diff":["-# d3\u3068\u540c\u4e00\u89e3\u6cd5","-n = int(eval(input()))","-# \u518d\u5e30\u95a2\u6570\u306e\u518d\u5e30\u56de\u6570\u3092\u5909\u66f4","-sys.setrecursionlimit(10**6)","-s = [[] for _ in range(n)]","-for i in range(n - 1):","+sys.setrecursionlimit(500000)","+N = int(eval(input()))","+E = [[] for _ in range(N + 1)]","+for i in range(N - 1):","-    s[a - 1].append((b - 1, i))","-    s[b - 1].append((a - 1, i))","-l = [0] * (n - 1)","+    E[a].append((b, i))","+    E[b].append((a, i))","+K = max(len(e) for e in E)","+print(K)","+Ans = [-1] * (N - 1)","-def dfs(node, pre_col, par):","+def dfs(v=1, p=0, p_col=-1):","-    for nei, i in s[node]:","-        if nei == par:","-            continue","-        if col == pre_col:","-            col += 1","-        l[i] = col","-        dfs(nei, col, node)","-        col += 1","+    for u, idx in E[v]:","+        if u != p:  # \u6728\u69cb\u9020\u306e\u9006\u5411\u304d\u306e\u77e2\u5370\u3092\u9664\u304f\u305f\u3081\u306e\u6761\u4ef6","+            if col == p_col:","+                col += 1","+            Ans[idx] = col","+            # print(p_col)","+            dfs(u, v, col)  # u;\u8abf\u3079\u308b\u9802\u70b9 v;\u76f4\u524d\u306b\u8abf\u3079\u305f\u8fba\u3067\u3001\u8abf\u3079\u308b\u9802\u70b9\u3068\u7d50\u3070\u308c\u3066\u3044\u308b\u9802\u70b9\u3000col;\u76f4\u524d\u306b\u8abf\u3079\u305f\u8fba\u306e\u8272\u756a\u53f7","+            col += 1  # \u6700\u6df1\u90e8\u307e\u3067\u8abf\u3079\u305f\u3089 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u8272=\u6700\u5f8c\u306b\u8abf\u3079\u305f\u8fba\u306e\u8272+1\u3068\u3059\u308b","+            # \u6700\u6df1\u90e8\u306b\u7e4b\u304c\u3063\u305f\u8fba\u306e\u8272+1\u3057\u3066\u3084\u308c\u3070\u3001\u6b21\u306e\u8fba\u306e\u8272\u306f\u5fc5\u305a\u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u304f\u308c\u308b","-dfs(0, -1, -1)","-print((max(l)))","-for i in l:","-    print(i)","+dfs()","+print((\"\\n\".join(map(str, Ans))))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2935128241,"measured_runtime_v1":0.2145129414,"runtime_lift":1.3682756023,"key":["s037775300","s014062604"]}
{"user_id":"u055875839","problem_id":"p03494","language":"python","submission_id_v0":"s284976980","submission_id_v1":"s533147628","cpu_time_v0":151,"cpu_time_v1":19,"memory_v0":12508,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.42,"input":"eval(input())\n\n\n\nimport numpy as np\n\nA = np.array(list(map(int, input().split(\" \"))))\n\na = 0\n\n\n\nwhile np.sum(A%2) == 0:\n\n  A = A\/2\n\n  a = a + 1\n\n\n\nprint(a)","target":"eval(input())\n\n\n\nA = list(map(int, input().split(\" \")))\n\nB = 0\n\n\n\nwhile all(a%2 == 0 for a in A):\n\n  A = [a\/2 for a in A]\n\n  B += 1\n\n  \n\nprint(B)\n\n    ","code_v0_loc":11,"code_v1_loc":11,"code_v0_num_chars":149,"code_v1_num_chars":145,"code_v0_no_empty_lines":"eval(input())\nimport numpy as np\n\nA = np.array(list(map(int, input().split(\" \"))))\na = 0\nwhile np.sum(A % 2) == 0:\n    A = A \/ 2\n    a = a + 1\nprint(a)\n","code_v1_no_empty_lines":"eval(input())\nA = list(map(int, input().split(\" \")))\nB = 0\nwhile all(a % 2 == 0 for a in A):\n    A = [a \/ 2 for a in A]\n    B += 1\nprint(B)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-import numpy as np","-","-A = np.array(list(map(int, input().split(\" \"))))","-a = 0","-while np.sum(A % 2) == 0:","-    A = A \/ 2","-    a = a + 1","-print(a)","+A = list(map(int, input().split(\" \")))","+B = 0","+while all(a % 2 == 0 for a in A):","+    A = [a \/ 2 for a in A]","+    B += 1","+print(B)"],"diff_only_import_comment":false,"measured_runtime_v0":1.3803981676,"measured_runtime_v1":0.2073892272,"runtime_lift":6.6560746019,"key":["s284976980","s533147628"]}
{"user_id":"u177388368","problem_id":"p02881","language":"python","submission_id_v0":"s386884404","submission_id_v1":"s516418112","cpu_time_v0":474,"cpu_time_v1":256,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":45.99,"input":"import math\n\nn=int(eval(input()))\n\nans=n\n\ni=1\n\nwhile(i<=math.sqrt(n)):\n\n    if n%i==0:\n\n        d=i+n\/i-2\n\n        ans=min(ans,d)\n\n    i+=1\n\nprint((int(ans)))","target":"from math import floor\n\nfrom math import sqrt\n\nn=int(eval(input()))\n\nnn=floor(sqrt(n))\n\nrest=n%nn\n\nwhile rest!=0:\n\n    nn-=1\n\n    rest=n%nn\n\nnnn=n\/nn\n\nprint((int(nn+nnn-2)))","code_v0_loc":10,"code_v1_loc":10,"code_v0_num_chars":150,"code_v1_num_chars":165,"code_v0_no_empty_lines":"import math\n\nn = int(eval(input()))\nans = n\ni = 1\nwhile i <= math.sqrt(n):\n    if n % i == 0:\n        d = i + n \/ i - 2\n        ans = min(ans, d)\n    i += 1\nprint((int(ans)))\n","code_v1_no_empty_lines":"from math import floor\nfrom math import sqrt\n\nn = int(eval(input()))\nnn = floor(sqrt(n))\nrest = n % nn\nwhile rest != 0:\n    nn -= 1\n    rest = n % nn\nnnn = n \/ nn\nprint((int(nn + nnn - 2)))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-import math","+from math import floor","+from math import sqrt","-ans = n","-i = 1","-while i <= math.sqrt(n):","-    if n % i == 0:","-        d = i + n \/ i - 2","-        ans = min(ans, d)","-    i += 1","-print((int(ans)))","+nn = floor(sqrt(n))","+rest = n % nn","+while rest != 0:","+    nn -= 1","+    rest = n % nn","+nnn = n \/ nn","+print((int(nn + nnn - 2)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3770523396,"measured_runtime_v1":0.2395324836,"runtime_lift":1.5741177727,"key":["s386884404","s516418112"]}
{"user_id":"u275934251","problem_id":"p03796","language":"python","submission_id_v0":"s111144925","submission_id_v1":"s028336395","cpu_time_v0":229,"cpu_time_v1":37,"memory_v0":3980,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":83.84,"input":"import math\n\n\n\nN = int(eval(input()))\n\n\n\npower = math.factorial(N)\n\n\n\nprint((power % 1000000007))\n\n\n","target":"n=int(eval(input()))\n\nans=1\n\nfor i in range(n):\n\n    ans=(ans*(i+1))%(10**9+7)\n\nprint(ans)","code_v0_loc":8,"code_v1_loc":5,"code_v0_num_chars":92,"code_v1_num_chars":84,"code_v0_no_empty_lines":"import math\n\nN = int(eval(input()))\npower = math.factorial(N)\nprint((power % 1000000007))\n","code_v1_no_empty_lines":"n = int(eval(input()))\nans = 1\nfor i in range(n):\n    ans = (ans * (i + 1)) % (10**9 + 7)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":37.5,"diff":["-import math","-","-N = int(eval(input()))","-power = math.factorial(N)","-print((power % 1000000007))","+n = int(eval(input()))","+ans = 1","+for i in range(n):","+    ans = (ans * (i + 1)) % (10**9 + 7)","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.7185150633,"measured_runtime_v1":0.3322105608,"runtime_lift":2.1628302891,"key":["s111144925","s028336395"]}
{"user_id":"u353797797","problem_id":"p03170","language":"python","submission_id_v0":"s365373544","submission_id_v1":"s835744397","cpu_time_v0":126,"cpu_time_v1":112,"memory_v0":3828,"memory_v1":3828,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.11,"input":"n, k = list(map(int, input().split()))\n\na_s = list(map(int, input().split()))\n\ndp = [\"Second\"] * (k + 1)\n\nfor i in range(k + 1):\n\n    if dp[i] == \"Second\":\n\n        for a in a_s:\n\n            ii = i + a\n\n            if ii <= k:\n\n                dp[ii] = \"First\"\n\nprint((dp[-1]))\n","target":"n, k = list(map(int, input().split()))\n\na_s = list(map(int, input().split()))\n\ndp = [\"Second\"] * (k + 1)\n\nfor i in range(k + 1):\n\n    if dp[i] == \"Second\":\n\n        for a in a_s:\n\n            ii = i + a\n\n            if ii > k:break\n\n            dp[ii] = \"First\"\n\nprint((dp[-1]))\n","code_v0_loc":10,"code_v1_loc":10,"code_v0_num_chars":271,"code_v1_num_chars":271,"code_v0_no_empty_lines":"n, k = list(map(int, input().split()))\na_s = list(map(int, input().split()))\ndp = [\"Second\"] * (k + 1)\nfor i in range(k + 1):\n    if dp[i] == \"Second\":\n        for a in a_s:\n            ii = i + a\n            if ii <= k:\n                dp[ii] = \"First\"\nprint((dp[-1]))\n","code_v1_no_empty_lines":"n, k = list(map(int, input().split()))\na_s = list(map(int, input().split()))\ndp = [\"Second\"] * (k + 1)\nfor i in range(k + 1):\n    if dp[i] == \"Second\":\n        for a in a_s:\n            ii = i + a\n            if ii > k:\n                break\n            dp[ii] = \"First\"\nprint((dp[-1]))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-            if ii <= k:","-                dp[ii] = \"First\"","+            if ii > k:","+                break","+            dp[ii] = \"First\""],"diff_only_import_comment":false,"measured_runtime_v0":0.3611531999,"measured_runtime_v1":0.2298232606,"runtime_lift":1.5714388476,"key":["s365373544","s835744397"]}
{"user_id":"u604839890","problem_id":"p02622","language":"python","submission_id_v0":"s830524393","submission_id_v1":"s723518358","cpu_time_v0":83,"cpu_time_v1":70,"memory_v0":85616,"memory_v1":73748,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.66,"input":"S, T = [list(eval(input())) for _ in range(2)]\n\ncnt = 0\n\nfor i in range(len(S)):\n\n    if S[i] != T[i]:\n\n        cnt += 1\n\nprint(cnt)\n","target":"s, t = [eval(input()) for i in range(2)]\n\nans = 0\n\nfor i in range(len(s)):\n\n  if s[i] != t[i]:\n\n    ans += 1\n\nprint(ans)","code_v0_loc":6,"code_v1_loc":6,"code_v0_num_chars":127,"code_v1_num_chars":114,"code_v0_no_empty_lines":"S, T = [list(eval(input())) for _ in range(2)]\ncnt = 0\nfor i in range(len(S)):\n    if S[i] != T[i]:\n        cnt += 1\nprint(cnt)\n","code_v1_no_empty_lines":"s, t = [eval(input()) for i in range(2)]\nans = 0\nfor i in range(len(s)):\n    if s[i] != t[i]:\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-S, T = [list(eval(input())) for _ in range(2)]","-cnt = 0","-for i in range(len(S)):","-    if S[i] != T[i]:","-        cnt += 1","-print(cnt)","+s, t = [eval(input()) for i in range(2)]","+ans = 0","+for i in range(len(s)):","+    if s[i] != t[i]:","+        ans += 1","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2683959379,"measured_runtime_v1":0.2054475396,"runtime_lift":1.3063964576,"key":["s830524393","s723518358"]}
{"user_id":"u644907318","problem_id":"p02886","language":"python","submission_id_v0":"s745140004","submission_id_v1":"s021490246","cpu_time_v0":167,"cpu_time_v1":89,"memory_v0":38512,"memory_v1":61656,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":46.71,"input":"N = int(eval(input()))\n\nD = list(map(int,input().split()))\n\ncnt = 0\n\nfor i in range(N-1):\n\n    for j in range(i+1,N):\n\n        cnt += D[i]*D[j]\n\nprint(cnt)","target":"N = int(eval(input()))\n\nD = list(map(int,input().split()))\n\ncnt = 0\n\nfor i in range(N):\n\n    cnt += D[i]**2\n\ntot = 0\n\nfor i in range(N):\n\n    tot += D[i]\n\ntot = tot**2\n\ntot -= cnt\n\nprint((tot\/\/2))","code_v0_loc":7,"code_v1_loc":11,"code_v0_num_chars":149,"code_v1_num_chars":188,"code_v0_no_empty_lines":"N = int(eval(input()))\nD = list(map(int, input().split()))\ncnt = 0\nfor i in range(N - 1):\n    for j in range(i + 1, N):\n        cnt += D[i] * D[j]\nprint(cnt)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nD = list(map(int, input().split()))\ncnt = 0\nfor i in range(N):\n    cnt += D[i] ** 2\ntot = 0\nfor i in range(N):\n    tot += D[i]\ntot = tot**2\ntot -= cnt\nprint((tot \/\/ 2))\n","code_same":false,"relative_loc_diff_percent":36.3636363636,"diff":["-for i in range(N - 1):","-    for j in range(i + 1, N):","-        cnt += D[i] * D[j]","-print(cnt)","+for i in range(N):","+    cnt += D[i] ** 2","+tot = 0","+for i in range(N):","+    tot += D[i]","+tot = tot**2","+tot -= cnt","+print((tot \/\/ 2))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2884610276,"measured_runtime_v1":0.2260356005,"runtime_lift":1.2761751997,"key":["s745140004","s021490246"]}
{"user_id":"u257162238","problem_id":"p02691","language":"python","submission_id_v0":"s433671213","submission_id_v1":"s939654113","cpu_time_v0":930,"cpu_time_v1":228,"memory_v0":50980,"memory_v1":66228,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":75.48,"input":"from collections import deque\n\nfrom itertools import product\n\nimport sys\n\nimport math\n\nimport numpy as np\n\nimport bisect\n\n\n\nsys.setrecursionlimit(200000)\n\ninput = sys.stdin.readline\n\n\n\n\n\ndef read():\n\n    N = int(input().strip())\n\n    A = list(map(int, input().strip().split()))\n\n    return N, A\n\n\n\n\n\ndef argsort(seq):\n\n    return sorted(list(range(len(seq))), key=seq.__getitem__)\n\n\n\ndef solve(N, A):\n\n    # x: i-A[i]\u306e\u5217\n\n    X = np.array([i-A[i] for i in range(N)], dtype=np.int)\n\n    # y: i+A[i]\u306e\u5217\n\n    Y = np.array([i+A[i] for i in range(N)], dtype=np.int)\n\n    keys = np.argsort(X)\n\n    X = X[keys]  # x[i] <= x[i+1]\n\n    Y = Y[keys]\n\n    ans = 0\n\n    for y in Y:\n\n        l = bisect.bisect_left(X, y)\n\n        r = bisect.bisect_left(X, y+1)\n\n        ans += r - l\n\n    return ans\n\n\n\n\n\nif __name__ == '__main__':\n\n    inputs = read()\n\n    outputs = solve(*inputs)\n\n    print((\"{}\".format(outputs)))\n","target":"from collections import defaultdict\n\nfrom itertools import product\n\nimport sys\n\nimport math\n\nimport bisect\n\n\n\nsys.setrecursionlimit(200000)\n\ninput = sys.stdin.readline\n\n\n\n\n\ndef read():\n\n    N = int(input().strip())\n\n    A = list(map(int, input().strip().split()))\n\n    return N, A\n\n\n\n\n\ndef solve(N, A):\n\n    # x: i-A[i]\u306e\u5217\n\n    X = [i-A[i] for i in range(N)]\n\n    # y: i+A[i]\u306e\u5217\n\n    Y = [i+A[i] for i in range(N)]\n\n    z = defaultdict(int)\n\n    for y in Y:\n\n        z[y] += 1\n\n    return sum([z[x] for x in X])\n\n\n\n\n\nif __name__ == '__main__':\n\n    inputs = read()\n\n    outputs = solve(*inputs)\n\n    print((\"{}\".format(outputs)))\n","code_v0_loc":40,"code_v1_loc":31,"code_v0_num_chars":893,"code_v1_num_chars":626,"code_v0_no_empty_lines":"from collections import deque\nfrom itertools import product\nimport sys\nimport math\nimport numpy as np\nimport bisect\n\nsys.setrecursionlimit(200000)\ninput = sys.stdin.readline\n\n\ndef read():\n    N = int(input().strip())\n    A = list(map(int, input().strip().split()))\n    return N, A\n\n\ndef argsort(seq):\n    return sorted(list(range(len(seq))), key=seq.__getitem__)\n\n\ndef solve(N, A):\n    # x: i-A[i]\u306e\u5217\n    X = np.array([i - A[i] for i in range(N)], dtype=np.int)\n    # y: i+A[i]\u306e\u5217\n    Y = np.array([i + A[i] for i in range(N)], dtype=np.int)\n    keys = np.argsort(X)\n    X = X[keys]  # x[i] <= x[i+1]\n    Y = Y[keys]\n    ans = 0\n    for y in Y:\n        l = bisect.bisect_left(X, y)\n        r = bisect.bisect_left(X, y + 1)\n        ans += r - l\n    return ans\n\n\nif __name__ == \"__main__\":\n    inputs = read()\n    outputs = solve(*inputs)\n    print((\"{}\".format(outputs)))\n","code_v1_no_empty_lines":"from collections import defaultdict\nfrom itertools import product\nimport sys\nimport math\nimport bisect\n\nsys.setrecursionlimit(200000)\ninput = sys.stdin.readline\n\n\ndef read():\n    N = int(input().strip())\n    A = list(map(int, input().strip().split()))\n    return N, A\n\n\ndef solve(N, A):\n    # x: i-A[i]\u306e\u5217\n    X = [i - A[i] for i in range(N)]\n    # y: i+A[i]\u306e\u5217\n    Y = [i + A[i] for i in range(N)]\n    z = defaultdict(int)\n    for y in Y:\n        z[y] += 1\n    return sum([z[x] for x in X])\n\n\nif __name__ == \"__main__\":\n    inputs = read()\n    outputs = solve(*inputs)\n    print((\"{}\".format(outputs)))\n","code_same":false,"relative_loc_diff_percent":22.5,"diff":["-from collections import deque","+from collections import defaultdict","-import numpy as np","-def argsort(seq):","-    return sorted(list(range(len(seq))), key=seq.__getitem__)","-","-","-    X = np.array([i - A[i] for i in range(N)], dtype=np.int)","+    X = [i - A[i] for i in range(N)]","-    Y = np.array([i + A[i] for i in range(N)], dtype=np.int)","-    keys = np.argsort(X)","-    X = X[keys]  # x[i] <= x[i+1]","-    Y = Y[keys]","-    ans = 0","+    Y = [i + A[i] for i in range(N)]","+    z = defaultdict(int)","-        l = bisect.bisect_left(X, y)","-        r = bisect.bisect_left(X, y + 1)","-        ans += r - l","-    return ans","+        z[y] += 1","+    return sum([z[x] for x in X])"],"diff_only_import_comment":false,"measured_runtime_v0":1.2892834942,"measured_runtime_v1":0.2085203347,"runtime_lift":6.1830108603,"key":["s433671213","s939654113"]}
{"user_id":"u094191970","problem_id":"p02899","language":"python","submission_id_v0":"s681282504","submission_id_v1":"s043765093","cpu_time_v0":508,"cpu_time_v1":204,"memory_v0":23412,"memory_v1":23592,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":59.84,"input":"import numpy as np\n\nn=int(eval(input()))\n\ns=np.argsort(np.array(list(map(int,input().split()))))+1\n\nprint((*s))","target":"n=int(eval(input()))\n\na=list(map(int,input().split()))\n\nl=sorted([[inx+1,j] for inx,j in enumerate(a)],key=lambda x:x[1])\n\nans=[i for i,j in l]\n\nprint((*ans))","code_v0_loc":4,"code_v1_loc":5,"code_v0_num_chars":103,"code_v1_num_chars":150,"code_v0_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\ns = np.argsort(np.array(list(map(int, input().split())))) + 1\nprint((*s))\n","code_v1_no_empty_lines":"n = int(eval(input()))\na = list(map(int, input().split()))\nl = sorted([[inx + 1, j] for inx, j in enumerate(a)], key=lambda x: x[1])\nans = [i for i, j in l]\nprint((*ans))\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["-import numpy as np","-","-s = np.argsort(np.array(list(map(int, input().split())))) + 1","-print((*s))","+a = list(map(int, input().split()))","+l = sorted([[inx + 1, j] for inx, j in enumerate(a)], key=lambda x: x[1])","+ans = [i for i, j in l]","+print((*ans))"],"diff_only_import_comment":false,"measured_runtime_v0":1.8138762745,"measured_runtime_v1":0.2870095253,"runtime_lift":6.3199166387,"key":["s681282504","s043765093"]}
{"user_id":"u337765821","problem_id":"p03078","language":"python","submission_id_v0":"s578367863","submission_id_v1":"s821092078","cpu_time_v0":1959,"cpu_time_v1":1759,"memory_v0":14660,"memory_v1":4712,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.21,"input":"import numpy as np\n\nimport itertools\n\n\n\nX, Y, Z, K = tuple([int(x) for x in str(eval(input())).split(' ')])\n\n\n\nA = np.array(sorted([int(x) for x in str(eval(input())).split(' ')], reverse=True))\n\nB = np.array(sorted([int(x) for x in str(eval(input())).split(' ')], reverse=True))\n\nC = np.array(sorted([int(x) for x in str(eval(input())).split(' ')], reverse=True))\n\n\n\ntmp = {(0, 0, 0) : A[0] + B[0] + C[0]}\n\ntmp_keys = [(0, 0 ,0)]\n\nout = []\n\n\n\nfor i in range(K):\n\n    (a, b, c),  p = max(list(tmp.items()), key=lambda x : x[1])\n\n    out.append(tmp.pop((a, b, c)))\n\n\n\n    keys = []\n\n    if a < X - 1:\n\n        keys.append((a+1, b, c))\n\n    if b < Y - 1:\n\n        keys.append((a, b+1, c))\n\n    if c < Z - 1:\n\n        keys.append((a, b, c+1))\n\n    \n\n    for key in keys:\n\n        if key not in tmp_keys:\n\n            tmp[key] = A[key[0]] + B[key[1]] + C[key[2]]\n\n            tmp_keys.append(key)\n\n\n\nfor x in out:\n\n    print(x)","target":"import itertools\n\n\n\nX, Y, Z, K = tuple([int(x) for x in str(eval(input())).split(' ')])\n\n\n\nA = sorted([int(x) for x in str(eval(input())).split(' ')], reverse=True)\n\nB = sorted([int(x) for x in str(eval(input())).split(' ')], reverse=True)\n\nC = sorted([int(x) for x in str(eval(input())).split(' ')], reverse=True)\n\n\n\ntmp = {(0, 0, 0) : A[0] + B[0] + C[0]}\n\ntmp_keys = [(0, 0 ,0)]\n\nout = []\n\n\n\nfor i in range(K):\n\n    (a, b, c),  p = max(list(tmp.items()), key=lambda x : x[1])\n\n    out.append(tmp.pop((a, b, c)))\n\n\n\n    keys = []\n\n    if a < X - 1:\n\n        keys.append((a+1, b, c))\n\n    if b < Y - 1:\n\n        keys.append((a, b+1, c))\n\n    if c < Z - 1:\n\n        keys.append((a, b, c+1))\n\n    \n\n    for key in keys:\n\n        if key not in tmp_keys:\n\n            tmp[key] = A[key[0]] + B[key[1]] + C[key[2]]\n\n            tmp_keys.append(key)\n\n\n\nfor x in out:\n\n    print(x)","code_v0_loc":32,"code_v1_loc":31,"code_v0_num_chars":893,"code_v1_num_chars":843,"code_v0_no_empty_lines":"import numpy as np\nimport itertools\n\nX, Y, Z, K = tuple([int(x) for x in str(eval(input())).split(\" \")])\nA = np.array(sorted([int(x) for x in str(eval(input())).split(\" \")], reverse=True))\nB = np.array(sorted([int(x) for x in str(eval(input())).split(\" \")], reverse=True))\nC = np.array(sorted([int(x) for x in str(eval(input())).split(\" \")], reverse=True))\ntmp = {(0, 0, 0): A[0] + B[0] + C[0]}\ntmp_keys = [(0, 0, 0)]\nout = []\nfor i in range(K):\n    (a, b, c), p = max(list(tmp.items()), key=lambda x: x[1])\n    out.append(tmp.pop((a, b, c)))\n    keys = []\n    if a < X - 1:\n        keys.append((a + 1, b, c))\n    if b < Y - 1:\n        keys.append((a, b + 1, c))\n    if c < Z - 1:\n        keys.append((a, b, c + 1))\n    for key in keys:\n        if key not in tmp_keys:\n            tmp[key] = A[key[0]] + B[key[1]] + C[key[2]]\n            tmp_keys.append(key)\nfor x in out:\n    print(x)\n","code_v1_no_empty_lines":"import itertools\n\nX, Y, Z, K = tuple([int(x) for x in str(eval(input())).split(\" \")])\nA = sorted([int(x) for x in str(eval(input())).split(\" \")], reverse=True)\nB = sorted([int(x) for x in str(eval(input())).split(\" \")], reverse=True)\nC = sorted([int(x) for x in str(eval(input())).split(\" \")], reverse=True)\ntmp = {(0, 0, 0): A[0] + B[0] + C[0]}\ntmp_keys = [(0, 0, 0)]\nout = []\nfor i in range(K):\n    (a, b, c), p = max(list(tmp.items()), key=lambda x: x[1])\n    out.append(tmp.pop((a, b, c)))\n    keys = []\n    if a < X - 1:\n        keys.append((a + 1, b, c))\n    if b < Y - 1:\n        keys.append((a, b + 1, c))\n    if c < Z - 1:\n        keys.append((a, b, c + 1))\n    for key in keys:\n        if key not in tmp_keys:\n            tmp[key] = A[key[0]] + B[key[1]] + C[key[2]]\n            tmp_keys.append(key)\nfor x in out:\n    print(x)\n","code_same":false,"relative_loc_diff_percent":3.125,"diff":["-import numpy as np","-A = np.array(sorted([int(x) for x in str(eval(input())).split(\" \")], reverse=True))","-B = np.array(sorted([int(x) for x in str(eval(input())).split(\" \")], reverse=True))","-C = np.array(sorted([int(x) for x in str(eval(input())).split(\" \")], reverse=True))","+A = sorted([int(x) for x in str(eval(input())).split(\" \")], reverse=True)","+B = sorted([int(x) for x in str(eval(input())).split(\" \")], reverse=True)","+C = sorted([int(x) for x in str(eval(input())).split(\" \")], reverse=True)"],"diff_only_import_comment":false,"measured_runtime_v0":1.3399388783,"measured_runtime_v1":0.2194988892,"runtime_lift":6.1045360324,"key":["s578367863","s821092078"]}
{"user_id":"u609061751","problem_id":"p02792","language":"python","submission_id_v0":"s119665759","submission_id_v1":"s980465183","cpu_time_v0":262,"cpu_time_v1":107,"memory_v0":40556,"memory_v1":68292,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":59.16,"input":"import sys\n\ninput = sys.stdin.readline\n\nN = int(eval(input()))\n\nketa = len(str(N))\n\nif keta == 1:\n\n    print(N)\n\n    sys.exit()\n\nans = {}\n\nfor i in [1,2,3,4,5,6,7,8,9]:\n\n    for j in [1,2,3,4,5,6,7,8,9]:\n\n        ans[(i, j)] = 0\n\nfor i in range(1, N+1):\n\n    maxdigit = int(str(i)[0])\n\n    mindigit = int(str(i)[-1])\n\n    if mindigit != 0:\n\n        ans[(maxdigit, mindigit)] += 1\n\ncnt = 0\n\nfor i in range(1, 10):\n\n    for j in range(1, 10):\n\n        if i == j:\n\n            cnt += ans[(i, i)] ** 2\n\n        else:\n\n            cnt += ans[(i, j)] * ans[(j, i)] * 2\n\n            ans[(i, j)] = 0\n\n            ans[(j, i)] = 0\n\nprint(cnt)\n\n\n\n        \n\n\n\n    ","target":"import sys\n\ninput = sys.stdin.readline\n\n\n\nn = int(eval(input()))\n\n\n\nfrom collections import defaultdict\n\n\n\nd = defaultdict(int) # d[(a, b)] : \u5148\u982da, \u672b\u5c3eb\n\n\n\nfor i in range(1, n + 1):\n\n    i_str = str(i)\n\n    d[(i_str[0], i_str[-1])] += 1\n\n\n\nans = 0\n\n\n\nfor i in range(1, 10):\n\n    for j in range(10):\n\n        ans += d[(str(i), str(j))] * d[(str(j), str(i))]\n\n\n\nprint(ans)","code_v0_loc":30,"code_v1_loc":20,"code_v0_num_chars":646,"code_v1_num_chars":362,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nN = int(eval(input()))\nketa = len(str(N))\nif keta == 1:\n    print(N)\n    sys.exit()\nans = {}\nfor i in [1, 2, 3, 4, 5, 6, 7, 8, 9]:\n    for j in [1, 2, 3, 4, 5, 6, 7, 8, 9]:\n        ans[(i, j)] = 0\nfor i in range(1, N + 1):\n    maxdigit = int(str(i)[0])\n    mindigit = int(str(i)[-1])\n    if mindigit != 0:\n        ans[(maxdigit, mindigit)] += 1\ncnt = 0\nfor i in range(1, 10):\n    for j in range(1, 10):\n        if i == j:\n            cnt += ans[(i, i)] ** 2\n        else:\n            cnt += ans[(i, j)] * ans[(j, i)] * 2\n            ans[(i, j)] = 0\n            ans[(j, i)] = 0\nprint(cnt)\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nn = int(eval(input()))\nfrom collections import defaultdict\n\nd = defaultdict(int)  # d[(a, b)] : \u5148\u982da, \u672b\u5c3eb\nfor i in range(1, n + 1):\n    i_str = str(i)\n    d[(i_str[0], i_str[-1])] += 1\nans = 0\nfor i in range(1, 10):\n    for j in range(10):\n        ans += d[(str(i), str(j))] * d[(str(j), str(i))]\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-N = int(eval(input()))","-keta = len(str(N))","-if keta == 1:","-    print(N)","-    sys.exit()","-ans = {}","-for i in [1, 2, 3, 4, 5, 6, 7, 8, 9]:","-    for j in [1, 2, 3, 4, 5, 6, 7, 8, 9]:","-        ans[(i, j)] = 0","-for i in range(1, N + 1):","-    maxdigit = int(str(i)[0])","-    mindigit = int(str(i)[-1])","-    if mindigit != 0:","-        ans[(maxdigit, mindigit)] += 1","-cnt = 0","+n = int(eval(input()))","+from collections import defaultdict","+","+d = defaultdict(int)  # d[(a, b)] : \u5148\u982da, \u672b\u5c3eb","+for i in range(1, n + 1):","+    i_str = str(i)","+    d[(i_str[0], i_str[-1])] += 1","+ans = 0","-    for j in range(1, 10):","-        if i == j:","-            cnt += ans[(i, i)] ** 2","-        else:","-            cnt += ans[(i, j)] * ans[(j, i)] * 2","-            ans[(i, j)] = 0","-            ans[(j, i)] = 0","-print(cnt)","+    for j in range(10):","+        ans += d[(str(i), str(j))] * d[(str(j), str(i))]","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3769399883,"measured_runtime_v1":0.2785774942,"runtime_lift":1.3530884443,"key":["s119665759","s980465183"]}
{"user_id":"u161164709","problem_id":"p02555","language":"python","submission_id_v0":"s764735536","submission_id_v1":"s736916531","cpu_time_v0":121,"cpu_time_v1":27,"memory_v0":9164,"memory_v1":9180,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":77.69,"input":"from math import factorial\n\n\n\ns = int(eval(input()))\n\nmod = pow(10, 9) + 7\n\n\n\n\n\ndef nCr(n, r):\n\n    return int(factorial(n) \/\/ factorial(r) \/\/ factorial (n - r) % mod)\n\n\n\nans = 0\n\nseq_len = s \/\/ 3\n\n\n\nfor i in range(1, seq_len + 1):\n\n    ans += nCr(s - 3 * i + (i - 1), i - 1)\n\n\n\nprint((ans % mod))","target":"# \u52d5\u7684\u8a08\u753b\u6cd5\u306b\u3088\u308b\u89e3\u6cd5\n\n\n\ns = int(eval(input()))\n\nmod = pow(10, 9) + 7\n\n\n\nA = [0] * (s + 1)\n\n\n\nif s >= 3:\n\n    A[3] = 1\n\n\n\nfor i in range(4, s + 1):\n\n    A[i] = (A[i - 3] + A[i - 1]) % mod\n\n\n\nprint((A[s]))","code_v0_loc":16,"code_v1_loc":14,"code_v0_num_chars":289,"code_v1_num_chars":187,"code_v0_no_empty_lines":"from math import factorial\n\ns = int(eval(input()))\nmod = pow(10, 9) + 7\n\n\ndef nCr(n, r):\n    return int(factorial(n) \/\/ factorial(r) \/\/ factorial(n - r) % mod)\n\n\nans = 0\nseq_len = s \/\/ 3\nfor i in range(1, seq_len + 1):\n    ans += nCr(s - 3 * i + (i - 1), i - 1)\nprint((ans % mod))\n","code_v1_no_empty_lines":"# \u52d5\u7684\u8a08\u753b\u6cd5\u306b\u3088\u308b\u89e3\u6cd5\ns = int(eval(input()))\nmod = pow(10, 9) + 7\nA = [0] * (s + 1)\nif s >= 3:\n    A[3] = 1\nfor i in range(4, s + 1):\n    A[i] = (A[i - 3] + A[i - 1]) % mod\nprint((A[s]))\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-from math import factorial","-","+# \u52d5\u7684\u8a08\u753b\u6cd5\u306b\u3088\u308b\u89e3\u6cd5","-","-","-def nCr(n, r):","-    return int(factorial(n) \/\/ factorial(r) \/\/ factorial(n - r) % mod)","-","-","-ans = 0","-seq_len = s \/\/ 3","-for i in range(1, seq_len + 1):","-    ans += nCr(s - 3 * i + (i - 1), i - 1)","-print((ans % mod))","+A = [0] * (s + 1)","+if s >= 3:","+    A[3] = 1","+for i in range(4, s + 1):","+    A[i] = (A[i - 3] + A[i - 1]) % mod","+print((A[s]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3023663192,"measured_runtime_v1":0.197884347,"runtime_lift":1.5279951336,"key":["s764735536","s736916531"]}
{"user_id":"u258073778","problem_id":"p03370","language":"python","submission_id_v0":"s864579791","submission_id_v1":"s018766024","cpu_time_v0":712,"cpu_time_v1":525,"memory_v0":3064,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":26.26,"input":"N, X = list(map(int, input().split()))\n\n\n\nmn = [0]*N\n\nfor i in range(N):\n\n  mn[i] = int(eval(input()))\n\n  \n\nans = N\n\nx = X - sum(mn)\n\n\n\nwhile(x >= min(mn)):\n\n  if x \/\/ min(mn) == 0:\n\n    mn[mn.index(min(mn))] = 1000000\n\n  else:\n\n    if x >= min(mn):\n\n      x -= min(mn)\n\n      ans += 1\n\n      \n\nprint(ans)","target":"N, X = list(map(int, input().split()))\n\n\n\nmn = [0]*N\n\nfor i in range(N):\n\n  mn[i] = int(eval(input()))\n\n  \n\nans = N\n\nx = X - sum(mn)\n\n\n\nwhile(x >= min(mn)):\n\n  if x \/\/ min(mn) == 0:\n\n    mn[mn.index(min(mn))] = 1000000\n\n  else:\n\n    x -= min(mn)\n\n    ans += 1\n\n      \n\nprint(ans)","code_v0_loc":18,"code_v1_loc":17,"code_v0_num_chars":293,"code_v1_num_chars":267,"code_v0_no_empty_lines":"N, X = list(map(int, input().split()))\nmn = [0] * N\nfor i in range(N):\n    mn[i] = int(eval(input()))\nans = N\nx = X - sum(mn)\nwhile x >= min(mn):\n    if x \/\/ min(mn) == 0:\n        mn[mn.index(min(mn))] = 1000000\n    else:\n        if x >= min(mn):\n            x -= min(mn)\n            ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"N, X = list(map(int, input().split()))\nmn = [0] * N\nfor i in range(N):\n    mn[i] = int(eval(input()))\nans = N\nx = X - sum(mn)\nwhile x >= min(mn):\n    if x \/\/ min(mn) == 0:\n        mn[mn.index(min(mn))] = 1000000\n    else:\n        x -= min(mn)\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":5.5555555556,"diff":["-        if x >= min(mn):","-            x -= min(mn)","-            ans += 1","+        x -= min(mn)","+        ans += 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.2841449485,"measured_runtime_v1":0.2087575016,"runtime_lift":1.3611244927,"key":["s864579791","s018766024"]}
{"user_id":"u597374218","problem_id":"p03644","language":"python","submission_id_v0":"s675566275","submission_id_v1":"s569588989","cpu_time_v0":118,"cpu_time_v1":28,"memory_v0":27172,"memory_v1":9256,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":76.27,"input":"import numpy as np\n\nN=int(eval(input()))\n\nprint((2**int(np.log2(N))))","target":"import math\n\nN=int(eval(input()))\n\nprint((2**int(math.log2(N))))","code_v0_loc":3,"code_v1_loc":3,"code_v0_num_chars":61,"code_v1_num_chars":56,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nprint((2 ** int(np.log2(N))))\n","code_v1_no_empty_lines":"import math\n\nN = int(eval(input()))\nprint((2 ** int(math.log2(N))))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-import numpy as np","+import math","-print((2 ** int(np.log2(N))))","+print((2 ** int(math.log2(N))))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3166776929,"measured_runtime_v1":0.2254950373,"runtime_lift":5.8390539699,"key":["s675566275","s569588989"]}
{"user_id":"u961683878","problem_id":"p02596","language":"python","submission_id_v0":"s650878996","submission_id_v1":"s172963527","cpu_time_v0":1976,"cpu_time_v1":198,"memory_v0":165028,"memory_v1":9244,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":89.98,"input":"#! \/usr\/bin\/env python3\n\n\n\nimport sys\n\nint1 = lambda x: int(x) - 1\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\nsys.setrecursionlimit(500000)\n\n\n\n\n\ndef isMultiple(s, m):\n\n    tmp = 0\n\n    for i in range(len(s)):\n\n        tmp = (tmp * 10 + int(s[i])) % m\n\n        if tmp == 0:\n\n            return i\n\n    return -1\n\n\n\n\n\nk = int(readline())\n\nacc = \"7\" * 50000000\n\nif k % 2 == 0:\n\n    ans = -1\n\nelse:\n\n\n\n    ans = isMultiple(acc, k)\n\n    if ans != -1:\n\n        ans += 1\n\n\n\nprint(ans)\n","target":"#! \/usr\/bin\/env python3\n\n\n\nimport sys\n\nint1 = lambda x: int(x) - 1\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\nsys.setrecursionlimit(500000)\n\n\n\nk = int(readline())\n\n\n\nans = -1\n\nacc = 7 % k\n\nfor n in range(1, k + 10):\n\n    if acc == 0:\n\n        ans = n\n\n        break\n\n    acc = (10 * acc + 7) % k\n\n\n\nprint(ans)\n","code_v0_loc":30,"code_v1_loc":20,"code_v0_num_chars":543,"code_v1_num_chars":376,"code_v0_no_empty_lines":"#! \/usr\/bin\/env python3\nimport sys\n\nint1 = lambda x: int(x) - 1\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nsys.setrecursionlimit(500000)\n\n\ndef isMultiple(s, m):\n    tmp = 0\n    for i in range(len(s)):\n        tmp = (tmp * 10 + int(s[i])) % m\n        if tmp == 0:\n            return i\n    return -1\n\n\nk = int(readline())\nacc = \"7\" * 50000000\nif k % 2 == 0:\n    ans = -1\nelse:\n    ans = isMultiple(acc, k)\n    if ans != -1:\n        ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"#! \/usr\/bin\/env python3\nimport sys\n\nint1 = lambda x: int(x) - 1\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nsys.setrecursionlimit(500000)\nk = int(readline())\nans = -1\nacc = 7 % k\nfor n in range(1, k + 10):\n    if acc == 0:\n        ans = n\n        break\n    acc = (10 * acc + 7) % k\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-","-","-def isMultiple(s, m):","-    tmp = 0","-    for i in range(len(s)):","-        tmp = (tmp * 10 + int(s[i])) % m","-        if tmp == 0:","-            return i","-    return -1","-","-","-acc = \"7\" * 50000000","-if k % 2 == 0:","-    ans = -1","-else:","-    ans = isMultiple(acc, k)","-    if ans != -1:","-        ans += 1","+ans = -1","+acc = 7 % k","+for n in range(1, k + 10):","+    if acc == 0:","+        ans = n","+        break","+    acc = (10 * acc + 7) % k"],"diff_only_import_comment":false,"measured_runtime_v0":0.8533027549,"measured_runtime_v1":0.4769769247,"runtime_lift":1.788981208,"key":["s650878996","s172963527"]}
{"user_id":"u297574184","problem_id":"p03253","language":"python","submission_id_v0":"s948054289","submission_id_v1":"s568239171","cpu_time_v0":101,"cpu_time_v1":25,"memory_v0":12132,"memory_v1":3316,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":75.25,"input":"from math import floor, sqrt\n\nfrom collections import Counter\n\n\n\nMOD = 10 ** 9 + 7\n\n\n\n# x\u3092\u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b\n\ndef getPrimeFactor(x):\n\n    ans = []\n\n    for d in range(2, floor(sqrt(x)) + 1):\n\n        while x % d == 0:\n\n            ans.append(d)\n\n            x \/\/= d\n\n\n\n    if x != 1:\n\n        ans.append(x)\n\n\n\n    return ans\n\n\n\n# x\u306en\u4e57\uff08\u4e8c\u5206\u7d2f\u4e57\u6cd5\uff09\n\ndef power(x, n):\n\n    ans = 1\n\n    while n:\n\n        if n % 2 == 1:\n\n            ans = (ans * x) % MOD\n\n        x = (x * x) % MOD\n\n        n \/\/= 2\n\n    return ans\n\n\n\n\n\nN, M = list(map(int, input().split()))\n\n\n\nPFs = getPrimeFactor(M)\n\ncnt = Counter(PFs)\n\n\n\nN2 = N\n\nif len(cnt):\n\n    N2 += max(cnt.values())\n\n\n\n# facts[x]: x\u306e\u968e\u4e57\n\nfacts = [1] + [0] * N2\n\nfor x in range(1, N2 + 1):\n\n    facts[x] = (facts[x - 1] * x) % MOD\n\n\n\n# invFs[x]: x\u306e\u968e\u4e57\u306e\u9006\u5143\n\ninvFs = [0] * N2 + [power(facts[N2], MOD - 2)]\n\nfor x in reversed(list(range(N2))):\n\n    invFs[x] = (invFs[x + 1] * (x + 1)) % MOD\n\n\n\ndef comb(n, k):\n\n    return ((facts[n] * invFs[k]) % MOD * invFs[n - k]) % MOD\n\n\n\n\n\nans = 1\n\nfor num in list(cnt.values()):\n\n    ans = (ans * comb(N + num - 1, num)) % MOD\n\nprint(ans)\n","target":"from math import floor, sqrt\n\nfrom collections import Counter\n\n\n\nMOD = 10 ** 9 + 7\n\n\n\n# x\u3092\u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b\n\ndef getPrimeFactor(x):\n\n    ans = []\n\n    for d in range(2, floor(sqrt(x)) + 1):\n\n        while x % d == 0:\n\n            ans.append(d)\n\n            x \/\/= d\n\n    if x != 1:\n\n        ans.append(x)\n\n    return ans\n\n\n\ndef comb(n, k):\n\n    k = min(k, n - k)\n\n    ans = 1\n\n    for i in range(n, n - k, -1):\n\n        ans *= i\n\n    for i in range(1, k + 1):\n\n        ans \/\/= i \n\n    return ans\n\n\n\n\n\nN, M = list(map(int, input().split()))\n\n\n\nPFs = getPrimeFactor(M)\n\ncnt = Counter(PFs)\n\n\n\nans = 1\n\nfor num in list(cnt.values()):\n\n    ans *= comb(N + num - 1, num)\n\nprint((ans % MOD))\n","code_v0_loc":56,"code_v1_loc":35,"code_v0_num_chars":1076,"code_v1_num_chars":660,"code_v0_no_empty_lines":"from math import floor, sqrt\nfrom collections import Counter\n\nMOD = 10**9 + 7\n# x\u3092\u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b\ndef getPrimeFactor(x):\n    ans = []\n    for d in range(2, floor(sqrt(x)) + 1):\n        while x % d == 0:\n            ans.append(d)\n            x \/\/= d\n    if x != 1:\n        ans.append(x)\n    return ans\n\n\n# x\u306en\u4e57\uff08\u4e8c\u5206\u7d2f\u4e57\u6cd5\uff09\ndef power(x, n):\n    ans = 1\n    while n:\n        if n % 2 == 1:\n            ans = (ans * x) % MOD\n        x = (x * x) % MOD\n        n \/\/= 2\n    return ans\n\n\nN, M = list(map(int, input().split()))\nPFs = getPrimeFactor(M)\ncnt = Counter(PFs)\nN2 = N\nif len(cnt):\n    N2 += max(cnt.values())\n# facts[x]: x\u306e\u968e\u4e57\nfacts = [1] + [0] * N2\nfor x in range(1, N2 + 1):\n    facts[x] = (facts[x - 1] * x) % MOD\n# invFs[x]: x\u306e\u968e\u4e57\u306e\u9006\u5143\ninvFs = [0] * N2 + [power(facts[N2], MOD - 2)]\nfor x in reversed(list(range(N2))):\n    invFs[x] = (invFs[x + 1] * (x + 1)) % MOD\n\n\ndef comb(n, k):\n    return ((facts[n] * invFs[k]) % MOD * invFs[n - k]) % MOD\n\n\nans = 1\nfor num in list(cnt.values()):\n    ans = (ans * comb(N + num - 1, num)) % MOD\nprint(ans)\n","code_v1_no_empty_lines":"from math import floor, sqrt\nfrom collections import Counter\n\nMOD = 10**9 + 7\n# x\u3092\u7d20\u56e0\u6570\u5206\u89e3\u3059\u308b\ndef getPrimeFactor(x):\n    ans = []\n    for d in range(2, floor(sqrt(x)) + 1):\n        while x % d == 0:\n            ans.append(d)\n            x \/\/= d\n    if x != 1:\n        ans.append(x)\n    return ans\n\n\ndef comb(n, k):\n    k = min(k, n - k)\n    ans = 1\n    for i in range(n, n - k, -1):\n        ans *= i\n    for i in range(1, k + 1):\n        ans \/\/= i\n    return ans\n\n\nN, M = list(map(int, input().split()))\nPFs = getPrimeFactor(M)\ncnt = Counter(PFs)\nans = 1\nfor num in list(cnt.values()):\n    ans *= comb(N + num - 1, num)\nprint((ans % MOD))\n","code_same":false,"relative_loc_diff_percent":37.5,"diff":["-# x\u306en\u4e57\uff08\u4e8c\u5206\u7d2f\u4e57\u6cd5\uff09","-def power(x, n):","+def comb(n, k):","+    k = min(k, n - k)","-    while n:","-        if n % 2 == 1:","-            ans = (ans * x) % MOD","-        x = (x * x) % MOD","-        n \/\/= 2","+    for i in range(n, n - k, -1):","+        ans *= i","+    for i in range(1, k + 1):","+        ans \/\/= i","-N2 = N","-if len(cnt):","-    N2 += max(cnt.values())","-# facts[x]: x\u306e\u968e\u4e57","-facts = [1] + [0] * N2","-for x in range(1, N2 + 1):","-    facts[x] = (facts[x - 1] * x) % MOD","-# invFs[x]: x\u306e\u968e\u4e57\u306e\u9006\u5143","-invFs = [0] * N2 + [power(facts[N2], MOD - 2)]","-for x in reversed(list(range(N2))):","-    invFs[x] = (invFs[x + 1] * (x + 1)) % MOD","-","-","-def comb(n, k):","-    return ((facts[n] * invFs[k]) % MOD * invFs[n - k]) % MOD","-","-","-    ans = (ans * comb(N + num - 1, num)) % MOD","-print(ans)","+    ans *= comb(N + num - 1, num)","+print((ans % MOD))"],"diff_only_import_comment":false,"measured_runtime_v0":0.4482381222,"measured_runtime_v1":0.277183044,"runtime_lift":1.6171195605,"key":["s948054289","s568239171"]}
{"user_id":"u810356688","problem_id":"p02690","language":"python","submission_id_v0":"s967484686","submission_id_v1":"s277151448","cpu_time_v0":118,"cpu_time_v1":28,"memory_v0":9176,"memory_v1":9040,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":76.27,"input":"import sys\n\ndef input(): return sys.stdin.readline().rstrip()\n\ndef main():\n\n    x=int(eval(input()))\n\n    for i in range(-300,300):\n\n        for j in range(-300,300):\n\n            if i**5-j**5==x:\n\n                print((i,j))\n\n                sys.exit()\n\n\n\nif __name__=='__main__':\n\n    main()","target":"import sys\n\ndef input(): return sys.stdin.readline().rstrip()\n\ndef main():\n\n    x=int(eval(input()))\n\n    for a in range(-118,120):\n\n        for diff in range(238):\n\n            if a**5-(a-diff)**5>10**9:\n\n                break\n\n            if a**5-(a-diff)**5==x:\n\n                print((a,a-diff))\n\n                sys.exit()\n\n\n\nif __name__=='__main__':\n\n    main()","code_v0_loc":12,"code_v1_loc":14,"code_v0_num_chars":286,"code_v1_num_chars":359,"code_v0_no_empty_lines":"import sys\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    x = int(eval(input()))\n    for i in range(-300, 300):\n        for j in range(-300, 300):\n            if i**5 - j**5 == x:\n                print((i, j))\n                sys.exit()\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    x = int(eval(input()))\n    for a in range(-118, 120):\n        for diff in range(238):\n            if a**5 - (a - diff) ** 5 > 10**9:\n                break\n            if a**5 - (a - diff) ** 5 == x:\n                print((a, a - diff))\n                sys.exit()\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["-    for i in range(-300, 300):","-        for j in range(-300, 300):","-            if i**5 - j**5 == x:","-                print((i, j))","+    for a in range(-118, 120):","+        for diff in range(238):","+            if a**5 - (a - diff) ** 5 > 10**9:","+                break","+            if a**5 - (a - diff) ** 5 == x:","+                print((a, a - diff))"],"diff_only_import_comment":false,"measured_runtime_v0":1.0260130386,"measured_runtime_v1":0.2234877924,"runtime_lift":4.5909131207,"key":["s967484686","s277151448"]}
{"user_id":"u133936772","problem_id":"p02615","language":"python","submission_id_v0":"s324254523","submission_id_v1":"s548223725","cpu_time_v0":146,"cpu_time_v1":118,"memory_v0":31756,"memory_v1":31752,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":19.18,"input":"n,*l=list(map(int,open(0).read().split()));print((sum(sorted(l*2)[-2:~n:-1])))","target":"n,*l=list(map(int,open(0).read().split()))\n\nl.sort(reverse=1)\n\nprint((sum(l[i\/\/2] for i in range(1,n))))","code_v0_loc":1,"code_v1_loc":3,"code_v0_num_chars":70,"code_v1_num_chars":96,"code_v0_no_empty_lines":"n, *l = list(map(int, open(0).read().split()))\nprint((sum(sorted(l * 2)[-2:~n:-1])))\n","code_v1_no_empty_lines":"n, *l = list(map(int, open(0).read().split()))\nl.sort(reverse=1)\nprint((sum(l[i \/\/ 2] for i in range(1, n))))\n","code_same":false,"relative_loc_diff_percent":66.6666666667,"diff":["-print((sum(sorted(l * 2)[-2:~n:-1])))","+l.sort(reverse=1)","+print((sum(l[i \/\/ 2] for i in range(1, n))))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2901719676,"measured_runtime_v1":0.1990829677,"runtime_lift":1.4575429076,"key":["s324254523","s548223725"]}
{"user_id":"u130900604","problem_id":"p03796","language":"python","submission_id_v0":"s800410916","submission_id_v1":"s728597484","cpu_time_v0":374,"cpu_time_v1":55,"memory_v0":13144,"memory_v1":6884,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":85.29,"input":"import numpy as np\n\nmod=10**9+7\n\nd=np.zeros(100100,dtype=np.int64)\n\nd[0]=1\n\nfor i in range(1,10**5+1):\n\n  d[i]=d[i-1]*i%mod\n\nprint((d[int(eval(input()))]))","target":"d,mod=[1]+[0]*100100,10**9+7\n\nfor i in range(1,10**5+1):d[i]=d[i-1]*i%mod\n\nprint((d[int(eval(input()))]))","code_v0_loc":7,"code_v1_loc":3,"code_v0_num_chars":147,"code_v1_num_chars":97,"code_v0_no_empty_lines":"import numpy as np\n\nmod = 10**9 + 7\nd = np.zeros(100100, dtype=np.int64)\nd[0] = 1\nfor i in range(1, 10**5 + 1):\n    d[i] = d[i - 1] * i % mod\nprint((d[int(eval(input()))]))\n","code_v1_no_empty_lines":"d, mod = [1] + [0] * 100100, 10**9 + 7\nfor i in range(1, 10**5 + 1):\n    d[i] = d[i - 1] * i % mod\nprint((d[int(eval(input()))]))\n","code_same":false,"relative_loc_diff_percent":57.1428571429,"diff":["-import numpy as np","-","-mod = 10**9 + 7","-d = np.zeros(100100, dtype=np.int64)","-d[0] = 1","+d, mod = [1] + [0] * 100100, 10**9 + 7"],"diff_only_import_comment":false,"measured_runtime_v0":1.8401680753,"measured_runtime_v1":0.4502561843,"runtime_lift":4.086935703,"key":["s800410916","s728597484"]}
{"user_id":"u727072969","problem_id":"p02881","language":"python","submission_id_v0":"s064089444","submission_id_v1":"s044740610","cpu_time_v0":519,"cpu_time_v1":181,"memory_v0":3060,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":65.13,"input":"import math\n\nN = int(eval(input()))\n\nfor i in range(int(math.sqrt(N))):\n\n    if N % (int(math.sqrt(N))-i) == 0:\n\n        print((int(N\/(int(math.sqrt(N))-i)+int(math.sqrt(N))-i-2)))\n\n        break","target":"import math\n\nN = int(eval(input()))\n\nM = int(math.sqrt(N))\n\nfor i in range(M):\n\n    if N % (M-i) == 0:\n\n        print((int(N\/(M-i)+M-i-2)))\n\n        break\n","code_v0_loc":6,"code_v1_loc":7,"code_v0_num_chars":187,"code_v1_num_chars":147,"code_v0_no_empty_lines":"import math\n\nN = int(eval(input()))\nfor i in range(int(math.sqrt(N))):\n    if N % (int(math.sqrt(N)) - i) == 0:\n        print((int(N \/ (int(math.sqrt(N)) - i) + int(math.sqrt(N)) - i - 2)))\n        break\n","code_v1_no_empty_lines":"import math\n\nN = int(eval(input()))\nM = int(math.sqrt(N))\nfor i in range(M):\n    if N % (M - i) == 0:\n        print((int(N \/ (M - i) + M - i - 2)))\n        break\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["-for i in range(int(math.sqrt(N))):","-    if N % (int(math.sqrt(N)) - i) == 0:","-        print((int(N \/ (int(math.sqrt(N)) - i) + int(math.sqrt(N)) - i - 2)))","+M = int(math.sqrt(N))","+for i in range(M):","+    if N % (M - i) == 0:","+        print((int(N \/ (M - i) + M - i - 2)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3627885733,"measured_runtime_v1":0.269237565,"runtime_lift":1.3474664028,"key":["s064089444","s044740610"]}
{"user_id":"u530383736","problem_id":"p02690","language":"python","submission_id_v0":"s540635335","submission_id_v1":"s335532444","cpu_time_v0":50,"cpu_time_v1":35,"memory_v0":8964,"memory_v1":9188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":30.0,"input":"# -*- coding: utf-8 -*-\n\nimport sys\n\n\n\nX = int(input().strip())\n\n#-----\n\n\n\nfor a in range(-118,120):\n\n    for b in range(-118,120):\n\n        if (a**5 - b**5) == X:\n\n            print((a,b))\n\n            sys.exit()\n","target":"# -*- coding: utf-8 -*-\n\nimport sys\n\n\n\nX = int(input().strip())\n\n#-----\n\ncalc = {}\n\n\n\nfor i in range(-118,120):\n\n    calc[i] = i**5\n\n\n\n\n\nfor a in range(-118,120):\n\n    for b in range(-118,120):\n\n        if (calc[a] - calc[b]) == X:\n\n            print((a,b))\n\n            sys.exit()\n","code_v0_loc":11,"code_v1_loc":16,"code_v0_num_chars":212,"code_v1_num_chars":280,"code_v0_no_empty_lines":"# -*- coding: utf-8 -*-\nimport sys\n\nX = int(input().strip())\n# -----\nfor a in range(-118, 120):\n    for b in range(-118, 120):\n        if (a**5 - b**5) == X:\n            print((a, b))\n            sys.exit()\n","code_v1_no_empty_lines":"# -*- coding: utf-8 -*-\nimport sys\n\nX = int(input().strip())\n# -----\ncalc = {}\nfor i in range(-118, 120):\n    calc[i] = i**5\nfor a in range(-118, 120):\n    for b in range(-118, 120):\n        if (calc[a] - calc[b]) == X:\n            print((a, b))\n            sys.exit()\n","code_same":false,"relative_loc_diff_percent":31.25,"diff":["+calc = {}","+for i in range(-118, 120):","+    calc[i] = i**5","-        if (a**5 - b**5) == X:","+        if (calc[a] - calc[b]) == X:"],"diff_only_import_comment":false,"measured_runtime_v0":0.4712231378,"measured_runtime_v1":0.3317169825,"runtime_lift":1.4205577724,"key":["s540635335","s335532444"]}
{"user_id":"u753589982","problem_id":"p02994","language":"python","submission_id_v0":"s918408995","submission_id_v1":"s703264591","cpu_time_v0":19,"cpu_time_v1":17,"memory_v0":3064,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.53,"input":"N, L = [int(i) for i in input().split()]\n\n\n\nmin_ = L\n\nmax_ = L + N -1\n\n\n\ndef eat_apple():\n\n    if max_<0:\n\n        return max_ \n\n    if L < 0:\n\n        return 0\n\n    return L\n\n\n\nprint(((min_+max_)*(max_-min_+1)\/\/2 - eat_apple()))","target":"N, L = [int(i) for i in input().split()]\n\n\n\nmin_ = L\n\nmax_ = L + N -1\n\n\n\ndef eat_apple(N, L, max_):\n\n    if max_<0:\n\n        return max_ \n\n    if L < 0:\n\n        return 0\n\n    return L\n\n\n\nprint(((min_+max_)*(max_-min_+1)\/\/2 - eat_apple(N, L, max_)))","code_v0_loc":13,"code_v1_loc":13,"code_v0_num_chars":227,"code_v1_num_chars":247,"code_v0_no_empty_lines":"N, L = [int(i) for i in input().split()]\nmin_ = L\nmax_ = L + N - 1\n\n\ndef eat_apple():\n    if max_ < 0:\n        return max_\n    if L < 0:\n        return 0\n    return L\n\n\nprint(((min_ + max_) * (max_ - min_ + 1) \/\/ 2 - eat_apple()))\n","code_v1_no_empty_lines":"N, L = [int(i) for i in input().split()]\nmin_ = L\nmax_ = L + N - 1\n\n\ndef eat_apple(N, L, max_):\n    if max_ < 0:\n        return max_\n    if L < 0:\n        return 0\n    return L\n\n\nprint(((min_ + max_) * (max_ - min_ + 1) \/\/ 2 - eat_apple(N, L, max_)))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-def eat_apple():","+def eat_apple(N, L, max_):","-print(((min_ + max_) * (max_ - min_ + 1) \/\/ 2 - eat_apple()))","+print(((min_ + max_) * (max_ - min_ + 1) \/\/ 2 - eat_apple(N, L, max_)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2025646191,"measured_runtime_v1":0.0060813091,"runtime_lift":33.309377317,"key":["s918408995","s703264591"]}
{"user_id":"u787562674","problem_id":"p03363","language":"python","submission_id_v0":"s520227607","submission_id_v1":"s241017574","cpu_time_v0":271,"cpu_time_v1":224,"memory_v0":41880,"memory_v1":41472,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.34,"input":"from collections import Counter\n\n\n\nN = int(eval(input()))\n\ninputs = [int(i) for i in input().split()]\n\n\n\nans = 0\n\nruisekiwa = [0] * (N+1)\n\n\n\nfor i in range(N):\n\n    ruisekiwa[i+1] = ruisekiwa[i] + inputs[i]\n\n\n\nruisekiwa = ruisekiwa[1:]\n\nruisekiwa.sort()\n\ncounter_ruiseki = Counter(ruisekiwa)\n\n\n\nfor key, value in list(counter_ruiseki.items()):\n\n    if key == 0 and value == 1:\n\n        ans += value\n\n        continue\n\n    elif key == 0 and value > 1:\n\n        ans += value\n\n    if value > 1:\n\n        ans += sum(list(range(value)))\n\n\n\nprint(ans)\n","target":"from collections import Counter\n\nfrom itertools import accumulate\n\n\n\nN = int(eval(input()))\n\ninputs = [int(i) for i in input().split()]\n\n\n\nans = 0\n\n\n\nruisekiwa = list(accumulate(inputs))\n\nruisekiwa.sort()\n\ncounter_ruiseki = Counter(ruisekiwa)\n\n\n\nfor key, value in list(counter_ruiseki.items()):\n\n    if key == 0 and value == 1:\n\n        ans += value\n\n        continue\n\n    elif key == 0 and value > 1:\n\n        ans += value\n\n    if value > 1:\n\n        ans += sum(list(range(value)))\n\n\n\nprint(ans)\n","code_v0_loc":25,"code_v1_loc":22,"code_v0_num_chars":534,"code_v1_num_chars":485,"code_v0_no_empty_lines":"from collections import Counter\n\nN = int(eval(input()))\ninputs = [int(i) for i in input().split()]\nans = 0\nruisekiwa = [0] * (N + 1)\nfor i in range(N):\n    ruisekiwa[i + 1] = ruisekiwa[i] + inputs[i]\nruisekiwa = ruisekiwa[1:]\nruisekiwa.sort()\ncounter_ruiseki = Counter(ruisekiwa)\nfor key, value in list(counter_ruiseki.items()):\n    if key == 0 and value == 1:\n        ans += value\n        continue\n    elif key == 0 and value > 1:\n        ans += value\n    if value > 1:\n        ans += sum(list(range(value)))\nprint(ans)\n","code_v1_no_empty_lines":"from collections import Counter\nfrom itertools import accumulate\n\nN = int(eval(input()))\ninputs = [int(i) for i in input().split()]\nans = 0\nruisekiwa = list(accumulate(inputs))\nruisekiwa.sort()\ncounter_ruiseki = Counter(ruisekiwa)\nfor key, value in list(counter_ruiseki.items()):\n    if key == 0 and value == 1:\n        ans += value\n        continue\n    elif key == 0 and value > 1:\n        ans += value\n    if value > 1:\n        ans += sum(list(range(value)))\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":12.0,"diff":["+from itertools import accumulate","-ruisekiwa = [0] * (N + 1)","-for i in range(N):","-    ruisekiwa[i + 1] = ruisekiwa[i] + inputs[i]","-ruisekiwa = ruisekiwa[1:]","+ruisekiwa = list(accumulate(inputs))"],"diff_only_import_comment":false,"measured_runtime_v0":0.19887093,"measured_runtime_v1":0.1327844608,"runtime_lift":1.4976973116,"key":["s520227607","s241017574"]}
{"user_id":"u868701750","problem_id":"p03457","language":"python","submission_id_v0":"s991338937","submission_id_v1":"s211926413","cpu_time_v0":209,"cpu_time_v1":173,"memory_v0":27480,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.22,"input":"import sys\n\n_input = sys.stdin.readline\n\n\n\n\n\ndef resolve():\n\n    N = int(_input())\n\n    T = [list(map(int, _input().split())) for _ in range(N)]\n\n    t, x, y = 0, 0, 0\n\n    for next_t, next_x, next_y in T:\n\n        diff_xy = abs(x - next_x) + abs(y - next_y)\n\n        diff_t = next_t - t\n\n        if diff_xy > diff_t or (diff_xy % 2 != diff_t % 2):\n\n            print('No')\n\n            exit(0)\n\n    print('Yes')\n\n\n\n\n\nif __name__ == '__main__':\n\n    resolve()","target":"import sys\n\n_input = sys.stdin.readline\n\n\n\n\n\ndef resolve():\n\n    N = int(_input())\n\n    t, x, y = 0, 0, 0\n\n    for _ in range(N):\n\n        next_t, next_x, next_y = list(map(int, _input().split()))\n\n        diff_xy = abs(x - next_x) + abs(y - next_y)\n\n        diff_t = next_t - t\n\n        if diff_xy > diff_t or (diff_xy % 2 != diff_t % 2):\n\n            print('No')\n\n            exit(0)\n\n    print('Yes')\n\n\n\n\n\nif __name__ == '__main__':\n\n    resolve()","code_v0_loc":19,"code_v1_loc":19,"code_v0_num_chars":459,"code_v1_num_chars":444,"code_v0_no_empty_lines":"import sys\n\n_input = sys.stdin.readline\n\n\ndef resolve():\n    N = int(_input())\n    T = [list(map(int, _input().split())) for _ in range(N)]\n    t, x, y = 0, 0, 0\n    for next_t, next_x, next_y in T:\n        diff_xy = abs(x - next_x) + abs(y - next_y)\n        diff_t = next_t - t\n        if diff_xy > diff_t or (diff_xy % 2 != diff_t % 2):\n            print(\"No\")\n            exit(0)\n    print(\"Yes\")\n\n\nif __name__ == \"__main__\":\n    resolve()\n","code_v1_no_empty_lines":"import sys\n\n_input = sys.stdin.readline\n\n\ndef resolve():\n    N = int(_input())\n    t, x, y = 0, 0, 0\n    for _ in range(N):\n        next_t, next_x, next_y = list(map(int, _input().split()))\n        diff_xy = abs(x - next_x) + abs(y - next_y)\n        diff_t = next_t - t\n        if diff_xy > diff_t or (diff_xy % 2 != diff_t % 2):\n            print(\"No\")\n            exit(0)\n    print(\"Yes\")\n\n\nif __name__ == \"__main__\":\n    resolve()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    T = [list(map(int, _input().split())) for _ in range(N)]","-    for next_t, next_x, next_y in T:","+    for _ in range(N):","+        next_t, next_x, next_y = list(map(int, _input().split()))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2834033267,"measured_runtime_v1":0.1166054926,"runtime_lift":2.4304457743,"key":["s991338937","s211926413"]}
{"user_id":"u280978334","problem_id":"p03107","language":"python","submission_id_v0":"s353947972","submission_id_v1":"s266533401","cpu_time_v0":65,"cpu_time_v1":18,"memory_v0":5400,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":72.31,"input":"S = [int(_) for _ in eval(input())]\n\nlength = len(S)\n\ntemp = [S[0]]\n\nfor x in S[1:]:\n\n    if(len(temp) == 0):\n\n        temp.append(x)\n\n    elif( temp[-1] == x):\n\n        temp.append(x)\n\n    else:\n\n        temp.pop(-1)\n\nprint((length-len(temp)))\n\n        ","target":"def main():\n\n    A = eval(input())\n\n    print((2*min(A.count(\"0\"),A.count(\"1\"))))\n\n    \n\nif __name__ == \"__main__\":\n\n    main()","code_v0_loc":12,"code_v1_loc":6,"code_v0_num_chars":246,"code_v1_num_chars":119,"code_v0_no_empty_lines":"S = [int(_) for _ in eval(input())]\nlength = len(S)\ntemp = [S[0]]\nfor x in S[1:]:\n    if len(temp) == 0:\n        temp.append(x)\n    elif temp[-1] == x:\n        temp.append(x)\n    else:\n        temp.pop(-1)\nprint((length - len(temp)))\n","code_v1_no_empty_lines":"def main():\n    A = eval(input())\n    print((2 * min(A.count(\"0\"), A.count(\"1\"))))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-S = [int(_) for _ in eval(input())]","-length = len(S)","-temp = [S[0]]","-for x in S[1:]:","-    if len(temp) == 0:","-        temp.append(x)","-    elif temp[-1] == x:","-        temp.append(x)","-    else:","-        temp.pop(-1)","-print((length - len(temp)))","+def main():","+    A = eval(input())","+    print((2 * min(A.count(\"0\"), A.count(\"1\"))))","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.2279973624,"measured_runtime_v1":0.00614361,"runtime_lift":37.1113013328,"key":["s353947972","s266533401"]}
{"user_id":"u423966555","problem_id":"p02596","language":"python","submission_id_v0":"s734835984","submission_id_v1":"s256781932","cpu_time_v0":338,"cpu_time_v1":178,"memory_v0":16560,"memory_v1":9056,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":47.34,"input":"K = int(eval(input()))\n\n\n\nflg = [False]*K\n\n\n\ntmp = 7 % K\n\ncnt = 1\n\nif tmp == 0:\n\n    print(cnt)\n\n    exit()\n\nwhile True:\n\n    tmp = (tmp*10+7)%K\n\n    if flg[tmp]:\n\n        print((-1))\n\n        break\n\n    else:\n\n        cnt += 1\n\n        if tmp == 0:\n\n            print(cnt)\n\n            break\n\n        flg[tmp] = True\n","target":"K = int(eval(input()))\n\nt = 7\n\nt %= K\n\n\n\nfor i in range(K+1):\n\n    if t == 0:\n\n        print((i+1))\n\n        exit()\n\n    t = (t*10+7)%K\n\nprint((-1))\n","code_v0_loc":20,"code_v1_loc":10,"code_v0_num_chars":310,"code_v1_num_chars":139,"code_v0_no_empty_lines":"K = int(eval(input()))\nflg = [False] * K\ntmp = 7 % K\ncnt = 1\nif tmp == 0:\n    print(cnt)\n    exit()\nwhile True:\n    tmp = (tmp * 10 + 7) % K\n    if flg[tmp]:\n        print((-1))\n        break\n    else:\n        cnt += 1\n        if tmp == 0:\n            print(cnt)\n            break\n        flg[tmp] = True\n","code_v1_no_empty_lines":"K = int(eval(input()))\nt = 7\nt %= K\nfor i in range(K + 1):\n    if t == 0:\n        print((i + 1))\n        exit()\n    t = (t * 10 + 7) % K\nprint((-1))\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-flg = [False] * K","-tmp = 7 % K","-cnt = 1","-if tmp == 0:","-    print(cnt)","-    exit()","-while True:","-    tmp = (tmp * 10 + 7) % K","-    if flg[tmp]:","-        print((-1))","-        break","-    else:","-        cnt += 1","-        if tmp == 0:","-            print(cnt)","-            break","-        flg[tmp] = True","+t = 7","+t %= K","+for i in range(K + 1):","+    if t == 0:","+        print((i + 1))","+        exit()","+    t = (t * 10 + 7) % K","+print((-1))"],"diff_only_import_comment":false,"measured_runtime_v0":0.6767371264,"measured_runtime_v1":0.4369205115,"runtime_lift":1.5488792779,"key":["s734835984","s256781932"]}
{"user_id":"u239981649","problem_id":"p03796","language":"python","submission_id_v0":"s383796227","submission_id_v1":"s138334572","cpu_time_v0":232,"cpu_time_v1":34,"memory_v0":3972,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":85.34,"input":"from math import factorial\n\nprint((factorial(int(eval(input()))) % (10**9+7)))","target":"ans = 1\n\nfor k in range(1, int(eval(input()))+1):\n\n    ans = ans*k % (10**9+7)\n\nprint(ans)","code_v0_loc":2,"code_v1_loc":4,"code_v0_num_chars":70,"code_v1_num_chars":84,"code_v0_no_empty_lines":"from math import factorial\n\nprint((factorial(int(eval(input()))) % (10**9 + 7)))\n","code_v1_no_empty_lines":"ans = 1\nfor k in range(1, int(eval(input())) + 1):\n    ans = ans * k % (10**9 + 7)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-from math import factorial","-","-print((factorial(int(eval(input()))) % (10**9 + 7)))","+ans = 1","+for k in range(1, int(eval(input())) + 1):","+    ans = ans * k % (10**9 + 7)","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3382144179,"measured_runtime_v1":0.1644267938,"runtime_lift":2.0569300785,"key":["s383796227","s138334572"]}
{"user_id":"u761320129","problem_id":"p03822","language":"python","submission_id_v0":"s508015569","submission_id_v1":"s203932637","cpu_time_v0":763,"cpu_time_v1":637,"memory_v0":227992,"memory_v1":123792,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.51,"input":"import sys\n\nsys.setrecursionlimit(202020)\n\n\n\nN = int(eval(input()))\n\nwon = [[] for i in range(N)]\n\nfor i in range(1,N):\n\n    a = int(eval(input())) - 1\n\n    won[a].append(i)\n\n\n\ndef height(v):\n\n    if not won[v]: return 0\n\n    hs = [height(op) for op in won[v]]\n\n    ret = 0\n\n    for i,h in enumerate(sorted(hs)):\n\n        ret = max(ret, h + len(hs) - i)\n\n    return ret\n\n\n\nprint((height(0)))","target":"import sys\n\nsys.setrecursionlimit(10**8)\n\nN = int(eval(input()))\n\nA = [int(eval(input()))-1 for i in range(N-1)]\n\nwins = [[] for _ in range(N)]\n\n\n\nfor i,a in enumerate(A):\n\n    wins[a].append(i+1)\n\n\n\ndepth = [-1] * N\n\ndef dep(v):\n\n    if len(wins[v])==0: return 0\n\n    if depth[v] >= 0:\n\n        return depth[v]\n\n    ds = []\n\n    for w in wins[v]:\n\n        ds.append(dep(w))\n\n    ds.sort(reverse=True)\n\n    ret = 0\n\n    for i,d in enumerate(ds):\n\n        ret = max(ret, i+d+1)\n\n    depth[v] = ret\n\n    return ret\n\nprint((dep(0)))","code_v0_loc":18,"code_v1_loc":24,"code_v0_num_chars":377,"code_v1_num_chars":515,"code_v0_no_empty_lines":"import sys\n\nsys.setrecursionlimit(202020)\nN = int(eval(input()))\nwon = [[] for i in range(N)]\nfor i in range(1, N):\n    a = int(eval(input())) - 1\n    won[a].append(i)\n\n\ndef height(v):\n    if not won[v]:\n        return 0\n    hs = [height(op) for op in won[v]]\n    ret = 0\n    for i, h in enumerate(sorted(hs)):\n        ret = max(ret, h + len(hs) - i)\n    return ret\n\n\nprint((height(0)))\n","code_v1_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10**8)\nN = int(eval(input()))\nA = [int(eval(input())) - 1 for i in range(N - 1)]\nwins = [[] for _ in range(N)]\nfor i, a in enumerate(A):\n    wins[a].append(i + 1)\ndepth = [-1] * N\n\n\ndef dep(v):\n    if len(wins[v]) == 0:\n        return 0\n    if depth[v] >= 0:\n        return depth[v]\n    ds = []\n    for w in wins[v]:\n        ds.append(dep(w))\n    ds.sort(reverse=True)\n    ret = 0\n    for i, d in enumerate(ds):\n        ret = max(ret, i + d + 1)\n    depth[v] = ret\n    return ret\n\n\nprint((dep(0)))\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-sys.setrecursionlimit(202020)","+sys.setrecursionlimit(10**8)","-won = [[] for i in range(N)]","-for i in range(1, N):","-    a = int(eval(input())) - 1","-    won[a].append(i)","+A = [int(eval(input())) - 1 for i in range(N - 1)]","+wins = [[] for _ in range(N)]","+for i, a in enumerate(A):","+    wins[a].append(i + 1)","+depth = [-1] * N","-def height(v):","-    if not won[v]:","+def dep(v):","+    if len(wins[v]) == 0:","-    hs = [height(op) for op in won[v]]","+    if depth[v] >= 0:","+        return depth[v]","+    ds = []","+    for w in wins[v]:","+        ds.append(dep(w))","+    ds.sort(reverse=True)","-    for i, h in enumerate(sorted(hs)):","-        ret = max(ret, h + len(hs) - i)","+    for i, d in enumerate(ds):","+        ret = max(ret, i + d + 1)","+    depth[v] = ret","-print((height(0)))","+print((dep(0)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3026691139,"measured_runtime_v1":0.2050500124,"runtime_lift":1.4760745946,"key":["s508015569","s203932637"]}
{"user_id":"u263737105","problem_id":"p02595","language":"python","submission_id_v0":"s947121829","submission_id_v1":"s479170385","cpu_time_v0":481,"cpu_time_v1":391,"memory_v0":9072,"memory_v1":9124,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":18.71,"input":"N, D = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(N):\n\n    a, b = list(map(int, input().split()))\n\n    if (a**2 + b**2) <= D**2:\n\n        count += 1\n\nprint(count)\n","target":"N, D = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(N):\n\n    a, b = list(map(int, input().split()))\n\n    if (a*a + b*b) <= D*D:\n\n        count += 1\n\nprint(count)\n","code_v0_loc":7,"code_v1_loc":7,"code_v0_num_chars":167,"code_v1_num_chars":164,"code_v0_no_empty_lines":"N, D = list(map(int, input().split()))\ncount = 0\nfor i in range(N):\n    a, b = list(map(int, input().split()))\n    if (a**2 + b**2) <= D**2:\n        count += 1\nprint(count)\n","code_v1_no_empty_lines":"N, D = list(map(int, input().split()))\ncount = 0\nfor i in range(N):\n    a, b = list(map(int, input().split()))\n    if (a * a + b * b) <= D * D:\n        count += 1\nprint(count)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    if (a**2 + b**2) <= D**2:","+    if (a * a + b * b) <= D * D:"],"diff_only_import_comment":false,"measured_runtime_v0":0.2832637064,"measured_runtime_v1":0.1751975398,"runtime_lift":1.6168246811,"key":["s947121829","s479170385"]}
{"user_id":"u077291787","problem_id":"p03309","language":"python","submission_id_v0":"s828043733","submission_id_v1":"s360156642","cpu_time_v0":210,"cpu_time_v1":183,"memory_v0":27472,"memory_v1":25324,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":12.86,"input":"# ABC102C - Linear Approximation (ARC100C)\n\nfrom statistics import median\n\n\n\n\n\ndef main():\n\n    n = int(eval(input()))\n\n    A = tuple(map(int, input().rstrip().split()))\n\n    A = tuple(j - i for i, j in enumerate(A, start=1))\n\n    b = median(A)\n\n    ans = sum(abs(a - b) for a in A)\n\n    print((int(ans)))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()","target":"# ABC102C - Linear Approximation (ARC100C)\n\ndef main():\n\n    n = int(eval(input()))\n\n    A = tuple(map(int, input().rstrip().split()))\n\n    A = sorted(j - i for i, j in enumerate(A, start=1))\n\n    b = A[n \/\/ 2]\n\n    ans = sum(abs(a - b) for a in A)\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()","code_v0_loc":15,"code_v1_loc":12,"code_v0_num_chars":341,"code_v1_num_chars":302,"code_v0_no_empty_lines":"# ABC102C - Linear Approximation (ARC100C)\nfrom statistics import median\n\n\ndef main():\n    n = int(eval(input()))\n    A = tuple(map(int, input().rstrip().split()))\n    A = tuple(j - i for i, j in enumerate(A, start=1))\n    b = median(A)\n    ans = sum(abs(a - b) for a in A)\n    print((int(ans)))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"# ABC102C - Linear Approximation (ARC100C)\ndef main():\n    n = int(eval(input()))\n    A = tuple(map(int, input().rstrip().split()))\n    A = sorted(j - i for i, j in enumerate(A, start=1))\n    b = A[n \/\/ 2]\n    ans = sum(abs(a - b) for a in A)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["-from statistics import median","-","-","-    A = tuple(j - i for i, j in enumerate(A, start=1))","-    b = median(A)","+    A = sorted(j - i for i, j in enumerate(A, start=1))","+    b = A[n \/\/ 2]","-    print((int(ans)))","+    print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2185840318,"measured_runtime_v1":0.1650515537,"runtime_lift":1.3243379227,"key":["s828043733","s360156642"]}
{"user_id":"u260980560","problem_id":"p01105","language":"python","submission_id_v0":"s457180384","submission_id_v1":"s699385465","cpu_time_v0":130,"cpu_time_v1":50,"memory_v0":7848,"memory_v1":7824,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":61.54,"input":"a=65280; b=61680; c=52428; d=43690; e=65535\n\nL = {el: 1 for el in [a, b, c, d, e, 0]}\n\nfor i in range(6):\n\n    R = sorted(L.items(), key=lambda x: x[1])\n\n    for p, l in R:\n\n        if l < 16:\n\n            L[p ^ e] = min(L.get(p ^ e, 16), l+1)\n\n            if l+3 < 16:\n\n                for q, r in R:\n\n                    if l+r+3 <= 16:\n\n                        L[p & q] = min(L.get(p & q, 16), l+r+3)\n\n                        L[p ^ q] = min(L.get(p ^ q, 16), l+r+3)\n\n                    else: break\n\n        else: break\n\nprint(*(L[e & eval(s)] for s in open(0).read().replace(*\"-~\").replace(*\"*&\").replace(*\"1e\").split()[:-1]),sep='\\n')\n","target":"a=65280; b=61680; c=52428; d=43690; e=65535\n\nfrom heapq import heappush, heappop\n\nbase = [a, b, c, d, e, 0]\n\nQ = [(1, el) for el in base]\n\nL = {el: 1 for el in base}\n\nH = []\n\nwhile Q:\n\n    l, p = heappop(Q)\n\n    if L[p] < l: continue\n\n    if l+1 < L.get(p ^ e, 17):\n\n        L[p^e] = l+1\n\n        if l+1 < 16: heappush(Q, (l+1, p^e))\n\n    if l+3 < 16:\n\n        for q, r in H:\n\n            if l+r+3 <= 16:\n\n                if l+r+3 < L.get(p & q, 17):\n\n                    L[p & q] = l+r+3\n\n                    if l+r+3 < 16: heappush(Q, (l+r+3, p & q))\n\n                if l+r+3 < L.get(p ^ q, 17):\n\n                    L[p ^ q] = l+r+3\n\n                    if l+r+3 < 16: heappush(Q, (l+r+3, p ^ q))\n\n            else: break\n\n    if l < 7: H.append((p, l))\n\nprint(*(L[e & eval(s)] for s in open(0).read().replace(*\"-~\").replace(*\"*&\").replace(*\"1e\").split()[:-1]),sep='\\n')\n","code_v0_loc":15,"code_v1_loc":24,"code_v0_num_chars":639,"code_v1_num_chars":874,"code_v0_no_empty_lines":"a = 65280\nb = 61680\nc = 52428\nd = 43690\ne = 65535\nL = {el: 1 for el in [a, b, c, d, e, 0]}\nfor i in range(6):\n    R = sorted(L.items(), key=lambda x: x[1])\n    for p, l in R:\n        if l < 16:\n            L[p ^ e] = min(L.get(p ^ e, 16), l + 1)\n            if l + 3 < 16:\n                for q, r in R:\n                    if l + r + 3 <= 16:\n                        L[p & q] = min(L.get(p & q, 16), l + r + 3)\n                        L[p ^ q] = min(L.get(p ^ q, 16), l + r + 3)\n                    else:\n                        break\n        else:\n            break\nprint(\n    *(\n        L[e & eval(s)]\n        for s in open(0)\n        .read()\n        .replace(*\"-~\")\n        .replace(*\"*&\")\n        .replace(*\"1e\")\n        .split()[:-1]\n    ),\n    sep=\"\\n\"\n)\n","code_v1_no_empty_lines":"a = 65280\nb = 61680\nc = 52428\nd = 43690\ne = 65535\nfrom heapq import heappush, heappop\n\nbase = [a, b, c, d, e, 0]\nQ = [(1, el) for el in base]\nL = {el: 1 for el in base}\nH = []\nwhile Q:\n    l, p = heappop(Q)\n    if L[p] < l:\n        continue\n    if l + 1 < L.get(p ^ e, 17):\n        L[p ^ e] = l + 1\n        if l + 1 < 16:\n            heappush(Q, (l + 1, p ^ e))\n    if l + 3 < 16:\n        for q, r in H:\n            if l + r + 3 <= 16:\n                if l + r + 3 < L.get(p & q, 17):\n                    L[p & q] = l + r + 3\n                    if l + r + 3 < 16:\n                        heappush(Q, (l + r + 3, p & q))\n                if l + r + 3 < L.get(p ^ q, 17):\n                    L[p ^ q] = l + r + 3\n                    if l + r + 3 < 16:\n                        heappush(Q, (l + r + 3, p ^ q))\n            else:\n                break\n    if l < 7:\n        H.append((p, l))\nprint(\n    *(\n        L[e & eval(s)]\n        for s in open(0)\n        .read()\n        .replace(*\"-~\")\n        .replace(*\"*&\")\n        .replace(*\"1e\")\n        .split()[:-1]\n    ),\n    sep=\"\\n\"\n)\n","code_same":false,"relative_loc_diff_percent":37.5,"diff":["-L = {el: 1 for el in [a, b, c, d, e, 0]}","-for i in range(6):","-    R = sorted(L.items(), key=lambda x: x[1])","-    for p, l in R:","-        if l < 16:","-            L[p ^ e] = min(L.get(p ^ e, 16), l + 1)","-            if l + 3 < 16:","-                for q, r in R:","-                    if l + r + 3 <= 16:","-                        L[p & q] = min(L.get(p & q, 16), l + r + 3)","-                        L[p ^ q] = min(L.get(p ^ q, 16), l + r + 3)","-                    else:","-                        break","-        else:","-            break","+from heapq import heappush, heappop","+","+base = [a, b, c, d, e, 0]","+Q = [(1, el) for el in base]","+L = {el: 1 for el in base}","+H = []","+while Q:","+    l, p = heappop(Q)","+    if L[p] < l:","+        continue","+    if l + 1 < L.get(p ^ e, 17):","+        L[p ^ e] = l + 1","+        if l + 1 < 16:","+            heappush(Q, (l + 1, p ^ e))","+    if l + 3 < 16:","+        for q, r in H:","+            if l + r + 3 <= 16:","+                if l + r + 3 < L.get(p & q, 17):","+                    L[p & q] = l + r + 3","+                    if l + r + 3 < 16:","+                        heappush(Q, (l + r + 3, p & q))","+                if l + r + 3 < L.get(p ^ q, 17):","+                    L[p ^ q] = l + r + 3","+                    if l + r + 3 < 16:","+                        heappush(Q, (l + r + 3, p ^ q))","+            else:","+                break","+    if l < 7:","+        H.append((p, l))"],"diff_only_import_comment":false,"measured_runtime_v0":1.012686343,"measured_runtime_v1":0.2560091887,"runtime_lift":3.9556640457,"key":["s457180384","s699385465"]}
{"user_id":"u775681539","problem_id":"p02792","language":"python","submission_id_v0":"s313172456","submission_id_v1":"s731114638","cpu_time_v0":533,"cpu_time_v1":247,"memory_v0":3444,"memory_v1":40556,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":53.66,"input":"#python3\n\nfrom collections import defaultdict\n\nfrom collections import namedtuple\n\n\n\nP = namedtuple('P', ['front', 'end'])\n\n\n\ndef f(x):\n\n    return P(str(x)[0], str(x)[-1]) \n\n\n\ndef main():\n\n\n\n    n = int(eval(input()))\n\n    freq = defaultdict(int)\n\n\n\n    for i in range(1, n+1):\n\n        p = f(i)\n\n        freq[p]+=1\n\n\n\n\n\n    ans = 0\n\n    for i in range(1, n + 1):\n\n        p = f(i)\n\n        q = (p.end, p.front)\n\n        ans += freq[q]\n\n\n\n    print(ans)\n\n\n\nmain()","target":"import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nfrom collections import defaultdict\n\n\n\ndef f(x):\n\n    return (int(str(x)[0]), int(str(x)[-1])) \n\ndef main():\n\n    N = int(readline())\n\n    df = defaultdict(int)\n\n    for i in range(1, N+1):\n\n        df[f(i)] += 1\n\n    ans = 0\n\n    for i in range(1, 10):\n\n        for j in range(1, 10):\n\n            ans +=  df[(i, j)]*df[(j, i)]\n\n    print(ans)\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":28,"code_v1_loc":21,"code_v0_num_chars":458,"code_v1_num_chars":507,"code_v0_no_empty_lines":"# python3\nfrom collections import defaultdict\nfrom collections import namedtuple\n\nP = namedtuple(\"P\", [\"front\", \"end\"])\n\n\ndef f(x):\n    return P(str(x)[0], str(x)[-1])\n\n\ndef main():\n    n = int(eval(input()))\n    freq = defaultdict(int)\n    for i in range(1, n + 1):\n        p = f(i)\n        freq[p] += 1\n    ans = 0\n    for i in range(1, n + 1):\n        p = f(i)\n        q = (p.end, p.front)\n        ans += freq[q]\n    print(ans)\n\n\nmain()\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nfrom collections import defaultdict\n\n\ndef f(x):\n    return (int(str(x)[0]), int(str(x)[-1]))\n\n\ndef main():\n    N = int(readline())\n    df = defaultdict(int)\n    for i in range(1, N + 1):\n        df[f(i)] += 1\n    ans = 0\n    for i in range(1, 10):\n        for j in range(1, 10):\n            ans += df[(i, j)] * df[(j, i)]\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-# python3","+import sys","+","+read = sys.stdin.buffer.read","+readline = sys.stdin.buffer.readline","+readlines = sys.stdin.buffer.readlines","-from collections import namedtuple","-","-P = namedtuple(\"P\", [\"front\", \"end\"])","-    return P(str(x)[0], str(x)[-1])","+    return (int(str(x)[0]), int(str(x)[-1]))","-    n = int(eval(input()))","-    freq = defaultdict(int)","-    for i in range(1, n + 1):","-        p = f(i)","-        freq[p] += 1","+    N = int(readline())","+    df = defaultdict(int)","+    for i in range(1, N + 1):","+        df[f(i)] += 1","-    for i in range(1, n + 1):","-        p = f(i)","-        q = (p.end, p.front)","-        ans += freq[q]","+    for i in range(1, 10):","+        for j in range(1, 10):","+            ans += df[(i, j)] * df[(j, i)]","-main()","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.4672443939,"measured_runtime_v1":0.3355342689,"runtime_lift":1.3925385189,"key":["s313172456","s731114638"]}
{"user_id":"u893063840","problem_id":"p03038","language":"python","submission_id_v0":"s696312664","submission_id_v1":"s914180377","cpu_time_v0":588,"cpu_time_v1":493,"memory_v0":32888,"memory_v1":36036,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.16,"input":"n, m = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nbc = [list(map(int, input().split())) for _ in range(m)]\n\n\n\nbc.sort(key=lambda x: x[1], reverse=True)\n\na.sort()\n\n\n\ni = 0\n\nfor b, c in bc:\n\n    for _ in range(b):\n\n        if i < n and a[i] < c:\n\n            a[i] = c\n\n            i += 1\n\n        else:\n\n            break\n\n\n\nans = sum(a)\n\nprint(ans)\n","target":"n, m = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nbc = [list(map(int, input().split())) for _ in range(m)]\n\n\n\nbc.sort(reverse=True, key=lambda x: x[1])\n\n\n\nli = []\n\nl = 0\n\ni = 0\n\nwhile i < m and l < n:\n\n    b, c = bc[i]\n\n    li += [c] * b\n\n    i += 1\n\n    l += b\n\n\n\na += li\n\na.sort(reverse=True)\n\nans = sum(a[:n])\n\nprint(ans)\n","code_v0_loc":18,"code_v1_loc":19,"code_v0_num_chars":369,"code_v1_num_chars":346,"code_v0_no_empty_lines":"n, m = list(map(int, input().split()))\na = list(map(int, input().split()))\nbc = [list(map(int, input().split())) for _ in range(m)]\nbc.sort(key=lambda x: x[1], reverse=True)\na.sort()\ni = 0\nfor b, c in bc:\n    for _ in range(b):\n        if i < n and a[i] < c:\n            a[i] = c\n            i += 1\n        else:\n            break\nans = sum(a)\nprint(ans)\n","code_v1_no_empty_lines":"n, m = list(map(int, input().split()))\na = list(map(int, input().split()))\nbc = [list(map(int, input().split())) for _ in range(m)]\nbc.sort(reverse=True, key=lambda x: x[1])\nli = []\nl = 0\ni = 0\nwhile i < m and l < n:\n    b, c = bc[i]\n    li += [c] * b\n    i += 1\n    l += b\na += li\na.sort(reverse=True)\nans = sum(a[:n])\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":5.2631578947,"diff":["-bc.sort(key=lambda x: x[1], reverse=True)","-a.sort()","+bc.sort(reverse=True, key=lambda x: x[1])","+li = []","+l = 0","-for b, c in bc:","-    for _ in range(b):","-        if i < n and a[i] < c:","-            a[i] = c","-            i += 1","-        else:","-            break","-ans = sum(a)","+while i < m and l < n:","+    b, c = bc[i]","+    li += [c] * b","+    i += 1","+    l += b","+a += li","+a.sort(reverse=True)","+ans = sum(a[:n])"],"diff_only_import_comment":false,"measured_runtime_v0":0.2346956289,"measured_runtime_v1":0.006594183,"runtime_lift":35.5913127767,"key":["s696312664","s914180377"]}
{"user_id":"u475584892","problem_id":"p02837","language":"python","submission_id_v0":"s384273193","submission_id_v1":"s761835868","cpu_time_v0":294,"cpu_time_v1":210,"memory_v0":18424,"memory_v1":51184,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":28.57,"input":"import itertools\n\nimport numpy as np\n\n\n\nN = int(eval(input()))\n\nstl = []\n\nfor i in range(N):\n\n    a = int(eval(input()))\n\n    for _ in range(a):\n\n        x, y = list(map(int, input().split()))\n\n        stl.append((i, x-1, y))\n\ndl = np.array(list(itertools.product([0, 1], repeat=N)), np.bool)\n\nfor i, x, y in stl:\n\n    bl = (dl[:, i] == False) | (dl[:, x] == bool(y))\n\n    dl = dl[bl]\n\nres = dl.sum(axis=1).max()\n\nprint(res)\n","target":"import sys\n\nimport itertools\n\nimport collections\n\n\n\n\n\ndef solve():\n\n    readline = sys.stdin.buffer.readline\n\n    mod = 10 ** 9 + 7\n\n    n = int(readline())\n\n    xy = []\n\n    for i in range(n):\n\n        a = int(readline())\n\n        for j in range(a):\n\n            x, y = list(map(int, readline().split()))\n\n            xy.append([i, x-1, y])\n\n    ls = collections.deque([v for v in itertools.product([True, False], repeat=n)])\n\n    for i, x, y in xy:\n\n        for j in range(len(ls)):\n\n            lsv = ls.pop()\n\n            if not lsv[i] or lsv[x] == bool(y):\n\n                ls.appendleft(lsv)\n\n    t = 0\n\n    for i in range(len(ls)):\n\n        t = max(t, ls[i].count(True))\n\n    print(t)\n\n\n\n\n\nif __name__ == '__main__':\n\n    solve()\n","code_v0_loc":16,"code_v1_loc":29,"code_v0_num_chars":407,"code_v1_num_chars":737,"code_v0_no_empty_lines":"import itertools\nimport numpy as np\n\nN = int(eval(input()))\nstl = []\nfor i in range(N):\n    a = int(eval(input()))\n    for _ in range(a):\n        x, y = list(map(int, input().split()))\n        stl.append((i, x - 1, y))\ndl = np.array(list(itertools.product([0, 1], repeat=N)), np.bool)\nfor i, x, y in stl:\n    bl = (dl[:, i] == False) | (dl[:, x] == bool(y))\n    dl = dl[bl]\nres = dl.sum(axis=1).max()\nprint(res)\n","code_v1_no_empty_lines":"import sys\nimport itertools\nimport collections\n\n\ndef solve():\n    readline = sys.stdin.buffer.readline\n    mod = 10**9 + 7\n    n = int(readline())\n    xy = []\n    for i in range(n):\n        a = int(readline())\n        for j in range(a):\n            x, y = list(map(int, readline().split()))\n            xy.append([i, x - 1, y])\n    ls = collections.deque([v for v in itertools.product([True, False], repeat=n)])\n    for i, x, y in xy:\n        for j in range(len(ls)):\n            lsv = ls.pop()\n            if not lsv[i] or lsv[x] == bool(y):\n                ls.appendleft(lsv)\n    t = 0\n    for i in range(len(ls)):\n        t = max(t, ls[i].count(True))\n    print(t)\n\n\nif __name__ == \"__main__\":\n    solve()\n","code_same":false,"relative_loc_diff_percent":44.8275862069,"diff":["+import sys","-import numpy as np","+import collections","-N = int(eval(input()))","-stl = []","-for i in range(N):","-    a = int(eval(input()))","-    for _ in range(a):","-        x, y = list(map(int, input().split()))","-        stl.append((i, x - 1, y))","-dl = np.array(list(itertools.product([0, 1], repeat=N)), np.bool)","-for i, x, y in stl:","-    bl = (dl[:, i] == False) | (dl[:, x] == bool(y))","-    dl = dl[bl]","-res = dl.sum(axis=1).max()","-print(res)","+","+def solve():","+    readline = sys.stdin.buffer.readline","+    mod = 10**9 + 7","+    n = int(readline())","+    xy = []","+    for i in range(n):","+        a = int(readline())","+        for j in range(a):","+            x, y = list(map(int, readline().split()))","+            xy.append([i, x - 1, y])","+    ls = collections.deque([v for v in itertools.product([True, False], repeat=n)])","+    for i, x, y in xy:","+        for j in range(len(ls)):","+            lsv = ls.pop()","+            if not lsv[i] or lsv[x] == bool(y):","+                ls.appendleft(lsv)","+    t = 0","+    for i in range(len(ls)):","+        t = max(t, ls[i].count(True))","+    print(t)","+","+","+if __name__ == \"__main__\":","+    solve()"],"diff_only_import_comment":false,"measured_runtime_v0":1.8206197913,"measured_runtime_v1":0.3057051079,"runtime_lift":5.9554771706,"key":["s384273193","s761835868"]}
{"user_id":"u297574184","problem_id":"p02901","language":"python","submission_id_v0":"s249297018","submission_id_v1":"s597922218","cpu_time_v0":1727,"cpu_time_v1":694,"memory_v0":3440,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":59.81,"input":"INF = 10**10\n\n\n\nN, M = list(map(int, input().split()))\n\ncosts = []\n\nkeys = []\n\nfor _ in range(M):\n\n    A, B = list(map(int, input().split()))\n\n    cs = list(map(int, input().split()))\n\n    costs.append(A)\n\n    # \u9375\u30922\u9032\u6570\u5316\u3059\u308b\n\n    key = 0\n\n    for c in cs:\n\n        key |= 1<<(c-1)\n\n    keys.append(key)\n\n\n\n# [1]\u306e\u500b\u6570\u3067\u5206\u985e\u3059\u308b\n\nmaskss = [[] for _ in range(N+1)]\n\nnum1s = [0] * (2**N)\n\nfor S in range(2**N):\n\n    num = bin(S).count('1')\n\n    maskss[num].append(S)\n\n    num1s[S] = num\n\n\n\ndpAll = [INF] * (2**N)\n\nfor S in range(2**N):\n\n    for cost, key in zip(costs, keys):\n\n        if S & key == S:\n\n            if cost < dpAll[S]:\n\n                dpAll[S] = cost\n\n\n\ndp = [INF] * (2**N)\n\nfor S in range(2**N):\n\n    cost = dpAll[S]\n\n    num1 = num1s[S]\n\n    for k in range(1, (num1+1)\/\/2+1):\n\n        for mask in maskss[k]:\n\n            if mask & S == mask:\n\n                m2 = S^mask\n\n                c2 = dp[mask] + dp[m2]\n\n                if c2 < cost:\n\n                    cost = c2\n\n    dp[S] = cost\n\n\n\nif dp[2**N-1] == INF:\n\n    print((-1))\n\nelse:\n\n    print((dp[2**N-1]))\n","target":"import sys\n\ninput = sys.stdin.readline\n\n\n\ndef solve():\n\n    INF = 10**10\n\n\n\n    N, M = list(map(int, input().split()))\n\n    keys = []\n\n    costs = []\n\n    for _ in range(M):\n\n        a, b = list(map(int, input().split()))\n\n        costs.append(a)\n\n        cs = list(map(int, input().split()))\n\n        key = 0\n\n        for c in cs:\n\n            key |= 1<<(c-1)\n\n        keys.append(key)\n\n\n\n    dp = [INF] * (1<<N)\n\n    dp[0] = 0\n\n    for S in range(1<<N):\n\n        for key, cost in zip(keys, costs):\n\n            S2 = S | key\n\n            c2 = dp[S] + cost\n\n            if c2 < dp[S2]:\n\n                dp[S2] = c2\n\n\n\n    if dp[-1] == INF:\n\n        print((-1))\n\n    else:\n\n        print((dp[-1]))\n\n\n\n\n\nsolve()\n","code_v0_loc":47,"code_v1_loc":34,"code_v0_num_chars":1053,"code_v1_num_chars":694,"code_v0_no_empty_lines":"INF = 10**10\nN, M = list(map(int, input().split()))\ncosts = []\nkeys = []\nfor _ in range(M):\n    A, B = list(map(int, input().split()))\n    cs = list(map(int, input().split()))\n    costs.append(A)\n    # \u9375\u30922\u9032\u6570\u5316\u3059\u308b\n    key = 0\n    for c in cs:\n        key |= 1 << (c - 1)\n    keys.append(key)\n# [1]\u306e\u500b\u6570\u3067\u5206\u985e\u3059\u308b\nmaskss = [[] for _ in range(N + 1)]\nnum1s = [0] * (2**N)\nfor S in range(2**N):\n    num = bin(S).count(\"1\")\n    maskss[num].append(S)\n    num1s[S] = num\ndpAll = [INF] * (2**N)\nfor S in range(2**N):\n    for cost, key in zip(costs, keys):\n        if S & key == S:\n            if cost < dpAll[S]:\n                dpAll[S] = cost\ndp = [INF] * (2**N)\nfor S in range(2**N):\n    cost = dpAll[S]\n    num1 = num1s[S]\n    for k in range(1, (num1 + 1) \/\/ 2 + 1):\n        for mask in maskss[k]:\n            if mask & S == mask:\n                m2 = S ^ mask\n                c2 = dp[mask] + dp[m2]\n                if c2 < cost:\n                    cost = c2\n    dp[S] = cost\nif dp[2**N - 1] == INF:\n    print((-1))\nelse:\n    print((dp[2**N - 1]))\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\n\n\ndef solve():\n    INF = 10**10\n    N, M = list(map(int, input().split()))\n    keys = []\n    costs = []\n    for _ in range(M):\n        a, b = list(map(int, input().split()))\n        costs.append(a)\n        cs = list(map(int, input().split()))\n        key = 0\n        for c in cs:\n            key |= 1 << (c - 1)\n        keys.append(key)\n    dp = [INF] * (1 << N)\n    dp[0] = 0\n    for S in range(1 << N):\n        for key, cost in zip(keys, costs):\n            S2 = S | key\n            c2 = dp[S] + cost\n            if c2 < dp[S2]:\n                dp[S2] = c2\n    if dp[-1] == INF:\n        print((-1))\n    else:\n        print((dp[-1]))\n\n\nsolve()\n","code_same":false,"relative_loc_diff_percent":27.6595744681,"diff":["-INF = 10**10","-N, M = list(map(int, input().split()))","-costs = []","-keys = []","-for _ in range(M):","-    A, B = list(map(int, input().split()))","-    cs = list(map(int, input().split()))","-    costs.append(A)","-    # \u9375\u30922\u9032\u6570\u5316\u3059\u308b","-    key = 0","-    for c in cs:","-        key |= 1 << (c - 1)","-    keys.append(key)","-# [1]\u306e\u500b\u6570\u3067\u5206\u985e\u3059\u308b","-maskss = [[] for _ in range(N + 1)]","-num1s = [0] * (2**N)","-for S in range(2**N):","-    num = bin(S).count(\"1\")","-    maskss[num].append(S)","-    num1s[S] = num","-dpAll = [INF] * (2**N)","-for S in range(2**N):","-    for cost, key in zip(costs, keys):","-        if S & key == S:","-            if cost < dpAll[S]:","-                dpAll[S] = cost","-dp = [INF] * (2**N)","-for S in range(2**N):","-    cost = dpAll[S]","-    num1 = num1s[S]","-    for k in range(1, (num1 + 1) \/\/ 2 + 1):","-        for mask in maskss[k]:","-            if mask & S == mask:","-                m2 = S ^ mask","-                c2 = dp[mask] + dp[m2]","-                if c2 < cost:","-                    cost = c2","-    dp[S] = cost","-if dp[2**N - 1] == INF:","-    print((-1))","-else:","-    print((dp[2**N - 1]))","+import sys","+","+input = sys.stdin.readline","+","+","+def solve():","+    INF = 10**10","+    N, M = list(map(int, input().split()))","+    keys = []","+    costs = []","+    for _ in range(M):","+        a, b = list(map(int, input().split()))","+        costs.append(a)","+        cs = list(map(int, input().split()))","+        key = 0","+        for c in cs:","+            key |= 1 << (c - 1)","+        keys.append(key)","+    dp = [INF] * (1 << N)","+    dp[0] = 0","+    for S in range(1 << N):","+        for key, cost in zip(keys, costs):","+            S2 = S | key","+            c2 = dp[S] + cost","+            if c2 < dp[S2]:","+                dp[S2] = c2","+    if dp[-1] == INF:","+        print((-1))","+    else:","+        print((dp[-1]))","+","+","+solve()"],"diff_only_import_comment":false,"measured_runtime_v0":0.6225672393,"measured_runtime_v1":0.2088755162,"runtime_lift":2.9805658923,"key":["s249297018","s597922218"]}
{"user_id":"u703950586","problem_id":"p03575","language":"python","submission_id_v0":"s848540196","submission_id_v1":"s618059842","cpu_time_v0":457,"cpu_time_v1":162,"memory_v0":19432,"memory_v1":13148,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":64.55,"input":"import sys,queue,math,numpy as np,scipy as sc\n\nsys.setrecursionlimit(10**7)\n\ninput = sys.stdin.readline\n\nINF = 10**18\n\nMOD = 10**9 + 7\n\nLI = lambda : [int(x) for x in input().split()]\n\nN,M = LI()\n\nE = [LI() for _ in range(M)]\n\nans = 0\n\nfor i in range(M):\n\n    g = np.array([i for i in range(N+1)])\n\n\n\n    def root(x):\n\n        if g[x] != x:\n\n            g[x] = root(g[x])\n\n        return g[x]\n\n\n\n    for j in range(M):\n\n        if i != j: g[root(E[j][0])] = root(E[j][1])\n\n\n\n    ans += (root(E[i][0]) != root(E[i][1]))\n\n\n\nprint (ans)","target":"import sys,queue,math,numpy as np,scipy as sc\n\nsys.setrecursionlimit(10**7)\n\ninput = sys.stdin.readline\n\nINF = 10**18\n\nMOD = 10**9 + 7\n\nLI = lambda : [int(x) for x in input().split()]\n\nN,M = LI()\n\nE = [LI() for _ in range(M)]\n\nans = 0\n\nfor i in range(M):\n\n    g = [i for i in range(N+1)]\n\n\n\n    def root(x):\n\n        if g[x] != x:\n\n            g[x] = root(g[x])\n\n        return g[x]\n\n\n\n    for j in range(M):\n\n        if i != j: g[root(E[j][0])] = root(E[j][1])\n\n\n\n    ans += (root(E[i][0]) != root(E[i][1]))\n\n\n\nprint (ans)","code_v0_loc":23,"code_v1_loc":23,"code_v0_num_chars":533,"code_v1_num_chars":523,"code_v0_no_empty_lines":"import sys, queue, math, numpy as np, scipy as sc\n\nsys.setrecursionlimit(10**7)\ninput = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\nLI = lambda: [int(x) for x in input().split()]\nN, M = LI()\nE = [LI() for _ in range(M)]\nans = 0\nfor i in range(M):\n    g = np.array([i for i in range(N + 1)])\n\n    def root(x):\n        if g[x] != x:\n            g[x] = root(g[x])\n        return g[x]\n\n    for j in range(M):\n        if i != j:\n            g[root(E[j][0])] = root(E[j][1])\n    ans += root(E[i][0]) != root(E[i][1])\nprint(ans)\n","code_v1_no_empty_lines":"import sys, queue, math, numpy as np, scipy as sc\n\nsys.setrecursionlimit(10**7)\ninput = sys.stdin.readline\nINF = 10**18\nMOD = 10**9 + 7\nLI = lambda: [int(x) for x in input().split()]\nN, M = LI()\nE = [LI() for _ in range(M)]\nans = 0\nfor i in range(M):\n    g = [i for i in range(N + 1)]\n\n    def root(x):\n        if g[x] != x:\n            g[x] = root(g[x])\n        return g[x]\n\n    for j in range(M):\n        if i != j:\n            g[root(E[j][0])] = root(E[j][1])\n    ans += root(E[i][0]) != root(E[i][1])\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    g = np.array([i for i in range(N + 1)])","+    g = [i for i in range(N + 1)]"],"diff_only_import_comment":false,"measured_runtime_v0":0.8879079869,"measured_runtime_v1":0.2002263706,"runtime_lift":4.4345207092,"key":["s848540196","s618059842"]}
{"user_id":"u078042885","problem_id":"p01138","language":"python","submission_id_v0":"s367659771","submission_id_v1":"s546819347","cpu_time_v0":8280,"cpu_time_v1":5620,"memory_v0":11712,"memory_v1":11664,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":32.13,"input":"def f(s):\n\n    s=list(map(int,s.split(':')))\n\n    return (s[0]*60+s[1])*60+s[2]\n\na=86401\n\nwhile 1:\n\n    t=[0]*a\n\n    n=int(eval(input()))\n\n    if n==0:break\n\n    for _ in range(n):\n\n        b,c=input().split()\n\n        t[f(b)]+=1;t[f(c)]-=1\n\n    d=0\n\n    for i in range(1,a):\n\n        t[i]+=t[i-1]\n\n        d=max(d,t[i])\n\n    print(d)","target":"def f(s):\n\n    return (s[0]*60+s[1])*60+s[2]\n\na=86400\n\nwhile 1:\n\n    t=[0]*a\n\n    n=int(eval(input()))\n\n    if n==0:break\n\n    for _ in range(n):\n\n        b,c = [list(map(int,x.split(':'))) for x in input().split()]\n\n        t[f(b)]+=1;t[f(c)]-=1\n\n    d=0\n\n    for i in range(1,a):\n\n        t[i]+=t[i-1]\n\n        if d<t[i]:d=t[i]\n\n    print(d)","code_v0_loc":16,"code_v1_loc":15,"code_v0_num_chars":328,"code_v1_num_chars":340,"code_v0_no_empty_lines":"def f(s):\n    s = list(map(int, s.split(\":\")))\n    return (s[0] * 60 + s[1]) * 60 + s[2]\n\n\na = 86401\nwhile 1:\n    t = [0] * a\n    n = int(eval(input()))\n    if n == 0:\n        break\n    for _ in range(n):\n        b, c = input().split()\n        t[f(b)] += 1\n        t[f(c)] -= 1\n    d = 0\n    for i in range(1, a):\n        t[i] += t[i - 1]\n        d = max(d, t[i])\n    print(d)\n","code_v1_no_empty_lines":"def f(s):\n    return (s[0] * 60 + s[1]) * 60 + s[2]\n\n\na = 86400\nwhile 1:\n    t = [0] * a\n    n = int(eval(input()))\n    if n == 0:\n        break\n    for _ in range(n):\n        b, c = [list(map(int, x.split(\":\"))) for x in input().split()]\n        t[f(b)] += 1\n        t[f(c)] -= 1\n    d = 0\n    for i in range(1, a):\n        t[i] += t[i - 1]\n        if d < t[i]:\n            d = t[i]\n    print(d)\n","code_same":false,"relative_loc_diff_percent":6.25,"diff":["-    s = list(map(int, s.split(\":\")))","-a = 86401","+a = 86400","-        b, c = input().split()","+        b, c = [list(map(int, x.split(\":\"))) for x in input().split()]","-        d = max(d, t[i])","+        if d < t[i]:","+            d = t[i]"],"diff_only_import_comment":false,"measured_runtime_v0":0.6852001767,"measured_runtime_v1":0.5272243953,"runtime_lift":1.2996367066,"key":["s367659771","s546819347"]}
{"user_id":"u562935282","problem_id":"p03436","language":"python","submission_id_v0":"s361663353","submission_id_v1":"s061031658","cpu_time_v0":30,"cpu_time_v1":25,"memory_v0":3316,"memory_v1":3316,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.67,"input":"from collections import deque\n\n\n\nINF = float('inf')\n\n\n\ndr = (-1, 0, 0, 1)\n\ndc = (0, -1, 1, 0)\n\n\n\nH, W = list(map(int, input().split()))\n\n\n\ns = []\n\ntotal_white_count = 0\n\nfor _ in range(H):\n\n    t = eval(input())\n\n    s.append(t)\n\n    total_white_count += t.count('.')\n\np = [[INF for _ in range(W)] for _ in range(H)]\n\n\n\nans = -1\n\n\n\ndq = deque()\n\ndq.append((0, 0, 1))\n\nwhile dq:\n\n    r, c, d = dq.popleft() # \u76f4\u3057\u305f\n\n\n\n    nd = d + 1\n\n    for i in range(4):\n\n        nr = r + dr[i]\n\n        nc = c + dc[i]\n\n        if not (0 <= nr < H and 0 <= nc < W): continue\n\n        if s[nr][nc] == '#' : continue\n\n        if p[nr][nc] <= nd: continue\n\n        p[nr][nc] = nd\n\n        if nr == H - 1 and nc == W - 1:\n\n            ans = total_white_count - nd\n\n            break\n\n        dq.append((nr, nc, nd))\n\n    else:\n\n        continue\n\n    break\n\n\n\nprint(ans)\n","target":"def main():\n\n    from collections import deque\n\n    import sys\n\n\n\n    input = sys.stdin.readline\n\n\n\n    h, w = list(map(int, input().split()))\n\n    s = [eval(input()) for _ in range(h)]\n\n\n\n    bk = 0\n\n    for row in s:\n\n        bk += row.count('#')\n\n\n\n    def coods(r, c):\n\n        if r > 0: yield r - 1, c\n\n        if r < h - 1: yield r + 1, c\n\n        if c > 0: yield r, c - 1\n\n        if c < w - 1: yield r, c + 1\n\n\n\n    q = deque()\n\n    q.append((0, 0))\n\n    count = [[-1] * w for _ in range(h)]\n\n    count[0][0] = 1\n\n    while q:\n\n        r, c = q.popleft()\n\n        k = count[r][c]\n\n        for nr, nc in coods(r, c):\n\n            nchar = s[nr][nc]\n\n            if nchar == '#': continue\n\n            if count[nr][nc] != -1: continue\n\n            count[nr][nc] = k + 1\n\n            if (nr, nc) == (h - 1, w - 1):\n\n                print((h * w - (k + 1) - bk))\n\n                return\n\n            q.append((nr, nc))\n\n    print((-1))\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":41,"code_v1_loc":40,"code_v0_num_chars":837,"code_v1_num_chars":967,"code_v0_no_empty_lines":"from collections import deque\n\nINF = float(\"inf\")\ndr = (-1, 0, 0, 1)\ndc = (0, -1, 1, 0)\nH, W = list(map(int, input().split()))\ns = []\ntotal_white_count = 0\nfor _ in range(H):\n    t = eval(input())\n    s.append(t)\n    total_white_count += t.count(\".\")\np = [[INF for _ in range(W)] for _ in range(H)]\nans = -1\ndq = deque()\ndq.append((0, 0, 1))\nwhile dq:\n    r, c, d = dq.popleft()  # \u76f4\u3057\u305f\n    nd = d + 1\n    for i in range(4):\n        nr = r + dr[i]\n        nc = c + dc[i]\n        if not (0 <= nr < H and 0 <= nc < W):\n            continue\n        if s[nr][nc] == \"#\":\n            continue\n        if p[nr][nc] <= nd:\n            continue\n        p[nr][nc] = nd\n        if nr == H - 1 and nc == W - 1:\n            ans = total_white_count - nd\n            break\n        dq.append((nr, nc, nd))\n    else:\n        continue\n    break\nprint(ans)\n","code_v1_no_empty_lines":"def main():\n    from collections import deque\n    import sys\n\n    input = sys.stdin.readline\n    h, w = list(map(int, input().split()))\n    s = [eval(input()) for _ in range(h)]\n    bk = 0\n    for row in s:\n        bk += row.count(\"#\")\n\n    def coods(r, c):\n        if r > 0:\n            yield r - 1, c\n        if r < h - 1:\n            yield r + 1, c\n        if c > 0:\n            yield r, c - 1\n        if c < w - 1:\n            yield r, c + 1\n\n    q = deque()\n    q.append((0, 0))\n    count = [[-1] * w for _ in range(h)]\n    count[0][0] = 1\n    while q:\n        r, c = q.popleft()\n        k = count[r][c]\n        for nr, nc in coods(r, c):\n            nchar = s[nr][nc]\n            if nchar == \"#\":\n                continue\n            if count[nr][nc] != -1:\n                continue\n            count[nr][nc] = k + 1\n            if (nr, nc) == (h - 1, w - 1):\n                print((h * w - (k + 1) - bk))\n                return\n            q.append((nr, nc))\n    print((-1))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":2.4390243902,"diff":["-from collections import deque","+def main():","+    from collections import deque","+    import sys","-INF = float(\"inf\")","-dr = (-1, 0, 0, 1)","-dc = (0, -1, 1, 0)","-H, W = list(map(int, input().split()))","-s = []","-total_white_count = 0","-for _ in range(H):","-    t = eval(input())","-    s.append(t)","-    total_white_count += t.count(\".\")","-p = [[INF for _ in range(W)] for _ in range(H)]","-ans = -1","-dq = deque()","-dq.append((0, 0, 1))","-while dq:","-    r, c, d = dq.popleft()  # \u76f4\u3057\u305f","-    nd = d + 1","-    for i in range(4):","-        nr = r + dr[i]","-        nc = c + dc[i]","-        if not (0 <= nr < H and 0 <= nc < W):","-            continue","-        if s[nr][nc] == \"#\":","-            continue","-        if p[nr][nc] <= nd:","-            continue","-        p[nr][nc] = nd","-        if nr == H - 1 and nc == W - 1:","-            ans = total_white_count - nd","-            break","-        dq.append((nr, nc, nd))","-    else:","-        continue","-    break","-print(ans)","+    input = sys.stdin.readline","+    h, w = list(map(int, input().split()))","+    s = [eval(input()) for _ in range(h)]","+    bk = 0","+    for row in s:","+        bk += row.count(\"#\")","+","+    def coods(r, c):","+        if r > 0:","+            yield r - 1, c","+        if r < h - 1:","+            yield r + 1, c","+        if c > 0:","+            yield r, c - 1","+        if c < w - 1:","+            yield r, c + 1","+","+    q = deque()","+    q.append((0, 0))","+    count = [[-1] * w for _ in range(h)]","+    count[0][0] = 1","+    while q:","+        r, c = q.popleft()","+        k = count[r][c]","+        for nr, nc in coods(r, c):","+            nchar = s[nr][nc]","+            if nchar == \"#\":","+                continue","+            if count[nr][nc] != -1:","+                continue","+            count[nr][nc] = k + 1","+            if (nr, nc) == (h - 1, w - 1):","+                print((h * w - (k + 1) - bk))","+                return","+            q.append((nr, nc))","+    print((-1))","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.172286804,"measured_runtime_v1":0.0058592412,"runtime_lift":29.4042857085,"key":["s361663353","s061031658"]}
{"user_id":"u189326411","problem_id":"p03796","language":"python","submission_id_v0":"s862494830","submission_id_v1":"s415254610","cpu_time_v0":230,"cpu_time_v1":37,"memory_v0":4020,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":83.91,"input":"import math\n\nn = int(eval(input()))\n\nprint((math.factorial(n)%(10**9+7)))\n","target":"n = int(eval(input()))\n\nmod = 10**9 + 7\n\n\n\npow = 1\n\nfor i in range(n):\n\n    pow = pow*(i+1)%mod\n\n\n\nprint(pow)\n","code_v0_loc":3,"code_v1_loc":8,"code_v0_num_chars":66,"code_v1_num_chars":104,"code_v0_no_empty_lines":"import math\n\nn = int(eval(input()))\nprint((math.factorial(n) % (10**9 + 7)))\n","code_v1_no_empty_lines":"n = int(eval(input()))\nmod = 10**9 + 7\npow = 1\nfor i in range(n):\n    pow = pow * (i + 1) % mod\nprint(pow)\n","code_same":false,"relative_loc_diff_percent":62.5,"diff":["-import math","-","-print((math.factorial(n) % (10**9 + 7)))","+mod = 10**9 + 7","+pow = 1","+for i in range(n):","+    pow = pow * (i + 1) % mod","+print(pow)"],"diff_only_import_comment":false,"measured_runtime_v0":0.5275577738,"measured_runtime_v1":0.2526761317,"runtime_lift":2.0878813135,"key":["s862494830","s415254610"]}
{"user_id":"u579699847","problem_id":"p02982","language":"python","submission_id_v0":"s394430512","submission_id_v1":"s562354145","cpu_time_v0":152,"cpu_time_v1":18,"memory_v0":12500,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.16,"input":"import numpy\n\nN, D = list(map(int, input().split()))\n\nlistx = []\n\ncount = 0\n\nfor i in range(N):\n\n    x = list(map(int, input().split()))\n\n    listx.append(x)\n\n\n\nfor j in range(0, N):\n\n    for k in range(j+1,N):\n\n        a = numpy.array(listx[j])\n\n        b = numpy.array(listx[k])\n\n        u = b - a\n\n        c = float(numpy.linalg.norm(u))\n\n        if c.is_integer() :\n\n            count += 1\n\nprint(count)","target":"def LI(): return list(map(int,input().split()))\n\nN,D = LI()\n\nX = [LI() for _ in range(N)]\n\nans = 0\n\nfor i in range(N):\n\n    for j in range(i+1,N):\n\n        temp = 0\n\n        for k in range(D):\n\n            temp += (X[j][k]-X[i][k])**2\n\n        if temp **0.5%1==0:\n\n            ans += 1\n\nprint(ans)","code_v0_loc":17,"code_v1_loc":12,"code_v0_num_chars":401,"code_v1_num_chars":297,"code_v0_no_empty_lines":"import numpy\n\nN, D = list(map(int, input().split()))\nlistx = []\ncount = 0\nfor i in range(N):\n    x = list(map(int, input().split()))\n    listx.append(x)\nfor j in range(0, N):\n    for k in range(j + 1, N):\n        a = numpy.array(listx[j])\n        b = numpy.array(listx[k])\n        u = b - a\n        c = float(numpy.linalg.norm(u))\n        if c.is_integer():\n            count += 1\nprint(count)\n","code_v1_no_empty_lines":"def LI():\n    return list(map(int, input().split()))\n\n\nN, D = LI()\nX = [LI() for _ in range(N)]\nans = 0\nfor i in range(N):\n    for j in range(i + 1, N):\n        temp = 0\n        for k in range(D):\n            temp += (X[j][k] - X[i][k]) ** 2\n        if temp**0.5 % 1 == 0:\n            ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":29.4117647059,"diff":["-import numpy","+def LI():","+    return list(map(int, input().split()))","-N, D = list(map(int, input().split()))","-listx = []","-count = 0","+","+N, D = LI()","+X = [LI() for _ in range(N)]","+ans = 0","-    x = list(map(int, input().split()))","-    listx.append(x)","-for j in range(0, N):","-    for k in range(j + 1, N):","-        a = numpy.array(listx[j])","-        b = numpy.array(listx[k])","-        u = b - a","-        c = float(numpy.linalg.norm(u))","-        if c.is_integer():","-            count += 1","-print(count)","+    for j in range(i + 1, N):","+        temp = 0","+        for k in range(D):","+            temp += (X[j][k] - X[i][k]) ** 2","+        if temp**0.5 % 1 == 0:","+            ans += 1","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.65457302,"measured_runtime_v1":0.2349083569,"runtime_lift":7.0434830064,"key":["s394430512","s562354145"]}
{"user_id":"u362599643","problem_id":"p02690","language":"python","submission_id_v0":"s891055347","submission_id_v1":"s676876891","cpu_time_v0":67,"cpu_time_v1":47,"memory_v0":9088,"memory_v1":9152,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":29.85,"input":"X=int(eval(input()))\n\nfor i in range(-200,201):\n\n    for j in range(-200,201):\n\n        if i**5-j**5==X:\n\n            print((i,j))\n\n            exit()","target":"X=int(eval(input()))\n\nfor i in range(-150,151):\n\n    for j in range(-150,151):\n\n        if i**5-j**5==X:\n\n            print((i,j))\n\n            exit()","code_v0_loc":6,"code_v1_loc":6,"code_v0_num_chars":142,"code_v1_num_chars":142,"code_v0_no_empty_lines":"X = int(eval(input()))\nfor i in range(-200, 201):\n    for j in range(-200, 201):\n        if i**5 - j**5 == X:\n            print((i, j))\n            exit()\n","code_v1_no_empty_lines":"X = int(eval(input()))\nfor i in range(-150, 151):\n    for j in range(-150, 151):\n        if i**5 - j**5 == X:\n            print((i, j))\n            exit()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-for i in range(-200, 201):","-    for j in range(-200, 201):","+for i in range(-150, 151):","+    for j in range(-150, 151):"],"diff_only_import_comment":false,"measured_runtime_v0":0.6261565427,"measured_runtime_v1":0.3813971301,"runtime_lift":1.6417442431,"key":["s891055347","s676876891"]}
{"user_id":"u982591663","problem_id":"p03107","language":"python","submission_id_v0":"s749413264","submission_id_v1":"s028114766","cpu_time_v0":22,"cpu_time_v1":19,"memory_v0":3956,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.64,"input":"S = list(eval(input()))\n\nnum_one = S.count(\"1\")\n\nnum_zero = S.count(\"0\")\n\nans = min(num_one, num_zero) *2\n\nprint(ans)\n","target":"S = eval(input())\n\n\n\nans = min(S.count(\"0\"), S.count(\"1\")) * 2\n\nprint(ans)\n","code_v0_loc":5,"code_v1_loc":4,"code_v0_num_chars":112,"code_v1_num_chars":69,"code_v0_no_empty_lines":"S = list(eval(input()))\nnum_one = S.count(\"1\")\nnum_zero = S.count(\"0\")\nans = min(num_one, num_zero) * 2\nprint(ans)\n","code_v1_no_empty_lines":"S = eval(input())\nans = min(S.count(\"0\"), S.count(\"1\")) * 2\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["-S = list(eval(input()))","-num_one = S.count(\"1\")","-num_zero = S.count(\"0\")","-ans = min(num_one, num_zero) * 2","+S = eval(input())","+ans = min(S.count(\"0\"), S.count(\"1\")) * 2"],"diff_only_import_comment":false,"measured_runtime_v0":0.2118026633,"measured_runtime_v1":0.0063807995,"runtime_lift":33.1937497698,"key":["s749413264","s028114766"]}
{"user_id":"u624475441","problem_id":"p03457","language":"python","submission_id_v0":"s302891502","submission_id_v1":"s171916715","cpu_time_v0":228,"cpu_time_v1":146,"memory_v0":28148,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":35.96,"input":"import sys\n\ncan = True; eval(input())\n\ne = [[0, 0, 0]] + [list(map(int, e.split())) for e in sys.stdin]\n\nfor a, b in zip(e[1:], e):\n\n    t = a[0] - b[0] - abs(a[1] - b[1]) - abs(a[2] - b[2])\n\n    if t < 0 or t % 2 == 1: can = False; break\n\nprint((['No', 'Yes'][can]))","target":"import sys\n\nans = 'Yes'; eval(input())\n\nfor e in sys.stdin:\n\n    t, x, y = list(map(int, e.split()))\n\n    t = t - x - y\n\n    if t < 0 or t % 2 == 1: ans = 'No'; break\n\nprint(ans)","code_v0_loc":7,"code_v1_loc":7,"code_v0_num_chars":259,"code_v1_num_chars":166,"code_v0_no_empty_lines":"import sys\n\ncan = True\neval(input())\ne = [[0, 0, 0]] + [list(map(int, e.split())) for e in sys.stdin]\nfor a, b in zip(e[1:], e):\n    t = a[0] - b[0] - abs(a[1] - b[1]) - abs(a[2] - b[2])\n    if t < 0 or t % 2 == 1:\n        can = False\n        break\nprint(([\"No\", \"Yes\"][can]))\n","code_v1_no_empty_lines":"import sys\n\nans = \"Yes\"\neval(input())\nfor e in sys.stdin:\n    t, x, y = list(map(int, e.split()))\n    t = t - x - y\n    if t < 0 or t % 2 == 1:\n        ans = \"No\"\n        break\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-can = True","+ans = \"Yes\"","-e = [[0, 0, 0]] + [list(map(int, e.split())) for e in sys.stdin]","-for a, b in zip(e[1:], e):","-    t = a[0] - b[0] - abs(a[1] - b[1]) - abs(a[2] - b[2])","+for e in sys.stdin:","+    t, x, y = list(map(int, e.split()))","+    t = t - x - y","-        can = False","+        ans = \"No\"","-print(([\"No\", \"Yes\"][can]))","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2223628902,"measured_runtime_v1":0.1447919474,"runtime_lift":1.5357407251,"key":["s302891502","s171916715"]}
{"user_id":"u936985471","problem_id":"p02901","language":"python","submission_id_v0":"s462370890","submission_id_v1":"s446448975","cpu_time_v0":1278,"cpu_time_v1":790,"memory_v0":9056,"memory_v1":9192,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":38.18,"input":"import sys\n\nreadline = sys.stdin.readline\n\n\n\nN,M = list(map(int,readline().split()))\n\nINF = 10 ** 10\n\ndp = [INF] * (2 ** N)\n\ndp[0] = 0\n\n\n\nfor i in range(M):\n\n  a,b = list(map(int,readline().split()))\n\n  c = list(map(int,readline().split()))\n\n  key = 0\n\n  for j in range(len(c)):\n\n    key += (1 << (c[j] - 1))\n\n  for j in range(len(dp)):\n\n    if dp[j] == INF:\n\n      continue\n\n    if j | key == j:\n\n      continue\n\n    dp[j | key] = min(dp[j | key], dp[j] + a)\n\n\n\nif dp[-1] == INF:\n\n  print((-1))\n\nelse:\n\n  print((dp[-1]))","target":"import sys\n\nreadline = sys.stdin.readline\n\n\n\nN,M = list(map(int,readline().split()))\n\nINF = 10 ** 10\n\ndp = [INF] * (2 ** N)\n\ndp[0] = 0\n\n\n\nfor i in range(M):\n\n  a,b = list(map(int,readline().split()))\n\n  c = list(map(int,readline().split()))\n\n  key = 0\n\n  for j in range(len(c)):\n\n    key += (1 << (c[j] - 1))\n\n  for j in range(len(dp)):\n\n    if dp[j] == INF:\n\n      continue\n\n    if j | key == j:\n\n      continue\n\n    if dp[j | key] > dp[j] + a:\n\n      dp[j | key] = dp[j] + a\n\n\n\nif dp[-1] == INF:\n\n  print((-1))\n\nelse:\n\n  print((dp[-1]))","code_v0_loc":25,"code_v1_loc":26,"code_v0_num_chars":505,"code_v1_num_chars":522,"code_v0_no_empty_lines":"import sys\n\nreadline = sys.stdin.readline\nN, M = list(map(int, readline().split()))\nINF = 10**10\ndp = [INF] * (2**N)\ndp[0] = 0\nfor i in range(M):\n    a, b = list(map(int, readline().split()))\n    c = list(map(int, readline().split()))\n    key = 0\n    for j in range(len(c)):\n        key += 1 << (c[j] - 1)\n    for j in range(len(dp)):\n        if dp[j] == INF:\n            continue\n        if j | key == j:\n            continue\n        dp[j | key] = min(dp[j | key], dp[j] + a)\nif dp[-1] == INF:\n    print((-1))\nelse:\n    print((dp[-1]))\n","code_v1_no_empty_lines":"import sys\n\nreadline = sys.stdin.readline\nN, M = list(map(int, readline().split()))\nINF = 10**10\ndp = [INF] * (2**N)\ndp[0] = 0\nfor i in range(M):\n    a, b = list(map(int, readline().split()))\n    c = list(map(int, readline().split()))\n    key = 0\n    for j in range(len(c)):\n        key += 1 << (c[j] - 1)\n    for j in range(len(dp)):\n        if dp[j] == INF:\n            continue\n        if j | key == j:\n            continue\n        if dp[j | key] > dp[j] + a:\n            dp[j | key] = dp[j] + a\nif dp[-1] == INF:\n    print((-1))\nelse:\n    print((dp[-1]))\n","code_same":false,"relative_loc_diff_percent":3.8461538462,"diff":["-        dp[j | key] = min(dp[j | key], dp[j] + a)","+        if dp[j | key] > dp[j] + a:","+            dp[j | key] = dp[j] + a"],"diff_only_import_comment":false,"measured_runtime_v0":0.2747366824,"measured_runtime_v1":0.0058527424,"runtime_lift":46.941529559,"key":["s462370890","s446448975"]}
{"user_id":"u837673618","problem_id":"p02721","language":"python","submission_id_v0":"s949081681","submission_id_v1":"s434725940","cpu_time_v0":326,"cpu_time_v1":177,"memory_v0":12688,"memory_v1":12576,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":45.71,"input":"N, K, C = list(map(int, input().split()))\n\nS = eval(input())\n\n\n\nlatest = [None]*K\n\ni = len(S)+C\n\nfor j in range(K-1, -1, -1):\n\n  i = S.rindex(\"o\", 0, i-C)\n\n  latest[j] = i\n\n\n\nif i<=C or \"o\" not in S[:i-C]:\n\n  i = -C-1\n\n  for j in latest:\n\n    i = S.index(\"o\", i+C+1)\n\n    if i == j:\n\n      print((i+1))\n","target":"def solve():\n\n  N, K, C = list(map(int, input().split()))\n\n  workable = [i for i, s in enumerate(eval(input())) if s==\"o\"]\n\n  if len(workable) == K:\n\n    return workable\n\n    \n\n  prev = workable[-1]\n\n  latest = {prev}\n\n  i = len(workable)-1\n\n  while i > 0:\n\n    i -= 1\n\n    if prev - workable[i] > C:\n\n      latest.add(workable[i])\n\n      prev = workable[i]\n\n      if len(latest) > K:\n\n        return []\n\n  must = []\n\n  i = -1\n\n  prev = -C-1\n\n  while i < len(workable)-1:\n\n    i += 1\n\n    if workable[i] - prev > C:\n\n      if workable[i] in latest:\n\n        must.append(workable[i])\n\n      prev = workable[i]\n\n  return must\n\n\n\nfor i in solve():\n\n  print((i+1))","code_v0_loc":15,"code_v1_loc":29,"code_v0_num_chars":289,"code_v1_num_chars":646,"code_v0_no_empty_lines":"N, K, C = list(map(int, input().split()))\nS = eval(input())\nlatest = [None] * K\ni = len(S) + C\nfor j in range(K - 1, -1, -1):\n    i = S.rindex(\"o\", 0, i - C)\n    latest[j] = i\nif i <= C or \"o\" not in S[: i - C]:\n    i = -C - 1\n    for j in latest:\n        i = S.index(\"o\", i + C + 1)\n        if i == j:\n            print((i + 1))\n","code_v1_no_empty_lines":"def solve():\n    N, K, C = list(map(int, input().split()))\n    workable = [i for i, s in enumerate(eval(input())) if s == \"o\"]\n    if len(workable) == K:\n        return workable\n    prev = workable[-1]\n    latest = {prev}\n    i = len(workable) - 1\n    while i > 0:\n        i -= 1\n        if prev - workable[i] > C:\n            latest.add(workable[i])\n            prev = workable[i]\n            if len(latest) > K:\n                return []\n    must = []\n    i = -1\n    prev = -C - 1\n    while i < len(workable) - 1:\n        i += 1\n        if workable[i] - prev > C:\n            if workable[i] in latest:\n                must.append(workable[i])\n            prev = workable[i]\n    return must\n\n\nfor i in solve():\n    print((i + 1))\n","code_same":false,"relative_loc_diff_percent":48.275862069,"diff":["-N, K, C = list(map(int, input().split()))","-S = eval(input())","-latest = [None] * K","-i = len(S) + C","-for j in range(K - 1, -1, -1):","-    i = S.rindex(\"o\", 0, i - C)","-    latest[j] = i","-if i <= C or \"o\" not in S[: i - C]:","-    i = -C - 1","-    for j in latest:","-        i = S.index(\"o\", i + C + 1)","-        if i == j:","-            print((i + 1))","+def solve():","+    N, K, C = list(map(int, input().split()))","+    workable = [i for i, s in enumerate(eval(input())) if s == \"o\"]","+    if len(workable) == K:","+        return workable","+    prev = workable[-1]","+    latest = {prev}","+    i = len(workable) - 1","+    while i > 0:","+        i -= 1","+        if prev - workable[i] > C:","+            latest.add(workable[i])","+            prev = workable[i]","+            if len(latest) > K:","+                return []","+    must = []","+    i = -1","+    prev = -C - 1","+    while i < len(workable) - 1:","+        i += 1","+        if workable[i] - prev > C:","+            if workable[i] in latest:","+                must.append(workable[i])","+            prev = workable[i]","+    return must","+","+","+for i in solve():","+    print((i + 1))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3840038183,"measured_runtime_v1":0.2943901448,"runtime_lift":1.3044044613,"key":["s949081681","s434725940"]}
{"user_id":"u102461423","problem_id":"p03747","language":"python","submission_id_v0":"s216230376","submission_id_v1":"s376589884","cpu_time_v0":268,"cpu_time_v1":169,"memory_v0":34272,"memory_v1":41876,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":36.94,"input":"import sys\n\ninput = sys.stdin.readline\n\n\n\nN,L,T = list(map(int,input().split()))\n\nXW = [[int(x) for x in input().split()] for _ in range(N)]\n\n\n\nX,W = list(zip(*XW))\n\n\n\nDX = [1 if w == 1 else -1 for w in W]\n\n\n\nY = [(x+dx*T)%L for x,dx in zip(X,DX)]\n\ny0 = Y[0]\n\nY.sort()\n\n\n\n# \u756a\u53f71\u304c\u3059\u308c\u9055\u308f\u305a\u9032\u3093\u3060\u5834\u6240\u306b\u76f8\u5f53\u3059\u308b\u30a2\u30ea\u306e\u756a\u53f7\n\n# \u3059\u308c\u9055\u3046\u305f\u3073\u306b1\u5897\u3048\u308b\uff08W1=1\uff09 or 1\u6e1b\u308b\uff08W1=-1\uff09\n\n# T\u79d2\u3061\u3087\u3046\u3069\u3082\u3059\u308c\u9055\u3044\u7d42\u308f\u3063\u305f\u3068\u8003\u3048\u308b\n\n\n\nx = 0\n\nx0,dx0 = X[0],DX[0]\n\nfor y,dy in zip(X[1:],DX[1:]):\n\n    if dx0 == dy:\n\n        continue\n\n    if dx0 == 1 and dy == -1:\n\n        # \u6b63\u306e\u5411\u304d\u306b\u8ffd\u3044\u8d8a\u3059\u306e\u3067\u756a\u53f7\u304c\u3072\u3068\u3064\u5897\u3048\u308b\n\n        x += (2*T-(y-x0)-1)\/\/L + 1\n\n    if dx0 == -1 and dy == 1:\n\n        x -= (2*T-(L+x0-y))\/\/L + 1\n\nx %= N\n\n\n\ni = Y.index(y0)\n\n\n\nY += Y\n\n\n\nanswer = [None] * N\n\nanswer[x:N] = Y[i:i+N-x]\n\nanswer[0:x] = Y[i+N-x:i+N]\n\n\n\nprint(('\\n'.join(map(str,answer))))\n\n\n","target":"import sys\n\nimport numpy as np\n\n\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\n\"\"\"\n\n\u30fb\u9806\u5e8f\u304c\u56fa\u5b9a\u3055\u308c\u308b\u306e\u3067\u3001\u533a\u9593\u3060\u3063\u305f\u3089\u7c21\u5358\n\n\u30fb\u5186\u306e\u3068\u304d\u3082\u3001\u5730\u70b9 0 \u3092\u305d\u308c\u305e\u308c\u306e\u65b9\u5411\u306b\u901a\u3063\u305f\u4eba\u6570\u3092\u898b\u308c\u3070\u8a08\u7b97\u3067\u304d\u308b\n\n\"\"\"\n\n\n\nN, L, T = list(map(int, readline().split()))\n\nXW = np.array(read().split(), np.int64)\n\nX = XW[::2]\n\nW = XW[1::2]\n\n\n\nspeed = np.where(W == 1, 1, -1)\n\n\n\nY = X + speed * T\n\n\n\nn = (Y \/\/ L - X \/\/ L).sum()\n\nn %= N\n\n\n\nY %= L\n\nY.sort()\n\nY = np.concatenate((Y[n:], Y[:n]))\n\n\n\nprint(('\\n'.join(map(str, Y.tolist()))))","code_v0_loc":40,"code_v1_loc":29,"code_v0_num_chars":763,"code_v1_num_chars":514,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nN, L, T = list(map(int, input().split()))\nXW = [[int(x) for x in input().split()] for _ in range(N)]\nX, W = list(zip(*XW))\nDX = [1 if w == 1 else -1 for w in W]\nY = [(x + dx * T) % L for x, dx in zip(X, DX)]\ny0 = Y[0]\nY.sort()\n# \u756a\u53f71\u304c\u3059\u308c\u9055\u308f\u305a\u9032\u3093\u3060\u5834\u6240\u306b\u76f8\u5f53\u3059\u308b\u30a2\u30ea\u306e\u756a\u53f7\n# \u3059\u308c\u9055\u3046\u305f\u3073\u306b1\u5897\u3048\u308b\uff08W1=1\uff09 or 1\u6e1b\u308b\uff08W1=-1\uff09\n# T\u79d2\u3061\u3087\u3046\u3069\u3082\u3059\u308c\u9055\u3044\u7d42\u308f\u3063\u305f\u3068\u8003\u3048\u308b\nx = 0\nx0, dx0 = X[0], DX[0]\nfor y, dy in zip(X[1:], DX[1:]):\n    if dx0 == dy:\n        continue\n    if dx0 == 1 and dy == -1:\n        # \u6b63\u306e\u5411\u304d\u306b\u8ffd\u3044\u8d8a\u3059\u306e\u3067\u756a\u53f7\u304c\u3072\u3068\u3064\u5897\u3048\u308b\n        x += (2 * T - (y - x0) - 1) \/\/ L + 1\n    if dx0 == -1 and dy == 1:\n        x -= (2 * T - (L + x0 - y)) \/\/ L + 1\nx %= N\ni = Y.index(y0)\nY += Y\nanswer = [None] * N\nanswer[x:N] = Y[i : i + N - x]\nanswer[0:x] = Y[i + N - x : i + N]\nprint((\"\\n\".join(map(str, answer))))\n","code_v1_no_empty_lines":"import sys\nimport numpy as np\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\"\"\"\n\u30fb\u9806\u5e8f\u304c\u56fa\u5b9a\u3055\u308c\u308b\u306e\u3067\u3001\u533a\u9593\u3060\u3063\u305f\u3089\u7c21\u5358\n\u30fb\u5186\u306e\u3068\u304d\u3082\u3001\u5730\u70b9 0 \u3092\u305d\u308c\u305e\u308c\u306e\u65b9\u5411\u306b\u901a\u3063\u305f\u4eba\u6570\u3092\u898b\u308c\u3070\u8a08\u7b97\u3067\u304d\u308b\n\"\"\"\nN, L, T = list(map(int, readline().split()))\nXW = np.array(read().split(), np.int64)\nX = XW[::2]\nW = XW[1::2]\nspeed = np.where(W == 1, 1, -1)\nY = X + speed * T\nn = (Y \/\/ L - X \/\/ L).sum()\nn %= N\nY %= L\nY.sort()\nY = np.concatenate((Y[n:], Y[:n]))\nprint((\"\\n\".join(map(str, Y.tolist()))))\n","code_same":false,"relative_loc_diff_percent":27.5,"diff":["+import numpy as np","-input = sys.stdin.readline","-N, L, T = list(map(int, input().split()))","-XW = [[int(x) for x in input().split()] for _ in range(N)]","-X, W = list(zip(*XW))","-DX = [1 if w == 1 else -1 for w in W]","-Y = [(x + dx * T) % L for x, dx in zip(X, DX)]","-y0 = Y[0]","+read = sys.stdin.buffer.read","+readline = sys.stdin.buffer.readline","+readlines = sys.stdin.buffer.readlines","+\"\"\"","+\u30fb\u9806\u5e8f\u304c\u56fa\u5b9a\u3055\u308c\u308b\u306e\u3067\u3001\u533a\u9593\u3060\u3063\u305f\u3089\u7c21\u5358","+\u30fb\u5186\u306e\u3068\u304d\u3082\u3001\u5730\u70b9 0 \u3092\u305d\u308c\u305e\u308c\u306e\u65b9\u5411\u306b\u901a\u3063\u305f\u4eba\u6570\u3092\u898b\u308c\u3070\u8a08\u7b97\u3067\u304d\u308b","+\"\"\"","+N, L, T = list(map(int, readline().split()))","+XW = np.array(read().split(), np.int64)","+X = XW[::2]","+W = XW[1::2]","+speed = np.where(W == 1, 1, -1)","+Y = X + speed * T","+n = (Y \/\/ L - X \/\/ L).sum()","+n %= N","+Y %= L","-# \u756a\u53f71\u304c\u3059\u308c\u9055\u308f\u305a\u9032\u3093\u3060\u5834\u6240\u306b\u76f8\u5f53\u3059\u308b\u30a2\u30ea\u306e\u756a\u53f7","-# \u3059\u308c\u9055\u3046\u305f\u3073\u306b1\u5897\u3048\u308b\uff08W1=1\uff09 or 1\u6e1b\u308b\uff08W1=-1\uff09","-# T\u79d2\u3061\u3087\u3046\u3069\u3082\u3059\u308c\u9055\u3044\u7d42\u308f\u3063\u305f\u3068\u8003\u3048\u308b","-x = 0","-x0, dx0 = X[0], DX[0]","-for y, dy in zip(X[1:], DX[1:]):","-    if dx0 == dy:","-        continue","-    if dx0 == 1 and dy == -1:","-        # \u6b63\u306e\u5411\u304d\u306b\u8ffd\u3044\u8d8a\u3059\u306e\u3067\u756a\u53f7\u304c\u3072\u3068\u3064\u5897\u3048\u308b","-        x += (2 * T - (y - x0) - 1) \/\/ L + 1","-    if dx0 == -1 and dy == 1:","-        x -= (2 * T - (L + x0 - y)) \/\/ L + 1","-x %= N","-i = Y.index(y0)","-Y += Y","-answer = [None] * N","-answer[x:N] = Y[i : i + N - x]","-answer[0:x] = Y[i + N - x : i + N]","-print((\"\\n\".join(map(str, answer))))","+Y = np.concatenate((Y[n:], Y[:n]))","+print((\"\\n\".join(map(str, Y.tolist()))))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2011978789,"measured_runtime_v1":0.0059206796,"runtime_lift":33.9822267906,"key":["s216230376","s376589884"]}
{"user_id":"u628794221","problem_id":"p02688","language":"python","submission_id_v0":"s048784054","submission_id_v1":"s441243732","cpu_time_v0":24,"cpu_time_v1":20,"memory_v0":9192,"memory_v1":9172,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.67,"input":"N, K = list(map(int, input().split()))\n\nsunuke = [True]*N\n\nfor i in range(K):\n\n    d = int(eval(input()))\n\n    A = list(map(int, input().split()))\n\n    for a in A:\n\n        sunuke[a-1] = False\n\n\n\nans = 0\n\nfor i in range(N):\n\n    if sunuke[i]:\n\n        ans += 1\n\nprint(ans)","target":"N, K = list(map(int, input().split()))\n\nflag = [True]*N\n\nfor i in range(K):\n\n    d = int(eval(input()))\n\n    A = list(map(int, input().split()))\n\n    for a in A:\n\n        flag[a-1] = False\n\nans = 0\n\nfor i in range(N):\n\n    if flag[i]:\n\n        ans += 1\n\nprint(ans)","code_v0_loc":13,"code_v1_loc":12,"code_v0_num_chars":260,"code_v1_num_chars":252,"code_v0_no_empty_lines":"N, K = list(map(int, input().split()))\nsunuke = [True] * N\nfor i in range(K):\n    d = int(eval(input()))\n    A = list(map(int, input().split()))\n    for a in A:\n        sunuke[a - 1] = False\nans = 0\nfor i in range(N):\n    if sunuke[i]:\n        ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"N, K = list(map(int, input().split()))\nflag = [True] * N\nfor i in range(K):\n    d = int(eval(input()))\n    A = list(map(int, input().split()))\n    for a in A:\n        flag[a - 1] = False\nans = 0\nfor i in range(N):\n    if flag[i]:\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":7.6923076923,"diff":["-sunuke = [True] * N","+flag = [True] * N","-        sunuke[a - 1] = False","+        flag[a - 1] = False","-    if sunuke[i]:","+    if flag[i]:"],"diff_only_import_comment":false,"measured_runtime_v0":0.3757941551,"measured_runtime_v1":0.2950303654,"runtime_lift":1.2737473806,"key":["s048784054","s441243732"]}
{"user_id":"u638456847","problem_id":"p02937","language":"python","submission_id_v0":"s386654104","submission_id_v1":"s129869478","cpu_time_v0":375,"cpu_time_v1":87,"memory_v0":7284,"memory_v1":7924,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":76.8,"input":"import sys\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\n\n\ndef main():\n\n    S = readline().strip()\n\n    T = readline().strip()\n\n\n\n    idx_in_S = []\n\n    last_idx = 0\n\n    for t in T:\n\n        t_idx = S.find(t, last_idx) + 1\n\n        if t_idx:\n\n            idx_in_S.append(t_idx)\n\n            last_idx = t_idx\n\n        else:\n\n            t_idx = S.find(t, 0, last_idx) + 1\n\n            if not t_idx:\n\n                print((-1))\n\n                exit()\n\n            else:\n\n                idx_in_S.append(t_idx)\n\n                last_idx = t_idx\n\n\n\n    \n\n    rep = 0\n\n    for i in range(len(T) - 1):\n\n        if idx_in_S[i] < idx_in_S[i+1]:\n\n            continue\n\n        else:\n\n            rep += 1\n\n\n\n    ans = len(S) * rep + idx_in_S[-1]\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"# S.find()\u306e\u90e8\u5206\u3092\u9ad8\u901f\u5316\u3059\u308b\n\nfrom collections import defaultdict\n\nfrom bisect import bisect_right\n\nimport sys\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\n\n\ndef main():\n\n    S = readline().strip()\n\n    T = readline().strip()\n\n\n\n    S_idx = defaultdict(list)\n\n    for i, s in enumerate(S):\n\n        S_idx[s].append(i)\n\n    \n\n    rep = 0\n\n    last_idx = -1\n\n    for t in T:\n\n        t_idx_list = S_idx[t]\n\n        if t_idx_list:\n\n            t_idx = bisect_right(t_idx_list, last_idx)\n\n            if t_idx < len(t_idx_list):\n\n                last_idx = t_idx_list[t_idx]\n\n            else:\n\n                last_idx = t_idx_list[0]\n\n                rep += 1\n\n        else:\n\n            print((-1))\n\n            exit()\n\n    \n\n    ans = len(S) * rep + last_idx + 1\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":39,"code_v1_loc":37,"code_v0_num_chars":840,"code_v1_num_chars":855,"code_v0_no_empty_lines":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\n\n\ndef main():\n    S = readline().strip()\n    T = readline().strip()\n    idx_in_S = []\n    last_idx = 0\n    for t in T:\n        t_idx = S.find(t, last_idx) + 1\n        if t_idx:\n            idx_in_S.append(t_idx)\n            last_idx = t_idx\n        else:\n            t_idx = S.find(t, 0, last_idx) + 1\n            if not t_idx:\n                print((-1))\n                exit()\n            else:\n                idx_in_S.append(t_idx)\n                last_idx = t_idx\n    rep = 0\n    for i in range(len(T) - 1):\n        if idx_in_S[i] < idx_in_S[i + 1]:\n            continue\n        else:\n            rep += 1\n    ans = len(S) * rep + idx_in_S[-1]\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"# S.find()\u306e\u90e8\u5206\u3092\u9ad8\u901f\u5316\u3059\u308b\nfrom collections import defaultdict\nfrom bisect import bisect_right\nimport sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\n\n\ndef main():\n    S = readline().strip()\n    T = readline().strip()\n    S_idx = defaultdict(list)\n    for i, s in enumerate(S):\n        S_idx[s].append(i)\n    rep = 0\n    last_idx = -1\n    for t in T:\n        t_idx_list = S_idx[t]\n        if t_idx_list:\n            t_idx = bisect_right(t_idx_list, last_idx)\n            if t_idx < len(t_idx_list):\n                last_idx = t_idx_list[t_idx]\n            else:\n                last_idx = t_idx_list[0]\n                rep += 1\n        else:\n            print((-1))\n            exit()\n    ans = len(S) * rep + last_idx + 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":5.1282051282,"diff":["+# S.find()\u306e\u90e8\u5206\u3092\u9ad8\u901f\u5316\u3059\u308b","+from collections import defaultdict","+from bisect import bisect_right","-    idx_in_S = []","-    last_idx = 0","+    S_idx = defaultdict(list)","+    for i, s in enumerate(S):","+        S_idx[s].append(i)","+    rep = 0","+    last_idx = -1","-        t_idx = S.find(t, last_idx) + 1","-        if t_idx:","-            idx_in_S.append(t_idx)","-            last_idx = t_idx","+        t_idx_list = S_idx[t]","+        if t_idx_list:","+            t_idx = bisect_right(t_idx_list, last_idx)","+            if t_idx < len(t_idx_list):","+                last_idx = t_idx_list[t_idx]","+            else:","+                last_idx = t_idx_list[0]","+                rep += 1","-            t_idx = S.find(t, 0, last_idx) + 1","-            if not t_idx:","-                print((-1))","-                exit()","-            else:","-                idx_in_S.append(t_idx)","-                last_idx = t_idx","-    rep = 0","-    for i in range(len(T) - 1):","-        if idx_in_S[i] < idx_in_S[i + 1]:","-            continue","-        else:","-            rep += 1","-    ans = len(S) * rep + idx_in_S[-1]","+            print((-1))","+            exit()","+    ans = len(S) * rep + last_idx + 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.3716950469,"measured_runtime_v1":0.2723373818,"runtime_lift":1.3648330037,"key":["s386654104","s129869478"]}
{"user_id":"u647766105","problem_id":"p00149","language":"python","submission_id_v0":"s470531137","submission_id_v1":"s067459842","cpu_time_v0":20,"cpu_time_v1":10,"memory_v0":4324,"memory_v1":4316,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":50.0,"input":"from bisect import bisect\n\nD = [0.2,0.6,1.1]\n\nL = [0,0,0,0]\n\nR = [0,0,0,0]\n\nwhile True:\n\n    try:\n\n        left,right = list(map(float,input().split()))\n\n    except:\n\n        break\n\n    L[bisect(D,left)] += 1\n\n    R[bisect(D,right)] += 1\n\nfor left,right in zip(L,R)[::-1]:\n\n    print(left,right)","target":"from bisect import bisect\n\nD = [0.2,0.6,1.1]\n\nL = [0]*4\n\nR = [0]*4\n\nwhile True:\n\n    try:\n\n        left,right = list(map(float,input().split()))\n\n    except:\n\n        break\n\n    L[bisect(D,left)] += 1\n\n    R[bisect(D,right)] += 1\n\nfor left,right in zip(L,R)[::-1]:\n\n    print(left,right)","code_v0_loc":13,"code_v1_loc":13,"code_v0_num_chars":292,"code_v1_num_chars":284,"code_v0_no_empty_lines":"from bisect import bisect\n\nD = [0.2, 0.6, 1.1]\nL = [0, 0, 0, 0]\nR = [0, 0, 0, 0]\nwhile True:\n    try:\n        left, right = list(map(float, input().split()))\n    except:\n        break\n    L[bisect(D, left)] += 1\n    R[bisect(D, right)] += 1\nfor left, right in zip(L, R)[::-1]:\n    print(left, right)\n","code_v1_no_empty_lines":"from bisect import bisect\n\nD = [0.2, 0.6, 1.1]\nL = [0] * 4\nR = [0] * 4\nwhile True:\n    try:\n        left, right = list(map(float, input().split()))\n    except:\n        break\n    L[bisect(D, left)] += 1\n    R[bisect(D, right)] += 1\nfor left, right in zip(L, R)[::-1]:\n    print(left, right)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-L = [0, 0, 0, 0]","-R = [0, 0, 0, 0]","+L = [0] * 4","+R = [0] * 4"],"diff_only_import_comment":false,"measured_runtime_v0":0.4541368237,"measured_runtime_v1":0.349680768,"runtime_lift":1.2987183316,"key":["s470531137","s067459842"]}
{"user_id":"u057964173","problem_id":"p03796","language":"python","submission_id_v0":"s018166938","submission_id_v1":"s633160279","cpu_time_v0":298,"cpu_time_v1":42,"memory_v0":42992,"memory_v1":28396,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":85.91,"input":"import sys\n\ndef input(): return sys.stdin.readline().strip()\n\n\n\ndef resolve():\n\n    import math\n\n    n=int(eval(input()))\n\n    print((math.factorial(n)%(10**9+7)))\n\nresolve()","target":"import sys\n\ndef input(): return sys.stdin.readline().strip()\n\n\n\ndef resolve():\n\n    answer=1\n\n    n=int(eval(input()))\n\n    for i in range(1,n+1):\n\n        answer*=i\n\n        answer%=10**9+7\n\n    print(answer)\n\nresolve()","code_v0_loc":8,"code_v1_loc":11,"code_v0_num_chars":166,"code_v1_num_chars":214,"code_v0_no_empty_lines":"import sys\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef resolve():\n    import math\n\n    n = int(eval(input()))\n    print((math.factorial(n) % (10**9 + 7)))\n\n\nresolve()\n","code_v1_no_empty_lines":"import sys\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef resolve():\n    answer = 1\n    n = int(eval(input()))\n    for i in range(1, n + 1):\n        answer *= i\n        answer %= 10**9 + 7\n    print(answer)\n\n\nresolve()\n","code_same":false,"relative_loc_diff_percent":27.2727272727,"diff":["-    import math","-","+    answer = 1","-    print((math.factorial(n) % (10**9 + 7)))","+    for i in range(1, n + 1):","+        answer *= i","+        answer %= 10**9 + 7","+    print(answer)"],"diff_only_import_comment":false,"measured_runtime_v0":0.5731575236,"measured_runtime_v1":0.2333363581,"runtime_lift":2.4563575447,"key":["s018166938","s633160279"]}
{"user_id":"u503228842","problem_id":"p03363","language":"python","submission_id_v0":"s333415387","submission_id_v1":"s550734009","cpu_time_v0":299,"cpu_time_v1":187,"memory_v0":39380,"memory_v1":41492,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":37.46,"input":"from collections import Counter\n\nimport numpy as np\n\n\n\nN = int(eval(input()))\n\nA = np.array(input().split(), dtype = np.int64)\n\n\n\nc = Counter(A.cumsum())\n\nc[0] += 1\n\nanswer = sum(x*(x-1)\/\/2 for x in list(c.values()))\n\nprint(answer)\n","target":"N = int(eval(input()))\n\nA = list(map(int,input().split()))\n\ncsum = [0]\n\ntemp = 0\n\nfor a in A:\n\n    temp += a\n\n    csum.append(temp)\n\n# csum.sort()\n\n# print(csum)\n\nfrom collections import Counter\n\nfreq = Counter(csum)\n\nans = 0\n\nfor v in list(freq.values()):\n\n    ans += (v*(v-1))\/\/2\n\nprint(ans)","code_v0_loc":10,"code_v1_loc":15,"code_v0_num_chars":220,"code_v1_num_chars":281,"code_v0_no_empty_lines":"from collections import Counter\nimport numpy as np\n\nN = int(eval(input()))\nA = np.array(input().split(), dtype=np.int64)\nc = Counter(A.cumsum())\nc[0] += 1\nanswer = sum(x * (x - 1) \/\/ 2 for x in list(c.values()))\nprint(answer)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = list(map(int, input().split()))\ncsum = [0]\ntemp = 0\nfor a in A:\n    temp += a\n    csum.append(temp)\n# csum.sort()\n# print(csum)\nfrom collections import Counter\n\nfreq = Counter(csum)\nans = 0\nfor v in list(freq.values()):\n    ans += (v * (v - 1)) \/\/ 2\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["+N = int(eval(input()))","+A = list(map(int, input().split()))","+csum = [0]","+temp = 0","+for a in A:","+    temp += a","+    csum.append(temp)","+# csum.sort()","+# print(csum)","-import numpy as np","-N = int(eval(input()))","-A = np.array(input().split(), dtype=np.int64)","-c = Counter(A.cumsum())","-c[0] += 1","-answer = sum(x * (x - 1) \/\/ 2 for x in list(c.values()))","-print(answer)","+freq = Counter(csum)","+ans = 0","+for v in list(freq.values()):","+    ans += (v * (v - 1)) \/\/ 2","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.3650826566,"measured_runtime_v1":0.2447019732,"runtime_lift":5.5785518961,"key":["s333415387","s550734009"]}
{"user_id":"u955547613","problem_id":"p03494","language":"python","submission_id_v0":"s456783513","submission_id_v1":"s818987623","cpu_time_v0":150,"cpu_time_v1":17,"memory_v0":12496,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.67,"input":"# -*- coding: utf-8 -*-\n\nimport numpy as np\n\n\n\n\n\nif __name__ == '__main__':\n\n    n = int(eval(input()))\n\n    A = np.array([int(a) for a in input().split()], dtype=np.int)\n\n\n\n    isEven = True\n\n    count = 0\n\n    while isEven:\n\n        if (A%2).any() != 0 :\n\n            isEven = False\n\n            break\n\n        A = A\/2\n\n        count+=1\n\n    print(count)","target":"import math\n\nn = eval(input())\n\na = list(map(int, input().split()))\n\nans = float(\"inf\")\n\nfor i in a:\n\n    ans = min(ans, len(bin(i)) - bin(i).rfind(\"1\") - 1)\n\nprint((round(ans)))","code_v0_loc":17,"code_v1_loc":7,"code_v0_num_chars":350,"code_v1_num_chars":170,"code_v0_no_empty_lines":"# -*- coding: utf-8 -*-\nimport numpy as np\n\nif __name__ == \"__main__\":\n    n = int(eval(input()))\n    A = np.array([int(a) for a in input().split()], dtype=np.int)\n    isEven = True\n    count = 0\n    while isEven:\n        if (A % 2).any() != 0:\n            isEven = False\n            break\n        A = A \/ 2\n        count += 1\n    print(count)\n","code_v1_no_empty_lines":"import math\n\nn = eval(input())\na = list(map(int, input().split()))\nans = float(\"inf\")\nfor i in a:\n    ans = min(ans, len(bin(i)) - bin(i).rfind(\"1\") - 1)\nprint((round(ans)))\n","code_same":false,"relative_loc_diff_percent":58.8235294118,"diff":["-# -*- coding: utf-8 -*-","-import numpy as np","+import math","-if __name__ == \"__main__\":","-    n = int(eval(input()))","-    A = np.array([int(a) for a in input().split()], dtype=np.int)","-    isEven = True","-    count = 0","-    while isEven:","-        if (A % 2).any() != 0:","-            isEven = False","-            break","-        A = A \/ 2","-        count += 1","-    print(count)","+n = eval(input())","+a = list(map(int, input().split()))","+ans = float(\"inf\")","+for i in a:","+    ans = min(ans, len(bin(i)) - bin(i).rfind(\"1\") - 1)","+print((round(ans)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.5910281873,"measured_runtime_v1":0.231145987,"runtime_lift":6.8832178643,"key":["s456783513","s818987623"]}
{"user_id":"u983918956","problem_id":"p03416","language":"python","submission_id_v0":"s018952102","submission_id_v1":"s778219351","cpu_time_v0":118,"cpu_time_v1":60,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":49.15,"input":"A,B = list(map(int,input().split()))\n\nj = 0\n\nfor i in range(A,B+1):\n\n  l = list(str(i))\n\n  l_reverse = list(reversed(l))\n\n  if l == l_reverse:\n\n    j += 1\n\nprint(j)","target":"A, B = list(map(int,input().split()))\n\n\n\nans = 0\n\nfor n in range(A, B+1):\n\n    n = str(n)\n\n    if n == n[::-1]:\n\n        ans += 1\n\nprint(ans)","code_v0_loc":8,"code_v1_loc":8,"code_v0_num_chars":158,"code_v1_num_chars":135,"code_v0_no_empty_lines":"A, B = list(map(int, input().split()))\nj = 0\nfor i in range(A, B + 1):\n    l = list(str(i))\n    l_reverse = list(reversed(l))\n    if l == l_reverse:\n        j += 1\nprint(j)\n","code_v1_no_empty_lines":"A, B = list(map(int, input().split()))\nans = 0\nfor n in range(A, B + 1):\n    n = str(n)\n    if n == n[::-1]:\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-j = 0","-for i in range(A, B + 1):","-    l = list(str(i))","-    l_reverse = list(reversed(l))","-    if l == l_reverse:","-        j += 1","-print(j)","+ans = 0","+for n in range(A, B + 1):","+    n = str(n)","+    if n == n[::-1]:","+        ans += 1","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.4538340874,"measured_runtime_v1":0.3384370139,"runtime_lift":1.340970605,"key":["s018952102","s778219351"]}
{"user_id":"u811841526","problem_id":"p02390","language":"python","submission_id_v0":"s941329471","submission_id_v1":"s549187322","cpu_time_v0":40,"cpu_time_v1":20,"memory_v0":7664,"memory_v1":5592,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":50.0,"input":"s = int(eval(input()))\n\nm, s = s \/\/ 60, s % 60\n\nh, m = m \/\/ 60, m % 60\n\nprint((':'.join(map(str, [h,m,s]))))","target":"s = int(eval(input()))\n\n\n\nsecond = s % 60\n\ns = s \/\/ 60\n\nmin = s % 60\n\nhour = s \/\/ 60\n\n\n\nprint(f'{hour}:{min}:{second}')\n","code_v0_loc":4,"code_v1_loc":8,"code_v0_num_chars":100,"code_v1_num_chars":114,"code_v0_no_empty_lines":"s = int(eval(input()))\nm, s = s \/\/ 60, s % 60\nh, m = m \/\/ 60, m % 60\nprint((\":\".join(map(str, [h, m, s]))))\n","code_v1_no_empty_lines":"s = int(eval(input()))\nsecond = s % 60\ns = s \/\/ 60\nmin = s % 60\nhour = s \/\/ 60\nprint(f\"{hour}:{min}:{second}\")\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-m, s = s \/\/ 60, s % 60","-h, m = m \/\/ 60, m % 60","-print((\":\".join(map(str, [h, m, s]))))","+second = s % 60","+s = s \/\/ 60","+min = s % 60","+hour = s \/\/ 60","+print(f\"{hour}:{min}:{second}\")"],"diff_only_import_comment":false,"measured_runtime_v0":0.1672595444,"measured_runtime_v1":0.0066597962,"runtime_lift":25.1148140492,"key":["s941329471","s549187322"]}
{"user_id":"u488127128","problem_id":"p03796","language":"python","submission_id_v0":"s848409194","submission_id_v1":"s870468874","cpu_time_v0":231,"cpu_time_v1":35,"memory_v0":4020,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":84.85,"input":"import math\n\nN = int(eval(input()))\n\nprint((math.factorial(N)%(10**9+7)))","target":"import math\n\nN = int(eval(input()))\n\na = 1\n\nfor n in range(2,N+1):\n\n    a = a*n % (10**9+7)\n\nprint(a)","code_v0_loc":3,"code_v1_loc":6,"code_v0_num_chars":65,"code_v1_num_chars":95,"code_v0_no_empty_lines":"import math\n\nN = int(eval(input()))\nprint((math.factorial(N) % (10**9 + 7)))\n","code_v1_no_empty_lines":"import math\n\nN = int(eval(input()))\na = 1\nfor n in range(2, N + 1):\n    a = a * n % (10**9 + 7)\nprint(a)\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-print((math.factorial(N) % (10**9 + 7)))","+a = 1","+for n in range(2, N + 1):","+    a = a * n % (10**9 + 7)","+print(a)"],"diff_only_import_comment":false,"measured_runtime_v0":0.8454835632,"measured_runtime_v1":0.3383059211,"runtime_lift":2.4991686828,"key":["s848409194","s870468874"]}
{"user_id":"u706786134","problem_id":"p03162","language":"python","submission_id_v0":"s594464036","submission_id_v1":"s976355345","cpu_time_v0":1103,"cpu_time_v1":647,"memory_v0":56196,"memory_v1":47192,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":41.34,"input":"import numpy as np\n\n\n\nn = int(eval(input()))\n\nX = np.array([input().split() for _ in range(n)], np.int64)\n\ndp = np.zeros((n + 1, 3), np.int64)\n\ndp[0, 0] = dp[0, 1] = dp[0, 2] = 0\n\nfor i in range(n):\n\n    for j in range(3):\n\n        dp[i + 1, j] = X[i, j] + max(dp[i, k] for k in range(3) if j != k)\n\nprint((max(dp[n])))","target":"N = int(eval(input()))\n\nx, y, z = 0, 0, 0\n\nfor _ in range(N):\n\n    a, b, c = list(map(int, input().split()))\n\n    x, y, z = max(y, z) + a, max(z, x) + b, max(x, y) + c\n\nprint((max(x, y, z)))","code_v0_loc":10,"code_v1_loc":6,"code_v0_num_chars":311,"code_v1_num_chars":176,"code_v0_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\nX = np.array([input().split() for _ in range(n)], np.int64)\ndp = np.zeros((n + 1, 3), np.int64)\ndp[0, 0] = dp[0, 1] = dp[0, 2] = 0\nfor i in range(n):\n    for j in range(3):\n        dp[i + 1, j] = X[i, j] + max(dp[i, k] for k in range(3) if j != k)\nprint((max(dp[n])))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nx, y, z = 0, 0, 0\nfor _ in range(N):\n    a, b, c = list(map(int, input().split()))\n    x, y, z = max(y, z) + a, max(z, x) + b, max(x, y) + c\nprint((max(x, y, z)))\n","code_same":false,"relative_loc_diff_percent":40.0,"diff":["-import numpy as np","-","-n = int(eval(input()))","-X = np.array([input().split() for _ in range(n)], np.int64)","-dp = np.zeros((n + 1, 3), np.int64)","-dp[0, 0] = dp[0, 1] = dp[0, 2] = 0","-for i in range(n):","-    for j in range(3):","-        dp[i + 1, j] = X[i, j] + max(dp[i, k] for k in range(3) if j != k)","-print((max(dp[n])))","+N = int(eval(input()))","+x, y, z = 0, 0, 0","+for _ in range(N):","+    a, b, c = list(map(int, input().split()))","+    x, y, z = max(y, z) + a, max(z, x) + b, max(x, y) + c","+print((max(x, y, z)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.9783216975,"measured_runtime_v1":0.3213120236,"runtime_lift":6.157011104,"key":["s594464036","s976355345"]}
{"user_id":"u659159398","problem_id":"p02690","language":"python","submission_id_v0":"s007764866","submission_id_v1":"s730023385","cpu_time_v0":60,"cpu_time_v1":40,"memory_v0":9352,"memory_v1":9000,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":33.33,"input":"x = int(eval(input()))\n\n\n\nroot = int(x**(0.2))\n\n\n\nflag = 0\n\nfor i in range(root - 400, root + 400):\n\n    for j in range(-100, root + 400):\n\n        if i!=j:\n\n            if x%(i-j) == 0:\n\n                if i**5-j**5 == x:\n\n                    print((i, j))\n\n                    flag = 1\n\n                    break\n\n    if flag:\n\n        break","target":"x = int(eval(input()))\n\n\n\nfor a in range(-120, 120):\n\n  for b in range(-120, 120):\n\n    if a**5-b**5 == x:\n\n      print((a, b))\n\n      exit()","code_v0_loc":15,"code_v1_loc":7,"code_v0_num_chars":335,"code_v1_num_chars":133,"code_v0_no_empty_lines":"x = int(eval(input()))\nroot = int(x ** (0.2))\nflag = 0\nfor i in range(root - 400, root + 400):\n    for j in range(-100, root + 400):\n        if i != j:\n            if x % (i - j) == 0:\n                if i**5 - j**5 == x:\n                    print((i, j))\n                    flag = 1\n                    break\n    if flag:\n        break\n","code_v1_no_empty_lines":"x = int(eval(input()))\nfor a in range(-120, 120):\n    for b in range(-120, 120):\n        if a**5 - b**5 == x:\n            print((a, b))\n            exit()\n","code_same":false,"relative_loc_diff_percent":53.3333333333,"diff":["-root = int(x ** (0.2))","-flag = 0","-for i in range(root - 400, root + 400):","-    for j in range(-100, root + 400):","-        if i != j:","-            if x % (i - j) == 0:","-                if i**5 - j**5 == x:","-                    print((i, j))","-                    flag = 1","-                    break","-    if flag:","-        break","+for a in range(-120, 120):","+    for b in range(-120, 120):","+        if a**5 - b**5 == x:","+            print((a, b))","+            exit()"],"diff_only_import_comment":false,"measured_runtime_v0":0.2328919073,"measured_runtime_v1":0.1760219514,"runtime_lift":1.3230844527,"key":["s007764866","s730023385"]}
{"user_id":"u754022296","problem_id":"p03819","language":"python","submission_id_v0":"s951638556","submission_id_v1":"s089571448","cpu_time_v0":1762,"cpu_time_v1":852,"memory_v0":127784,"memory_v1":82324,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":51.65,"input":"import sys\n\ninput = sys.stdin.readline\n\n\n\ndef main():\n\n  n, m = map(int, input().split())\n\n  LR = [list(map(int, input().split())) for _ in range(n)]\n\n  \n\n  BIT = [0]*(m+2)\n\n  def add(i, a):\n\n    while i <= m+1:\n\n      BIT[i] += a\n\n      i += i&(-i)\n\n  def bit_sum(i):\n\n    res = 0\n\n    while i > 0:\n\n      res += BIT[i]\n\n      i -= i&(-i)\n\n    return res\n\n  \n\n  S = sorted([(r-l+1, l, r) for l, r in LR], reverse=True)\n\n  cnt = n\n\n  L = []\n\n  for i in range(1, m+1):\n\n    while S and S[-1][0] == i:\n\n      c, l, r = S.pop()\n\n      cnt -= 1\n\n      add(l, 1)\n\n      add(r+1, -1)\n\n    res = cnt\n\n    for j in range(0, m+1, i):\n\n      res += bit_sum(j)\n\n    L.append(res)\n\n  print(*L, sep=\"\\n\")\n\n\n\nif __name__ == \"__main__\":\n\n  main()\n","target":"import sys\n\ninput = sys.stdin.readline\n\n\n\ndef main():\n\n  n, m = list(map(int, input().split()))\n\n  S = [[] for _ in range(m+1)]\n\n  for _ in range(n):\n\n    l, r = list(map(int, input().split()))\n\n    S[r-l+1].append((l, r))\n\n  \n\n  BIT = [0]*(m+2)\n\n  def add(i, a):\n\n    while i <= m+1:\n\n      BIT[i] += a\n\n      i += i&(-i)\n\n  def bit_sum(i):\n\n    res = 0\n\n    while i > 0:\n\n      res += BIT[i]\n\n      i -= i&(-i)\n\n    return res\n\n  cnt = n\n\n  for i in range(1, m+1):\n\n    for l, r in S[i]:\n\n      cnt -= 1\n\n      add(l, 1)\n\n      add(r+1, -1)\n\n    res = cnt\n\n    for j in range(0, m+1, i):\n\n      res += bit_sum(j)\n\n    print(res)\n\n\n\nif __name__ == \"__main__\":\n\n  main()","code_v0_loc":36,"code_v1_loc":34,"code_v0_num_chars":731,"code_v1_num_chars":658,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\n\n\ndef main():\n    n, m = map(int, input().split())\n    LR = [list(map(int, input().split())) for _ in range(n)]\n    BIT = [0] * (m + 2)\n\n    def add(i, a):\n        while i <= m + 1:\n            BIT[i] += a\n            i += i & (-i)\n\n    def bit_sum(i):\n        res = 0\n        while i > 0:\n            res += BIT[i]\n            i -= i & (-i)\n        return res\n\n    S = sorted([(r - l + 1, l, r) for l, r in LR], reverse=True)\n    cnt = n\n    L = []\n    for i in range(1, m + 1):\n        while S and S[-1][0] == i:\n            c, l, r = S.pop()\n            cnt -= 1\n            add(l, 1)\n            add(r + 1, -1)\n        res = cnt\n        for j in range(0, m + 1, i):\n            res += bit_sum(j)\n        L.append(res)\n    print(*L, sep=\"\\n\")\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\n\n\ndef main():\n    n, m = list(map(int, input().split()))\n    S = [[] for _ in range(m + 1)]\n    for _ in range(n):\n        l, r = list(map(int, input().split()))\n        S[r - l + 1].append((l, r))\n    BIT = [0] * (m + 2)\n\n    def add(i, a):\n        while i <= m + 1:\n            BIT[i] += a\n            i += i & (-i)\n\n    def bit_sum(i):\n        res = 0\n        while i > 0:\n            res += BIT[i]\n            i -= i & (-i)\n        return res\n\n    cnt = n\n    for i in range(1, m + 1):\n        for l, r in S[i]:\n            cnt -= 1\n            add(l, 1)\n            add(r + 1, -1)\n        res = cnt\n        for j in range(0, m + 1, i):\n            res += bit_sum(j)\n        print(res)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":5.5555555556,"diff":["-    n, m = map(int, input().split())","-    LR = [list(map(int, input().split())) for _ in range(n)]","+    n, m = list(map(int, input().split()))","+    S = [[] for _ in range(m + 1)]","+    for _ in range(n):","+        l, r = list(map(int, input().split()))","+        S[r - l + 1].append((l, r))","-    S = sorted([(r - l + 1, l, r) for l, r in LR], reverse=True)","-    L = []","-        while S and S[-1][0] == i:","-            c, l, r = S.pop()","+        for l, r in S[i]:","-        L.append(res)","-    print(*L, sep=\"\\n\")","+        print(res)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3067650649,"measured_runtime_v1":0.0989195189,"runtime_lift":3.1011580763,"key":["s951638556","s089571448"]}
{"user_id":"u254871849","problem_id":"p03078","language":"python","submission_id_v0":"s785699428","submission_id_v1":"s355827371","cpu_time_v0":419,"cpu_time_v1":84,"memory_v0":67256,"memory_v1":9548,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":79.95,"input":"import sys\n\nimport numpy as np\n\n\n\nx, y, z, k = map(int, sys.stdin.readline().split())\n\na, b, c = (np.array(sys.stdin.readline().split(), dtype=np.int64) for _ in range(3))\n\n\n\ndef main():\n\n    res = np.sort(np.ravel(a[:, None] + b))[::-1]\n\n    res = np.sort(np.ravel(c[:, None] + res[:min(k, x*y)]))[::-1]\n\n    return res[:k]\n\n\n\nif __name__ == '__main__':\n\n    ans = main()\n\n    print(*ans, sep='\\n')\n","target":"import sys\n\n\n\nx, y, z, K = map(int, sys.stdin.readline().split())\n\na, b, c = (sorted(map(int, sys.stdin.readline().split()), reverse=True) for _ in range(3))\n\ndef main():\n\n    res = []\n\n    for i in range(1, min(K, x) + 1):\n\n        for j in range(1, min(K \/\/ i, y) + 1):\n\n            for k in range(1, min(K \/\/ (i * j), z) + 1):\n\n                res.append(a[i-1] + b[j-1] + c[k-1])\n\n\n\n    return sorted(res, reverse=True)[:K]\n\n\n\nif __name__ == '__main__':\n\n    ans = main()\n\n    print(*ans, sep='\\n')\n","code_v0_loc":14,"code_v1_loc":16,"code_v0_num_chars":399,"code_v1_num_chars":502,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nx, y, z, k = map(int, sys.stdin.readline().split())\na, b, c = (np.array(sys.stdin.readline().split(), dtype=np.int64) for _ in range(3))\n\n\ndef main():\n    res = np.sort(np.ravel(a[:, None] + b))[::-1]\n    res = np.sort(np.ravel(c[:, None] + res[: min(k, x * y)]))[::-1]\n    return res[:k]\n\n\nif __name__ == \"__main__\":\n    ans = main()\n    print(*ans, sep=\"\\n\")\n","code_v1_no_empty_lines":"import sys\n\nx, y, z, K = map(int, sys.stdin.readline().split())\na, b, c = (\n    sorted(map(int, sys.stdin.readline().split()), reverse=True) for _ in range(3)\n)\n\n\ndef main():\n    res = []\n    for i in range(1, min(K, x) + 1):\n        for j in range(1, min(K \/\/ i, y) + 1):\n            for k in range(1, min(K \/\/ (i * j), z) + 1):\n                res.append(a[i - 1] + b[j - 1] + c[k - 1])\n    return sorted(res, reverse=True)[:K]\n\n\nif __name__ == \"__main__\":\n    ans = main()\n    print(*ans, sep=\"\\n\")\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-import numpy as np","-x, y, z, k = map(int, sys.stdin.readline().split())","-a, b, c = (np.array(sys.stdin.readline().split(), dtype=np.int64) for _ in range(3))","+x, y, z, K = map(int, sys.stdin.readline().split())","+a, b, c = (","+    sorted(map(int, sys.stdin.readline().split()), reverse=True) for _ in range(3)","+)","-    res = np.sort(np.ravel(a[:, None] + b))[::-1]","-    res = np.sort(np.ravel(c[:, None] + res[: min(k, x * y)]))[::-1]","-    return res[:k]","+    res = []","+    for i in range(1, min(K, x) + 1):","+        for j in range(1, min(K \/\/ i, y) + 1):","+            for k in range(1, min(K \/\/ (i * j), z) + 1):","+                res.append(a[i - 1] + b[j - 1] + c[k - 1])","+    return sorted(res, reverse=True)[:K]"],"diff_only_import_comment":false,"measured_runtime_v0":1.2671924386,"measured_runtime_v1":0.2012458158,"runtime_lift":6.2967393076,"key":["s785699428","s355827371"]}
{"user_id":"u550574002","problem_id":"p03126","language":"python","submission_id_v0":"s757696098","submission_id_v1":"s038854174","cpu_time_v0":23,"cpu_time_v1":19,"memory_v0":3572,"memory_v1":3316,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.39,"input":"import functools\n\nprint((len(functools.reduce(lambda x, y: x&y,[set(input().split()[1:]) for _ in [0]*int(input().split()[0])]))))","target":"print((len(set.intersection(*[set(input().split()[1:]) for _ in [0]*int(input().split()[0])]))))","code_v0_loc":2,"code_v1_loc":1,"code_v0_num_chars":128,"code_v1_num_chars":94,"code_v0_no_empty_lines":"import functools\n\nprint(\n    (\n        len(\n            functools.reduce(\n                lambda x, y: x & y,\n                [set(input().split()[1:]) for _ in [0] * int(input().split()[0])],\n            )\n        )\n    )\n)\n","code_v1_no_empty_lines":"print(\n    (\n        len(\n            set.intersection(\n                *[set(input().split()[1:]) for _ in [0] * int(input().split()[0])]\n            )\n        )\n    )\n)\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-import functools","-","-            functools.reduce(","-                lambda x, y: x & y,","-                [set(input().split()[1:]) for _ in [0] * int(input().split()[0])],","+            set.intersection(","+                *[set(input().split()[1:]) for _ in [0] * int(input().split()[0])]"],"diff_only_import_comment":false,"measured_runtime_v0":0.2541026509,"measured_runtime_v1":0.0938221338,"runtime_lift":2.7083444025,"key":["s757696098","s038854174"]}
{"user_id":"u046187684","problem_id":"p03480","language":"python","submission_id_v0":"s964601714","submission_id_v1":"s413566853","cpu_time_v0":40,"cpu_time_v1":33,"memory_v0":6244,"memory_v1":6388,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.5,"input":"#!\/usr\/bin\/env python3\n\n# coding=utf-8\n\n\n\nimport sys\n\n\n\ns = sys.stdin.readline().strip()\n\nl = [_s is \"1\" for _s in list(s)]\n\nl_r = l[::-1]\n\nindex = 0\n\nfor i, (c, n, c_r, n_r) in enumerate(\n\n        zip(l[:len(s) \/\/ 2], l[1:len(s) \/\/ 2 + 1], l_r[:len(s) \/\/ 2], l_r[1:len(s) \/\/ 2 + 1])):\n\n    if c ^ n or c_r ^ n_r:\n\n        index = i + 1\n\nprint((len(s) - index))","target":"def solve(string):\n\n    l = [s == \"1\" for s in string]\n\n    l_r = l[::-1]\n\n    index = 0\n\n    h = len(string) \/\/ 2\n\n    for i, (c, n, c_r, n_r) in enumerate(zip(l[:h], l[1:h + 1], l_r[:h], l_r[1:h + 1])):\n\n        if c ^ n or c_r ^ n_r:\n\n            index = i + 1\n\n    return str(len(string) - index)\n\n\n\n\n\nif __name__ == '__main__':\n\n    print((solve(eval(input()))))\n","code_v0_loc":14,"code_v1_loc":13,"code_v0_num_chars":359,"code_v1_num_chars":360,"code_v0_no_empty_lines":"#!\/usr\/bin\/env python3\n# coding=utf-8\nimport sys\n\ns = sys.stdin.readline().strip()\nl = [_s is \"1\" for _s in list(s)]\nl_r = l[::-1]\nindex = 0\nfor i, (c, n, c_r, n_r) in enumerate(\n    zip(\n        l[: len(s) \/\/ 2],\n        l[1 : len(s) \/\/ 2 + 1],\n        l_r[: len(s) \/\/ 2],\n        l_r[1 : len(s) \/\/ 2 + 1],\n    )\n):\n    if c ^ n or c_r ^ n_r:\n        index = i + 1\nprint((len(s) - index))\n","code_v1_no_empty_lines":"def solve(string):\n    l = [s == \"1\" for s in string]\n    l_r = l[::-1]\n    index = 0\n    h = len(string) \/\/ 2\n    for i, (c, n, c_r, n_r) in enumerate(\n        zip(l[:h], l[1 : h + 1], l_r[:h], l_r[1 : h + 1])\n    ):\n        if c ^ n or c_r ^ n_r:\n            index = i + 1\n    return str(len(string) - index)\n\n\nif __name__ == \"__main__\":\n    print((solve(eval(input()))))\n","code_same":false,"relative_loc_diff_percent":7.1428571429,"diff":["-#!\/usr\/bin\/env python3","-# coding=utf-8","-import sys","+def solve(string):","+    l = [s == \"1\" for s in string]","+    l_r = l[::-1]","+    index = 0","+    h = len(string) \/\/ 2","+    for i, (c, n, c_r, n_r) in enumerate(","+        zip(l[:h], l[1 : h + 1], l_r[:h], l_r[1 : h + 1])","+    ):","+        if c ^ n or c_r ^ n_r:","+            index = i + 1","+    return str(len(string) - index)","-s = sys.stdin.readline().strip()","-l = [_s is \"1\" for _s in list(s)]","-l_r = l[::-1]","-index = 0","-for i, (c, n, c_r, n_r) in enumerate(","-    zip(","-        l[: len(s) \/\/ 2],","-        l[1 : len(s) \/\/ 2 + 1],","-        l_r[: len(s) \/\/ 2],","-        l_r[1 : len(s) \/\/ 2 + 1],","-    )","-):","-    if c ^ n or c_r ^ n_r:","-        index = i + 1","-print((len(s) - index))","+","+if __name__ == \"__main__\":","+    print((solve(eval(input()))))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3417459049,"measured_runtime_v1":0.2085829885,"runtime_lift":1.6384169551,"key":["s964601714","s413566853"]}
{"user_id":"u561083515","problem_id":"p03371","language":"python","submission_id_v0":"s270393964","submission_id_v1":"s470107269","cpu_time_v0":111,"cpu_time_v1":17,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":84.68,"input":"# https:\/\/atcoder.jp\/contests\/abc095\/tasks\/arc096_a\n\n\"\"\"\n\n\u5225\u89e3(\u5b9a\u6570\u6642\u9593)\n\nhttps:\/\/atcoder.jp\/contests\/abc095\/submissions\/10226556\n\n\"\"\"\n\n\n\nA,B,C,X,Y = list(map(int,input().split()))\n\n\n\nans = float(\"inf\")\n\n\n\n# AB\u30d4\u30b6\u30922\u679a1\u7d44\u3067\u8003\u3048\u308b -> AB\u30bb\u30c3\u30c8\n\n# i: AB\u30bb\u30c3\u30c8\u306e\u500b\u6570\n\nfor i in range(10**5 + 1):\n\n    ans = min(ans, i*(2*C) + max(0, X-i)*A + max(0, Y-i)*B)\n\n\n\nprint(ans)","target":"A,B,C,X,Y = list(map(int,input().split()))\n\n\n\nAB_set = C * 2\n\n\n\nans = min(A*X + B*Y, AB_set*max(X,Y), AB_set*min(X,Y) + A*abs(X-min(X,Y)) + B*abs(Y-min(X,Y)))\n\n\n\nprint(ans)","code_v0_loc":16,"code_v1_loc":7,"code_v0_num_chars":336,"code_v1_num_chars":166,"code_v0_no_empty_lines":"# https:\/\/atcoder.jp\/contests\/abc095\/tasks\/arc096_a\n\"\"\"\n\u5225\u89e3(\u5b9a\u6570\u6642\u9593)\nhttps:\/\/atcoder.jp\/contests\/abc095\/submissions\/10226556\n\"\"\"\nA, B, C, X, Y = list(map(int, input().split()))\nans = float(\"inf\")\n# AB\u30d4\u30b6\u30922\u679a1\u7d44\u3067\u8003\u3048\u308b -> AB\u30bb\u30c3\u30c8\n# i: AB\u30bb\u30c3\u30c8\u306e\u500b\u6570\nfor i in range(10**5 + 1):\n    ans = min(ans, i * (2 * C) + max(0, X - i) * A + max(0, Y - i) * B)\nprint(ans)\n","code_v1_no_empty_lines":"A, B, C, X, Y = list(map(int, input().split()))\nAB_set = C * 2\nans = min(\n    A * X + B * Y,\n    AB_set * max(X, Y),\n    AB_set * min(X, Y) + A * abs(X - min(X, Y)) + B * abs(Y - min(X, Y)),\n)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":56.25,"diff":["-# https:\/\/atcoder.jp\/contests\/abc095\/tasks\/arc096_a","-\"\"\"","-\u5225\u89e3(\u5b9a\u6570\u6642\u9593)","-https:\/\/atcoder.jp\/contests\/abc095\/submissions\/10226556","-\"\"\"","-ans = float(\"inf\")","-# AB\u30d4\u30b6\u30922\u679a1\u7d44\u3067\u8003\u3048\u308b -> AB\u30bb\u30c3\u30c8","-# i: AB\u30bb\u30c3\u30c8\u306e\u500b\u6570","-for i in range(10**5 + 1):","-    ans = min(ans, i * (2 * C) + max(0, X - i) * A + max(0, Y - i) * B)","+AB_set = C * 2","+ans = min(","+    A * X + B * Y,","+    AB_set * max(X, Y),","+    AB_set * min(X, Y) + A * abs(X - min(X, Y)) + B * abs(Y - min(X, Y)),","+)"],"diff_only_import_comment":false,"measured_runtime_v0":0.801804817,"measured_runtime_v1":0.1832828865,"runtime_lift":4.3746845775,"key":["s270393964","s470107269"]}
{"user_id":"u130900604","problem_id":"p02748","language":"python","submission_id_v0":"s052578373","submission_id_v1":"s213675683","cpu_time_v0":863,"cpu_time_v1":430,"memory_v0":24304,"memory_v1":18608,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":50.17,"input":"def mi():return list(map(int,input().split()))\n\nimport numpy as np\n\nA,B,M=mi()\n\na=np.array(list(mi()))\n\nb=np.array(list(mi()))\n\nminab=min(a)+min(b)\n\n\n\nans=float(\"inf\")\n\n\n\nfor i in range(M):\n\n    x,y,c=mi()\n\n    tmp=a[x-1]+b[y-1]-c\n\n    ans=min(ans,tmp)\n\nprint((min(ans,minab)))\n","target":"def mi():return list(map(int,input().split()))\n\nA,B,M=mi()\n\na=list(mi())\n\nb=list(mi())\n\nans=min(a)+min(b)\n\nfor _ in range(M):\n\n    x,y,c=mi()\n\n    ans=min(ans,a[x-1]+b[y-1]-c)\n\nprint(ans)","code_v0_loc":14,"code_v1_loc":9,"code_v0_num_chars":270,"code_v1_num_chars":181,"code_v0_no_empty_lines":"def mi():\n    return list(map(int, input().split()))\n\n\nimport numpy as np\n\nA, B, M = mi()\na = np.array(list(mi()))\nb = np.array(list(mi()))\nminab = min(a) + min(b)\nans = float(\"inf\")\nfor i in range(M):\n    x, y, c = mi()\n    tmp = a[x - 1] + b[y - 1] - c\n    ans = min(ans, tmp)\nprint((min(ans, minab)))\n","code_v1_no_empty_lines":"def mi():\n    return list(map(int, input().split()))\n\n\nA, B, M = mi()\na = list(mi())\nb = list(mi())\nans = min(a) + min(b)\nfor _ in range(M):\n    x, y, c = mi()\n    ans = min(ans, a[x - 1] + b[y - 1] - c)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":35.7142857143,"diff":["-import numpy as np","-","-a = np.array(list(mi()))","-b = np.array(list(mi()))","-minab = min(a) + min(b)","-ans = float(\"inf\")","-for i in range(M):","+a = list(mi())","+b = list(mi())","+ans = min(a) + min(b)","+for _ in range(M):","-    tmp = a[x - 1] + b[y - 1] - c","-    ans = min(ans, tmp)","-print((min(ans, minab)))","+    ans = min(ans, a[x - 1] + b[y - 1] - c)","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.3690658715,"measured_runtime_v1":0.1998904405,"runtime_lift":6.8490812679,"key":["s052578373","s213675683"]}
{"user_id":"u191680842","problem_id":"p02994","language":"python","submission_id_v0":"s527614113","submission_id_v1":"s764252397","cpu_time_v0":149,"cpu_time_v1":18,"memory_v0":12440,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.92,"input":"import numpy as np\n\nn,l = list(map(int,input().split()))\n\ntaste = np.array([l+i-1 for i in range(1,n+1)])\n\ntaste[np.fabs(taste).argmin()]=0\n\nprint((taste.sum()))","target":"n,l = list(map(int,input().split()))\n\ntaste = [l+i for i in range(0,n)]\n\ntaste.sort(key=lambda x:abs(x))\n\nprint((sum(taste[1:])))","code_v0_loc":5,"code_v1_loc":4,"code_v0_num_chars":153,"code_v1_num_chars":121,"code_v0_no_empty_lines":"import numpy as np\n\nn, l = list(map(int, input().split()))\ntaste = np.array([l + i - 1 for i in range(1, n + 1)])\ntaste[np.fabs(taste).argmin()] = 0\nprint((taste.sum()))\n","code_v1_no_empty_lines":"n, l = list(map(int, input().split()))\ntaste = [l + i for i in range(0, n)]\ntaste.sort(key=lambda x: abs(x))\nprint((sum(taste[1:])))\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["-import numpy as np","-","-taste = np.array([l + i - 1 for i in range(1, n + 1)])","-taste[np.fabs(taste).argmin()] = 0","-print((taste.sum()))","+taste = [l + i for i in range(0, n)]","+taste.sort(key=lambda x: abs(x))","+print((sum(taste[1:])))"],"diff_only_import_comment":false,"measured_runtime_v0":1.7210805004,"measured_runtime_v1":0.271107127,"runtime_lift":6.3483410401,"key":["s527614113","s764252397"]}
{"user_id":"u801359367","problem_id":"p03325","language":"python","submission_id_v0":"s586527827","submission_id_v1":"s564078636","cpu_time_v0":89,"cpu_time_v1":80,"memory_v0":4148,"memory_v1":4148,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.11,"input":"N = int(eval(input()))\n\nA = list(map(int,input().split()))\n\n\n\nSUM = 0\n\nfor i in A:\n\n    count = 0\n\n    while i%2 == 0:\n\n        i\/\/=2\n\n        count += 1\n\n    SUM+=count\n\nprint(SUM)","target":"N = int(eval(input()))\n\nA = list(map(int,input().split()))\n\nSUM = 0\n\nfor i in A:\n\n    while i%2 == 0:\n\n        i\/\/=2\n\n        SUM += 1\n\nprint(SUM)","code_v0_loc":11,"code_v1_loc":8,"code_v0_num_chars":175,"code_v1_num_chars":140,"code_v0_no_empty_lines":"N = int(eval(input()))\nA = list(map(int, input().split()))\nSUM = 0\nfor i in A:\n    count = 0\n    while i % 2 == 0:\n        i \/\/= 2\n        count += 1\n    SUM += count\nprint(SUM)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = list(map(int, input().split()))\nSUM = 0\nfor i in A:\n    while i % 2 == 0:\n        i \/\/= 2\n        SUM += 1\nprint(SUM)\n","code_same":false,"relative_loc_diff_percent":27.2727272727,"diff":["-    count = 0","-        count += 1","-    SUM += count","+        SUM += 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.3107097435,"measured_runtime_v1":0.2124449382,"runtime_lift":1.4625424646,"key":["s586527827","s564078636"]}
{"user_id":"u253681061","problem_id":"p03796","language":"python","submission_id_v0":"s618901729","submission_id_v1":"s057938516","cpu_time_v0":49,"cpu_time_v1":34,"memory_v0":6900,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":30.61,"input":"n = int(eval(input()))\n\n\n\nINF = 10**9 + 7\n\n\n\nans = [0] * (10**5 + 1)\n\nans[0] = 1\n\n\n\nfor i in range(1,10**5 + 1):\n\n    ans[i] = ans[i-1] * i % INF\n\n\n\nprint((ans[n]))\n","target":"n = int(eval(input()))\n\nmod = 10**9 + 7\n\n\n\nans = 1\n\n\n\nfor i in range(1,n+1):\n\n    ans = ans * i % mod\n\n\n\nprint(ans)","code_v0_loc":11,"code_v1_loc":9,"code_v0_num_chars":157,"code_v1_num_chars":109,"code_v0_no_empty_lines":"n = int(eval(input()))\nINF = 10**9 + 7\nans = [0] * (10**5 + 1)\nans[0] = 1\nfor i in range(1, 10**5 + 1):\n    ans[i] = ans[i - 1] * i % INF\nprint((ans[n]))\n","code_v1_no_empty_lines":"n = int(eval(input()))\nmod = 10**9 + 7\nans = 1\nfor i in range(1, n + 1):\n    ans = ans * i % mod\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":18.1818181818,"diff":["-INF = 10**9 + 7","-ans = [0] * (10**5 + 1)","-ans[0] = 1","-for i in range(1, 10**5 + 1):","-    ans[i] = ans[i - 1] * i % INF","-print((ans[n]))","+mod = 10**9 + 7","+ans = 1","+for i in range(1, n + 1):","+    ans = ans * i % mod","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.8708683834,"measured_runtime_v1":0.4576160941,"runtime_lift":1.9030545354,"key":["s618901729","s057938516"]}
{"user_id":"u102461423","problem_id":"p03038","language":"python","submission_id_v0":"s819255712","submission_id_v1":"s993166511","cpu_time_v0":1171,"cpu_time_v1":206,"memory_v0":32776,"memory_v1":31536,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":82.41,"input":"import numpy as np\n\n\n\nN,M = list(map(int,input().split()))\n\n\n\nA = np.array([int(x) for x in input().split()],dtype=np.int64)\n\nA.sort()\n\n\n\nBC = np.array([[int(x) for x in input().split()] for _ in range(M)])\n\nB = BC[:,0]\n\nC = BC[:,1]\n\n\n\nidx = C.argsort()\n\nB = B[idx][::-1]\n\nC = C[idx][::-1]\n\n\n\np = 0\n\nfor b,c in zip(B,C):\n\n  A[p:p+b] = np.maximum(A[p:p+b],c)\n\n  p += b\n\n\n\nanswer = A.sum()\n\nprint(answer)\n","target":"import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nfrom operator import itemgetter\n\n\n\nN,M = list(map(int,readline().split()))\n\nA = list(map(int,readline().split()))\n\nm = list(map(int,read().split()))\n\nBC = list(zip(m,m))\n\n\n\nBC.sort(key = itemgetter(1),reverse=True)\n\n\n\nBC.append((N,-1))\n\n\n\nchange = []\n\nfor b,c in BC:\n\n    change += [c] * b\n\n    if len(change) > N:\n\n        break\n\n\n\nA += change\n\nA.sort()\n\nanswer = sum(A[-N:])\n\nprint(answer)","code_v0_loc":22,"code_v1_loc":26,"code_v0_num_chars":397,"code_v1_num_chars":501,"code_v0_no_empty_lines":"import numpy as np\n\nN, M = list(map(int, input().split()))\nA = np.array([int(x) for x in input().split()], dtype=np.int64)\nA.sort()\nBC = np.array([[int(x) for x in input().split()] for _ in range(M)])\nB = BC[:, 0]\nC = BC[:, 1]\nidx = C.argsort()\nB = B[idx][::-1]\nC = C[idx][::-1]\np = 0\nfor b, c in zip(B, C):\n    A[p : p + b] = np.maximum(A[p : p + b], c)\n    p += b\nanswer = A.sum()\nprint(answer)\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nfrom operator import itemgetter\n\nN, M = list(map(int, readline().split()))\nA = list(map(int, readline().split()))\nm = list(map(int, read().split()))\nBC = list(zip(m, m))\nBC.sort(key=itemgetter(1), reverse=True)\nBC.append((N, -1))\nchange = []\nfor b, c in BC:\n    change += [c] * b\n    if len(change) > N:\n        break\nA += change\nA.sort()\nanswer = sum(A[-N:])\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":15.3846153846,"diff":["-import numpy as np","+import sys","-N, M = list(map(int, input().split()))","-A = np.array([int(x) for x in input().split()], dtype=np.int64)","+read = sys.stdin.buffer.read","+readline = sys.stdin.buffer.readline","+readlines = sys.stdin.buffer.readlines","+from operator import itemgetter","+","+N, M = list(map(int, readline().split()))","+A = list(map(int, readline().split()))","+m = list(map(int, read().split()))","+BC = list(zip(m, m))","+BC.sort(key=itemgetter(1), reverse=True)","+BC.append((N, -1))","+change = []","+for b, c in BC:","+    change += [c] * b","+    if len(change) > N:","+        break","+A += change","-BC = np.array([[int(x) for x in input().split()] for _ in range(M)])","-B = BC[:, 0]","-C = BC[:, 1]","-idx = C.argsort()","-B = B[idx][::-1]","-C = C[idx][::-1]","-p = 0","-for b, c in zip(B, C):","-    A[p : p + b] = np.maximum(A[p : p + b], c)","-    p += b","-answer = A.sum()","+answer = sum(A[-N:])"],"diff_only_import_comment":false,"measured_runtime_v0":2.1412646892,"measured_runtime_v1":0.3274382627,"runtime_lift":6.5394455476,"key":["s819255712","s993166511"]}
{"user_id":"u813450984","problem_id":"p03371","language":"python","submission_id_v0":"s722861535","submission_id_v1":"s015018251","cpu_time_v0":77,"cpu_time_v1":17,"memory_v0":3060,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":77.92,"input":"a, b, c, x, y = list(map(int, input().split()))\n\nans = a * x + b * y\n\nm = max(x, y)\n\nfor i in range(1, m+1):\n\n  x -= 1\n\n  y -= 1\n\n  if x < 0:\n\n    x = 0\n\n  if y < 0:\n\n    y = 0\n\n  temp = c*(i*2) + x*a + y*b\n\n  if temp < ans:\n\n    ans = temp\n\n\n\nprint(ans)\n","target":"a, b, c, x, y = list(map(int, input().split()))\n\nans = a * x + b * y\n\nans = min(c * max(x, y) * 2, ans)\n\nif x < y:\n\n    ans = min(c * x * 2 + (y - x) * b, ans)\n\nelse:\n\n    ans = min(c * y * 2 + (x - y) * a, ans)\n\n\n\nprint(ans)","code_v0_loc":15,"code_v1_loc":9,"code_v0_num_chars":249,"code_v1_num_chars":219,"code_v0_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nans = a * x + b * y\nm = max(x, y)\nfor i in range(1, m + 1):\n    x -= 1\n    y -= 1\n    if x < 0:\n        x = 0\n    if y < 0:\n        y = 0\n    temp = c * (i * 2) + x * a + y * b\n    if temp < ans:\n        ans = temp\nprint(ans)\n","code_v1_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nans = a * x + b * y\nans = min(c * max(x, y) * 2, ans)\nif x < y:\n    ans = min(c * x * 2 + (y - x) * b, ans)\nelse:\n    ans = min(c * y * 2 + (x - y) * a, ans)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":40.0,"diff":["-m = max(x, y)","-for i in range(1, m + 1):","-    x -= 1","-    y -= 1","-    if x < 0:","-        x = 0","-    if y < 0:","-        y = 0","-    temp = c * (i * 2) + x * a + y * b","-    if temp < ans:","-        ans = temp","+ans = min(c * max(x, y) * 2, ans)","+if x < y:","+    ans = min(c * x * 2 + (y - x) * b, ans)","+else:","+    ans = min(c * y * 2 + (x - y) * a, ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2966257923,"measured_runtime_v1":0.2002350025,"runtime_lift":1.4813883113,"key":["s722861535","s015018251"]}
{"user_id":"u989345508","problem_id":"p03798","language":"python","submission_id_v0":"s244589711","submission_id_v1":"s160001244","cpu_time_v0":1408,"cpu_time_v1":1267,"memory_v0":3892,"memory_v1":3880,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.01,"input":"n=int(eval(input()))\n\ns=eval(input())\n\nx=[\"SS\",\"SW\",\"WS\",\"WW\"]\n\n\n\ndef check0(i):\n\n    if x[i][0]==\"S\":\n\n        if s[0]==\"o\":\n\n            if x[i][-1]==\"S\":\n\n                return x[i][1]==\"S\"\n\n            else:\n\n                return x[i][1]==\"W\"\n\n        else:\n\n            if x[i][-1]==\"S\":\n\n                return x[i][1]==\"W\"\n\n            else:\n\n                return x[i][1]==\"S\"\n\n    else:\n\n        if s[0]==\"o\":\n\n            if x[i][-1]==\"S\":\n\n                return x[i][1]==\"W\"\n\n            else:\n\n                return x[i][1]==\"S\"\n\n        else:\n\n            if x[i][-1]==\"S\":\n\n                return x[i][1]==\"S\"\n\n            else:\n\n                return x[i][1]==\"W\"\n\ndef check1(i):\n\n    if x[i][n-1]==\"S\":\n\n        if s[n-1]==\"o\":\n\n            if x[i][n-2]==\"S\":\n\n                return x[i][0]==\"S\"\n\n            else:\n\n                return x[i][0]==\"W\"\n\n        else:\n\n            if x[i][n-2]==\"S\":\n\n                return x[i][0]==\"W\"\n\n            else:\n\n                return x[i][0]==\"S\"\n\n    else:\n\n        if s[n-1]==\"o\":\n\n            if x[i][n-2]==\"S\":\n\n                return x[i][0]==\"W\"\n\n            else:\n\n                return x[i][0]==\"S\"\n\n        else:\n\n            if x[i][n-2]==\"S\":\n\n                return x[i][0]==\"S\"\n\n            else:\n\n                return x[i][0]==\"W\"\n\n\n\n\n\nfor i in range(4):\n\n    for j in range(n-2):\n\n        if x[i][j+1]==\"S\":\n\n            if s[j+1]==\"o\":\n\n                if x[i][j]==\"S\":\n\n                    x[i]+=\"S\"\n\n                else:\n\n                    x[i]+=\"W\"\n\n            else:\n\n                if x[i][j]==\"S\":\n\n                    x[i]+=\"W\"\n\n                else:\n\n                    x[i]+=\"S\"\n\n        else:\n\n            if s[j+1]==\"o\":\n\n                if x[i][j]==\"S\":\n\n                    x[i]+=\"W\"\n\n                else:\n\n                    x[i]+=\"S\"\n\n            else:\n\n                if x[i][j]==\"S\":\n\n                    x[i]+=\"S\"\n\n                else:\n\n                    x[i]+=\"W\"\n\n    #print(x[i])\n\n    if check0(i) and check1(i):\n\n        print((x[i]))\n\n        break\n\nelse:\n\n    print((-1))\n","target":"n=int(eval(input()))\n\ns=eval(input())\n\nx=[\"SS\",\"SW\",\"WS\",\"WW\"]\n\n\n\ndef check0(i):\n\n    if x[i][0]==\"S\":\n\n        if s[0]==\"o\":\n\n            if x[i][-1]==\"S\":\n\n                return x[i][1]==\"S\"\n\n            else:\n\n                return x[i][1]==\"W\"\n\n        else:\n\n            if x[i][-1]==\"S\":\n\n                return x[i][1]==\"W\"\n\n            else:\n\n                return x[i][1]==\"S\"\n\n    else:\n\n        if s[0]==\"o\":\n\n            if x[i][-1]==\"S\":\n\n                return x[i][1]==\"W\"\n\n            else:\n\n                return x[i][1]==\"S\"\n\n        else:\n\n            if x[i][-1]==\"S\":\n\n                return x[i][1]==\"S\"\n\n            else:\n\n                return x[i][1]==\"W\"\n\ndef check1(i):\n\n    if x[i][n-1]==\"S\":\n\n        if s[n-1]==\"o\":\n\n            if x[i][n-2]==\"S\":\n\n                return x[i][0]==\"S\"\n\n            else:\n\n                return x[i][0]==\"W\"\n\n        else:\n\n            if x[i][n-2]==\"S\":\n\n                return x[i][0]==\"W\"\n\n            else:\n\n                return x[i][0]==\"S\"\n\n    else:\n\n        if s[n-1]==\"o\":\n\n            if x[i][n-2]==\"S\":\n\n                return x[i][0]==\"W\"\n\n            else:\n\n                return x[i][0]==\"S\"\n\n        else:\n\n            if x[i][n-2]==\"S\":\n\n                return x[i][0]==\"S\"\n\n            else:\n\n                return x[i][0]==\"W\"\n\n\n\na=[\"S\",\"W\"]\n\nfor i in range(4):\n\n    for j in range(n-2):\n\n        if x[i][j+1]==\"S\":\n\n            if s[j+1]==\"o\":\n\n                x[i]+=a[x[i][j]!=\"S\"]\n\n            else:\n\n                x[i]+=a[x[i][j]==\"S\"]\n\n        else:\n\n            if s[j+1]==\"o\":\n\n                x[i]+=a[x[i][j]==\"S\"]\n\n            else:\n\n                x[i]+=a[x[i][j]!=\"S\"]\n\n    if check0(i) and check1(i):\n\n        print((x[i]))\n\n        break\n\nelse:\n\n    print((-1))\n","code_v0_loc":82,"code_v1_loc":69,"code_v0_num_chars":2079,"code_v1_num_chars":1752,"code_v0_no_empty_lines":"n = int(eval(input()))\ns = eval(input())\nx = [\"SS\", \"SW\", \"WS\", \"WW\"]\n\n\ndef check0(i):\n    if x[i][0] == \"S\":\n        if s[0] == \"o\":\n            if x[i][-1] == \"S\":\n                return x[i][1] == \"S\"\n            else:\n                return x[i][1] == \"W\"\n        else:\n            if x[i][-1] == \"S\":\n                return x[i][1] == \"W\"\n            else:\n                return x[i][1] == \"S\"\n    else:\n        if s[0] == \"o\":\n            if x[i][-1] == \"S\":\n                return x[i][1] == \"W\"\n            else:\n                return x[i][1] == \"S\"\n        else:\n            if x[i][-1] == \"S\":\n                return x[i][1] == \"S\"\n            else:\n                return x[i][1] == \"W\"\n\n\ndef check1(i):\n    if x[i][n - 1] == \"S\":\n        if s[n - 1] == \"o\":\n            if x[i][n - 2] == \"S\":\n                return x[i][0] == \"S\"\n            else:\n                return x[i][0] == \"W\"\n        else:\n            if x[i][n - 2] == \"S\":\n                return x[i][0] == \"W\"\n            else:\n                return x[i][0] == \"S\"\n    else:\n        if s[n - 1] == \"o\":\n            if x[i][n - 2] == \"S\":\n                return x[i][0] == \"W\"\n            else:\n                return x[i][0] == \"S\"\n        else:\n            if x[i][n - 2] == \"S\":\n                return x[i][0] == \"S\"\n            else:\n                return x[i][0] == \"W\"\n\n\nfor i in range(4):\n    for j in range(n - 2):\n        if x[i][j + 1] == \"S\":\n            if s[j + 1] == \"o\":\n                if x[i][j] == \"S\":\n                    x[i] += \"S\"\n                else:\n                    x[i] += \"W\"\n            else:\n                if x[i][j] == \"S\":\n                    x[i] += \"W\"\n                else:\n                    x[i] += \"S\"\n        else:\n            if s[j + 1] == \"o\":\n                if x[i][j] == \"S\":\n                    x[i] += \"W\"\n                else:\n                    x[i] += \"S\"\n            else:\n                if x[i][j] == \"S\":\n                    x[i] += \"S\"\n                else:\n                    x[i] += \"W\"\n    # print(x[i])\n    if check0(i) and check1(i):\n        print((x[i]))\n        break\nelse:\n    print((-1))\n","code_v1_no_empty_lines":"n = int(eval(input()))\ns = eval(input())\nx = [\"SS\", \"SW\", \"WS\", \"WW\"]\n\n\ndef check0(i):\n    if x[i][0] == \"S\":\n        if s[0] == \"o\":\n            if x[i][-1] == \"S\":\n                return x[i][1] == \"S\"\n            else:\n                return x[i][1] == \"W\"\n        else:\n            if x[i][-1] == \"S\":\n                return x[i][1] == \"W\"\n            else:\n                return x[i][1] == \"S\"\n    else:\n        if s[0] == \"o\":\n            if x[i][-1] == \"S\":\n                return x[i][1] == \"W\"\n            else:\n                return x[i][1] == \"S\"\n        else:\n            if x[i][-1] == \"S\":\n                return x[i][1] == \"S\"\n            else:\n                return x[i][1] == \"W\"\n\n\ndef check1(i):\n    if x[i][n - 1] == \"S\":\n        if s[n - 1] == \"o\":\n            if x[i][n - 2] == \"S\":\n                return x[i][0] == \"S\"\n            else:\n                return x[i][0] == \"W\"\n        else:\n            if x[i][n - 2] == \"S\":\n                return x[i][0] == \"W\"\n            else:\n                return x[i][0] == \"S\"\n    else:\n        if s[n - 1] == \"o\":\n            if x[i][n - 2] == \"S\":\n                return x[i][0] == \"W\"\n            else:\n                return x[i][0] == \"S\"\n        else:\n            if x[i][n - 2] == \"S\":\n                return x[i][0] == \"S\"\n            else:\n                return x[i][0] == \"W\"\n\n\na = [\"S\", \"W\"]\nfor i in range(4):\n    for j in range(n - 2):\n        if x[i][j + 1] == \"S\":\n            if s[j + 1] == \"o\":\n                x[i] += a[x[i][j] != \"S\"]\n            else:\n                x[i] += a[x[i][j] == \"S\"]\n        else:\n            if s[j + 1] == \"o\":\n                x[i] += a[x[i][j] == \"S\"]\n            else:\n                x[i] += a[x[i][j] != \"S\"]\n    if check0(i) and check1(i):\n        print((x[i]))\n        break\nelse:\n    print((-1))\n","code_same":false,"relative_loc_diff_percent":15.8536585366,"diff":["+a = [\"S\", \"W\"]","-                if x[i][j] == \"S\":","-                    x[i] += \"S\"","-                else:","-                    x[i] += \"W\"","+                x[i] += a[x[i][j] != \"S\"]","-                if x[i][j] == \"S\":","-                    x[i] += \"W\"","-                else:","-                    x[i] += \"S\"","+                x[i] += a[x[i][j] == \"S\"]","-                if x[i][j] == \"S\":","-                    x[i] += \"W\"","-                else:","-                    x[i] += \"S\"","+                x[i] += a[x[i][j] == \"S\"]","-                if x[i][j] == \"S\":","-                    x[i] += \"S\"","-                else:","-                    x[i] += \"W\"","-    # print(x[i])","+                x[i] += a[x[i][j] != \"S\"]"],"diff_only_import_comment":false,"measured_runtime_v0":0.206637172,"measured_runtime_v1":0.0056119666,"runtime_lift":36.8208127342,"key":["s244589711","s160001244"]}
{"user_id":"u260216890","problem_id":"p02881","language":"python","submission_id_v0":"s285612655","submission_id_v1":"s586502539","cpu_time_v0":1324,"cpu_time_v1":196,"memory_v0":21280,"memory_v1":40044,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":85.2,"input":"import numpy as np\n\nN=int(eval(input()))\n\nroot=int(np.sqrt(N)\/\/1)\n\na=N\n\nb=N\n\nfor i in range(root, 0, -1):\n\n    if N%i==0:\n\n        a=i\n\n        b=N\/\/i\n\n        break\n\nprint((a-1+b-1))","target":"N=int(eval(input()))\n\nroot=int((N**0.5)\/\/1)\n\na=N\n\nb=N\n\nfor i in range(root, 0, -1):\n\n    if N%i==0:\n\n        a=i\n\n        b=N\/\/i\n\n        break\n\nprint((a-1+b-1))\n","code_v0_loc":11,"code_v1_loc":10,"code_v0_num_chars":175,"code_v1_num_chars":154,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nroot = int(np.sqrt(N) \/\/ 1)\na = N\nb = N\nfor i in range(root, 0, -1):\n    if N % i == 0:\n        a = i\n        b = N \/\/ i\n        break\nprint((a - 1 + b - 1))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nroot = int((N**0.5) \/\/ 1)\na = N\nb = N\nfor i in range(root, 0, -1):\n    if N % i == 0:\n        a = i\n        b = N \/\/ i\n        break\nprint((a - 1 + b - 1))\n","code_same":false,"relative_loc_diff_percent":9.0909090909,"diff":["-import numpy as np","-","-root = int(np.sqrt(N) \/\/ 1)","+root = int((N**0.5) \/\/ 1)"],"diff_only_import_comment":false,"measured_runtime_v0":2.2620700173,"measured_runtime_v1":0.2775772495,"runtime_lift":8.149335081,"key":["s285612655","s586502539"]}
{"user_id":"u593934357","problem_id":"p02952","language":"python","submission_id_v0":"s443742997","submission_id_v1":"s952596957","cpu_time_v0":201,"cpu_time_v1":89,"memory_v0":51968,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":55.72,"input":"n_str = eval(input())\n\nn_int = int(n_str)\n\n# 1 ~ 50000\n\n# \u6841\u6570\u304c\u5947\u6570= 1\u6841, 3\u6841, 5\u6841\n\n# 1 ~ 9, 100 ~ 999,10000 ~ 99999\u306e90909\u500b\u3057\u304b\u306a\u3044\u306e\u3067\u5168\u63a2\u7d22\u3044\u3051\u308b\u304b?\n\nexs_list = []\n\nfor i in range(1, 100000):\n\n    if len(str(i)) % 2 == 1:\n\n        exs_list.append(i)\n\n\n\nexs = {i: i for i in exs_list}\n\n\n\nn_s = []\n\nans = 0\n\nfor i in range(1, n_int + 1):\n\n    if len(str(i)) % 2 == 0:\n\n        continue\n\n    if i in exs:\n\n        ans += 1\n\n\n\nprint(ans)\n\n\n\n\n\n\n\n\n\n\n","target":"def digit_sum(n):\n\n    # \u5404\u6841\u306e\u548c\u3092\u6c42\u3081\u308b\n\n    # \u8a08\u7b97\u91cf: O(logN)\n\n    ans = 0\n\n    while n > 0:\n\n        ans += 1\n\n        n \/\/= 10\n\n    return ans\n\n\n\nn = int(eval(input()))\n\ncnt = 0\n\n\n\nfor i in range(1, n+1):\n\n    cnt += digit_sum(i) % 2\n\n\n\nprint(cnt)\n","code_v0_loc":26,"code_v1_loc":16,"code_v0_num_chars":420,"code_v1_num_chars":236,"code_v0_no_empty_lines":"n_str = eval(input())\nn_int = int(n_str)\n# 1 ~ 50000\n# \u6841\u6570\u304c\u5947\u6570= 1\u6841, 3\u6841, 5\u6841\n# 1 ~ 9, 100 ~ 999,10000 ~ 99999\u306e90909\u500b\u3057\u304b\u306a\u3044\u306e\u3067\u5168\u63a2\u7d22\u3044\u3051\u308b\u304b?\nexs_list = []\nfor i in range(1, 100000):\n    if len(str(i)) % 2 == 1:\n        exs_list.append(i)\nexs = {i: i for i in exs_list}\nn_s = []\nans = 0\nfor i in range(1, n_int + 1):\n    if len(str(i)) % 2 == 0:\n        continue\n    if i in exs:\n        ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"def digit_sum(n):\n    # \u5404\u6841\u306e\u548c\u3092\u6c42\u3081\u308b\n    # \u8a08\u7b97\u91cf: O(logN)\n    ans = 0\n    while n > 0:\n        ans += 1\n        n \/\/= 10\n    return ans\n\n\nn = int(eval(input()))\ncnt = 0\nfor i in range(1, n + 1):\n    cnt += digit_sum(i) % 2\nprint(cnt)\n","code_same":false,"relative_loc_diff_percent":38.4615384615,"diff":["-n_str = eval(input())","-n_int = int(n_str)","-# 1 ~ 50000","-# \u6841\u6570\u304c\u5947\u6570= 1\u6841, 3\u6841, 5\u6841","-# 1 ~ 9, 100 ~ 999,10000 ~ 99999\u306e90909\u500b\u3057\u304b\u306a\u3044\u306e\u3067\u5168\u63a2\u7d22\u3044\u3051\u308b\u304b?","-exs_list = []","-for i in range(1, 100000):","-    if len(str(i)) % 2 == 1:","-        exs_list.append(i)","-exs = {i: i for i in exs_list}","-n_s = []","-ans = 0","-for i in range(1, n_int + 1):","-    if len(str(i)) % 2 == 0:","-        continue","-    if i in exs:","+def digit_sum(n):","+    # \u5404\u6841\u306e\u548c\u3092\u6c42\u3081\u308b","+    # \u8a08\u7b97\u91cf: O(logN)","+    ans = 0","+    while n > 0:","-print(ans)","+        n \/\/= 10","+    return ans","+","+","+n = int(eval(input()))","+cnt = 0","+for i in range(1, n + 1):","+    cnt += digit_sum(i) % 2","+print(cnt)"],"diff_only_import_comment":false,"measured_runtime_v0":1.187838645,"measured_runtime_v1":0.4033198857,"runtime_lift":2.9451526864,"key":["s443742997","s952596957"]}
{"user_id":"u318414416","problem_id":"p03162","language":"python","submission_id_v0":"s337419843","submission_id_v1":"s763303888","cpu_time_v0":672,"cpu_time_v1":308,"memory_v0":47336,"memory_v1":30580,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":54.17,"input":"# coding: utf-8\n\n\n\nimport sys\n\ninput = sys.stdin.readline\n\n\n\ndef f(n, abc):\n\n    dp = [[0] * 3 for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n\n        for j in range(3):\n\n            dp[i][j] = max(dp[i - 1][k] + abc[i - 1][j] \\\n\n                for k in range(3) if k != j)\n\n    return(max(dp[n]))\n\n\n\nn = int(eval(input()))    # 1 <= n <= 10^5\n\nabc = [list(map(int, input().rstrip().split())) for _ in range(n)]\n\n\n\nprint((f(n, abc)))\n","target":"# coding: utf-8\n\nimport sys\n\ninput = sys.stdin.readline\n\n\n\ndef f(n, abc):\n\n    dp = [0] * 3\n\n    for i in range(1, n + 1):\n\n        a, b, c = abc[i - 1]\n\n        dp = [ max(dp[1] + a, dp[2] + a), \\\n\n               max(dp[0] + b, dp[2] + b), \\\n\n               max(dp[0] + c, dp[1] + c) ]\n\n    return(max(dp))\n\n\n\nn = int(eval(input()))    # 1 <= n <= 10^5\n\nabc = [list(map(int, input().rstrip().split())) for _ in range(n)]\n\n\n\nprint((f(n, abc)))\n","code_v0_loc":17,"code_v1_loc":17,"code_v0_num_chars":434,"code_v1_num_chars":436,"code_v0_no_empty_lines":"# coding: utf-8\nimport sys\n\ninput = sys.stdin.readline\n\n\ndef f(n, abc):\n    dp = [[0] * 3 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(3):\n            dp[i][j] = max(dp[i - 1][k] + abc[i - 1][j] for k in range(3) if k != j)\n    return max(dp[n])\n\n\nn = int(eval(input()))  # 1 <= n <= 10^5\nabc = [list(map(int, input().rstrip().split())) for _ in range(n)]\nprint((f(n, abc)))\n","code_v1_no_empty_lines":"# coding: utf-8\nimport sys\n\ninput = sys.stdin.readline\n\n\ndef f(n, abc):\n    dp = [0] * 3\n    for i in range(1, n + 1):\n        a, b, c = abc[i - 1]\n        dp = [\n            max(dp[1] + a, dp[2] + a),\n            max(dp[0] + b, dp[2] + b),\n            max(dp[0] + c, dp[1] + c),\n        ]\n    return max(dp)\n\n\nn = int(eval(input()))  # 1 <= n <= 10^5\nabc = [list(map(int, input().rstrip().split())) for _ in range(n)]\nprint((f(n, abc)))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    dp = [[0] * 3 for _ in range(n + 1)]","+    dp = [0] * 3","-        for j in range(3):","-            dp[i][j] = max(dp[i - 1][k] + abc[i - 1][j] for k in range(3) if k != j)","-    return max(dp[n])","+        a, b, c = abc[i - 1]","+        dp = [","+            max(dp[1] + a, dp[2] + a),","+            max(dp[0] + b, dp[2] + b),","+            max(dp[0] + c, dp[1] + c),","+        ]","+    return max(dp)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2527067475,"measured_runtime_v1":0.1473037755,"runtime_lift":1.7155483393,"key":["s337419843","s763303888"]}
{"user_id":"u826929627","problem_id":"p03162","language":"python","submission_id_v0":"s202497340","submission_id_v1":"s462008938","cpu_time_v0":1254,"cpu_time_v1":403,"memory_v0":42120,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":67.86,"input":"N = int(eval(input()))\n\nABC = []\n\n\n\nfor n in range(N):\n\n  ABC.append(list(map(int, input().split())))\n\n\n\nimport numpy as np\n\nABC = np.array(ABC)\n\n\n\n## \u300c\u65e5\u4ed8\u300d\u3001\u300c\u9078\u629e\u3057\u305f\u884c\u52d5\u300d\u3054\u3068\u306e\u5e78\u798f\u5ea6\u306e\u6700\u5927\u5024\u3092\u683c\u7d0d\u3059\u308barray\n\nhp=np.zeros((N,3),dtype=int)\n\nhp[0] = ABC[0]\n\n\n\nfor n in range(1,N):# \u65e5\u5358\u4f4d\u3067\u306e\u30eb\u30fc\u30d7\n\n  for c in range(3): # \u9078\u629e\u80a2\u3054\u3068\u306e\u30eb\u30fc\u30d7\n\n    ## n\u65e5\u306bc\u3092\u9078\u629e\u3057\u305f\u5834\u5408\u306e\u5e78\u798f\u5ea6\u3002\u3064\u307e\u308a\u524d\u65e5\u306fc\u4ee5\u5916\u3092\u9078\u629e\u3057\u3066\u3044\u308b\n\n    if c == 0:\n\n      hp[n][0] = max(hp[n-1][1],hp[n-1][2]) + ABC[n][0]\n\n    elif c == 1:\n\n      hp[n][1] = max(hp[n-1][0],hp[n-1][2]) + ABC[n][1]\n\n    elif c == 2:\n\n      hp[n][2] = max(hp[n-1][0],hp[n-1][1]) + ABC[n][2]\n\n\n\n\n\nans = max(hp[-1])\n\nprint(ans)","target":"N = int(eval(input()))\n\n\n\ndpa,dpb,dpc = 0,0,0\n\nfor n in range(N):\n\n  a,b,c = list(map(int, input().split()))  \n\n  dpa,dpb,dpc = max(dpb+a,dpc+a),max(dpa+b,dpc+b),max(dpa+c,dpb+c)\n\n  \n\nans = max(dpa,dpb,dpc)\n\nprint(ans)","code_v0_loc":26,"code_v1_loc":9,"code_v0_num_chars":591,"code_v1_num_chars":206,"code_v0_no_empty_lines":"N = int(eval(input()))\nABC = []\nfor n in range(N):\n    ABC.append(list(map(int, input().split())))\nimport numpy as np\n\nABC = np.array(ABC)\n## \u300c\u65e5\u4ed8\u300d\u3001\u300c\u9078\u629e\u3057\u305f\u884c\u52d5\u300d\u3054\u3068\u306e\u5e78\u798f\u5ea6\u306e\u6700\u5927\u5024\u3092\u683c\u7d0d\u3059\u308barray\nhp = np.zeros((N, 3), dtype=int)\nhp[0] = ABC[0]\nfor n in range(1, N):  # \u65e5\u5358\u4f4d\u3067\u306e\u30eb\u30fc\u30d7\n    for c in range(3):  # \u9078\u629e\u80a2\u3054\u3068\u306e\u30eb\u30fc\u30d7\n        ## n\u65e5\u306bc\u3092\u9078\u629e\u3057\u305f\u5834\u5408\u306e\u5e78\u798f\u5ea6\u3002\u3064\u307e\u308a\u524d\u65e5\u306fc\u4ee5\u5916\u3092\u9078\u629e\u3057\u3066\u3044\u308b\n        if c == 0:\n            hp[n][0] = max(hp[n - 1][1], hp[n - 1][2]) + ABC[n][0]\n        elif c == 1:\n            hp[n][1] = max(hp[n - 1][0], hp[n - 1][2]) + ABC[n][1]\n        elif c == 2:\n            hp[n][2] = max(hp[n - 1][0], hp[n - 1][1]) + ABC[n][2]\nans = max(hp[-1])\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\ndpa, dpb, dpc = 0, 0, 0\nfor n in range(N):\n    a, b, c = list(map(int, input().split()))\n    dpa, dpb, dpc = max(dpb + a, dpc + a), max(dpa + b, dpc + b), max(dpa + c, dpb + c)\nans = max(dpa, dpb, dpc)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":65.3846153846,"diff":["-ABC = []","+dpa, dpb, dpc = 0, 0, 0","-    ABC.append(list(map(int, input().split())))","-import numpy as np","-","-ABC = np.array(ABC)","-## \u300c\u65e5\u4ed8\u300d\u3001\u300c\u9078\u629e\u3057\u305f\u884c\u52d5\u300d\u3054\u3068\u306e\u5e78\u798f\u5ea6\u306e\u6700\u5927\u5024\u3092\u683c\u7d0d\u3059\u308barray","-hp = np.zeros((N, 3), dtype=int)","-hp[0] = ABC[0]","-for n in range(1, N):  # \u65e5\u5358\u4f4d\u3067\u306e\u30eb\u30fc\u30d7","-    for c in range(3):  # \u9078\u629e\u80a2\u3054\u3068\u306e\u30eb\u30fc\u30d7","-        ## n\u65e5\u306bc\u3092\u9078\u629e\u3057\u305f\u5834\u5408\u306e\u5e78\u798f\u5ea6\u3002\u3064\u307e\u308a\u524d\u65e5\u306fc\u4ee5\u5916\u3092\u9078\u629e\u3057\u3066\u3044\u308b","-        if c == 0:","-            hp[n][0] = max(hp[n - 1][1], hp[n - 1][2]) + ABC[n][0]","-        elif c == 1:","-            hp[n][1] = max(hp[n - 1][0], hp[n - 1][2]) + ABC[n][1]","-        elif c == 2:","-            hp[n][2] = max(hp[n - 1][0], hp[n - 1][1]) + ABC[n][2]","-ans = max(hp[-1])","+    a, b, c = list(map(int, input().split()))","+    dpa, dpb, dpc = max(dpb + a, dpc + a), max(dpa + b, dpc + b), max(dpa + c, dpb + c)","+ans = max(dpa, dpb, dpc)"],"diff_only_import_comment":false,"measured_runtime_v0":1.8550028729,"measured_runtime_v1":0.2768508897,"runtime_lift":6.7003681115,"key":["s202497340","s462008938"]}
{"user_id":"u945199633","problem_id":"p02595","language":"python","submission_id_v0":"s028374925","submission_id_v1":"s480019615","cpu_time_v0":580,"cpu_time_v1":443,"memory_v0":45308,"memory_v1":9156,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":23.62,"input":"N, D = list(map(int, input().split()))\n\npoint = []\n\nfor i in range(N):\n\n    point.append(list(map(int, input().split())))\n\n\n\nct = 0\n\nD2 = D * D\n\nfor i in point:\n\n    if (i[0]**2 + i[1]**2) <= D2:\n\n        ct += 1\n\n\n\nprint(ct)","target":"N, D = list(map(int, input().split()))\n\n\n\nct = 0\n\nD2 = D * D\n\nfor i in range(N):\n\n    X, Y = list(map(int, input().split()))\n\n    if (X**2 + Y**2) <= D2:\n\n        ct += 1\n\n\n\nprint(ct)","code_v0_loc":12,"code_v1_loc":10,"code_v0_num_chars":219,"code_v1_num_chars":171,"code_v0_no_empty_lines":"N, D = list(map(int, input().split()))\npoint = []\nfor i in range(N):\n    point.append(list(map(int, input().split())))\nct = 0\nD2 = D * D\nfor i in point:\n    if (i[0] ** 2 + i[1] ** 2) <= D2:\n        ct += 1\nprint(ct)\n","code_v1_no_empty_lines":"N, D = list(map(int, input().split()))\nct = 0\nD2 = D * D\nfor i in range(N):\n    X, Y = list(map(int, input().split()))\n    if (X**2 + Y**2) <= D2:\n        ct += 1\nprint(ct)\n","code_same":false,"relative_loc_diff_percent":16.6666666667,"diff":["-point = []","-for i in range(N):","-    point.append(list(map(int, input().split())))","-for i in point:","-    if (i[0] ** 2 + i[1] ** 2) <= D2:","+for i in range(N):","+    X, Y = list(map(int, input().split()))","+    if (X**2 + Y**2) <= D2:"],"diff_only_import_comment":false,"measured_runtime_v0":0.399467237,"measured_runtime_v1":0.2084539161,"runtime_lift":1.9163335691,"key":["s028374925","s480019615"]}
{"user_id":"u624696727","problem_id":"p02767","language":"python","submission_id_v0":"s196711845","submission_id_v1":"s619004796","cpu_time_v0":338,"cpu_time_v1":149,"memory_v0":22124,"memory_v1":12220,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":55.92,"input":"import sys\n\nimport numpy as np\n\n\n\nsys.setrecursionlimit(10 ** 6)\n\nint1 = lambda x: int(x) - 1\n\nprintV = lambda x: print(*x, sep=\"\\n\")\n\nprintH = lambda x: print(\" \".join(map(str,x)))\n\ndef IS(): return sys.stdin.readline()[:-1]\n\ndef II(): return int(sys.stdin.readline())\n\ndef MI(): return map(int, sys.stdin.readline().split())\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\n\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\n\ndef LII(rows_number): return [II() for _ in range(rows_number)]\n\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\n\n\n\ndef main():\n\n\tN = II()\n\n\tX = LI()\n\n\tX = np.array(X, dtype=\"int32\")\n\n\tm = round(np.sum(X) \/ N)\n\n\tprint(int(np.sum((X-m)**2)))\n\n\n\nif __name__ == '__main__':\n\n\tmain()\n","target":"import sys\n\nimport numpy as np\n\n\n\nsys.setrecursionlimit(10 ** 6)\n\nint1 = lambda x: int(x) - 1\n\nprintV = lambda x: print(*x, sep=\"\\n\")\n\nprintH = lambda x: print(\" \".join(map(str,x)))\n\ndef IS(): return sys.stdin.readline()[:-1]\n\ndef II(): return int(sys.stdin.readline())\n\ndef MI(): return map(int, sys.stdin.readline().split())\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\n\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\n\ndef LII(rows_number): return [II() for _ in range(rows_number)]\n\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\n\n\n\ndef main():\n\n\tN = II()\n\n\tX = LI()\n\n\tX = np.array(X)\n\n\tm = round(np.sum(X) \/ N)\n\n\tprint(int(np.sum((X-m)**2)))\n\n\n\nif __name__ == '__main__':\n\n\tmain()\n","code_v0_loc":25,"code_v1_loc":25,"code_v0_num_chars":818,"code_v1_num_chars":803,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nsys.setrecursionlimit(10**6)\nint1 = lambda x: int(x) - 1\nprintV = lambda x: print(*x, sep=\"\\n\")\nprintH = lambda x: print(\" \".join(map(str, x)))\n\n\ndef IS():\n    return sys.stdin.readline()[:-1]\n\n\ndef II():\n    return int(sys.stdin.readline())\n\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef LI1():\n    return list(map(int1, sys.stdin.readline().split()))\n\n\ndef LII(rows_number):\n    return [II() for _ in range(rows_number)]\n\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\n\ndef LLI1(rows_number):\n    return [LI1() for _ in range(rows_number)]\n\n\ndef main():\n    N = II()\n    X = LI()\n    X = np.array(X, dtype=\"int32\")\n    m = round(np.sum(X) \/ N)\n    print(int(np.sum((X - m) ** 2)))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\nimport numpy as np\n\nsys.setrecursionlimit(10**6)\nint1 = lambda x: int(x) - 1\nprintV = lambda x: print(*x, sep=\"\\n\")\nprintH = lambda x: print(\" \".join(map(str, x)))\n\n\ndef IS():\n    return sys.stdin.readline()[:-1]\n\n\ndef II():\n    return int(sys.stdin.readline())\n\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef LI1():\n    return list(map(int1, sys.stdin.readline().split()))\n\n\ndef LII(rows_number):\n    return [II() for _ in range(rows_number)]\n\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\n\ndef LLI1(rows_number):\n    return [LI1() for _ in range(rows_number)]\n\n\ndef main():\n    N = II()\n    X = LI()\n    X = np.array(X)\n    m = round(np.sum(X) \/ N)\n    print(int(np.sum((X - m) ** 2)))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    X = np.array(X, dtype=\"int32\")","+    X = np.array(X)"],"diff_only_import_comment":false,"measured_runtime_v0":2.6973853536,"measured_runtime_v1":1.5154907587,"runtime_lift":1.7798758179,"key":["s196711845","s619004796"]}
{"user_id":"u698176039","problem_id":"p03162","language":"python","submission_id_v0":"s642203251","submission_id_v1":"s153299342","cpu_time_v0":638,"cpu_time_v1":395,"memory_v0":74456,"memory_v1":70108,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":38.09,"input":"N = int(eval(input()))\n\na = [list(map(int,input().split())) for _ in range(N)]\n\n\n\ndp = [[0]*3 for _ in range(100010)] \n\n# dp[i][j] : i\u65e5\u76ee\u306bj\u756a\u76ee\u306e\u6d3b\u52d5\u3092\u3057\u305f\u3068\u304d\u306e\u5e78\u798f\u5ea6\u306e\u7dcf\u548c\n\nidx = [[1,2],[2,0],[0,1]]\n\n\n\nfor i in range(3):\n\n    dp[0][i] = a[0][i]\n\n    \n\nfor i in range(1,N):\n\n    for j in range(3):\n\n        dp[i][j] = max(dp[i-1][idx[j][0]],dp[i-1][idx[j][1]])+a[i][j]\n\n    \n\nprint((max(dp[N-1])))","target":"import sys\n\ndef input():\n\n    return sys.stdin.readline()[:-1]\n\n\n\nN = int(eval(input()))\n\nABC = [list(map(int,input().split())) for _ in range(N)]\n\n\n\ninf = 10**9+7\n\ndp = [[0] * 3 for _ in range(N+10)]\n\ndp[0] = [ABC[0][0],ABC[0][1],ABC[0][2]]\n\n\n\nfor i in range(N-1):\n\n    for j in range(3):\n\n        for k in range(3):\n\n            if j==k:continue\n\n            dp[i+1][j] = max(dp[i+1][j],dp[i][k]+ABC[i+1][j])\n\n        \n\n    \n\n\n\nprint((max(dp[N-1][:])))\n","code_v0_loc":15,"code_v1_loc":20,"code_v0_num_chars":372,"code_v1_num_chars":447,"code_v0_no_empty_lines":"N = int(eval(input()))\na = [list(map(int, input().split())) for _ in range(N)]\ndp = [[0] * 3 for _ in range(100010)]\n# dp[i][j] : i\u65e5\u76ee\u306bj\u756a\u76ee\u306e\u6d3b\u52d5\u3092\u3057\u305f\u3068\u304d\u306e\u5e78\u798f\u5ea6\u306e\u7dcf\u548c\nidx = [[1, 2], [2, 0], [0, 1]]\nfor i in range(3):\n    dp[0][i] = a[0][i]\nfor i in range(1, N):\n    for j in range(3):\n        dp[i][j] = max(dp[i - 1][idx[j][0]], dp[i - 1][idx[j][1]]) + a[i][j]\nprint((max(dp[N - 1])))\n","code_v1_no_empty_lines":"import sys\n\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\n\nN = int(eval(input()))\nABC = [list(map(int, input().split())) for _ in range(N)]\ninf = 10**9 + 7\ndp = [[0] * 3 for _ in range(N + 10)]\ndp[0] = [ABC[0][0], ABC[0][1], ABC[0][2]]\nfor i in range(N - 1):\n    for j in range(3):\n        for k in range(3):\n            if j == k:\n                continue\n            dp[i + 1][j] = max(dp[i + 1][j], dp[i][k] + ABC[i + 1][j])\nprint((max(dp[N - 1][:])))\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["+import sys","+","+","+def input():","+    return sys.stdin.readline()[:-1]","+","+","-a = [list(map(int, input().split())) for _ in range(N)]","-dp = [[0] * 3 for _ in range(100010)]","-# dp[i][j] : i\u65e5\u76ee\u306bj\u756a\u76ee\u306e\u6d3b\u52d5\u3092\u3057\u305f\u3068\u304d\u306e\u5e78\u798f\u5ea6\u306e\u7dcf\u548c","-idx = [[1, 2], [2, 0], [0, 1]]","-for i in range(3):","-    dp[0][i] = a[0][i]","-for i in range(1, N):","+ABC = [list(map(int, input().split())) for _ in range(N)]","+inf = 10**9 + 7","+dp = [[0] * 3 for _ in range(N + 10)]","+dp[0] = [ABC[0][0], ABC[0][1], ABC[0][2]]","+for i in range(N - 1):","-        dp[i][j] = max(dp[i - 1][idx[j][0]], dp[i - 1][idx[j][1]]) + a[i][j]","-print((max(dp[N - 1])))","+        for k in range(3):","+            if j == k:","+                continue","+            dp[i + 1][j] = max(dp[i + 1][j], dp[i][k] + ABC[i + 1][j])","+print((max(dp[N - 1][:])))"],"diff_only_import_comment":false,"measured_runtime_v0":0.7135980439,"measured_runtime_v1":0.2380394118,"runtime_lift":2.9978146835,"key":["s642203251","s153299342"]}
{"user_id":"u780962115","problem_id":"p02850","language":"python","submission_id_v0":"s056526441","submission_id_v1":"s495635102","cpu_time_v0":872,"cpu_time_v1":745,"memory_v0":119396,"memory_v1":45168,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.56,"input":"n=int(eval(input()))\n\nnode={i:[] for i in range(1,n+1)}\n\nvisited=[False for i in range(n+1)]\n\nq=[]\n\nfor _ in range(n-1):\n\n    a,b=list(map(int,input().split()))\n\n    node[a].append(b)\n\n    node[b].append(a)\n\n    q.append((a,b))\n\n\n\nmother=q[0][0]\n\nvisited[mother]=True\n\n\n\nd=[]\n\ne=[]\n\n\n\n\n\npaint={i:{} for i in range(1,n+1)}\n\n\n\nmother_paint=[0 for i in range(n+1)]\n\n\n\n#\u4f7f\u3046\u8981\u7d20 node visited paint mother_paint \u306e\u56db\u3064\u306e\u30ea\u30b9\u30c8\n\nc=1\n\nfor child in node[mother]:\n\n    visited[child]=True\n\n    paint[mother][child]=c\n\n    paint[child][mother]=c\n\n    mother_paint[child]=c\n\n    c+=1\n\n    d.append(child)\n\n    \n\nwhile d:\n\n    for parent in d:\n\n        p=1 \n\n        for child in node[parent]:\n\n            if visited[child]==False:\n\n                visited[child]=True\n\n                if p!=mother_paint[parent]:\n\n                    paint[parent][child]=p\n\n                    paint[child][parent]=p\n\n                    mother_paint[child]=p\n\n                    p+=1\n\n                    e.append(child)\n\n                else:\n\n                    p+=1\n\n                    paint[parent][child]=p\n\n                    paint[child][parent]=p\n\n                    mother_paint[child]=p\n\n                    p+=1\n\n                    e.append(child)\n\n    if e:\n\n        d=e\n\n        e=[]\n\n    else:\n\n        d=[]\n\n        e=[]\n\nK=0\n\nfor i in range(1,n+1):\n\n    K=max(K,len(node[i]))\n\nprint(K)\n\nfor i in range(n-1):\n\n    s,t=q[i][0],q[i][1]\n\n    print((paint[s][t]))","target":"#problem1\n\nfrom collections import deque\n\nd=deque()\n\ne=deque()\n\n\n\nN=int(eval(input()))\n\ngraph=[[] for i in range(N+1)]\n\nD=[]\n\nfor _ in range(N-1):\n\n    a,b=list(map(int,input().split()))\n\n    graph[a].append(b)\n\n    graph[b].append(a)\n\n    D.append((a,b))\n\n    \n\n#\u9802\u70b91\u304b\u3089\u30b9\u30bf\u30fc\u30c8\n\nK=0\n\nd.append(1)\n\nvisited=[False for i in range(N+1)]\n\ncolor=[-1 for i in range(N+1)]\n\nvisited[1]=True\n\ncolor[1]=-1\n\ndic={}\n\nwhile d:\n\n    while d:\n\n        x=d.popleft()\n\n        par_color=color[x]\n\n        c=1\n\n        for node in graph[x]:\n\n            if visited[node]==False:\n\n                visited[node]=True\n\n                e.append(node)                \n\n                if c!=par_color:\n\n                    color[node]=c\n\n                    dic[(x,node)]=c\n\n                elif c==par_color:\n\n                    c+=1\n\n                    color[node]=c\n\n                    dic[(x,node)]=c\n\n                c+=1\n\n    if e:\n\n        d=e\n\n        e=deque()\n\n\n\nA=max(color)\n\nprint(A)\n\nfor que in D:\n\n    a,b=que\n\n    if (a,b) in list(dic.keys()):\n\n        print((dic[que]))\n\n    else:\n\n        print((dic[(b,a)]))\n\n    ","code_v0_loc":63,"code_v1_loc":52,"code_v0_num_chars":1430,"code_v1_num_chars":1084,"code_v0_no_empty_lines":"n = int(eval(input()))\nnode = {i: [] for i in range(1, n + 1)}\nvisited = [False for i in range(n + 1)]\nq = []\nfor _ in range(n - 1):\n    a, b = list(map(int, input().split()))\n    node[a].append(b)\n    node[b].append(a)\n    q.append((a, b))\nmother = q[0][0]\nvisited[mother] = True\nd = []\ne = []\npaint = {i: {} for i in range(1, n + 1)}\nmother_paint = [0 for i in range(n + 1)]\n# \u4f7f\u3046\u8981\u7d20 node visited paint mother_paint \u306e\u56db\u3064\u306e\u30ea\u30b9\u30c8\nc = 1\nfor child in node[mother]:\n    visited[child] = True\n    paint[mother][child] = c\n    paint[child][mother] = c\n    mother_paint[child] = c\n    c += 1\n    d.append(child)\nwhile d:\n    for parent in d:\n        p = 1\n        for child in node[parent]:\n            if visited[child] == False:\n                visited[child] = True\n                if p != mother_paint[parent]:\n                    paint[parent][child] = p\n                    paint[child][parent] = p\n                    mother_paint[child] = p\n                    p += 1\n                    e.append(child)\n                else:\n                    p += 1\n                    paint[parent][child] = p\n                    paint[child][parent] = p\n                    mother_paint[child] = p\n                    p += 1\n                    e.append(child)\n    if e:\n        d = e\n        e = []\n    else:\n        d = []\n        e = []\nK = 0\nfor i in range(1, n + 1):\n    K = max(K, len(node[i]))\nprint(K)\nfor i in range(n - 1):\n    s, t = q[i][0], q[i][1]\n    print((paint[s][t]))\n","code_v1_no_empty_lines":"# problem1\nfrom collections import deque\n\nd = deque()\ne = deque()\nN = int(eval(input()))\ngraph = [[] for i in range(N + 1)]\nD = []\nfor _ in range(N - 1):\n    a, b = list(map(int, input().split()))\n    graph[a].append(b)\n    graph[b].append(a)\n    D.append((a, b))\n# \u9802\u70b91\u304b\u3089\u30b9\u30bf\u30fc\u30c8\nK = 0\nd.append(1)\nvisited = [False for i in range(N + 1)]\ncolor = [-1 for i in range(N + 1)]\nvisited[1] = True\ncolor[1] = -1\ndic = {}\nwhile d:\n    while d:\n        x = d.popleft()\n        par_color = color[x]\n        c = 1\n        for node in graph[x]:\n            if visited[node] == False:\n                visited[node] = True\n                e.append(node)\n                if c != par_color:\n                    color[node] = c\n                    dic[(x, node)] = c\n                elif c == par_color:\n                    c += 1\n                    color[node] = c\n                    dic[(x, node)] = c\n                c += 1\n    if e:\n        d = e\n        e = deque()\nA = max(color)\nprint(A)\nfor que in D:\n    a, b = que\n    if (a, b) in list(dic.keys()):\n        print((dic[que]))\n    else:\n        print((dic[(b, a)]))\n","code_same":false,"relative_loc_diff_percent":17.4603174603,"diff":["-n = int(eval(input()))","-node = {i: [] for i in range(1, n + 1)}","-visited = [False for i in range(n + 1)]","-q = []","-for _ in range(n - 1):","+# problem1","+from collections import deque","+","+d = deque()","+e = deque()","+N = int(eval(input()))","+graph = [[] for i in range(N + 1)]","+D = []","+for _ in range(N - 1):","-    node[a].append(b)","-    node[b].append(a)","-    q.append((a, b))","-mother = q[0][0]","-visited[mother] = True","-d = []","-e = []","-paint = {i: {} for i in range(1, n + 1)}","-mother_paint = [0 for i in range(n + 1)]","-# \u4f7f\u3046\u8981\u7d20 node visited paint mother_paint \u306e\u56db\u3064\u306e\u30ea\u30b9\u30c8","-c = 1","-for child in node[mother]:","-    visited[child] = True","-    paint[mother][child] = c","-    paint[child][mother] = c","-    mother_paint[child] = c","-    c += 1","-    d.append(child)","+    graph[a].append(b)","+    graph[b].append(a)","+    D.append((a, b))","+# \u9802\u70b91\u304b\u3089\u30b9\u30bf\u30fc\u30c8","+K = 0","+d.append(1)","+visited = [False for i in range(N + 1)]","+color = [-1 for i in range(N + 1)]","+visited[1] = True","+color[1] = -1","+dic = {}","-    for parent in d:","-        p = 1","-        for child in node[parent]:","-            if visited[child] == False:","-                visited[child] = True","-                if p != mother_paint[parent]:","-                    paint[parent][child] = p","-                    paint[child][parent] = p","-                    mother_paint[child] = p","-                    p += 1","-                    e.append(child)","-                else:","-                    p += 1","-                    paint[parent][child] = p","-                    paint[child][parent] = p","-                    mother_paint[child] = p","-                    p += 1","-                    e.append(child)","+    while d:","+        x = d.popleft()","+        par_color = color[x]","+        c = 1","+        for node in graph[x]:","+            if visited[node] == False:","+                visited[node] = True","+                e.append(node)","+                if c != par_color:","+                    color[node] = c","+                    dic[(x, node)] = c","+                elif c == par_color:","+                    c += 1","+                    color[node] = c","+                    dic[(x, node)] = c","+                c += 1","-        e = []","+        e = deque()","+A = max(color)","+print(A)","+for que in D:","+    a, b = que","+    if (a, b) in list(dic.keys()):","+        print((dic[que]))","-        d = []","-        e = []","-K = 0","-for i in range(1, n + 1):","-    K = max(K, len(node[i]))","-print(K)","-for i in range(n - 1):","-    s, t = q[i][0], q[i][1]","-    print((paint[s][t]))","+        print((dic[(b, a)]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3284679053,"measured_runtime_v1":0.2336777339,"runtime_lift":1.4056448588,"key":["s056526441","s495635102"]}
{"user_id":"u624689667","problem_id":"p03796","language":"python","submission_id_v0":"s800016333","submission_id_v1":"s112879561","cpu_time_v0":271,"cpu_time_v1":164,"memory_v0":42736,"memory_v1":38512,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":39.48,"input":"from math import factorial\n\n\n\nmod = 10**9 + 7\n\nn = int(eval(input()))\n\n\n\nans = factorial(n) % mod\n\nprint(ans)","target":"N = int(eval(input()))\n\nMOD = 10**9 + 7\n\nans = 1\n\nfor i in range(2, N+1):\n\n    ans *= i\n\n    ans %= MOD\n\nprint(ans)\n","code_v0_loc":7,"code_v1_loc":7,"code_v0_num_chars":103,"code_v1_num_chars":110,"code_v0_no_empty_lines":"from math import factorial\n\nmod = 10**9 + 7\nn = int(eval(input()))\nans = factorial(n) % mod\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nMOD = 10**9 + 7\nans = 1\nfor i in range(2, N + 1):\n    ans *= i\n    ans %= MOD\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-from math import factorial","-","-mod = 10**9 + 7","-n = int(eval(input()))","-ans = factorial(n) % mod","+N = int(eval(input()))","+MOD = 10**9 + 7","+ans = 1","+for i in range(2, N + 1):","+    ans *= i","+    ans %= MOD"],"diff_only_import_comment":false,"measured_runtime_v0":0.5071064572,"measured_runtime_v1":0.006458343,"runtime_lift":78.5195915066,"key":["s800016333","s112879561"]}
{"user_id":"u945228737","problem_id":"p02555","language":"python","submission_id_v0":"s973678433","submission_id_v1":"s713708426","cpu_time_v0":115,"cpu_time_v1":28,"memory_v0":9184,"memory_v1":9092,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":75.65,"input":"# import sys\n\n# sys.setrecursionlimit(10 ** 6)\n\n# import bisect\n\n# from collections import deque\n\n\n\ndef cmb(n, r):\n\n    \"\"\"\u7d44\u307f\u5408\u308f\u305b\"\"\"\n\n    import math\n\n    if n < r:\n\n        return 0\n\n    return math.factorial(n) \/\/ (math.factorial(n - r) * math.factorial(r))\n\n\n\n\n\n# from decorator import stop_watch\n\n#\n\n#\n\n# @stop_watch\n\ndef solve(S):\n\n    mod = 10 ** 9 + 7\n\n    ans = 0\n\n    for i in range(1, S \/\/ 3 + 1):\n\n        tama = i + (S - (i * 3))\n\n        tama -= 2\n\n        bo = i - 1\n\n        ans += cmb(tama + 1, bo)\n\n        ans %= mod\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    # S = input()\n\n    S = int(eval(input()))\n\n    # N, M = map(int, input().split())\n\n    # Ai = [int(i) for i in input().split()]\n\n    # Bi = [int(i) for i in input().split()]\n\n    # ABi = [[int(i) for i in input().split()] for _ in range(N)]\n\n    solve(S)\n\n\n\n    # # test\n\n    # from random import randint\n\n    # from func import random_str\n\n    # solve()\n","target":"# \u89e3\u8aac\u3092\u53c2\u8003\u306b\u4f5c\u6210\n\n# import sys\n\n# sys.setrecursionlimit(10 ** 6)\n\n# import bisect\n\n# from collections import deque\n\n# from decorator import stop_watch\n\n#\n\n#\n\n# @stop_watch\n\ndef solve(S):\n\n    mod = 10 ** 9 + 7\n\n    dp = [0] * (S + 1)\n\n    dp[0] = 1\n\n    for i in range(3, S + 1):\n\n        dp[i] = dp[i - 1] + dp[i - 3]\n\n        dp[i] %= mod\n\n    print((dp[S]))\n\n\n\n\n\nif __name__ == '__main__':\n\n    S = int(eval(input()))\n\n    solve(S)\n\n\n\n    # # test\n\n    # from random import randint\n\n    # from func import random_str\n\n    # solve()\n","code_v0_loc":42,"code_v1_loc":27,"code_v0_num_chars":936,"code_v1_num_chars":521,"code_v0_no_empty_lines":"# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\ndef cmb(n, r):\n    \"\"\"\u7d44\u307f\u5408\u308f\u305b\"\"\"\n    import math\n\n    if n < r:\n        return 0\n    return math.factorial(n) \/\/ (math.factorial(n - r) * math.factorial(r))\n\n\n# from decorator import stop_watch\n#\n#\n# @stop_watch\ndef solve(S):\n    mod = 10**9 + 7\n    ans = 0\n    for i in range(1, S \/\/ 3 + 1):\n        tama = i + (S - (i * 3))\n        tama -= 2\n        bo = i - 1\n        ans += cmb(tama + 1, bo)\n        ans %= mod\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    # S = input()\n    S = int(eval(input()))\n    # N, M = map(int, input().split())\n    # Ai = [int(i) for i in input().split()]\n    # Bi = [int(i) for i in input().split()]\n    # ABi = [[int(i) for i in input().split()] for _ in range(N)]\n    solve(S)\n    # # test\n    # from random import randint\n    # from func import random_str\n    # solve()\n","code_v1_no_empty_lines":"# \u89e3\u8aac\u3092\u53c2\u8003\u306b\u4f5c\u6210\n# import sys\n# sys.setrecursionlimit(10 ** 6)\n# import bisect\n# from collections import deque\n# from decorator import stop_watch\n#\n#\n# @stop_watch\ndef solve(S):\n    mod = 10**9 + 7\n    dp = [0] * (S + 1)\n    dp[0] = 1\n    for i in range(3, S + 1):\n        dp[i] = dp[i - 1] + dp[i - 3]\n        dp[i] %= mod\n    print((dp[S]))\n\n\nif __name__ == \"__main__\":\n    S = int(eval(input()))\n    solve(S)\n    # # test\n    # from random import randint\n    # from func import random_str\n    # solve()\n","code_same":false,"relative_loc_diff_percent":35.7142857143,"diff":["+# \u89e3\u8aac\u3092\u53c2\u8003\u306b\u4f5c\u6210","-def cmb(n, r):","-    \"\"\"\u7d44\u307f\u5408\u308f\u305b\"\"\"","-    import math","-","-    if n < r:","-        return 0","-    return math.factorial(n) \/\/ (math.factorial(n - r) * math.factorial(r))","-","-","-    ans = 0","-    for i in range(1, S \/\/ 3 + 1):","-        tama = i + (S - (i * 3))","-        tama -= 2","-        bo = i - 1","-        ans += cmb(tama + 1, bo)","-        ans %= mod","-    print(ans)","+    dp = [0] * (S + 1)","+    dp[0] = 1","+    for i in range(3, S + 1):","+        dp[i] = dp[i - 1] + dp[i - 3]","+        dp[i] %= mod","+    print((dp[S]))","-    # S = input()","-    # N, M = map(int, input().split())","-    # Ai = [int(i) for i in input().split()]","-    # Bi = [int(i) for i in input().split()]","-    # ABi = [[int(i) for i in input().split()] for _ in range(N)]"],"diff_only_import_comment":false,"measured_runtime_v0":0.4257377865,"measured_runtime_v1":0.2429736164,"runtime_lift":1.7521975961,"key":["s973678433","s713708426"]}
{"user_id":"u816872429","problem_id":"p03078","language":"python","submission_id_v0":"s052587697","submission_id_v1":"s157699880","cpu_time_v0":41,"cpu_time_v1":28,"memory_v0":4096,"memory_v1":4460,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":31.71,"input":"import heapq\n\n\n\nx, y, z, k = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nb = list(map(int, input().split()))\n\nc = list(map(int, input().split()))\n\n\n\ndef diff(l):\n\n    m = max(l)\n\n    return sorted(m - v for v in l)[1:]\n\n\n\ns = sum(map(max, [a, b, c]))\n\nsa, sb, sc = list(map(diff, [a, b, c]))\n\nda, db, dc = [0], [0], [0]\n\nq = [0]\n\nwhile k > 0:\n\n    while True:\n\n        if len(sa) > 0 and (len(q) == 0 or q[0] > sa[0]):\n\n            for v in [sa[0] + bb + cc for bb in db for cc in dc]:\n\n                heapq.heappush(q, v)\n\n            da.append(sa[0])\n\n            sa = sa[1:]\n\n        elif len(sb) > 0 and (len(q) == 0 or q[0] > sb[0]):\n\n            for v in [sb[0] + aa + cc for aa in da for cc in dc]:\n\n                heapq.heappush(q, v)\n\n            db.append(sb[0])\n\n            sb = sb[1:]\n\n        elif len(sc) > 0 and (len(q) == 0 or q[0] > sc[0]):\n\n            for v in [sc[0] + aa + bb for aa in da for bb in db]:\n\n                heapq.heappush(q, v)\n\n            dc.append(sc[0])\n\n            sc = sc[1:]\n\n        else:\n\n            break\n\n    v = heapq.heappop(q)\n\n    print(s - v)\n\n    k -= 1\n","target":"import heapq\n\n\n\nx, y, z, k = list(map(int, input().split()))\n\na = sorted(map(int, input().split()))\n\nb = sorted(map(int, input().split()))\n\nc = sorted(map(int, input().split()))\n\n\n\nq = []\n\nmemo = set()\n\ndef qpush(q, ai, bi, ci):\n\n    t = (-(a[ai] + b[bi] + c[ci]), ai, bi, ci)\n\n    if not t in memo:\n\n        memo.add(t)\n\n        heapq.heappush(q, t)\n\n\n\nqpush(q, len(a) - 1, len(b) - 1, len(c) - 1)\n\nfor _ in range(k):\n\n    s, ai, bi, ci = heapq.heappop(q)\n\n    if ai > 0:\n\n        qpush(q, ai - 1, bi, ci)\n\n    if bi > 0:\n\n        qpush(q, ai, bi - 1, ci)\n\n    if ci > 0:\n\n        qpush(q, ai, bi, ci - 1)\n\n    print(-s)\n","code_v0_loc":37,"code_v1_loc":25,"code_v0_num_chars":1122,"code_v1_num_chars":631,"code_v0_no_empty_lines":"import heapq\n\nx, y, z, k = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\n\n\ndef diff(l):\n    m = max(l)\n    return sorted(m - v for v in l)[1:]\n\n\ns = sum(map(max, [a, b, c]))\nsa, sb, sc = list(map(diff, [a, b, c]))\nda, db, dc = [0], [0], [0]\nq = [0]\nwhile k > 0:\n    while True:\n        if len(sa) > 0 and (len(q) == 0 or q[0] > sa[0]):\n            for v in [sa[0] + bb + cc for bb in db for cc in dc]:\n                heapq.heappush(q, v)\n            da.append(sa[0])\n            sa = sa[1:]\n        elif len(sb) > 0 and (len(q) == 0 or q[0] > sb[0]):\n            for v in [sb[0] + aa + cc for aa in da for cc in dc]:\n                heapq.heappush(q, v)\n            db.append(sb[0])\n            sb = sb[1:]\n        elif len(sc) > 0 and (len(q) == 0 or q[0] > sc[0]):\n            for v in [sc[0] + aa + bb for aa in da for bb in db]:\n                heapq.heappush(q, v)\n            dc.append(sc[0])\n            sc = sc[1:]\n        else:\n            break\n    v = heapq.heappop(q)\n    print(s - v)\n    k -= 1\n","code_v1_no_empty_lines":"import heapq\n\nx, y, z, k = list(map(int, input().split()))\na = sorted(map(int, input().split()))\nb = sorted(map(int, input().split()))\nc = sorted(map(int, input().split()))\nq = []\nmemo = set()\n\n\ndef qpush(q, ai, bi, ci):\n    t = (-(a[ai] + b[bi] + c[ci]), ai, bi, ci)\n    if not t in memo:\n        memo.add(t)\n        heapq.heappush(q, t)\n\n\nqpush(q, len(a) - 1, len(b) - 1, len(c) - 1)\nfor _ in range(k):\n    s, ai, bi, ci = heapq.heappop(q)\n    if ai > 0:\n        qpush(q, ai - 1, bi, ci)\n    if bi > 0:\n        qpush(q, ai, bi - 1, ci)\n    if ci > 0:\n        qpush(q, ai, bi, ci - 1)\n    print(-s)\n","code_same":false,"relative_loc_diff_percent":32.4324324324,"diff":["-a = list(map(int, input().split()))","-b = list(map(int, input().split()))","-c = list(map(int, input().split()))","+a = sorted(map(int, input().split()))","+b = sorted(map(int, input().split()))","+c = sorted(map(int, input().split()))","+q = []","+memo = set()","-def diff(l):","-    m = max(l)","-    return sorted(m - v for v in l)[1:]","+def qpush(q, ai, bi, ci):","+    t = (-(a[ai] + b[bi] + c[ci]), ai, bi, ci)","+    if not t in memo:","+        memo.add(t)","+        heapq.heappush(q, t)","-s = sum(map(max, [a, b, c]))","-sa, sb, sc = list(map(diff, [a, b, c]))","-da, db, dc = [0], [0], [0]","-q = [0]","-while k > 0:","-    while True:","-        if len(sa) > 0 and (len(q) == 0 or q[0] > sa[0]):","-            for v in [sa[0] + bb + cc for bb in db for cc in dc]:","-                heapq.heappush(q, v)","-            da.append(sa[0])","-            sa = sa[1:]","-        elif len(sb) > 0 and (len(q) == 0 or q[0] > sb[0]):","-            for v in [sb[0] + aa + cc for aa in da for cc in dc]:","-                heapq.heappush(q, v)","-            db.append(sb[0])","-            sb = sb[1:]","-        elif len(sc) > 0 and (len(q) == 0 or q[0] > sc[0]):","-            for v in [sc[0] + aa + bb for aa in da for bb in db]:","-                heapq.heappush(q, v)","-            dc.append(sc[0])","-            sc = sc[1:]","-        else:","-            break","-    v = heapq.heappop(q)","-    print(s - v)","-    k -= 1","+qpush(q, len(a) - 1, len(b) - 1, len(c) - 1)","+for _ in range(k):","+    s, ai, bi, ci = heapq.heappop(q)","+    if ai > 0:","+        qpush(q, ai - 1, bi, ci)","+    if bi > 0:","+        qpush(q, ai, bi - 1, ci)","+    if ci > 0:","+        qpush(q, ai, bi, ci - 1)","+    print(-s)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2304672,"measured_runtime_v1":0.0062596636,"runtime_lift":36.8178252168,"key":["s052587697","s157699880"]}
{"user_id":"u924691798","problem_id":"p02837","language":"python","submission_id_v0":"s473277676","submission_id_v1":"s669766257","cpu_time_v0":175,"cpu_time_v1":139,"memory_v0":3064,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":20.57,"input":"N = int(eval(input()))\n\nA = [0]*N\n\nX = []\n\nY = []\n\nfor i in range(N):\n\n    A[i] = int(eval(input()))\n\n    X.append([])\n\n    Y.append([])\n\n    for j in range(A[i]):\n\n        x, y = list(map(int, input().split()))\n\n        X[i].append(x-1)\n\n        Y[i].append(y)\n\nans = 0\n\nfor bit in range(1<<N):\n\n    honest = 0\n\n    ok = True\n\n    for i in range(N):\n\n        if bit&(1<<i):\n\n            honest += 1\n\n            for j in range(A[i]):\n\n                if Y[i][j] == 0:\n\n                    if bit&(1<<X[i][j]):\n\n                        ok = False\n\n                        break\n\n                else:\n\n                    if not bit&(1<<X[i][j]):\n\n                        ok = False\n\n                        break\n\n            if not ok:\n\n                break\n\n    if ok:\n\n        ans = max(ans, honest)\n\nprint(ans)","target":"N = int(eval(input()))\n\nXY = [[] for _ in range(N)]\n\nfor i in range(N):\n\n    A = int(eval(input()))\n\n    for _ in range(A):\n\n        x, y = list(map(int, input().split()))\n\n        XY[i].append((x-1,y))\n\nans = 0\n\nfor bit in range(1<<N):\n\n    cnt = bin(bit).count('1')\n\n    ok = True\n\n    for i in range(N):\n\n        if bit&(1<<i):\n\n            for x,y in XY[i]:\n\n                if y == 1:\n\n                    if not bit&(1<<x):\n\n                        ok = False\n\n                        break\n\n                else:\n\n                    if bit&(1<<x):\n\n                        ok = False\n\n                        break\n\n            if not ok:\n\n                break\n\n    if ok:\n\n        ans = max(ans, cnt)\n\nprint(ans)","code_v0_loc":33,"code_v1_loc":27,"code_v0_num_chars":798,"code_v1_num_chars":704,"code_v0_no_empty_lines":"N = int(eval(input()))\nA = [0] * N\nX = []\nY = []\nfor i in range(N):\n    A[i] = int(eval(input()))\n    X.append([])\n    Y.append([])\n    for j in range(A[i]):\n        x, y = list(map(int, input().split()))\n        X[i].append(x - 1)\n        Y[i].append(y)\nans = 0\nfor bit in range(1 << N):\n    honest = 0\n    ok = True\n    for i in range(N):\n        if bit & (1 << i):\n            honest += 1\n            for j in range(A[i]):\n                if Y[i][j] == 0:\n                    if bit & (1 << X[i][j]):\n                        ok = False\n                        break\n                else:\n                    if not bit & (1 << X[i][j]):\n                        ok = False\n                        break\n            if not ok:\n                break\n    if ok:\n        ans = max(ans, honest)\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nXY = [[] for _ in range(N)]\nfor i in range(N):\n    A = int(eval(input()))\n    for _ in range(A):\n        x, y = list(map(int, input().split()))\n        XY[i].append((x - 1, y))\nans = 0\nfor bit in range(1 << N):\n    cnt = bin(bit).count(\"1\")\n    ok = True\n    for i in range(N):\n        if bit & (1 << i):\n            for x, y in XY[i]:\n                if y == 1:\n                    if not bit & (1 << x):\n                        ok = False\n                        break\n                else:\n                    if bit & (1 << x):\n                        ok = False\n                        break\n            if not ok:\n                break\n    if ok:\n        ans = max(ans, cnt)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":18.1818181818,"diff":["-A = [0] * N","-X = []","-Y = []","+XY = [[] for _ in range(N)]","-    A[i] = int(eval(input()))","-    X.append([])","-    Y.append([])","-    for j in range(A[i]):","+    A = int(eval(input()))","+    for _ in range(A):","-        X[i].append(x - 1)","-        Y[i].append(y)","+        XY[i].append((x - 1, y))","-    honest = 0","+    cnt = bin(bit).count(\"1\")","-            honest += 1","-            for j in range(A[i]):","-                if Y[i][j] == 0:","-                    if bit & (1 << X[i][j]):","+            for x, y in XY[i]:","+                if y == 1:","+                    if not bit & (1 << x):","-                    if not bit & (1 << X[i][j]):","+                    if bit & (1 << x):","-        ans = max(ans, honest)","+        ans = max(ans, cnt)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3209826868,"measured_runtime_v1":0.1727860439,"runtime_lift":1.8576887318,"key":["s473277676","s669766257"]}
{"user_id":"u297574184","problem_id":"p02773","language":"python","submission_id_v0":"s609062581","submission_id_v1":"s989407304","cpu_time_v0":358,"cpu_time_v1":258,"memory_v0":35944,"memory_v1":38716,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":27.93,"input":"from collections import Counter\n\nimport sys\n\ninput = sys.stdin.readline\n\n\n\ndef solve():\n\n    N = int(eval(input()))\n\n    Sss = [input().rstrip() for _ in range(N)]\n\n\n\n    cnt = Counter(Sss)\n\n    #print('cnt:', cnt)\n\n\n\n    maxNum = max(cnt.values())\n\n    #print('maxNum:', maxNum)\n\n\n\n    anss = []\n\n    for key, value in list(cnt.items()):\n\n        if value == maxNum:\n\n            anss.append(key)\n\n    #print('anss:', anss)\n\n\n\n    anss.sort()\n\n\n\n    print(('\\n'.join(anss)))\n\n\n\n\n\nsolve()\n","target":"from collections import Counter\n\nimport sys\n\ninput = sys.stdin.readline\n\n\n\nN = int(eval(input()))\n\nSss = [input().rstrip() for _ in range(N)]\n\n\n\ncnt = Counter(Sss)\n\n\n\nnum = max(cnt.values())\n\n\n\nanss = []\n\nfor key in sorted(cnt.keys()):\n\n    if cnt[key] == num:\n\n        anss.append(key)\n\n\n\nprint(('\\n'.join(anss)))\n","code_v0_loc":26,"code_v1_loc":17,"code_v0_num_chars":475,"code_v1_num_chars":307,"code_v0_no_empty_lines":"from collections import Counter\nimport sys\n\ninput = sys.stdin.readline\n\n\ndef solve():\n    N = int(eval(input()))\n    Sss = [input().rstrip() for _ in range(N)]\n    cnt = Counter(Sss)\n    # print('cnt:', cnt)\n    maxNum = max(cnt.values())\n    # print('maxNum:', maxNum)\n    anss = []\n    for key, value in list(cnt.items()):\n        if value == maxNum:\n            anss.append(key)\n    # print('anss:', anss)\n    anss.sort()\n    print((\"\\n\".join(anss)))\n\n\nsolve()\n","code_v1_no_empty_lines":"from collections import Counter\nimport sys\n\ninput = sys.stdin.readline\nN = int(eval(input()))\nSss = [input().rstrip() for _ in range(N)]\ncnt = Counter(Sss)\nnum = max(cnt.values())\nanss = []\nfor key in sorted(cnt.keys()):\n    if cnt[key] == num:\n        anss.append(key)\nprint((\"\\n\".join(anss)))\n","code_same":false,"relative_loc_diff_percent":34.6153846154,"diff":["-","-","-def solve():","-    N = int(eval(input()))","-    Sss = [input().rstrip() for _ in range(N)]","-    cnt = Counter(Sss)","-    # print('cnt:', cnt)","-    maxNum = max(cnt.values())","-    # print('maxNum:', maxNum)","-    anss = []","-    for key, value in list(cnt.items()):","-        if value == maxNum:","-            anss.append(key)","-    # print('anss:', anss)","-    anss.sort()","-    print((\"\\n\".join(anss)))","-","-","-solve()","+N = int(eval(input()))","+Sss = [input().rstrip() for _ in range(N)]","+cnt = Counter(Sss)","+num = max(cnt.values())","+anss = []","+for key in sorted(cnt.keys()):","+    if cnt[key] == num:","+        anss.append(key)","+print((\"\\n\".join(anss)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2647752221,"measured_runtime_v1":0.1462080963,"runtime_lift":1.8109477437,"key":["s609062581","s989407304"]}
{"user_id":"u466330895","problem_id":"p03796","language":"python","submission_id_v0":"s008235718","submission_id_v1":"s090392182","cpu_time_v0":275,"cpu_time_v1":173,"memory_v0":42736,"memory_v1":38512,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":37.09,"input":"import math\n\nn = int(eval(input()))\n\n\n\nans = math.factorial(n)  # n\u306e\u968e\u4e57\u3092\u8a08\u7b97\n\n\n\nif ans >= (10 ** 9)+7:\n\n    ans = ans % ((10 ** 9)+7)\n\n\n\nprint(ans)\n","target":"n = int(eval(input()))\n\n\n\nans = 1\n\nfor i in range(1, n+1):\n\n    ans = ans * i\n\n    ans = ans % ((10 ** 9)+7)  # \u9014\u4e2d\u3067\u5272\u308a\u7b97\u306e\u4f59\u308a\u3092\u6c42\u3081\u3066\u3082\u3001\u6700\u7d42\u7d50\u679c\u306f\u540c\u3058\u306b\u306a\u308b\n\n\n\nprint(ans)","code_v0_loc":9,"code_v1_loc":8,"code_v0_num_chars":139,"code_v1_num_chars":145,"code_v0_no_empty_lines":"import math\n\nn = int(eval(input()))\nans = math.factorial(n)  # n\u306e\u968e\u4e57\u3092\u8a08\u7b97\nif ans >= (10**9) + 7:\n    ans = ans % ((10**9) + 7)\nprint(ans)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nans = 1\nfor i in range(1, n + 1):\n    ans = ans * i\n    ans = ans % ((10**9) + 7)  # \u9014\u4e2d\u3067\u5272\u308a\u7b97\u306e\u4f59\u308a\u3092\u6c42\u3081\u3066\u3082\u3001\u6700\u7d42\u7d50\u679c\u306f\u540c\u3058\u306b\u306a\u308b\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["-import math","-","-ans = math.factorial(n)  # n\u306e\u968e\u4e57\u3092\u8a08\u7b97","-if ans >= (10**9) + 7:","-    ans = ans % ((10**9) + 7)","+ans = 1","+for i in range(1, n + 1):","+    ans = ans * i","+    ans = ans % ((10**9) + 7)  # \u9014\u4e2d\u3067\u5272\u308a\u7b97\u306e\u4f59\u308a\u3092\u6c42\u3081\u3066\u3082\u3001\u6700\u7d42\u7d50\u679c\u306f\u540c\u3058\u306b\u306a\u308b"],"diff_only_import_comment":false,"measured_runtime_v0":0.5420387263,"measured_runtime_v1":0.2535338807,"runtime_lift":2.1379340891,"key":["s008235718","s090392182"]}
{"user_id":"u072053884","problem_id":"p02278","language":"python","submission_id_v0":"s595158290","submission_id_v1":"s757741528","cpu_time_v0":80,"cpu_time_v1":60,"memory_v0":7788,"memory_v1":7812,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":25.0,"input":"\"\"\"Minimum cost Sort.\"\"\"\n\n\n\ndef min_cost_sort(A):\n\n    \"\"\"Sort list A in ascending order.\n\n \n\n    And return the switching cost in sorting.\n\n    \"\"\"\n\n    B = list(A)\n\n    B.sort()\n\n    cost = 0\n\n    min_w = B[0]\n\n    for i, b in enumerate(B):\n\n        tmp_cost = 0\n\n        bi = A.index(b)\n\n        n = 1\n\n        while bi != i:\n\n            n += 1\n\n            st = B[bi]\n\n            si = A.index(st)\n\n            tmp_cost += b + st\n\n            A[bi], A[si] = st, b\n\n            bi = si\n\n        dec = (n - 1) * (b - min_w)\n\n        inc = 2 * (min_w + b)\n\n        if dec < inc:\n\n            cost += tmp_cost\n\n        else:\n\n            cost += tmp_cost - dec + inc\n\n    return cost\n\n\n\n\n\nn = eval(input())\n\n\n\nA = list(map(int, input().split()))\n\n\n\nans = min_cost_sort(A)\n\n\n\nprint(ans)","target":"\"\"\"Minimum cost Sort.\"\"\"\n\n\n\ndef min_cost_sort(A):\n\n    \"\"\"Sort list A in ascending order.\n\n \n\n    And return the switching cost in sorting.\n\n    \"\"\"\n\n    B = list(A)\n\n    B.sort()\n\n    cost = 0\n\n    min_w = B[0]\n\n    for i, b in enumerate(B):\n\n        tmp_cost = 0\n\n        bi = A.index(b)\n\n        cnt = 0\n\n        while bi != i:\n\n            cnt += 1\n\n            st = B[bi]\n\n            si = A.index(st)\n\n            tmp_cost += b + st\n\n            A[bi], A[si] = st, b\n\n            bi = si\n\n        if cnt:\n\n            dec = cnt * (b - min_w)\n\n            inc = 2 * (min_w + b)\n\n            if dec < inc:\n\n                cost += tmp_cost\n\n            else:\n\n                cost += tmp_cost - dec + inc\n\n    return cost\n\n\n\n\n\nn = eval(input())\n\n\n\nA = list(map(int, input().split()))\n\n\n\nans = min_cost_sort(A)\n\n\n\nprint(ans)","code_v0_loc":38,"code_v1_loc":39,"code_v0_num_chars":780,"code_v1_num_chars":821,"code_v0_no_empty_lines":"\"\"\"Minimum cost Sort.\"\"\"\n\n\ndef min_cost_sort(A):\n    \"\"\"Sort list A in ascending order.\n    And return the switching cost in sorting.\n    \"\"\"\n    B = list(A)\n    B.sort()\n    cost = 0\n    min_w = B[0]\n    for i, b in enumerate(B):\n        tmp_cost = 0\n        bi = A.index(b)\n        n = 1\n        while bi != i:\n            n += 1\n            st = B[bi]\n            si = A.index(st)\n            tmp_cost += b + st\n            A[bi], A[si] = st, b\n            bi = si\n        dec = (n - 1) * (b - min_w)\n        inc = 2 * (min_w + b)\n        if dec < inc:\n            cost += tmp_cost\n        else:\n            cost += tmp_cost - dec + inc\n    return cost\n\n\nn = eval(input())\nA = list(map(int, input().split()))\nans = min_cost_sort(A)\nprint(ans)\n","code_v1_no_empty_lines":"\"\"\"Minimum cost Sort.\"\"\"\n\n\ndef min_cost_sort(A):\n    \"\"\"Sort list A in ascending order.\n    And return the switching cost in sorting.\n    \"\"\"\n    B = list(A)\n    B.sort()\n    cost = 0\n    min_w = B[0]\n    for i, b in enumerate(B):\n        tmp_cost = 0\n        bi = A.index(b)\n        cnt = 0\n        while bi != i:\n            cnt += 1\n            st = B[bi]\n            si = A.index(st)\n            tmp_cost += b + st\n            A[bi], A[si] = st, b\n            bi = si\n        if cnt:\n            dec = cnt * (b - min_w)\n            inc = 2 * (min_w + b)\n            if dec < inc:\n                cost += tmp_cost\n            else:\n                cost += tmp_cost - dec + inc\n    return cost\n\n\nn = eval(input())\nA = list(map(int, input().split()))\nans = min_cost_sort(A)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":2.5641025641,"diff":["-        n = 1","+        cnt = 0","-            n += 1","+            cnt += 1","-        dec = (n - 1) * (b - min_w)","-        inc = 2 * (min_w + b)","-        if dec < inc:","-            cost += tmp_cost","-        else:","-            cost += tmp_cost - dec + inc","+        if cnt:","+            dec = cnt * (b - min_w)","+            inc = 2 * (min_w + b)","+            if dec < inc:","+                cost += tmp_cost","+            else:","+                cost += tmp_cost - dec + inc"],"diff_only_import_comment":false,"measured_runtime_v0":0.3540196879,"measured_runtime_v1":0.1982511323,"runtime_lift":1.7857133208,"key":["s595158290","s757741528"]}
{"user_id":"u328364772","problem_id":"p02982","language":"python","submission_id_v0":"s700480138","submission_id_v1":"s244745375","cpu_time_v0":164,"cpu_time_v1":17,"memory_v0":13336,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":89.63,"input":"import math\n\nimport numpy as np\n\n\n\nn, d = list(map(int, input().split()))\n\n\n\nx = np.zeros([n, d])\n\n\n\nfor i in range(n):\n\n    line = list(map(int, input().split()))\n\n    for j in range(d):\n\n        x[i, j] = line[j]\n\n\n\ncnt = 0\n\n\n\nfor i in range(n):\n\n    for j in range(i+1, n):\n\n        xx = (x[i] - x[j]) ** 2\n\n        dist = math.sqrt(xx.sum())\n\n        if dist % 1 == 0:\n\n            cnt += 1\n\n\n\nprint(cnt)","target":"import math\n\n\n\nn, d = list(map(int, input().split()))\n\n\n\nx = [list(map(int, input().split())) for i in range(n)]\n\n\n\ncnt = 0\n\n\n\nfor i in range(n):\n\n    for j in range(i+1, n):\n\n        dist = 0\n\n        for k in range(d):\n\n            dist += (x[i][k] - x[j][k]) ** 2\n\n        if math.sqrt(dist).is_integer():\n\n            cnt += 1\n\n\n\nprint(cnt)","code_v0_loc":22,"code_v1_loc":17,"code_v0_num_chars":402,"code_v1_num_chars":338,"code_v0_no_empty_lines":"import math\nimport numpy as np\n\nn, d = list(map(int, input().split()))\nx = np.zeros([n, d])\nfor i in range(n):\n    line = list(map(int, input().split()))\n    for j in range(d):\n        x[i, j] = line[j]\ncnt = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        xx = (x[i] - x[j]) ** 2\n        dist = math.sqrt(xx.sum())\n        if dist % 1 == 0:\n            cnt += 1\nprint(cnt)\n","code_v1_no_empty_lines":"import math\n\nn, d = list(map(int, input().split()))\nx = [list(map(int, input().split())) for i in range(n)]\ncnt = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        dist = 0\n        for k in range(d):\n            dist += (x[i][k] - x[j][k]) ** 2\n        if math.sqrt(dist).is_integer():\n            cnt += 1\nprint(cnt)\n","code_same":false,"relative_loc_diff_percent":22.7272727273,"diff":["-import numpy as np","-x = np.zeros([n, d])","-for i in range(n):","-    line = list(map(int, input().split()))","-    for j in range(d):","-        x[i, j] = line[j]","+x = [list(map(int, input().split())) for i in range(n)]","-        xx = (x[i] - x[j]) ** 2","-        dist = math.sqrt(xx.sum())","-        if dist % 1 == 0:","+        dist = 0","+        for k in range(d):","+            dist += (x[i][k] - x[j][k]) ** 2","+        if math.sqrt(dist).is_integer():"],"diff_only_import_comment":false,"measured_runtime_v0":1.5958364801,"measured_runtime_v1":0.2940665908,"runtime_lift":5.4267860753,"key":["s700480138","s244745375"]}
{"user_id":"u811436126","problem_id":"p02555","language":"python","submission_id_v0":"s082576202","submission_id_v1":"s465570710","cpu_time_v0":367,"cpu_time_v1":30,"memory_v0":9988,"memory_v1":9128,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":91.83,"input":"from functools import lru_cache\n\nimport sys\n\n\n\nsys.setrecursionlimit(2000)\n\n\n\ns = int(eval(input()))\n\nmod = 10 ** 9 + 7\n\n\n\n\n\n@lru_cache(maxsize=None)\n\ndef dfs(n):\n\n    if n <= 2:\n\n        return 0\n\n    elif 3<=n<=5:\n\n        return 1\n\n    else:\n\n        count = 1\n\n        for i in range(3, n + 1):\n\n            count += dfs(n - i)\n\n            count %= mod\n\n\n\n        return count % mod\n\n\n\n\n\nans = dfs(s)\n\nprint(ans)\n","target":"s = int(eval(input()))\n\nmod = 10 ** 9 + 7\n\n\n\ndp = [0] * (s + 1)\n\ndp[0] = 1\n\n\n\nx = 0\n\nfor i in range(3, s + 1):\n\n    x += dp[i - 3]\n\n    dp[i] = x % mod\n\n\n\nans = dp[s] % mod\n\nprint(ans)\n","code_v0_loc":26,"code_v1_loc":13,"code_v0_num_chars":412,"code_v1_num_chars":179,"code_v0_no_empty_lines":"from functools import lru_cache\nimport sys\n\nsys.setrecursionlimit(2000)\ns = int(eval(input()))\nmod = 10**9 + 7\n\n\n@lru_cache(maxsize=None)\ndef dfs(n):\n    if n <= 2:\n        return 0\n    elif 3 <= n <= 5:\n        return 1\n    else:\n        count = 1\n        for i in range(3, n + 1):\n            count += dfs(n - i)\n            count %= mod\n        return count % mod\n\n\nans = dfs(s)\nprint(ans)\n","code_v1_no_empty_lines":"s = int(eval(input()))\nmod = 10**9 + 7\ndp = [0] * (s + 1)\ndp[0] = 1\nx = 0\nfor i in range(3, s + 1):\n    x += dp[i - 3]\n    dp[i] = x % mod\nans = dp[s] % mod\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-from functools import lru_cache","-import sys","-","-sys.setrecursionlimit(2000)","-","-","-@lru_cache(maxsize=None)","-def dfs(n):","-    if n <= 2:","-        return 0","-    elif 3 <= n <= 5:","-        return 1","-    else:","-        count = 1","-        for i in range(3, n + 1):","-            count += dfs(n - i)","-            count %= mod","-        return count % mod","-","-","-ans = dfs(s)","+dp = [0] * (s + 1)","+dp[0] = 1","+x = 0","+for i in range(3, s + 1):","+    x += dp[i - 3]","+    dp[i] = x % mod","+ans = dp[s] % mod"],"diff_only_import_comment":false,"measured_runtime_v0":0.5571973288,"measured_runtime_v1":0.21483691,"runtime_lift":2.593582866,"key":["s082576202","s465570710"]}
{"user_id":"u820560680","problem_id":"p03457","language":"python","submission_id_v0":"s760019873","submission_id_v1":"s278197966","cpu_time_v0":899,"cpu_time_v1":539,"memory_v0":38664,"memory_v1":36444,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":40.04,"input":"import numpy as np\n\nN = int(eval(input()))\n\nplan = np.array([[0, 0, 0]] + [list(map(int, input().split())) for i in range(N)])\n\n\n\ndiff = np.diff(plan, axis = 0)\n\n\n\ndef is_possible(t, x, y):\n\n    if (t + x + y) % 2 == 0 and abs(x) + abs(y) <= t:\n\n        return True\n\n    else:\n\n        return False\n\n\n\nfor i in range(N):\n\n    ti, xi, yi = diff[i]\n\n    if not is_possible(ti, xi, yi):\n\n        print('No')\n\n        exit()\n\nprint('Yes')","target":"N = int(eval(input()))\n\nplan = [[0, 0, 0]] + [list(map(int, input().split())) for _ in range(N)]\n\ndiff = [[plan[i + 1][j] - plan[i][j] for j in range(3)] for i in range(N)]\n\n\n\ndef is_possible(t, x, y):\n\n    if (t + x + y) % 2 == 0 and abs(x) + abs(y) <= t:\n\n        return True\n\n    else:\n\n        return False\n\n\n\nfor i in range(N):\n\n    ti, xi, yi = diff[i]\n\n    if not is_possible(ti, xi, yi):\n\n        print('No')\n\n        exit()\n\nprint('Yes')","code_v0_loc":18,"code_v1_loc":16,"code_v0_num_chars":428,"code_v1_num_chars":440,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nplan = np.array([[0, 0, 0]] + [list(map(int, input().split())) for i in range(N)])\ndiff = np.diff(plan, axis=0)\n\n\ndef is_possible(t, x, y):\n    if (t + x + y) % 2 == 0 and abs(x) + abs(y) <= t:\n        return True\n    else:\n        return False\n\n\nfor i in range(N):\n    ti, xi, yi = diff[i]\n    if not is_possible(ti, xi, yi):\n        print(\"No\")\n        exit()\nprint(\"Yes\")\n","code_v1_no_empty_lines":"N = int(eval(input()))\nplan = [[0, 0, 0]] + [list(map(int, input().split())) for _ in range(N)]\ndiff = [[plan[i + 1][j] - plan[i][j] for j in range(3)] for i in range(N)]\n\n\ndef is_possible(t, x, y):\n    if (t + x + y) % 2 == 0 and abs(x) + abs(y) <= t:\n        return True\n    else:\n        return False\n\n\nfor i in range(N):\n    ti, xi, yi = diff[i]\n    if not is_possible(ti, xi, yi):\n        print(\"No\")\n        exit()\nprint(\"Yes\")\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["-import numpy as np","-","-plan = np.array([[0, 0, 0]] + [list(map(int, input().split())) for i in range(N)])","-diff = np.diff(plan, axis=0)","+plan = [[0, 0, 0]] + [list(map(int, input().split())) for _ in range(N)]","+diff = [[plan[i + 1][j] - plan[i][j] for j in range(3)] for i in range(N)]"],"diff_only_import_comment":false,"measured_runtime_v0":1.4244329751,"measured_runtime_v1":0.2356190042,"runtime_lift":6.0454927205,"key":["s760019873","s278197966"]}
{"user_id":"u599114793","problem_id":"p03721","language":"python","submission_id_v0":"s168629717","submission_id_v1":"s331365181","cpu_time_v0":827,"cpu_time_v1":370,"memory_v0":54036,"memory_v1":83348,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":55.26,"input":"n,k = list(map(int,input().split()))\n\nnum = 0\n\nq = []\n\nfor i in range(n):\n\n    a,b = list(map(int,input().split()))\n\n    q.append((a,b))\n\nq.sort()\n\nfor i in range(n):\n\n    a, b = q[i][0], q[i][1]\n\n    num += b\n\n    if num >= k:\n\n        print(a)\n\n        exit()\n\n\n","target":"n,k = list(map(int,input().split()))\n\ncnt = 0\n\nnum = []\n\nfor i in range(n):\n\n    a,b = list(map(int,input().split()))\n\n    num.append((a,b))\n\nnum.sort()\n\nfor i in range(n):\n\n    cnt += num[i][1]\n\n    if cnt >= k:\n\n        print((num[i][0]))\n\n        exit()","code_v0_loc":14,"code_v1_loc":12,"code_v0_num_chars":252,"code_v1_num_chars":242,"code_v0_no_empty_lines":"n, k = list(map(int, input().split()))\nnum = 0\nq = []\nfor i in range(n):\n    a, b = list(map(int, input().split()))\n    q.append((a, b))\nq.sort()\nfor i in range(n):\n    a, b = q[i][0], q[i][1]\n    num += b\n    if num >= k:\n        print(a)\n        exit()\n","code_v1_no_empty_lines":"n, k = list(map(int, input().split()))\ncnt = 0\nnum = []\nfor i in range(n):\n    a, b = list(map(int, input().split()))\n    num.append((a, b))\nnum.sort()\nfor i in range(n):\n    cnt += num[i][1]\n    if cnt >= k:\n        print((num[i][0]))\n        exit()\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["-num = 0","-q = []","+cnt = 0","+num = []","-    q.append((a, b))","-q.sort()","+    num.append((a, b))","+num.sort()","-    a, b = q[i][0], q[i][1]","-    num += b","-    if num >= k:","-        print(a)","+    cnt += num[i][1]","+    if cnt >= k:","+        print((num[i][0]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3024329725,"measured_runtime_v1":0.2289340452,"runtime_lift":1.3210484801,"key":["s168629717","s331365181"]}
{"user_id":"u047796752","problem_id":"p03197","language":"python","submission_id_v0":"s531607176","submission_id_v1":"s450058032","cpu_time_v0":356,"cpu_time_v1":241,"memory_v0":49496,"memory_v1":43868,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":32.3,"input":"import sys\n\ninput = sys.stdin.readline\n\nfrom collections import *\n\n\n\ndef dfs(x, y):\n\n    if x==0 and y==0:\n\n        t[x][y] = False\n\n        return False\n\n    \n\n    if x>=1:\n\n        t[x][y] |= not dfs(x-1, y)\n\n        \n\n    if y>=1:\n\n        t[x][y] |= not dfs(x, y-1)\n\n        \n\n    if min(x, y)>=1:\n\n        t[x][y] |= not dfs(x-1, y-1)\n\n   \n\n    return t[x][y]\n\n    \n\nt = [[False]*7 for _ in range(7)]\n\n\n\nfor i in range(7):\n\n    for j in range(7):\n\n        dfs(i, j)\n\n\n\n\"\"\"\n\nfor ti in t:\n\n    print(*ti)\n\n\"\"\"\n\n\n\nN = int(eval(input()))\n\nflag = True\n\n\n\nfor _ in range(N):\n\n    a = int(eval(input()))\n\n    \n\n    if a%2==1:\n\n        flag = False\n\n        \n\nif flag:\n\n    print('second')\n\nelse:\n\n    print('first')","target":"import sys\n\ninput = sys.stdin.readline\n\n\n\n\"\"\"\n\ndef dfs(x, y):\n\n    if x==0 and y==0:\n\n        return False\n\n        \n\n    res = False\n\n    \n\n    if x>0:\n\n        res |= not dfs(x-1, y)\n\n    \n\n    if y>0:\n\n        res |= not dfs(x, y-1)\n\n    \n\n    if min(x, y)>0:\n\n        res |= not dfs(x-1, y-1)\n\n    \n\n    return res\n\n    \n\nt = [[False]*5 for _ in range(5)]\n\n\n\nfor i in range(5):\n\n    for j in range(5):\n\n        t[i][j] = dfs(i, j)\n\n\n\nfor ti in t:\n\n    print(*ti)\n\n\"\"\"\n\n\n\nN = int(eval(input()))\n\na = [int(eval(input())) for _ in range(N)]\n\n\n\nfor ai in a:\n\n    if ai%2==1:\n\n        print('first')\n\n        exit()\n\n\n\nprint('second')","code_v0_loc":44,"code_v1_loc":40,"code_v0_num_chars":701,"code_v1_num_chars":621,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nfrom collections import *\n\n\ndef dfs(x, y):\n    if x == 0 and y == 0:\n        t[x][y] = False\n        return False\n    if x >= 1:\n        t[x][y] |= not dfs(x - 1, y)\n    if y >= 1:\n        t[x][y] |= not dfs(x, y - 1)\n    if min(x, y) >= 1:\n        t[x][y] |= not dfs(x - 1, y - 1)\n    return t[x][y]\n\n\nt = [[False] * 7 for _ in range(7)]\nfor i in range(7):\n    for j in range(7):\n        dfs(i, j)\n\"\"\"\nfor ti in t:\n    print(*ti)\n\"\"\"\nN = int(eval(input()))\nflag = True\nfor _ in range(N):\n    a = int(eval(input()))\n    if a % 2 == 1:\n        flag = False\nif flag:\n    print(\"second\")\nelse:\n    print(\"first\")\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\n\"\"\"\ndef dfs(x, y):\n    if x==0 and y==0:\n        return False\n    res = False\n    if x>0:\n        res |= not dfs(x-1, y)\n    if y>0:\n        res |= not dfs(x, y-1)\n    if min(x, y)>0:\n        res |= not dfs(x-1, y-1)\n    return res\nt = [[False]*5 for _ in range(5)]\nfor i in range(5):\n    for j in range(5):\n        t[i][j] = dfs(i, j)\nfor ti in t:\n    print(*ti)\n\"\"\"\nN = int(eval(input()))\na = [int(eval(input())) for _ in range(N)]\nfor ai in a:\n    if ai % 2 == 1:\n        print(\"first\")\n        exit()\nprint(\"second\")\n","code_same":false,"relative_loc_diff_percent":9.0909090909,"diff":["-from collections import *","-","-","+\"\"\"","-    if x == 0 and y == 0:","-        t[x][y] = False","+    if x==0 and y==0:","-    if x >= 1:","-        t[x][y] |= not dfs(x - 1, y)","-    if y >= 1:","-        t[x][y] |= not dfs(x, y - 1)","-    if min(x, y) >= 1:","-        t[x][y] |= not dfs(x - 1, y - 1)","-    return t[x][y]","-","-","-t = [[False] * 7 for _ in range(7)]","-for i in range(7):","-    for j in range(7):","-        dfs(i, j)","-\"\"\"","+    res = False","+    if x>0:","+        res |= not dfs(x-1, y)","+    if y>0:","+        res |= not dfs(x, y-1)","+    if min(x, y)>0:","+        res |= not dfs(x-1, y-1)","+    return res","+t = [[False]*5 for _ in range(5)]","+for i in range(5):","+    for j in range(5):","+        t[i][j] = dfs(i, j)","-flag = True","-for _ in range(N):","-    a = int(eval(input()))","-    if a % 2 == 1:","-        flag = False","-if flag:","-    print(\"second\")","-else:","-    print(\"first\")","+a = [int(eval(input())) for _ in range(N)]","+for ai in a:","+    if ai % 2 == 1:","+        print(\"first\")","+        exit()","+print(\"second\")"],"diff_only_import_comment":false,"measured_runtime_v0":0.4127988609,"measured_runtime_v1":0.1956315268,"runtime_lift":2.1100835213,"key":["s531607176","s450058032"]}
{"user_id":"u094191970","problem_id":"p03416","language":"python","submission_id_v0":"s196951264","submission_id_v1":"s755826464","cpu_time_v0":127,"cpu_time_v1":57,"memory_v0":2940,"memory_v1":9184,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":55.12,"input":"a,b=list(map(int, input().split()))\n\ncnt=0\n\nfor i in range(a,b+1):\n\n    n=list(str(i))\n\n    if n==list(reversed(n)):\n\n        cnt+=1\n\nprint(cnt)","target":"from sys import stdin\n\nnii=lambda:list(map(int,stdin.readline().split()))\n\nlnii=lambda:list(map(int,stdin.readline().split()))\n\n\n\na,b=nii()\n\nans=0\n\nfor i in range(a,b+1):\n\n  s=str(i)\n\n  if s==s[::-1]:\n\n    ans+=1\n\n\n\nprint(ans)","code_v0_loc":7,"code_v1_loc":12,"code_v0_num_chars":138,"code_v1_num_chars":220,"code_v0_no_empty_lines":"a, b = list(map(int, input().split()))\ncnt = 0\nfor i in range(a, b + 1):\n    n = list(str(i))\n    if n == list(reversed(n)):\n        cnt += 1\nprint(cnt)\n","code_v1_no_empty_lines":"from sys import stdin\n\nnii = lambda: list(map(int, stdin.readline().split()))\nlnii = lambda: list(map(int, stdin.readline().split()))\na, b = nii()\nans = 0\nfor i in range(a, b + 1):\n    s = str(i)\n    if s == s[::-1]:\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":41.6666666667,"diff":["-a, b = list(map(int, input().split()))","-cnt = 0","+from sys import stdin","+","+nii = lambda: list(map(int, stdin.readline().split()))","+lnii = lambda: list(map(int, stdin.readline().split()))","+a, b = nii()","+ans = 0","-    n = list(str(i))","-    if n == list(reversed(n)):","-        cnt += 1","-print(cnt)","+    s = str(i)","+    if s == s[::-1]:","+        ans += 1","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.4537812017,"measured_runtime_v1":0.1270140123,"runtime_lift":3.5726861437,"key":["s196951264","s755826464"]}
{"user_id":"u046187684","problem_id":"p03416","language":"python","submission_id_v0":"s340270167","submission_id_v1":"s097893502","cpu_time_v0":67,"cpu_time_v1":60,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.45,"input":"a, b = list(map(int, input().strip().split(\" \")))\n\ncount = 0\n\nfor i in range(a, b + 1):\n\n    if str(i) == str(i)[::-1]:\n\n        count += 1\n\nprint(count)\n","target":"def solve(string):\n\n    a, b = list(map(int, string.split()))\n\n    count = 0\n\n    for i in range(a, b + 1):\n\n        if str(i) == str(i)[::-1]:\n\n            count += 1\n\n    return str(count)\n\n\n\n\n\nif __name__ == '__main__':\n\n    print((solve(eval(input()))))\n","code_v0_loc":6,"code_v1_loc":11,"code_v0_num_chars":148,"code_v1_num_chars":244,"code_v0_no_empty_lines":"a, b = list(map(int, input().strip().split(\" \")))\ncount = 0\nfor i in range(a, b + 1):\n    if str(i) == str(i)[::-1]:\n        count += 1\nprint(count)\n","code_v1_no_empty_lines":"def solve(string):\n    a, b = list(map(int, string.split()))\n    count = 0\n    for i in range(a, b + 1):\n        if str(i) == str(i)[::-1]:\n            count += 1\n    return str(count)\n\n\nif __name__ == \"__main__\":\n    print((solve(eval(input()))))\n","code_same":false,"relative_loc_diff_percent":45.4545454545,"diff":["-a, b = list(map(int, input().strip().split(\" \")))","-count = 0","-for i in range(a, b + 1):","-    if str(i) == str(i)[::-1]:","-        count += 1","-print(count)","+def solve(string):","+    a, b = list(map(int, string.split()))","+    count = 0","+    for i in range(a, b + 1):","+        if str(i) == str(i)[::-1]:","+            count += 1","+    return str(count)","+","+","+if __name__ == \"__main__\":","+    print((solve(eval(input()))))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2889559059,"measured_runtime_v1":0.2039610577,"runtime_lift":1.4167209624,"key":["s340270167","s097893502"]}
{"user_id":"u257162238","problem_id":"p02624","language":"python","submission_id_v0":"s814809556","submission_id_v1":"s037607801","cpu_time_v0":1856,"cpu_time_v1":667,"memory_v0":151556,"memory_v1":108988,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":64.06,"input":"import sys\n\ninput = sys.stdin.readline\n\nfrom collections import Counter\n\nimport numpy as np\n\nfrom numba import njit\n\n\n\n\n\ndef read():\n\n    N = int(input().strip())\n\n    return N,\n\n\n\n\n\n@njit\n\ndef f(n):\n\n    \"\"\"\n\n    \u7d04\u6570\u306e\u500b\u6570\u3092\u6c42\u3081\u308b\n\n    \"\"\"\n\n    ndivs = np.ones((n+1), dtype=np.int32)\n\n    for i in range(2, n+1):\n\n        for j in range(i, n+1, i):\n\n            ndivs[j] += 1\n\n    return ndivs\n\n\n\n\n\n@njit\n\ndef solve(N):\n\n    fn = f(N)\n\n    ans = 0\n\n    for k in range(1, N+1):\n\n        ans += k * fn[k]\n\n    return ans\n\n\n\n\n\nif __name__ == '__main__':\n\n    inputs = read()\n\n    outputs = solve(*inputs)\n\n    if outputs is not None:\n\n        print((\"%s\" % str(outputs)))\n","target":"import sys\n\ninput = sys.stdin.readline\n\nimport numpy as np\n\nfrom numba import njit\n\n\n\n\n\ndef read():\n\n    N = int(input().strip())\n\n    return N,\n\n\n\n\n\n@njit\n\ndef solve(N):\n\n    ndivs = 0\n\n    for i in range(1, N+1):\n\n        for j in range(i, N+1, i):\n\n            ndivs += j\n\n    return ndivs\n\n\n\n\n\nif __name__ == '__main__':\n\n    inputs = read()\n\n    outputs = solve(*inputs)\n\n    if outputs is not None:\n\n        print((\"%s\" % str(outputs)))\n","code_v0_loc":38,"code_v1_loc":25,"code_v0_num_chars":660,"code_v1_num_chars":441,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nfrom collections import Counter\nimport numpy as np\nfrom numba import njit\n\n\ndef read():\n    N = int(input().strip())\n    return (N,)\n\n\n@njit\ndef f(n):\n    \"\"\"\n    \u7d04\u6570\u306e\u500b\u6570\u3092\u6c42\u3081\u308b\n    \"\"\"\n    ndivs = np.ones((n + 1), dtype=np.int32)\n    for i in range(2, n + 1):\n        for j in range(i, n + 1, i):\n            ndivs[j] += 1\n    return ndivs\n\n\n@njit\ndef solve(N):\n    fn = f(N)\n    ans = 0\n    for k in range(1, N + 1):\n        ans += k * fn[k]\n    return ans\n\n\nif __name__ == \"__main__\":\n    inputs = read()\n    outputs = solve(*inputs)\n    if outputs is not None:\n        print((\"%s\" % str(outputs)))\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nimport numpy as np\nfrom numba import njit\n\n\ndef read():\n    N = int(input().strip())\n    return (N,)\n\n\n@njit\ndef solve(N):\n    ndivs = 0\n    for i in range(1, N + 1):\n        for j in range(i, N + 1, i):\n            ndivs += j\n    return ndivs\n\n\nif __name__ == \"__main__\":\n    inputs = read()\n    outputs = solve(*inputs)\n    if outputs is not None:\n        print((\"%s\" % str(outputs)))\n","code_same":false,"relative_loc_diff_percent":34.2105263158,"diff":["-from collections import Counter","-def f(n):","-    \"\"\"","-    \u7d04\u6570\u306e\u500b\u6570\u3092\u6c42\u3081\u308b","-    \"\"\"","-    ndivs = np.ones((n + 1), dtype=np.int32)","-    for i in range(2, n + 1):","-        for j in range(i, n + 1, i):","-            ndivs[j] += 1","+def solve(N):","+    ndivs = 0","+    for i in range(1, N + 1):","+        for j in range(i, N + 1, i):","+            ndivs += j","-","-","-@njit","-def solve(N):","-    fn = f(N)","-    ans = 0","-    for k in range(1, N + 1):","-        ans += k * fn[k]","-    return ans"],"diff_only_import_comment":false,"measured_runtime_v0":0.4968368752,"measured_runtime_v1":0.1134250557,"runtime_lift":4.3803097288,"key":["s814809556","s037607801"]}
{"user_id":"u581187895","problem_id":"p02881","language":"python","submission_id_v0":"s424797203","submission_id_v1":"s436835790","cpu_time_v0":169,"cpu_time_v1":116,"memory_v0":29000,"memory_v1":3464,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":31.36,"input":"# a+b-2\n\n# N = a*b  \u3088\u3063\u3066N\u306e\u7d04\u6570\u3092\u6c42\u3081\u308b\n\nimport numpy as np\n\n\n\nN = int(eval(input()))\n\nU = 10**6+100\n\nx = np.arange(1, U, dtype=np.int64)\n\ndiv = x[N%x==0]\n\nans = (div + N\/\/div).min() - 2\n\nprint(ans)","target":"import sys\n\nsys.setrecursionlimit(10 ** 7)\n\nread = sys.stdin.buffer.read \n\ninput = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines  \n\n\n\ndef make_divisors(n):\n\n    divisors = []\n\n    for i in range(1, int(n**0.5)+1):\n\n        if n % i == 0:\n\n            divisors.append((i, n\/\/i))\n\n            \n\n    # divisors.sort()\n\n    return divisors\n\n\n\nN = int(eval(input()))\n\ndiv = make_divisors(N)\n\n\n\nans = 10**15\n\nfor a, b in div:\n\n  ans = min(ans, a+b-2)\n\nprint(ans)  \n\n\n","code_v0_loc":10,"code_v1_loc":23,"code_v0_num_chars":184,"code_v1_num_chars":475,"code_v0_no_empty_lines":"# a+b-2\n# N = a*b  \u3088\u3063\u3066N\u306e\u7d04\u6570\u3092\u6c42\u3081\u308b\nimport numpy as np\n\nN = int(eval(input()))\nU = 10**6 + 100\nx = np.arange(1, U, dtype=np.int64)\ndiv = x[N % x == 0]\nans = (div + N \/\/ div).min() - 2\nprint(ans)\n","code_v1_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10**7)\nread = sys.stdin.buffer.read\ninput = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\n\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append((i, n \/\/ i))\n    # divisors.sort()\n    return divisors\n\n\nN = int(eval(input()))\ndiv = make_divisors(N)\nans = 10**15\nfor a, b in div:\n    ans = min(ans, a + b - 2)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":56.5217391304,"diff":["-# a+b-2","-# N = a*b  \u3088\u3063\u3066N\u306e\u7d04\u6570\u3092\u6c42\u3081\u308b","-import numpy as np","+import sys","+","+sys.setrecursionlimit(10**7)","+read = sys.stdin.buffer.read","+input = sys.stdin.buffer.readline","+readlines = sys.stdin.buffer.readlines","+","+","+def make_divisors(n):","+    divisors = []","+    for i in range(1, int(n**0.5) + 1):","+        if n % i == 0:","+            divisors.append((i, n \/\/ i))","+    # divisors.sort()","+    return divisors","+","-U = 10**6 + 100","-x = np.arange(1, U, dtype=np.int64)","-div = x[N % x == 0]","-ans = (div + N \/\/ div).min() - 2","+div = make_divisors(N)","+ans = 10**15","+for a, b in div:","+    ans = min(ans, a + b - 2)"],"diff_only_import_comment":false,"measured_runtime_v0":1.7032481675,"measured_runtime_v1":0.2399272685,"runtime_lift":7.099018707,"key":["s424797203","s436835790"]}
{"user_id":"u254871849","problem_id":"p02994","language":"python","submission_id_v0":"s625520179","submission_id_v1":"s190948033","cpu_time_v0":151,"cpu_time_v1":17,"memory_v0":12488,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.74,"input":"import sys\n\nimport numpy as np \n\n\n\nn, l = list(map(int, sys.stdin.readline().split()))\n\n\n\ndef main():\n\n    f = l + np.arange(1, n+1) - 1\n\n    s = f.sum()\n\n    a = np.absolute(f)\n\n    mi = np.amin(a)\n\n    i = np.argwhere(a == mi)[0, 0]\n\n    return s - f[i]\n\n\n\nif __name__ == '__main__':\n\n    ans = main()\n\n    print(ans)","target":"import sys\n\n\n\nn, l = list(map(int, sys.stdin.readline().split()))\n\n\n\ndef main():\n\n    s = (l - 1) * n + (1 + n) * n \/\/ 2\n\n    res = []\n\n    for i in range(1, n+1):\n\n        f = l + i - 1\n\n        res.append((abs(f), s - f))\n\n    \n\n    res.sort()\n\n    return res[0][1]\n\n\n\nif __name__=='__main__':\n\n    ans = main()\n\n    print(ans)","code_v0_loc":16,"code_v1_loc":17,"code_v0_num_chars":313,"code_v1_num_chars":323,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nn, l = list(map(int, sys.stdin.readline().split()))\n\n\ndef main():\n    f = l + np.arange(1, n + 1) - 1\n    s = f.sum()\n    a = np.absolute(f)\n    mi = np.amin(a)\n    i = np.argwhere(a == mi)[0, 0]\n    return s - f[i]\n\n\nif __name__ == \"__main__\":\n    ans = main()\n    print(ans)\n","code_v1_no_empty_lines":"import sys\n\nn, l = list(map(int, sys.stdin.readline().split()))\n\n\ndef main():\n    s = (l - 1) * n + (1 + n) * n \/\/ 2\n    res = []\n    for i in range(1, n + 1):\n        f = l + i - 1\n        res.append((abs(f), s - f))\n    res.sort()\n    return res[0][1]\n\n\nif __name__ == \"__main__\":\n    ans = main()\n    print(ans)\n","code_same":false,"relative_loc_diff_percent":5.8823529412,"diff":["-import numpy as np","-    f = l + np.arange(1, n + 1) - 1","-    s = f.sum()","-    a = np.absolute(f)","-    mi = np.amin(a)","-    i = np.argwhere(a == mi)[0, 0]","-    return s - f[i]","+    s = (l - 1) * n + (1 + n) * n \/\/ 2","+    res = []","+    for i in range(1, n + 1):","+        f = l + i - 1","+        res.append((abs(f), s - f))","+    res.sort()","+    return res[0][1]"],"diff_only_import_comment":false,"measured_runtime_v0":1.3280655489,"measured_runtime_v1":0.2091949449,"runtime_lift":6.3484590879,"key":["s625520179","s190948033"]}
{"user_id":"u580697892","problem_id":"p02982","language":"python","submission_id_v0":"s380388533","submission_id_v1":"s555933357","cpu_time_v0":150,"cpu_time_v1":20,"memory_v0":12412,"memory_v1":3316,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":86.67,"input":"# coding: utf-8\n\nimport numpy as np\n\nn, d = list(map(int, input().split()))\n\ncnt = 0\n\nX = []\n\nfor i in range(n):\n\n    x = list(map(int, input().split()))\n\n    X.append(x[:])\n\nX = np.array(X)\n\nfor i in range(n):\n\n    X_tmp = X[:]\n\n    X_tmp -= X[i]\n\n    for i in range(n):\n\n        x = X_tmp[i]\n\n        x_sq = x**2\n\n        x_sq = np.sqrt(sum(x_sq))\n\n        if x_sq % 1 == 0:\n\n            cnt += 1\n\nprint(((cnt-n)\/\/2))","target":"# coding: utf-8\n\nN, D = list(map(int, input().split()))\n\nX = []\n\nans = 0\n\nfor i in range(N):\n\n    X.append(list(map(int, input().split())))\n\nfor i in range(N):\n\n    for j in range(N):\n\n        dist = 0\n\n        if i == j:\n\n            continue\n\n        for d in range(D):\n\n            dist += ((X[i][d] - X[j][d])**2)\n\n        if dist**0.5 == int(dist**0.5):\n\n            ans += 1\n\nprint((ans\/\/2))","code_v0_loc":19,"code_v1_loc":16,"code_v0_num_chars":411,"code_v1_num_chars":389,"code_v0_no_empty_lines":"# coding: utf-8\nimport numpy as np\n\nn, d = list(map(int, input().split()))\ncnt = 0\nX = []\nfor i in range(n):\n    x = list(map(int, input().split()))\n    X.append(x[:])\nX = np.array(X)\nfor i in range(n):\n    X_tmp = X[:]\n    X_tmp -= X[i]\n    for i in range(n):\n        x = X_tmp[i]\n        x_sq = x**2\n        x_sq = np.sqrt(sum(x_sq))\n        if x_sq % 1 == 0:\n            cnt += 1\nprint(((cnt - n) \/\/ 2))\n","code_v1_no_empty_lines":"# coding: utf-8\nN, D = list(map(int, input().split()))\nX = []\nans = 0\nfor i in range(N):\n    X.append(list(map(int, input().split())))\nfor i in range(N):\n    for j in range(N):\n        dist = 0\n        if i == j:\n            continue\n        for d in range(D):\n            dist += (X[i][d] - X[j][d]) ** 2\n        if dist**0.5 == int(dist**0.5):\n            ans += 1\nprint((ans \/\/ 2))\n","code_same":false,"relative_loc_diff_percent":15.7894736842,"diff":["-import numpy as np","-","-n, d = list(map(int, input().split()))","-cnt = 0","+N, D = list(map(int, input().split()))","-for i in range(n):","-    x = list(map(int, input().split()))","-    X.append(x[:])","-X = np.array(X)","-for i in range(n):","-    X_tmp = X[:]","-    X_tmp -= X[i]","-    for i in range(n):","-        x = X_tmp[i]","-        x_sq = x**2","-        x_sq = np.sqrt(sum(x_sq))","-        if x_sq % 1 == 0:","-            cnt += 1","-print(((cnt - n) \/\/ 2))","+ans = 0","+for i in range(N):","+    X.append(list(map(int, input().split())))","+for i in range(N):","+    for j in range(N):","+        dist = 0","+        if i == j:","+            continue","+        for d in range(D):","+            dist += (X[i][d] - X[j][d]) ** 2","+        if dist**0.5 == int(dist**0.5):","+            ans += 1","+print((ans \/\/ 2))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3454763293,"measured_runtime_v1":0.2011937041,"runtime_lift":6.6874673593,"key":["s380388533","s555933357"]}
{"user_id":"u228223940","problem_id":"p02647","language":"python","submission_id_v0":"s621197357","submission_id_v1":"s626568623","cpu_time_v0":912,"cpu_time_v1":246,"memory_v0":179240,"memory_v1":155944,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":73.03,"input":"import copy\n\nn,k = list(map(int,input().split()))\n\nai = [int(i) for i in input().split()]\n\n\n\nold_ai = ai\n\ncnt = 0\n\n\n\nwhile 1 == 1:\n\n    old_ai = copy.deepcopy(ai)\n\n    li = [0]*(n+1)\n\n    for i in range(n):\n\n        li[max(0,i-ai[i])] += 1\n\n        li[min(n,i+1+ai[i])] -= 1\n\n        #print(li)\n\n    #print(li)\n\n    tmp = 0\n\n    for i in range(n):\n\n        if i == 0:\n\n            ai[i] = li[i]\n\n            tmp += ai[i]\n\n        else:\n\n            ai[i] = li[i] + ai[i-1]\n\n            tmp += ai[i]\n\n    #print(rui)\n\n    if ai == old_ai:\n\n        print((*ai))\n\n        exit()\n\n        break\n\n    cnt += 1\n\n    if cnt == k:\n\n        print((*ai))\n\n        exit()\n\n    old_ai = ai","target":"import copy\n\nn,k = list(map(int,input().split()))\n\nai = [int(i) for i in input().split()]\n\n\n\n#old_ai = ai\n\ncnt = 0\n\nold_tmp = sum(ai)\n\n\n\nwhile 1 == 1:\n\n    #old_ai = copy.deepcopy(ai)\n\n    li = [0]*(n+1)\n\n    for i in range(n):\n\n        li[max(0,i-ai[i])] += 1\n\n        li[min(n,i+1+ai[i])] -= 1\n\n        #print(li)\n\n    #print(li)\n\n    tmp = 0\n\n    for i in range(n):\n\n        if i == 0:\n\n            ai[i] = li[i]\n\n            tmp += ai[i]\n\n        else:\n\n            ai[i] = li[i] + ai[i-1]\n\n            tmp += ai[i]\n\n    #print(rui)\n\n    if old_tmp == tmp:\n\n        print((*ai))\n\n        exit()\n\n        break\n\n    cnt += 1\n\n    if cnt == k:\n\n        print((*ai))\n\n        exit()\n\n    old_tmp = tmp","code_v0_loc":33,"code_v1_loc":34,"code_v0_num_chars":667,"code_v1_num_chars":692,"code_v0_no_empty_lines":"import copy\n\nn, k = list(map(int, input().split()))\nai = [int(i) for i in input().split()]\nold_ai = ai\ncnt = 0\nwhile 1 == 1:\n    old_ai = copy.deepcopy(ai)\n    li = [0] * (n + 1)\n    for i in range(n):\n        li[max(0, i - ai[i])] += 1\n        li[min(n, i + 1 + ai[i])] -= 1\n        # print(li)\n    # print(li)\n    tmp = 0\n    for i in range(n):\n        if i == 0:\n            ai[i] = li[i]\n            tmp += ai[i]\n        else:\n            ai[i] = li[i] + ai[i - 1]\n            tmp += ai[i]\n    # print(rui)\n    if ai == old_ai:\n        print((*ai))\n        exit()\n        break\n    cnt += 1\n    if cnt == k:\n        print((*ai))\n        exit()\n    old_ai = ai\n","code_v1_no_empty_lines":"import copy\n\nn, k = list(map(int, input().split()))\nai = [int(i) for i in input().split()]\n# old_ai = ai\ncnt = 0\nold_tmp = sum(ai)\nwhile 1 == 1:\n    # old_ai = copy.deepcopy(ai)\n    li = [0] * (n + 1)\n    for i in range(n):\n        li[max(0, i - ai[i])] += 1\n        li[min(n, i + 1 + ai[i])] -= 1\n        # print(li)\n    # print(li)\n    tmp = 0\n    for i in range(n):\n        if i == 0:\n            ai[i] = li[i]\n            tmp += ai[i]\n        else:\n            ai[i] = li[i] + ai[i - 1]\n            tmp += ai[i]\n    # print(rui)\n    if old_tmp == tmp:\n        print((*ai))\n        exit()\n        break\n    cnt += 1\n    if cnt == k:\n        print((*ai))\n        exit()\n    old_tmp = tmp\n","code_same":false,"relative_loc_diff_percent":2.9411764706,"diff":["-old_ai = ai","+# old_ai = ai","+old_tmp = sum(ai)","-    old_ai = copy.deepcopy(ai)","+    # old_ai = copy.deepcopy(ai)","-    if ai == old_ai:","+    if old_tmp == tmp:","-    old_ai = ai","+    old_tmp = tmp"],"diff_only_import_comment":false,"measured_runtime_v0":0.2951365216,"measured_runtime_v1":0.2292118037,"runtime_lift":1.2876148472,"key":["s621197357","s626568623"]}
{"user_id":"u952708174","problem_id":"p03078","language":"python","submission_id_v0":"s922291815","submission_id_v1":"s412525457","cpu_time_v0":717,"cpu_time_v1":455,"memory_v0":194972,"memory_v1":129708,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":36.54,"input":"def d_cake_123_binary_search(X, Y, Z, K, A, B, C):\n\n    # editional\u306e\u89e3\u6cd54 O(K^2log(max(P))\n\n    # \u53c2\u8003: https:\/\/atcoder.jp\/contests\/abc123\/submissions\/4871511\n\n    import bisect\n\n    ab = sorted([e1 + e2 for e2 in B for e1 in A])  # A, B\u306e\u8981\u7d20\u306f\u5168\u90e8\u8abf\u3079\u308b\n\n\n\n    # rejected \u4ee5\u4e0a\u306e\u5024\u306f\u3001\u7f8e\u5473\u3057\u3055\u306e\u5408\u8a08\u304c\u305d\u308c\u4ee5\u4e0a\u3067\u3042\u308b\u500b\u6570\u304cK\u500b\u672a\u6e80\u3067\u3042\u308b\n\n    accepted, rejected = -1, 10**11\n\n    while abs(accepted - rejected) > 1:\n\n        mid = (accepted + rejected) \/\/ 2\n\n        count = sum([len(ab) - bisect.bisect_left(ab, mid - e) for e in C])\n\n        if count >= K:\n\n            accepted = mid\n\n        else:\n\n            rejected = mid\n\n\n\n    ans = []\n\n    for e in C:\n\n        idx = bisect.bisect_left(ab, accepted - e)\n\n        for i in range(idx, len(ab)):\n\n            ans.append(e + ab[i])\n\n    ans.sort(reverse=True)\n\n    return '\\n'.join(map(str, ans[:K]))\n\n\n\nX, Y, Z, K = [int(i) for i in input().split()]\n\nA = [int(i) for i in input().split()]\n\nB = [int(i) for i in input().split()]\n\nC = [int(i) for i in input().split()]\n\nprint((d_cake_123_binary_search(X, Y, Z, K, A, B, C)))","target":"def d_cake_123_sort_modified():\n\n    \"\"\"editorial \u306e\u89e3\u6cd5 1.\"\"\"\n\n    import sys\n\n    import numpy as np\n\n    input = sys.stdin.readline\n\n    X, Y, Z, K = [int(i) for i in input().split()]\n\n    A = np.array([int(i) for i in input().split()])\n\n    B = np.array([int(i) for i in input().split()])\n\n    C = np.array([int(i) for i in input().split()])\n\n\n\n    _a, _b = np.meshgrid(A, B)\n\n    ab = np.sort((_a + _b).flatten())[::-1][:K]\n\n    _ab, _c = np.meshgrid(ab, C)\n\n    ans = np.sort((_ab + _c).flatten())[::-1][:K]\n\n    return '\\n'.join(map(str, ans))\n\n\n\nprint((d_cake_123_sort_modified()))","code_v0_loc":29,"code_v1_loc":17,"code_v0_num_chars":1033,"code_v1_num_chars":584,"code_v0_no_empty_lines":"def d_cake_123_binary_search(X, Y, Z, K, A, B, C):\n    # editional\u306e\u89e3\u6cd54 O(K^2log(max(P))\n    # \u53c2\u8003: https:\/\/atcoder.jp\/contests\/abc123\/submissions\/4871511\n    import bisect\n\n    ab = sorted([e1 + e2 for e2 in B for e1 in A])  # A, B\u306e\u8981\u7d20\u306f\u5168\u90e8\u8abf\u3079\u308b\n    # rejected \u4ee5\u4e0a\u306e\u5024\u306f\u3001\u7f8e\u5473\u3057\u3055\u306e\u5408\u8a08\u304c\u305d\u308c\u4ee5\u4e0a\u3067\u3042\u308b\u500b\u6570\u304cK\u500b\u672a\u6e80\u3067\u3042\u308b\n    accepted, rejected = -1, 10**11\n    while abs(accepted - rejected) > 1:\n        mid = (accepted + rejected) \/\/ 2\n        count = sum([len(ab) - bisect.bisect_left(ab, mid - e) for e in C])\n        if count >= K:\n            accepted = mid\n        else:\n            rejected = mid\n    ans = []\n    for e in C:\n        idx = bisect.bisect_left(ab, accepted - e)\n        for i in range(idx, len(ab)):\n            ans.append(e + ab[i])\n    ans.sort(reverse=True)\n    return \"\\n\".join(map(str, ans[:K]))\n\n\nX, Y, Z, K = [int(i) for i in input().split()]\nA = [int(i) for i in input().split()]\nB = [int(i) for i in input().split()]\nC = [int(i) for i in input().split()]\nprint((d_cake_123_binary_search(X, Y, Z, K, A, B, C)))\n","code_v1_no_empty_lines":"def d_cake_123_sort_modified():\n    \"\"\"editorial \u306e\u89e3\u6cd5 1.\"\"\"\n    import sys\n    import numpy as np\n\n    input = sys.stdin.readline\n    X, Y, Z, K = [int(i) for i in input().split()]\n    A = np.array([int(i) for i in input().split()])\n    B = np.array([int(i) for i in input().split()])\n    C = np.array([int(i) for i in input().split()])\n    _a, _b = np.meshgrid(A, B)\n    ab = np.sort((_a + _b).flatten())[::-1][:K]\n    _ab, _c = np.meshgrid(ab, C)\n    ans = np.sort((_ab + _c).flatten())[::-1][:K]\n    return \"\\n\".join(map(str, ans))\n\n\nprint((d_cake_123_sort_modified()))\n","code_same":false,"relative_loc_diff_percent":41.3793103448,"diff":["-def d_cake_123_binary_search(X, Y, Z, K, A, B, C):","-    # editional\u306e\u89e3\u6cd54 O(K^2log(max(P))","-    # \u53c2\u8003: https:\/\/atcoder.jp\/contests\/abc123\/submissions\/4871511","-    import bisect","+def d_cake_123_sort_modified():","+    \"\"\"editorial \u306e\u89e3\u6cd5 1.\"\"\"","+    import sys","+    import numpy as np","-    ab = sorted([e1 + e2 for e2 in B for e1 in A])  # A, B\u306e\u8981\u7d20\u306f\u5168\u90e8\u8abf\u3079\u308b","-    # rejected \u4ee5\u4e0a\u306e\u5024\u306f\u3001\u7f8e\u5473\u3057\u3055\u306e\u5408\u8a08\u304c\u305d\u308c\u4ee5\u4e0a\u3067\u3042\u308b\u500b\u6570\u304cK\u500b\u672a\u6e80\u3067\u3042\u308b","-    accepted, rejected = -1, 10**11","-    while abs(accepted - rejected) > 1:","-        mid = (accepted + rejected) \/\/ 2","-        count = sum([len(ab) - bisect.bisect_left(ab, mid - e) for e in C])","-        if count >= K:","-            accepted = mid","-        else:","-            rejected = mid","-    ans = []","-    for e in C:","-        idx = bisect.bisect_left(ab, accepted - e)","-        for i in range(idx, len(ab)):","-            ans.append(e + ab[i])","-    ans.sort(reverse=True)","-    return \"\\n\".join(map(str, ans[:K]))","+    input = sys.stdin.readline","+    X, Y, Z, K = [int(i) for i in input().split()]","+    A = np.array([int(i) for i in input().split()])","+    B = np.array([int(i) for i in input().split()])","+    C = np.array([int(i) for i in input().split()])","+    _a, _b = np.meshgrid(A, B)","+    ab = np.sort((_a + _b).flatten())[::-1][:K]","+    _ab, _c = np.meshgrid(ab, C)","+    ans = np.sort((_ab + _c).flatten())[::-1][:K]","+    return \"\\n\".join(map(str, ans))","-X, Y, Z, K = [int(i) for i in input().split()]","-A = [int(i) for i in input().split()]","-B = [int(i) for i in input().split()]","-C = [int(i) for i in input().split()]","-print((d_cake_123_binary_search(X, Y, Z, K, A, B, C)))","+print((d_cake_123_sort_modified()))"],"diff_only_import_comment":false,"measured_runtime_v0":0.1953599396,"measured_runtime_v1":0.0065046697,"runtime_lift":30.0337986858,"key":["s922291815","s412525457"]}
{"user_id":"u257974487","problem_id":"p03796","language":"python","submission_id_v0":"s235320519","submission_id_v1":"s032021754","cpu_time_v0":230,"cpu_time_v1":40,"memory_v0":3980,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":82.61,"input":"import math\n\nN = int(eval(input()))\n\np = math.factorial(N)\n\nprint((p % 1000000007))","target":"N = int(eval(input()))\n\np = 1\n\nfor i in range(1,N+1):\n\n    p *= i\n\n    p %= 1000000007\n\nprint(p)\n","code_v0_loc":4,"code_v1_loc":6,"code_v0_num_chars":75,"code_v1_num_chars":91,"code_v0_no_empty_lines":"import math\n\nN = int(eval(input()))\np = math.factorial(N)\nprint((p % 1000000007))\n","code_v1_no_empty_lines":"N = int(eval(input()))\np = 1\nfor i in range(1, N + 1):\n    p *= i\n    p %= 1000000007\nprint(p)\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-import math","-","-p = math.factorial(N)","-print((p % 1000000007))","+p = 1","+for i in range(1, N + 1):","+    p *= i","+    p %= 1000000007","+print(p)"],"diff_only_import_comment":false,"measured_runtime_v0":0.768677109,"measured_runtime_v1":0.410683428,"runtime_lift":1.8717022808,"key":["s235320519","s032021754"]}
{"user_id":"u577170763","problem_id":"p03608","language":"python","submission_id_v0":"s067652861","submission_id_v1":"s587574381","cpu_time_v0":1958,"cpu_time_v1":443,"memory_v0":17188,"memory_v1":48088,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":77.37,"input":"import itertools\n\nfrom scipy.sparse.csgraph import floyd_warshall\n\n\n\nN, M, R = list(map(int, input().split()))\n\nr = tuple(map(int, input().split()))\n\n\n\nINF = 10**10\n\n\n\nd = [[INF] * N for _ in range(N)]\n\n\n\nfor i in range(N):\n\n    d[i][i] = 0\n\n\n\nfor _ in range(M):\n\n    a, b, c = list(map(int, input().split()))\n\n    a -= 1\n\n    b -= 1\n\n    if d[a][b] > c:\n\n        d[a][b] = c\n\n        d[b][a] = c\n\n\n\n\n\ndef warshall(d):\n\n    for k in range(N):\n\n        for i in range(N):\n\n            for j in range(N):\n\n                if d[i][j] > d[i][k] + d[k][j]:\n\n                    d[i][j] = d[i][k] + d[k][j]\n\n\n\n\n\n# d = floyd_warshall(d)\n\nwarshall(d)\n\n\n\n\n\nans = INF\n\nfor p in itertools.permutations(r):\n\n    dist = 0\n\n    for i in range(R-1):\n\n        dist += d[p[i]-1][p[i+1]-1]\n\n\n\n    if ans > dist:\n\n        ans = dist\n\n\n\nprint((int(ans)))","target":"import itertools\n\n\n\nN, M, R = list(map(int, input().split()))\n\nr = tuple(map(int, input().split()))\n\n\n\nINF = 10**10\n\n\n\nd = [[INF] * N for _ in range(N)]\n\n\n\nfor i in range(N):\n\n    d[i][i] = 0\n\n\n\nfor _ in range(M):\n\n    a, b, c = list(map(int, input().split()))\n\n    a -= 1\n\n    b -= 1\n\n    if d[a][b] > c:\n\n        d[a][b] = c\n\n        d[b][a] = c\n\n\n\n\n\ndef warshall(d):\n\n    for k in range(N):\n\n        for i in range(N):\n\n            for j in range(N):\n\n                if d[i][j] > d[i][k] + d[k][j]:\n\n                    d[i][j] = d[i][k] + d[k][j]\n\n\n\n\n\n# d = floyd_warshall(d)\n\nwarshall(d)\n\n\n\n\n\nans = INF\n\nfor p in itertools.permutations(r):\n\n    dist = 0\n\n    for i in range(R-1):\n\n        dist += d[p[i]-1][p[i+1]-1]\n\n\n\n    if ans > dist:\n\n        ans = dist\n\n\n\nprint((int(ans)))\n","code_v0_loc":44,"code_v1_loc":43,"code_v0_num_chars":820,"code_v1_num_chars":772,"code_v0_no_empty_lines":"import itertools\nfrom scipy.sparse.csgraph import floyd_warshall\n\nN, M, R = list(map(int, input().split()))\nr = tuple(map(int, input().split()))\nINF = 10**10\nd = [[INF] * N for _ in range(N)]\nfor i in range(N):\n    d[i][i] = 0\nfor _ in range(M):\n    a, b, c = list(map(int, input().split()))\n    a -= 1\n    b -= 1\n    if d[a][b] > c:\n        d[a][b] = c\n        d[b][a] = c\n\n\ndef warshall(d):\n    for k in range(N):\n        for i in range(N):\n            for j in range(N):\n                if d[i][j] > d[i][k] + d[k][j]:\n                    d[i][j] = d[i][k] + d[k][j]\n\n\n# d = floyd_warshall(d)\nwarshall(d)\nans = INF\nfor p in itertools.permutations(r):\n    dist = 0\n    for i in range(R - 1):\n        dist += d[p[i] - 1][p[i + 1] - 1]\n    if ans > dist:\n        ans = dist\nprint((int(ans)))\n","code_v1_no_empty_lines":"import itertools\n\nN, M, R = list(map(int, input().split()))\nr = tuple(map(int, input().split()))\nINF = 10**10\nd = [[INF] * N for _ in range(N)]\nfor i in range(N):\n    d[i][i] = 0\nfor _ in range(M):\n    a, b, c = list(map(int, input().split()))\n    a -= 1\n    b -= 1\n    if d[a][b] > c:\n        d[a][b] = c\n        d[b][a] = c\n\n\ndef warshall(d):\n    for k in range(N):\n        for i in range(N):\n            for j in range(N):\n                if d[i][j] > d[i][k] + d[k][j]:\n                    d[i][j] = d[i][k] + d[k][j]\n\n\n# d = floyd_warshall(d)\nwarshall(d)\nans = INF\nfor p in itertools.permutations(r):\n    dist = 0\n    for i in range(R - 1):\n        dist += d[p[i] - 1][p[i + 1] - 1]\n    if ans > dist:\n        ans = dist\nprint((int(ans)))\n","code_same":false,"relative_loc_diff_percent":2.2727272727,"diff":["-from scipy.sparse.csgraph import floyd_warshall"],"diff_only_import_comment":false,"measured_runtime_v0":0.2044888918,"measured_runtime_v1":0.0065318277,"runtime_lift":31.3065349069,"key":["s067652861","s587574381"]}
{"user_id":"u381572531","problem_id":"p02891","language":"python","submission_id_v0":"s581989830","submission_id_v1":"s729822755","cpu_time_v0":20,"cpu_time_v1":17,"memory_v0":3064,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.0,"input":"import sys\n\ninput = sys.stdin.readline\n\n \n\ns = input().rstrip()\n\nk = int(eval(input()))\n\n    \n\ndef check_count(s):\n\n    cnt_list = [1]\n\n    cnt = 1\n\n    for i in range(1, len(s)):\n\n        if s[i-1] == s[i]:\n\n            cnt_list[-1] += 1\n\n        else:\n\n            cnt_list.append(1)\n\n    return cnt_list\n\n\n\ndef calc_ans(cnt_list, k):\n\n    _ans = 0\n\n    for c in cnt_list:\n\n        _ans += c\/\/2\n\n    return(_ans * k)\n\n\n\nif len(s)==1:\n\n    ans = k\/\/2\n\nelse:\n\n    cnt_list = check_count(s)\n\n    if len(cnt_list)==1:\n\n        ans = (len(s)*k)\/\/2\n\n    else:\n\n        ans = calc_ans(cnt_list, k)\n\n        if s[0]==s[-1]:\n\n            if cnt_list[0]%2==1 and cnt_list[-1]%2==1:\n\n                ans += k - 1\n\n\n\nprint(ans)","target":"import sys\n\ninput = sys.stdin.readline\n\n \n\ns = input().rstrip()\n\nk = int(eval(input()))\n\n\n\ndef check_count(s):\n\n    cnt_list = []\n\n    cnt = 1\n\n    for i in range(1, len(s)):\n\n        if s[i-1] == s[i]:\n\n            cnt += 1\n\n        else:\n\n            cnt_list.append(cnt)\n\n            cnt = 1\n\n    if cnt>1:\n\n        cnt_list.append(cnt)\n\n    return cnt_list\n\n\n\ndef calc_ans(cnt_list, k):\n\n    _ans = 0\n\n    for c in cnt_list:\n\n        _ans += c\/\/2\n\n    return(_ans * k)\n\n\n\nif len(s)==1:\n\n    ans = k\/\/2\n\nelse:\n\n    cnt_list = check_count(s)\n\n    if len(cnt_list)==1:\n\n        ans = (len(s)*k)\/\/2\n\n    else:\n\n        ans = calc_ans(cnt_list, k)\n\n        if s[0]==s[-1]:\n\n            if cnt_list[0]%2==1 and cnt_list[-1]%2==1:\n\n                ans += k - 1\n\n\n\nprint(ans)","code_v0_loc":35,"code_v1_loc":38,"code_v0_num_chars":711,"code_v1_num_chars":765,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\ns = input().rstrip()\nk = int(eval(input()))\n\n\ndef check_count(s):\n    cnt_list = [1]\n    cnt = 1\n    for i in range(1, len(s)):\n        if s[i - 1] == s[i]:\n            cnt_list[-1] += 1\n        else:\n            cnt_list.append(1)\n    return cnt_list\n\n\ndef calc_ans(cnt_list, k):\n    _ans = 0\n    for c in cnt_list:\n        _ans += c \/\/ 2\n    return _ans * k\n\n\nif len(s) == 1:\n    ans = k \/\/ 2\nelse:\n    cnt_list = check_count(s)\n    if len(cnt_list) == 1:\n        ans = (len(s) * k) \/\/ 2\n    else:\n        ans = calc_ans(cnt_list, k)\n        if s[0] == s[-1]:\n            if cnt_list[0] % 2 == 1 and cnt_list[-1] % 2 == 1:\n                ans += k - 1\nprint(ans)\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\ns = input().rstrip()\nk = int(eval(input()))\n\n\ndef check_count(s):\n    cnt_list = []\n    cnt = 1\n    for i in range(1, len(s)):\n        if s[i - 1] == s[i]:\n            cnt += 1\n        else:\n            cnt_list.append(cnt)\n            cnt = 1\n    if cnt > 1:\n        cnt_list.append(cnt)\n    return cnt_list\n\n\ndef calc_ans(cnt_list, k):\n    _ans = 0\n    for c in cnt_list:\n        _ans += c \/\/ 2\n    return _ans * k\n\n\nif len(s) == 1:\n    ans = k \/\/ 2\nelse:\n    cnt_list = check_count(s)\n    if len(cnt_list) == 1:\n        ans = (len(s) * k) \/\/ 2\n    else:\n        ans = calc_ans(cnt_list, k)\n        if s[0] == s[-1]:\n            if cnt_list[0] % 2 == 1 and cnt_list[-1] % 2 == 1:\n                ans += k - 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":7.8947368421,"diff":["-    cnt_list = [1]","+    cnt_list = []","-            cnt_list[-1] += 1","+            cnt += 1","-            cnt_list.append(1)","+            cnt_list.append(cnt)","+            cnt = 1","+    if cnt > 1:","+        cnt_list.append(cnt)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3312115214,"measured_runtime_v1":0.249056649,"runtime_lift":1.3298642006,"key":["s581989830","s729822755"]}
{"user_id":"u706929073","problem_id":"p02881","language":"python","submission_id_v0":"s504662720","submission_id_v1":"s470778572","cpu_time_v0":504,"cpu_time_v1":137,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":72.82,"input":"N = int(eval(input()))\n\n\n\n\n\ndef dist(i, j):\n\n    return i + j - 2\n\n\n\n\n\nmin = 10 ** 24\n\ni = 1\n\nwhile (i ** 2) <= N:\n\n    if 0 == N % i:\n\n        j = N \/\/ i\n\n        d = dist(i, j)\n\n        if min > d:\n\n            min = d\n\n    i += 1\n\nprint(d)\n","target":"import math\n\nn = int(eval(input()))\n\n\n\nans = 0\n\nfor i in range(math.ceil(math.sqrt(n) + 1))[:0:-1]:\n\n    if 0 == n % i:\n\n        ans = i\n\n        break\n\nans_partner = n \/\/ ans\n\nprint((ans + ans_partner - 2))\n","code_v0_loc":17,"code_v1_loc":10,"code_v0_num_chars":237,"code_v1_num_chars":200,"code_v0_no_empty_lines":"N = int(eval(input()))\n\n\ndef dist(i, j):\n    return i + j - 2\n\n\nmin = 10**24\ni = 1\nwhile (i**2) <= N:\n    if 0 == N % i:\n        j = N \/\/ i\n        d = dist(i, j)\n        if min > d:\n            min = d\n    i += 1\nprint(d)\n","code_v1_no_empty_lines":"import math\n\nn = int(eval(input()))\nans = 0\nfor i in range(math.ceil(math.sqrt(n) + 1))[:0:-1]:\n    if 0 == n % i:\n        ans = i\n        break\nans_partner = n \/\/ ans\nprint((ans + ans_partner - 2))\n","code_same":false,"relative_loc_diff_percent":41.1764705882,"diff":["-N = int(eval(input()))","+import math","-","-def dist(i, j):","-    return i + j - 2","-","-","-min = 10**24","-i = 1","-while (i**2) <= N:","-    if 0 == N % i:","-        j = N \/\/ i","-        d = dist(i, j)","-        if min > d:","-            min = d","-    i += 1","-print(d)","+n = int(eval(input()))","+ans = 0","+for i in range(math.ceil(math.sqrt(n) + 1))[:0:-1]:","+    if 0 == n % i:","+        ans = i","+        break","+ans_partner = n \/\/ ans","+print((ans + ans_partner - 2))"],"diff_only_import_comment":false,"measured_runtime_v0":0.327980933,"measured_runtime_v1":0.2062122526,"runtime_lift":1.5905016738,"key":["s504662720","s470778572"]}
{"user_id":"u127499732","problem_id":"p02690","language":"python","submission_id_v0":"s520089371","submission_id_v1":"s515596030","cpu_time_v0":35,"cpu_time_v1":29,"memory_v0":9048,"memory_v1":9104,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.14,"input":"def main():\n\n    x = int(eval(input()))\n\n    for i in range(150, 0, -1):\n\n        for j in range(i, -150, -1):\n\n            cal = i ** 5 - j ** 5\n\n            if cal == x:\n\n                print((i, j))\n\n                exit()\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"def main():\n\n    x = int(eval(input()))\n\n    for i in range(120):\n\n        for j in range(i, -i, -1):\n\n            cal = i ** 5 - j ** 5\n\n            if cal == x:\n\n                print((i, j))\n\n                exit()\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":12,"code_v1_loc":12,"code_v0_num_chars":263,"code_v1_num_chars":254,"code_v0_no_empty_lines":"def main():\n    x = int(eval(input()))\n    for i in range(150, 0, -1):\n        for j in range(i, -150, -1):\n            cal = i**5 - j**5\n            if cal == x:\n                print((i, j))\n                exit()\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def main():\n    x = int(eval(input()))\n    for i in range(120):\n        for j in range(i, -i, -1):\n            cal = i**5 - j**5\n            if cal == x:\n                print((i, j))\n                exit()\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    for i in range(150, 0, -1):","-        for j in range(i, -150, -1):","+    for i in range(120):","+        for j in range(i, -i, -1):"],"diff_only_import_comment":false,"measured_runtime_v0":0.3632839104,"measured_runtime_v1":0.2308181783,"runtime_lift":1.5738964456,"key":["s520089371","s515596030"]}
{"user_id":"u222668979","problem_id":"p02552","language":"python","submission_id_v0":"s235847366","submission_id_v1":"s896909207","cpu_time_v0":81,"cpu_time_v1":70,"memory_v0":61596,"memory_v1":61788,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.58,"input":"n = int(eval(input()))\n\nprint((1 if n == 0 else 0))\n","target":"n = int(eval(input()))\n\nprint((0 if n else 1))\n","code_v0_loc":2,"code_v1_loc":2,"code_v0_num_chars":44,"code_v1_num_chars":39,"code_v0_no_empty_lines":"n = int(eval(input()))\nprint((1 if n == 0 else 0))\n","code_v1_no_empty_lines":"n = int(eval(input()))\nprint((0 if n else 1))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-print((1 if n == 0 else 0))","+print((0 if n else 1))"],"diff_only_import_comment":false,"measured_runtime_v0":0.340472885,"measured_runtime_v1":0.2658090671,"runtime_lift":1.2808926674,"key":["s235847366","s896909207"]}
{"user_id":"u564589929","problem_id":"p02792","language":"python","submission_id_v0":"s828672272","submission_id_v1":"s142357126","cpu_time_v0":836,"cpu_time_v1":221,"memory_v0":14044,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":73.56,"input":"import sys\n\nsys.setrecursionlimit(10 ** 6)\n\n# input = sys.stdin.readline    ####\n\nint1 = lambda x: int(x) - 1\n\ndef II(): return int(eval(input()))\n\n\n\ndef MI(): return list(map(int, input().split()))\n\ndef MI1(): return list(map(int1, input().split()))\n\n\n\ndef LI(): return list(map(int, input().split()))\n\ndef LI1(): return list(map(int1, input().split()))\n\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\n\n\ndef printlist(lst, k='\\n'): print((k.join(list(map(str, lst)))))\n\nINF = float('inf')\n\n\n\nimport numpy as np\n\n\n\ndef solve():\n\n    n = II()\n\n    D = np.zeros((10, 10))\n\n\n\n    for i in range(1, n+1):\n\n        s = list(str(i))\n\n        l = int(s[0])\n\n        r = int(s[-1])\n\n        # print(s, l, r)\n\n        D[l][r] += 1\n\n    # print(D)\n\n\n\n    ans = 0\n\n    for i in range(10):\n\n        for j in range(10):\n\n            ans += D[i][j] * D[j][i]\n\n    print((int(ans)))\n\n\n\nif __name__ == '__main__':\n\n    solve()\n","target":"import sys\n\nsys.setrecursionlimit(10 ** 6)\n\n# input = sys.stdin.readline    ####\n\nint1 = lambda x: int(x) - 1\n\ndef II(): return int(eval(input()))\n\n\n\ndef MI(): return list(map(int, input().split()))\n\ndef MI1(): return list(map(int1, input().split()))\n\n\n\ndef LI(): return list(map(int, input().split()))\n\ndef LI1(): return list(map(int1, input().split()))\n\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\n\n\ndef printlist(lst, k='\\n'): print((k.join(list(map(str, lst)))))\n\nINF = float('inf')\n\n\n\ndef solve():\n\n    n = II()\n\n    D = [[0]*10 for _ in range(10)]\n\n\n\n    for i in range(1, n+1):\n\n        s = list(str(i))\n\n        l = int(s[0])\n\n        r = int(s[-1])\n\n        # print(s, l, r)\n\n        D[l][r] += 1\n\n    # print(D)\n\n\n\n    ans = 0\n\n    for i in range(10):\n\n        for j in range(10):\n\n            ans += D[i][j] * D[j][i]\n\n    print((int(ans)))\n\n\n\nif __name__ == '__main__':\n\n    solve()\n","code_v0_loc":38,"code_v1_loc":36,"code_v0_num_chars":907,"code_v1_num_chars":894,"code_v0_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10**6)\n# input = sys.stdin.readline    ####\nint1 = lambda x: int(x) - 1\n\n\ndef II():\n    return int(eval(input()))\n\n\ndef MI():\n    return list(map(int, input().split()))\n\n\ndef MI1():\n    return list(map(int1, input().split()))\n\n\ndef LI():\n    return list(map(int, input().split()))\n\n\ndef LI1():\n    return list(map(int1, input().split()))\n\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\n\ndef printlist(lst, k=\"\\n\"):\n    print((k.join(list(map(str, lst)))))\n\n\nINF = float(\"inf\")\nimport numpy as np\n\n\ndef solve():\n    n = II()\n    D = np.zeros((10, 10))\n    for i in range(1, n + 1):\n        s = list(str(i))\n        l = int(s[0])\n        r = int(s[-1])\n        # print(s, l, r)\n        D[l][r] += 1\n    # print(D)\n    ans = 0\n    for i in range(10):\n        for j in range(10):\n            ans += D[i][j] * D[j][i]\n    print((int(ans)))\n\n\nif __name__ == \"__main__\":\n    solve()\n","code_v1_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10**6)\n# input = sys.stdin.readline    ####\nint1 = lambda x: int(x) - 1\n\n\ndef II():\n    return int(eval(input()))\n\n\ndef MI():\n    return list(map(int, input().split()))\n\n\ndef MI1():\n    return list(map(int1, input().split()))\n\n\ndef LI():\n    return list(map(int, input().split()))\n\n\ndef LI1():\n    return list(map(int1, input().split()))\n\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\n\ndef printlist(lst, k=\"\\n\"):\n    print((k.join(list(map(str, lst)))))\n\n\nINF = float(\"inf\")\n\n\ndef solve():\n    n = II()\n    D = [[0] * 10 for _ in range(10)]\n    for i in range(1, n + 1):\n        s = list(str(i))\n        l = int(s[0])\n        r = int(s[-1])\n        # print(s, l, r)\n        D[l][r] += 1\n    # print(D)\n    ans = 0\n    for i in range(10):\n        for j in range(10):\n            ans += D[i][j] * D[j][i]\n    print((int(ans)))\n\n\nif __name__ == \"__main__\":\n    solve()\n","code_same":false,"relative_loc_diff_percent":5.2631578947,"diff":["-import numpy as np","-    D = np.zeros((10, 10))","+    D = [[0] * 10 for _ in range(10)]"],"diff_only_import_comment":false,"measured_runtime_v0":1.6453994412,"measured_runtime_v1":0.3645976332,"runtime_lift":4.512918602,"key":["s828672272","s142357126"]}
{"user_id":"u747602774","problem_id":"p03039","language":"python","submission_id_v0":"s108635717","submission_id_v1":"s387237372","cpu_time_v0":543,"cpu_time_v1":230,"memory_v0":9432,"memory_v1":9412,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":57.64,"input":"import sys\n\nreadline = sys.stdin.readline\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\n#mod = 998244353\n\nINF = 10**18\n\neps = 10**-7\n\n\n\nm,n,k = list(map(int,readline().split()))\n\n\n\ndef comb(n, r, mod):\n\n    r = min(r, n-r)\n\n    mol = 1\n\n    deno = 1\n\n    for i in range(1, r+1):\n\n        mol = mol * (n-r+i) % mod\n\n        deno = deno * i % mod\n\n    ret = mol * pow(deno, mod-2, mod) % mod\n\n    return ret\n\n\n\ndef f1(x,y,a,b):\n\n    return (a+b-x-y)*(a-x+1)*(b-y+1)\/\/2\n\n\n\ndef f2(x,a):\n\n    return (a-x)*(a-x+1)\/\/2\n\n\n\nans = 0\n\n\n\nfor x in range(1,n+1):\n\n    for y in range(1,m+1):\n\n        ans += f1(x,y,n,m)+f1(1,1,x,y)+f1(1,y,x,m)+f1(x,1,n,y)\n\n        ans -= f2(x,n) + f2(1,x) + f2(1,y) + f2(y,m)\n\n        ans %= mod\n\n\n\nans = (ans * comb(m*n-2,k-2,mod))%mod\n\nans = ans*pow(2,mod-2,mod)%mod\n\n\n\nprint(ans)\n","target":"import sys\n\nreadline = sys.stdin.readline\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\n#mod = 998244353\n\nINF = 10**18\n\neps = 10**-7\n\n\n\nm,n,k = list(map(int,readline().split()))\n\n\n\ndef comb(n, r, mod):\n\n    r = min(r, n-r)\n\n    mol = 1\n\n    deno = 1\n\n    for i in range(1, r+1):\n\n        mol = mol * (n-r+i) % mod\n\n        deno = deno * i % mod\n\n    ret = mol * pow(deno, mod-2, mod) % mod\n\n    return ret\n\n\n\ndef f1(x,y,a,b):\n\n    return (a+b-x-y)*(a-x+1)*(b-y+1)\/\/2\n\n\n\ndef f2(x,a):\n\n    return (a-x)*(a-x+1)\/\/2\n\n\n\nans = 0\n\n\n\nfor x in range(1,n+1):\n\n    for y in range(1,m+1):\n\n        a = n-x+1\n\n        b = m-y+1\n\n        c = m*(a*(a-1)+x*(x-1))\n\n        d = n*(b*(b-1)+y*(y-1))\n\n        ans += (c+d)\/\/2\n\n        ans %= mod\n\n\n\nans = (ans * comb(m*n-2,k-2,mod))%mod\n\nans = ans*pow(2,mod-2,mod)%mod\n\n\n\nprint(ans)\n\n\n","code_v0_loc":38,"code_v1_loc":42,"code_v0_num_chars":796,"code_v1_num_chars":809,"code_v0_no_empty_lines":"import sys\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nmod = 10**9 + 7\n# mod = 998244353\nINF = 10**18\neps = 10**-7\nm, n, k = list(map(int, readline().split()))\n\n\ndef comb(n, r, mod):\n    r = min(r, n - r)\n    mol = 1\n    deno = 1\n    for i in range(1, r + 1):\n        mol = mol * (n - r + i) % mod\n        deno = deno * i % mod\n    ret = mol * pow(deno, mod - 2, mod) % mod\n    return ret\n\n\ndef f1(x, y, a, b):\n    return (a + b - x - y) * (a - x + 1) * (b - y + 1) \/\/ 2\n\n\ndef f2(x, a):\n    return (a - x) * (a - x + 1) \/\/ 2\n\n\nans = 0\nfor x in range(1, n + 1):\n    for y in range(1, m + 1):\n        ans += f1(x, y, n, m) + f1(1, 1, x, y) + f1(1, y, x, m) + f1(x, 1, n, y)\n        ans -= f2(x, n) + f2(1, x) + f2(1, y) + f2(y, m)\n        ans %= mod\nans = (ans * comb(m * n - 2, k - 2, mod)) % mod\nans = ans * pow(2, mod - 2, mod) % mod\nprint(ans)\n","code_v1_no_empty_lines":"import sys\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nmod = 10**9 + 7\n# mod = 998244353\nINF = 10**18\neps = 10**-7\nm, n, k = list(map(int, readline().split()))\n\n\ndef comb(n, r, mod):\n    r = min(r, n - r)\n    mol = 1\n    deno = 1\n    for i in range(1, r + 1):\n        mol = mol * (n - r + i) % mod\n        deno = deno * i % mod\n    ret = mol * pow(deno, mod - 2, mod) % mod\n    return ret\n\n\ndef f1(x, y, a, b):\n    return (a + b - x - y) * (a - x + 1) * (b - y + 1) \/\/ 2\n\n\ndef f2(x, a):\n    return (a - x) * (a - x + 1) \/\/ 2\n\n\nans = 0\nfor x in range(1, n + 1):\n    for y in range(1, m + 1):\n        a = n - x + 1\n        b = m - y + 1\n        c = m * (a * (a - 1) + x * (x - 1))\n        d = n * (b * (b - 1) + y * (y - 1))\n        ans += (c + d) \/\/ 2\n        ans %= mod\nans = (ans * comb(m * n - 2, k - 2, mod)) % mod\nans = ans * pow(2, mod - 2, mod) % mod\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":9.5238095238,"diff":["-        ans += f1(x, y, n, m) + f1(1, 1, x, y) + f1(1, y, x, m) + f1(x, 1, n, y)","-        ans -= f2(x, n) + f2(1, x) + f2(1, y) + f2(y, m)","+        a = n - x + 1","+        b = m - y + 1","+        c = m * (a * (a - 1) + x * (x - 1))","+        d = n * (b * (b - 1) + y * (y - 1))","+        ans += (c + d) \/\/ 2"],"diff_only_import_comment":false,"measured_runtime_v0":0.4582999928,"measured_runtime_v1":0.3618569455,"runtime_lift":1.2665225816,"key":["s108635717","s387237372"]}
{"user_id":"u952708174","problem_id":"p02596","language":"python","submission_id_v0":"s416996588","submission_id_v1":"s856754977","cpu_time_v0":161,"cpu_time_v1":106,"memory_v0":9088,"memory_v1":9192,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":34.16,"input":"def c_repsept():\n\n    K = int(eval(input()))\n\n\n\n    if (K % 2 == 0 or K % 5 == 0):\n\n        return -1  # repsept \u306e\u56e0\u6570\u306b 2, 5 \u306f\u306a\u3044\n\n\n\n    repsept = 7 % K\n\n    count = 1\n\n    while repsept % K !=0:\n\n        repsept = ((repsept * 10) + 7) % K\n\n        count += 1\n\n    return count\n\n\n\nprint((c_repsept()))","target":"def c_repsept():\n\n    K = int(eval(input()))\n\n\n\n    L = 9 * K \/\/ 7 if K % 7 == 0 else 9 * K\n\n    if L % 2 == 0 or L % 5 == 0:\n\n        return -1\n\n\n\n    remainder = 1\n\n    for n in range(1, L + 1):\n\n        remainder = (10 * remainder) % L\n\n        if remainder == 1:\n\n            return n\n\n    return -1\n\n\n\nprint((c_repsept()))","code_v0_loc":14,"code_v1_loc":15,"code_v0_num_chars":290,"code_v1_num_chars":319,"code_v0_no_empty_lines":"def c_repsept():\n    K = int(eval(input()))\n    if K % 2 == 0 or K % 5 == 0:\n        return -1  # repsept \u306e\u56e0\u6570\u306b 2, 5 \u306f\u306a\u3044\n    repsept = 7 % K\n    count = 1\n    while repsept % K != 0:\n        repsept = ((repsept * 10) + 7) % K\n        count += 1\n    return count\n\n\nprint((c_repsept()))\n","code_v1_no_empty_lines":"def c_repsept():\n    K = int(eval(input()))\n    L = 9 * K \/\/ 7 if K % 7 == 0 else 9 * K\n    if L % 2 == 0 or L % 5 == 0:\n        return -1\n    remainder = 1\n    for n in range(1, L + 1):\n        remainder = (10 * remainder) % L\n        if remainder == 1:\n            return n\n    return -1\n\n\nprint((c_repsept()))\n","code_same":false,"relative_loc_diff_percent":6.6666666667,"diff":["-    if K % 2 == 0 or K % 5 == 0:","-        return -1  # repsept \u306e\u56e0\u6570\u306b 2, 5 \u306f\u306a\u3044","-    repsept = 7 % K","-    count = 1","-    while repsept % K != 0:","-        repsept = ((repsept * 10) + 7) % K","-        count += 1","-    return count","+    L = 9 * K \/\/ 7 if K % 7 == 0 else 9 * K","+    if L % 2 == 0 or L % 5 == 0:","+        return -1","+    remainder = 1","+    for n in range(1, L + 1):","+        remainder = (10 * remainder) % L","+        if remainder == 1:","+            return n","+    return -1"],"diff_only_import_comment":false,"measured_runtime_v0":0.4354579542,"measured_runtime_v1":0.338304636,"runtime_lift":1.2871770228,"key":["s416996588","s856754977"]}
{"user_id":"u821588465","problem_id":"p02886","language":"python","submission_id_v0":"s336470673","submission_id_v1":"s316957674","cpu_time_v0":117,"cpu_time_v1":30,"memory_v0":27116,"memory_v1":9044,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":74.36,"input":"from itertools import combinations\n\nimport numpy as np\n\nN = int(eval(input()))\n\nD = list(map(int, input().split()))\n\nList = np.array(list(combinations(D,2)))\n\nprint((sum(np.product(List, axis = 1))))\n\n\n\n\n","target":"N = int(eval(input()))\n\nD = list(map(int, input().split()))\n\nfrom itertools import accumulate\n\nprint((sum(list(d*c for d, c in zip(D[1:], accumulate(D))))))\n","code_v0_loc":8,"code_v1_loc":4,"code_v0_num_chars":196,"code_v1_num_chars":149,"code_v0_no_empty_lines":"from itertools import combinations\nimport numpy as np\n\nN = int(eval(input()))\nD = list(map(int, input().split()))\nList = np.array(list(combinations(D, 2)))\nprint((sum(np.product(List, axis=1))))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nD = list(map(int, input().split()))\nfrom itertools import accumulate\n\nprint((sum(list(d * c for d, c in zip(D[1:], accumulate(D))))))\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-from itertools import combinations","-import numpy as np","-","-List = np.array(list(combinations(D, 2)))","-print((sum(np.product(List, axis=1))))","+from itertools import accumulate","+","+print((sum(list(d * c for d, c in zip(D[1:], accumulate(D))))))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3450187897,"measured_runtime_v1":0.2237710453,"runtime_lift":6.0106918118,"key":["s336470673","s316957674"]}
{"user_id":"u827885761","problem_id":"p03013","language":"python","submission_id_v0":"s193052587","submission_id_v1":"s829443238","cpu_time_v0":509,"cpu_time_v1":195,"memory_v0":46168,"memory_v1":7668,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":61.69,"input":"import sys\n\nsys.setrecursionlimit(10**7)\n\ndef lmi(): return list(map(int, input().split()))\n\n\n\nn, m = lmi()\n\n\n\nl = [0] * (n+1)\n\nl[0] = 1\n\n\n\na = 0\n\nif m != 0:\n\n    a = int(eval(input()))\n\nk = 1\n\nfor i in range(n+1):\n\n\n\n    if i != a:\n\n        if i == 1:\n\n            l[i] = 1\n\n        elif i >= 2:\n\n            l[i] = l[i-1] + l[i-2]\n\n            l[i] %= 1000000007\n\n    else:\n\n        k += 1\n\n        if k <= m:\n\n            a = int(eval(input()))\n\n\n\n\n\n\n\n#print(l)\n\nprint((l[n] % 1000000007))\n","target":"import sys\n\nsys.setrecursionlimit(10**7)\n\ndef lmi(): return list(map(int, input().split()))\n\n\n\nn, m = lmi()\n\na = [1] * (n+1)\n\nfor i in range(m):\n\n    a[int(eval(input()))] = 0\n\nk = [0] * (n+1)\n\nk[0] = 1\n\nfor i in range(1,n+1):\n\n    if i == 1 and a[1]:\n\n        k[1] = 1\n\n    elif i >= 2 and a[i]:\n\n        k[i] = k[i-1] + k[i-2]\n\n        k[i] %= 10 ** 9 + 7\n\n\n\nprint((k[n]))\n","code_v0_loc":30,"code_v1_loc":18,"code_v0_num_chars":479,"code_v1_num_chars":367,"code_v0_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10**7)\n\n\ndef lmi():\n    return list(map(int, input().split()))\n\n\nn, m = lmi()\nl = [0] * (n + 1)\nl[0] = 1\na = 0\nif m != 0:\n    a = int(eval(input()))\nk = 1\nfor i in range(n + 1):\n    if i != a:\n        if i == 1:\n            l[i] = 1\n        elif i >= 2:\n            l[i] = l[i - 1] + l[i - 2]\n            l[i] %= 1000000007\n    else:\n        k += 1\n        if k <= m:\n            a = int(eval(input()))\n# print(l)\nprint((l[n] % 1000000007))\n","code_v1_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10**7)\n\n\ndef lmi():\n    return list(map(int, input().split()))\n\n\nn, m = lmi()\na = [1] * (n + 1)\nfor i in range(m):\n    a[int(eval(input()))] = 0\nk = [0] * (n + 1)\nk[0] = 1\nfor i in range(1, n + 1):\n    if i == 1 and a[1]:\n        k[1] = 1\n    elif i >= 2 and a[i]:\n        k[i] = k[i - 1] + k[i - 2]\n        k[i] %= 10**9 + 7\nprint((k[n]))\n","code_same":false,"relative_loc_diff_percent":40.0,"diff":["-l = [0] * (n + 1)","-l[0] = 1","-a = 0","-if m != 0:","-    a = int(eval(input()))","-k = 1","-for i in range(n + 1):","-    if i != a:","-        if i == 1:","-            l[i] = 1","-        elif i >= 2:","-            l[i] = l[i - 1] + l[i - 2]","-            l[i] %= 1000000007","-    else:","-        k += 1","-        if k <= m:","-            a = int(eval(input()))","-# print(l)","-print((l[n] % 1000000007))","+a = [1] * (n + 1)","+for i in range(m):","+    a[int(eval(input()))] = 0","+k = [0] * (n + 1)","+k[0] = 1","+for i in range(1, n + 1):","+    if i == 1 and a[1]:","+        k[1] = 1","+    elif i >= 2 and a[i]:","+        k[i] = k[i - 1] + k[i - 2]","+        k[i] %= 10**9 + 7","+print((k[n]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3120539634,"measured_runtime_v1":0.1110639279,"runtime_lift":2.8096787978,"key":["s193052587","s829443238"]}
{"user_id":"u952708174","problem_id":"p02767","language":"python","submission_id_v0":"s118619526","submission_id_v1":"s336379737","cpu_time_v0":387,"cpu_time_v1":17,"memory_v0":21724,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":95.61,"input":"def c_rally():\n\n    import numpy as np\n\n    import math\n\n    N = int(eval(input()))\n\n    X = [int(i) for i in input().split()]\n\n    m = np.average(X)\n\n    ans = float('inf')\n\n    for j in (math.floor(m), math.ceil(m)):\n\n        ans = min(ans, sum([(x - j)**2 for x in X]))\n\n    return ans\n\n\n\nprint((c_rally()))","target":"def c_rally():\n\n    N = int(eval(input()))\n\n    X = [int(i) for i in input().split()]\n\n\n\n    x_sum = sum(X)\n\n    option = (x_sum \/\/ N, (x_sum + N - 1) \/\/ N)\n\n    return min(sum([(x - p)**2 for x in X]) for p in option)\n\n\n\nprint((c_rally()))","code_v0_loc":12,"code_v1_loc":9,"code_v0_num_chars":302,"code_v1_num_chars":232,"code_v0_no_empty_lines":"def c_rally():\n    import numpy as np\n    import math\n\n    N = int(eval(input()))\n    X = [int(i) for i in input().split()]\n    m = np.average(X)\n    ans = float(\"inf\")\n    for j in (math.floor(m), math.ceil(m)):\n        ans = min(ans, sum([(x - j) ** 2 for x in X]))\n    return ans\n\n\nprint((c_rally()))\n","code_v1_no_empty_lines":"def c_rally():\n    N = int(eval(input()))\n    X = [int(i) for i in input().split()]\n    x_sum = sum(X)\n    option = (x_sum \/\/ N, (x_sum + N - 1) \/\/ N)\n    return min(sum([(x - p) ** 2 for x in X]) for p in option)\n\n\nprint((c_rally()))\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-    import numpy as np","-    import math","-","-    m = np.average(X)","-    ans = float(\"inf\")","-    for j in (math.floor(m), math.ceil(m)):","-        ans = min(ans, sum([(x - j) ** 2 for x in X]))","-    return ans","+    x_sum = sum(X)","+    option = (x_sum \/\/ N, (x_sum + N - 1) \/\/ N)","+    return min(sum([(x - p) ** 2 for x in X]) for p in option)"],"diff_only_import_comment":false,"measured_runtime_v0":1.7275265524,"measured_runtime_v1":0.2677062051,"runtime_lift":6.4530687716,"key":["s118619526","s336379737"]}
{"user_id":"u282228874","problem_id":"p03013","language":"python","submission_id_v0":"s600331807","submission_id_v1":"s809304917","cpu_time_v0":241,"cpu_time_v1":180,"memory_v0":9592,"memory_v1":13192,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":25.31,"input":"N,M = list(map(int,input().split()))\n\nMOD = 10**9+7\n\ndp = [0]*(N+1)\n\ndp[0]=1\n\nA = [int(eval(input())) for i in range(M)]\n\nban = [1]*(N+1)\n\nfor a in A:\n\n    ban[a]=0\n\nfor i in range(N):\n\n    if i-1>=0:\n\n        dp[i+1]=dp[i]*ban[i]+dp[i-1]*ban[i-1]\n\n    else:\n\n        dp[i+1]=dp[i]*ban[i]\n\n    dp[i+1] %= MOD \n\nprint((dp[N]))","target":"N,M = list(map(int,input().split()))\n\nA = [int(eval(input())) for i in range(M)]\n\nMOD = 10**9+7\n\nA = set(A)\n\ndp = [0]*(N+1)\n\ndp[0] = 1\n\nfor i in range(1,N+1):\n\n    if i in A:\n\n        continue\n\n    if i == 1:\n\n        dp[1] = dp[0]\n\n    else:\n\n        dp[i] = (dp[i-1]+dp[i-2])%MOD\n\nprint((dp[N]))","code_v0_loc":15,"code_v1_loc":14,"code_v0_num_chars":311,"code_v1_num_chars":283,"code_v0_no_empty_lines":"N, M = list(map(int, input().split()))\nMOD = 10**9 + 7\ndp = [0] * (N + 1)\ndp[0] = 1\nA = [int(eval(input())) for i in range(M)]\nban = [1] * (N + 1)\nfor a in A:\n    ban[a] = 0\nfor i in range(N):\n    if i - 1 >= 0:\n        dp[i + 1] = dp[i] * ban[i] + dp[i - 1] * ban[i - 1]\n    else:\n        dp[i + 1] = dp[i] * ban[i]\n    dp[i + 1] %= MOD\nprint((dp[N]))\n","code_v1_no_empty_lines":"N, M = list(map(int, input().split()))\nA = [int(eval(input())) for i in range(M)]\nMOD = 10**9 + 7\nA = set(A)\ndp = [0] * (N + 1)\ndp[0] = 1\nfor i in range(1, N + 1):\n    if i in A:\n        continue\n    if i == 1:\n        dp[1] = dp[0]\n    else:\n        dp[i] = (dp[i - 1] + dp[i - 2]) % MOD\nprint((dp[N]))\n","code_same":false,"relative_loc_diff_percent":6.6666666667,"diff":["+A = [int(eval(input())) for i in range(M)]","+A = set(A)","-A = [int(eval(input())) for i in range(M)]","-ban = [1] * (N + 1)","-for a in A:","-    ban[a] = 0","-for i in range(N):","-    if i - 1 >= 0:","-        dp[i + 1] = dp[i] * ban[i] + dp[i - 1] * ban[i - 1]","+for i in range(1, N + 1):","+    if i in A:","+        continue","+    if i == 1:","+        dp[1] = dp[0]","-        dp[i + 1] = dp[i] * ban[i]","-    dp[i + 1] %= MOD","+        dp[i] = (dp[i - 1] + dp[i - 2]) % MOD"],"diff_only_import_comment":false,"measured_runtime_v0":0.2076114528,"measured_runtime_v1":0.0063931749,"runtime_lift":32.4739204186,"key":["s600331807","s809304917"]}
{"user_id":"u069838609","problem_id":"p03253","language":"python","submission_id_v0":"s651142165","submission_id_v1":"s962802291","cpu_time_v0":233,"cpu_time_v1":21,"memory_v0":4408,"memory_v1":3316,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":90.99,"input":"from math import sqrt, ceil, factorial\n\nfrom collections import defaultdict\n\n\n\n\n\ndef prime_factors(n):\n\n    i = 2\n\n    factors = defaultdict(int)\n\n    while i * i <= n:\n\n        if n % i:\n\n            i += 1\n\n        else:\n\n            n \/\/= i\n\n            factors[i] += 1\n\n    if n > 1:\n\n        factors[n] += 1\n\n    return factors\n\n\n\n\n\nN, M = [int(elem) for elem in input().split(' ')]\n\n\n\n# \u7d20\u56e0\u6570\u5206\u89e3\n\nprime_numbers = prime_factors(M)\n\nsum = 1\n\nfac_N_m1 = factorial(N - 1)\n\n\n\nfor value in list(prime_numbers.values()):\n\n    bunshi = 1\n\n    saisho = value + N - 1\n\n    for _ in range(value):\n\n        bunshi *= saisho\n\n        saisho -= 1\n\n    sum *= (bunshi \/\/ factorial(value))\n\nprint((sum % (10**9 + 7)))\n","target":"from collections import defaultdict\n\n\n\n\n\ndef prime_factorize(num):\n\n    prime_numbers = defaultdict(int)\n\n    i = 2\n\n    while i * i <= num:\n\n        if num % i == 0:\n\n            while num % i == 0:\n\n                prime_numbers[i] += 1\n\n                num \/\/= i\n\n        i += 1\n\n    if num != 1:\n\n        prime_numbers[num] += 1\n\n    return prime_numbers\n\n\n\n\n\nMOD = 10**9 + 7\n\nN, M = [int(elem) for elem in input().split()]\n\n\n\nprime_numbers = prime_factorize(M)\n\n\n\nnum_sequences = 1\n\nfor exponent in list(prime_numbers.values()):\n\n    denomimator = 1\n\n    numerator = 1\n\n    for i in range(1, exponent + 1):\n\n        denomimator *= (N + exponent - i)\n\n        numerator *= i\n\n    num_sequences *= denomimator \/\/ numerator\n\n    num_sequences %= MOD\n\n\n\nprint(num_sequences)\n","code_v0_loc":33,"code_v1_loc":33,"code_v0_num_chars":697,"code_v1_num_chars":770,"code_v0_no_empty_lines":"from math import sqrt, ceil, factorial\nfrom collections import defaultdict\n\n\ndef prime_factors(n):\n    i = 2\n    factors = defaultdict(int)\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n \/\/= i\n            factors[i] += 1\n    if n > 1:\n        factors[n] += 1\n    return factors\n\n\nN, M = [int(elem) for elem in input().split(\" \")]\n# \u7d20\u56e0\u6570\u5206\u89e3\nprime_numbers = prime_factors(M)\nsum = 1\nfac_N_m1 = factorial(N - 1)\nfor value in list(prime_numbers.values()):\n    bunshi = 1\n    saisho = value + N - 1\n    for _ in range(value):\n        bunshi *= saisho\n        saisho -= 1\n    sum *= bunshi \/\/ factorial(value)\nprint((sum % (10**9 + 7)))\n","code_v1_no_empty_lines":"from collections import defaultdict\n\n\ndef prime_factorize(num):\n    prime_numbers = defaultdict(int)\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            while num % i == 0:\n                prime_numbers[i] += 1\n                num \/\/= i\n        i += 1\n    if num != 1:\n        prime_numbers[num] += 1\n    return prime_numbers\n\n\nMOD = 10**9 + 7\nN, M = [int(elem) for elem in input().split()]\nprime_numbers = prime_factorize(M)\nnum_sequences = 1\nfor exponent in list(prime_numbers.values()):\n    denomimator = 1\n    numerator = 1\n    for i in range(1, exponent + 1):\n        denomimator *= N + exponent - i\n        numerator *= i\n    num_sequences *= denomimator \/\/ numerator\n    num_sequences %= MOD\nprint(num_sequences)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-from math import sqrt, ceil, factorial","-def prime_factors(n):","+def prime_factorize(num):","+    prime_numbers = defaultdict(int)","-    factors = defaultdict(int)","-    while i * i <= n:","-        if n % i:","-            i += 1","-        else:","-            n \/\/= i","-            factors[i] += 1","-    if n > 1:","-        factors[n] += 1","-    return factors","+    while i * i <= num:","+        if num % i == 0:","+            while num % i == 0:","+                prime_numbers[i] += 1","+                num \/\/= i","+        i += 1","+    if num != 1:","+        prime_numbers[num] += 1","+    return prime_numbers","-N, M = [int(elem) for elem in input().split(\" \")]","-# \u7d20\u56e0\u6570\u5206\u89e3","-prime_numbers = prime_factors(M)","-sum = 1","-fac_N_m1 = factorial(N - 1)","-for value in list(prime_numbers.values()):","-    bunshi = 1","-    saisho = value + N - 1","-    for _ in range(value):","-        bunshi *= saisho","-        saisho -= 1","-    sum *= bunshi \/\/ factorial(value)","-print((sum % (10**9 + 7)))","+MOD = 10**9 + 7","+N, M = [int(elem) for elem in input().split()]","+prime_numbers = prime_factorize(M)","+num_sequences = 1","+for exponent in list(prime_numbers.values()):","+    denomimator = 1","+    numerator = 1","+    for i in range(1, exponent + 1):","+        denomimator *= N + exponent - i","+        numerator *= i","+    num_sequences *= denomimator \/\/ numerator","+    num_sequences %= MOD","+print(num_sequences)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3638904934,"measured_runtime_v1":0.1944270425,"runtime_lift":1.8716043238,"key":["s651142165","s962802291"]}
{"user_id":"u562935282","problem_id":"p03371","language":"python","submission_id_v0":"s471284270","submission_id_v1":"s058926350","cpu_time_v0":98,"cpu_time_v1":81,"memory_v0":3064,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.35,"input":"def main():\n\n    A, B, AB, X, Y = list(map(int, input().split()))\n\n    M = max(X, Y)\n\n\n\n    k = 0\n\n    ans = A * X + B * Y\n\n    while True:\n\n        ans = min(\n\n            ans,\n\n            AB * k * 2 + max(0, X - k) * A + max(0, Y - k) * B\n\n        )\n\n\n\n        if k >= M: break\n\n        k += 1\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"def main():\n\n    A, B, C, X, Y = list(map(int, input().split()))\n\n\n\n    ans = 1 << 30\n\n    c = 0  # even\n\n    while True:\n\n        j = c \/\/ 2\n\n        t = A * max(0, X - j) + B * max(0, Y - j) + C * c\n\n        if ans <= t: break\n\n        ans = t\n\n        c += 2\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":20,"code_v1_loc":17,"code_v0_num_chars":353,"code_v1_num_chars":318,"code_v0_no_empty_lines":"def main():\n    A, B, AB, X, Y = list(map(int, input().split()))\n    M = max(X, Y)\n    k = 0\n    ans = A * X + B * Y\n    while True:\n        ans = min(ans, AB * k * 2 + max(0, X - k) * A + max(0, Y - k) * B)\n        if k >= M:\n            break\n        k += 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def main():\n    A, B, C, X, Y = list(map(int, input().split()))\n    ans = 1 << 30\n    c = 0  # even\n    while True:\n        j = c \/\/ 2\n        t = A * max(0, X - j) + B * max(0, Y - j) + C * c\n        if ans <= t:\n            break\n        ans = t\n        c += 2\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":15.0,"diff":["-    A, B, AB, X, Y = list(map(int, input().split()))","-    M = max(X, Y)","-    k = 0","-    ans = A * X + B * Y","+    A, B, C, X, Y = list(map(int, input().split()))","+    ans = 1 << 30","+    c = 0  # even","-        ans = min(ans, AB * k * 2 + max(0, X - k) * A + max(0, Y - k) * B)","-        if k >= M:","+        j = c \/\/ 2","+        t = A * max(0, X - j) + B * max(0, Y - j) + C * c","+        if ans <= t:","-        k += 1","+        ans = t","+        c += 2"],"diff_only_import_comment":false,"measured_runtime_v0":0.3021148317,"measured_runtime_v1":0.1545656888,"runtime_lift":1.9546047633,"key":["s471284270","s058926350"]}
{"user_id":"u072053884","problem_id":"p02245","language":"python","submission_id_v0":"s696240934","submission_id_v1":"s480327836","cpu_time_v0":120,"cpu_time_v1":60,"memory_v0":10724,"memory_v1":13476,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":50.0,"input":"import sys\n\n\n\ninit = ''.join(sys.stdin.read().split())\n\n\n\n# Bidirectional search using breadth-first search\n\ndef solve(start, goal):\n\n    if start == goal:\n\n        return 0\n\n    generated_state = {start: 0, goal: 1}   # 0: foreward, 1: backward\n\n    step = {start: 0, goal: 0}\n\n    s = 0\n\n    c_d = [(start, 0), (goal, 1)] # configure and direction\n\n    while True:\n\n        q = iter(c_d)\n\n        c_d = []\n\n        s += 1\n\n        for c, d in q:\n\n            i = c.find('0')\n\n            if 0 <= i <= 5:\n\n                t = str.maketrans('0' + c[i+3], c[i+3] + '0')\n\n                t_c = c.translate(t)\n\n                if t_c in generated_state:\n\n                    if generated_state[t_c] != d:\n\n                        return s + step[t_c]\n\n                else:\n\n                    generated_state[t_c] = d\n\n                    step[t_c] = s\n\n                    c_d.append((t_c, d))\n\n            if i >= 3:\n\n                t = str.maketrans('0' + c[i-3], c[i-3] + '0')\n\n                t_c = c.translate(t)\n\n                if t_c in generated_state:\n\n                    if generated_state[t_c] != d:\n\n                        return s + step[t_c]\n\n                else:\n\n                    generated_state[t_c] = d\n\n                    step[t_c] = s\n\n                    c_d.append((t_c, d))\n\n            if i == 0 or i == 1 or i == 3 or i == 4 or i == 6 or i == 7:\n\n                t = str.maketrans('0' + c[i+1], c[i+1] + '0')\n\n                t_c = c.translate(t)\n\n                if t_c in generated_state:\n\n                    if generated_state[t_c] != d:\n\n                        return s + step[t_c]\n\n                else:\n\n                    generated_state[t_c] = d\n\n                    step[t_c] = s\n\n                    c_d.append((t_c, d))\n\n            if i == 1 or i == 2 or i == 4 or i == 5 or i == 7 or i == 8:\n\n                t = str.maketrans('0' + c[i-1], c[i-1] + '0')\n\n                t_c = c.translate(t)\n\n                if t_c in generated_state:\n\n                    if generated_state[t_c] != d:\n\n                        return s + step[t_c]\n\n                else:\n\n                    generated_state[t_c] = d\n\n                    step[t_c] = s\n\n                    c_d.append((t_c, d))\n\n\n\nprint((solve(init, '123456780')))","target":"adjacent = (\n\n    (1, 3),       # 0\n\n    (0, 2, 4),    # 1\n\n    (1, 5),       # 2\n\n    (0, 4, 6),    # 3\n\n    (1, 3, 5, 7), # 4\n\n    (2, 4, 8),    # 5\n\n    (3, 7),       # 6\n\n    (4, 6, 8),    # 7\n\n    (5, 7)        # 8\n\n)\n\n\n\nimport collections\n\n\n\nGOAL = [1, 2, 3, 4, 5, 6, 7, 8, 0]\n\n\n\n# Bidirectional search using breadth-first search\n\ndef solve(start):\n\n    if start == GOAL:\n\n        return 0\n\n    # 0: forward, 1: backward\n\n    generated_state = {tuple(start): 0, tuple(GOAL): 1}\n\n    step = {tuple(start): 0, tuple(GOAL): 0}\n\n    s = 0\n\n    state1 = [(start, 0), (GOAL, 1)]\n\n    while state1:\n\n        state2 = state1[:]\n\n        state1 = []\n\n        s += 1\n\n        for s2, d in state2:\n\n            i = s2.index(0)\n\n            for p in adjacent[i]:\n\n                s1 = s2[:]\n\n                s1[i], s1[p] = s1[p], 0\n\n                key = tuple(s1)\n\n                if key in generated_state:\n\n                    if generated_state[key] != d:\n\n                        return s + step[key]\n\n                    continue\n\n                state1.append((s1, d))\n\n                generated_state[key] = d\n\n                step[key] = s\n\n\n\nimport sys\n\n\n\nstart = list(map(int, sys.stdin.read().split()))\n\n\n\nprint((solve(start)))","code_v0_loc":60,"code_v1_loc":48,"code_v0_num_chars":2264,"code_v1_num_chars":1231,"code_v0_no_empty_lines":"import sys\n\ninit = \"\".join(sys.stdin.read().split())\n# Bidirectional search using breadth-first search\ndef solve(start, goal):\n    if start == goal:\n        return 0\n    generated_state = {start: 0, goal: 1}  # 0: foreward, 1: backward\n    step = {start: 0, goal: 0}\n    s = 0\n    c_d = [(start, 0), (goal, 1)]  # configure and direction\n    while True:\n        q = iter(c_d)\n        c_d = []\n        s += 1\n        for c, d in q:\n            i = c.find(\"0\")\n            if 0 <= i <= 5:\n                t = str.maketrans(\"0\" + c[i + 3], c[i + 3] + \"0\")\n                t_c = c.translate(t)\n                if t_c in generated_state:\n                    if generated_state[t_c] != d:\n                        return s + step[t_c]\n                else:\n                    generated_state[t_c] = d\n                    step[t_c] = s\n                    c_d.append((t_c, d))\n            if i >= 3:\n                t = str.maketrans(\"0\" + c[i - 3], c[i - 3] + \"0\")\n                t_c = c.translate(t)\n                if t_c in generated_state:\n                    if generated_state[t_c] != d:\n                        return s + step[t_c]\n                else:\n                    generated_state[t_c] = d\n                    step[t_c] = s\n                    c_d.append((t_c, d))\n            if i == 0 or i == 1 or i == 3 or i == 4 or i == 6 or i == 7:\n                t = str.maketrans(\"0\" + c[i + 1], c[i + 1] + \"0\")\n                t_c = c.translate(t)\n                if t_c in generated_state:\n                    if generated_state[t_c] != d:\n                        return s + step[t_c]\n                else:\n                    generated_state[t_c] = d\n                    step[t_c] = s\n                    c_d.append((t_c, d))\n            if i == 1 or i == 2 or i == 4 or i == 5 or i == 7 or i == 8:\n                t = str.maketrans(\"0\" + c[i - 1], c[i - 1] + \"0\")\n                t_c = c.translate(t)\n                if t_c in generated_state:\n                    if generated_state[t_c] != d:\n                        return s + step[t_c]\n                else:\n                    generated_state[t_c] = d\n                    step[t_c] = s\n                    c_d.append((t_c, d))\n\n\nprint((solve(init, \"123456780\")))\n","code_v1_no_empty_lines":"adjacent = (\n    (1, 3),  # 0\n    (0, 2, 4),  # 1\n    (1, 5),  # 2\n    (0, 4, 6),  # 3\n    (1, 3, 5, 7),  # 4\n    (2, 4, 8),  # 5\n    (3, 7),  # 6\n    (4, 6, 8),  # 7\n    (5, 7),  # 8\n)\nimport collections\n\nGOAL = [1, 2, 3, 4, 5, 6, 7, 8, 0]\n# Bidirectional search using breadth-first search\ndef solve(start):\n    if start == GOAL:\n        return 0\n    # 0: forward, 1: backward\n    generated_state = {tuple(start): 0, tuple(GOAL): 1}\n    step = {tuple(start): 0, tuple(GOAL): 0}\n    s = 0\n    state1 = [(start, 0), (GOAL, 1)]\n    while state1:\n        state2 = state1[:]\n        state1 = []\n        s += 1\n        for s2, d in state2:\n            i = s2.index(0)\n            for p in adjacent[i]:\n                s1 = s2[:]\n                s1[i], s1[p] = s1[p], 0\n                key = tuple(s1)\n                if key in generated_state:\n                    if generated_state[key] != d:\n                        return s + step[key]\n                    continue\n                state1.append((s1, d))\n                generated_state[key] = d\n                step[key] = s\n\n\nimport sys\n\nstart = list(map(int, sys.stdin.read().split()))\nprint((solve(start)))\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["+adjacent = (","+    (1, 3),  # 0","+    (0, 2, 4),  # 1","+    (1, 5),  # 2","+    (0, 4, 6),  # 3","+    (1, 3, 5, 7),  # 4","+    (2, 4, 8),  # 5","+    (3, 7),  # 6","+    (4, 6, 8),  # 7","+    (5, 7),  # 8","+)","+import collections","+","+GOAL = [1, 2, 3, 4, 5, 6, 7, 8, 0]","+# Bidirectional search using breadth-first search","+def solve(start):","+    if start == GOAL:","+        return 0","+    # 0: forward, 1: backward","+    generated_state = {tuple(start): 0, tuple(GOAL): 1}","+    step = {tuple(start): 0, tuple(GOAL): 0}","+    s = 0","+    state1 = [(start, 0), (GOAL, 1)]","+    while state1:","+        state2 = state1[:]","+        state1 = []","+        s += 1","+        for s2, d in state2:","+            i = s2.index(0)","+            for p in adjacent[i]:","+                s1 = s2[:]","+                s1[i], s1[p] = s1[p], 0","+                key = tuple(s1)","+                if key in generated_state:","+                    if generated_state[key] != d:","+                        return s + step[key]","+                    continue","+                state1.append((s1, d))","+                generated_state[key] = d","+                step[key] = s","+","+","-init = \"\".join(sys.stdin.read().split())","-# Bidirectional search using breadth-first search","-def solve(start, goal):","-    if start == goal:","-        return 0","-    generated_state = {start: 0, goal: 1}  # 0: foreward, 1: backward","-    step = {start: 0, goal: 0}","-    s = 0","-    c_d = [(start, 0), (goal, 1)]  # configure and direction","-    while True:","-        q = iter(c_d)","-        c_d = []","-        s += 1","-        for c, d in q:","-            i = c.find(\"0\")","-            if 0 <= i <= 5:","-                t = str.maketrans(\"0\" + c[i + 3], c[i + 3] + \"0\")","-                t_c = c.translate(t)","-                if t_c in generated_state:","-                    if generated_state[t_c] != d:","-                        return s + step[t_c]","-                else:","-                    generated_state[t_c] = d","-                    step[t_c] = s","-                    c_d.append((t_c, d))","-            if i >= 3:","-                t = str.maketrans(\"0\" + c[i - 3], c[i - 3] + \"0\")","-                t_c = c.translate(t)","-                if t_c in generated_state:","-                    if generated_state[t_c] != d:","-                        return s + step[t_c]","-                else:","-                    generated_state[t_c] = d","-                    step[t_c] = s","-                    c_d.append((t_c, d))","-            if i == 0 or i == 1 or i == 3 or i == 4 or i == 6 or i == 7:","-                t = str.maketrans(\"0\" + c[i + 1], c[i + 1] + \"0\")","-                t_c = c.translate(t)","-                if t_c in generated_state:","-                    if generated_state[t_c] != d:","-                        return s + step[t_c]","-                else:","-                    generated_state[t_c] = d","-                    step[t_c] = s","-                    c_d.append((t_c, d))","-            if i == 1 or i == 2 or i == 4 or i == 5 or i == 7 or i == 8:","-                t = str.maketrans(\"0\" + c[i - 1], c[i - 1] + \"0\")","-                t_c = c.translate(t)","-                if t_c in generated_state:","-                    if generated_state[t_c] != d:","-                        return s + step[t_c]","-                else:","-                    generated_state[t_c] = d","-                    step[t_c] = s","-                    c_d.append((t_c, d))","-","-","-print((solve(init, \"123456780\")))","+start = list(map(int, sys.stdin.read().split()))","+print((solve(start)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3218115091,"measured_runtime_v1":0.2098443508,"runtime_lift":1.533572421,"key":["s696240934","s480327836"]}
{"user_id":"u034782764","problem_id":"p03434","language":"python","submission_id_v0":"s168786498","submission_id_v1":"s082866179","cpu_time_v0":149,"cpu_time_v1":17,"memory_v0":12504,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.59,"input":"import numpy as np\n\n\n\nn=int(eval(input()))\n\na_list=list(map(int,input().split()))\n\na_list_2=sorted(a_list,reverse=True)\n\na=np.array(a_list_2,dtype='uint8')\n\n\n\nalice=0\n\nbob=0\n\nfor i in range(n):\n\n\tif i%2==0:\n\n\t\talice+=a[i]\n\n\telse:\n\n\t\tbob+=a[i]\n\n\n\nprint((alice-bob))\n","target":"n=int(eval(input()))\n\na=list(map(int,input().split()))\n\na.sort(reverse=True)\n\n\n\nalice=0\n\nbob=0\n\n\n\nfor i in range(n):\n\n    if i%2==0:\n\n        alice+=a[i]\n\n    else:\n\n        bob+=a[i]\n\n        \n\nprint((alice-bob))","code_v0_loc":16,"code_v1_loc":14,"code_v0_num_chars":257,"code_v1_num_chars":205,"code_v0_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\na_list = list(map(int, input().split()))\na_list_2 = sorted(a_list, reverse=True)\na = np.array(a_list_2, dtype=\"uint8\")\nalice = 0\nbob = 0\nfor i in range(n):\n    if i % 2 == 0:\n        alice += a[i]\n    else:\n        bob += a[i]\nprint((alice - bob))\n","code_v1_no_empty_lines":"n = int(eval(input()))\na = list(map(int, input().split()))\na.sort(reverse=True)\nalice = 0\nbob = 0\nfor i in range(n):\n    if i % 2 == 0:\n        alice += a[i]\n    else:\n        bob += a[i]\nprint((alice - bob))\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-import numpy as np","-","-a_list = list(map(int, input().split()))","-a_list_2 = sorted(a_list, reverse=True)","-a = np.array(a_list_2, dtype=\"uint8\")","+a = list(map(int, input().split()))","+a.sort(reverse=True)"],"diff_only_import_comment":false,"measured_runtime_v0":1.7632728631,"measured_runtime_v1":0.2690178177,"runtime_lift":6.5544835577,"key":["s168786498","s082866179"]}
{"user_id":"u021019433","problem_id":"p02837","language":"python","submission_id_v0":"s456284110","submission_id_v1":"s644980365","cpu_time_v0":95,"cpu_time_v1":55,"memory_v0":6500,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":42.11,"input":"def popcount(x):\n\n  r, q = 0, x\n\n  while x:\n\n    r += 1\n\n    x &= x - 1\n\n  return r, q\n\n \n\nn = int(eval(input()))\n\nr = list(range(n))\n\na = [[0, 0] for _ in r]\n\nfor i in r:\n\n  for _ in range(int(eval(input()))):\n\n    x, y = list(map(int, input().split()))\n\n    a[i][y] |= 1 << (x - 1)\n\nl = (1 << n) - 1 \n\nb = sorted(map(popcount, list(range(1, l + 1))))\n\nans = next((i for i, x in reversed(b)\n\n           if all(a[j][0] & x == a[j][1] & l - x == 0 for j in r if x >> j & 1)), 0)\n\nprint(ans)\n","target":"from itertools import combinations, count\n\n \n\nn = int(eval(input()))\n\nr = list(range(n))\n\na = [(set(), set()) for _ in r]\n\nfor i in r:\n\n  for _ in range(int(eval(input()))):\n\n    x, y = list(map(int, input().split()))\n\n    a[i][y].add(x - 1)\n\nr = next(i for i in count(n, - 1) for x in map(set, combinations(r, i))\n\n         if all(a[j][0].isdisjoint(x) and a[j][1] < x for j in x))\n\nprint(r)\n","code_v0_loc":19,"code_v1_loc":12,"code_v0_num_chars":460,"code_v1_num_chars":369,"code_v0_no_empty_lines":"def popcount(x):\n    r, q = 0, x\n    while x:\n        r += 1\n        x &= x - 1\n    return r, q\n\n\nn = int(eval(input()))\nr = list(range(n))\na = [[0, 0] for _ in r]\nfor i in r:\n    for _ in range(int(eval(input()))):\n        x, y = list(map(int, input().split()))\n        a[i][y] |= 1 << (x - 1)\nl = (1 << n) - 1\nb = sorted(map(popcount, list(range(1, l + 1))))\nans = next(\n    (\n        i\n        for i, x in reversed(b)\n        if all(a[j][0] & x == a[j][1] & l - x == 0 for j in r if x >> j & 1)\n    ),\n    0,\n)\nprint(ans)\n","code_v1_no_empty_lines":"from itertools import combinations, count\n\nn = int(eval(input()))\nr = list(range(n))\na = [(set(), set()) for _ in r]\nfor i in r:\n    for _ in range(int(eval(input()))):\n        x, y = list(map(int, input().split()))\n        a[i][y].add(x - 1)\nr = next(\n    i\n    for i in count(n, -1)\n    for x in map(set, combinations(r, i))\n    if all(a[j][0].isdisjoint(x) and a[j][1] < x for j in x)\n)\nprint(r)\n","code_same":false,"relative_loc_diff_percent":36.8421052632,"diff":["-def popcount(x):","-    r, q = 0, x","-    while x:","-        r += 1","-        x &= x - 1","-    return r, q","-","+from itertools import combinations, count","-a = [[0, 0] for _ in r]","+a = [(set(), set()) for _ in r]","-        a[i][y] |= 1 << (x - 1)","-l = (1 << n) - 1","-b = sorted(map(popcount, list(range(1, l + 1))))","-ans = next(","-    (","-        i","-        for i, x in reversed(b)","-        if all(a[j][0] & x == a[j][1] & l - x == 0 for j in r if x >> j & 1)","-    ),","-    0,","+        a[i][y].add(x - 1)","+r = next(","+    i","+    for i in count(n, -1)","+    for x in map(set, combinations(r, i))","+    if all(a[j][0].isdisjoint(x) and a[j][1] < x for j in x)","-print(ans)","+print(r)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3135637941,"measured_runtime_v1":0.2051509681,"runtime_lift":1.5284538848,"key":["s456284110","s644980365"]}
{"user_id":"u836939578","problem_id":"p02555","language":"python","submission_id_v0":"s134270128","submission_id_v1":"s044449964","cpu_time_v0":73,"cpu_time_v1":62,"memory_v0":64852,"memory_v1":63756,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.07,"input":"S = int(eval(input()))\n\nMOD = 10 ** 9 + 7\n\n\n\n#dp[i]\u6700\u5f8c\u306b\u5207\u3063\u305f\u5834\u6240\u304ci\u3000\u30b9\u30bf\u30fc\u30c8\u304c1\u306a\u306e\u306f\u3001\u305d\u3053\u307e\u3067\u306e\u5207\u308a\u65b9\u304c1\u901a\u308a\u306a\u306e\u3067\n\n#\uff13\u4ee5\u4e0b\u306f\u30c0\u30e1\u306a\u306e\u3067\u30013\u500b\u524d\u306e\u7d50\u679c\u3092\u898b\u308b\u3088\u3046\u306b\u3059\u308b\n\ndp =  [0] * (S+1)\n\ndp[0] = 1\n\n\n\nfor i in range(1, S+1):\n\n    #\u305f\u3068\u3048\u3070i=6\u306e\u3068\u304d\u3001i=6\u3067\u521d\u3081\u3066\u5207\u308c\u76ee\u3092\u5165\u308c\u308b\u6642\u3067\uff0b\uff11\u3001i=3\u306b\u5207\u308c\u76ee\u3092\u3044\u308c\u308b\u3068\u304d\u3067\uff0b\uff11\u3067\u5408\u8a08\uff0b\uff12\n\n    for j in range(0, (i-3)+1):\n\n        dp[i] += dp[j]\n\n        dp[i] %= MOD\n\nprint((dp[S]))        ","target":"S = int(eval(input()))\n\nMOD = 10 ** 9 + 7\n\n\n\n#dp[i]\u6700\u5f8c\u306b\u5207\u3063\u305f\u5834\u6240\u304ci\u3000\u30b9\u30bf\u30fc\u30c8\u304c1\u306a\u306e\u306f\u3001\u305d\u3053\u307e\u3067\u306e\u5207\u308a\u65b9\u304c1\u901a\u308a\u306a\u306e\u3067\n\n#\uff13\u4ee5\u4e0b\u306f\u30c0\u30e1\u306a\u306e\u3067\u30013\u500b\u524d\u306e\u7d50\u679c\u3092\u898b\u308b\u3088\u3046\u306b\u3059\u308b\n\ndp =  [0] * (S+1)\n\ndp[0] = 1\n\n\n\n#\u3053\u308c\u307e\u3067\u306e\u548c\u3092x\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304f\n\nx = 0\n\nfor i in range(1, S+1):\n\n    if i-3 >= 0:\n\n        x += dp[i-3]\n\n        x %= MOD\n\n    dp[i] = x\n\nprint((dp[S]))        ","code_v0_loc":14,"code_v1_loc":16,"code_v0_num_chars":324,"code_v1_num_chars":285,"code_v0_no_empty_lines":"S = int(eval(input()))\nMOD = 10**9 + 7\n# dp[i]\u6700\u5f8c\u306b\u5207\u3063\u305f\u5834\u6240\u304ci\u3000\u30b9\u30bf\u30fc\u30c8\u304c1\u306a\u306e\u306f\u3001\u305d\u3053\u307e\u3067\u306e\u5207\u308a\u65b9\u304c1\u901a\u308a\u306a\u306e\u3067\n# \uff13\u4ee5\u4e0b\u306f\u30c0\u30e1\u306a\u306e\u3067\u30013\u500b\u524d\u306e\u7d50\u679c\u3092\u898b\u308b\u3088\u3046\u306b\u3059\u308b\ndp = [0] * (S + 1)\ndp[0] = 1\nfor i in range(1, S + 1):\n    # \u305f\u3068\u3048\u3070i=6\u306e\u3068\u304d\u3001i=6\u3067\u521d\u3081\u3066\u5207\u308c\u76ee\u3092\u5165\u308c\u308b\u6642\u3067\uff0b\uff11\u3001i=3\u306b\u5207\u308c\u76ee\u3092\u3044\u308c\u308b\u3068\u304d\u3067\uff0b\uff11\u3067\u5408\u8a08\uff0b\uff12\n    for j in range(0, (i - 3) + 1):\n        dp[i] += dp[j]\n        dp[i] %= MOD\nprint((dp[S]))\n","code_v1_no_empty_lines":"S = int(eval(input()))\nMOD = 10**9 + 7\n# dp[i]\u6700\u5f8c\u306b\u5207\u3063\u305f\u5834\u6240\u304ci\u3000\u30b9\u30bf\u30fc\u30c8\u304c1\u306a\u306e\u306f\u3001\u305d\u3053\u307e\u3067\u306e\u5207\u308a\u65b9\u304c1\u901a\u308a\u306a\u306e\u3067\n# \uff13\u4ee5\u4e0b\u306f\u30c0\u30e1\u306a\u306e\u3067\u30013\u500b\u524d\u306e\u7d50\u679c\u3092\u898b\u308b\u3088\u3046\u306b\u3059\u308b\ndp = [0] * (S + 1)\ndp[0] = 1\n# \u3053\u308c\u307e\u3067\u306e\u548c\u3092x\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304f\nx = 0\nfor i in range(1, S + 1):\n    if i - 3 >= 0:\n        x += dp[i - 3]\n        x %= MOD\n    dp[i] = x\nprint((dp[S]))\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["+# \u3053\u308c\u307e\u3067\u306e\u548c\u3092x\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304f","+x = 0","-    # \u305f\u3068\u3048\u3070i=6\u306e\u3068\u304d\u3001i=6\u3067\u521d\u3081\u3066\u5207\u308c\u76ee\u3092\u5165\u308c\u308b\u6642\u3067\uff0b\uff11\u3001i=3\u306b\u5207\u308c\u76ee\u3092\u3044\u308c\u308b\u3068\u304d\u3067\uff0b\uff11\u3067\u5408\u8a08\uff0b\uff12","-    for j in range(0, (i - 3) + 1):","-        dp[i] += dp[j]","-        dp[i] %= MOD","+    if i - 3 >= 0:","+        x += dp[i - 3]","+        x %= MOD","+    dp[i] = x"],"diff_only_import_comment":false,"measured_runtime_v0":0.7110086412,"measured_runtime_v1":0.2124667544,"runtime_lift":3.3464465681,"key":["s134270128","s044449964"]}
{"user_id":"u562935282","problem_id":"p03634","language":"python","submission_id_v0":"s143869460","submission_id_v1":"s902304606","cpu_time_v0":731,"cpu_time_v1":602,"memory_v0":163764,"memory_v1":59480,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.65,"input":"# bellman_ford : O(V E)\n\n# dijkstra : O(E log V), \u8ca0\u8fba\u306f\u7121\u7406\n\n# warshall_floyd : O(V**3)\n\n\n\nimport sys\n\n\n\nsys.setrecursionlimit(10 ** 7)\n\ninput = sys.stdin.readline\n\n\n\n\n\ndef solve():\n\n    inf = 10 ** 14 + 10\n\n\n\n    def dfs(v: 'vertex_index, 0-indexed') -> None:\n\n        for c, t in e[v]:\n\n            if d[t] != inf:\n\n                continue\n\n            d[t] = d[v] + c\n\n            dfs(t)\n\n\n\n    n = int(eval(input()))\n\n    e = tuple(set() for _ in range(n))\n\n    for _ in range(n - 1):\n\n        a, b, c = list(map(int, input().split()))\n\n        a -= 1\n\n        b -= 1\n\n        e[a].add((c, b))\n\n        e[b].add((c, a))\n\n\n\n    q, v = list(map(int, input().split()))\n\n    v -= 1\n\n\n\n    d = [inf] * n\n\n    d[v] = 0\n\n\n\n    dfs(v)\n\n\n\n    for _ in range(q):\n\n        x, y = list(map(int, input().split()))\n\n        x -= 1\n\n        y -= 1\n\n        print((d[x] + d[y]))\n\n\n\n\n\nif __name__ == '__main__':\n\n    solve()\n","target":"# bellman_ford : O(V E)\n\n# dijkstra : O(E log V), \u8ca0\u8fba\u306f\u7121\u7406\n\n# warshall_floyd : O(V**3)\n\n# deque\n\n\n\nfrom collections import deque\n\nimport sys\n\n\n\ninput = sys.stdin.readline\n\n\n\n\n\ndef solve():\n\n    inf = 10 ** 14 + 10\n\n\n\n    n = int(eval(input()))\n\n    e = tuple(set() for _ in range(n))\n\n    for _ in range(n - 1):\n\n        a, b, c = list(map(int, input().split()))\n\n        a -= 1\n\n        b -= 1\n\n        e[a].add((c, b))\n\n        e[b].add((c, a))\n\n\n\n    q, v = list(map(int, input().split()))\n\n    v -= 1\n\n\n\n    d = [inf] * n\n\n    d[v] = 0\n\n\n\n    dq = deque()\n\n    for cost, to in e[v]:\n\n        dq.append((cost, to, v))\n\n        # (cost, to, parent)\n\n\n\n    while dq:\n\n        c, v, p = dq.popleft()\n\n        if d[v] != inf:\n\n            continue\n\n        d[v] = d[p] + c\n\n        for cost, to in e[v]:\n\n            if to == p:\n\n                continue\n\n            dq.append((cost, to, v))\n\n            \n\n    for _ in range(q):\n\n        x, y = list(map(int, input().split()))\n\n        x -= 1\n\n        y -= 1\n\n        print((d[x] + d[y]))\n\n\n\n\n\nif __name__ == '__main__':\n\n    solve()\n","code_v0_loc":46,"code_v1_loc":53,"code_v0_num_chars":883,"code_v1_num_chars":1056,"code_v0_no_empty_lines":"# bellman_ford : O(V E)\n# dijkstra : O(E log V), \u8ca0\u8fba\u306f\u7121\u7406\n# warshall_floyd : O(V**3)\nimport sys\n\nsys.setrecursionlimit(10**7)\ninput = sys.stdin.readline\n\n\ndef solve():\n    inf = 10**14 + 10\n\n    def dfs(v: \"vertex_index, 0-indexed\") -> None:\n        for c, t in e[v]:\n            if d[t] != inf:\n                continue\n            d[t] = d[v] + c\n            dfs(t)\n\n    n = int(eval(input()))\n    e = tuple(set() for _ in range(n))\n    for _ in range(n - 1):\n        a, b, c = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        e[a].add((c, b))\n        e[b].add((c, a))\n    q, v = list(map(int, input().split()))\n    v -= 1\n    d = [inf] * n\n    d[v] = 0\n    dfs(v)\n    for _ in range(q):\n        x, y = list(map(int, input().split()))\n        x -= 1\n        y -= 1\n        print((d[x] + d[y]))\n\n\nif __name__ == \"__main__\":\n    solve()\n","code_v1_no_empty_lines":"# bellman_ford : O(V E)\n# dijkstra : O(E log V), \u8ca0\u8fba\u306f\u7121\u7406\n# warshall_floyd : O(V**3)\n# deque\nfrom collections import deque\nimport sys\n\ninput = sys.stdin.readline\n\n\ndef solve():\n    inf = 10**14 + 10\n    n = int(eval(input()))\n    e = tuple(set() for _ in range(n))\n    for _ in range(n - 1):\n        a, b, c = list(map(int, input().split()))\n        a -= 1\n        b -= 1\n        e[a].add((c, b))\n        e[b].add((c, a))\n    q, v = list(map(int, input().split()))\n    v -= 1\n    d = [inf] * n\n    d[v] = 0\n    dq = deque()\n    for cost, to in e[v]:\n        dq.append((cost, to, v))\n        # (cost, to, parent)\n    while dq:\n        c, v, p = dq.popleft()\n        if d[v] != inf:\n            continue\n        d[v] = d[p] + c\n        for cost, to in e[v]:\n            if to == p:\n                continue\n            dq.append((cost, to, v))\n    for _ in range(q):\n        x, y = list(map(int, input().split()))\n        x -= 1\n        y -= 1\n        print((d[x] + d[y]))\n\n\nif __name__ == \"__main__\":\n    solve()\n","code_same":false,"relative_loc_diff_percent":13.2075471698,"diff":["+# deque","+from collections import deque","-sys.setrecursionlimit(10**7)","-","-    def dfs(v: \"vertex_index, 0-indexed\") -> None:","-        for c, t in e[v]:","-            if d[t] != inf:","-                continue","-            d[t] = d[v] + c","-            dfs(t)","-","-    dfs(v)","+    dq = deque()","+    for cost, to in e[v]:","+        dq.append((cost, to, v))","+        # (cost, to, parent)","+    while dq:","+        c, v, p = dq.popleft()","+        if d[v] != inf:","+            continue","+        d[v] = d[p] + c","+        for cost, to in e[v]:","+            if to == p:","+                continue","+            dq.append((cost, to, v))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3453437109,"measured_runtime_v1":0.1126016858,"runtime_lift":3.06694974,"key":["s143869460","s902304606"]}
{"user_id":"u228223940","problem_id":"p03634","language":"python","submission_id_v0":"s279386500","submission_id_v1":"s990337521","cpu_time_v0":1565,"cpu_time_v1":1313,"memory_v0":113180,"memory_v1":156176,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.1,"input":"import queue\n\nn = int(eval(input()))\n\n\n\nabc = [[] for i in range(n+1)]\n\n\n\nfor i in range(n-1):\n\n    a,b,c = list(map(int,input().split()))\n\n    abc[a].append([b,c])\n\n    abc[b].append([a,c])\n\n\n\nQ,k = list(map(int,input().split()))\n\nxy = [[int(i) for i in input().split()] for j in range(Q)]\n\n\n\nq = queue.Queue()\n\n\n\nq.put(k)\n\n\n\npath = [-1]*(n+1)\n\npath[k] = 0\n\n\n\nwhile not q.empty():\n\n    tmp = q.get()\n\n    for i in range(len(abc[tmp])):\n\n        #print(abc[tmp])\n\n        #exit()\n\n        num = abc[tmp][i][0]\n\n        if path[num] != -1:\n\n            continue\n\n        else:\n\n            path[num] = path[tmp] + abc[tmp][i][1]\n\n            q.put(num)\n\n            \n\nfor i in range(Q):\n\n    print((path[xy[i][0]]+path[xy[i][1]]))","target":"import queue\n\nimport sys\n\nsys.setrecursionlimit(10**7)\n\nn = int(eval(input()))\n\n\n\nabc = [[] for i in range(n+1)]\n\n\n\nfor i in range(n-1):\n\n    a,b,c = list(map(int,input().split()))\n\n    abc[a].append([b,c])\n\n    abc[b].append([a,c])\n\n\n\nQ,k = list(map(int,input().split()))\n\nxy = [[int(i) for i in input().split()] for j in range(Q)]\n\n\n\nq = queue.Queue()\n\n\n\nq.put(k)\n\n\n\npath = [-1]*(n+1)\n\npath[k] = 0\n\n\n\ndef dfs(p):\n\n    for i in range(len(abc[p])):\n\n        num = abc[p][i][0]\n\n        if path[num] != -1:\n\n            continue\n\n        else:\n\n            path[num] = path[p] + abc[p][i][1]\n\n            dfs(num)\n\n\n\ndfs(k)\n\n\n\nfor i in range(Q):\n\n    print((path[xy[i][0]]+path[xy[i][1]]))","code_v0_loc":34,"code_v1_loc":35,"code_v0_num_chars":709,"code_v1_num_chars":668,"code_v0_no_empty_lines":"import queue\n\nn = int(eval(input()))\nabc = [[] for i in range(n + 1)]\nfor i in range(n - 1):\n    a, b, c = list(map(int, input().split()))\n    abc[a].append([b, c])\n    abc[b].append([a, c])\nQ, k = list(map(int, input().split()))\nxy = [[int(i) for i in input().split()] for j in range(Q)]\nq = queue.Queue()\nq.put(k)\npath = [-1] * (n + 1)\npath[k] = 0\nwhile not q.empty():\n    tmp = q.get()\n    for i in range(len(abc[tmp])):\n        # print(abc[tmp])\n        # exit()\n        num = abc[tmp][i][0]\n        if path[num] != -1:\n            continue\n        else:\n            path[num] = path[tmp] + abc[tmp][i][1]\n            q.put(num)\nfor i in range(Q):\n    print((path[xy[i][0]] + path[xy[i][1]]))\n","code_v1_no_empty_lines":"import queue\nimport sys\n\nsys.setrecursionlimit(10**7)\nn = int(eval(input()))\nabc = [[] for i in range(n + 1)]\nfor i in range(n - 1):\n    a, b, c = list(map(int, input().split()))\n    abc[a].append([b, c])\n    abc[b].append([a, c])\nQ, k = list(map(int, input().split()))\nxy = [[int(i) for i in input().split()] for j in range(Q)]\nq = queue.Queue()\nq.put(k)\npath = [-1] * (n + 1)\npath[k] = 0\n\n\ndef dfs(p):\n    for i in range(len(abc[p])):\n        num = abc[p][i][0]\n        if path[num] != -1:\n            continue\n        else:\n            path[num] = path[p] + abc[p][i][1]\n            dfs(num)\n\n\ndfs(k)\nfor i in range(Q):\n    print((path[xy[i][0]] + path[xy[i][1]]))\n","code_same":false,"relative_loc_diff_percent":2.8571428571,"diff":["+import sys","+sys.setrecursionlimit(10**7)","-while not q.empty():","-    tmp = q.get()","-    for i in range(len(abc[tmp])):","-        # print(abc[tmp])","-        # exit()","-        num = abc[tmp][i][0]","+","+","+def dfs(p):","+    for i in range(len(abc[p])):","+        num = abc[p][i][0]","-            path[num] = path[tmp] + abc[tmp][i][1]","-            q.put(num)","+            path[num] = path[p] + abc[p][i][1]","+            dfs(num)","+","+","+dfs(k)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3961623552,"measured_runtime_v1":0.2607869017,"runtime_lift":1.5191037302,"key":["s279386500","s990337521"]}
{"user_id":"u488178971","problem_id":"p03000","language":"python","submission_id_v0":"s975287095","submission_id_v1":"s789478825","cpu_time_v0":148,"cpu_time_v1":17,"memory_v0":12516,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.51,"input":"#ABC 130 B\n\nN,X=list(map(int,input().split()))\n\nL= [int(j) for j in input().split()]\n\ncnt=0\n\nimport numpy as np\n\njump = list(np.cumsum(L))\n\nfor j in jump:\n\n    if j <= X:\n\n        cnt+=1\n\n    else:\n\n        break\n\nprint((cnt+1))","target":"#ABC 130 B\n\nN,X=list(map(int,input().split()))\n\nL= [int(j) for j in input().split()]\n\ncnt=0\n\nd = 0\n\n\n\nfor l in L :\n\n    d+=l\n\n    if d <= X:\n\n        cnt+=1\n\n    else:\n\n        break\n\nprint((cnt+1))","code_v0_loc":12,"code_v1_loc":13,"code_v0_num_chars":220,"code_v1_num_chars":190,"code_v0_no_empty_lines":"# ABC 130 B\nN, X = list(map(int, input().split()))\nL = [int(j) for j in input().split()]\ncnt = 0\nimport numpy as np\n\njump = list(np.cumsum(L))\nfor j in jump:\n    if j <= X:\n        cnt += 1\n    else:\n        break\nprint((cnt + 1))\n","code_v1_no_empty_lines":"# ABC 130 B\nN, X = list(map(int, input().split()))\nL = [int(j) for j in input().split()]\ncnt = 0\nd = 0\nfor l in L:\n    d += l\n    if d <= X:\n        cnt += 1\n    else:\n        break\nprint((cnt + 1))\n","code_same":false,"relative_loc_diff_percent":7.6923076923,"diff":["-import numpy as np","-","-jump = list(np.cumsum(L))","-for j in jump:","-    if j <= X:","+d = 0","+for l in L:","+    d += l","+    if d <= X:"],"diff_only_import_comment":false,"measured_runtime_v0":1.4958784676,"measured_runtime_v1":0.1985901146,"runtime_lift":7.5324920912,"key":["s975287095","s789478825"]}
{"user_id":"u033272694","problem_id":"p03309","language":"python","submission_id_v0":"s079823927","submission_id_v1":"s432379861","cpu_time_v0":247,"cpu_time_v1":215,"memory_v0":34212,"memory_v1":34216,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":12.96,"input":"import numpy as np\n\nN = int(eval(input()))\n\nlist_ai = list(map(int,input().split()))\n\nlist1 = [x-(i+1) for i,x in enumerate(list_ai)]\n\na1 = np.array(list1)\n\nmedian1 = int(np.floor(np.median(a1)))\n\nans = np.sum(np.abs(a1-median1))\n\nprint(ans)","target":"import numpy as np\n\nN = int(eval(input()))\n\nlist_ai = list(map(int,input().split()))\n\na1 = np.array(list_ai)-np.arange(1,N+1)\n\nmedian1 = int(np.floor(np.median(a1)))\n\nans = np.sum(np.abs(a1-median1))\n\nprint(ans)\n","code_v0_loc":8,"code_v1_loc":7,"code_v0_num_chars":235,"code_v1_num_chars":206,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nlist_ai = list(map(int, input().split()))\nlist1 = [x - (i + 1) for i, x in enumerate(list_ai)]\na1 = np.array(list1)\nmedian1 = int(np.floor(np.median(a1)))\nans = np.sum(np.abs(a1 - median1))\nprint(ans)\n","code_v1_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nlist_ai = list(map(int, input().split()))\na1 = np.array(list_ai) - np.arange(1, N + 1)\nmedian1 = int(np.floor(np.median(a1)))\nans = np.sum(np.abs(a1 - median1))\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-list1 = [x - (i + 1) for i, x in enumerate(list_ai)]","-a1 = np.array(list1)","+a1 = np.array(list_ai) - np.arange(1, N + 1)"],"diff_only_import_comment":false,"measured_runtime_v0":1.879177295,"measured_runtime_v1":0.625532125,"runtime_lift":3.0041259591,"key":["s079823927","s432379861"]}
{"user_id":"u046187684","problem_id":"p02690","language":"python","submission_id_v0":"s323317183","submission_id_v1":"s843253005","cpu_time_v0":35,"cpu_time_v1":24,"memory_v0":11112,"memory_v1":9128,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":31.43,"input":"def solve(string):\n\n    x = int(string)\n\n    a = {i**5: i for i in range(-10000, 10000)}\n\n    for i in range(-10000, 10000):\n\n        if x + i ** 5 in a:\n\n            return str(f\"{a[x+i**5]} {i}\")\n\n\n\n\n\nif __name__ == '__main__':\n\n    import sys\n\n    print((solve(sys.stdin.read().strip())))\n","target":"def solve(string):\n\n    x = int(string)\n\n    a = {i**5: i for i in range(-120, 121)}\n\n    for i in range(-121, 121):\n\n        if x + i ** 5 in a:\n\n            return str(f\"{a[x+i**5]} {i}\")\n\n\n\n\n\nif __name__ == '__main__':\n\n    import sys\n\n    print((solve(sys.stdin.read().strip())))\n","code_v0_loc":11,"code_v1_loc":11,"code_v0_num_chars":290,"code_v1_num_chars":282,"code_v0_no_empty_lines":"def solve(string):\n    x = int(string)\n    a = {i**5: i for i in range(-10000, 10000)}\n    for i in range(-10000, 10000):\n        if x + i**5 in a:\n            return str(f\"{a[x+i**5]} {i}\")\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    print((solve(sys.stdin.read().strip())))\n","code_v1_no_empty_lines":"def solve(string):\n    x = int(string)\n    a = {i**5: i for i in range(-120, 121)}\n    for i in range(-121, 121):\n        if x + i**5 in a:\n            return str(f\"{a[x+i**5]} {i}\")\n\n\nif __name__ == \"__main__\":\n    import sys\n\n    print((solve(sys.stdin.read().strip())))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    a = {i**5: i for i in range(-10000, 10000)}","-    for i in range(-10000, 10000):","+    a = {i**5: i for i in range(-120, 121)}","+    for i in range(-121, 121):"],"diff_only_import_comment":false,"measured_runtime_v0":0.3328460753,"measured_runtime_v1":0.2083550632,"runtime_lift":1.5974945373,"key":["s323317183","s843253005"]}
{"user_id":"u227438830","problem_id":"p02394","language":"python","submission_id_v0":"s015330345","submission_id_v1":"s144446421","cpu_time_v0":30,"cpu_time_v1":20,"memory_v0":7644,"memory_v1":5592,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":33.33,"input":"W,H,x,y,r = [int(i) for i in input().split()]\n\nif x - r >= 0 and x + r <= W and y - r >= 0 and y + r <= H:\n\n    print(\"Yes\")\n\nelse:\n\n    print(\"No\")","target":"W, H, x, y, r = list(map(int, input().split()))\n\nif r <= x <= W-r and r <= y <= H-r:\n\n    print('Yes')\n\nelse:\n\n    print('No')\n","code_v0_loc":5,"code_v1_loc":5,"code_v0_num_chars":148,"code_v1_num_chars":121,"code_v0_no_empty_lines":"W, H, x, y, r = [int(i) for i in input().split()]\nif x - r >= 0 and x + r <= W and y - r >= 0 and y + r <= H:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","code_v1_no_empty_lines":"W, H, x, y, r = list(map(int, input().split()))\nif r <= x <= W - r and r <= y <= H - r:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-W, H, x, y, r = [int(i) for i in input().split()]","-if x - r >= 0 and x + r <= W and y - r >= 0 and y + r <= H:","+W, H, x, y, r = list(map(int, input().split()))","+if r <= x <= W - r and r <= y <= H - r:"],"diff_only_import_comment":false,"measured_runtime_v0":0.1765992579,"measured_runtime_v1":0.0064357525,"runtime_lift":27.44034336,"key":["s015330345","s144446421"]}
{"user_id":"u945228737","problem_id":"p02690","language":"python","submission_id_v0":"s563805552","submission_id_v1":"s994521496","cpu_time_v0":98,"cpu_time_v1":48,"memory_v0":9100,"memory_v1":9176,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":51.02,"input":"# \u89e3\u8aac\u3092\u53c2\u8003\u306b\u4f5c\u6210\n\n\n\ndef solve():\n\n    X = int(eval(input()))\n\n    A, B = 0, 0\n\n    for a in range(-200, 200):\n\n        for b in range(-200, 200):\n\n            if a ** 5 - b ** 5 == X:\n\n                A, B = a, b\n\n                break\n\n    print((A, B))\n\n\n\n\n\n\n\nif __name__ == '__main__':\n\n    solve()\n","target":"# \u89e3\u8aac\u3092\u53c2\u8003\u306b\u4f5c\u6210\n\n\n\ndef solve():\n\n    X = int(eval(input()))\n\n    A, B = 0, 0\n\n    # A \u3068 B \u306e\u5dee\u304c\u6700\u3082\u5c0f\u3055\u3044\u6642(A - B = 1)\u306b, ans < 10**9 \u3068\u306a\u308b\u306e\u306f\n\n    # -118 <= A <= 119, -119 <= B <= 118 \u306e\u5834\u5408\u3068\u306a\u308b.\n\n    # A - B > 1 \u306e\u5834\u5408\u3067\u3082\u540c\u3058\u7bc4\u56f2\u3060\u3051\u898b\u308c\u3070\u5341\u5206\u3068\u306a\u308b.\n\n    # A - B < 1 \u306e\u5834\u5408\u306f\u7b54\u3048\u304c\u8ca0\u306b\u306a\u308b\u306e\u3067, X >= 1 \u306e\u5236\u7d04\u304b\u3089\u691c\u8a0e\u4e0d\u8981.\n\n    for a in range(-118, 119 + 1):\n\n        for b in range(-119, 118 + 1):\n\n            if a ** 5 - b ** 5 == X:\n\n                A, B = a, b\n\n                break\n\n    print((A, B))\n\n\n\n\n\nif __name__ == '__main__':\n\n    solve()\n","code_v0_loc":16,"code_v1_loc":19,"code_v0_num_chars":288,"code_v1_num_chars":486,"code_v0_no_empty_lines":"# \u89e3\u8aac\u3092\u53c2\u8003\u306b\u4f5c\u6210\ndef solve():\n    X = int(eval(input()))\n    A, B = 0, 0\n    for a in range(-200, 200):\n        for b in range(-200, 200):\n            if a**5 - b**5 == X:\n                A, B = a, b\n                break\n    print((A, B))\n\n\nif __name__ == \"__main__\":\n    solve()\n","code_v1_no_empty_lines":"# \u89e3\u8aac\u3092\u53c2\u8003\u306b\u4f5c\u6210\ndef solve():\n    X = int(eval(input()))\n    A, B = 0, 0\n    # A \u3068 B \u306e\u5dee\u304c\u6700\u3082\u5c0f\u3055\u3044\u6642(A - B = 1)\u306b, ans < 10**9 \u3068\u306a\u308b\u306e\u306f\n    # -118 <= A <= 119, -119 <= B <= 118 \u306e\u5834\u5408\u3068\u306a\u308b.\n    # A - B > 1 \u306e\u5834\u5408\u3067\u3082\u540c\u3058\u7bc4\u56f2\u3060\u3051\u898b\u308c\u3070\u5341\u5206\u3068\u306a\u308b.\n    # A - B < 1 \u306e\u5834\u5408\u306f\u7b54\u3048\u304c\u8ca0\u306b\u306a\u308b\u306e\u3067, X >= 1 \u306e\u5236\u7d04\u304b\u3089\u691c\u8a0e\u4e0d\u8981.\n    for a in range(-118, 119 + 1):\n        for b in range(-119, 118 + 1):\n            if a**5 - b**5 == X:\n                A, B = a, b\n                break\n    print((A, B))\n\n\nif __name__ == \"__main__\":\n    solve()\n","code_same":false,"relative_loc_diff_percent":15.7894736842,"diff":["-    for a in range(-200, 200):","-        for b in range(-200, 200):","+    # A \u3068 B \u306e\u5dee\u304c\u6700\u3082\u5c0f\u3055\u3044\u6642(A - B = 1)\u306b, ans < 10**9 \u3068\u306a\u308b\u306e\u306f","+    # -118 <= A <= 119, -119 <= B <= 118 \u306e\u5834\u5408\u3068\u306a\u308b.","+    # A - B > 1 \u306e\u5834\u5408\u3067\u3082\u540c\u3058\u7bc4\u56f2\u3060\u3051\u898b\u308c\u3070\u5341\u5206\u3068\u306a\u308b.","+    # A - B < 1 \u306e\u5834\u5408\u306f\u7b54\u3048\u304c\u8ca0\u306b\u306a\u308b\u306e\u3067, X >= 1 \u306e\u5236\u7d04\u304b\u3089\u691c\u8a0e\u4e0d\u8981.","+    for a in range(-118, 119 + 1):","+        for b in range(-119, 118 + 1):"],"diff_only_import_comment":false,"measured_runtime_v0":1.5065554937,"measured_runtime_v1":0.7134095093,"runtime_lift":2.1117681697,"key":["s563805552","s994521496"]}
{"user_id":"u600402037","problem_id":"p03060","language":"python","submission_id_v0":"s117395180","submission_id_v1":"s327543146","cpu_time_v0":265,"cpu_time_v1":18,"memory_v0":17848,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":93.21,"input":"# coding: utf-8\n\nimport sys\n\nimport numpy as np\n\n\n\nsr = lambda: sys.stdin.readline().rstrip()\n\nir = lambda: int(sr())\n\nlr = lambda: list(map(int, sr().split()))\n\n\n\nN = ir()\n\nV = np.array(lr())\n\nC = np.array(lr())\n\nV -= C\n\nV = V[V>0]\n\nanswer = V.sum()\n\nprint(answer)\n","target":"# coding: utf-8\n\nimport sys\n\n\n\nsr = lambda: sys.stdin.readline().rstrip()\n\nir = lambda: int(sr())\n\nlr = lambda: list(map(int, sr().split()))\n\n\n\nN = ir()\n\nV = lr()\n\nC = lr()\n\ntotal = 0\n\nfor i in range(N):\n\n    result = V[i] - C[i]\n\n    if result > 0:\n\n        total += result\n\n\n\nprint(total)\n","code_v0_loc":15,"code_v1_loc":17,"code_v0_num_chars":266,"code_v1_num_chars":291,"code_v0_no_empty_lines":"# coding: utf-8\nimport sys\nimport numpy as np\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\nN = ir()\nV = np.array(lr())\nC = np.array(lr())\nV -= C\nV = V[V > 0]\nanswer = V.sum()\nprint(answer)\n","code_v1_no_empty_lines":"# coding: utf-8\nimport sys\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\nN = ir()\nV = lr()\nC = lr()\ntotal = 0\nfor i in range(N):\n    result = V[i] - C[i]\n    if result > 0:\n        total += result\nprint(total)\n","code_same":false,"relative_loc_diff_percent":11.7647058824,"diff":["-import numpy as np","-V = np.array(lr())","-C = np.array(lr())","-V -= C","-V = V[V > 0]","-answer = V.sum()","-print(answer)","+V = lr()","+C = lr()","+total = 0","+for i in range(N):","+    result = V[i] - C[i]","+    if result > 0:","+        total += result","+print(total)"],"diff_only_import_comment":false,"measured_runtime_v0":1.1957234194,"measured_runtime_v1":0.2010130272,"runtime_lift":5.9484872004,"key":["s117395180","s327543146"]}
{"user_id":"u353895424","problem_id":"p03325","language":"python","submission_id_v0":"s954474488","submission_id_v1":"s311308759","cpu_time_v0":81,"cpu_time_v1":56,"memory_v0":4148,"memory_v1":10088,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":30.86,"input":"from math import log2\n\nn = int(eval(input()))\n\na = list(map(int, input().split()))\n\nans = 0\n\n\n\nfor _a in a:\n\n    if _a%2 == 0:\n\n        cnt =0\n\n        while _a%2 == 0:\n\n            _a \/\/= 2\n\n            cnt += 1\n\n        ans += cnt\n\n\n\nprint((int(ans)))","target":"def f(k):\n\n    cnt = 0\n\n    while k%2 == 0:\n\n        k \/\/= 2\n\n        cnt += 1\n\n        # print(k)\n\n        # print(\"-----\")\n\n    return cnt\n\n\n\nn = int(eval(input()))\n\nA = list(map(int, input().split()))\n\nans = 0\n\n\n\nfor a in A:\n\n    if a%2 == 0:\n\n        ans += f(a)\n\nprint(ans)","code_v0_loc":14,"code_v1_loc":17,"code_v0_num_chars":245,"code_v1_num_chars":272,"code_v0_no_empty_lines":"from math import log2\n\nn = int(eval(input()))\na = list(map(int, input().split()))\nans = 0\nfor _a in a:\n    if _a % 2 == 0:\n        cnt = 0\n        while _a % 2 == 0:\n            _a \/\/= 2\n            cnt += 1\n        ans += cnt\nprint((int(ans)))\n","code_v1_no_empty_lines":"def f(k):\n    cnt = 0\n    while k % 2 == 0:\n        k \/\/= 2\n        cnt += 1\n        # print(k)\n        # print(\"-----\")\n    return cnt\n\n\nn = int(eval(input()))\nA = list(map(int, input().split()))\nans = 0\nfor a in A:\n    if a % 2 == 0:\n        ans += f(a)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":17.6470588235,"diff":["-from math import log2","+def f(k):","+    cnt = 0","+    while k % 2 == 0:","+        k \/\/= 2","+        cnt += 1","+        # print(k)","+    return cnt","+","-a = list(map(int, input().split()))","+A = list(map(int, input().split()))","-for _a in a:","-    if _a % 2 == 0:","-        cnt = 0","-        while _a % 2 == 0:","-            _a \/\/= 2","-            cnt += 1","-        ans += cnt","-print((int(ans)))","+for a in A:","+    if a % 2 == 0:","+        ans += f(a)","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3309142907,"measured_runtime_v1":0.2479304838,"runtime_lift":1.3347059448,"key":["s954474488","s311308759"]}
{"user_id":"u164727245","problem_id":"p02685","language":"python","submission_id_v0":"s549338354","submission_id_v1":"s173586541","cpu_time_v0":842,"cpu_time_v1":187,"memory_v0":9192,"memory_v1":16648,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":77.79,"input":"# coding: utf-8\n\n\n\n\n\ndef solve(*args: str) -> str:\n\n    n, m, k = list(map(int, args[0].split()))\n\n    mod = 998244353\n\n\n\n    if m == 1 and n-1 == k:\n\n        return str(1)\n\n\n\n    ncr = 1\n\n    p = m*pow(m-1, n-1, mod) % mod\n\n    ret = p\n\n    inv = pow(m-1, mod-2, mod)\n\n    for i in range(1, k+1):\n\n        ncr = (ncr * (n-i)*pow(i, mod-2, mod)) % mod\n\n        p = (p*inv) % mod\n\n        ret += p*ncr % mod\n\n\n\n    return str(ret % mod)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    print((solve(*(open(0).read().splitlines()))))\n","target":"# coding: utf-8\n\n\n\n\n\ndef solve(*args: str) -> str:\n\n    n, m, k = list(map(int, args[0].split()))\n\n    mod = 998244353\n\n\n\n    if m == 1 and n-1 == k:\n\n        return str(1)\n\n\n\n    ncr = 1\n\n    p = m*pow(m-1, n-1, mod) % mod\n\n\n\n    ret = p\n\n    iR = [1]*(k+1)\n\n    im = pow(m-1, mod-2, mod)\n\n\n\n    for i in range(1, k+1):\n\n        iR[i] = max(1, (-(mod\/\/i) * iR[mod % i]) % mod)\n\n        ncr = (ncr * (n-i)*iR[i]) % mod\n\n        p = (p*im) % mod\n\n        ret += p*ncr % mod\n\n\n\n    return str(ret % mod)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    print((solve(*(open(0).read().splitlines()))))\n","code_v0_loc":24,"code_v1_loc":28,"code_v0_num_chars":512,"code_v1_num_chars":578,"code_v0_no_empty_lines":"# coding: utf-8\ndef solve(*args: str) -> str:\n    n, m, k = list(map(int, args[0].split()))\n    mod = 998244353\n    if m == 1 and n - 1 == k:\n        return str(1)\n    ncr = 1\n    p = m * pow(m - 1, n - 1, mod) % mod\n    ret = p\n    inv = pow(m - 1, mod - 2, mod)\n    for i in range(1, k + 1):\n        ncr = (ncr * (n - i) * pow(i, mod - 2, mod)) % mod\n        p = (p * inv) % mod\n        ret += p * ncr % mod\n    return str(ret % mod)\n\n\nif __name__ == \"__main__\":\n    print((solve(*(open(0).read().splitlines()))))\n","code_v1_no_empty_lines":"# coding: utf-8\ndef solve(*args: str) -> str:\n    n, m, k = list(map(int, args[0].split()))\n    mod = 998244353\n    if m == 1 and n - 1 == k:\n        return str(1)\n    ncr = 1\n    p = m * pow(m - 1, n - 1, mod) % mod\n    ret = p\n    iR = [1] * (k + 1)\n    im = pow(m - 1, mod - 2, mod)\n    for i in range(1, k + 1):\n        iR[i] = max(1, (-(mod \/\/ i) * iR[mod % i]) % mod)\n        ncr = (ncr * (n - i) * iR[i]) % mod\n        p = (p * im) % mod\n        ret += p * ncr % mod\n    return str(ret % mod)\n\n\nif __name__ == \"__main__\":\n    print((solve(*(open(0).read().splitlines()))))\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["-    inv = pow(m - 1, mod - 2, mod)","+    iR = [1] * (k + 1)","+    im = pow(m - 1, mod - 2, mod)","-        ncr = (ncr * (n - i) * pow(i, mod - 2, mod)) % mod","-        p = (p * inv) % mod","+        iR[i] = max(1, (-(mod \/\/ i) * iR[mod % i]) % mod)","+        ncr = (ncr * (n - i) * iR[i]) % mod","+        p = (p * im) % mod"],"diff_only_import_comment":false,"measured_runtime_v0":0.4946005352,"measured_runtime_v1":0.3604053538,"runtime_lift":1.3723451385,"key":["s549338354","s173586541"]}
{"user_id":"u390727364","problem_id":"p02690","language":"python","submission_id_v0":"s461844743","submission_id_v1":"s642120834","cpu_time_v0":51,"cpu_time_v1":44,"memory_v0":9132,"memory_v1":9172,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.73,"input":"x = int(eval(input()))\n\na = 0\n\nb = 0\n\nfor i in range(-120, 120):\n\n    for j in range(-120, 120):\n\n        if i ** 5 - j ** 5 == x:\n\n            a = i\n\n            b = j\n\nprint((a, b))\n","target":"x = int(eval(input()))\n\nfor i in range(-120, 120):\n\n    for j in range(-120, 120):\n\n        if i ** 5 - j ** 5 == x:\n\n            print((i, j))\n\n            exit()\n","code_v0_loc":9,"code_v1_loc":6,"code_v0_num_chars":176,"code_v1_num_chars":156,"code_v0_no_empty_lines":"x = int(eval(input()))\na = 0\nb = 0\nfor i in range(-120, 120):\n    for j in range(-120, 120):\n        if i**5 - j**5 == x:\n            a = i\n            b = j\nprint((a, b))\n","code_v1_no_empty_lines":"x = int(eval(input()))\nfor i in range(-120, 120):\n    for j in range(-120, 120):\n        if i**5 - j**5 == x:\n            print((i, j))\n            exit()\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-a = 0","-b = 0","-            a = i","-            b = j","-print((a, b))","+            print((i, j))","+            exit()"],"diff_only_import_comment":false,"measured_runtime_v0":0.4738806367,"measured_runtime_v1":0.3552351197,"runtime_lift":1.3339915184,"key":["s461844743","s642120834"]}
{"user_id":"u054556734","problem_id":"p03828","language":"python","submission_id_v0":"s442927172","submission_id_v1":"s952876179","cpu_time_v0":83,"cpu_time_v1":25,"memory_v0":3316,"memory_v1":3316,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":69.88,"input":"import collections as col\n\n\n\ndef prime(n):\n\n    ans = []\n\n    num = n\n\n    for i in range(2,n+1):\n\n        if i%2==0 and i!=2: continue\n\n        while num%i == 0: num \/\/= i ; ans.append(i)\n\n    return ans\n\n\n\nn = int(eval(input()))\n\nmod = 10**9 + 7\n\n\n\nprimes = []\n\nfor i in range(2,n+1): primes += prime(i)\n\n\n\ncnt = col.Counter(primes)\n\nans = 1\n\nfor key,val in list(cnt.items()): ans *= (val + 1) ; ans %= mod\n\nprint(ans)\n","target":"import collections as col\n\n\n\ndef prime(n):\n\n    ans = []\n\n    num = n\n\n    for i in range(2,int(n**0.5)+1):\n\n        if i%2==0 and i!=2: continue\n\n        while num%i == 0: num \/\/= i ; ans.append(i)\n\n    if num != 1: ans.append(num)\n\n    return ans\n\n\n\nn = int(eval(input()))\n\nmod = 10**9 + 7\n\n\n\nprimes = []\n\nfor i in range(2,n+1): primes += prime(i)\n\n\n\ncnt = col.Counter(primes)\n\nans = 1\n\nfor key,val in list(cnt.items()): ans *= (val + 1) ; ans %= mod\n\nprint(ans)\n","code_v0_loc":20,"code_v1_loc":21,"code_v0_num_chars":409,"code_v1_num_chars":453,"code_v0_no_empty_lines":"import collections as col\n\n\ndef prime(n):\n    ans = []\n    num = n\n    for i in range(2, n + 1):\n        if i % 2 == 0 and i != 2:\n            continue\n        while num % i == 0:\n            num \/\/= i\n            ans.append(i)\n    return ans\n\n\nn = int(eval(input()))\nmod = 10**9 + 7\nprimes = []\nfor i in range(2, n + 1):\n    primes += prime(i)\ncnt = col.Counter(primes)\nans = 1\nfor key, val in list(cnt.items()):\n    ans *= val + 1\n    ans %= mod\nprint(ans)\n","code_v1_no_empty_lines":"import collections as col\n\n\ndef prime(n):\n    ans = []\n    num = n\n    for i in range(2, int(n**0.5) + 1):\n        if i % 2 == 0 and i != 2:\n            continue\n        while num % i == 0:\n            num \/\/= i\n            ans.append(i)\n    if num != 1:\n        ans.append(num)\n    return ans\n\n\nn = int(eval(input()))\nmod = 10**9 + 7\nprimes = []\nfor i in range(2, n + 1):\n    primes += prime(i)\ncnt = col.Counter(primes)\nans = 1\nfor key, val in list(cnt.items()):\n    ans *= val + 1\n    ans %= mod\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":4.7619047619,"diff":["-    for i in range(2, n + 1):","+    for i in range(2, int(n**0.5) + 1):","+    if num != 1:","+        ans.append(num)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3365422637,"measured_runtime_v1":0.2564944384,"runtime_lift":1.3120840585,"key":["s442927172","s952876179"]}
{"user_id":"u852690916","problem_id":"p02794","language":"python","submission_id_v0":"s356881403","submission_id_v1":"s623982203","cpu_time_v0":2735,"cpu_time_v1":2229,"memory_v0":44580,"memory_v1":43936,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":18.5,"input":"import sys\n\ndef main():\n\n    input = sys.stdin.readline\n\n    N = int(eval(input()))\n\n    E = [[] for _ in range(N)]\n\n    for i in range(N-1):\n\n        a, b = list(map(int, input().split()))\n\n        a, b = a-1, b-1\n\n        E[a].append((b,i))\n\n        E[b].append((a,i))\n\n    \n\n    def dfs(s, g):\n\n        par = [(-1,-1)] * N\n\n        par[s] = (s,-1)\n\n        stack = [s]\n\n        while stack:\n\n            v = stack.pop()\n\n            for to, i in E[v]:\n\n                if par[to][0] >= 0: continue\n\n                par[to] = (v, i)\n\n                if to == g: break\n\n                stack.append(to)\n\n        r = set()\n\n        v = g\n\n        while v != s:\n\n            v, i = par[v]\n\n            r.add(i)\n\n        return r\n\n    \n\n    M = int(eval(input()))\n\n    path = [None] * M\n\n    for i in range(M):\n\n        u, v = list(map(int, input().split()))\n\n        u, v = u-1, v-1\n\n        path[i] = dfs(u, v)\n\n\n\n    def calc(s): return 1<<(N-1-len(s))\n\n\n\n    i_ans = 0\n\n    for p in range(1, 1<<M):\n\n        is_odd = bin(p).count('1') & 1\n\n        s = set()\n\n        for i in range(M):\n\n            if p&1: s |= path[i]\n\n            p >>= 1\n\n        if is_odd: i_ans += calc(s)\n\n        else: i_ans -= calc(s)\n\n\n\n    print(((1<<(N-1)) - i_ans))\n\n\n\nif __name__ == '__main__':\n\n    main()","target":"import sys\n\ndef main():\n\n    input = sys.stdin.readline\n\n    N = int(eval(input()))\n\n    E = [[] for _ in range(N)]\n\n    for i in range(N-1):\n\n        a, b = list(map(int, input().split()))\n\n        a, b = a-1, b-1\n\n        E[a].append((b,i))\n\n        E[b].append((a,i))\n\n    \n\n    def dfs(s, g):\n\n        par = [(-1,-1)] * N\n\n        par[s] = (s,-1)\n\n        stack = [s]\n\n        while stack:\n\n            v = stack.pop()\n\n            for to, i in E[v]:\n\n                if par[to][0] >= 0: continue\n\n                par[to] = (v, i)\n\n                if to == g: break\n\n                stack.append(to)\n\n        r = set()\n\n        v = g\n\n        while v != s:\n\n            v, i = par[v]\n\n            r.add(i)\n\n        return r\n\n    \n\n    M = int(eval(input()))\n\n    path = [None] * M\n\n    for i in range(M):\n\n        u, v = list(map(int, input().split()))\n\n        u, v = u-1, v-1\n\n        path[i] = dfs(u, v)\n\n\n\n    def calc(s): return 1<<(N-1-len(s))\n\n\n\n    i_ans = 0\n\n    for p in range(1, 1<<M):\n\n        is_odd = 0\n\n        s = set()\n\n        for i in range(M):\n\n            if p&1:\n\n                s |= path[i]\n\n                is_odd ^= 1\n\n            p >>= 1\n\n        if is_odd: i_ans += calc(s)\n\n        else: i_ans -= calc(s)\n\n\n\n    print(((1<<(N-1)) - i_ans))\n\n\n\nif __name__ == '__main__':\n\n    main()","code_v0_loc":52,"code_v1_loc":54,"code_v0_num_chars":1262,"code_v1_num_chars":1288,"code_v0_no_empty_lines":"import sys\n\n\ndef main():\n    input = sys.stdin.readline\n    N = int(eval(input()))\n    E = [[] for _ in range(N)]\n    for i in range(N - 1):\n        a, b = list(map(int, input().split()))\n        a, b = a - 1, b - 1\n        E[a].append((b, i))\n        E[b].append((a, i))\n\n    def dfs(s, g):\n        par = [(-1, -1)] * N\n        par[s] = (s, -1)\n        stack = [s]\n        while stack:\n            v = stack.pop()\n            for to, i in E[v]:\n                if par[to][0] >= 0:\n                    continue\n                par[to] = (v, i)\n                if to == g:\n                    break\n                stack.append(to)\n        r = set()\n        v = g\n        while v != s:\n            v, i = par[v]\n            r.add(i)\n        return r\n\n    M = int(eval(input()))\n    path = [None] * M\n    for i in range(M):\n        u, v = list(map(int, input().split()))\n        u, v = u - 1, v - 1\n        path[i] = dfs(u, v)\n\n    def calc(s):\n        return 1 << (N - 1 - len(s))\n\n    i_ans = 0\n    for p in range(1, 1 << M):\n        is_odd = bin(p).count(\"1\") & 1\n        s = set()\n        for i in range(M):\n            if p & 1:\n                s |= path[i]\n            p >>= 1\n        if is_odd:\n            i_ans += calc(s)\n        else:\n            i_ans -= calc(s)\n    print(((1 << (N - 1)) - i_ans))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\n\ndef main():\n    input = sys.stdin.readline\n    N = int(eval(input()))\n    E = [[] for _ in range(N)]\n    for i in range(N - 1):\n        a, b = list(map(int, input().split()))\n        a, b = a - 1, b - 1\n        E[a].append((b, i))\n        E[b].append((a, i))\n\n    def dfs(s, g):\n        par = [(-1, -1)] * N\n        par[s] = (s, -1)\n        stack = [s]\n        while stack:\n            v = stack.pop()\n            for to, i in E[v]:\n                if par[to][0] >= 0:\n                    continue\n                par[to] = (v, i)\n                if to == g:\n                    break\n                stack.append(to)\n        r = set()\n        v = g\n        while v != s:\n            v, i = par[v]\n            r.add(i)\n        return r\n\n    M = int(eval(input()))\n    path = [None] * M\n    for i in range(M):\n        u, v = list(map(int, input().split()))\n        u, v = u - 1, v - 1\n        path[i] = dfs(u, v)\n\n    def calc(s):\n        return 1 << (N - 1 - len(s))\n\n    i_ans = 0\n    for p in range(1, 1 << M):\n        is_odd = 0\n        s = set()\n        for i in range(M):\n            if p & 1:\n                s |= path[i]\n                is_odd ^= 1\n            p >>= 1\n        if is_odd:\n            i_ans += calc(s)\n        else:\n            i_ans -= calc(s)\n    print(((1 << (N - 1)) - i_ans))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":3.7037037037,"diff":["-        is_odd = bin(p).count(\"1\") & 1","+        is_odd = 0","+                is_odd ^= 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.3895377469,"measured_runtime_v1":0.2566085732,"runtime_lift":1.5180231199,"key":["s356881403","s623982203"]}
{"user_id":"u729133443","problem_id":"p02899","language":"python","submission_id_v0":"s646220831","submission_id_v1":"s894161830","cpu_time_v0":493,"cpu_time_v1":357,"memory_v0":21804,"memory_v1":62060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":27.59,"input":"from numpy import*;_,a=open(0);print((*argsort(int32(a.split()))+1))","target":"n,a=open(0);a=a.split();print((*sorted(list(range(1,int(n)+1)),key=lambda x:int(a[x-1]))))","code_v0_loc":1,"code_v1_loc":1,"code_v0_num_chars":66,"code_v1_num_chars":82,"code_v0_no_empty_lines":"from numpy import *\n\n_, a = open(0)\nprint((*argsort(int32(a.split())) + 1))\n","code_v1_no_empty_lines":"n, a = open(0)\na = a.split()\nprint((*sorted(list(range(1, int(n) + 1)), key=lambda x: int(a[x - 1]))))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-from numpy import *","-","-_, a = open(0)","-print((*argsort(int32(a.split())) + 1))","+n, a = open(0)","+a = a.split()","+print((*sorted(list(range(1, int(n) + 1)), key=lambda x: int(a[x - 1]))))"],"diff_only_import_comment":false,"measured_runtime_v0":2.3151512724,"measured_runtime_v1":0.2950551372,"runtime_lift":7.8465038569,"key":["s646220831","s894161830"]}
{"user_id":"u020390084","problem_id":"p03575","language":"python","submission_id_v0":"s815945561","submission_id_v1":"s404136326","cpu_time_v0":206,"cpu_time_v1":21,"memory_v0":13852,"memory_v1":3192,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":89.81,"input":"import sys\n\nfrom scipy.sparse import csr_matrix\n\nfrom scipy.sparse.csgraph import floyd_warshall\n\n\n\ndef solve(N: int, M: int, a: \"List[int]\", b: \"List[int]\"):\n\n    answer = 0\n\n    for i in range(M): ## i\u306e\u8fba\u3092\u6d88\u3059\n\n        matrix = [[0]*(N) for _ in range(N)]\n\n        for j in range(M):\n\n            if j == i:\n\n                continue\n\n            aa = a[j]-1\n\n            bb = b[j]-1\n\n            matrix[aa][bb] = 1\n\n           \n\n        dist_matrix = floyd_warshall(csgraph=csr_matrix(matrix), directed=False)\n\n        \n\n        if dist_matrix[a[i]-1][b[i]-1] == float('inf'):\n\n            answer += 1\n\n            \n\n    print(answer)\n\n    return\n\n\n\n\n\ndef main():\n\n    def iterate_tokens():\n\n        for line in sys.stdin:\n\n            for word in line.split():\n\n                yield word\n\n    tokens = iterate_tokens()\n\n    N = int(next(tokens))  # type: int\n\n    M = int(next(tokens))  # type: int\n\n    a = [int()] * (M)  # type: \"List[int]\"\n\n    b = [int()] * (M)  # type: \"List[int]\"\n\n    for i in range(M):\n\n        a[i] = int(next(tokens))\n\n        b[i] = int(next(tokens))\n\n    solve(N, M, a, b)\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"#!\/usr\/bin\/env python3\n\nimport sys\n\ninput = sys.stdin.readline\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int,input().split()))\n\ndef LI(): return list(map(int,input().split()))\n\n\n\nclass UnionFind():\n\n    def __init__(self, n):\n\n        self.n = n\n\n        self.parents = [-1] * n\n\n        \n\n    def find(self, x): # \u6839\u3092\u63a2\u3059\n\n        if self.parents[x] < 0:\n\n            return x\n\n        else:\n\n            self.parents[x] = self.find(self.parents[x])\n\n            return self.parents[x]\n\n    \n\n    def union(self, x, y):\n\n        x = self.find(x)\n\n        y = self.find(y)\n\n        \n\n        if x == y:\n\n            return\n\n        \n\n        if self.parents[x] > self.parents[y]:\n\n            x, y = y, x\n\n        \n\n        self.parents[x] += self.parents[y]\n\n        self.parents[y] = x\n\n    \n\n    def size(self, x):\n\n        return -self.parents[self.find(x)]\n\n        \n\n    def same(self, x, y):\n\n        return self.find(x) == self.find(y)\n\n    \n\n    def members(self, x):\n\n        root = self.find(x)\n\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    \n\n    def roots(self):\n\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n\n\n    def group_count(self):\n\n        return len(self.roots())\n\n    \n\n    def all_group_members(self):\n\n        return {r: self.members(r) for r in self.roots()}\n\n    \n\n    def __str__(self):\n\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\n\n\ndef main():\n\n    N,M=MAP()\n\n    \n\n    edges = []\n\n    for _ in range(M):\n\n        a,b = MAP()\n\n        edges.append((a-1,b-1))\n\n\n\n    answer = 0\n\n    for i in range(M): # i\u756a\u76ee\u306e\u8fba\u3092\u4f7f\u308f\u306a\u3044\n\n        uf = UnionFind(N)\n\n\n\n        for j in range(M):\n\n            if i == j:\n\n                continue\n\n\n\n            a,b = edges[j]\n\n            uf.union(a,b)\n\n        if uf.group_count() > 1:\n\n            answer += 1\n\n    print(answer)\n\n    return\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":41,"code_v1_loc":79,"code_v0_num_chars":1146,"code_v1_num_chars":1934,"code_v0_no_empty_lines":"import sys\nfrom scipy.sparse import csr_matrix\nfrom scipy.sparse.csgraph import floyd_warshall\n\n\ndef solve(N: int, M: int, a: \"List[int]\", b: \"List[int]\"):\n    answer = 0\n    for i in range(M):  ## i\u306e\u8fba\u3092\u6d88\u3059\n        matrix = [[0] * (N) for _ in range(N)]\n        for j in range(M):\n            if j == i:\n                continue\n            aa = a[j] - 1\n            bb = b[j] - 1\n            matrix[aa][bb] = 1\n        dist_matrix = floyd_warshall(csgraph=csr_matrix(matrix), directed=False)\n        if dist_matrix[a[i] - 1][b[i] - 1] == float(\"inf\"):\n            answer += 1\n    print(answer)\n    return\n\n\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    M = int(next(tokens))  # type: int\n    a = [int()] * (M)  # type: \"List[int]\"\n    b = [int()] * (M)  # type: \"List[int]\"\n    for i in range(M):\n        a[i] = int(next(tokens))\n        b[i] = int(next(tokens))\n    solve(N, M, a, b)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"#!\/usr\/bin\/env python3\nimport sys\n\ninput = sys.stdin.readline\n\n\ndef INT():\n    return int(eval(input()))\n\n\ndef MAP():\n    return list(map(int, input().split()))\n\n\ndef LI():\n    return list(map(int, input().split()))\n\n\nclass UnionFind:\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):  # \u6839\u3092\u63a2\u3059\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return \"\\n\".join(\"{}: {}\".format(r, self.members(r)) for r in self.roots())\n\n\ndef main():\n    N, M = MAP()\n    edges = []\n    for _ in range(M):\n        a, b = MAP()\n        edges.append((a - 1, b - 1))\n    answer = 0\n    for i in range(M):  # i\u756a\u76ee\u306e\u8fba\u3092\u4f7f\u308f\u306a\u3044\n        uf = UnionFind(N)\n        for j in range(M):\n            if i == j:\n                continue\n            a, b = edges[j]\n            uf.union(a, b)\n        if uf.group_count() > 1:\n            answer += 1\n    print(answer)\n    return\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":48.1012658228,"diff":["+#!\/usr\/bin\/env python3","-from scipy.sparse import csr_matrix","-from scipy.sparse.csgraph import floyd_warshall","+","+input = sys.stdin.readline","-def solve(N: int, M: int, a: \"List[int]\", b: \"List[int]\"):","+def INT():","+    return int(eval(input()))","+","+","+def MAP():","+    return list(map(int, input().split()))","+","+","+def LI():","+    return list(map(int, input().split()))","+","+","+class UnionFind:","+    def __init__(self, n):","+        self.n = n","+        self.parents = [-1] * n","+","+    def find(self, x):  # \u6839\u3092\u63a2\u3059","+        if self.parents[x] < 0:","+            return x","+        else:","+            self.parents[x] = self.find(self.parents[x])","+            return self.parents[x]","+","+    def union(self, x, y):","+        x = self.find(x)","+        y = self.find(y)","+        if x == y:","+            return","+        if self.parents[x] > self.parents[y]:","+            x, y = y, x","+        self.parents[x] += self.parents[y]","+        self.parents[y] = x","+","+    def size(self, x):","+        return -self.parents[self.find(x)]","+","+    def same(self, x, y):","+        return self.find(x) == self.find(y)","+","+    def members(self, x):","+        root = self.find(x)","+        return [i for i in range(self.n) if self.find(i) == root]","+","+    def roots(self):","+        return [i for i, x in enumerate(self.parents) if x < 0]","+","+    def group_count(self):","+        return len(self.roots())","+","+    def all_group_members(self):","+        return {r: self.members(r) for r in self.roots()}","+","+    def __str__(self):","+        return \"\\n\".join(\"{}: {}\".format(r, self.members(r)) for r in self.roots())","+","+","+def main():","+    N, M = MAP()","+    edges = []","+    for _ in range(M):","+        a, b = MAP()","+        edges.append((a - 1, b - 1))","-    for i in range(M):  ## i\u306e\u8fba\u3092\u6d88\u3059","-        matrix = [[0] * (N) for _ in range(N)]","+    for i in range(M):  # i\u756a\u76ee\u306e\u8fba\u3092\u4f7f\u308f\u306a\u3044","+        uf = UnionFind(N)","-            if j == i:","+            if i == j:","-            aa = a[j] - 1","-            bb = b[j] - 1","-            matrix[aa][bb] = 1","-        dist_matrix = floyd_warshall(csgraph=csr_matrix(matrix), directed=False)","-        if dist_matrix[a[i] - 1][b[i] - 1] == float(\"inf\"):","+            a, b = edges[j]","+            uf.union(a, b)","+        if uf.group_count() > 1:","-def main():","-    def iterate_tokens():","-        for line in sys.stdin:","-            for word in line.split():","-                yield word","-","-    tokens = iterate_tokens()","-    N = int(next(tokens))  # type: int","-    M = int(next(tokens))  # type: int","-    a = [int()] * (M)  # type: \"List[int]\"","-    b = [int()] * (M)  # type: \"List[int]\"","-    for i in range(M):","-        a[i] = int(next(tokens))","-        b[i] = int(next(tokens))","-    solve(N, M, a, b)","-","-"],"diff_only_import_comment":false,"measured_runtime_v0":2.0324458141,"measured_runtime_v1":0.2175420785,"runtime_lift":9.3427709623,"key":["s815945561","s404136326"]}
{"user_id":"u295361373","problem_id":"p02612","language":"python","submission_id_v0":"s197156959","submission_id_v1":"s836901225","cpu_time_v0":226,"cpu_time_v1":180,"memory_v0":68124,"memory_v1":68072,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":20.35,"input":"'''\n\n    Auther: ghoshashis545 Ashis Ghosh\n\n    College: jalpaiguri Govt Enggineering College\n\n\n\n'''\n\nfrom os import path\n\nimport sys\n\nfrom functools import cmp_to_key as ctk\n\nfrom collections import deque,defaultdict as dd \n\nfrom bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n\nfrom itertools import permutations\n\nfrom datetime import datetime\n\nfrom math import ceil,sqrt,log,gcd\n\ndef ii():return int(eval(input()))\n\ndef si():return eval(input())\n\ndef mi():return list(map(int,input().split()))\n\ndef li():return list(mi())\n\nabc='abcdefghijklmnopqrstuvwxyz'\n\nmod=1000000007\n\n#mod=998244353\n\ninf = float(\"inf\")\n\nvow=['a','e','i','o','u']\n\ndx,dy=[-1,1,0,0],[0,0,1,-1]\n\n\n\ndef bo(i):\n\n    return ord(i)-ord('a')\n\n\n\nfile = 0\n\n\n\ndef solve():\n\n    \n\n\n\n\n\n\n\n    # for _ in range(ii()):\n\n\n\n    n=ii()\n\n    n%=1000\n\n    if n!=0:\n\n        n=1000-n\n\n    print(n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif __name__ ==\"__main__\":\n\n\n\n    if(file):\n\n\n\n        if path.exists('input1.txt'):\n\n            sys.stdin=open('input1.txt', 'r')\n\n            sys.stdout=open('output1.txt','w')\n\n        else:\n\n            input=sys.stdin.readline\n\n    solve()","target":"'''\n\n    Auther: ghoshashis545 Ashis Ghosh\n\n    College: jalpaiguri Govt Enggineering College\n\n\n\n'''\n\nfrom os import path\n\nimport sys\n\nfrom heapq import heappush,heappop\n\nfrom functools import cmp_to_key as ctk\n\nfrom collections import deque,defaultdict as dd \n\nfrom bisect import bisect,bisect_left,bisect_right,insort,insort_left,insort_right\n\nfrom itertools import permutations\n\nfrom datetime import datetime\n\nfrom math import ceil,sqrt,log,gcd\n\ndef ii():return int(eval(input()))\n\ndef si():return eval(input())\n\ndef mi():return list(map(int,input().split()))\n\ndef li():return list(mi())\n\nabc='abcdefghijklmnopqrstuvwxyz'\n\nmod=1000000007\n\n# mod=998244353\n\ninf = float(\"inf\")\n\nvow=['a','e','i','o','u']\n\ndx,dy=[-1,1,0,0],[0,0,1,-1]\n\n\n\ndef bo(i):\n\n    return ord(i)-ord('a')\n\n\n\nfile=0\n\n\n\n\n\n\n\n\n\n\n\ndef solve():\n\n\n\n\n\n    # for _ in range(ii()):\n\n    \n\n        \n\n\n\n    n=ii()\n\n    n%=1000\n\n    if(n!=0):\n\n        n=1000-n\n\n    print(n)\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        \n\nif __name__ ==\"__main__\":\n\n\n\n    if(file):\n\n\n\n        if path.exists('input1.txt'):\n\n            sys.stdin=open('input1.txt', 'r')\n\n            sys.stdout=open('output1.txt','w')\n\n        else:\n\n            input=sys.stdin.readline\n\n    solve()\n","code_v0_loc":77,"code_v1_loc":66,"code_v0_num_chars":1162,"code_v1_num_chars":1190,"code_v0_no_empty_lines":"\"\"\"\n    Auther: ghoshashis545 Ashis Ghosh\n    College: jalpaiguri Govt Enggineering College\n\"\"\"\nfrom os import path\nimport sys\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\n\n\ndef ii():\n    return int(eval(input()))\n\n\ndef si():\n    return eval(input())\n\n\ndef mi():\n    return list(map(int, input().split()))\n\n\ndef li():\n    return list(mi())\n\n\nabc = \"abcdefghijklmnopqrstuvwxyz\"\nmod = 1000000007\n# mod=998244353\ninf = float(\"inf\")\nvow = [\"a\", \"e\", \"i\", \"o\", \"u\"]\ndx, dy = [-1, 1, 0, 0], [0, 0, 1, -1]\n\n\ndef bo(i):\n    return ord(i) - ord(\"a\")\n\n\nfile = 0\n\n\ndef solve():\n    # for _ in range(ii()):\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)\n\n\nif __name__ == \"__main__\":\n    if file:\n        if path.exists(\"input1.txt\"):\n            sys.stdin = open(\"input1.txt\", \"r\")\n            sys.stdout = open(\"output1.txt\", \"w\")\n        else:\n            input = sys.stdin.readline\n    solve()\n","code_v1_no_empty_lines":"\"\"\"\n    Auther: ghoshashis545 Ashis Ghosh\n    College: jalpaiguri Govt Enggineering College\n\"\"\"\nfrom os import path\nimport sys\nfrom heapq import heappush, heappop\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\n\n\ndef ii():\n    return int(eval(input()))\n\n\ndef si():\n    return eval(input())\n\n\ndef mi():\n    return list(map(int, input().split()))\n\n\ndef li():\n    return list(mi())\n\n\nabc = \"abcdefghijklmnopqrstuvwxyz\"\nmod = 1000000007\n# mod=998244353\ninf = float(\"inf\")\nvow = [\"a\", \"e\", \"i\", \"o\", \"u\"]\ndx, dy = [-1, 1, 0, 0], [0, 0, 1, -1]\n\n\ndef bo(i):\n    return ord(i) - ord(\"a\")\n\n\nfile = 0\n\n\ndef solve():\n    # for _ in range(ii()):\n    n = ii()\n    n %= 1000\n    if n != 0:\n        n = 1000 - n\n    print(n)\n\n\nif __name__ == \"__main__\":\n    if file:\n        if path.exists(\"input1.txt\"):\n            sys.stdin = open(\"input1.txt\", \"r\")\n            sys.stdout = open(\"output1.txt\", \"w\")\n        else:\n            input = sys.stdin.readline\n    solve()\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["+from heapq import heappush, heappop"],"diff_only_import_comment":false,"measured_runtime_v0":0.3258618799,"measured_runtime_v1":0.2078528001,"runtime_lift":1.5677531392,"key":["s197156959","s836901225"]}
{"user_id":"u254871849","problem_id":"p02850","language":"python","submission_id_v0":"s960505941","submission_id_v1":"s699117089","cpu_time_v0":1118,"cpu_time_v1":274,"memory_v0":34416,"memory_v1":33444,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":75.49,"input":"import sys\n\nfrom collections import deque\n\nimport numpy as np\n\n\n\ndef main():\n\n    n = int(sys.stdin.readline().rstrip())\n\n    ab = np.array(sys.stdin.read().split(), dtype=np.int64).reshape(-1, 2)\n\n\n\n    G = [[] for _ in range(n + 1)]\n\n    for a, b in ab:\n\n        G[a].append(b)\n\n        G[b].append(a)\n\n    \n\n    parent = np.zeros(n + 1, dtype=np.int64)\n\n    color = np.zeros(n + 1, dtype=np.int64) # color of the edge(parent[y], y)\n\n\n\n    q = deque([1]) # root = 1\n\n    while q:\n\n        x = q.popleft()\n\n        ng = color[x]\n\n        c = 1\n\n        for y in G[x]:\n\n            if y == parent[x]:\n\n                continue\n\n            parent[y] = x\n\n            if c == ng:\n\n                c += 1\n\n            color[y] = c\n\n            q.append(y)\n\n            c += 1\n\n\n\n    print((np.amax(color)))\n\n\n\n    for a, b in ab:\n\n        if a == parent[b]:\n\n            print((color[b]))\n\n        else:\n\n            print((color[a]))\n\n            \n\nif __name__ == '__main__':\n\n    main()","target":"import sys\n\nfrom collections import deque\n\n\n\ndef main():\n\n    n = int(sys.stdin.readline().rstrip())\n\n    ab = list(map(int, sys.stdin.read().split()))\n\n    ab = list(zip(ab, ab))\n\n\n\n    G = [[] for _ in range(n + 1)]\n\n    for a, b in ab:\n\n        G[a].append(b)\n\n        G[b].append(a)\n\n    \n\n    q = deque([1]) # root = 1\n\n    parent = [None] * (n + 1)\n\n    color = [0] * (n + 1) # color of the edge(parent[y], y)\n\n\n\n    while q:\n\n        x = q.popleft()\n\n        ng = color[x]\n\n        c = 1\n\n        for y in G[x]:\n\n            if y == parent[x]:\n\n                continue\n\n            parent[y] = x\n\n            if c == ng:\n\n                c += 1\n\n            color[y] = c\n\n            q.append(y)\n\n            c += 1\n\n            \n\n    print((max(color)))\n\n\n\n    for a, b in ab:\n\n        if a == parent[b]:\n\n            print((color[b]))\n\n        else:\n\n            print((color[a]))\n\n\n\nif __name__ == '__main__':\n\n    main()","code_v0_loc":41,"code_v1_loc":41,"code_v0_num_chars":980,"code_v1_num_chars":920,"code_v0_no_empty_lines":"import sys\nfrom collections import deque\nimport numpy as np\n\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    ab = np.array(sys.stdin.read().split(), dtype=np.int64).reshape(-1, 2)\n    G = [[] for _ in range(n + 1)]\n    for a, b in ab:\n        G[a].append(b)\n        G[b].append(a)\n    parent = np.zeros(n + 1, dtype=np.int64)\n    color = np.zeros(n + 1, dtype=np.int64)  # color of the edge(parent[y], y)\n    q = deque([1])  # root = 1\n    while q:\n        x = q.popleft()\n        ng = color[x]\n        c = 1\n        for y in G[x]:\n            if y == parent[x]:\n                continue\n            parent[y] = x\n            if c == ng:\n                c += 1\n            color[y] = c\n            q.append(y)\n            c += 1\n    print((np.amax(color)))\n    for a, b in ab:\n        if a == parent[b]:\n            print((color[b]))\n        else:\n            print((color[a]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\nfrom collections import deque\n\n\ndef main():\n    n = int(sys.stdin.readline().rstrip())\n    ab = list(map(int, sys.stdin.read().split()))\n    ab = list(zip(ab, ab))\n    G = [[] for _ in range(n + 1)]\n    for a, b in ab:\n        G[a].append(b)\n        G[b].append(a)\n    q = deque([1])  # root = 1\n    parent = [None] * (n + 1)\n    color = [0] * (n + 1)  # color of the edge(parent[y], y)\n    while q:\n        x = q.popleft()\n        ng = color[x]\n        c = 1\n        for y in G[x]:\n            if y == parent[x]:\n                continue\n            parent[y] = x\n            if c == ng:\n                c += 1\n            color[y] = c\n            q.append(y)\n            c += 1\n    print((max(color)))\n    for a, b in ab:\n        if a == parent[b]:\n            print((color[b]))\n        else:\n            print((color[a]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-import numpy as np","-    ab = np.array(sys.stdin.read().split(), dtype=np.int64).reshape(-1, 2)","+    ab = list(map(int, sys.stdin.read().split()))","+    ab = list(zip(ab, ab))","-    parent = np.zeros(n + 1, dtype=np.int64)","-    color = np.zeros(n + 1, dtype=np.int64)  # color of the edge(parent[y], y)","+    parent = [None] * (n + 1)","+    color = [0] * (n + 1)  # color of the edge(parent[y], y)","-    print((np.amax(color)))","+    print((max(color)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3834958427,"measured_runtime_v1":0.2106900873,"runtime_lift":6.5664970775,"key":["s960505941","s699117089"]}
{"user_id":"u133936772","problem_id":"p02685","language":"python","submission_id_v0":"s693454638","submission_id_v1":"s088786085","cpu_time_v0":1252,"cpu_time_v1":782,"memory_v0":9184,"memory_v1":9192,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":37.54,"input":"M=998244353\n\nn,m,k=list(map(int,input().split()))\n\na=0\n\nc=1\n\nfor i in range(k+1):\n\n  a+=c*m*pow(m-1,n-i-1,M)\n\n  c=c*(n-i-1)*pow(i+1,M-2,M)%M\n\nprint((a%M))","target":"M=998244353\n\nn,m,k=list(map(int,input().split()))\n\na,c=0,1\n\nfor i in range(k+1):\n\n  a+=c*m*pow(m-1,n+~i,M)\n\n  c=c*(n+~i)*pow(i+1,-1,M)%M\n\nprint((a%M))","code_v0_loc":8,"code_v1_loc":7,"code_v0_num_chars":146,"code_v1_num_chars":142,"code_v0_no_empty_lines":"M = 998244353\nn, m, k = list(map(int, input().split()))\na = 0\nc = 1\nfor i in range(k + 1):\n    a += c * m * pow(m - 1, n - i - 1, M)\n    c = c * (n - i - 1) * pow(i + 1, M - 2, M) % M\nprint((a % M))\n","code_v1_no_empty_lines":"M = 998244353\nn, m, k = list(map(int, input().split()))\na, c = 0, 1\nfor i in range(k + 1):\n    a += c * m * pow(m - 1, n + ~i, M)\n    c = c * (n + ~i) * pow(i + 1, -1, M) % M\nprint((a % M))\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-a = 0","-c = 1","+a, c = 0, 1","-    a += c * m * pow(m - 1, n - i - 1, M)","-    c = c * (n - i - 1) * pow(i + 1, M - 2, M) % M","+    a += c * m * pow(m - 1, n + ~i, M)","+    c = c * (n + ~i) * pow(i + 1, -1, M) % M"],"diff_only_import_comment":false,"measured_runtime_v0":0.5053028598,"measured_runtime_v1":0.3381624324,"runtime_lift":1.4942607792,"key":["s693454638","s088786085"]}
{"user_id":"u038408819","problem_id":"p03680","language":"python","submission_id_v0":"s808331415","submission_id_v1":"s267927939","cpu_time_v0":450,"cpu_time_v1":202,"memory_v0":7084,"memory_v1":7084,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":55.11,"input":"N = int(eval(input()))\n\na = [int(eval(input())) for _ in range(N)]\n\n\n\ncnt, i = 0, 0\n\nfor j in range(10 ** 6):\n\n    cnt += 1\n\n    if a[i] == 2:\n\n        print(cnt)\n\n        #break\n\n        quit()\n\n    else:\n\n        i = a[i] - 1\n\nprint((-1))","target":"N = int(eval(input()))\n\na = [int(eval(input())) for _ in range(N)]\n\n\n\ncnt, i = 0, 0\n\nfor j in range(len(a)):\n\n    cnt += 1\n\n    if a[i] == 2:\n\n        print(cnt)\n\n        #break\n\n        quit()\n\n    else:\n\n        i = a[i] - 1\n\nprint((-1))","code_v0_loc":13,"code_v1_loc":13,"code_v0_num_chars":226,"code_v1_num_chars":225,"code_v0_no_empty_lines":"N = int(eval(input()))\na = [int(eval(input())) for _ in range(N)]\ncnt, i = 0, 0\nfor j in range(10**6):\n    cnt += 1\n    if a[i] == 2:\n        print(cnt)\n        # break\n        quit()\n    else:\n        i = a[i] - 1\nprint((-1))\n","code_v1_no_empty_lines":"N = int(eval(input()))\na = [int(eval(input())) for _ in range(N)]\ncnt, i = 0, 0\nfor j in range(len(a)):\n    cnt += 1\n    if a[i] == 2:\n        print(cnt)\n        # break\n        quit()\n    else:\n        i = a[i] - 1\nprint((-1))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-for j in range(10**6):","+for j in range(len(a)):"],"diff_only_import_comment":false,"measured_runtime_v0":0.6719723573,"measured_runtime_v1":0.1459480231,"runtime_lift":4.6041895124,"key":["s808331415","s267927939"]}
{"user_id":"u581511366","problem_id":"p02555","language":"python","submission_id_v0":"s399411060","submission_id_v1":"s856192378","cpu_time_v0":183,"cpu_time_v1":64,"memory_v0":72444,"memory_v1":63820,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":65.03,"input":"import math\n\n\n\n\n\ndef combinations_count(n, r):\n\n    return math.factorial(n) \/\/ (math.factorial(n - r) * math.factorial(r))\n\n\n\n\n\ndef combinations_with_replacement_count(n, r):\n\n    return combinations_count(n + r - 1, r)\n\n\n\n\n\ndef main():\n\n    s = int(eval(input()))\n\n    ans = 0\n\n    n = s \/\/ 3\n\n\n\n    for i in range(1, n + 1):\n\n        ans += combinations_with_replacement_count(i, 3*(n-i)+s % 3)\n\n\n\n    print((ans % (10**9 + 7)))\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"def main():\n\n    s = int(eval(input()))\n\n    dp = [0] * 3 + [1] * 3 + [0 for _ in range(s)]\n\n\n\n    for i in range(6, s+1):\n\n        dp[i] = dp[i-1] + dp[i-3]\n\n\n\n    print((dp[s] % (10**9+7)))\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":24,"code_v1_loc":12,"code_v0_num_chars":468,"code_v1_num_chars":228,"code_v0_no_empty_lines":"import math\n\n\ndef combinations_count(n, r):\n    return math.factorial(n) \/\/ (math.factorial(n - r) * math.factorial(r))\n\n\ndef combinations_with_replacement_count(n, r):\n    return combinations_count(n + r - 1, r)\n\n\ndef main():\n    s = int(eval(input()))\n    ans = 0\n    n = s \/\/ 3\n    for i in range(1, n + 1):\n        ans += combinations_with_replacement_count(i, 3 * (n - i) + s % 3)\n    print((ans % (10**9 + 7)))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def main():\n    s = int(eval(input()))\n    dp = [0] * 3 + [1] * 3 + [0 for _ in range(s)]\n    for i in range(6, s + 1):\n        dp[i] = dp[i - 1] + dp[i - 3]\n    print((dp[s] % (10**9 + 7)))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-import math","-","-","-def combinations_count(n, r):","-    return math.factorial(n) \/\/ (math.factorial(n - r) * math.factorial(r))","-","-","-def combinations_with_replacement_count(n, r):","-    return combinations_count(n + r - 1, r)","-","-","-    ans = 0","-    n = s \/\/ 3","-    for i in range(1, n + 1):","-        ans += combinations_with_replacement_count(i, 3 * (n - i) + s % 3)","-    print((ans % (10**9 + 7)))","+    dp = [0] * 3 + [1] * 3 + [0 for _ in range(s)]","+    for i in range(6, s + 1):","+        dp[i] = dp[i - 1] + dp[i - 3]","+    print((dp[s] % (10**9 + 7)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2865847409,"measured_runtime_v1":0.2083418293,"runtime_lift":1.3755506603,"key":["s399411060","s856192378"]}
{"user_id":"u001024152","problem_id":"p03806","language":"python","submission_id_v0":"s636298531","submission_id_v1":"s857325561","cpu_time_v0":1682,"cpu_time_v1":292,"memory_v0":59496,"memory_v1":48860,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":82.64,"input":"G_MAX = 40*10\n\nN_MAX = 40\n\nINF = float('inf')\n\n\n\ndp = [[[INF]*(G_MAX+1) for _ in range(G_MAX+1)] \n\n      for _ in range(N_MAX+1)]\n\nN,Ma,Mb = list(map(int, input().split()))\n\na,b,c = [],[],[]\n\nfor _ in range(N):\n\n    ai,bi,ci = list(map(int, input().split()))\n\n    a.append(ai)\n\n    b.append(bi)\n\n    c.append(ci)\n\n\n\ndp[0][0][0] = 0\n\nfrom math import isinf\n\nfor i in range(N):\n\n    for ca in range(G_MAX+1):\n\n        for cb in range(G_MAX+1):\n\n            if isinf(dp[i][ca][cb]): continue\n\n            dp[i+1][ca][cb] = min(dp[i+1][ca][cb],\n\n                                 dp[i][ca][cb])\n\n            dp[i+1][ca+a[i]][cb+b[i]] = min(dp[i+1][ca+a[i]][cb+b[i]],\n\n                                           dp[i][ca][cb]+c[i])\n\n            \n\n    \n\nans = INF\n\nfor ca in range(1,G_MAX+1):\n\n    for cb in range(1,G_MAX+1):\n\n        if ca*Mb==cb*Ma:\n\n            ans = min(ans, dp[N][ca][cb])\n\n            \n\nif isinf(ans): ans = -1\n\nprint(ans)","target":"from math import isinf\n\n\n\nN, Ma, Mb = list(map(int, input().split()))\n\na = [0]*N\n\nb = [0]*N\n\nc = [0]*N\n\nfor i in range(N):\n\n    a[i],b[i],c[i] = list(map(int, input().split()))\n\n\n\nW_MAX = 40*10\n\ndp = [[float('inf')]*(W_MAX+1) for _ in range(W_MAX+1)]\n\ndp[0][0] = 0\n\n\n\nfor i in range(N):\n\n    for wa in reversed(list(range(W_MAX+1))):\n\n        for wb in reversed(list(range(W_MAX+1))):\n\n            if isinf(dp[wa][wb]): continue\n\n            if wa+a[i]<=W_MAX and wb+b[i]<=W_MAX:\n\n                dp[wa+a[i]][wb+b[i]] = min(dp[wa+a[i]][wb+b[i]],\n\n                                           dp[wa][wb]+c[i])\n\n\n\nans = float('inf')\n\nfor wa in range(1, W_MAX+1):\n\n    for wb in range(1, W_MAX+1):\n\n        if wa*Mb == wb*Ma:\n\n            ans = min(ans, dp[wa][wb])\n\n\n\nif isinf(ans): ans = -1\n\nprint(ans)","code_v0_loc":34,"code_v1_loc":29,"code_v0_num_chars":926,"code_v1_num_chars":775,"code_v0_no_empty_lines":"G_MAX = 40 * 10\nN_MAX = 40\nINF = float(\"inf\")\ndp = [[[INF] * (G_MAX + 1) for _ in range(G_MAX + 1)] for _ in range(N_MAX + 1)]\nN, Ma, Mb = list(map(int, input().split()))\na, b, c = [], [], []\nfor _ in range(N):\n    ai, bi, ci = list(map(int, input().split()))\n    a.append(ai)\n    b.append(bi)\n    c.append(ci)\ndp[0][0][0] = 0\nfrom math import isinf\n\nfor i in range(N):\n    for ca in range(G_MAX + 1):\n        for cb in range(G_MAX + 1):\n            if isinf(dp[i][ca][cb]):\n                continue\n            dp[i + 1][ca][cb] = min(dp[i + 1][ca][cb], dp[i][ca][cb])\n            dp[i + 1][ca + a[i]][cb + b[i]] = min(\n                dp[i + 1][ca + a[i]][cb + b[i]], dp[i][ca][cb] + c[i]\n            )\nans = INF\nfor ca in range(1, G_MAX + 1):\n    for cb in range(1, G_MAX + 1):\n        if ca * Mb == cb * Ma:\n            ans = min(ans, dp[N][ca][cb])\nif isinf(ans):\n    ans = -1\nprint(ans)\n","code_v1_no_empty_lines":"from math import isinf\n\nN, Ma, Mb = list(map(int, input().split()))\na = [0] * N\nb = [0] * N\nc = [0] * N\nfor i in range(N):\n    a[i], b[i], c[i] = list(map(int, input().split()))\nW_MAX = 40 * 10\ndp = [[float(\"inf\")] * (W_MAX + 1) for _ in range(W_MAX + 1)]\ndp[0][0] = 0\nfor i in range(N):\n    for wa in reversed(list(range(W_MAX + 1))):\n        for wb in reversed(list(range(W_MAX + 1))):\n            if isinf(dp[wa][wb]):\n                continue\n            if wa + a[i] <= W_MAX and wb + b[i] <= W_MAX:\n                dp[wa + a[i]][wb + b[i]] = min(\n                    dp[wa + a[i]][wb + b[i]], dp[wa][wb] + c[i]\n                )\nans = float(\"inf\")\nfor wa in range(1, W_MAX + 1):\n    for wb in range(1, W_MAX + 1):\n        if wa * Mb == wb * Ma:\n            ans = min(ans, dp[wa][wb])\nif isinf(ans):\n    ans = -1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":14.7058823529,"diff":["-G_MAX = 40 * 10","-N_MAX = 40","-INF = float(\"inf\")","-dp = [[[INF] * (G_MAX + 1) for _ in range(G_MAX + 1)] for _ in range(N_MAX + 1)]","-N, Ma, Mb = list(map(int, input().split()))","-a, b, c = [], [], []","-for _ in range(N):","-    ai, bi, ci = list(map(int, input().split()))","-    a.append(ai)","-    b.append(bi)","-    c.append(ci)","-dp[0][0][0] = 0","+N, Ma, Mb = list(map(int, input().split()))","+a = [0] * N","+b = [0] * N","+c = [0] * N","-    for ca in range(G_MAX + 1):","-        for cb in range(G_MAX + 1):","-            if isinf(dp[i][ca][cb]):","+    a[i], b[i], c[i] = list(map(int, input().split()))","+W_MAX = 40 * 10","+dp = [[float(\"inf\")] * (W_MAX + 1) for _ in range(W_MAX + 1)]","+dp[0][0] = 0","+for i in range(N):","+    for wa in reversed(list(range(W_MAX + 1))):","+        for wb in reversed(list(range(W_MAX + 1))):","+            if isinf(dp[wa][wb]):","-            dp[i + 1][ca][cb] = min(dp[i + 1][ca][cb], dp[i][ca][cb])","-            dp[i + 1][ca + a[i]][cb + b[i]] = min(","-                dp[i + 1][ca + a[i]][cb + b[i]], dp[i][ca][cb] + c[i]","-            )","-ans = INF","-for ca in range(1, G_MAX + 1):","-    for cb in range(1, G_MAX + 1):","-        if ca * Mb == cb * Ma:","-            ans = min(ans, dp[N][ca][cb])","+            if wa + a[i] <= W_MAX and wb + b[i] <= W_MAX:","+                dp[wa + a[i]][wb + b[i]] = min(","+                    dp[wa + a[i]][wb + b[i]], dp[wa][wb] + c[i]","+                )","+ans = float(\"inf\")","+for wa in range(1, W_MAX + 1):","+    for wb in range(1, W_MAX + 1):","+        if wa * Mb == wb * Ma:","+            ans = min(ans, dp[wa][wb])"],"diff_only_import_comment":false,"measured_runtime_v0":2.4082550259,"measured_runtime_v1":0.8679478877,"runtime_lift":2.7746539396,"key":["s636298531","s857325561"]}
{"user_id":"u170183831","problem_id":"p03568","language":"python","submission_id_v0":"s971455595","submission_id_v1":"s272804435","cpu_time_v0":148,"cpu_time_v1":29,"memory_v0":9116,"memory_v1":9072,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":80.41,"input":"from itertools import product\n\n\n\nn = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n\n\ncount = 0\n\nfor C in product((-1, 0, 1), repeat=n):\n\n  total = 1\n\n  for a, c in zip(A, C):\n\n    total *= (a + c)\n\n  if total % 2 == 0:\n\n    count += 1\n\nprint(count)","target":"n = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n\n\ncount = 1\n\nfor a in A:\n\n  count *= 2 if a % 2 == 0 else 1\n\nprint((3 ** n - count))","code_v0_loc":13,"code_v1_loc":7,"code_v0_num_chars":253,"code_v1_num_chars":137,"code_v0_no_empty_lines":"from itertools import product\n\nn = int(eval(input()))\nA = list(map(int, input().split()))\ncount = 0\nfor C in product((-1, 0, 1), repeat=n):\n    total = 1\n    for a, c in zip(A, C):\n        total *= a + c\n    if total % 2 == 0:\n        count += 1\nprint(count)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nA = list(map(int, input().split()))\ncount = 1\nfor a in A:\n    count *= 2 if a % 2 == 0 else 1\nprint((3**n - count))\n","code_same":false,"relative_loc_diff_percent":46.1538461538,"diff":["-from itertools import product","-","-count = 0","-for C in product((-1, 0, 1), repeat=n):","-    total = 1","-    for a, c in zip(A, C):","-        total *= a + c","-    if total % 2 == 0:","-        count += 1","-print(count)","+count = 1","+for a in A:","+    count *= 2 if a % 2 == 0 else 1","+print((3**n - count))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2956474931,"measured_runtime_v1":0.0067464924,"runtime_lift":43.8224007049,"key":["s971455595","s272804435"]}
{"user_id":"u655663334","problem_id":"p02690","language":"python","submission_id_v0":"s658520982","submission_id_v1":"s071725046","cpu_time_v0":70,"cpu_time_v1":60,"memory_v0":65588,"memory_v1":63880,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.29,"input":"X = int(eval(input()))\n\n\n\ngojyous = []\n\n\n\nfor i in range(-200, 201):\n\n    gojyous.append(i ** 5)\n\n\n\n#print(gojyous)\n\n\n\nfor i in range(-200,201):\n\n    for j in range(-200,201):\n\n        if(X == (int(i**5) - int(j**5))):\n\n            print((i, j))\n\n            exit()","target":"import sys\n\n\n\nX= int(eval(input()))\n\n\n\n#\u6dfb\u5b57\u306e\u6700\u5927\u5024\u3092\u7b97\u51fa\n\n\n\na = 1\n\nb = 0\n\ndif = 0\n\nwhile dif < 10**9:\n\n    a += 1\n\n    b += 1\n\n\n\n    dif = a ** 5 - b ** 5\n\n\n\nloop_sequence = a - 1\n\n\n\nfor i in range(-(loop_sequence),loop_sequence):\n\n\tfor j in range(-(loop_sequence),loop_sequence):\n\n\t\tif(X == i ** 5 - j ** 5):\n\n\t\t\tprint((i,j))\n\n\t\t\tsys.exit()\n","code_v0_loc":14,"code_v1_loc":22,"code_v0_num_chars":257,"code_v1_num_chars":327,"code_v0_no_empty_lines":"X = int(eval(input()))\ngojyous = []\nfor i in range(-200, 201):\n    gojyous.append(i**5)\n# print(gojyous)\nfor i in range(-200, 201):\n    for j in range(-200, 201):\n        if X == (int(i**5) - int(j**5)):\n            print((i, j))\n            exit()\n","code_v1_no_empty_lines":"import sys\n\nX = int(eval(input()))\n# \u6dfb\u5b57\u306e\u6700\u5927\u5024\u3092\u7b97\u51fa\na = 1\nb = 0\ndif = 0\nwhile dif < 10**9:\n    a += 1\n    b += 1\n    dif = a**5 - b**5\nloop_sequence = a - 1\nfor i in range(-(loop_sequence), loop_sequence):\n    for j in range(-(loop_sequence), loop_sequence):\n        if X == i**5 - j**5:\n            print((i, j))\n            sys.exit()\n","code_same":false,"relative_loc_diff_percent":36.3636363636,"diff":["+import sys","+","-gojyous = []","-for i in range(-200, 201):","-    gojyous.append(i**5)","-# print(gojyous)","-for i in range(-200, 201):","-    for j in range(-200, 201):","-        if X == (int(i**5) - int(j**5)):","+# \u6dfb\u5b57\u306e\u6700\u5927\u5024\u3092\u7b97\u51fa","+a = 1","+b = 0","+dif = 0","+while dif < 10**9:","+    a += 1","+    b += 1","+    dif = a**5 - b**5","+loop_sequence = a - 1","+for i in range(-(loop_sequence), loop_sequence):","+    for j in range(-(loop_sequence), loop_sequence):","+        if X == i**5 - j**5:","-            exit()","+            sys.exit()"],"diff_only_import_comment":false,"measured_runtime_v0":0.5855294764,"measured_runtime_v1":0.26911816,"runtime_lift":2.175733798,"key":["s658520982","s071725046"]}
{"user_id":"u440566786","problem_id":"p03164","language":"python","submission_id_v0":"s415436180","submission_id_v1":"s201445864","cpu_time_v0":345,"cpu_time_v1":221,"memory_v0":70988,"memory_v1":40176,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":35.94,"input":"import sys\n\nsys.setrecursionlimit(2147483647)\n\nINF=float(\"inf\")\n\nMOD=10**9+7\n\ninput=lambda :sys.stdin.readline().rstrip()\n\ndef resolve():\n\n    n,W=list(map(int,input().split()))\n\n    WV=[tuple(map(int,input().split())) for _ in range(n)]\n\n\n\n    V=100000\n\n    dp=[INF]*(V+1)\n\n    dp[0]=0\n\n\n\n    for w,v in WV:\n\n        for x in range(V,-1,-1):\n\n            if(x+v<=V):\n\n                dp[x+v]=min(dp[x+v],dp[x]+w)\n\n\n\n    for x in range(V,-1,-1):\n\n        if(dp[x]<=W):\n\n            print(x)\n\n            return\n\nresolve()","target":"import sys\n\nINF = 1 << 60\n\nMOD = 10**9 + 7 # 998244353\n\nsys.setrecursionlimit(2147483647)\n\ninput = lambda:sys.stdin.readline().rstrip()\n\ndef resolve():\n\n    n, W = list(map(int, input().split()))\n\n    dp = [INF] * (n * 1001 + 1)\n\n    dp[0] = 0\n\n    for _ in range(n):\n\n        w, v = list(map(int, input().split()))\n\n        for v0 in range(n * 1001, -1, -1):\n\n            if dp[v0] == INF:\n\n                continue\n\n            if v + v0 <= n * 1001:\n\n                dp[v + v0] = min(dp[v + v0], dp[v0] + w)\n\n    for v in range(n * 1001, -1, -1):\n\n        if dp[v] <= W:\n\n            print(v)\n\n            return\n\nresolve()","code_v0_loc":23,"code_v1_loc":21,"code_v0_num_chars":515,"code_v1_num_chars":614,"code_v0_no_empty_lines":"import sys\n\nsys.setrecursionlimit(2147483647)\nINF = float(\"inf\")\nMOD = 10**9 + 7\ninput = lambda: sys.stdin.readline().rstrip()\n\n\ndef resolve():\n    n, W = list(map(int, input().split()))\n    WV = [tuple(map(int, input().split())) for _ in range(n)]\n    V = 100000\n    dp = [INF] * (V + 1)\n    dp[0] = 0\n    for w, v in WV:\n        for x in range(V, -1, -1):\n            if x + v <= V:\n                dp[x + v] = min(dp[x + v], dp[x] + w)\n    for x in range(V, -1, -1):\n        if dp[x] <= W:\n            print(x)\n            return\n\n\nresolve()\n","code_v1_no_empty_lines":"import sys\n\nINF = 1 << 60\nMOD = 10**9 + 7  # 998244353\nsys.setrecursionlimit(2147483647)\ninput = lambda: sys.stdin.readline().rstrip()\n\n\ndef resolve():\n    n, W = list(map(int, input().split()))\n    dp = [INF] * (n * 1001 + 1)\n    dp[0] = 0\n    for _ in range(n):\n        w, v = list(map(int, input().split()))\n        for v0 in range(n * 1001, -1, -1):\n            if dp[v0] == INF:\n                continue\n            if v + v0 <= n * 1001:\n                dp[v + v0] = min(dp[v + v0], dp[v0] + w)\n    for v in range(n * 1001, -1, -1):\n        if dp[v] <= W:\n            print(v)\n            return\n\n\nresolve()\n","code_same":false,"relative_loc_diff_percent":8.6956521739,"diff":["+INF = 1 << 60","+MOD = 10**9 + 7  # 998244353","-INF = float(\"inf\")","-MOD = 10**9 + 7","-    WV = [tuple(map(int, input().split())) for _ in range(n)]","-    V = 100000","-    dp = [INF] * (V + 1)","+    dp = [INF] * (n * 1001 + 1)","-    for w, v in WV:","-        for x in range(V, -1, -1):","-            if x + v <= V:","-                dp[x + v] = min(dp[x + v], dp[x] + w)","-    for x in range(V, -1, -1):","-        if dp[x] <= W:","-            print(x)","+    for _ in range(n):","+        w, v = list(map(int, input().split()))","+        for v0 in range(n * 1001, -1, -1):","+            if dp[v0] == INF:","+                continue","+            if v + v0 <= n * 1001:","+                dp[v + v0] = min(dp[v + v0], dp[v0] + w)","+    for v in range(n * 1001, -1, -1):","+        if dp[v] <= W:","+            print(v)"],"diff_only_import_comment":false,"measured_runtime_v0":1.2692114379,"measured_runtime_v1":0.2021781888,"runtime_lift":6.2776872491,"key":["s415436180","s201445864"]}
{"user_id":"u764956288","problem_id":"p02691","language":"python","submission_id_v0":"s430506044","submission_id_v1":"s372862352","cpu_time_v0":215,"cpu_time_v1":188,"memory_v0":57704,"memory_v1":36612,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":12.56,"input":"from collections import defaultdict\n\n\n\n\n\ndef main():\n\n    _ = int(eval(input()))\n\n    heights = list(map(int, input().split()))\n\n\n\n    \"\"\"\n\n    for j>i, j-i = Ai + Aj\n\n    i + Ai = j -Aj\n\n    \"\"\"\n\n\n\n    L = defaultdict(int)\n\n    R = defaultdict(int)\n\n\n\n    for i, height in enumerate(heights):\n\n        L[i + height] += 1\n\n        R[i - height] += 1\n\n\n\n    total_count = 0\n\n    for x, count_l in list(L.items()):\n\n        if x in R:\n\n            count_r = R[x]\n\n            total_count += count_l * count_r\n\n\n\n    print(total_count)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"from collections import defaultdict\n\n\n\n\n\ndef main():\n\n    N = int(eval(input()))\n\n    heights = list(map(int, input().split()))\n\n\n\n    \"\"\"\n\n    for j>i, j-i = Ai + Aj\n\n    i + Ai = j -Aj\n\n    \"\"\"\n\n\n\n    L = defaultdict(int)\n\n    R = defaultdict(int)\n\n\n\n    for i, height in enumerate(heights):\n\n        if i + height < N:\n\n            L[i + height] += 1\n\n        \n\n        if i - height > 0:\n\n            R[i - height] += 1\n\n\n\n    total_count = 0\n\n    for x, count_l in list(L.items()):\n\n        if x in R:\n\n            count_r = R[x]\n\n            total_count += count_l * count_r\n\n\n\n    print(total_count)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":30,"code_v1_loc":33,"code_v0_num_chars":565,"code_v1_num_chars":639,"code_v0_no_empty_lines":"from collections import defaultdict\n\n\ndef main():\n    _ = int(eval(input()))\n    heights = list(map(int, input().split()))\n    \"\"\"\n    for j>i, j-i = Ai + Aj\n    i + Ai = j -Aj\n    \"\"\"\n    L = defaultdict(int)\n    R = defaultdict(int)\n    for i, height in enumerate(heights):\n        L[i + height] += 1\n        R[i - height] += 1\n    total_count = 0\n    for x, count_l in list(L.items()):\n        if x in R:\n            count_r = R[x]\n            total_count += count_l * count_r\n    print(total_count)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"from collections import defaultdict\n\n\ndef main():\n    N = int(eval(input()))\n    heights = list(map(int, input().split()))\n    \"\"\"\n    for j>i, j-i = Ai + Aj\n    i + Ai = j -Aj\n    \"\"\"\n    L = defaultdict(int)\n    R = defaultdict(int)\n    for i, height in enumerate(heights):\n        if i + height < N:\n            L[i + height] += 1\n        if i - height > 0:\n            R[i - height] += 1\n    total_count = 0\n    for x, count_l in list(L.items()):\n        if x in R:\n            count_r = R[x]\n            total_count += count_l * count_r\n    print(total_count)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":9.0909090909,"diff":["-    _ = int(eval(input()))","+    N = int(eval(input()))","-        L[i + height] += 1","-        R[i - height] += 1","+        if i + height < N:","+            L[i + height] += 1","+        if i - height > 0:","+            R[i - height] += 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.3616042199,"measured_runtime_v1":0.2114392846,"runtime_lift":1.7102035728,"key":["s430506044","s372862352"]}
{"user_id":"u747602774","problem_id":"p03039","language":"python","submission_id_v0":"s387237372","submission_id_v1":"s322645394","cpu_time_v0":230,"cpu_time_v1":47,"memory_v0":9412,"memory_v1":9476,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":79.57,"input":"import sys\n\nreadline = sys.stdin.readline\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\n#mod = 998244353\n\nINF = 10**18\n\neps = 10**-7\n\n\n\nm,n,k = list(map(int,readline().split()))\n\n\n\ndef comb(n, r, mod):\n\n    r = min(r, n-r)\n\n    mol = 1\n\n    deno = 1\n\n    for i in range(1, r+1):\n\n        mol = mol * (n-r+i) % mod\n\n        deno = deno * i % mod\n\n    ret = mol * pow(deno, mod-2, mod) % mod\n\n    return ret\n\n\n\ndef f1(x,y,a,b):\n\n    return (a+b-x-y)*(a-x+1)*(b-y+1)\/\/2\n\n\n\ndef f2(x,a):\n\n    return (a-x)*(a-x+1)\/\/2\n\n\n\nans = 0\n\n\n\nfor x in range(1,n+1):\n\n    for y in range(1,m+1):\n\n        a = n-x+1\n\n        b = m-y+1\n\n        c = m*(a*(a-1)+x*(x-1))\n\n        d = n*(b*(b-1)+y*(y-1))\n\n        ans += (c+d)\/\/2\n\n        ans %= mod\n\n\n\nans = (ans * comb(m*n-2,k-2,mod))%mod\n\nans = ans*pow(2,mod-2,mod)%mod\n\n\n\nprint(ans)\n\n\n","target":"import sys\n\nreadline = sys.stdin.readline\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\n#mod = 998244353\n\nINF = 10**18\n\neps = 10**-7\n\n\n\nm,n,k = list(map(int,readline().split()))\n\n\n\ndef comb(n, r, mod):\n\n    r = min(r, n-r)\n\n    mol = 1\n\n    deno = 1\n\n    for i in range(1, r+1):\n\n        mol = mol * (n-r+i) % mod\n\n        deno = deno * i % mod\n\n    ret = mol * pow(deno, mod-2, mod) % mod\n\n    return ret\n\n\n\nans = m*n*(m+n)*(m*n-1)\/\/3\n\n\n\nans = (ans * comb(m*n-2,k-2,mod))%mod\n\nans = ans*pow(2,mod-2,mod)%mod\n\n\n\nprint(ans)\n\n\n","code_v0_loc":42,"code_v1_loc":27,"code_v0_num_chars":809,"code_v1_num_chars":519,"code_v0_no_empty_lines":"import sys\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nmod = 10**9 + 7\n# mod = 998244353\nINF = 10**18\neps = 10**-7\nm, n, k = list(map(int, readline().split()))\n\n\ndef comb(n, r, mod):\n    r = min(r, n - r)\n    mol = 1\n    deno = 1\n    for i in range(1, r + 1):\n        mol = mol * (n - r + i) % mod\n        deno = deno * i % mod\n    ret = mol * pow(deno, mod - 2, mod) % mod\n    return ret\n\n\ndef f1(x, y, a, b):\n    return (a + b - x - y) * (a - x + 1) * (b - y + 1) \/\/ 2\n\n\ndef f2(x, a):\n    return (a - x) * (a - x + 1) \/\/ 2\n\n\nans = 0\nfor x in range(1, n + 1):\n    for y in range(1, m + 1):\n        a = n - x + 1\n        b = m - y + 1\n        c = m * (a * (a - 1) + x * (x - 1))\n        d = n * (b * (b - 1) + y * (y - 1))\n        ans += (c + d) \/\/ 2\n        ans %= mod\nans = (ans * comb(m * n - 2, k - 2, mod)) % mod\nans = ans * pow(2, mod - 2, mod) % mod\nprint(ans)\n","code_v1_no_empty_lines":"import sys\n\nreadline = sys.stdin.readline\nsys.setrecursionlimit(10**8)\nmod = 10**9 + 7\n# mod = 998244353\nINF = 10**18\neps = 10**-7\nm, n, k = list(map(int, readline().split()))\n\n\ndef comb(n, r, mod):\n    r = min(r, n - r)\n    mol = 1\n    deno = 1\n    for i in range(1, r + 1):\n        mol = mol * (n - r + i) % mod\n        deno = deno * i % mod\n    ret = mol * pow(deno, mod - 2, mod) % mod\n    return ret\n\n\nans = m * n * (m + n) * (m * n - 1) \/\/ 3\nans = (ans * comb(m * n - 2, k - 2, mod)) % mod\nans = ans * pow(2, mod - 2, mod) % mod\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":35.7142857143,"diff":["-def f1(x, y, a, b):","-    return (a + b - x - y) * (a - x + 1) * (b - y + 1) \/\/ 2","-","-","-def f2(x, a):","-    return (a - x) * (a - x + 1) \/\/ 2","-","-","-ans = 0","-for x in range(1, n + 1):","-    for y in range(1, m + 1):","-        a = n - x + 1","-        b = m - y + 1","-        c = m * (a * (a - 1) + x * (x - 1))","-        d = n * (b * (b - 1) + y * (y - 1))","-        ans += (c + d) \/\/ 2","-        ans %= mod","+ans = m * n * (m + n) * (m * n - 1) \/\/ 3"],"diff_only_import_comment":false,"measured_runtime_v0":0.3618569455,"measured_runtime_v1":0.2781652772,"runtime_lift":1.3008702923,"key":["s387237372","s322645394"]}
{"user_id":"u800396927","problem_id":"p03253","language":"python","submission_id_v0":"s723979708","submission_id_v1":"s327831897","cpu_time_v0":110,"cpu_time_v1":67,"memory_v0":10868,"memory_v1":66752,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":39.09,"input":"N,M = list(map(int,input().split()))\n\ndiv =[]\n\nfor i in range(2,int(M**(1\/2))+2):\n\n    cur = 0\n\n    while M%i==0:\n\n        M = M\/\/i\n\n        cur += 1\n\n    if cur >=1:\n\n        div.append(cur)\n\nif M>1: div.append(1)\n\ndiv.sort()\n\nmod = 10**9+7\n\nfrac = [1]*(N+50)\n\nnum = len(frac)\n\nfor i in range(len(frac)-1):\n\n    frac[i+1] = frac[i]*(i+1)%mod\n\nfinv = [1] * (N+50)\n\nfinv[-1] = pow(frac[-1], mod-2, mod)\n\nfor i in range(1, num):\n\n  finv[num-1-i] = finv[num-i] * (num-i) % mod\n\nans = 1\n\nfor i in div:\n\n    ans = ans * frac[N+i-1]*finv[N-1]*finv[i]%mod\n\nprint(ans)","target":"N,M = list(map(int,input().split()))\n\ndiv = []\n\nfor i in range(2,int(M**(1\/2))+2):\n\n    cur = 0\n\n    while M%i==0:\n\n        M\/\/=i\n\n        cur += 1\n\n    if cur >=1:\n\n        div.append(cur)\n\nif M>1:div.append(1)\n\ndiv.sort()\n\nmod = 10**9+7\n\nfrac = [1]*(N+50)\n\nnum=len(frac)\n\nfor i in range(num-1):\n\n    frac[i+1] = frac[i]*(i+1)%mod\n\nfinv = [1]*(N+50)\n\nfinv[-1] = pow(frac[-1],mod-2,mod)\n\nans = 1\n\nfor i in range(1,num):\n\n    finv[num-1-i] = finv[num-i]*(num-i)%mod\n\nfor i in div:\n\n    ans  =ans*frac[N+i-1]*finv[N-1]*finv[i]%mod\n\nprint(ans)","code_v0_loc":24,"code_v1_loc":24,"code_v0_num_chars":554,"code_v1_num_chars":534,"code_v0_no_empty_lines":"N, M = list(map(int, input().split()))\ndiv = []\nfor i in range(2, int(M ** (1 \/ 2)) + 2):\n    cur = 0\n    while M % i == 0:\n        M = M \/\/ i\n        cur += 1\n    if cur >= 1:\n        div.append(cur)\nif M > 1:\n    div.append(1)\ndiv.sort()\nmod = 10**9 + 7\nfrac = [1] * (N + 50)\nnum = len(frac)\nfor i in range(len(frac) - 1):\n    frac[i + 1] = frac[i] * (i + 1) % mod\nfinv = [1] * (N + 50)\nfinv[-1] = pow(frac[-1], mod - 2, mod)\nfor i in range(1, num):\n    finv[num - 1 - i] = finv[num - i] * (num - i) % mod\nans = 1\nfor i in div:\n    ans = ans * frac[N + i - 1] * finv[N - 1] * finv[i] % mod\nprint(ans)\n","code_v1_no_empty_lines":"N, M = list(map(int, input().split()))\ndiv = []\nfor i in range(2, int(M ** (1 \/ 2)) + 2):\n    cur = 0\n    while M % i == 0:\n        M \/\/= i\n        cur += 1\n    if cur >= 1:\n        div.append(cur)\nif M > 1:\n    div.append(1)\ndiv.sort()\nmod = 10**9 + 7\nfrac = [1] * (N + 50)\nnum = len(frac)\nfor i in range(num - 1):\n    frac[i + 1] = frac[i] * (i + 1) % mod\nfinv = [1] * (N + 50)\nfinv[-1] = pow(frac[-1], mod - 2, mod)\nans = 1\nfor i in range(1, num):\n    finv[num - 1 - i] = finv[num - i] * (num - i) % mod\nfor i in div:\n    ans = ans * frac[N + i - 1] * finv[N - 1] * finv[i] % mod\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-        M = M \/\/ i","+        M \/\/= i","-for i in range(len(frac) - 1):","+for i in range(num - 1):","+ans = 1","-ans = 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.47082161,"measured_runtime_v1":0.3749034932,"runtime_lift":1.2558474875,"key":["s723979708","s327831897"]}
{"user_id":"u290563917","problem_id":"p03371","language":"python","submission_id_v0":"s511736682","submission_id_v1":"s377839923","cpu_time_v0":188,"cpu_time_v1":64,"memory_v0":40940,"memory_v1":65396,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":65.96,"input":"a, b, c, x, y = list(map(int, input().split()))\n\n# print(a, b, c, x, y)\n\n\n\nans = 10000 * (10 **5) + 7\n\nc_max = 0\n\nif x > y:\n\n  c_max = x * 2\n\nelse:\n\n  c_max = y * 2\n\n\n\nfor cc in range(c_max+1):\n\n  ac = x - (cc \/\/ 2)\n\n  bc = y - (cc \/\/ 2)\n\n  \n\n  if ac < 0:\n\n    ac = 0\n\n  if bc < 0:\n\n    bc = 0\n\n  price = ac * a + bc * b + cc * c\n\n  # print('price: {}, ac: {}, bc: {}, cc: {}'.format(price, ac, bc, cc))\n\n  ans = min(ans, price)\n\n\n\nprint(ans)","target":"a, b, c, x, y = list(map(int, input().split()))\n\n# print(a, b, c, x, y)\n\n\n\nans = 10000 * (10 **5) + 7\n\nc_max = 0\n\nif x > y:\n\n  c_max = x * 2\n\nelse:\n\n  c_max = y * 2\n\n\n\nfor cc in range(0, c_max+1, 2):\n\n  ac = x - (cc \/\/ 2)\n\n  bc = y - (cc \/\/ 2)\n\n  \n\n  if ac < 0:\n\n    ac = 0\n\n  if bc < 0:\n\n    bc = 0\n\n  price = ac * a + bc * b + cc * c\n\n  # print('price: {}, ac: {}, bc: {}, cc: {}'.format(price, ac, bc, cc))\n\n  ans = min(ans, price)\n\n\n\nprint(ans)\n\n  ","code_v0_loc":23,"code_v1_loc":24,"code_v0_num_chars":436,"code_v1_num_chars":446,"code_v0_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\n# print(a, b, c, x, y)\nans = 10000 * (10**5) + 7\nc_max = 0\nif x > y:\n    c_max = x * 2\nelse:\n    c_max = y * 2\nfor cc in range(c_max + 1):\n    ac = x - (cc \/\/ 2)\n    bc = y - (cc \/\/ 2)\n    if ac < 0:\n        ac = 0\n    if bc < 0:\n        bc = 0\n    price = ac * a + bc * b + cc * c\n    # print('price: {}, ac: {}, bc: {}, cc: {}'.format(price, ac, bc, cc))\n    ans = min(ans, price)\nprint(ans)\n","code_v1_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\n# print(a, b, c, x, y)\nans = 10000 * (10**5) + 7\nc_max = 0\nif x > y:\n    c_max = x * 2\nelse:\n    c_max = y * 2\nfor cc in range(0, c_max + 1, 2):\n    ac = x - (cc \/\/ 2)\n    bc = y - (cc \/\/ 2)\n    if ac < 0:\n        ac = 0\n    if bc < 0:\n        bc = 0\n    price = ac * a + bc * b + cc * c\n    # print('price: {}, ac: {}, bc: {}, cc: {}'.format(price, ac, bc, cc))\n    ans = min(ans, price)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":4.1666666667,"diff":["-for cc in range(c_max + 1):","+for cc in range(0, c_max + 1, 2):"],"diff_only_import_comment":false,"measured_runtime_v0":0.4004499781,"measured_runtime_v1":0.3093135242,"runtime_lift":1.2946410251,"key":["s511736682","s377839923"]}
{"user_id":"u887207211","problem_id":"p03425","language":"python","submission_id_v0":"s819679830","submission_id_v1":"s546088432","cpu_time_v0":172,"cpu_time_v1":153,"memory_v0":3064,"memory_v1":9752,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.05,"input":"N = int(eval(input()))\n\nname = {'M':0, 'A':0, 'R':0, 'C':0, 'H':0}\n\nmarch = \"MARCH\"\n\nfor _ in range(N):\n\n  S = eval(input())\n\n  if(S[0] in name):\n\n    name[S[0]] += 1\n\nans = 0\n\nfor i in range(3):\n\n  for j in range(i+1,4):\n\n    for k in range(j+1,5):\n\n      ans += name[march[i]] * name[march[j]] * name[march[k]]\n\nprint(ans)","target":"N = int(eval(input()))\n\nS = [eval(input()) for _ in range(N)]\n\n\n\nhead = {'M':0, 'A':0, 'R':0, 'C':0, 'H':0}\n\nmarch = \"MARCH\"\n\nfor s in S:\n\n  if(s[0] in head):\n\n    head[s[0]] += 1\n\nans = 0\n\nfor i in range(3):\n\n  for j in range(i+1,4):\n\n    for k in range(j+1,5):\n\n      ans += head[march[i]] * head[march[j]] * head[march[k]]\n\nprint(ans)","code_v0_loc":13,"code_v1_loc":14,"code_v0_num_chars":312,"code_v1_num_chars":325,"code_v0_no_empty_lines":"N = int(eval(input()))\nname = {\"M\": 0, \"A\": 0, \"R\": 0, \"C\": 0, \"H\": 0}\nmarch = \"MARCH\"\nfor _ in range(N):\n    S = eval(input())\n    if S[0] in name:\n        name[S[0]] += 1\nans = 0\nfor i in range(3):\n    for j in range(i + 1, 4):\n        for k in range(j + 1, 5):\n            ans += name[march[i]] * name[march[j]] * name[march[k]]\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nS = [eval(input()) for _ in range(N)]\nhead = {\"M\": 0, \"A\": 0, \"R\": 0, \"C\": 0, \"H\": 0}\nmarch = \"MARCH\"\nfor s in S:\n    if s[0] in head:\n        head[s[0]] += 1\nans = 0\nfor i in range(3):\n    for j in range(i + 1, 4):\n        for k in range(j + 1, 5):\n            ans += head[march[i]] * head[march[j]] * head[march[k]]\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":7.1428571429,"diff":["-name = {\"M\": 0, \"A\": 0, \"R\": 0, \"C\": 0, \"H\": 0}","+S = [eval(input()) for _ in range(N)]","+head = {\"M\": 0, \"A\": 0, \"R\": 0, \"C\": 0, \"H\": 0}","-for _ in range(N):","-    S = eval(input())","-    if S[0] in name:","-        name[S[0]] += 1","+for s in S:","+    if s[0] in head:","+        head[s[0]] += 1","-            ans += name[march[i]] * name[march[j]] * name[march[k]]","+            ans += head[march[i]] * head[march[j]] * head[march[k]]"],"diff_only_import_comment":false,"measured_runtime_v0":0.4009393435,"measured_runtime_v1":0.3106073449,"runtime_lift":1.2908237686,"key":["s819679830","s546088432"]}
{"user_id":"u023958502","problem_id":"p02899","language":"python","submission_id_v0":"s601919152","submission_id_v1":"s937084523","cpu_time_v0":140,"cpu_time_v1":86,"memory_v0":19300,"memory_v1":15588,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":38.57,"input":"n = int(eval(input()))\n\na = list(map(int,input().split()))\n\nans = [i for i in range(n)]\n\na1 = sorted(a)\n\nfor i in range(n):\n\n    num = a[i]\n\n    ans[num - 1] = str(i + 1)\n\n    \n\nprint((' '.join(ans)))","target":"n = int(eval(input()))\n\n# n,k = map(int,input().split())\n\na = list(map(int,input().split()))\n\nans = [0 for _ in range(n)]\n\nfor i in range(n):\n\n  ans[a[i] - 1] = str(i + 1)\n\nprint((\" \".join(ans)))","code_v0_loc":9,"code_v1_loc":7,"code_v0_num_chars":192,"code_v1_num_chars":187,"code_v0_no_empty_lines":"n = int(eval(input()))\na = list(map(int, input().split()))\nans = [i for i in range(n)]\na1 = sorted(a)\nfor i in range(n):\n    num = a[i]\n    ans[num - 1] = str(i + 1)\nprint((\" \".join(ans)))\n","code_v1_no_empty_lines":"n = int(eval(input()))\n# n,k = map(int,input().split())\na = list(map(int, input().split()))\nans = [0 for _ in range(n)]\nfor i in range(n):\n    ans[a[i] - 1] = str(i + 1)\nprint((\" \".join(ans)))\n","code_same":false,"relative_loc_diff_percent":22.2222222222,"diff":["+# n,k = map(int,input().split())","-ans = [i for i in range(n)]","-a1 = sorted(a)","+ans = [0 for _ in range(n)]","-    num = a[i]","-    ans[num - 1] = str(i + 1)","+    ans[a[i] - 1] = str(i + 1)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2984062884,"measured_runtime_v1":0.2260574257,"runtime_lift":1.3200463887,"key":["s601919152","s937084523"]}
{"user_id":"u981931040","problem_id":"p02574","language":"python","submission_id_v0":"s619395499","submission_id_v1":"s155750651","cpu_time_v0":1188,"cpu_time_v1":436,"memory_v0":126768,"memory_v1":188012,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":63.3,"input":"class prime_factorize_by_osa_k():\n\n    def __init__(self, max_val):\n\n        '''\n\n        \u5272\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u6700\u5c0f\u306e\u5024\u3092\u683c\u7d0d\u3057\u305f\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n\n        :param max_val:\n\n        :return:\n\n        '''\n\n        self.minFactor = [-1] * (max_val + 1)\n\n        for i in range(2, max_val + 1):\n\n            if self.minFactor[i] == -1:\n\n                self.minFactor[i] = i\n\n                # \u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\u3068\u540c\u69d8\u306e\u51e6\u7406\u3092\u884c\u3046\n\n                for j in range(i * i, max_val + 1, i):\n\n                    if self.minFactor[j] == -1:\n\n                        self.minFactor[j] = i\n\n\n\n    def osa_k(self, n):\n\n        '''\n\n        preprocess\u3092\u3057\u305f\u3042\u3068\u3001O(logN)\u3067\u7d20\u56e0\u6570\u5206\u89e3\u3092\u884c\u3046\u3002n\u306e\u6700\u5927\u5024\u3092n_max\u3068\u3059\u308b\u3002\n\n        :param n:\n\n        :return:\n\n        '''\n\n        from collections import defaultdict\n\n        d = defaultdict(int)\n\n        now = n\n\n        while now > 1:\n\n            d[self.minFactor[now]] += 1\n\n            now \/\/= self.minFactor[now]\n\n        return d\n\ndef gcd(a, b):\n\n    while b: a, b = b, a % b\n\n    return a\n\n\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n# N = 10 ** 6\n\n# A = [10 ** 6] * N\n\nob = prime_factorize_by_osa_k(10 ** 6)\n\npairwise = False\n\nprime_key = set(ob.osa_k(A[-1]).keys())\n\nbreak_flag = False\n\nprime_flags = [False] * (10 ** 6 + 1)\n\nfor i in range(N):\n\n    for key in list(ob.osa_k(A[i]).keys()):\n\n        if prime_flags[key]:\n\n            break_flag = True\n\n            break\n\n        else:\n\n            prime_flags[key] = True\n\n    if break_flag:\n\n        break\n\nelse:\n\n    pairwise = True\n\nif pairwise:\n\n    print('pairwise coprime')\n\n    exit()\n\nwork = gcd(A[0], A[1])\n\nfor i in range(2, N):\n\n    work = gcd(work, A[i])\n\nif work != 1:\n\n    print('not coprime')\n\nelse:\n\n    print('setwise coprime')","target":"def gcd(a, b):\n\n    while b: a, b = b, a % b\n\n    return a\n\ndef isPrimeMR(n):\n\n    d = n - 1\n\n    d = d \/\/ (d & -d)\n\n    L = [2]\n\n    for a in L:\n\n        t = d\n\n        y = pow(a, t, n)\n\n        if y == 1: continue\n\n        while y != n - 1:\n\n            y = (y * y) % n\n\n            if y == 1 or t == n - 1: return 0\n\n            t <<= 1\n\n    return 1\n\ndef findFactorRho(n):\n\n    m = 1 << n.bit_length() \/\/ 8\n\n    for c in range(1, 99):\n\n        f = lambda x: (x * x + c) % n\n\n        y, r, q, g = 2, 1, 1, 1\n\n        while g == 1:\n\n            x = y\n\n            for i in range(r):\n\n                y = f(y)\n\n            k = 0\n\n            while k < r and g == 1:\n\n                ys = y\n\n                for i in range(min(m, r - k)):\n\n                    y = f(y)\n\n                    q = q * abs(x - y) % n\n\n                g = gcd(q, n)\n\n                k += m\n\n            r <<= 1\n\n        if g == n:\n\n            g = 1\n\n            while g == 1:\n\n                ys = f(ys)\n\n                g = gcd(abs(x - ys), n)\n\n        if g < n:\n\n            if isPrimeMR(g): return g\n\n            elif isPrimeMR(n \/\/ g): return n \/\/ g\n\n            return findFactorRho(g)\n\ndef primeFactor(n):\n\n    i = 2\n\n    ret = {}\n\n    rhoFlg = 0\n\n    while i*i <= n:\n\n        k = 0\n\n        while n % i == 0:\n\n            n \/\/= i\n\n            k += 1\n\n        if k: ret[i] = k\n\n        i += 1 + i % 2\n\n        if i == 101 and n >= 2 ** 20:\n\n            while n > 1:\n\n                if isPrimeMR(n):\n\n                    ret[n], n = 1, 1\n\n                else:\n\n                    rhoFlg = 1\n\n                    j = findFactorRho(n)\n\n                    k = 0\n\n                    while n % j == 0:\n\n                        n \/\/= j\n\n                        k += 1\n\n                    ret[j] = k\n\n\n\n    if n > 1: ret[n] = 1\n\n    if rhoFlg: ret = {x: ret[x] for x in sorted(ret)}\n\n    return ret\n\ndef gcd(a, b):\n\n    while b: a, b = b, a % b\n\n    return a\n\n\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n# N = 10 ** 6\n\n# A = [10 ** 6] * N\n\npairwise = False\n\nprime_key = set(primeFactor(A[-1]).keys())\n\nbreak_flag = False\n\nprime_flags = [False] * (10 ** 6 + 1)\n\nfor i in range(N):\n\n    for key in list(primeFactor(A[i]).keys()):\n\n        if prime_flags[key]:\n\n            break_flag = True\n\n            break\n\n        else:\n\n            prime_flags[key] = True\n\n    if break_flag:\n\n        break\n\nelse:\n\n    pairwise = True\n\nif pairwise:\n\n    print('pairwise coprime')\n\n    exit()\n\nwork = gcd(A[0], A[1])\n\nfor i in range(2, N):\n\n    work = gcd(work, A[i])\n\nif work != 1:\n\n    print('not coprime')\n\nelse:\n\n    print('setwise coprime')","code_v0_loc":63,"code_v1_loc":103,"code_v0_num_chars":1666,"code_v1_num_chars":2622,"code_v0_no_empty_lines":"class prime_factorize_by_osa_k:\n    def __init__(self, max_val):\n        \"\"\"\n        \u5272\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u6700\u5c0f\u306e\u5024\u3092\u683c\u7d0d\u3057\u305f\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\n        :param max_val:\n        :return:\n        \"\"\"\n        self.minFactor = [-1] * (max_val + 1)\n        for i in range(2, max_val + 1):\n            if self.minFactor[i] == -1:\n                self.minFactor[i] = i\n                # \u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\u3068\u540c\u69d8\u306e\u51e6\u7406\u3092\u884c\u3046\n                for j in range(i * i, max_val + 1, i):\n                    if self.minFactor[j] == -1:\n                        self.minFactor[j] = i\n\n    def osa_k(self, n):\n        \"\"\"\n        preprocess\u3092\u3057\u305f\u3042\u3068\u3001O(logN)\u3067\u7d20\u56e0\u6570\u5206\u89e3\u3092\u884c\u3046\u3002n\u306e\u6700\u5927\u5024\u3092n_max\u3068\u3059\u308b\u3002\n        :param n:\n        :return:\n        \"\"\"\n        from collections import defaultdict\n\n        d = defaultdict(int)\n        now = n\n        while now > 1:\n            d[self.minFactor[now]] += 1\n            now \/\/= self.minFactor[now]\n        return d\n\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\nN = int(eval(input()))\nA = list(map(int, input().split()))\n# N = 10 ** 6\n# A = [10 ** 6] * N\nob = prime_factorize_by_osa_k(10**6)\npairwise = False\nprime_key = set(ob.osa_k(A[-1]).keys())\nbreak_flag = False\nprime_flags = [False] * (10**6 + 1)\nfor i in range(N):\n    for key in list(ob.osa_k(A[i]).keys()):\n        if prime_flags[key]:\n            break_flag = True\n            break\n        else:\n            prime_flags[key] = True\n    if break_flag:\n        break\nelse:\n    pairwise = True\nif pairwise:\n    print(\"pairwise coprime\")\n    exit()\nwork = gcd(A[0], A[1])\nfor i in range(2, N):\n    work = gcd(work, A[i])\nif work != 1:\n    print(\"not coprime\")\nelse:\n    print(\"setwise coprime\")\n","code_v1_no_empty_lines":"def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef isPrimeMR(n):\n    d = n - 1\n    d = d \/\/ (d & -d)\n    L = [2]\n    for a in L:\n        t = d\n        y = pow(a, t, n)\n        if y == 1:\n            continue\n        while y != n - 1:\n            y = (y * y) % n\n            if y == 1 or t == n - 1:\n                return 0\n            t <<= 1\n    return 1\n\n\ndef findFactorRho(n):\n    m = 1 << n.bit_length() \/\/ 8\n    for c in range(1, 99):\n        f = lambda x: (x * x + c) % n\n        y, r, q, g = 2, 1, 1, 1\n        while g == 1:\n            x = y\n            for i in range(r):\n                y = f(y)\n            k = 0\n            while k < r and g == 1:\n                ys = y\n                for i in range(min(m, r - k)):\n                    y = f(y)\n                    q = q * abs(x - y) % n\n                g = gcd(q, n)\n                k += m\n            r <<= 1\n        if g == n:\n            g = 1\n            while g == 1:\n                ys = f(ys)\n                g = gcd(abs(x - ys), n)\n        if g < n:\n            if isPrimeMR(g):\n                return g\n            elif isPrimeMR(n \/\/ g):\n                return n \/\/ g\n            return findFactorRho(g)\n\n\ndef primeFactor(n):\n    i = 2\n    ret = {}\n    rhoFlg = 0\n    while i * i <= n:\n        k = 0\n        while n % i == 0:\n            n \/\/= i\n            k += 1\n        if k:\n            ret[i] = k\n        i += 1 + i % 2\n        if i == 101 and n >= 2**20:\n            while n > 1:\n                if isPrimeMR(n):\n                    ret[n], n = 1, 1\n                else:\n                    rhoFlg = 1\n                    j = findFactorRho(n)\n                    k = 0\n                    while n % j == 0:\n                        n \/\/= j\n                        k += 1\n                    ret[j] = k\n    if n > 1:\n        ret[n] = 1\n    if rhoFlg:\n        ret = {x: ret[x] for x in sorted(ret)}\n    return ret\n\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\n\nN = int(eval(input()))\nA = list(map(int, input().split()))\n# N = 10 ** 6\n# A = [10 ** 6] * N\npairwise = False\nprime_key = set(primeFactor(A[-1]).keys())\nbreak_flag = False\nprime_flags = [False] * (10**6 + 1)\nfor i in range(N):\n    for key in list(primeFactor(A[i]).keys()):\n        if prime_flags[key]:\n            break_flag = True\n            break\n        else:\n            prime_flags[key] = True\n    if break_flag:\n        break\nelse:\n    pairwise = True\nif pairwise:\n    print(\"pairwise coprime\")\n    exit()\nwork = gcd(A[0], A[1])\nfor i in range(2, N):\n    work = gcd(work, A[i])\nif work != 1:\n    print(\"not coprime\")\nelse:\n    print(\"setwise coprime\")\n","code_same":false,"relative_loc_diff_percent":38.8349514563,"diff":["-class prime_factorize_by_osa_k:","-    def __init__(self, max_val):","-        \"\"\"","-        \u5272\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u6700\u5c0f\u306e\u5024\u3092\u683c\u7d0d\u3057\u305f\u30ea\u30b9\u30c8\u3092\u8fd4\u3059","-        :param max_val:","-        :return:","-        \"\"\"","-        self.minFactor = [-1] * (max_val + 1)","-        for i in range(2, max_val + 1):","-            if self.minFactor[i] == -1:","-                self.minFactor[i] = i","-                # \u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\u3068\u540c\u69d8\u306e\u51e6\u7406\u3092\u884c\u3046","-                for j in range(i * i, max_val + 1, i):","-                    if self.minFactor[j] == -1:","-                        self.minFactor[j] = i","+def gcd(a, b):","+    while b:","+        a, b = b, a % b","+    return a","-    def osa_k(self, n):","-        \"\"\"","-        preprocess\u3092\u3057\u305f\u3042\u3068\u3001O(logN)\u3067\u7d20\u56e0\u6570\u5206\u89e3\u3092\u884c\u3046\u3002n\u306e\u6700\u5927\u5024\u3092n_max\u3068\u3059\u308b\u3002","-        :param n:","-        :return:","-        \"\"\"","-        from collections import defaultdict","-        d = defaultdict(int)","-        now = n","-        while now > 1:","-            d[self.minFactor[now]] += 1","-            now \/\/= self.minFactor[now]","-        return d","+def isPrimeMR(n):","+    d = n - 1","+    d = d \/\/ (d & -d)","+    L = [2]","+    for a in L:","+        t = d","+        y = pow(a, t, n)","+        if y == 1:","+            continue","+        while y != n - 1:","+            y = (y * y) % n","+            if y == 1 or t == n - 1:","+                return 0","+            t <<= 1","+    return 1","+","+","+def findFactorRho(n):","+    m = 1 << n.bit_length() \/\/ 8","+    for c in range(1, 99):","+        f = lambda x: (x * x + c) % n","+        y, r, q, g = 2, 1, 1, 1","+        while g == 1:","+            x = y","+            for i in range(r):","+                y = f(y)","+            k = 0","+            while k < r and g == 1:","+                ys = y","+                for i in range(min(m, r - k)):","+                    y = f(y)","+                    q = q * abs(x - y) % n","+                g = gcd(q, n)","+                k += m","+            r <<= 1","+        if g == n:","+            g = 1","+            while g == 1:","+                ys = f(ys)","+                g = gcd(abs(x - ys), n)","+        if g < n:","+            if isPrimeMR(g):","+                return g","+            elif isPrimeMR(n \/\/ g):","+                return n \/\/ g","+            return findFactorRho(g)","+","+","+def primeFactor(n):","+    i = 2","+    ret = {}","+    rhoFlg = 0","+    while i * i <= n:","+        k = 0","+        while n % i == 0:","+            n \/\/= i","+            k += 1","+        if k:","+            ret[i] = k","+        i += 1 + i % 2","+        if i == 101 and n >= 2**20:","+            while n > 1:","+                if isPrimeMR(n):","+                    ret[n], n = 1, 1","+                else:","+                    rhoFlg = 1","+                    j = findFactorRho(n)","+                    k = 0","+                    while n % j == 0:","+                        n \/\/= j","+                        k += 1","+                    ret[j] = k","+    if n > 1:","+        ret[n] = 1","+    if rhoFlg:","+        ret = {x: ret[x] for x in sorted(ret)}","+    return ret","-ob = prime_factorize_by_osa_k(10**6)","-prime_key = set(ob.osa_k(A[-1]).keys())","+prime_key = set(primeFactor(A[-1]).keys())","-    for key in list(ob.osa_k(A[i]).keys()):","+    for key in list(primeFactor(A[i]).keys()):"],"diff_only_import_comment":false,"measured_runtime_v0":3.7835959957,"measured_runtime_v1":0.3455400517,"runtime_lift":10.9498044495,"key":["s619395499","s155750651"]}
{"user_id":"u600402037","problem_id":"p03074","language":"python","submission_id_v0":"s931234571","submission_id_v1":"s204237470","cpu_time_v0":1852,"cpu_time_v1":78,"memory_v0":16724,"memory_v1":7924,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":95.79,"input":"import numpy as np\n\n\n\nN, K = list(map(int, input().split()))\n\nS = list(eval(input())) + ['2']\n\n\n\nblocks = []\n\ncur = 1\n\nseq = 0\n\nfor s in S:\n\n    if int(s) == cur:\n\n        seq += 1\n\n    else:\n\n        blocks.append(seq)\n\n        cur = 1 - cur\n\n        seq = 1\n\nanswer = 0\n\nblocks = np.array(blocks)\n\nfor i in range(0, len(blocks), 2):\n\n    answer = max(answer, blocks[i:i+2*K+1].sum())\n\nprint(answer)\n","target":"# coding: utf-8\n\nimport sys\n\nimport itertools\n\n\n\nsr = lambda: sys.stdin.readline().rstrip()\n\nir = lambda: int(sr())\n\nlr = lambda: list(map(int, sr().split()))\n\n\n\n# 0\u304b1\u306e\u9023\u7d9a\u3057\u3066\u3044\u308b\u4eba\u6570\u306e\u30ea\u30b9\u30c8\u3001\u7d2f\u7a4d\u548c\n\nstreak = [0, 0]\n\nN, K = lr()\n\nS = sr() + '2'\n\ncur = 1\n\nfor i in range(N):\n\n    if S[i] != S[i+1]:\n\n        streak.append(cur)\n\n        cur = 1\n\n    else:\n\n        cur += 1\n\n\n\nstreak_cum = list(itertools.accumulate(streak))\n\nstreak_cum.extend([streak_cum[-1], streak_cum[-1]])\n\nif S[0] == '0':\n\n    start = 0\n\nelse:\n\n    start = 1\n\nanswer = 0\n\n\n\nlimit = len(streak_cum) - 1\n\nfor i in range(start, len(streak_cum), 2):\n\n    result = streak_cum[min(limit, i+2*K+1)] - streak_cum[i]\n\n    if result > answer:\n\n        answer = result\n\n\n\nprint(answer)\n\n# 52","code_v0_loc":20,"code_v1_loc":36,"code_v0_num_chars":389,"code_v1_num_chars":737,"code_v0_no_empty_lines":"import numpy as np\n\nN, K = list(map(int, input().split()))\nS = list(eval(input())) + [\"2\"]\nblocks = []\ncur = 1\nseq = 0\nfor s in S:\n    if int(s) == cur:\n        seq += 1\n    else:\n        blocks.append(seq)\n        cur = 1 - cur\n        seq = 1\nanswer = 0\nblocks = np.array(blocks)\nfor i in range(0, len(blocks), 2):\n    answer = max(answer, blocks[i : i + 2 * K + 1].sum())\nprint(answer)\n","code_v1_no_empty_lines":"# coding: utf-8\nimport sys\nimport itertools\n\nsr = lambda: sys.stdin.readline().rstrip()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n# 0\u304b1\u306e\u9023\u7d9a\u3057\u3066\u3044\u308b\u4eba\u6570\u306e\u30ea\u30b9\u30c8\u3001\u7d2f\u7a4d\u548c\nstreak = [0, 0]\nN, K = lr()\nS = sr() + \"2\"\ncur = 1\nfor i in range(N):\n    if S[i] != S[i + 1]:\n        streak.append(cur)\n        cur = 1\n    else:\n        cur += 1\nstreak_cum = list(itertools.accumulate(streak))\nstreak_cum.extend([streak_cum[-1], streak_cum[-1]])\nif S[0] == \"0\":\n    start = 0\nelse:\n    start = 1\nanswer = 0\nlimit = len(streak_cum) - 1\nfor i in range(start, len(streak_cum), 2):\n    result = streak_cum[min(limit, i + 2 * K + 1)] - streak_cum[i]\n    if result > answer:\n        answer = result\nprint(answer)\n# 52\n","code_same":false,"relative_loc_diff_percent":44.4444444444,"diff":["-import numpy as np","+# coding: utf-8","+import sys","+import itertools","-N, K = list(map(int, input().split()))","-S = list(eval(input())) + [\"2\"]","-blocks = []","+sr = lambda: sys.stdin.readline().rstrip()","+ir = lambda: int(sr())","+lr = lambda: list(map(int, sr().split()))","+# 0\u304b1\u306e\u9023\u7d9a\u3057\u3066\u3044\u308b\u4eba\u6570\u306e\u30ea\u30b9\u30c8\u3001\u7d2f\u7a4d\u548c","+streak = [0, 0]","+N, K = lr()","+S = sr() + \"2\"","-seq = 0","-for s in S:","-    if int(s) == cur:","-        seq += 1","+for i in range(N):","+    if S[i] != S[i + 1]:","+        streak.append(cur)","+        cur = 1","-        blocks.append(seq)","-        cur = 1 - cur","-        seq = 1","+        cur += 1","+streak_cum = list(itertools.accumulate(streak))","+streak_cum.extend([streak_cum[-1], streak_cum[-1]])","+if S[0] == \"0\":","+    start = 0","+else:","+    start = 1","-blocks = np.array(blocks)","-for i in range(0, len(blocks), 2):","-    answer = max(answer, blocks[i : i + 2 * K + 1].sum())","+limit = len(streak_cum) - 1","+for i in range(start, len(streak_cum), 2):","+    result = streak_cum[min(limit, i + 2 * K + 1)] - streak_cum[i]","+    if result > answer:","+        answer = result","+# 52"],"diff_only_import_comment":false,"measured_runtime_v0":1.9750818772,"measured_runtime_v1":0.2859025445,"runtime_lift":6.9082346945,"key":["s931234571","s204237470"]}
{"user_id":"u315485238","problem_id":"p03945","language":"python","submission_id_v0":"s413240170","submission_id_v1":"s770974666","cpu_time_v0":334,"cpu_time_v1":28,"memory_v0":22828,"memory_v1":3956,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":91.62,"input":"import numpy as np\n\n\n\nS=eval(input())\n\nS=np.array([1 if s=='B' else 0 for s in S])\n\n\n\nprint((np.abs(np.diff(S)).sum()))\n","target":"from itertools import groupby\n\n\n\nS=eval(input())\n\nanswer = sum([1 for _ in groupby(S)]) -1\n\n\n\nprint(answer)","code_v0_loc":6,"code_v1_loc":6,"code_v0_num_chars":112,"code_v1_num_chars":101,"code_v0_no_empty_lines":"import numpy as np\n\nS = eval(input())\nS = np.array([1 if s == \"B\" else 0 for s in S])\nprint((np.abs(np.diff(S)).sum()))\n","code_v1_no_empty_lines":"from itertools import groupby\n\nS = eval(input())\nanswer = sum([1 for _ in groupby(S)]) - 1\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-import numpy as np","+from itertools import groupby","-S = np.array([1 if s == \"B\" else 0 for s in S])","-print((np.abs(np.diff(S)).sum()))","+answer = sum([1 for _ in groupby(S)]) - 1","+print(answer)"],"diff_only_import_comment":false,"measured_runtime_v0":1.3748412957,"measured_runtime_v1":0.214818702,"runtime_lift":6.400007462,"key":["s413240170","s770974666"]}
{"user_id":"u312025627","problem_id":"p02901","language":"python","submission_id_v0":"s827366183","submission_id_v1":"s086626630","cpu_time_v0":364,"cpu_time_v1":311,"memory_v0":78552,"memory_v1":75116,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.56,"input":"INF = 2*10**7\n\n\n\n\n\ndef main():\n\n    N, M = (int(i) for i in input().split())\n\n    A = []\n\n    B = []\n\n    C = []\n\n    for _ in range(M):\n\n        a, b = (int(i) for i in input().split())\n\n        A.append(a)\n\n        B.append(b)\n\n        bit = 0\n\n        for i in input().split():\n\n            bit |= (1 << (int(i)-1))\n\n        C.append(bit)\n\n    dp = [[INF]*(1 << N) for _ in range(M+1)]\n\n    dp[0][0] = 0\n\n    for i in range(M):\n\n        for j in range(1 << N):\n\n            dp[i+1][j] = min(dp[i+1][j], dp[i][j])\n\n            if dp[i][j] != INF:\n\n                next_bit = j | C[i]\n\n                dp[i+1][next_bit] = min(dp[i+1][next_bit], dp[i][j] + A[i])\n\n    ans = dp[-1][-1]\n\n    if ans == INF:\n\n        print((-1))\n\n    else:\n\n        print(ans)\n\n    # print(*dp, sep=\"\\n\")\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"INF = 2*10**7\n\n\n\n\n\ndef main():\n\n    import sys\n\n    input = sys.stdin.buffer.readline\n\n    N, M = (int(i) for i in input().split())\n\n    A = []\n\n    B = []\n\n    C = []\n\n    for _ in range(M):\n\n        a, b = (int(i) for i in input().split())\n\n        A.append(a)\n\n        B.append(b)\n\n        bit = 0\n\n        for i in input().split():\n\n            bit |= (1 << (int(i)-1))\n\n        C.append(bit)\n\n    dp = [[INF]*(1 << N) for _ in range(M+1)]\n\n    dp[0][0] = 0\n\n    for i in range(M):\n\n        for j in range(1 << N):\n\n            dp[i+1][j] = min(dp[i+1][j], dp[i][j])\n\n            if dp[i][j] != INF:\n\n                next_bit = j | C[i]\n\n                dp[i+1][next_bit] = min(dp[i+1][next_bit], dp[i][j] + A[i])\n\n    ans = dp[-1][-1]\n\n    if ans == INF:\n\n        print((-1))\n\n    else:\n\n        print(ans)\n\n    # print(*dp, sep=\"\\n\")\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":34,"code_v1_loc":36,"code_v0_num_chars":827,"code_v1_num_chars":882,"code_v0_no_empty_lines":"INF = 2 * 10**7\n\n\ndef main():\n    N, M = (int(i) for i in input().split())\n    A = []\n    B = []\n    C = []\n    for _ in range(M):\n        a, b = (int(i) for i in input().split())\n        A.append(a)\n        B.append(b)\n        bit = 0\n        for i in input().split():\n            bit |= 1 << (int(i) - 1)\n        C.append(bit)\n    dp = [[INF] * (1 << N) for _ in range(M + 1)]\n    dp[0][0] = 0\n    for i in range(M):\n        for j in range(1 << N):\n            dp[i + 1][j] = min(dp[i + 1][j], dp[i][j])\n            if dp[i][j] != INF:\n                next_bit = j | C[i]\n                dp[i + 1][next_bit] = min(dp[i + 1][next_bit], dp[i][j] + A[i])\n    ans = dp[-1][-1]\n    if ans == INF:\n        print((-1))\n    else:\n        print(ans)\n    # print(*dp, sep=\"\\n\")\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"INF = 2 * 10**7\n\n\ndef main():\n    import sys\n\n    input = sys.stdin.buffer.readline\n    N, M = (int(i) for i in input().split())\n    A = []\n    B = []\n    C = []\n    for _ in range(M):\n        a, b = (int(i) for i in input().split())\n        A.append(a)\n        B.append(b)\n        bit = 0\n        for i in input().split():\n            bit |= 1 << (int(i) - 1)\n        C.append(bit)\n    dp = [[INF] * (1 << N) for _ in range(M + 1)]\n    dp[0][0] = 0\n    for i in range(M):\n        for j in range(1 << N):\n            dp[i + 1][j] = min(dp[i + 1][j], dp[i][j])\n            if dp[i][j] != INF:\n                next_bit = j | C[i]\n                dp[i + 1][next_bit] = min(dp[i + 1][next_bit], dp[i][j] + A[i])\n    ans = dp[-1][-1]\n    if ans == INF:\n        print((-1))\n    else:\n        print(ans)\n    # print(*dp, sep=\"\\n\")\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":5.5555555556,"diff":["+    import sys","+","+    input = sys.stdin.buffer.readline"],"diff_only_import_comment":false,"measured_runtime_v0":0.4147989278,"measured_runtime_v1":0.289175185,"runtime_lift":1.4344208955,"key":["s827366183","s086626630"]}
{"user_id":"u025501820","problem_id":"p03575","language":"python","submission_id_v0":"s588340205","submission_id_v1":"s864359385","cpu_time_v0":156,"cpu_time_v1":24,"memory_v0":12108,"memory_v1":3316,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":84.62,"input":"#!\/usr\/bin\/env python3\n\nclass UnionFind():\n\n    def __init__(self, n):\n\n        self.n = n\n\n        self.parents = [-1] * n\n\n\n\n    def find(self, x):\n\n        if self.parents[x] < 0:\n\n            return x\n\n        else:\n\n            self.parents[x] = self.find(self.parents[x])\n\n            return self.parents[x]\n\n\n\n    def union(self, x, y):\n\n        x = self.find(x)\n\n        y = self.find(y)\n\n\n\n        if x == y:\n\n            return\n\n\n\n        if self.parents[x] > self.parents[y]:\n\n            x, y = y, x\n\n\n\n        self.parents[x] += self.parents[y]\n\n        self.parents[y] = x\n\n    \n\n\n\n    def same(self, x, y):\n\n        return self.find(x) == self.find(y)\n\n        \n\nimport numpy as np\n\nN, M = list(map(int, input().split()))\n\nedge = []\n\nfor _ in range(M):\n\n    edge.append(list(map(int, input().split())))\n\nans = 0 \n\nfor i in range(M):\n\n    unionfind = UnionFind(N)\n\n    for j in [k for k in range(M) if k != i]:\n\n        a, b = edge[j][0] - 1, edge[j][1] - 1\n\n        unionfind.union(a, b)\n\n    if np.count_nonzero(np.array(unionfind.parents) < 0) >= 2:\n\n        ans += 1\n\nprint(ans)","target":"#!\/usr\/bin\/env python3\n\nfrom collections import deque\n\nN, M = list(map(int, input().split()))\n\nedge = []\n\nfor _ in range(M):\n\n    edge.append(list(map(int, input().split())))\n\nans = 0 \n\nfor i in range(M):\n\n    done = [True for _ in range(N + 1)]\n\n    renketu = [[] for _ in range(N + 1)]\n\n    for j in [k for k in range(M) if k != i]:\n\n        a, b = edge[j][0], edge[j][1]\n\n        renketu[a].append(b)\n\n        renketu[b].append(a)\n\n    q = deque([1])\n\n    while q:\n\n        now = q.pop()\n\n        done[now] = False\n\n\n\n        for r in renketu[now]:\n\n            if done[r]:\n\n                q.append(r)\n\n    if sum(done) > 1:\n\n        ans += 1\n\nprint(ans)","code_v0_loc":44,"code_v1_loc":25,"code_v0_num_chars":1090,"code_v1_num_chars":652,"code_v0_no_empty_lines":"#!\/usr\/bin\/env python3\nclass UnionFind:\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n\nimport numpy as np\n\nN, M = list(map(int, input().split()))\nedge = []\nfor _ in range(M):\n    edge.append(list(map(int, input().split())))\nans = 0\nfor i in range(M):\n    unionfind = UnionFind(N)\n    for j in [k for k in range(M) if k != i]:\n        a, b = edge[j][0] - 1, edge[j][1] - 1\n        unionfind.union(a, b)\n    if np.count_nonzero(np.array(unionfind.parents) < 0) >= 2:\n        ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"#!\/usr\/bin\/env python3\nfrom collections import deque\n\nN, M = list(map(int, input().split()))\nedge = []\nfor _ in range(M):\n    edge.append(list(map(int, input().split())))\nans = 0\nfor i in range(M):\n    done = [True for _ in range(N + 1)]\n    renketu = [[] for _ in range(N + 1)]\n    for j in [k for k in range(M) if k != i]:\n        a, b = edge[j][0], edge[j][1]\n        renketu[a].append(b)\n        renketu[b].append(a)\n    q = deque([1])\n    while q:\n        now = q.pop()\n        done[now] = False\n        for r in renketu[now]:\n            if done[r]:\n                q.append(r)\n    if sum(done) > 1:\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":43.1818181818,"diff":["-class UnionFind:","-    def __init__(self, n):","-        self.n = n","-        self.parents = [-1] * n","-","-    def find(self, x):","-        if self.parents[x] < 0:","-            return x","-        else:","-            self.parents[x] = self.find(self.parents[x])","-            return self.parents[x]","-","-    def union(self, x, y):","-        x = self.find(x)","-        y = self.find(y)","-        if x == y:","-            return","-        if self.parents[x] > self.parents[y]:","-            x, y = y, x","-        self.parents[x] += self.parents[y]","-        self.parents[y] = x","-","-    def same(self, x, y):","-        return self.find(x) == self.find(y)","-","-","-import numpy as np","+from collections import deque","-    unionfind = UnionFind(N)","+    done = [True for _ in range(N + 1)]","+    renketu = [[] for _ in range(N + 1)]","-        a, b = edge[j][0] - 1, edge[j][1] - 1","-        unionfind.union(a, b)","-    if np.count_nonzero(np.array(unionfind.parents) < 0) >= 2:","+        a, b = edge[j][0], edge[j][1]","+        renketu[a].append(b)","+        renketu[b].append(a)","+    q = deque([1])","+    while q:","+        now = q.pop()","+        done[now] = False","+        for r in renketu[now]:","+            if done[r]:","+                q.append(r)","+    if sum(done) > 1:"],"diff_only_import_comment":false,"measured_runtime_v0":1.8508614221,"measured_runtime_v1":0.3169867847,"runtime_lift":5.8389229815,"key":["s588340205","s864359385"]}
{"user_id":"u123942276","problem_id":"p03494","language":"python","submission_id_v0":"s417323905","submission_id_v1":"s556297736","cpu_time_v0":112,"cpu_time_v1":29,"memory_v0":26812,"memory_v1":9020,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":74.11,"input":"import numpy as np\n\nN = int(eval(input()))\n\nA = np.array(list(map(int, input().split())))\n\ncount = 0\n\nwhile True:\n\n    if np.sum(A%2) > 0:\n\n        break\n\n    count +=1\n\n    A = A\/\/2\n\nprint(count)\n","target":"n = int(eval(input()))\n\na = list(map(int, input().split()))\n\n\n\nans = float(\"inf\")\n\n\n\nfor i in a:\n\n    ans = min(ans, len(bin(i)) - bin(i).rfind(\"1\") - 1) # (1)\u20262\u3067\u5272\u3063\u305f\u56de\u6570\u304c\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u7d22\n\nprint(ans)","code_v0_loc":10,"code_v1_loc":8,"code_v0_num_chars":191,"code_v1_num_chars":182,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nA = np.array(list(map(int, input().split())))\ncount = 0\nwhile True:\n    if np.sum(A % 2) > 0:\n        break\n    count += 1\n    A = A \/\/ 2\nprint(count)\n","code_v1_no_empty_lines":"n = int(eval(input()))\na = list(map(int, input().split()))\nans = float(\"inf\")\nfor i in a:\n    ans = min(ans, len(bin(i)) - bin(i).rfind(\"1\") - 1)  # (1)\u20262\u3067\u5272\u3063\u305f\u56de\u6570\u304c\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u7d22\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["-import numpy as np","-","-N = int(eval(input()))","-A = np.array(list(map(int, input().split())))","-count = 0","-while True:","-    if np.sum(A % 2) > 0:","-        break","-    count += 1","-    A = A \/\/ 2","-print(count)","+n = int(eval(input()))","+a = list(map(int, input().split()))","+ans = float(\"inf\")","+for i in a:","+    ans = min(ans, len(bin(i)) - bin(i).rfind(\"1\") - 1)  # (1)\u20262\u3067\u5272\u3063\u305f\u56de\u6570\u304c\u6700\u5c0f\u306e\u3082\u306e\u3092\u63a2\u7d22","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.3099729173,"measured_runtime_v1":0.2131767328,"runtime_lift":6.1450088862,"key":["s417323905","s556297736"]}
{"user_id":"u427344224","problem_id":"p03253","language":"python","submission_id_v0":"s043094515","submission_id_v1":"s952701444","cpu_time_v0":1290,"cpu_time_v1":20,"memory_v0":5164,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":98.45,"input":"def prime_factorize(num):\n\n    \"\"\"\n\n    This function performs prime factorization on the input natural number.\n\n    The result is returned in the form of a dictionary with the prime number as the key\n\n    and its number as the value.\n\n    :param num:\n\n    :return prime_factor: Dictionary with the prime number as the key and its number as the value.\n\n    \"\"\"\n\n    prime_factor = {}\n\n    i = 2\n\n    while i ** 2 <= num:\n\n        while num % i == 0:\n\n            num \/\/= i\n\n            if i in list(prime_factor.keys()):\n\n                prime_factor[i] += 1\n\n            else:\n\n                prime_factor[i] = 1\n\n        i += 1\n\n    if num > 1:\n\n        prime_factor[num] = 1\n\n    return prime_factor\n\n\n\n\n\nfrom math import factorial\n\n\n\n\n\ndef comb(n, r, R):\n\n    if n not in R:\n\n        a = factorial(n)\n\n        R[n] = a\n\n    else:\n\n        a = R[n]\n\n\n\n    if n - r not in R:\n\n        b = factorial(n - r)\n\n        R[n - r] = b\n\n    else:\n\n        b = R[n - r]\n\n\n\n    if r not in R:\n\n        c = factorial(r)\n\n        R[r] = c\n\n    else:\n\n        c = R[r]\n\n    return a \/\/ (b * c)\n\n\n\n\n\nn, m = list(map(int, input().split()))\n\nr = 1\n\n\n\nR = dict()\n\nprime_fac = prime_factorize(m)\n\nfor v in list(prime_fac.values()):\n\n    r *= comb(v + n - 1, v, R)\n\nmod = 1000000000 + 7\n\nprint((r % mod))\n","target":"def prime_factorize(num):\n\n    \"\"\"\n\n    This function performs prime factorization on the input natural number.\n\n    The result is returned in the form of a dictionary with the prime number as the key\n\n    and its number as the value.\n\n    :param num:\n\n    :return prime_factor: Dictionary with the prime number as the key and its number as the value.\n\n    \"\"\"\n\n    prime_factor = {}\n\n    i = 2\n\n    while i ** 2 <= num:\n\n        while num % i == 0:\n\n            num \/\/= i\n\n            if i in list(prime_factor.keys()):\n\n                prime_factor[i] += 1\n\n            else:\n\n                prime_factor[i] = 1\n\n        i += 1\n\n    if num > 1:\n\n        prime_factor[num] = 1\n\n    return prime_factor\n\n\n\n\n\n\n\ndef combination(n, r):\n\n    r = min(n-r, r)\n\n    result = 1\n\n    for i in range(n, n-r, -1):\n\n        result *= i\n\n    for i in range(1, r+1):\n\n        result \/\/= i\n\n    return result\n\n\n\n\n\nn, m = list(map(int, input().split()))\n\nr = 1\n\n\n\nprime_fac = prime_factorize(m)\n\nfor v in list(prime_fac.values()):\n\n    r *= combination(v + n - 1, v)\n\nmod = 1000000000 + 7\n\nprint((r % mod))\n","code_v0_loc":56,"code_v1_loc":42,"code_v0_num_chars":1269,"code_v1_num_chars":1072,"code_v0_no_empty_lines":"def prime_factorize(num):\n    \"\"\"\n    This function performs prime factorization on the input natural number.\n    The result is returned in the form of a dictionary with the prime number as the key\n    and its number as the value.\n    :param num:\n    :return prime_factor: Dictionary with the prime number as the key and its number as the value.\n    \"\"\"\n    prime_factor = {}\n    i = 2\n    while i**2 <= num:\n        while num % i == 0:\n            num \/\/= i\n            if i in list(prime_factor.keys()):\n                prime_factor[i] += 1\n            else:\n                prime_factor[i] = 1\n        i += 1\n    if num > 1:\n        prime_factor[num] = 1\n    return prime_factor\n\n\nfrom math import factorial\n\n\ndef comb(n, r, R):\n    if n not in R:\n        a = factorial(n)\n        R[n] = a\n    else:\n        a = R[n]\n    if n - r not in R:\n        b = factorial(n - r)\n        R[n - r] = b\n    else:\n        b = R[n - r]\n    if r not in R:\n        c = factorial(r)\n        R[r] = c\n    else:\n        c = R[r]\n    return a \/\/ (b * c)\n\n\nn, m = list(map(int, input().split()))\nr = 1\nR = dict()\nprime_fac = prime_factorize(m)\nfor v in list(prime_fac.values()):\n    r *= comb(v + n - 1, v, R)\nmod = 1000000000 + 7\nprint((r % mod))\n","code_v1_no_empty_lines":"def prime_factorize(num):\n    \"\"\"\n    This function performs prime factorization on the input natural number.\n    The result is returned in the form of a dictionary with the prime number as the key\n    and its number as the value.\n    :param num:\n    :return prime_factor: Dictionary with the prime number as the key and its number as the value.\n    \"\"\"\n    prime_factor = {}\n    i = 2\n    while i**2 <= num:\n        while num % i == 0:\n            num \/\/= i\n            if i in list(prime_factor.keys()):\n                prime_factor[i] += 1\n            else:\n                prime_factor[i] = 1\n        i += 1\n    if num > 1:\n        prime_factor[num] = 1\n    return prime_factor\n\n\ndef combination(n, r):\n    r = min(n - r, r)\n    result = 1\n    for i in range(n, n - r, -1):\n        result *= i\n    for i in range(1, r + 1):\n        result \/\/= i\n    return result\n\n\nn, m = list(map(int, input().split()))\nr = 1\nprime_fac = prime_factorize(m)\nfor v in list(prime_fac.values()):\n    r *= combination(v + n - 1, v)\nmod = 1000000000 + 7\nprint((r % mod))\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-from math import factorial","-","-","-def comb(n, r, R):","-    if n not in R:","-        a = factorial(n)","-        R[n] = a","-    else:","-        a = R[n]","-    if n - r not in R:","-        b = factorial(n - r)","-        R[n - r] = b","-    else:","-        b = R[n - r]","-    if r not in R:","-        c = factorial(r)","-        R[r] = c","-    else:","-        c = R[r]","-    return a \/\/ (b * c)","+def combination(n, r):","+    r = min(n - r, r)","+    result = 1","+    for i in range(n, n - r, -1):","+        result *= i","+    for i in range(1, r + 1):","+        result \/\/= i","+    return result","-R = dict()","-    r *= comb(v + n - 1, v, R)","+    r *= combination(v + n - 1, v)"],"diff_only_import_comment":false,"measured_runtime_v0":0.4743831277,"measured_runtime_v1":0.1920195122,"runtime_lift":2.4704943903,"key":["s043094515","s952701444"]}
{"user_id":"u768896740","problem_id":"p02951","language":"python","submission_id_v0":"s688063139","submission_id_v1":"s870650241","cpu_time_v0":19,"cpu_time_v1":17,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.53,"input":"a, b, c = list(map(int, input().split()))\n\n\n\nif a < b + c:\n\n    print((b+c-a))\n\nelse:\n\n    print((0))","target":"a,b,c = list(map(int, input().split()))\n\n\n\nprint((max(0, c-(a-b))))","code_v0_loc":6,"code_v1_loc":3,"code_v0_num_chars":91,"code_v1_num_chars":59,"code_v0_no_empty_lines":"a, b, c = list(map(int, input().split()))\nif a < b + c:\n    print((b + c - a))\nelse:\n    print((0))\n","code_v1_no_empty_lines":"a, b, c = list(map(int, input().split()))\nprint((max(0, c - (a - b))))\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-if a < b + c:","-    print((b + c - a))","-else:","-    print((0))","+print((max(0, c - (a - b))))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2555535069,"measured_runtime_v1":0.0829026203,"runtime_lift":3.0825745416,"key":["s688063139","s870650241"]}
{"user_id":"u075012704","problem_id":"p03038","language":"python","submission_id_v0":"s846597544","submission_id_v1":"s758849446","cpu_time_v0":756,"cpu_time_v1":520,"memory_v0":43296,"memory_v1":25512,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":31.22,"input":"from collections import Counter\n\nN, M = list(map(int, input().split()))\n\nA = list(map(int, input().split()))\n\n\n\nX = Counter(A)\n\nfor i in range(M):\n\n    B, C = list(map(int, input().split()))\n\n    X[C] += B\n\n\n\nZ = []\n\nfor key, value in list(X.items()):\n\n    Z.append((key, value))\n\n\n\nZ.sort(key=lambda x: x[0], reverse=True)\n\n\n\nans = 0\n\ncnt = 0\n\n\n\nfor value, key in Z:\n\n    if cnt + key <= N:\n\n        ans += key * value\n\n        cnt += key\n\n    else:\n\n        ans += (N - cnt) * value\n\n        break\n\n\n\nprint(ans)\n","target":"N, M = list(map(int, input().split()))\n\nA = sorted(list(map(int, input().split())))\n\nquery = []\n\nfor i in range(M):\n\n    b, c = list(map(int, input().split()))\n\n    query.append([b, c])\n\nquery.sort(key=lambda q: q[1], reverse=True)\n\n\n\n\n\ni = 0\n\nfor b, c in query:\n\n    while i < N and b > 0:\n\n        if A[i] < c:\n\n            A[i] = c\n\n            b -= 1\n\n        i += 1\n\n\n\nprint((sum(A)))\n","code_v0_loc":27,"code_v1_loc":18,"code_v0_num_chars":496,"code_v1_num_chars":376,"code_v0_no_empty_lines":"from collections import Counter\n\nN, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\nX = Counter(A)\nfor i in range(M):\n    B, C = list(map(int, input().split()))\n    X[C] += B\nZ = []\nfor key, value in list(X.items()):\n    Z.append((key, value))\nZ.sort(key=lambda x: x[0], reverse=True)\nans = 0\ncnt = 0\nfor value, key in Z:\n    if cnt + key <= N:\n        ans += key * value\n        cnt += key\n    else:\n        ans += (N - cnt) * value\n        break\nprint(ans)\n","code_v1_no_empty_lines":"N, M = list(map(int, input().split()))\nA = sorted(list(map(int, input().split())))\nquery = []\nfor i in range(M):\n    b, c = list(map(int, input().split()))\n    query.append([b, c])\nquery.sort(key=lambda q: q[1], reverse=True)\ni = 0\nfor b, c in query:\n    while i < N and b > 0:\n        if A[i] < c:\n            A[i] = c\n            b -= 1\n        i += 1\nprint((sum(A)))\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-from collections import Counter","-","-A = list(map(int, input().split()))","-X = Counter(A)","+A = sorted(list(map(int, input().split())))","+query = []","-    B, C = list(map(int, input().split()))","-    X[C] += B","-Z = []","-for key, value in list(X.items()):","-    Z.append((key, value))","-Z.sort(key=lambda x: x[0], reverse=True)","-ans = 0","-cnt = 0","-for value, key in Z:","-    if cnt + key <= N:","-        ans += key * value","-        cnt += key","-    else:","-        ans += (N - cnt) * value","-        break","-print(ans)","+    b, c = list(map(int, input().split()))","+    query.append([b, c])","+query.sort(key=lambda q: q[1], reverse=True)","+i = 0","+for b, c in query:","+    while i < N and b > 0:","+        if A[i] < c:","+            A[i] = c","+            b -= 1","+        i += 1","+print((sum(A)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.254084451,"measured_runtime_v1":0.0066267376,"runtime_lift":38.3423135365,"key":["s846597544","s758849446"]}
{"user_id":"u576335153","problem_id":"p03723","language":"python","submission_id_v0":"s032726803","submission_id_v1":"s012708150","cpu_time_v0":58,"cpu_time_v1":26,"memory_v0":32492,"memory_v1":9200,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":55.17,"input":"a, b, c = list(map(int, input().split()))\n\n\n\nif any(i % 2 != 0 for i in [a, b, c]):\n\n    print((0))\n\n    exit()\n\n\n\nif a == b and b == c:\n\n    print((-1))\n\n    exit()\n\n\n\ncnt = 0\n\na_list = [0]*(1001001)\n\nb_list = [0]*(1001001)\n\nc_list = [0]*(1001001)\n\na_list[0] = a\n\nb_list[0] = b\n\nc_list[0] = c\n\n\n\nfor i in range(1, 1001001):\n\n    a_list[i] = (b_list[i-1] + c_list[i-1]) \/\/ 2\n\n    b_list[i] = (c_list[i-1] + a_list[i-1]) \/\/ 2\n\n    c_list[i] = (a_list[i-1] + b_list[i-1]) \/\/ 2\n\n    cnt += 1\n\n    if a_list[i] % 2 != 0 or b_list[i] % 2 != 0 or c_list[i] % 2 != 0:\n\n        break\n\n\n\nprint(cnt)\n","target":"def solve(a, b, c):\n\n    if any(i % 2 == 1 for i in [a, b, c]):\n\n        return 0\n\n    if a == b == c:\n\n        return -1\n\n    a, b, c = (b + c) \/\/ 2, (c + a) \/\/ 2, (a + b) \/\/ 2\n\n    return solve(a, b, c) + 1\n\n\n\na, b, c = list(map(int, input().split()))\n\n\n\nprint((solve(a, b, c)))","code_v0_loc":27,"code_v1_loc":11,"code_v0_num_chars":580,"code_v1_num_chars":272,"code_v0_no_empty_lines":"a, b, c = list(map(int, input().split()))\nif any(i % 2 != 0 for i in [a, b, c]):\n    print((0))\n    exit()\nif a == b and b == c:\n    print((-1))\n    exit()\ncnt = 0\na_list = [0] * (1001001)\nb_list = [0] * (1001001)\nc_list = [0] * (1001001)\na_list[0] = a\nb_list[0] = b\nc_list[0] = c\nfor i in range(1, 1001001):\n    a_list[i] = (b_list[i - 1] + c_list[i - 1]) \/\/ 2\n    b_list[i] = (c_list[i - 1] + a_list[i - 1]) \/\/ 2\n    c_list[i] = (a_list[i - 1] + b_list[i - 1]) \/\/ 2\n    cnt += 1\n    if a_list[i] % 2 != 0 or b_list[i] % 2 != 0 or c_list[i] % 2 != 0:\n        break\nprint(cnt)\n","code_v1_no_empty_lines":"def solve(a, b, c):\n    if any(i % 2 == 1 for i in [a, b, c]):\n        return 0\n    if a == b == c:\n        return -1\n    a, b, c = (b + c) \/\/ 2, (c + a) \/\/ 2, (a + b) \/\/ 2\n    return solve(a, b, c) + 1\n\n\na, b, c = list(map(int, input().split()))\nprint((solve(a, b, c)))\n","code_same":false,"relative_loc_diff_percent":59.2592592593,"diff":["+def solve(a, b, c):","+    if any(i % 2 == 1 for i in [a, b, c]):","+        return 0","+    if a == b == c:","+        return -1","+    a, b, c = (b + c) \/\/ 2, (c + a) \/\/ 2, (a + b) \/\/ 2","+    return solve(a, b, c) + 1","+","+","-if any(i % 2 != 0 for i in [a, b, c]):","-    print((0))","-    exit()","-if a == b and b == c:","-    print((-1))","-    exit()","-cnt = 0","-a_list = [0] * (1001001)","-b_list = [0] * (1001001)","-c_list = [0] * (1001001)","-a_list[0] = a","-b_list[0] = b","-c_list[0] = c","-for i in range(1, 1001001):","-    a_list[i] = (b_list[i - 1] + c_list[i - 1]) \/\/ 2","-    b_list[i] = (c_list[i - 1] + a_list[i - 1]) \/\/ 2","-    c_list[i] = (a_list[i - 1] + b_list[i - 1]) \/\/ 2","-    cnt += 1","-    if a_list[i] % 2 != 0 or b_list[i] % 2 != 0 or c_list[i] % 2 != 0:","-        break","-print(cnt)","+print((solve(a, b, c)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.6101216149,"measured_runtime_v1":0.3266951015,"runtime_lift":1.8675566671,"key":["s032726803","s012708150"]}
{"user_id":"u463655976","problem_id":"p03013","language":"python","submission_id_v0":"s227334045","submission_id_v1":"s524241188","cpu_time_v0":285,"cpu_time_v1":189,"memory_v0":22940,"memory_v1":7836,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":33.68,"input":"from functools import lru_cache\n\nimport sys\n\nsys.setrecursionlimit(30000)\n\n\n\nN, M = list(map(int, input().split()))\n\na = list(int(eval(input())) for _ in range(M))\n\n\n\nMOD = pow(10, 9) + 7\n\n\n\nisOk = True\n\nfor i in range(M-1):\n\n    if a[i] + 1 == a[i+1]:\n\n        isOk = False\n\n    \n\nfuncb = [-1] * 100001\n\ndef func(n):\n\n    if n <= 0:\n\n        return 1\n\n    cnt = funcb[n]\n\n    if cnt > 0:\n\n        return cnt\n\n    cnt = 0\n\n    if n >= 2:\n\n        cnt += func(n-2)\n\n    if n >= 1:\n\n        cnt += func(n-1)\n\n    funcb[n] = cnt % MOD\n\n    return funcb[n]\n\n\n\nfunc(30000)\n\nfunc(50000)\n\nfunc(80000)\n\nfunc(100000)\n\n\n\nif not isOk:\n\n    print((0))\n\nelse:\n\n    ans = 1\n\n    s = 0\n\n    for i in range(M+1):\n\n        if i >= M:\n\n            e = N\n\n        else:\n\n            e = a[i] - 1\n\n\n\n        ans = ans * func(e-s) % MOD\n\n\n\n        if i >= M:\n\n            break\n\n\n\n        s = a[i] + 1\n\n\n\n    print(ans)\n","target":"N, M = list(map(int, input().split()))\n\na = list(int(eval(input())) for _ in range(M))\n\n\n\nMOD = pow(10, 9) + 7\n\n\n\nMAP = [0] * (N + 1)\n\n\n\nfor x in a:\n\n    MAP[x] = -1\n\n\n\nMAP[0] = 1 \n\nfor i in range(N):\n\n    if MAP[i] < 0:\n\n        continue\n\n\n\n    MAP[i] %= MOD\n\n    if i + 1 <= N and MAP[i+1] >= 0:\n\n        MAP[i+1] += MAP[i]\n\n    if i + 2 <= N and MAP[i+2] >= 0:\n\n        MAP[i+2] += MAP[i]\n\n\n\nprint((MAP[N] % MOD))\n","code_v0_loc":53,"code_v1_loc":22,"code_v0_num_chars":885,"code_v1_num_chars":403,"code_v0_no_empty_lines":"from functools import lru_cache\nimport sys\n\nsys.setrecursionlimit(30000)\nN, M = list(map(int, input().split()))\na = list(int(eval(input())) for _ in range(M))\nMOD = pow(10, 9) + 7\nisOk = True\nfor i in range(M - 1):\n    if a[i] + 1 == a[i + 1]:\n        isOk = False\nfuncb = [-1] * 100001\n\n\ndef func(n):\n    if n <= 0:\n        return 1\n    cnt = funcb[n]\n    if cnt > 0:\n        return cnt\n    cnt = 0\n    if n >= 2:\n        cnt += func(n - 2)\n    if n >= 1:\n        cnt += func(n - 1)\n    funcb[n] = cnt % MOD\n    return funcb[n]\n\n\nfunc(30000)\nfunc(50000)\nfunc(80000)\nfunc(100000)\nif not isOk:\n    print((0))\nelse:\n    ans = 1\n    s = 0\n    for i in range(M + 1):\n        if i >= M:\n            e = N\n        else:\n            e = a[i] - 1\n        ans = ans * func(e - s) % MOD\n        if i >= M:\n            break\n        s = a[i] + 1\n    print(ans)\n","code_v1_no_empty_lines":"N, M = list(map(int, input().split()))\na = list(int(eval(input())) for _ in range(M))\nMOD = pow(10, 9) + 7\nMAP = [0] * (N + 1)\nfor x in a:\n    MAP[x] = -1\nMAP[0] = 1\nfor i in range(N):\n    if MAP[i] < 0:\n        continue\n    MAP[i] %= MOD\n    if i + 1 <= N and MAP[i + 1] >= 0:\n        MAP[i + 1] += MAP[i]\n    if i + 2 <= N and MAP[i + 2] >= 0:\n        MAP[i + 2] += MAP[i]\nprint((MAP[N] % MOD))\n","code_same":false,"relative_loc_diff_percent":58.4905660377,"diff":["-from functools import lru_cache","-import sys","-","-sys.setrecursionlimit(30000)","-isOk = True","-for i in range(M - 1):","-    if a[i] + 1 == a[i + 1]:","-        isOk = False","-funcb = [-1] * 100001","-","-","-def func(n):","-    if n <= 0:","-        return 1","-    cnt = funcb[n]","-    if cnt > 0:","-        return cnt","-    cnt = 0","-    if n >= 2:","-        cnt += func(n - 2)","-    if n >= 1:","-        cnt += func(n - 1)","-    funcb[n] = cnt % MOD","-    return funcb[n]","-","-","-func(30000)","-func(50000)","-func(80000)","-func(100000)","-if not isOk:","-    print((0))","-else:","-    ans = 1","-    s = 0","-    for i in range(M + 1):","-        if i >= M:","-            e = N","-        else:","-            e = a[i] - 1","-        ans = ans * func(e - s) % MOD","-        if i >= M:","-            break","-        s = a[i] + 1","-    print(ans)","+MAP = [0] * (N + 1)","+for x in a:","+    MAP[x] = -1","+MAP[0] = 1","+for i in range(N):","+    if MAP[i] < 0:","+        continue","+    MAP[i] %= MOD","+    if i + 1 <= N and MAP[i + 1] >= 0:","+        MAP[i + 1] += MAP[i]","+    if i + 2 <= N and MAP[i + 2] >= 0:","+        MAP[i + 2] += MAP[i]","+print((MAP[N] % MOD))"],"diff_only_import_comment":false,"measured_runtime_v0":1.0640589638,"measured_runtime_v1":0.2648930094,"runtime_lift":4.0169386351,"key":["s227334045","s524241188"]}
{"user_id":"u062484507","problem_id":"p02780","language":"python","submission_id_v0":"s309433375","submission_id_v1":"s915228066","cpu_time_v0":279,"cpu_time_v1":182,"memory_v0":52432,"memory_v1":32532,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":34.77,"input":"import sys\n\nimport numpy as np\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nn, k = list(map(int, readline().split()))\n\np = list(map(int, readline().split()))\n\n\n\ntmp = [(i+1)\/2 for i in p]\n\ncs = list(np.cumsum(tmp))\n\n\n\nif n == k:\n\n    print((cs[-1]))\n\n    exit()\n\nans = 0\n\nfor i in range(n - k):\n\n    ans = max(ans, cs[i + k] - cs[i])\n\nprint(ans)","target":"import sys\n\n# import numpy as np\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nn, k = list(map(int, readline().split()))\n\np = list(map(int, readline().split()))\n\n\n\ntmp = [(i+1)\/2 for i in p]\n\n# cs = list(np.cumsum(tmp))\n\n\n\ncs = [0]*n\n\ncs[0] = tmp[0]\n\nfor i in range(len(tmp)-1):\n\n    cs[i + 1] = cs[i] + tmp[i + 1]\n\n\n\nif n == k:\n\n    print((cs[-1]))\n\n    exit()\n\nans = 0\n\nfor i in range(n - k):\n\n    ans = max(ans, cs[i + k] - cs[i])\n\nprint(ans)","code_v0_loc":19,"code_v1_loc":24,"code_v0_num_chars":403,"code_v1_num_chars":502,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nn, k = list(map(int, readline().split()))\np = list(map(int, readline().split()))\ntmp = [(i + 1) \/ 2 for i in p]\ncs = list(np.cumsum(tmp))\nif n == k:\n    print((cs[-1]))\n    exit()\nans = 0\nfor i in range(n - k):\n    ans = max(ans, cs[i + k] - cs[i])\nprint(ans)\n","code_v1_no_empty_lines":"import sys\n\n# import numpy as np\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nn, k = list(map(int, readline().split()))\np = list(map(int, readline().split()))\ntmp = [(i + 1) \/ 2 for i in p]\n# cs = list(np.cumsum(tmp))\ncs = [0] * n\ncs[0] = tmp[0]\nfor i in range(len(tmp) - 1):\n    cs[i + 1] = cs[i] + tmp[i + 1]\nif n == k:\n    print((cs[-1]))\n    exit()\nans = 0\nfor i in range(n - k):\n    ans = max(ans, cs[i + k] - cs[i])\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":20.8333333333,"diff":["-import numpy as np","+# import numpy as np","-cs = list(np.cumsum(tmp))","+# cs = list(np.cumsum(tmp))","+cs = [0] * n","+cs[0] = tmp[0]","+for i in range(len(tmp) - 1):","+    cs[i + 1] = cs[i] + tmp[i + 1]"],"diff_only_import_comment":false,"measured_runtime_v0":1.3658499551,"measured_runtime_v1":0.2102261074,"runtime_lift":6.4970520178,"key":["s309433375","s915228066"]}
{"user_id":"u402629484","problem_id":"p02690","language":"python","submission_id_v0":"s210362874","submission_id_v1":"s375403495","cpu_time_v0":52,"cpu_time_v1":31,"memory_v0":9156,"memory_v1":8904,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":40.38,"input":"'''\n\nA = 500 \u3068\u3059\u308b\u3002\n\n\u3053\u306e\u3068\u304d\u3001X = 10^9 \u3068\u306a\u308b\u306e\u306f\u3001 B = 499.9968... \u306e\u3068\u304d\u3002\n\n\u2192 A\u307e\u305f\u306fB (\u306e\u7d76\u5bfe\u5024) \u304c\u5927\u304d\u3059\u304e\u308b\u3068\u3001X\u304c10^9\u306b\u53ce\u307e\u3089\u306a\u3044\u3002\n\n\n\nA, B\u306e\u63a2\u7d22\u7bc4\u56f2\u306f -120~120\u3067\u5341\u5206\u3002\n\n'''\n\n\n\nfrom itertools import product\n\n\n\ndef main():\n\n    X = int(eval(input()))\n\n    for A, B in product(list(range(-150, 150)), list(range(-150, 150))):\n\n        if A**5 - B**5 == X:\n\n            print((A, B))\n\n            return\n\n\n\nmain()\n\n\n","target":"from itertools import count\n\n\n\ndef main():\n\n    X = int(eval(input()))\n\n    for i in count():\n\n        for A in (-i, i):\n\n            for B in range(-i, i+1):\n\n                if A**5 - B**5 == X:\n\n                    print((A, B))\n\n                    return\n\n\n\n\n\nmain()\n","code_v0_loc":19,"code_v1_loc":13,"code_v0_num_chars":350,"code_v1_num_chars":264,"code_v0_no_empty_lines":"\"\"\"\nA = 500 \u3068\u3059\u308b\u3002\n\u3053\u306e\u3068\u304d\u3001X = 10^9 \u3068\u306a\u308b\u306e\u306f\u3001 B = 499.9968... \u306e\u3068\u304d\u3002\n\u2192 A\u307e\u305f\u306fB (\u306e\u7d76\u5bfe\u5024) \u304c\u5927\u304d\u3059\u304e\u308b\u3068\u3001X\u304c10^9\u306b\u53ce\u307e\u3089\u306a\u3044\u3002\nA, B\u306e\u63a2\u7d22\u7bc4\u56f2\u306f -120~120\u3067\u5341\u5206\u3002\n\"\"\"\nfrom itertools import product\n\n\ndef main():\n    X = int(eval(input()))\n    for A, B in product(list(range(-150, 150)), list(range(-150, 150))):\n        if A**5 - B**5 == X:\n            print((A, B))\n            return\n\n\nmain()\n","code_v1_no_empty_lines":"from itertools import count\n\n\ndef main():\n    X = int(eval(input()))\n    for i in count():\n        for A in (-i, i):\n            for B in range(-i, i + 1):\n                if A**5 - B**5 == X:\n                    print((A, B))\n                    return\n\n\nmain()\n","code_same":false,"relative_loc_diff_percent":31.5789473684,"diff":["-\"\"\"","-A = 500 \u3068\u3059\u308b\u3002","-\u3053\u306e\u3068\u304d\u3001X = 10^9 \u3068\u306a\u308b\u306e\u306f\u3001 B = 499.9968... \u306e\u3068\u304d\u3002","-\u2192 A\u307e\u305f\u306fB (\u306e\u7d76\u5bfe\u5024) \u304c\u5927\u304d\u3059\u304e\u308b\u3068\u3001X\u304c10^9\u306b\u53ce\u307e\u3089\u306a\u3044\u3002","-A, B\u306e\u63a2\u7d22\u7bc4\u56f2\u306f -120~120\u3067\u5341\u5206\u3002","-\"\"\"","-from itertools import product","+from itertools import count","-    for A, B in product(list(range(-150, 150)), list(range(-150, 150))):","-        if A**5 - B**5 == X:","-            print((A, B))","-            return","+    for i in count():","+        for A in (-i, i):","+            for B in range(-i, i + 1):","+                if A**5 - B**5 == X:","+                    print((A, B))","+                    return"],"diff_only_import_comment":false,"measured_runtime_v0":0.5383961856,"measured_runtime_v1":0.3121367236,"runtime_lift":1.724872932,"key":["s210362874","s375403495"]}
{"user_id":"u254871849","problem_id":"p02921","language":"python","submission_id_v0":"s533958811","submission_id_v1":"s140590362","cpu_time_v0":19,"cpu_time_v1":17,"memory_v0":3060,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.53,"input":"# 2019-11-17 20:44:23(JST)\n\nimport sys\n\n# import collections\n\n# import math\n\n# from string import ascii_lowercase, ascii_uppercase, digits\n\n# from bisect import bisect_left as bi_l, bisect_right as bi_r\n\n# import itertools\n\n# from functools import reduce\n\n# import operator as op\n\n# import re\n\n# import heapq\n\n# import array\n\n# from scipy.misc import comb # (default: exact=False)\n\n# import numpy as np \n\n\n\n\n\ndef main():\n\n    s, t = sys.stdin.read().split()\n\n\n\n    count = 0\n\n    for i in range(3):\n\n        if s[i] == t[i]:\n\n            count += 1\n\n    print(count)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"import sys\n\n\n\ns, t = sys.stdin.read().split()\n\n\n\ndef main():\n\n    cnt = 0\n\n    for i in range(3):\n\n        if s[i] == t[i]:\n\n            cnt += 1\n\n    return cnt\n\n    \n\nif __name__ == '__main__':\n\n    ans = main()\n\n    print(ans)","code_v0_loc":28,"code_v1_loc":14,"code_v0_num_chars":611,"code_v1_num_chars":229,"code_v0_no_empty_lines":"# 2019-11-17 20:44:23(JST)\nimport sys\n\n# import collections\n# import math\n# from string import ascii_lowercase, ascii_uppercase, digits\n# from bisect import bisect_left as bi_l, bisect_right as bi_r\n# import itertools\n# from functools import reduce\n# import operator as op\n# import re\n# import heapq\n# import array\n# from scipy.misc import comb # (default: exact=False)\n# import numpy as np\ndef main():\n    s, t = sys.stdin.read().split()\n    count = 0\n    for i in range(3):\n        if s[i] == t[i]:\n            count += 1\n    print(count)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\ns, t = sys.stdin.read().split()\n\n\ndef main():\n    cnt = 0\n    for i in range(3):\n        if s[i] == t[i]:\n            cnt += 1\n    return cnt\n\n\nif __name__ == \"__main__\":\n    ans = main()\n    print(ans)\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-# 2019-11-17 20:44:23(JST)","-# import collections","-# import math","-# from string import ascii_lowercase, ascii_uppercase, digits","-# from bisect import bisect_left as bi_l, bisect_right as bi_r","-# import itertools","-# from functools import reduce","-# import operator as op","-# import re","-# import heapq","-# import array","-# from scipy.misc import comb # (default: exact=False)","-# import numpy as np","+s, t = sys.stdin.read().split()","+","+","-    s, t = sys.stdin.read().split()","-    count = 0","+    cnt = 0","-            count += 1","-    print(count)","+            cnt += 1","+    return cnt","-    main()","+    ans = main()","+    print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2871051877,"measured_runtime_v1":0.085240711,"runtime_lift":3.3681697905,"key":["s533958811","s140590362"]}
{"user_id":"u925626880","problem_id":"p03494","language":"python","submission_id_v0":"s424280278","submission_id_v1":"s408493869","cpu_time_v0":151,"cpu_time_v1":19,"memory_v0":12396,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.42,"input":"# -*- coding: utf-8 -*-\n\n\n\nimport numpy as np\n\n\n\nn = int(eval(input()))\n\nl = np.array(list(map(int, input().split())))\n\n\n\ncount = 0\n\n\n\nwhile(1):\n\n    if all(1 - (l % 2)):\n\n        count += 1\n\n        l = l \/ 2\n\n    else:\n\n        break\n\n\n\nprint(count)\n","target":"N = eval(input())\n\nA = list(map(int, input().split()))\n\n\n\ncount = 0\n\nwhile all(a%2==0 for a in A):\n\n    count += 1\n\n    A = [a\/2 for a in A]\n\n\n\nprint(count)\n","code_v0_loc":17,"code_v1_loc":9,"code_v0_num_chars":246,"code_v1_num_chars":151,"code_v0_no_empty_lines":"# -*- coding: utf-8 -*-\nimport numpy as np\n\nn = int(eval(input()))\nl = np.array(list(map(int, input().split())))\ncount = 0\nwhile 1:\n    if all(1 - (l % 2)):\n        count += 1\n        l = l \/ 2\n    else:\n        break\nprint(count)\n","code_v1_no_empty_lines":"N = eval(input())\nA = list(map(int, input().split()))\ncount = 0\nwhile all(a % 2 == 0 for a in A):\n    count += 1\n    A = [a \/ 2 for a in A]\nprint(count)\n","code_same":false,"relative_loc_diff_percent":47.0588235294,"diff":["-# -*- coding: utf-8 -*-","-import numpy as np","-","-n = int(eval(input()))","-l = np.array(list(map(int, input().split())))","+N = eval(input())","+A = list(map(int, input().split()))","-while 1:","-    if all(1 - (l % 2)):","-        count += 1","-        l = l \/ 2","-    else:","-        break","+while all(a % 2 == 0 for a in A):","+    count += 1","+    A = [a \/ 2 for a in A]"],"diff_only_import_comment":false,"measured_runtime_v0":3.0328897429,"measured_runtime_v1":0.4000873275,"runtime_lift":7.5805693769,"key":["s424280278","s408493869"]}
{"user_id":"u254871849","problem_id":"p03416","language":"python","submission_id_v0":"s286428945","submission_id_v1":"s838954646","cpu_time_v0":41,"cpu_time_v1":20,"memory_v0":2940,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":51.22,"input":"#                         author:  kagemeka \n\n#                         created: 2019-11-06 21:30:22(JST)\n\nimport sys\n\n# import collections\n\n# import math\n\n# import string\n\n# import bisect\n\n# import re\n\n# import itertools\n\n# import statistics\n\n# import functools\n\n# import operator\n\n\n\ndef main():\n\n    a, b = (int(x) for x in sys.stdin.read().split())\n\n\n\n    count = 0\n\n    for n in range(a, b+1):\n\n        n = str(n)\n\n        if n == n[::-1]:\n\n            count += 1\n\n\n\n    print(count)       \n\n\n\nif __name__ == \"__main__\":\n\n    # execute only if run as a script\n\n    main()\n","target":"import sys\n\nfrom bisect import bisect_left as bi_l, bisect_right as bi_r\n\n\n\na, b = list(map(int, sys.stdin.readline().split()))\n\n\n\ndef main():\n\n    palindromic_nums = []\n\n    for i in range(1, 10):\n\n        for j in range(10):\n\n            for k in range(10):\n\n                x = [i, j, k, j, i]\n\n                palindromic_nums.append(int(''.join(list(map(str, x)))))\n\n\n\n    return bi_r(palindromic_nums, b) - bi_l(palindromic_nums, a)\n\n                \n\nif __name__ == '__main__':\n\n    ans = main()\n\n    print(ans)","code_v0_loc":27,"code_v1_loc":18,"code_v0_num_chars":576,"code_v1_num_chars":512,"code_v0_no_empty_lines":"#                         author:  kagemeka\n#                         created: 2019-11-06 21:30:22(JST)\nimport sys\n\n# import collections\n# import math\n# import string\n# import bisect\n# import re\n# import itertools\n# import statistics\n# import functools\n# import operator\ndef main():\n    a, b = (int(x) for x in sys.stdin.read().split())\n    count = 0\n    for n in range(a, b + 1):\n        n = str(n)\n        if n == n[::-1]:\n            count += 1\n    print(count)\n\n\nif __name__ == \"__main__\":\n    # execute only if run as a script\n    main()\n","code_v1_no_empty_lines":"import sys\nfrom bisect import bisect_left as bi_l, bisect_right as bi_r\n\na, b = list(map(int, sys.stdin.readline().split()))\n\n\ndef main():\n    palindromic_nums = []\n    for i in range(1, 10):\n        for j in range(10):\n            for k in range(10):\n                x = [i, j, k, j, i]\n                palindromic_nums.append(int(\"\".join(list(map(str, x)))))\n    return bi_r(palindromic_nums, b) - bi_l(palindromic_nums, a)\n\n\nif __name__ == \"__main__\":\n    ans = main()\n    print(ans)\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-#                         author:  kagemeka","-#                         created: 2019-11-06 21:30:22(JST)","+from bisect import bisect_left as bi_l, bisect_right as bi_r","-# import collections","-# import math","-# import string","-# import bisect","-# import re","-# import itertools","-# import statistics","-# import functools","-# import operator","+a, b = list(map(int, sys.stdin.readline().split()))","+","+","-    a, b = (int(x) for x in sys.stdin.read().split())","-    count = 0","-    for n in range(a, b + 1):","-        n = str(n)","-        if n == n[::-1]:","-            count += 1","-    print(count)","+    palindromic_nums = []","+    for i in range(1, 10):","+        for j in range(10):","+            for k in range(10):","+                x = [i, j, k, j, i]","+                palindromic_nums.append(int(\"\".join(list(map(str, x)))))","+    return bi_r(palindromic_nums, b) - bi_l(palindromic_nums, a)","-    # execute only if run as a script","-    main()","+    ans = main()","+    print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2528932301,"measured_runtime_v1":0.1923888798,"runtime_lift":1.314489852,"key":["s286428945","s838954646"]}
{"user_id":"u729939940","problem_id":"p02767","language":"python","submission_id_v0":"s286517602","submission_id_v1":"s316820501","cpu_time_v0":20,"cpu_time_v1":17,"memory_v0":3064,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.0,"input":"N = int(eval(input()))\n\nX = list(map(int, input().split()))\n\nX = list(sorted(X))\n\nif N == 1:\n\n  print((0))\n\n  exit()\n\nans = float('inf')\n\nfor p in range(X[0], X[N - 1] + 1):\n\n  sum = 0\n\n  for x in X:\n\n    sum += (x - p) ** 2\n\n  ans = min(sum, ans)\n\nprint(ans)","target":"N = int(eval(input()))\n\nX = list(map(int, input().split()))\n\navg = round(sum(X) \/ N)\n\nprint((sum([(x - avg) ** 2 for x in X])))","code_v0_loc":13,"code_v1_loc":4,"code_v0_num_chars":251,"code_v1_num_chars":119,"code_v0_no_empty_lines":"N = int(eval(input()))\nX = list(map(int, input().split()))\nX = list(sorted(X))\nif N == 1:\n    print((0))\n    exit()\nans = float(\"inf\")\nfor p in range(X[0], X[N - 1] + 1):\n    sum = 0\n    for x in X:\n        sum += (x - p) ** 2\n    ans = min(sum, ans)\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nX = list(map(int, input().split()))\navg = round(sum(X) \/ N)\nprint((sum([(x - avg) ** 2 for x in X])))\n","code_same":false,"relative_loc_diff_percent":69.2307692308,"diff":["-X = list(sorted(X))","-if N == 1:","-    print((0))","-    exit()","-ans = float(\"inf\")","-for p in range(X[0], X[N - 1] + 1):","-    sum = 0","-    for x in X:","-        sum += (x - p) ** 2","-    ans = min(sum, ans)","-print(ans)","+avg = round(sum(X) \/ N)","+print((sum([(x - avg) ** 2 for x in X])))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2590025333,"measured_runtime_v1":0.1089487125,"runtime_lift":2.3772886094,"key":["s286517602","s316820501"]}
{"user_id":"u340781749","problem_id":"p03428","language":"python","submission_id_v0":"s069460199","submission_id_v1":"s625881490","cpu_time_v0":611,"cpu_time_v1":495,"memory_v0":179524,"memory_v1":175124,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":18.99,"input":"from collections import Counter\n\n\n\nimport numpy as np\n\n\n\n\n\ndef part(pts, a, ans):\n\n    b = np.dot(pts, [np.sin(a), np.cos(a)])\n\n    c = np.argmax(b, axis=0)\n\n    for i, v in list(Counter(c).items()):\n\n        ans[i] += v\n\n\n\n\n\ndef solve(n, pts):\n\n    ans = [0] * n\n\n    part(pts, np.linspace(0, np.pi, 100000, endpoint=False), ans)\n\n    part(pts, np.linspace(np.pi, 2 * np.pi, 100000, endpoint=False), ans)\n\n    return [v \/ 200000 for v in ans]\n\n\n\n\n\nn = int(eval(input()))\n\npts = np.array([list(map(int, input().split())) for _ in range(n)])\n\nprint(('\\n'.join(map(str, solve(n, pts)))))\n","target":"from collections import Counter\n\nimport numpy as np\n\n\n\n\n\ndef part(pts, s, t, num, ans):\n\n    a = np.linspace(s, t, num, endpoint=False)\n\n    for i, v in list(Counter(np.argmax(np.dot(pts, [np.sin(a), np.cos(a)]), axis=0)).items()):\n\n        ans[i] += v\n\n\n\n\n\ndef solve(n, pts):\n\n    ans = np.zeros(n)\n\n    part(pts, 0, np.pi, 1e5, ans)\n\n    part(pts, np.pi, 2 * np.pi, 1e5, ans)\n\n    return ans \/ 2e5\n\n\n\n\n\nn = int(eval(input()))\n\nprint(('\\n'.join(map(str, solve(n, [list(map(int, input().split())) for _ in range(n)])))))\n","code_v0_loc":22,"code_v1_loc":19,"code_v0_num_chars":572,"code_v1_num_chars":507,"code_v0_no_empty_lines":"from collections import Counter\nimport numpy as np\n\n\ndef part(pts, a, ans):\n    b = np.dot(pts, [np.sin(a), np.cos(a)])\n    c = np.argmax(b, axis=0)\n    for i, v in list(Counter(c).items()):\n        ans[i] += v\n\n\ndef solve(n, pts):\n    ans = [0] * n\n    part(pts, np.linspace(0, np.pi, 100000, endpoint=False), ans)\n    part(pts, np.linspace(np.pi, 2 * np.pi, 100000, endpoint=False), ans)\n    return [v \/ 200000 for v in ans]\n\n\nn = int(eval(input()))\npts = np.array([list(map(int, input().split())) for _ in range(n)])\nprint((\"\\n\".join(map(str, solve(n, pts)))))\n","code_v1_no_empty_lines":"from collections import Counter\nimport numpy as np\n\n\ndef part(pts, s, t, num, ans):\n    a = np.linspace(s, t, num, endpoint=False)\n    for i, v in list(\n        Counter(np.argmax(np.dot(pts, [np.sin(a), np.cos(a)]), axis=0)).items()\n    ):\n        ans[i] += v\n\n\ndef solve(n, pts):\n    ans = np.zeros(n)\n    part(pts, 0, np.pi, 1e5, ans)\n    part(pts, np.pi, 2 * np.pi, 1e5, ans)\n    return ans \/ 2e5\n\n\nn = int(eval(input()))\nprint(\n    (\"\\n\".join(map(str, solve(n, [list(map(int, input().split())) for _ in range(n)]))))\n)\n","code_same":false,"relative_loc_diff_percent":13.6363636364,"diff":["-def part(pts, a, ans):","-    b = np.dot(pts, [np.sin(a), np.cos(a)])","-    c = np.argmax(b, axis=0)","-    for i, v in list(Counter(c).items()):","+def part(pts, s, t, num, ans):","+    a = np.linspace(s, t, num, endpoint=False)","+    for i, v in list(","+        Counter(np.argmax(np.dot(pts, [np.sin(a), np.cos(a)]), axis=0)).items()","+    ):","-    ans = [0] * n","-    part(pts, np.linspace(0, np.pi, 100000, endpoint=False), ans)","-    part(pts, np.linspace(np.pi, 2 * np.pi, 100000, endpoint=False), ans)","-    return [v \/ 200000 for v in ans]","+    ans = np.zeros(n)","+    part(pts, 0, np.pi, 1e5, ans)","+    part(pts, np.pi, 2 * np.pi, 1e5, ans)","+    return ans \/ 2e5","-pts = np.array([list(map(int, input().split())) for _ in range(n)])","-print((\"\\n\".join(map(str, solve(n, pts)))))","+print(","+    (\"\\n\".join(map(str, solve(n, [list(map(int, input().split())) for _ in range(n)]))))","+)"],"diff_only_import_comment":false,"measured_runtime_v0":1.1121708891,"measured_runtime_v1":0.8332911707,"runtime_lift":1.334672595,"key":["s069460199","s625881490"]}
{"user_id":"u628335443","problem_id":"p02725","language":"python","submission_id_v0":"s320196234","submission_id_v1":"s733866625","cpu_time_v0":189,"cpu_time_v1":163,"memory_v0":26444,"memory_v1":26444,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.76,"input":"k, n = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nd = [0] * n\n\nd_max = 0\n\n\n\nfor i in range(n - 1):\n\n    d[i] = a[i + 1] - a[i]\n\n    d_max = max(d_max, d[i])\n\n\n\nd[-1] = (k - a[-1]) + a[0]\n\nd_max = max(d_max, d[-1])\n\n\n\nprint((k - d_max))\n","target":"k, n = list(map(int, input().split()))\n\na = list(map(int, input().split()))\n\nd_max = 0\n\n\n\nfor i in range(n - 1):\n\n    d = a[i + 1] - a[i]\n\n    d_max = max(d_max, d)\n\n\n\nd = (k - a[-1]) + a[0]\n\nd_max = max(d_max, d)\n\n\n\nprint((k - d_max))\n","code_v0_loc":13,"code_v1_loc":12,"code_v0_num_chars":255,"code_v1_num_chars":228,"code_v0_no_empty_lines":"k, n = list(map(int, input().split()))\na = list(map(int, input().split()))\nd = [0] * n\nd_max = 0\nfor i in range(n - 1):\n    d[i] = a[i + 1] - a[i]\n    d_max = max(d_max, d[i])\nd[-1] = (k - a[-1]) + a[0]\nd_max = max(d_max, d[-1])\nprint((k - d_max))\n","code_v1_no_empty_lines":"k, n = list(map(int, input().split()))\na = list(map(int, input().split()))\nd_max = 0\nfor i in range(n - 1):\n    d = a[i + 1] - a[i]\n    d_max = max(d_max, d)\nd = (k - a[-1]) + a[0]\nd_max = max(d_max, d)\nprint((k - d_max))\n","code_same":false,"relative_loc_diff_percent":7.6923076923,"diff":["-d = [0] * n","-    d[i] = a[i + 1] - a[i]","-    d_max = max(d_max, d[i])","-d[-1] = (k - a[-1]) + a[0]","-d_max = max(d_max, d[-1])","+    d = a[i + 1] - a[i]","+    d_max = max(d_max, d)","+d = (k - a[-1]) + a[0]","+d_max = max(d_max, d)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3049341288,"measured_runtime_v1":0.200526454,"runtime_lift":1.5206678356,"key":["s320196234","s733866625"]}
{"user_id":"u864197622","problem_id":"p02822","language":"python","submission_id_v0":"s981663077","submission_id_v1":"s820806781","cpu_time_v0":1240,"cpu_time_v1":890,"memory_v0":93784,"memory_v1":100756,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":28.23,"input":"import sys\n\ninput = sys.stdin.readline\n\nfrom collections import deque\n\nN = int(eval(input()))\n\nX = [[] for i in range(N)]\n\nfor i in range(N-1):\n\n    x, y = list(map(int, input().split()))\n\n    X[x-1].append(y-1)\n\n    X[y-1].append(x-1)\n\ni0 = min([i for i in range(N) if len(X[i]) == 1])\n\n\n\nP = [-1] * N\n\nQ = deque([i0])\n\nR = []\n\nwhile Q:\n\n    i = deque.popleft(Q)\n\n    R.append(i)\n\n    for a in X[i]:\n\n        if a != P[i]:\n\n            P[a] = i\n\n            X[a].remove(i)\n\n            deque.append(Q, a)\n\n\n\nmod = 10 ** 9 + 7\n\ninv2 = (mod + 1) \/\/ 2\n\nA = [1] * N\n\nfor i in R[::-1]:\n\n    s = 0\n\n    for j in X[i]:\n\n        A[i] += A[j]\n\n\n\nans = 0\n\nfor i in range(N):\n\n    s = pow(inv2, N - A[i], mod)\n\n    t = 1 + (1-pow(inv2, N - A[i], mod)) * pow(2, N - A[i], mod)\n\n    for j in X[i]:\n\n        s = (s * pow(inv2, A[j], mod)) % mod\n\n        t = (t + (1-pow(inv2, A[j], mod)) * pow(2, A[j], mod)) % mod\n\n    ans = (ans + 1 - s * t) % mod\n\n\n\nprint((ans * inv2 % mod))","target":"import sys\n\ninput = sys.stdin.readline\n\nfrom collections import deque\n\nN = int(eval(input()))\n\nX = [[] for i in range(N)]\n\nfor i in range(N-1):\n\n    x, y = list(map(int, input().split()))\n\n    X[x-1].append(y-1)\n\n    X[y-1].append(x-1)\n\ni0 = min([i for i in range(N) if len(X[i]) == 1])\n\n\n\nP = [-1] * N\n\nQ = deque([i0])\n\nR = []\n\nwhile Q:\n\n    i = deque.popleft(Q)\n\n    R.append(i)\n\n    for a in X[i]:\n\n        if a != P[i]:\n\n            P[a] = i\n\n            X[a].remove(i)\n\n            deque.append(Q, a)\n\n\n\nmod = 10 ** 9 + 7\n\npow2 = [1]\n\nfor i in range(N + 10):\n\n    pow2.append(pow2[-1] * 2 % mod)\n\ninv2 = (mod + 1) \/\/ 2\n\n\n\ninvpow2 = [pow(pow2[-1], mod-2, mod)]\n\nfor i in range(N + 10)[::-1]:\n\n    invpow2.append(invpow2[-1] * 2 % mod)\n\ninvpow2 = invpow2[::-1]\n\n\n\nA = [1] * N\n\nfor i in R[::-1]:\n\n    s = 0\n\n    for j in X[i]:\n\n        A[i] += A[j]\n\n\n\nans = 0\n\nfor i in range(N):\n\n    s = pow(inv2, N - A[i], mod)\n\n    t = 1 + (1-invpow2[N-A[i]]) * pow2[N-A[i]]\n\n    for j in X[i]:\n\n        s = (s * invpow2[A[j]]) % mod\n\n        t = (t + (1-invpow2[A[j]]) * pow2[A[j]]) % mod\n\n    ans = (ans + 1 - s * t) % mod\n\n\n\nprint((ans * inv2 % mod))","code_v0_loc":41,"code_v1_loc":50,"code_v0_num_chars":951,"code_v1_num_chars":1128,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nfrom collections import deque\n\nN = int(eval(input()))\nX = [[] for i in range(N)]\nfor i in range(N - 1):\n    x, y = list(map(int, input().split()))\n    X[x - 1].append(y - 1)\n    X[y - 1].append(x - 1)\ni0 = min([i for i in range(N) if len(X[i]) == 1])\nP = [-1] * N\nQ = deque([i0])\nR = []\nwhile Q:\n    i = deque.popleft(Q)\n    R.append(i)\n    for a in X[i]:\n        if a != P[i]:\n            P[a] = i\n            X[a].remove(i)\n            deque.append(Q, a)\nmod = 10**9 + 7\ninv2 = (mod + 1) \/\/ 2\nA = [1] * N\nfor i in R[::-1]:\n    s = 0\n    for j in X[i]:\n        A[i] += A[j]\nans = 0\nfor i in range(N):\n    s = pow(inv2, N - A[i], mod)\n    t = 1 + (1 - pow(inv2, N - A[i], mod)) * pow(2, N - A[i], mod)\n    for j in X[i]:\n        s = (s * pow(inv2, A[j], mod)) % mod\n        t = (t + (1 - pow(inv2, A[j], mod)) * pow(2, A[j], mod)) % mod\n    ans = (ans + 1 - s * t) % mod\nprint((ans * inv2 % mod))\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nfrom collections import deque\n\nN = int(eval(input()))\nX = [[] for i in range(N)]\nfor i in range(N - 1):\n    x, y = list(map(int, input().split()))\n    X[x - 1].append(y - 1)\n    X[y - 1].append(x - 1)\ni0 = min([i for i in range(N) if len(X[i]) == 1])\nP = [-1] * N\nQ = deque([i0])\nR = []\nwhile Q:\n    i = deque.popleft(Q)\n    R.append(i)\n    for a in X[i]:\n        if a != P[i]:\n            P[a] = i\n            X[a].remove(i)\n            deque.append(Q, a)\nmod = 10**9 + 7\npow2 = [1]\nfor i in range(N + 10):\n    pow2.append(pow2[-1] * 2 % mod)\ninv2 = (mod + 1) \/\/ 2\ninvpow2 = [pow(pow2[-1], mod - 2, mod)]\nfor i in range(N + 10)[::-1]:\n    invpow2.append(invpow2[-1] * 2 % mod)\ninvpow2 = invpow2[::-1]\nA = [1] * N\nfor i in R[::-1]:\n    s = 0\n    for j in X[i]:\n        A[i] += A[j]\nans = 0\nfor i in range(N):\n    s = pow(inv2, N - A[i], mod)\n    t = 1 + (1 - invpow2[N - A[i]]) * pow2[N - A[i]]\n    for j in X[i]:\n        s = (s * invpow2[A[j]]) % mod\n        t = (t + (1 - invpow2[A[j]]) * pow2[A[j]]) % mod\n    ans = (ans + 1 - s * t) % mod\nprint((ans * inv2 % mod))\n","code_same":false,"relative_loc_diff_percent":18.0,"diff":["+pow2 = [1]","+for i in range(N + 10):","+    pow2.append(pow2[-1] * 2 % mod)","+invpow2 = [pow(pow2[-1], mod - 2, mod)]","+for i in range(N + 10)[::-1]:","+    invpow2.append(invpow2[-1] * 2 % mod)","+invpow2 = invpow2[::-1]","-    t = 1 + (1 - pow(inv2, N - A[i], mod)) * pow(2, N - A[i], mod)","+    t = 1 + (1 - invpow2[N - A[i]]) * pow2[N - A[i]]","-        s = (s * pow(inv2, A[j], mod)) % mod","-        t = (t + (1 - pow(inv2, A[j], mod)) * pow(2, A[j], mod)) % mod","+        s = (s * invpow2[A[j]]) % mod","+        t = (t + (1 - invpow2[A[j]]) * pow2[A[j]]) % mod"],"diff_only_import_comment":false,"measured_runtime_v0":0.2550587091,"measured_runtime_v1":0.1362446928,"runtime_lift":1.8720634461,"key":["s981663077","s820806781"]}
{"user_id":"u474423089","problem_id":"p03575","language":"python","submission_id_v0":"s795258153","submission_id_v1":"s793995977","cpu_time_v0":206,"cpu_time_v1":23,"memory_v0":14300,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.83,"input":"import numpy as np\n\nfrom scipy.sparse.csgraph import connected_components\n\nfrom scipy.sparse import csr_matrix\n\ndef main():\n\n    n,m=list(map(int,input().split(' ')))\n\n    graph=[[0 for i in range(n)] for j in range(n)]\n\n    graph_del=[]\n\n    ans = 0\n\n\n\n    for i in range(m):\n\n        e_1,e_2=list(map(int,input().split(' ')))\n\n        graph[e_1-1][e_2-1]=1\n\n        graph[e_2-1][e_1-1]=1\n\n        graph_del.append((e_1,e_2))\n\n\n\n    for i,j in graph_del:\n\n        graph[i-1][j-1]=0\n\n        graph[j-1][i-1]=0\n\n        if connected_components(np.array(graph),return_labels=False)!=1:\n\n            ans += 1\n\n        graph[i-1][j-1]=1\n\n        graph[j-1][i-1]=1\n\n    print(ans)\n\n\n\n\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"class UnionFind:\n\n    def __init__(self,N):\n\n        self.par =[-1 for i in range(N)]\n\n    def find(self,x):\n\n        if self.par[x] < 0:\n\n            return x\n\n        else:\n\n            self.par[x] = self.find(self.par[x])\n\n            return self.par[x]\n\n\n\n    def unite(self,x,y):\n\n        x = self.find(x)\n\n        y = self.find(y)\n\n        if x==y:\n\n            return\n\n        if self.par[x] > self.par[y]:\n\n            x,y = y,x\n\n        self.par[x] +=self.par[y]\n\n        self.par[y] = x\n\n\n\n    def size(self,x):\n\n        return -self.par[self.find(x)]\n\n    def same(self,x,y):\n\n        return self.find(x)==self.find(y)\n\n\n\nN,M=list(map(int,input().split(' ')))\n\nq = [list(map(int,input().split(' '))) for i in range(M)]\n\nans = 0\n\nfor i in range(M):\n\n    tmp = q[:i]+q[i+1:]\n\n    uf = UnionFind(N)\n\n    for j,k in tmp:\n\n        uf.unite(j-1,k-1)\n\n    for l in range(N):\n\n        if uf.size(l) != N:\n\n            ans += 1\n\n            break\n\nprint(ans)","code_v0_loc":29,"code_v1_loc":38,"code_v0_num_chars":712,"code_v1_num_chars":954,"code_v0_no_empty_lines":"import numpy as np\nfrom scipy.sparse.csgraph import connected_components\nfrom scipy.sparse import csr_matrix\n\n\ndef main():\n    n, m = list(map(int, input().split(\" \")))\n    graph = [[0 for i in range(n)] for j in range(n)]\n    graph_del = []\n    ans = 0\n    for i in range(m):\n        e_1, e_2 = list(map(int, input().split(\" \")))\n        graph[e_1 - 1][e_2 - 1] = 1\n        graph[e_2 - 1][e_1 - 1] = 1\n        graph_del.append((e_1, e_2))\n    for i, j in graph_del:\n        graph[i - 1][j - 1] = 0\n        graph[j - 1][i - 1] = 0\n        if connected_components(np.array(graph), return_labels=False) != 1:\n            ans += 1\n        graph[i - 1][j - 1] = 1\n        graph[j - 1][i - 1] = 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"class UnionFind:\n    def __init__(self, N):\n        self.par = [-1 for i in range(N)]\n\n    def find(self, x):\n        if self.par[x] < 0:\n            return x\n        else:\n            self.par[x] = self.find(self.par[x])\n            return self.par[x]\n\n    def unite(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return\n        if self.par[x] > self.par[y]:\n            x, y = y, x\n        self.par[x] += self.par[y]\n        self.par[y] = x\n\n    def size(self, x):\n        return -self.par[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n\nN, M = list(map(int, input().split(\" \")))\nq = [list(map(int, input().split(\" \"))) for i in range(M)]\nans = 0\nfor i in range(M):\n    tmp = q[:i] + q[i + 1 :]\n    uf = UnionFind(N)\n    for j, k in tmp:\n        uf.unite(j - 1, k - 1)\n    for l in range(N):\n        if uf.size(l) != N:\n            ans += 1\n            break\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":23.6842105263,"diff":["-import numpy as np","-from scipy.sparse.csgraph import connected_components","-from scipy.sparse import csr_matrix","+class UnionFind:","+    def __init__(self, N):","+        self.par = [-1 for i in range(N)]","+","+    def find(self, x):","+        if self.par[x] < 0:","+            return x","+        else:","+            self.par[x] = self.find(self.par[x])","+            return self.par[x]","+","+    def unite(self, x, y):","+        x = self.find(x)","+        y = self.find(y)","+        if x == y:","+            return","+        if self.par[x] > self.par[y]:","+            x, y = y, x","+        self.par[x] += self.par[y]","+        self.par[y] = x","+","+    def size(self, x):","+        return -self.par[self.find(x)]","+","+    def same(self, x, y):","+        return self.find(x) == self.find(y)","-def main():","-    n, m = list(map(int, input().split(\" \")))","-    graph = [[0 for i in range(n)] for j in range(n)]","-    graph_del = []","-    ans = 0","-    for i in range(m):","-        e_1, e_2 = list(map(int, input().split(\" \")))","-        graph[e_1 - 1][e_2 - 1] = 1","-        graph[e_2 - 1][e_1 - 1] = 1","-        graph_del.append((e_1, e_2))","-    for i, j in graph_del:","-        graph[i - 1][j - 1] = 0","-        graph[j - 1][i - 1] = 0","-        if connected_components(np.array(graph), return_labels=False) != 1:","+N, M = list(map(int, input().split(\" \")))","+q = [list(map(int, input().split(\" \"))) for i in range(M)]","+ans = 0","+for i in range(M):","+    tmp = q[:i] + q[i + 1 :]","+    uf = UnionFind(N)","+    for j, k in tmp:","+        uf.unite(j - 1, k - 1)","+    for l in range(N):","+        if uf.size(l) != N:","-        graph[i - 1][j - 1] = 1","-        graph[j - 1][i - 1] = 1","-    print(ans)","-","-","-if __name__ == \"__main__\":","-    main()","+            break","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.9810539348,"measured_runtime_v1":0.2057695253,"runtime_lift":9.6275380522,"key":["s795258153","s793995977"]}
{"user_id":"u898080410","problem_id":"p03060","language":"python","submission_id_v0":"s092296313","submission_id_v1":"s809303091","cpu_time_v0":150,"cpu_time_v1":17,"memory_v0":12488,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.67,"input":"import numpy as np\n\n\n\nn = int(eval(input()))\n\nv = np.array(list(map(int, input().split())))\n\nc = np.array(list(map(int, input().split())))\n\np = v-c\n\nans = 0\n\nfor i in p:\n\n    if i>0:\n\n        ans+=i\n\n\n\nprint(ans)\n","target":"n=int(eval(input()))\n\nV=list(map(int,input().split()))\n\nC=list(map(int,input().split()))\n\nans=0\n\nfor v,c in zip(V,C):\n\n    diff=v-c\n\n    if 0<diff:\n\n        ans+=diff\n\nprint(ans)","code_v0_loc":12,"code_v1_loc":9,"code_v0_num_chars":207,"code_v1_num_chars":172,"code_v0_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\nv = np.array(list(map(int, input().split())))\nc = np.array(list(map(int, input().split())))\np = v - c\nans = 0\nfor i in p:\n    if i > 0:\n        ans += i\nprint(ans)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nV = list(map(int, input().split()))\nC = list(map(int, input().split()))\nans = 0\nfor v, c in zip(V, C):\n    diff = v - c\n    if 0 < diff:\n        ans += diff\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-import numpy as np","-","-v = np.array(list(map(int, input().split())))","-c = np.array(list(map(int, input().split())))","-p = v - c","+V = list(map(int, input().split()))","+C = list(map(int, input().split()))","-for i in p:","-    if i > 0:","-        ans += i","+for v, c in zip(V, C):","+    diff = v - c","+    if 0 < diff:","+        ans += diff"],"diff_only_import_comment":false,"measured_runtime_v0":1.3782214599,"measured_runtime_v1":0.1984234223,"runtime_lift":6.9458607435,"key":["s092296313","s809303091"]}
{"user_id":"u624696727","problem_id":"p02725","language":"python","submission_id_v0":"s863705375","submission_id_v1":"s938285380","cpu_time_v0":334,"cpu_time_v1":121,"memory_v0":40120,"memory_v1":25692,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":63.77,"input":"import sys\n\nimport numpy as np\n\n\n\nsys.setrecursionlimit(10 ** 6)\n\nint1 = lambda x: int(x) - 1\n\nprintV = lambda x: print(*x, sep=\"\\n\")\n\nprintH = lambda x: print(\" \".join(map(str,x)))\n\ndef IS(): return sys.stdin.readline()[:-1]\n\ndef II(): return int(sys.stdin.readline())\n\ndef MI(): return map(int, sys.stdin.readline().split())\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\n\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\n\ndef LII(rows_number): return [II() for _ in range(rows_number)]\n\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\n\n\n\ndef main():\n\n\tK,N = MI()\n\n\tA = np.array(LI())\n\n\tA_LAST = K+A[0] - A[N-1]\n\n\tB = A[1:]-A[:N-1]\n\n\tB = np.sort(B)\n\n\tprint(K-max(B[N-2],A_LAST))\n\n\n\nif __name__ == '__main__':\n\n\tmain()\n","target":"import sys\n\n\n\nsys.setrecursionlimit(10 ** 6)\n\nint1 = lambda x: int(x) - 1\n\nprintV = lambda x: print(*x, sep=\"\\n\")\n\nprintH = lambda x: print(\" \".join(map(str,x)))\n\ndef IS(): return sys.stdin.readline()[:-1]\n\ndef II(): return int(sys.stdin.readline())\n\ndef MI(): return map(int, sys.stdin.readline().split())\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\n\ndef LI1(): return list(map(int1, sys.stdin.readline().split()))\n\ndef LII(rows_number): return [II() for _ in range(rows_number)]\n\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\ndef LLI1(rows_number): return [LI1() for _ in range(rows_number)]\n\n\n\ndef main():\n\n\tk,n = MI()\n\n\ta = LI()\n\n\tb = [0]*n\n\n\tfor i in range(n):\n\n\t\tif i == n-1:\n\n\t\t\tb[i] = a[0]+k-a[i]\n\n\t\telse:\n\n\t\t\tb[i] = a[i+1]-a[i]\n\n\tb.sort()\n\n\tprint(k-b[-1])\n\n\n\n\n\nif __name__ == '__main__':\n\n\tmain()\n","code_v0_loc":26,"code_v1_loc":30,"code_v0_num_chars":833,"code_v1_num_chars":843,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nsys.setrecursionlimit(10**6)\nint1 = lambda x: int(x) - 1\nprintV = lambda x: print(*x, sep=\"\\n\")\nprintH = lambda x: print(\" \".join(map(str, x)))\n\n\ndef IS():\n    return sys.stdin.readline()[:-1]\n\n\ndef II():\n    return int(sys.stdin.readline())\n\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef LI1():\n    return list(map(int1, sys.stdin.readline().split()))\n\n\ndef LII(rows_number):\n    return [II() for _ in range(rows_number)]\n\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\n\ndef LLI1(rows_number):\n    return [LI1() for _ in range(rows_number)]\n\n\ndef main():\n    K, N = MI()\n    A = np.array(LI())\n    A_LAST = K + A[0] - A[N - 1]\n    B = A[1:] - A[: N - 1]\n    B = np.sort(B)\n    print(K - max(B[N - 2], A_LAST))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10**6)\nint1 = lambda x: int(x) - 1\nprintV = lambda x: print(*x, sep=\"\\n\")\nprintH = lambda x: print(\" \".join(map(str, x)))\n\n\ndef IS():\n    return sys.stdin.readline()[:-1]\n\n\ndef II():\n    return int(sys.stdin.readline())\n\n\ndef MI():\n    return map(int, sys.stdin.readline().split())\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef LI1():\n    return list(map(int1, sys.stdin.readline().split()))\n\n\ndef LII(rows_number):\n    return [II() for _ in range(rows_number)]\n\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\n\ndef LLI1(rows_number):\n    return [LI1() for _ in range(rows_number)]\n\n\ndef main():\n    k, n = MI()\n    a = LI()\n    b = [0] * n\n    for i in range(n):\n        if i == n - 1:\n            b[i] = a[0] + k - a[i]\n        else:\n            b[i] = a[i + 1] - a[i]\n    b.sort()\n    print(k - b[-1])\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":13.3333333333,"diff":["-import numpy as np","-    K, N = MI()","-    A = np.array(LI())","-    A_LAST = K + A[0] - A[N - 1]","-    B = A[1:] - A[: N - 1]","-    B = np.sort(B)","-    print(K - max(B[N - 2], A_LAST))","+    k, n = MI()","+    a = LI()","+    b = [0] * n","+    for i in range(n):","+        if i == n - 1:","+            b[i] = a[0] + k - a[i]","+        else:","+            b[i] = a[i + 1] - a[i]","+    b.sort()","+    print(k - b[-1])"],"diff_only_import_comment":false,"measured_runtime_v0":1.0759786758,"measured_runtime_v1":0.207579791,"runtime_lift":5.1834461855,"key":["s863705375","s938285380"]}
{"user_id":"u135847648","problem_id":"p02702","language":"python","submission_id_v0":"s407946242","submission_id_v1":"s697976094","cpu_time_v0":286,"cpu_time_v1":107,"memory_v0":27184,"memory_v1":9584,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":62.59,"input":"from collections import defaultdict\n\nimport numpy as np\n\ndef main():\n\n    s = eval(input())\n\n    n = len(s)\n\n    d = np.zeros(2019,np.int64)\n\n    ans = 0\n\n    num = 0\n\n    pow10 = 1\n\n    d[0] = 1\n\n    for i in reversed(list(range(n))):\n\n        pow10 = pow10 * 10 % 2019\n\n        num += int(s[i]) * pow10\n\n        #print(num, num % 2019, i)\n\n        mod = num % 2019\n\n        ans += d[mod]\n\n        d[mod] += 1\n\n    print(ans)\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"from collections import defaultdict\n\n\n\ndef main():\n\n    s = eval(input())\n\n    n = len(s)\n\n    ans = 0\n\n    num = 0\n\n    pow10 = 1\n\n    d = defaultdict(int)\n\n    d[0] = 1\n\n    for i in reversed(list(range(n))):\n\n        # pow10\u309210 ** (n-1-i)\u306b\u3057\u3066\u308b\u3060\u3051\u3067TLE\u3057\u3066\u3044\u305f\n\n        pow10 = pow10 * 10 % 2019\n\n        num += int(s[i]) * pow10\n\n        mod = num % 2019\n\n        ans += d[mod]\n\n        d[mod] += 1\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":21,"code_v1_loc":22,"code_v0_num_chars":457,"code_v1_num_chars":443,"code_v0_no_empty_lines":"from collections import defaultdict\nimport numpy as np\n\n\ndef main():\n    s = eval(input())\n    n = len(s)\n    d = np.zeros(2019, np.int64)\n    ans = 0\n    num = 0\n    pow10 = 1\n    d[0] = 1\n    for i in reversed(list(range(n))):\n        pow10 = pow10 * 10 % 2019\n        num += int(s[i]) * pow10\n        # print(num, num % 2019, i)\n        mod = num % 2019\n        ans += d[mod]\n        d[mod] += 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"from collections import defaultdict\n\n\ndef main():\n    s = eval(input())\n    n = len(s)\n    ans = 0\n    num = 0\n    pow10 = 1\n    d = defaultdict(int)\n    d[0] = 1\n    for i in reversed(list(range(n))):\n        # pow10\u309210 ** (n-1-i)\u306b\u3057\u3066\u308b\u3060\u3051\u3067TLE\u3057\u3066\u3044\u305f\n        pow10 = pow10 * 10 % 2019\n        num += int(s[i]) * pow10\n        mod = num % 2019\n        ans += d[mod]\n        d[mod] += 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":4.5454545455,"diff":["-import numpy as np","-    d = np.zeros(2019, np.int64)","+    d = defaultdict(int)","+        # pow10\u309210 ** (n-1-i)\u306b\u3057\u3066\u308b\u3060\u3051\u3067TLE\u3057\u3066\u3044\u305f","-        # print(num, num % 2019, i)"],"diff_only_import_comment":false,"measured_runtime_v0":1.7964013727,"measured_runtime_v1":0.2822417974,"runtime_lift":6.3647602476,"key":["s407946242","s697976094"]}
{"user_id":"u301624971","problem_id":"p03796","language":"python","submission_id_v0":"s825153134","submission_id_v1":"s210395809","cpu_time_v0":230,"cpu_time_v1":29,"memory_v0":3972,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.39,"input":"from math import factorial\n\ndef myAnswer(N:int) ->int:\n\n   ans =factorial(N)\n\n   return ans % (10**9 + 7)\n\n\n\ndef modelAnswer():\n\n   tmp=1\n\ndef main():\n\n   N = int(eval(input()))\n\n   print((myAnswer(N)))\n\n\n\n\n\nif __name__ == '__main__':\n\n   main()","target":"def modelAnswer(N:int) -> int:\n\n   ans = 1\n\n   for i in range(1,N+1):\n\n      ans = (ans*i) % (10**9 + 7)\n\n   return ans \n\ndef main():\n\n   N = int(eval(input()))\n\n   print((modelAnswer(N)))\n\n\n\n\n\nif __name__ == '__main__':\n\n   main()\n","code_v0_loc":14,"code_v1_loc":12,"code_v0_num_chars":237,"code_v1_num_chars":224,"code_v0_no_empty_lines":"from math import factorial\n\n\ndef myAnswer(N: int) -> int:\n    ans = factorial(N)\n    return ans % (10**9 + 7)\n\n\ndef modelAnswer():\n    tmp = 1\n\n\ndef main():\n    N = int(eval(input()))\n    print((myAnswer(N)))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def modelAnswer(N: int) -> int:\n    ans = 1\n    for i in range(1, N + 1):\n        ans = (ans * i) % (10**9 + 7)\n    return ans\n\n\ndef main():\n    N = int(eval(input()))\n    print((modelAnswer(N)))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["-from math import factorial","-","-","-def myAnswer(N: int) -> int:","-    ans = factorial(N)","-    return ans % (10**9 + 7)","-","-","-def modelAnswer():","-    tmp = 1","+def modelAnswer(N: int) -> int:","+    ans = 1","+    for i in range(1, N + 1):","+        ans = (ans * i) % (10**9 + 7)","+    return ans","-    print((myAnswer(N)))","+    print((modelAnswer(N)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.7093277271,"measured_runtime_v1":0.3704600389,"runtime_lift":1.9147212994,"key":["s825153134","s210395809"]}
{"user_id":"u714642969","problem_id":"p02881","language":"python","submission_id_v0":"s395457883","submission_id_v1":"s001240926","cpu_time_v0":284,"cpu_time_v1":184,"memory_v0":14132,"memory_v1":39024,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":35.21,"input":"import numpy as np\n\n\n\nN=int(eval(input()))\n\na=int(np.sqrt(N))\n\nb=float('inf')\n\nfor i in range(1,a+1):\n\n    if N%i==0:\n\n        if i+N\/\/i<b:\n\n            ans=i\n\n\n\nprint((ans+N\/\/ans-2))\n","target":"# -*- coding: utf-8 -*-\n\nimport sys\n\nfrom math import sqrt\n\nsys.setrecursionlimit(10**9)\n\nINF=10**18\n\nMOD=10**9+7\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\n\ndef main():\n\n    N=int(eval(input()))\n\n    tmp=INF\n\n    for i in range(1,10**6+1):\n\n        if N%i==0:\n\n            tmp=min(tmp,i+N\/\/i)\n\n    print((tmp-2))\n\n    \n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":11,"code_v1_loc":19,"code_v0_num_chars":176,"code_v1_num_chars":364,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\na = int(np.sqrt(N))\nb = float(\"inf\")\nfor i in range(1, a + 1):\n    if N % i == 0:\n        if i + N \/\/ i < b:\n            ans = i\nprint((ans + N \/\/ ans - 2))\n","code_v1_no_empty_lines":"# -*- coding: utf-8 -*-\nimport sys\nfrom math import sqrt\n\nsys.setrecursionlimit(10**9)\nINF = 10**18\nMOD = 10**9 + 7\n\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\n\ndef main():\n    N = int(eval(input()))\n    tmp = INF\n    for i in range(1, 10**6 + 1):\n        if N % i == 0:\n            tmp = min(tmp, i + N \/\/ i)\n    print((tmp - 2))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":42.1052631579,"diff":["-import numpy as np","+# -*- coding: utf-8 -*-","+import sys","+from math import sqrt","-N = int(eval(input()))","-a = int(np.sqrt(N))","-b = float(\"inf\")","-for i in range(1, a + 1):","-    if N % i == 0:","-        if i + N \/\/ i < b:","-            ans = i","-print((ans + N \/\/ ans - 2))","+sys.setrecursionlimit(10**9)","+INF = 10**18","+MOD = 10**9 + 7","+","+","+def input():","+    return sys.stdin.readline().rstrip()","+","+","+def main():","+    N = int(eval(input()))","+    tmp = INF","+    for i in range(1, 10**6 + 1):","+        if N % i == 0:","+            tmp = min(tmp, i + N \/\/ i)","+    print((tmp - 2))","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":1.2159754148,"measured_runtime_v1":0.7220378649,"runtime_lift":1.6840881536,"key":["s395457883","s001240926"]}
{"user_id":"u814986259","problem_id":"p03253","language":"python","submission_id_v0":"s485862909","submission_id_v1":"s605189811","cpu_time_v0":218,"cpu_time_v1":103,"memory_v0":32960,"memory_v1":20876,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":52.75,"input":"import math\n\nN, M = list(map(int, input().split()))\n\n\n\n\n\ndef factorization(n):\n\n    arr = []\n\n    temp = n\n\n    for i in range(2, int(-(-n**0.5\/\/1))+1):\n\n        if temp % i == 0:\n\n            cnt = 0\n\n            while temp % i == 0:\n\n                cnt += 1\n\n                temp \/\/= i\n\n            arr.append([i, cnt])\n\n    if temp != 1:\n\n        arr.append([temp, 1])\n\n\n\n    if arr == [] and n != 1:\n\n        arr.append([n, 1])\n\n\n\n    return arr\n\n\n\n\n\nmod = 10**9 + 7\n\n\n\n\n\ndef cmb(n, r, mod):\n\n    if (r < 0 or r > n):\n\n        return 0\n\n    r = min(r, n-r)\n\n    return g1[n] * g2[r] * g2[n-r] % mod\n\n\n\n\n\ng1 = [1, 1]\n\ng2 = [1, 1]\n\ninverse = [0, 1]\n\nfor i in range(2, 2*10**5 + 1):\n\n    g1.append((g1[-1] * i) % mod)\n\n    inverse.append((-inverse[mod % i] * (mod\/\/i)) % mod)\n\n    g2.append((g2[-1] * inverse[-1]) % mod)\n\n\n\n\n\nprimes = factorization(M)\n\n# \u4f55\u7b87\u6240\u306b\u5206\u3051\u308b\u304b\uff08cnt\u4ee5\u4e0b\uff09,\u305d\u306e\u4e2d\u3067\u3069\u3046\u5206\u3051\u308b\u304b\uff08\u3057\u304d\u308a\u3092\u3069\u3053\u306b\u304a\u304f\u304b\uff08\u632f\u308a\u5206\u3051\u3089\u308c\u306a\u3044\u3082\u306e\u304c\u51fa\u308b\u3068\u9078\u3079\u308c\u306a\u3044\u306e\u3068\u304a\u306a\u3058\u306b\u306a\u308b\u306e\u3067\u3001cnt - \u9078\u3093\u3060\u6570\uff09\uff09\n\n\n\nans = 1\n\n\n\nfor p, cnt in primes:\n\n    tmp = cmb(N+cnt-1, N-1, mod)\n\n    ans *= tmp\n\n    ans %= mod\n\n\n\nprint(ans)\n","target":"def main():\n\n    N, M = list(map(int, input().split()))\n\n\n\n    def factorization(n):\n\n        arr = []\n\n        temp = n\n\n        for i in range(2, int(-(-n**0.5\/\/1))+1):\n\n            if temp % i == 0:\n\n                cnt = 0\n\n                while temp % i == 0:\n\n                    cnt += 1\n\n                    temp \/\/= i\n\n                arr.append([i, cnt])\n\n        if temp != 1:\n\n            arr.append([temp, 1])\n\n\n\n        if arr == [] and n != 1:\n\n            arr.append([n, 1])\n\n\n\n        return arr\n\n\n\n    mod = 10**9 + 7\n\n\n\n    def cmb(n, r, mod):\n\n        if (r < 0 or r > n):\n\n            return 0\n\n        r = min(r, n-r)\n\n        return g1[n] * g2[r] * g2[n-r] % mod\n\n\n\n    g1 = [1, 1]\n\n    g2 = [1, 1]\n\n    inverse = [0, 1]\n\n    for i in range(2, N+100 + 1):\n\n        g1.append((g1[-1] * i) % mod)\n\n        inverse.append((-inverse[mod % i] * (mod\/\/i)) % mod)\n\n        g2.append((g2[-1] * inverse[-1]) % mod)\n\n\n\n    primes = factorization(M)\n\n    # \u4f55\u7b87\u6240\u306b\u5206\u3051\u308b\u304b\uff08cnt\u4ee5\u4e0b\uff09,\u305d\u306e\u4e2d\u3067\u3069\u3046\u5206\u3051\u308b\u304b\uff08\u3057\u304d\u308a\u3092\u3069\u3053\u306b\u304a\u304f\u304b\uff08\u632f\u308a\u5206\u3051\u3089\u308c\u306a\u3044\u3082\u306e\u304c\u51fa\u308b\u3068\u9078\u3079\u308c\u306a\u3044\u306e\u3068\u304a\u306a\u3058\u306b\u306a\u308b\u306e\u3067\u3001cnt - \u9078\u3093\u3060\u6570\uff09\uff09\n\n\n\n    ans = 1\n\n\n\n    for p, cnt in primes:\n\n        tmp = cmb(N+cnt-1, N-1, mod)\n\n        ans *= tmp\n\n        ans %= mod\n\n\n\n    print(ans)\n\n\n\n\n\nmain()\n","code_v0_loc":53,"code_v1_loc":51,"code_v0_num_chars":1048,"code_v1_num_chars":1196,"code_v0_no_empty_lines":"import math\n\nN, M = list(map(int, input().split()))\n\n\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-(n**0.5) \/\/ 1)) + 1):\n        if temp % i == 0:\n            cnt = 0\n            while temp % i == 0:\n                cnt += 1\n                temp \/\/= i\n            arr.append([i, cnt])\n    if temp != 1:\n        arr.append([temp, 1])\n    if arr == [] and n != 1:\n        arr.append([n, 1])\n    return arr\n\n\nmod = 10**9 + 7\n\n\ndef cmb(n, r, mod):\n    if r < 0 or r > n:\n        return 0\n    r = min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\ng1 = [1, 1]\ng2 = [1, 1]\ninverse = [0, 1]\nfor i in range(2, 2 * 10**5 + 1):\n    g1.append((g1[-1] * i) % mod)\n    inverse.append((-inverse[mod % i] * (mod \/\/ i)) % mod)\n    g2.append((g2[-1] * inverse[-1]) % mod)\nprimes = factorization(M)\n# \u4f55\u7b87\u6240\u306b\u5206\u3051\u308b\u304b\uff08cnt\u4ee5\u4e0b\uff09,\u305d\u306e\u4e2d\u3067\u3069\u3046\u5206\u3051\u308b\u304b\uff08\u3057\u304d\u308a\u3092\u3069\u3053\u306b\u304a\u304f\u304b\uff08\u632f\u308a\u5206\u3051\u3089\u308c\u306a\u3044\u3082\u306e\u304c\u51fa\u308b\u3068\u9078\u3079\u308c\u306a\u3044\u306e\u3068\u304a\u306a\u3058\u306b\u306a\u308b\u306e\u3067\u3001cnt - \u9078\u3093\u3060\u6570\uff09\uff09\nans = 1\nfor p, cnt in primes:\n    tmp = cmb(N + cnt - 1, N - 1, mod)\n    ans *= tmp\n    ans %= mod\nprint(ans)\n","code_v1_no_empty_lines":"def main():\n    N, M = list(map(int, input().split()))\n\n    def factorization(n):\n        arr = []\n        temp = n\n        for i in range(2, int(-(-(n**0.5) \/\/ 1)) + 1):\n            if temp % i == 0:\n                cnt = 0\n                while temp % i == 0:\n                    cnt += 1\n                    temp \/\/= i\n                arr.append([i, cnt])\n        if temp != 1:\n            arr.append([temp, 1])\n        if arr == [] and n != 1:\n            arr.append([n, 1])\n        return arr\n\n    mod = 10**9 + 7\n\n    def cmb(n, r, mod):\n        if r < 0 or r > n:\n            return 0\n        r = min(r, n - r)\n        return g1[n] * g2[r] * g2[n - r] % mod\n\n    g1 = [1, 1]\n    g2 = [1, 1]\n    inverse = [0, 1]\n    for i in range(2, N + 100 + 1):\n        g1.append((g1[-1] * i) % mod)\n        inverse.append((-inverse[mod % i] * (mod \/\/ i)) % mod)\n        g2.append((g2[-1] * inverse[-1]) % mod)\n    primes = factorization(M)\n    # \u4f55\u7b87\u6240\u306b\u5206\u3051\u308b\u304b\uff08cnt\u4ee5\u4e0b\uff09,\u305d\u306e\u4e2d\u3067\u3069\u3046\u5206\u3051\u308b\u304b\uff08\u3057\u304d\u308a\u3092\u3069\u3053\u306b\u304a\u304f\u304b\uff08\u632f\u308a\u5206\u3051\u3089\u308c\u306a\u3044\u3082\u306e\u304c\u51fa\u308b\u3068\u9078\u3079\u308c\u306a\u3044\u306e\u3068\u304a\u306a\u3058\u306b\u306a\u308b\u306e\u3067\u3001cnt - \u9078\u3093\u3060\u6570\uff09\uff09\n    ans = 1\n    for p, cnt in primes:\n        tmp = cmb(N + cnt - 1, N - 1, mod)\n        ans *= tmp\n        ans %= mod\n    print(ans)\n\n\nmain()\n","code_same":false,"relative_loc_diff_percent":3.7735849057,"diff":["-import math","+def main():","+    N, M = list(map(int, input().split()))","-N, M = list(map(int, input().split()))","+    def factorization(n):","+        arr = []","+        temp = n","+        for i in range(2, int(-(-(n**0.5) \/\/ 1)) + 1):","+            if temp % i == 0:","+                cnt = 0","+                while temp % i == 0:","+                    cnt += 1","+                    temp \/\/= i","+                arr.append([i, cnt])","+        if temp != 1:","+            arr.append([temp, 1])","+        if arr == [] and n != 1:","+            arr.append([n, 1])","+        return arr","+","+    mod = 10**9 + 7","+","+    def cmb(n, r, mod):","+        if r < 0 or r > n:","+            return 0","+        r = min(r, n - r)","+        return g1[n] * g2[r] * g2[n - r] % mod","+","+    g1 = [1, 1]","+    g2 = [1, 1]","+    inverse = [0, 1]","+    for i in range(2, N + 100 + 1):","+        g1.append((g1[-1] * i) % mod)","+        inverse.append((-inverse[mod % i] * (mod \/\/ i)) % mod)","+        g2.append((g2[-1] * inverse[-1]) % mod)","+    primes = factorization(M)","+    # \u4f55\u7b87\u6240\u306b\u5206\u3051\u308b\u304b\uff08cnt\u4ee5\u4e0b\uff09,\u305d\u306e\u4e2d\u3067\u3069\u3046\u5206\u3051\u308b\u304b\uff08\u3057\u304d\u308a\u3092\u3069\u3053\u306b\u304a\u304f\u304b\uff08\u632f\u308a\u5206\u3051\u3089\u308c\u306a\u3044\u3082\u306e\u304c\u51fa\u308b\u3068\u9078\u3079\u308c\u306a\u3044\u306e\u3068\u304a\u306a\u3058\u306b\u306a\u308b\u306e\u3067\u3001cnt - \u9078\u3093\u3060\u6570\uff09\uff09","+    ans = 1","+    for p, cnt in primes:","+        tmp = cmb(N + cnt - 1, N - 1, mod)","+        ans *= tmp","+        ans %= mod","+    print(ans)","-def factorization(n):","-    arr = []","-    temp = n","-    for i in range(2, int(-(-(n**0.5) \/\/ 1)) + 1):","-        if temp % i == 0:","-            cnt = 0","-            while temp % i == 0:","-                cnt += 1","-                temp \/\/= i","-            arr.append([i, cnt])","-    if temp != 1:","-        arr.append([temp, 1])","-    if arr == [] and n != 1:","-        arr.append([n, 1])","-    return arr","-","-","-mod = 10**9 + 7","-","-","-def cmb(n, r, mod):","-    if r < 0 or r > n:","-        return 0","-    r = min(r, n - r)","-    return g1[n] * g2[r] * g2[n - r] % mod","-","-","-g1 = [1, 1]","-g2 = [1, 1]","-inverse = [0, 1]","-for i in range(2, 2 * 10**5 + 1):","-    g1.append((g1[-1] * i) % mod)","-    inverse.append((-inverse[mod % i] * (mod \/\/ i)) % mod)","-    g2.append((g2[-1] * inverse[-1]) % mod)","-primes = factorization(M)","-# \u4f55\u7b87\u6240\u306b\u5206\u3051\u308b\u304b\uff08cnt\u4ee5\u4e0b\uff09,\u305d\u306e\u4e2d\u3067\u3069\u3046\u5206\u3051\u308b\u304b\uff08\u3057\u304d\u308a\u3092\u3069\u3053\u306b\u304a\u304f\u304b\uff08\u632f\u308a\u5206\u3051\u3089\u308c\u306a\u3044\u3082\u306e\u304c\u51fa\u308b\u3068\u9078\u3079\u308c\u306a\u3044\u306e\u3068\u304a\u306a\u3058\u306b\u306a\u308b\u306e\u3067\u3001cnt - \u9078\u3093\u3060\u6570\uff09\uff09","-ans = 1","-for p, cnt in primes:","-    tmp = cmb(N + cnt - 1, N - 1, mod)","-    ans *= tmp","-    ans %= mod","-print(ans)","+main()"],"diff_only_import_comment":false,"measured_runtime_v0":2.4385202043,"measured_runtime_v1":0.358972928,"runtime_lift":6.7930476471,"key":["s485862909","s605189811"]}
{"user_id":"u991567869","problem_id":"p03854","language":"python","submission_id_v0":"s135519212","submission_id_v1":"s896370774","cpu_time_v0":59,"cpu_time_v1":42,"memory_v0":9264,"memory_v1":12828,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":28.81,"input":"s = input()[::-1]\n\n\n\nwhile True:\n\n    if len(s) == 0:\n\n        break\n\n    if s[:7] == \"remaerd\":\n\n        s = s[7:]\n\n    elif s[:6] == \"resare\":\n\n        s = s[6:]\n\n    elif s[:5] == \"maerd\" or s[:5] == \"esare\":\n\n        s = s[5:]\n\n    else:\n\n        print(\"NO\")\n\n        exit()\n\n\n\nprint(\"YES\")","target":"import re\n\n\n\ns = eval(input())\n\n\n\nif re.fullmatch(r\"(dream|dreamer|erase|eraser)+\", s):\n\n    print(\"YES\")\n\nelse:\n\n    print(\"NO\")","code_v0_loc":16,"code_v1_loc":8,"code_v0_num_chars":294,"code_v1_num_chars":123,"code_v0_no_empty_lines":"s = input()[::-1]\nwhile True:\n    if len(s) == 0:\n        break\n    if s[:7] == \"remaerd\":\n        s = s[7:]\n    elif s[:6] == \"resare\":\n        s = s[6:]\n    elif s[:5] == \"maerd\" or s[:5] == \"esare\":\n        s = s[5:]\n    else:\n        print(\"NO\")\n        exit()\nprint(\"YES\")\n","code_v1_no_empty_lines":"import re\n\ns = eval(input())\nif re.fullmatch(r\"(dream|dreamer|erase|eraser)+\", s):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-s = input()[::-1]","-while True:","-    if len(s) == 0:","-        break","-    if s[:7] == \"remaerd\":","-        s = s[7:]","-    elif s[:6] == \"resare\":","-        s = s[6:]","-    elif s[:5] == \"maerd\" or s[:5] == \"esare\":","-        s = s[5:]","-    else:","-        print(\"NO\")","-        exit()","-print(\"YES\")","+import re","+","+s = eval(input())","+if re.fullmatch(r\"(dream|dreamer|erase|eraser)+\", s):","+    print(\"YES\")","+else:","+    print(\"NO\")"],"diff_only_import_comment":false,"measured_runtime_v0":0.1782437842,"measured_runtime_v1":0.0065195048,"runtime_lift":27.340080233,"key":["s135519212","s896370774"]}
{"user_id":"u687343821","problem_id":"p03074","language":"python","submission_id_v0":"s599311447","submission_id_v1":"s168736691","cpu_time_v0":62,"cpu_time_v1":44,"memory_v0":5568,"memory_v1":4596,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":29.03,"input":"import sys\n\nstdin = sys.stdin \n\nni = lambda: int(ns())\n\nna = lambda: list(map(int, stdin.readline().split()))\n\nns = lambda: stdin.readline()\n\n\n\ndef Solve():\n\n    N,K=na()\n\n    S=[int(d) for d in eval(input())]\n\n    l=[]\n\n    N=len(S)\n\n    if(S[0]==0):\n\n        l.append(0)\n\n    b=S[0]\n\n    ct=1\n\n    for i in S[1:]:\n\n        if(b!=i):\n\n            l.append(ct)\n\n            ct=1\n\n            b=i\n\n        else:\n\n            ct+=1\n\n    l.append(ct)\n\n    len_l=len(l)\n\n    if(len_l\/\/2 <= K):\n\n        return sum(l)\n\n    ans = res = sum(l[:2*K+1])\n\n    \n\n    if(len_l%2==0):\n\n        l.append(0)\n\n        len_l+=1\n\n    g = K * 2 + 1\n\n    for i in range(K*2+1,len_l-1,2):\n\n        ans -= l[i-g] + l[i-g+1]\n\n        ans += l[i] + l[1+i]\n\n        if(res<ans):\n\n            res=ans\n\n    #print(S)\n\n    #print(l)\n\n    #print(len_l)\n\n    return res\n\n\n\nprint((Solve()))","target":"import sys\n\nstdin = sys.stdin \n\nni = lambda: int(ns())\n\nna = lambda: list(map(int, stdin.readline().split()))\n\nns = lambda: stdin.readline()\n\n\n\ndef Solve():\n\n    N,K=na()\n\n    S=eval(input())\n\n    l=[]\n\n    N=len(S)\n\n    #print(len(S))\n\n    if(S[0]==\"0\"):\n\n        #print(\"00\")\n\n        l.append(0)\n\n    t=S[0]\n\n    ct=1\n\n    #print(\"aa\")\n\n    #print(S)\n\n    #print(S[0],S[1],S[2])\n\n    for b in S[1:]:\n\n        #print(b)\n\n        if(t!=b):\n\n            l.append(ct)\n\n            ct=1\n\n            t=b\n\n        else:\n\n            ct+=1\n\n    #print(\"bb\")\n\n    l.append(ct)\n\n    len_l=len(l)\n\n    if(len_l\/\/2 <= K):\n\n        return sum(l)\n\n    ans = res = sum(l[:2*K+1])\n\n    \n\n    if(len_l%2==0):\n\n        l.append(0)\n\n        len_l+=1\n\n    g = K * 2 + 1\n\n    for i in range(K*2+1,len_l-1,2):\n\n        ans -= l[i-g] + l[i-g+1]\n\n        ans += l[i] + l[1+i]\n\n        if(res<ans):\n\n            res=ans\n\n    #print(S)\n\n    #print(l)\n\n    #print(len_l)\n\n    return res\n\n\n\nprint((Solve()))","code_v0_loc":43,"code_v1_loc":50,"code_v0_num_chars":851,"code_v1_num_chars":975,"code_v0_no_empty_lines":"import sys\n\nstdin = sys.stdin\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline()\n\n\ndef Solve():\n    N, K = na()\n    S = [int(d) for d in eval(input())]\n    l = []\n    N = len(S)\n    if S[0] == 0:\n        l.append(0)\n    b = S[0]\n    ct = 1\n    for i in S[1:]:\n        if b != i:\n            l.append(ct)\n            ct = 1\n            b = i\n        else:\n            ct += 1\n    l.append(ct)\n    len_l = len(l)\n    if len_l \/\/ 2 <= K:\n        return sum(l)\n    ans = res = sum(l[: 2 * K + 1])\n    if len_l % 2 == 0:\n        l.append(0)\n        len_l += 1\n    g = K * 2 + 1\n    for i in range(K * 2 + 1, len_l - 1, 2):\n        ans -= l[i - g] + l[i - g + 1]\n        ans += l[i] + l[1 + i]\n        if res < ans:\n            res = ans\n    # print(S)\n    # print(l)\n    # print(len_l)\n    return res\n\n\nprint((Solve()))\n","code_v1_no_empty_lines":"import sys\n\nstdin = sys.stdin\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline()\n\n\ndef Solve():\n    N, K = na()\n    S = eval(input())\n    l = []\n    N = len(S)\n    # print(len(S))\n    if S[0] == \"0\":\n        # print(\"00\")\n        l.append(0)\n    t = S[0]\n    ct = 1\n    # print(\"aa\")\n    # print(S)\n    # print(S[0],S[1],S[2])\n    for b in S[1:]:\n        # print(b)\n        if t != b:\n            l.append(ct)\n            ct = 1\n            t = b\n        else:\n            ct += 1\n    # print(\"bb\")\n    l.append(ct)\n    len_l = len(l)\n    if len_l \/\/ 2 <= K:\n        return sum(l)\n    ans = res = sum(l[: 2 * K + 1])\n    if len_l % 2 == 0:\n        l.append(0)\n        len_l += 1\n    g = K * 2 + 1\n    for i in range(K * 2 + 1, len_l - 1, 2):\n        ans -= l[i - g] + l[i - g + 1]\n        ans += l[i] + l[1 + i]\n        if res < ans:\n            res = ans\n    # print(S)\n    # print(l)\n    # print(len_l)\n    return res\n\n\nprint((Solve()))\n","code_same":false,"relative_loc_diff_percent":14.0,"diff":["-    S = [int(d) for d in eval(input())]","+    S = eval(input())","-    if S[0] == 0:","+    # print(len(S))","+    if S[0] == \"0\":","+        # print(\"00\")","-    b = S[0]","+    t = S[0]","-    for i in S[1:]:","-        if b != i:","+    # print(\"aa\")","+    # print(S)","+    # print(S[0],S[1],S[2])","+    for b in S[1:]:","+        # print(b)","+        if t != b:","-            b = i","+            t = b","+    # print(\"bb\")"],"diff_only_import_comment":false,"measured_runtime_v0":0.2937557869,"measured_runtime_v1":0.1303456142,"runtime_lift":2.2536683623,"key":["s599311447","s168736691"]}
{"user_id":"u157020659","problem_id":"p02837","language":"python","submission_id_v0":"s547554870","submission_id_v1":"s193607306","cpu_time_v0":585,"cpu_time_v1":283,"memory_v0":3064,"memory_v1":18356,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":51.62,"input":"def check(x, y):\n\n    for a, b in zip(x, y):\n\n        if a != b and b != -1:\n\n            return False\n\n    else:\n\n        return True\n\n\n\n\n\nn = int(eval(input()))\n\nremarks = []\n\ncnt_max = 0\n\nfor _ in range(n):\n\n    a = int(eval(input()))\n\n    x = [tuple(map(int, input().split())) for i in range(a)]\n\n    r = [-1] * n\n\n    for i, j in x:\n\n        r[i - 1] = j\n\n    remarks.append(r)\n\nfor r in range(2 ** n):\n\n    r = list(bin(r)[2:].zfill(n))\n\n    r = [int(i) for i in r[:]]\n\n    cnt = 0\n\n    for i in range(n):\n\n        if r[i] == 1:\n\n            flag = check(r, remarks[i])\n\n            cnt += 1\n\n            if not flag:\n\n                cnt = 0\n\n                break\n\n    cnt_max = max(cnt, cnt_max)\n\nprint(cnt_max)","target":"import numpy as np\n\nimport itertools\n\n\n\nn = int(eval(input()))\n\ninfo = []\n\nfor i in range(n):\n\n    a = int(eval(input()))\n\n    for _ in range(a):\n\n        x, y = list(map(int, input().split()))\n\n        info.append((i, x - 1, y))\n\n\n\na = np.array(list(itertools.product([0, 1], repeat=n)), dtype=np.bool)\n\nfor i, x, y in info:\n\n    bl = (~a[:, i]) | (a[:, x] == bool(y))\n\n    a = a[bl]\n\n\n\nans = a.sum(axis=1).max()\n\nprint(ans)","code_v0_loc":31,"code_v1_loc":18,"code_v0_num_chars":708,"code_v1_num_chars":407,"code_v0_no_empty_lines":"def check(x, y):\n    for a, b in zip(x, y):\n        if a != b and b != -1:\n            return False\n    else:\n        return True\n\n\nn = int(eval(input()))\nremarks = []\ncnt_max = 0\nfor _ in range(n):\n    a = int(eval(input()))\n    x = [tuple(map(int, input().split())) for i in range(a)]\n    r = [-1] * n\n    for i, j in x:\n        r[i - 1] = j\n    remarks.append(r)\nfor r in range(2**n):\n    r = list(bin(r)[2:].zfill(n))\n    r = [int(i) for i in r[:]]\n    cnt = 0\n    for i in range(n):\n        if r[i] == 1:\n            flag = check(r, remarks[i])\n            cnt += 1\n            if not flag:\n                cnt = 0\n                break\n    cnt_max = max(cnt, cnt_max)\nprint(cnt_max)\n","code_v1_no_empty_lines":"import numpy as np\nimport itertools\n\nn = int(eval(input()))\ninfo = []\nfor i in range(n):\n    a = int(eval(input()))\n    for _ in range(a):\n        x, y = list(map(int, input().split()))\n        info.append((i, x - 1, y))\na = np.array(list(itertools.product([0, 1], repeat=n)), dtype=np.bool)\nfor i, x, y in info:\n    bl = (~a[:, i]) | (a[:, x] == bool(y))\n    a = a[bl]\nans = a.sum(axis=1).max()\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":41.935483871,"diff":["-def check(x, y):","-    for a, b in zip(x, y):","-        if a != b and b != -1:","-            return False","-    else:","-        return True","-","+import numpy as np","+import itertools","-remarks = []","-cnt_max = 0","-for _ in range(n):","+info = []","+for i in range(n):","-    x = [tuple(map(int, input().split())) for i in range(a)]","-    r = [-1] * n","-    for i, j in x:","-        r[i - 1] = j","-    remarks.append(r)","-for r in range(2**n):","-    r = list(bin(r)[2:].zfill(n))","-    r = [int(i) for i in r[:]]","-    cnt = 0","-    for i in range(n):","-        if r[i] == 1:","-            flag = check(r, remarks[i])","-            cnt += 1","-            if not flag:","-                cnt = 0","-                break","-    cnt_max = max(cnt, cnt_max)","-print(cnt_max)","+    for _ in range(a):","+        x, y = list(map(int, input().split()))","+        info.append((i, x - 1, y))","+a = np.array(list(itertools.product([0, 1], repeat=n)), dtype=np.bool)","+for i, x, y in info:","+    bl = (~a[:, i]) | (a[:, x] == bool(y))","+    a = a[bl]","+ans = a.sum(axis=1).max()","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.1805458875,"measured_runtime_v1":0.0064015586,"runtime_lift":28.2034262917,"key":["s547554870","s193607306"]}
{"user_id":"u886655280","problem_id":"p03416","language":"python","submission_id_v0":"s576934995","submission_id_v1":"s588523024","cpu_time_v0":174,"cpu_time_v1":53,"memory_v0":3060,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":69.54,"input":"A, B = list(map(int, input().split()))\n\ncount_target = 0\n\n\n\nfor i in range(A, B + 1):\n\n    str_i = str(i)\n\n    reversed_i = ''\n\n    for n_th_i in reversed(list(range(len(str_i)))):\n\n        reversed_i += str_i[n_th_i]\n\n\n\n    if str_i == reversed_i:\n\n        count_target += 1\n\n\n\nprint(count_target)","target":"A, B = list(map(int, input().split()))\n\ncount_target = 0\n\n\n\nfor i in range(A, B+1):\n\n    str_i = str(i)\n\n    reversed_i = str_i[::-1]\n\n\n\n    if str_i == reversed_i:\n\n        count_target += 1\n\n\n\nprint(count_target)\n","code_v0_loc":13,"code_v1_loc":11,"code_v0_num_chars":286,"code_v1_num_chars":209,"code_v0_no_empty_lines":"A, B = list(map(int, input().split()))\ncount_target = 0\nfor i in range(A, B + 1):\n    str_i = str(i)\n    reversed_i = \"\"\n    for n_th_i in reversed(list(range(len(str_i)))):\n        reversed_i += str_i[n_th_i]\n    if str_i == reversed_i:\n        count_target += 1\nprint(count_target)\n","code_v1_no_empty_lines":"A, B = list(map(int, input().split()))\ncount_target = 0\nfor i in range(A, B + 1):\n    str_i = str(i)\n    reversed_i = str_i[::-1]\n    if str_i == reversed_i:\n        count_target += 1\nprint(count_target)\n","code_same":false,"relative_loc_diff_percent":15.3846153846,"diff":["-    reversed_i = \"\"","-    for n_th_i in reversed(list(range(len(str_i)))):","-        reversed_i += str_i[n_th_i]","+    reversed_i = str_i[::-1]"],"diff_only_import_comment":false,"measured_runtime_v0":0.5743804177,"measured_runtime_v1":0.3217681063,"runtime_lift":1.7850756691,"key":["s576934995","s588523024"]}
{"user_id":"u645250356","problem_id":"p02881","language":"python","submission_id_v0":"s106501170","submission_id_v1":"s046181145","cpu_time_v0":232,"cpu_time_v1":205,"memory_v0":43632,"memory_v1":40808,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.64,"input":"from collections import Counter,defaultdict,deque\n\nimport sys,bisect,math,itertools,string,queue\n\nfrom heapq import heappop, heappush\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\ndef inp(): return int(sys.stdin.readline())\n\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\ndef inpl_str(): return list(sys.stdin.readline().split())\n\ndef inpln(n): return list(int(sys.stdin.readline()) for i in range(n))\n\n\n\nn = inp()\n\nres = float('inf')\n\nfor i in range(1,2*10**6):\n\n    if (n\/i).is_integer():\n\n        res = min(res, i + n\/i)\n\nprint((int(res-2)))\n","target":"from collections import Counter,defaultdict,deque\n\nimport sys,bisect,math,itertools,string,queue\n\nfrom heapq import heappop, heappush\n\nsys.setrecursionlimit(10**8)\n\nmod = 10**9+7\n\ndef inp(): return int(sys.stdin.readline())\n\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\ndef inpl_str(): return list(sys.stdin.readline().split())\n\ndef inpln(n): return list(int(sys.stdin.readline()) for i in range(n))\n\n\n\nn = inp()\n\nres = float('inf')\n\nfor i in range(1,int(math.sqrt(n))+1):\n\n    if n%i == 0:\n\n        res = min(res, i + n\/i)\n\nprint((int(res-2)))\n","code_v0_loc":16,"code_v1_loc":16,"code_v0_num_chars":561,"code_v1_num_chars":563,"code_v0_no_empty_lines":"from collections import Counter, defaultdict, deque\nimport sys, bisect, math, itertools, string, queue\nfrom heapq import heappop, heappush\n\nsys.setrecursionlimit(10**8)\nmod = 10**9 + 7\n\n\ndef inp():\n    return int(sys.stdin.readline())\n\n\ndef inpl():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef inpl_str():\n    return list(sys.stdin.readline().split())\n\n\ndef inpln(n):\n    return list(int(sys.stdin.readline()) for i in range(n))\n\n\nn = inp()\nres = float(\"inf\")\nfor i in range(1, 2 * 10**6):\n    if (n \/ i).is_integer():\n        res = min(res, i + n \/ i)\nprint((int(res - 2)))\n","code_v1_no_empty_lines":"from collections import Counter, defaultdict, deque\nimport sys, bisect, math, itertools, string, queue\nfrom heapq import heappop, heappush\n\nsys.setrecursionlimit(10**8)\nmod = 10**9 + 7\n\n\ndef inp():\n    return int(sys.stdin.readline())\n\n\ndef inpl():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef inpl_str():\n    return list(sys.stdin.readline().split())\n\n\ndef inpln(n):\n    return list(int(sys.stdin.readline()) for i in range(n))\n\n\nn = inp()\nres = float(\"inf\")\nfor i in range(1, int(math.sqrt(n)) + 1):\n    if n % i == 0:\n        res = min(res, i + n \/ i)\nprint((int(res - 2)))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-for i in range(1, 2 * 10**6):","-    if (n \/ i).is_integer():","+for i in range(1, int(math.sqrt(n)) + 1):","+    if n % i == 0:"],"diff_only_import_comment":false,"measured_runtime_v0":1.4036093347,"measured_runtime_v1":0.1584749897,"runtime_lift":8.856976976,"key":["s106501170","s046181145"]}
{"user_id":"u325956328","problem_id":"p02555","language":"python","submission_id_v0":"s422627112","submission_id_v1":"s801844924","cpu_time_v0":468,"cpu_time_v1":62,"memory_v0":9136,"memory_v1":9124,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":86.75,"input":"S = int(eval(input()))\n\n\n\ndp = [0] * (S + 1)\n\ndp[0] = 1\n\nM = 10 ** 9 + 7\n\n\n\nfor i in range(1, S + 1):\n\n    num = 0\n\n    for j in range(i - 2):\n\n        num += dp[j]\n\n        dp[i] = num % M\n\n\n\nprint((dp[S]))\n\n\n","target":"S = int(eval(input()))\n\n\n\n\n\ndef cmb(n, r, p):\n\n    r = min(n - r, r)\n\n    if r == 0:\n\n        return 1\n\n    over = 1\n\n    for i in range(n, n - r, -1):\n\n        over = over * i % p\n\n    under = 1\n\n    for i in range(1, r + 1):\n\n        under = under * i % p\n\n    inv = pow(under, p - 2, p)\n\n    return over * inv % p\n\n\n\n\n\nM = 10 ** 9 + 7\n\nans = 0\n\nfor i in range(1, S):\n\n    if S - 3 * i < 0:\n\n        break\n\n    ans += cmb(S - 3 * i + i - 1, i - 1, M)\n\n    ans %= M\n\nprint(ans)\n","code_v0_loc":14,"code_v1_loc":25,"code_v0_num_chars":202,"code_v1_num_chars":473,"code_v0_no_empty_lines":"S = int(eval(input()))\ndp = [0] * (S + 1)\ndp[0] = 1\nM = 10**9 + 7\nfor i in range(1, S + 1):\n    num = 0\n    for j in range(i - 2):\n        num += dp[j]\n        dp[i] = num % M\nprint((dp[S]))\n","code_v1_no_empty_lines":"S = int(eval(input()))\n\n\ndef cmb(n, r, p):\n    r = min(n - r, r)\n    if r == 0:\n        return 1\n    over = 1\n    for i in range(n, n - r, -1):\n        over = over * i % p\n    under = 1\n    for i in range(1, r + 1):\n        under = under * i % p\n    inv = pow(under, p - 2, p)\n    return over * inv % p\n\n\nM = 10**9 + 7\nans = 0\nfor i in range(1, S):\n    if S - 3 * i < 0:\n        break\n    ans += cmb(S - 3 * i + i - 1, i - 1, M)\n    ans %= M\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":44.0,"diff":["-dp = [0] * (S + 1)","-dp[0] = 1","+","+","+def cmb(n, r, p):","+    r = min(n - r, r)","+    if r == 0:","+        return 1","+    over = 1","+    for i in range(n, n - r, -1):","+        over = over * i % p","+    under = 1","+    for i in range(1, r + 1):","+        under = under * i % p","+    inv = pow(under, p - 2, p)","+    return over * inv % p","+","+","-for i in range(1, S + 1):","-    num = 0","-    for j in range(i - 2):","-        num += dp[j]","-        dp[i] = num % M","-print((dp[S]))","+ans = 0","+for i in range(1, S):","+    if S - 3 * i < 0:","+        break","+    ans += cmb(S - 3 * i + i - 1, i - 1, M)","+    ans %= M","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.6707954504,"measured_runtime_v1":0.2514740815,"runtime_lift":2.6674536254,"key":["s422627112","s801844924"]}
{"user_id":"u260980560","problem_id":"p02248","language":"python","submission_id_v0":"s637132288","submission_id_v1":"s753981495","cpu_time_v0":4740,"cpu_time_v1":2100,"memory_v0":92616,"memory_v1":49584,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":55.7,"input":"import random, math\n\nrandom.seed()\n\ndef gen(a, b, num):\n\n    result = set()\n\n    while 1:\n\n        while 1:\n\n            v = random.randint(a, b)\/\/2*2+1\n\n            if v not in result:\n\n                break\n\n        for x in range(3, int(math.sqrt(v))+1, 2):\n\n            if v % x == 0:\n\n                break\n\n        else:\n\n            result.add(v)\n\n            if len(result) == num:\n\n                break\n\n    return result\n\nclass RH():\n\n    def __init__(self, s, base, mod):\n\n        self.base = base\n\n        self.mod = mod\n\n        self.rev = pow(base, mod-2, mod)\n\n\n\n        l = len(s)\n\n        self.h = h = [0]*(l+1)\n\n        tmp = 0\n\n        for i in range(l):\n\n            num = ord(s[i])\n\n            tmp = (tmp*base + num) % mod\n\n            h[i+1] = tmp\n\n    def calc(self, l, r):\n\n        return (self.h[r] - self.h[l] * pow(self.base, r-l, self.mod)) % self.mod\n\n    def fixed(self, length):\n\n        v = pow(self.base, length, self.mod)\n\n        h = self.h; mod = self.mod\n\n        def fixed_calc(l):\n\n            return (h[length+l] - h[l] * v) % mod\n\n        return fixed_calc\n\nclass RRH():\n\n    def __init__(self, s, num=10, primes=None):\n\n        primes = primes or gen(2, 10**3, num)\n\n        MOD = 10**9+7\n\n        self.rhs = [RH(s, p, MOD) for p in primes]\n\n    def calc(self, l, r):\n\n        return [rh.calc(l, r) for rh in self.rhs]\n\n    def fixed(self, length):\n\n        fs = [rh.fixed(length) for rh in self.rhs]\n\n        def multi_fixed_calc(l):\n\n            return list(f(l) for f in fs)\n\n        return multi_fixed_calc\n\n\n\nT = eval(input()); P = eval(input())\n\nprimes = gen(2, 10**3, 2)\n\nHT = RRH(T, primes=primes)\n\nHP = RRH(P, primes=primes)\n\n\n\npv = HP.calc(0, len(P))\n\ncalc = HT.fixed(len(P))\n\nfor i in range(len(T)-len(P)+1):\n\n    if calc(i) == pv:\n\n        print(i)","target":"class RH():\n\n    def __init__(self, s, base, mod):\n\n        self.base = base\n\n        self.mod = mod\n\n        self.rev = pow(base, mod-2, mod)\n\n\n\n        l = len(s)\n\n        self.h = h = [0]*(l+1)\n\n        tmp = 0\n\n        for i in range(l):\n\n            num = ord(s[i])\n\n            tmp = (tmp*base + num) % mod\n\n            h[i+1] = tmp\n\n    def calc(self, l, r):\n\n        return (self.h[r] - self.h[l] * pow(self.base, r-l, self.mod)) % self.mod\n\n    def fixed(self, length):\n\n        v = pow(self.base, length, self.mod)\n\n        h = self.h; mod = self.mod\n\n        def fixed_calc(l):\n\n            return (h[length+l] - h[l] * v) % mod\n\n        return fixed_calc\n\nT = eval(input()); P = eval(input())\n\nMOD = 10**18+9\n\nHT = RH(T, 11, MOD)\n\nHP = RH(P, 11, MOD)\n\n\n\npv = HP.calc(0, len(P))\n\ncalc = HT.fixed(len(P))\n\nfor i in range(len(T)-len(P)+1):\n\n    if calc(i) == pv:\n\n        print(i)","code_v0_loc":61,"code_v1_loc":31,"code_v0_num_chars":1792,"code_v1_num_chars":877,"code_v0_no_empty_lines":"import random, math\n\nrandom.seed()\n\n\ndef gen(a, b, num):\n    result = set()\n    while 1:\n        while 1:\n            v = random.randint(a, b) \/\/ 2 * 2 + 1\n            if v not in result:\n                break\n        for x in range(3, int(math.sqrt(v)) + 1, 2):\n            if v % x == 0:\n                break\n        else:\n            result.add(v)\n            if len(result) == num:\n                break\n    return result\n\n\nclass RH:\n    def __init__(self, s, base, mod):\n        self.base = base\n        self.mod = mod\n        self.rev = pow(base, mod - 2, mod)\n        l = len(s)\n        self.h = h = [0] * (l + 1)\n        tmp = 0\n        for i in range(l):\n            num = ord(s[i])\n            tmp = (tmp * base + num) % mod\n            h[i + 1] = tmp\n\n    def calc(self, l, r):\n        return (self.h[r] - self.h[l] * pow(self.base, r - l, self.mod)) % self.mod\n\n    def fixed(self, length):\n        v = pow(self.base, length, self.mod)\n        h = self.h\n        mod = self.mod\n\n        def fixed_calc(l):\n            return (h[length + l] - h[l] * v) % mod\n\n        return fixed_calc\n\n\nclass RRH:\n    def __init__(self, s, num=10, primes=None):\n        primes = primes or gen(2, 10**3, num)\n        MOD = 10**9 + 7\n        self.rhs = [RH(s, p, MOD) for p in primes]\n\n    def calc(self, l, r):\n        return [rh.calc(l, r) for rh in self.rhs]\n\n    def fixed(self, length):\n        fs = [rh.fixed(length) for rh in self.rhs]\n\n        def multi_fixed_calc(l):\n            return list(f(l) for f in fs)\n\n        return multi_fixed_calc\n\n\nT = eval(input())\nP = eval(input())\nprimes = gen(2, 10**3, 2)\nHT = RRH(T, primes=primes)\nHP = RRH(P, primes=primes)\npv = HP.calc(0, len(P))\ncalc = HT.fixed(len(P))\nfor i in range(len(T) - len(P) + 1):\n    if calc(i) == pv:\n        print(i)\n","code_v1_no_empty_lines":"class RH:\n    def __init__(self, s, base, mod):\n        self.base = base\n        self.mod = mod\n        self.rev = pow(base, mod - 2, mod)\n        l = len(s)\n        self.h = h = [0] * (l + 1)\n        tmp = 0\n        for i in range(l):\n            num = ord(s[i])\n            tmp = (tmp * base + num) % mod\n            h[i + 1] = tmp\n\n    def calc(self, l, r):\n        return (self.h[r] - self.h[l] * pow(self.base, r - l, self.mod)) % self.mod\n\n    def fixed(self, length):\n        v = pow(self.base, length, self.mod)\n        h = self.h\n        mod = self.mod\n\n        def fixed_calc(l):\n            return (h[length + l] - h[l] * v) % mod\n\n        return fixed_calc\n\n\nT = eval(input())\nP = eval(input())\nMOD = 10**18 + 9\nHT = RH(T, 11, MOD)\nHP = RH(P, 11, MOD)\npv = HP.calc(0, len(P))\ncalc = HT.fixed(len(P))\nfor i in range(len(T) - len(P) + 1):\n    if calc(i) == pv:\n        print(i)\n","code_same":false,"relative_loc_diff_percent":49.1803278689,"diff":["-import random, math","-","-random.seed()","-","-","-def gen(a, b, num):","-    result = set()","-    while 1:","-        while 1:","-            v = random.randint(a, b) \/\/ 2 * 2 + 1","-            if v not in result:","-                break","-        for x in range(3, int(math.sqrt(v)) + 1, 2):","-            if v % x == 0:","-                break","-        else:","-            result.add(v)","-            if len(result) == num:","-                break","-    return result","-","-","-class RRH:","-    def __init__(self, s, num=10, primes=None):","-        primes = primes or gen(2, 10**3, num)","-        MOD = 10**9 + 7","-        self.rhs = [RH(s, p, MOD) for p in primes]","-","-    def calc(self, l, r):","-        return [rh.calc(l, r) for rh in self.rhs]","-","-    def fixed(self, length):","-        fs = [rh.fixed(length) for rh in self.rhs]","-","-        def multi_fixed_calc(l):","-            return list(f(l) for f in fs)","-","-        return multi_fixed_calc","-","-","-primes = gen(2, 10**3, 2)","-HT = RRH(T, primes=primes)","-HP = RRH(P, primes=primes)","+MOD = 10**18 + 9","+HT = RH(T, 11, MOD)","+HP = RH(P, 11, MOD)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3681170704,"measured_runtime_v1":0.2052954846,"runtime_lift":1.7931084603,"key":["s637132288","s753981495"]}
{"user_id":"u609061751","problem_id":"p02837","language":"python","submission_id_v0":"s621661858","submission_id_v1":"s461712112","cpu_time_v0":665,"cpu_time_v1":313,"memory_v0":12772,"memory_v1":45532,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":52.93,"input":"import sys\n\ninput = sys.stdin.readline\n\nimport numpy as np\n\nN = int(eval(input()))\n\nS = [[] for _ in range(N)]\n\nfor i in range(N):\n\n    A = int(eval(input()))\n\n    temp = []\n\n    for _ in range(A):\n\n        temp.append([str(x) for x in input().split()])\n\n        S[i] = temp\n\nans = 0\n\nfor i in range(2 ** N - 1, -1,-1):\n\n    biti = list(bin(i)[2:].zfill(N))\n\n    flag = 0\n\n    for j in range(N):\n\n        if biti[j] == \"1\":\n\n            for k in S[j]:\n\n                if biti[int(k[0])-1] != k[1]:\n\n                    flag = 1\n\n                    break\n\n        if flag:\n\n            break\n\n    if not flag:    \n\n        biti = np.array(biti)\n\n        ans = max(ans, np.count_nonzero(biti == \"1\"))\n\nprint(ans)","target":"import sys\n\ninput = sys.stdin.readline\n\n\n\nn = int(eval(input()))\n\n\n\nfrom collections import defaultdict\n\nd = defaultdict(list)\n\n\n\nfor i in range(n):\n\n    a = int(eval(input()))\n\n    for _ in range(a):\n\n        x, y = [int(x) for x in input().split()]\n\n        d[i].append((x - 1, y))\n\nans = 0\n\nfor k in range(2**n):\n\n    res = 0\n\n    j = bin(k)[2:].zfill(n)\n\n    flag = 1\n\n    for i in range(n):\n\n        if j[i] == \"0\":\n\n            continue\n\n        for x, y in d[i]:\n\n            if int(j[x]) != int(y):\n\n                flag = 0\n\n                break\n\n        res += 1\n\n    if flag:\n\n        ans = max(ans, res)\n\nprint(ans)","code_v0_loc":27,"code_v1_loc":29,"code_v0_num_chars":700,"code_v1_num_chars":616,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nimport numpy as np\n\nN = int(eval(input()))\nS = [[] for _ in range(N)]\nfor i in range(N):\n    A = int(eval(input()))\n    temp = []\n    for _ in range(A):\n        temp.append([str(x) for x in input().split()])\n        S[i] = temp\nans = 0\nfor i in range(2**N - 1, -1, -1):\n    biti = list(bin(i)[2:].zfill(N))\n    flag = 0\n    for j in range(N):\n        if biti[j] == \"1\":\n            for k in S[j]:\n                if biti[int(k[0]) - 1] != k[1]:\n                    flag = 1\n                    break\n        if flag:\n            break\n    if not flag:\n        biti = np.array(biti)\n        ans = max(ans, np.count_nonzero(biti == \"1\"))\nprint(ans)\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nn = int(eval(input()))\nfrom collections import defaultdict\n\nd = defaultdict(list)\nfor i in range(n):\n    a = int(eval(input()))\n    for _ in range(a):\n        x, y = [int(x) for x in input().split()]\n        d[i].append((x - 1, y))\nans = 0\nfor k in range(2**n):\n    res = 0\n    j = bin(k)[2:].zfill(n)\n    flag = 1\n    for i in range(n):\n        if j[i] == \"0\":\n            continue\n        for x, y in d[i]:\n            if int(j[x]) != int(y):\n                flag = 0\n                break\n        res += 1\n    if flag:\n        ans = max(ans, res)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":6.8965517241,"diff":["-import numpy as np","+n = int(eval(input()))","+from collections import defaultdict","-N = int(eval(input()))","-S = [[] for _ in range(N)]","-for i in range(N):","-    A = int(eval(input()))","-    temp = []","-    for _ in range(A):","-        temp.append([str(x) for x in input().split()])","-        S[i] = temp","+d = defaultdict(list)","+for i in range(n):","+    a = int(eval(input()))","+    for _ in range(a):","+        x, y = [int(x) for x in input().split()]","+        d[i].append((x - 1, y))","-for i in range(2**N - 1, -1, -1):","-    biti = list(bin(i)[2:].zfill(N))","-    flag = 0","-    for j in range(N):","-        if biti[j] == \"1\":","-            for k in S[j]:","-                if biti[int(k[0]) - 1] != k[1]:","-                    flag = 1","-                    break","-        if flag:","-            break","-    if not flag:","-        biti = np.array(biti)","-        ans = max(ans, np.count_nonzero(biti == \"1\"))","+for k in range(2**n):","+    res = 0","+    j = bin(k)[2:].zfill(n)","+    flag = 1","+    for i in range(n):","+        if j[i] == \"0\":","+            continue","+        for x, y in d[i]:","+            if int(j[x]) != int(y):","+                flag = 0","+                break","+        res += 1","+    if flag:","+        ans = max(ans, res)"],"diff_only_import_comment":false,"measured_runtime_v0":1.4142415071,"measured_runtime_v1":0.2070345302,"runtime_lift":6.8309450886,"key":["s621661858","s461712112"]}
{"user_id":"u834279451","problem_id":"p03457","language":"python","submission_id_v0":"s352352642","submission_id_v1":"s152929645","cpu_time_v0":1434,"cpu_time_v1":385,"memory_v0":12504,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":73.15,"input":"#!\/usr\/bin\/python3\n\n# -*- coding: utf-8 -*-\n\n\n\nimport numpy as np\n\n\n\nN = int(eval(input()))\n\nprev_dst = [0,0,0]\n\n\n\nfor n in range(N):\n\n    t, x, y = list(map(int, input().split(\" \")))\n\n    a = (t - prev_dst[0]) - (np.abs(prev_dst[1]-x) + np.abs(prev_dst[2]-y))\n\n    if a >= 0 and a % 2 == 0:\n\n        prev_dst = [t, x, y]\n\n    else:\n\n        print(\"No\")\n\n        exit(0)\n\n\n\nprint(\"Yes\")\n\n\n","target":"#!\/usr\/bin\/python3\n\n# -*- coding: utf-8 -*-\n\n\n\nN = int(eval(input()))\n\nprev_dst = [0,0,0]\n\n\n\nfor n in range(N):\n\n    t, x, y = list(map(int, input().split(\" \")))\n\n    a = (t - prev_dst[0]) - (abs(prev_dst[1]-x) + abs(prev_dst[2]-y))\n\n    if a >= 0 and a % 2 == 0:\n\n        prev_dst = [t, x, y]\n\n    else:\n\n        print(\"No\")\n\n        exit(0)\n\n\n\nprint(\"Yes\")\n\n\n","code_v0_loc":19,"code_v1_loc":17,"code_v0_num_chars":377,"code_v1_num_chars":349,"code_v0_no_empty_lines":"#!\/usr\/bin\/python3\n# -*- coding: utf-8 -*-\nimport numpy as np\n\nN = int(eval(input()))\nprev_dst = [0, 0, 0]\nfor n in range(N):\n    t, x, y = list(map(int, input().split(\" \")))\n    a = (t - prev_dst[0]) - (np.abs(prev_dst[1] - x) + np.abs(prev_dst[2] - y))\n    if a >= 0 and a % 2 == 0:\n        prev_dst = [t, x, y]\n    else:\n        print(\"No\")\n        exit(0)\nprint(\"Yes\")\n","code_v1_no_empty_lines":"#!\/usr\/bin\/python3\n# -*- coding: utf-8 -*-\nN = int(eval(input()))\nprev_dst = [0, 0, 0]\nfor n in range(N):\n    t, x, y = list(map(int, input().split(\" \")))\n    a = (t - prev_dst[0]) - (abs(prev_dst[1] - x) + abs(prev_dst[2] - y))\n    if a >= 0 and a % 2 == 0:\n        prev_dst = [t, x, y]\n    else:\n        print(\"No\")\n        exit(0)\nprint(\"Yes\")\n","code_same":false,"relative_loc_diff_percent":10.5263157895,"diff":["-import numpy as np","-","-    a = (t - prev_dst[0]) - (np.abs(prev_dst[1] - x) + np.abs(prev_dst[2] - y))","+    a = (t - prev_dst[0]) - (abs(prev_dst[1] - x) + abs(prev_dst[2] - y))"],"diff_only_import_comment":false,"measured_runtime_v0":1.4061109214,"measured_runtime_v1":0.2246652768,"runtime_lift":6.2586926719,"key":["s352352642","s152929645"]}
{"user_id":"u141786930","problem_id":"p02767","language":"python","submission_id_v0":"s650122850","submission_id_v1":"s038671040","cpu_time_v0":401,"cpu_time_v1":17,"memory_v0":19980,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":95.76,"input":"import numpy as np\n\n\n\nN = int(eval(input()))\n\nX = np.array(list(int(x) for x in input().split()))\n\nm = round(np.mean(X))\n\n\n\nprint((int(sum((X-m)**2))))","target":"N = int(eval(input()))\n\nX = list(int(x) for x in input().split())\n\np = round(sum(X)\/len(X))\n\nans = 0\n\n\n\nfor i in range(N):\n\n    ans += (X[i] - p)**2\n\n\n\nprint(ans)","code_v0_loc":7,"code_v1_loc":9,"code_v0_num_chars":143,"code_v1_num_chars":156,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nX = np.array(list(int(x) for x in input().split()))\nm = round(np.mean(X))\nprint((int(sum((X - m) ** 2))))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nX = list(int(x) for x in input().split())\np = round(sum(X) \/ len(X))\nans = 0\nfor i in range(N):\n    ans += (X[i] - p) ** 2\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":22.2222222222,"diff":["-import numpy as np","-","-X = np.array(list(int(x) for x in input().split()))","-m = round(np.mean(X))","-print((int(sum((X - m) ** 2))))","+X = list(int(x) for x in input().split())","+p = round(sum(X) \/ len(X))","+ans = 0","+for i in range(N):","+    ans += (X[i] - p) ** 2","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.840335056,"measured_runtime_v1":0.2786408437,"runtime_lift":6.6046851977,"key":["s650122850","s038671040"]}
{"user_id":"u721446434","problem_id":"p02390","language":"python","submission_id_v0":"s466287089","submission_id_v1":"s267092190","cpu_time_v0":40,"cpu_time_v1":30,"memory_v0":7676,"memory_v1":7660,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":25.0,"input":"a = int(eval(input()))\n\nh = int(a \/ 3600)\n\nm = int((a - h * 3600) \/ 60)\n\ns = int(a - h * 3600 - m * 60)\n\nprint((\":\" .join(map(str, [h, m, s]))))","target":"num = int(input())\n\nprint(int(num\/3600), int((num%3600)\/60), num%60, sep=\":\")\n","code_v0_loc":5,"code_v1_loc":2,"code_v0_num_chars":136,"code_v1_num_chars":77,"code_v0_no_empty_lines":"a = int(eval(input()))\nh = int(a \/ 3600)\nm = int((a - h * 3600) \/ 60)\ns = int(a - h * 3600 - m * 60)\nprint((\":\".join(map(str, [h, m, s]))))\n","code_v1_no_empty_lines":"num = int(input())\nprint(int(num \/ 3600), int((num % 3600) \/ 60), num % 60, sep=\":\")\n","code_same":false,"relative_loc_diff_percent":60.0,"diff":["-a = int(eval(input()))","-h = int(a \/ 3600)","-m = int((a - h * 3600) \/ 60)","-s = int(a - h * 3600 - m * 60)","-print((\":\".join(map(str, [h, m, s]))))","+num = int(input())","+print(int(num \/ 3600), int((num % 3600) \/ 60), num % 60, sep=\":\")"],"diff_only_import_comment":false,"measured_runtime_v0":0.3158221226,"measured_runtime_v1":0.2260731559,"runtime_lift":1.3969908162,"key":["s466287089","s267092190"]}
{"user_id":"u141786930","problem_id":"p02899","language":"python","submission_id_v0":"s528079976","submission_id_v1":"s501403941","cpu_time_v0":88,"cpu_time_v1":79,"memory_v0":17832,"memory_v1":17764,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.23,"input":"n = int(eval(input()))\n\na = [int(x) for x in input().split()]\n\n\n\nans = list(range(n))\n\n\n\nfor i in range(n):\n\n    ans[a[i]-1] = i+1\n\n    \n\nprint((' '.join(map(str,ans))))","target":"def main():\n\n\n\n    N = int(eval(input()))\n\n    A = list(int(x) for x in input().split())\n\n    ans = [0] * N\n\n\n\n    for i, a in enumerate(A):\n\n        ans[a-1] = i+1\n\n\n\n    print((' '.join(map(str, ans))))\n\n    \n\nif __name__ == '__main__':\n\n    main()","code_v0_loc":9,"code_v1_loc":13,"code_v0_num_chars":161,"code_v1_num_chars":242,"code_v0_no_empty_lines":"n = int(eval(input()))\na = [int(x) for x in input().split()]\nans = list(range(n))\nfor i in range(n):\n    ans[a[i] - 1] = i + 1\nprint((\" \".join(map(str, ans))))\n","code_v1_no_empty_lines":"def main():\n    N = int(eval(input()))\n    A = list(int(x) for x in input().split())\n    ans = [0] * N\n    for i, a in enumerate(A):\n        ans[a - 1] = i + 1\n    print((\" \".join(map(str, ans))))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":30.7692307692,"diff":["-n = int(eval(input()))","-a = [int(x) for x in input().split()]","-ans = list(range(n))","-for i in range(n):","-    ans[a[i] - 1] = i + 1","-print((\" \".join(map(str, ans))))","+def main():","+    N = int(eval(input()))","+    A = list(int(x) for x in input().split())","+    ans = [0] * N","+    for i, a in enumerate(A):","+        ans[a - 1] = i + 1","+    print((\" \".join(map(str, ans))))","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.3514640877,"measured_runtime_v1":0.2437312019,"runtime_lift":1.4420151581,"key":["s528079976","s501403941"]}
{"user_id":"u562935282","problem_id":"p03416","language":"python","submission_id_v0":"s637446217","submission_id_v1":"s864775628","cpu_time_v0":111,"cpu_time_v1":46,"memory_v0":3060,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":58.56,"input":"a, b = list(map(int, input().split()))\n\ncnt = 0\n\nfor x in range(a, b + 1):\n\n    s = str(x)\n\n    l = len(s)\n\n    flg = True\n\n    for i in range(l \/\/ 2):\n\n        if s[i] != s[l - 1 - i]:\n\n            flg = False\n\n            break\n\n    if flg:\n\n        cnt += 1\n\nprint(cnt)\n","target":"a, b = list(map(int, input().split()))\n\ncnt = 0\n\nfor i in range(a, b + 1):\n\n    s = str(i)\n\n    if s[0] == s[4] and s[1] == s[3]:\n\n        cnt += 1\n\nprint(cnt)","code_v0_loc":13,"code_v1_loc":7,"code_v0_num_chars":267,"code_v1_num_chars":153,"code_v0_no_empty_lines":"a, b = list(map(int, input().split()))\ncnt = 0\nfor x in range(a, b + 1):\n    s = str(x)\n    l = len(s)\n    flg = True\n    for i in range(l \/\/ 2):\n        if s[i] != s[l - 1 - i]:\n            flg = False\n            break\n    if flg:\n        cnt += 1\nprint(cnt)\n","code_v1_no_empty_lines":"a, b = list(map(int, input().split()))\ncnt = 0\nfor i in range(a, b + 1):\n    s = str(i)\n    if s[0] == s[4] and s[1] == s[3]:\n        cnt += 1\nprint(cnt)\n","code_same":false,"relative_loc_diff_percent":46.1538461538,"diff":["-for x in range(a, b + 1):","-    s = str(x)","-    l = len(s)","-    flg = True","-    for i in range(l \/\/ 2):","-        if s[i] != s[l - 1 - i]:","-            flg = False","-            break","-    if flg:","+for i in range(a, b + 1):","+    s = str(i)","+    if s[0] == s[4] and s[1] == s[3]:"],"diff_only_import_comment":false,"measured_runtime_v0":0.334243765,"measured_runtime_v1":0.2510879046,"runtime_lift":1.3311822625,"key":["s637446217","s864775628"]}
{"user_id":"u803617136","problem_id":"p02959","language":"python","submission_id_v0":"s395849964","submission_id_v1":"s383743178","cpu_time_v0":279,"cpu_time_v1":251,"memory_v0":82148,"memory_v1":18624,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.04,"input":"N = int(eval(input()))\n\na = list(map(int, input().split()))\n\nb = list(map(int, input().split()))\n\na.reverse()\n\nb.reverse()\n\nans = 0\n\ncapacity = 0\n\nfor i in range(N):\n\n    ans += min(b[i] + capacity, a[i])\n\n    capacity = max(b[i] - max(a[i] - capacity, 0), 0)\n\nans += min(a[-1], capacity)\n\nprint(ans)","target":"n = int(eval(input()))\n\na = list(map(int, input().split()))\n\nb = list(map(int, input().split()))\n\n\n\na = a[::-1]\n\nb = b[::-1]\n\nans = 0\n\nfor i, bi in enumerate(b):\n\n    ans += min(a[i], b[i])\n\n    remain = max(0, b[i] - a[i])\n\n    ans += min(a[i + 1], remain)\n\n    a[i + 1] = max(0, a[i + 1] - remain)\n\nprint(ans)","code_v0_loc":12,"code_v1_loc":13,"code_v0_num_chars":294,"code_v1_num_chars":305,"code_v0_no_empty_lines":"N = int(eval(input()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\na.reverse()\nb.reverse()\nans = 0\ncapacity = 0\nfor i in range(N):\n    ans += min(b[i] + capacity, a[i])\n    capacity = max(b[i] - max(a[i] - capacity, 0), 0)\nans += min(a[-1], capacity)\nprint(ans)\n","code_v1_no_empty_lines":"n = int(eval(input()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\na = a[::-1]\nb = b[::-1]\nans = 0\nfor i, bi in enumerate(b):\n    ans += min(a[i], b[i])\n    remain = max(0, b[i] - a[i])\n    ans += min(a[i + 1], remain)\n    a[i + 1] = max(0, a[i + 1] - remain)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":7.6923076923,"diff":["-N = int(eval(input()))","+n = int(eval(input()))","-a.reverse()","-b.reverse()","+a = a[::-1]","+b = b[::-1]","-capacity = 0","-for i in range(N):","-    ans += min(b[i] + capacity, a[i])","-    capacity = max(b[i] - max(a[i] - capacity, 0), 0)","-ans += min(a[-1], capacity)","+for i, bi in enumerate(b):","+    ans += min(a[i], b[i])","+    remain = max(0, b[i] - a[i])","+    ans += min(a[i + 1], remain)","+    a[i + 1] = max(0, a[i + 1] - remain)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2854677742,"measured_runtime_v1":0.2055514226,"runtime_lift":1.3887900679,"key":["s395849964","s383743178"]}
{"user_id":"u126227204","problem_id":"p02863","language":"python","submission_id_v0":"s185891854","submission_id_v1":"s652115022","cpu_time_v0":742,"cpu_time_v1":402,"memory_v0":176904,"memory_v1":114908,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":45.82,"input":"#coding:utf-8\n\nimport bisect\n\nimport sys\n\nsys.setrecursionlimit(10**6)\n\nwrite = sys.stdout.write\n\ndbg = lambda *something : print(*something) if DEBUG else 0\n\nDEBUG = True\n\n\n\n\n\n\n\ndef main(given = sys.stdin.readline):\n\n    input = lambda : given().rstrip()\n\n    LMIIS = lambda : list(map(int,input().split()))\n\n    II = lambda : int(input())\n\n    XLMIIS = lambda x : [LMIIS() for _ in range(x)]\n\n\n\n    n, t = LMIIS()\n\n    ab = XLMIIS(n)\n\n\n\n    dp1 = [[0]*t for _ in range(n)]\n\n    for i in range(1, n):\n\n        for j in range(1, t):\n\n            if j < ab[i-1][0]:\n\n                dp1[i][j] = dp1[i-1][j]\n\n            else:\n\n                dp1[i][j] = max(dp1[i-1][j], dp1[i-1][j-ab[i-1][0]] + ab[i-1][1])\n\n\n\n\n\n    dp2 = [[0]*t for _ in range(n)]\n\n    for i in range(1, n):\n\n        for j in range(1, t):\n\n            if j < ab[n - i][0]:\n\n                dp2[i][j] = dp2[i-1][j]\n\n            else:\n\n                dp2[i][j] = max(dp2[i-1][j], dp2[i-1][j-ab[n-i][0]] + ab[n-i][1])\n\n\n\n    ans = 0\n\n    for i in range(n):\n\n        for j in range(t - 1):\n\n            ans = max(ans, dp1[i][j] + dp2[n - i - 1][t - j - 1] + ab[i][1])\n\n    print(ans)\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"#coding:utf-8\n\nimport bisect\n\nimport sys\n\nsys.setrecursionlimit(10**6)\n\nwrite = sys.stdout.write\n\ndbg = lambda *something : print(*something) if DEBUG else 0\n\nDEBUG = True\n\n\n\n\n\n\n\ndef main(given = sys.stdin.readline):\n\n    input = lambda : given().rstrip()\n\n    LMIIS = lambda : list(map(int,input().split()))\n\n    II = lambda : int(input())\n\n    XLMIIS = lambda x : [LMIIS() for _ in range(x)]\n\n\n\n    n, t = LMIIS()\n\n    ab = XLMIIS(n)\n\n    ab.sort()\n\n\n\n    dp1 = [[0]*t for _ in range(n+1)]\n\n    for i in range(1, n+1):\n\n        for j in range(1, t):\n\n            if j < ab[i-1][0]:\n\n                dp1[i][j] = dp1[i-1][j]\n\n            else:\n\n                dp1[i][j] = max(dp1[i-1][j], dp1[i-1][j-ab[i-1][0]] + ab[i-1][1])\n\n\n\n    ans = 0\n\n    for i in range(n):\n\n        ans = max(ans, dp1[i][t-1] + ab[i][1])\n\n    print(ans)\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":44,"code_v1_loc":35,"code_v0_num_chars":1191,"code_v1_num_chars":872,"code_v0_no_empty_lines":"# coding:utf-8\nimport bisect\nimport sys\n\nsys.setrecursionlimit(10**6)\nwrite = sys.stdout.write\ndbg = lambda *something: print(*something) if DEBUG else 0\nDEBUG = True\n\n\ndef main(given=sys.stdin.readline):\n    input = lambda: given().rstrip()\n    LMIIS = lambda: list(map(int, input().split()))\n    II = lambda: int(input())\n    XLMIIS = lambda x: [LMIIS() for _ in range(x)]\n    n, t = LMIIS()\n    ab = XLMIIS(n)\n    dp1 = [[0] * t for _ in range(n)]\n    for i in range(1, n):\n        for j in range(1, t):\n            if j < ab[i - 1][0]:\n                dp1[i][j] = dp1[i - 1][j]\n            else:\n                dp1[i][j] = max(\n                    dp1[i - 1][j], dp1[i - 1][j - ab[i - 1][0]] + ab[i - 1][1]\n                )\n    dp2 = [[0] * t for _ in range(n)]\n    for i in range(1, n):\n        for j in range(1, t):\n            if j < ab[n - i][0]:\n                dp2[i][j] = dp2[i - 1][j]\n            else:\n                dp2[i][j] = max(\n                    dp2[i - 1][j], dp2[i - 1][j - ab[n - i][0]] + ab[n - i][1]\n                )\n    ans = 0\n    for i in range(n):\n        for j in range(t - 1):\n            ans = max(ans, dp1[i][j] + dp2[n - i - 1][t - j - 1] + ab[i][1])\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"# coding:utf-8\nimport bisect\nimport sys\n\nsys.setrecursionlimit(10**6)\nwrite = sys.stdout.write\ndbg = lambda *something: print(*something) if DEBUG else 0\nDEBUG = True\n\n\ndef main(given=sys.stdin.readline):\n    input = lambda: given().rstrip()\n    LMIIS = lambda: list(map(int, input().split()))\n    II = lambda: int(input())\n    XLMIIS = lambda x: [LMIIS() for _ in range(x)]\n    n, t = LMIIS()\n    ab = XLMIIS(n)\n    ab.sort()\n    dp1 = [[0] * t for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, t):\n            if j < ab[i - 1][0]:\n                dp1[i][j] = dp1[i - 1][j]\n            else:\n                dp1[i][j] = max(\n                    dp1[i - 1][j], dp1[i - 1][j - ab[i - 1][0]] + ab[i - 1][1]\n                )\n    ans = 0\n    for i in range(n):\n        ans = max(ans, dp1[i][t - 1] + ab[i][1])\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":20.4545454545,"diff":["-    dp1 = [[0] * t for _ in range(n)]","-    for i in range(1, n):","+    ab.sort()","+    dp1 = [[0] * t for _ in range(n + 1)]","+    for i in range(1, n + 1):","-    dp2 = [[0] * t for _ in range(n)]","-    for i in range(1, n):","-        for j in range(1, t):","-            if j < ab[n - i][0]:","-                dp2[i][j] = dp2[i - 1][j]","-            else:","-                dp2[i][j] = max(","-                    dp2[i - 1][j], dp2[i - 1][j - ab[n - i][0]] + ab[n - i][1]","-                )","-        for j in range(t - 1):","-            ans = max(ans, dp1[i][j] + dp2[n - i - 1][t - j - 1] + ab[i][1])","+        ans = max(ans, dp1[i][t - 1] + ab[i][1])"],"diff_only_import_comment":false,"measured_runtime_v0":0.3189357283,"measured_runtime_v1":0.0702446496,"runtime_lift":4.5403561675,"key":["s185891854","s652115022"]}
{"user_id":"u326609687","problem_id":"p03074","language":"python","submission_id_v0":"s171288721","submission_id_v1":"s319292568","cpu_time_v0":80,"cpu_time_v1":65,"memory_v0":3316,"memory_v1":4460,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":18.75,"input":"import sys\n\n\n\nN, K = list(map(int, input().split()))\n\nS = eval(input())\n\n\n\n\n\ndef nexti(n):\n\n    while S[n] == '1':\n\n        n += 1\n\n    while S[n] == '0':\n\n        n += 1\n\n    return n\n\n\n\n\n\ndef nextj(n):\n\n    while S[n] == '0':\n\n        n += 1\n\n        if n == N:\n\n            return N\n\n    while S[n] == '1':\n\n        n += 1\n\n        if n == N:\n\n            return N\n\n    return n\n\n\n\n\n\ni = 0\n\nj = 0\n\nwhile S[j] == '1':\n\n    j += 1\n\n    if j == N:\n\n        print(N)\n\n        sys.exit(0)\n\nfor _ in range(K):\n\n    j = nextj(j)\n\n    if j == N:\n\n        print(N)\n\n        sys.exit(0)\n\n\n\nans = j - i\n\nwhile True:\n\n    i = nexti(i)\n\n    j = nextj(j)\n\n    ans = max(ans, j - i)\n\n    if j == N:\n\n        break\n\n\n\nprint(ans)","target":"from collections import deque\n\n\n\n\n\ndef nextj(n):\n\n    while S[n] == '0':\n\n        n += 1\n\n        if n == N:\n\n            return N\n\n    q.appendleft(n)\n\n    while S[n] == '1':\n\n        n += 1\n\n        if n == N:\n\n            return N\n\n    return n\n\n\n\n\n\ndef init(n):\n\n    while S[n] == '1':\n\n        n += 1\n\n        if n == N:\n\n            return N\n\n    return n\n\n\n\n\n\ndef calc():\n\n    q.appendleft(0)\n\n    ans = 0\n\n    j = init(0)\n\n    if j == N:\n\n        return N\n\n    for _ in range(K - 1):\n\n        j = nextj(j)\n\n        if j == N:\n\n            return N\n\n    while True:\n\n        j = nextj(j)\n\n        ans = max(ans, j - q.pop())\n\n        if j == N:\n\n            return ans\n\n\n\n\n\nN, K = list(map(int, input().split()))\n\nS = eval(input())\n\nq = deque()\n\nprint((calc()))\n","code_v0_loc":48,"code_v1_loc":45,"code_v0_num_chars":703,"code_v1_num_chars":755,"code_v0_no_empty_lines":"import sys\n\nN, K = list(map(int, input().split()))\nS = eval(input())\n\n\ndef nexti(n):\n    while S[n] == \"1\":\n        n += 1\n    while S[n] == \"0\":\n        n += 1\n    return n\n\n\ndef nextj(n):\n    while S[n] == \"0\":\n        n += 1\n        if n == N:\n            return N\n    while S[n] == \"1\":\n        n += 1\n        if n == N:\n            return N\n    return n\n\n\ni = 0\nj = 0\nwhile S[j] == \"1\":\n    j += 1\n    if j == N:\n        print(N)\n        sys.exit(0)\nfor _ in range(K):\n    j = nextj(j)\n    if j == N:\n        print(N)\n        sys.exit(0)\nans = j - i\nwhile True:\n    i = nexti(i)\n    j = nextj(j)\n    ans = max(ans, j - i)\n    if j == N:\n        break\nprint(ans)\n","code_v1_no_empty_lines":"from collections import deque\n\n\ndef nextj(n):\n    while S[n] == \"0\":\n        n += 1\n        if n == N:\n            return N\n    q.appendleft(n)\n    while S[n] == \"1\":\n        n += 1\n        if n == N:\n            return N\n    return n\n\n\ndef init(n):\n    while S[n] == \"1\":\n        n += 1\n        if n == N:\n            return N\n    return n\n\n\ndef calc():\n    q.appendleft(0)\n    ans = 0\n    j = init(0)\n    if j == N:\n        return N\n    for _ in range(K - 1):\n        j = nextj(j)\n        if j == N:\n            return N\n    while True:\n        j = nextj(j)\n        ans = max(ans, j - q.pop())\n        if j == N:\n            return ans\n\n\nN, K = list(map(int, input().split()))\nS = eval(input())\nq = deque()\nprint((calc()))\n","code_same":false,"relative_loc_diff_percent":6.25,"diff":["-import sys","-","-N, K = list(map(int, input().split()))","-S = eval(input())","-","-","-def nexti(n):","-    while S[n] == \"1\":","-        n += 1","-    while S[n] == \"0\":","-        n += 1","-    return n","+from collections import deque","+    q.appendleft(n)","-i = 0","-j = 0","-while S[j] == \"1\":","-    j += 1","+def init(n):","+    while S[n] == \"1\":","+        n += 1","+        if n == N:","+            return N","+    return n","+","+","+def calc():","+    q.appendleft(0)","+    ans = 0","+    j = init(0)","-        print(N)","-        sys.exit(0)","-for _ in range(K):","-    j = nextj(j)","-    if j == N:","-        print(N)","-        sys.exit(0)","-ans = j - i","-while True:","-    i = nexti(i)","-    j = nextj(j)","-    ans = max(ans, j - i)","-    if j == N:","-        break","-print(ans)","+        return N","+    for _ in range(K - 1):","+        j = nextj(j)","+        if j == N:","+            return N","+    while True:","+        j = nextj(j)","+        ans = max(ans, j - q.pop())","+        if j == N:","+            return ans","+","+","+N, K = list(map(int, input().split()))","+S = eval(input())","+q = deque()","+print((calc()))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3886394203,"measured_runtime_v1":0.2086165268,"runtime_lift":1.8629368734,"key":["s171288721","s319292568"]}
{"user_id":"u060938295","problem_id":"p03039","language":"python","submission_id_v0":"s392943696","submission_id_v1":"s780766335","cpu_time_v0":987,"cpu_time_v1":315,"memory_v0":26896,"memory_v1":27024,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":68.09,"input":"# -*- coding: utf-8 -*-\n\n\"\"\"\n\nCreated on Sat May 25 21:24:29 2019\n\n\n\n@author: Yamazaki Kenichi\n\n\"\"\"\n\n\n\nN, M, K = list(map(int,input().split()))\n\nmod = 10**9+7\n\n\n\ndef cmb(n, r, mod):\n\n    if (r < 0 or r > n):\n\n        return 0\n\n    r = min(r, n-r)\n\n    return g1[n] * g2[r] * g2[n-r] % mod\n\n\n\ng1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\n\ng2 = [1, 1] # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\n\ninv = [0, 1] # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\n\n\nfor i in range(2, N*M+1):\n\n    g1.append((g1[-1] * i) % mod)\n\n    inv.append((-inv[mod % i] * (mod\/\/i)) % mod)\n\n    g2.append((g2[-1] * inv[-1]) % mod)\n\n\n\ndef a(N,M):\n\n    return N*(N+1)\/\/2*(M+1) + M*(M+1)\/\/2*(N+1)\n\ndef b(N):\n\n    return N*(N+1)\/\/2\n\n\n\nans = 0\n\nfor i in range(N):\n\n    for j in range(M):\n\n        ans += a(i,j) + a(N-i-1,j) + a(i,M-j-1) + a(N-i-1,M-j-1)\n\n        ans -= b(i) + b(j) + b(N-i-1) + b(M-j-1)\n\n        ans %= mod\n\n#        print(i,j,a(i,j),a(N-i-1,j),a(i,M-j-1),a(N-i-1,M-j-1),b(i),b(j),ans)\n\nans *= g2[2]\n\n\n\nans *= cmb(N*M-2,K-2,mod)\n\nans %= mod\n\n\n\nprint(ans)\n","target":"# -*- coding: utf-8 -*-\n\n\"\"\"\n\nCreated on Wed May 29 22:49:19 2019\n\n\n\n@author: Yamazaki Kenichi\n\n\"\"\"\n\n\n\n# -*- coding: utf-8 -*-\n\n\"\"\"\n\nCreated on Sat May 25 21:24:29 2019\n\n\n\n@author: Yamazaki Kenichi\n\n\"\"\"\n\n\n\nN, M, K = list(map(int,input().split()))\n\nmod = 10**9+7\n\n\n\ndef cmb(n, r, mod):\n\n    if (r < 0 or r > n):\n\n        return 0\n\n    r = min(r, n-r)\n\n    return g1[n] * g2[r] * g2[n-r] % mod\n\n\n\ng1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\n\ng2 = [1, 1] # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\n\ninv = [0, 1] # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\n\n\nfor i in range(2, N*M+1):\n\n    g1.append((g1[-1] * i) % mod)\n\n    inv.append((-inv[mod % i] * (mod\/\/i)) % mod)\n\n    g2.append((g2[-1] * inv[-1]) % mod)\n\n\n\nans1 = 0\n\ndef c(N,M):\n\n    res = 0\n\n    for i in range(1,N):\n\n        res += i*(N-i)*M*M\n\n    return res\n\nans1 += c(N,M) + c(M,N)\n\nans1 %= mod\n\n\n\nans1 *= cmb(N*M-2,K-2,mod)\n\nans1 %= mod\n\n\n\nprint(ans1)\n","code_v0_loc":43,"code_v1_loc":45,"code_v0_num_chars":949,"code_v1_num_chars":820,"code_v0_no_empty_lines":"# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat May 25 21:24:29 2019\n@author: Yamazaki Kenichi\n\"\"\"\nN, M, K = list(map(int, input().split()))\nmod = 10**9 + 7\n\n\ndef cmb(n, r, mod):\n    if r < 0 or r > n:\n        return 0\n    r = min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\ng1 = [1, 1]  # \u5143\u30c6\u30fc\u30d6\u30eb\ng2 = [1, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninv = [0, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\nfor i in range(2, N * M + 1):\n    g1.append((g1[-1] * i) % mod)\n    inv.append((-inv[mod % i] * (mod \/\/ i)) % mod)\n    g2.append((g2[-1] * inv[-1]) % mod)\n\n\ndef a(N, M):\n    return N * (N + 1) \/\/ 2 * (M + 1) + M * (M + 1) \/\/ 2 * (N + 1)\n\n\ndef b(N):\n    return N * (N + 1) \/\/ 2\n\n\nans = 0\nfor i in range(N):\n    for j in range(M):\n        ans += a(i, j) + a(N - i - 1, j) + a(i, M - j - 1) + a(N - i - 1, M - j - 1)\n        ans -= b(i) + b(j) + b(N - i - 1) + b(M - j - 1)\n        ans %= mod\n#        print(i,j,a(i,j),a(N-i-1,j),a(i,M-j-1),a(N-i-1,M-j-1),b(i),b(j),ans)\nans *= g2[2]\nans *= cmb(N * M - 2, K - 2, mod)\nans %= mod\nprint(ans)\n","code_v1_no_empty_lines":"# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Wed May 29 22:49:19 2019\n@author: Yamazaki Kenichi\n\"\"\"\n# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat May 25 21:24:29 2019\n@author: Yamazaki Kenichi\n\"\"\"\nN, M, K = list(map(int, input().split()))\nmod = 10**9 + 7\n\n\ndef cmb(n, r, mod):\n    if r < 0 or r > n:\n        return 0\n    r = min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\ng1 = [1, 1]  # \u5143\u30c6\u30fc\u30d6\u30eb\ng2 = [1, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninv = [0, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\nfor i in range(2, N * M + 1):\n    g1.append((g1[-1] * i) % mod)\n    inv.append((-inv[mod % i] * (mod \/\/ i)) % mod)\n    g2.append((g2[-1] * inv[-1]) % mod)\nans1 = 0\n\n\ndef c(N, M):\n    res = 0\n    for i in range(1, N):\n        res += i * (N - i) * M * M\n    return res\n\n\nans1 += c(N, M) + c(M, N)\nans1 %= mod\nans1 *= cmb(N * M - 2, K - 2, mod)\nans1 %= mod\nprint(ans1)\n","code_same":false,"relative_loc_diff_percent":4.4444444444,"diff":["+# -*- coding: utf-8 -*-","+\"\"\"","+Created on Wed May 29 22:49:19 2019","+@author: Yamazaki Kenichi","+\"\"\"","+ans1 = 0","-def a(N, M):","-    return N * (N + 1) \/\/ 2 * (M + 1) + M * (M + 1) \/\/ 2 * (N + 1)","+def c(N, M):","+    res = 0","+    for i in range(1, N):","+        res += i * (N - i) * M * M","+    return res","-def b(N):","-    return N * (N + 1) \/\/ 2","-","-","-ans = 0","-for i in range(N):","-    for j in range(M):","-        ans += a(i, j) + a(N - i - 1, j) + a(i, M - j - 1) + a(N - i - 1, M - j - 1)","-        ans -= b(i) + b(j) + b(N - i - 1) + b(M - j - 1)","-        ans %= mod","-#        print(i,j,a(i,j),a(N-i-1,j),a(i,M-j-1),a(N-i-1,M-j-1),b(i),b(j),ans)","-ans *= g2[2]","-ans *= cmb(N * M - 2, K - 2, mod)","-ans %= mod","-print(ans)","+ans1 += c(N, M) + c(M, N)","+ans1 %= mod","+ans1 *= cmb(N * M - 2, K - 2, mod)","+ans1 %= mod","+print(ans1)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3568273056,"measured_runtime_v1":0.2588016932,"runtime_lift":1.3787672759,"key":["s392943696","s780766335"]}
{"user_id":"u537976628","problem_id":"p04044","language":"python","submission_id_v0":"s532034645","submission_id_v1":"s761755032","cpu_time_v0":23,"cpu_time_v1":17,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":26.09,"input":"N, L = list(map(int, input().split()))\n\nS = list(eval(input()) for i in range(N))\n\nstr = \"\"\n\nfor i in range(N-1):\n\n    for j in range(N-1):\n\n        if S[j+1] + S[j] <= S[j] + S[j+1]:\n\n            S[j], S[j+1] = S[j+1], S[j]\n\nfor i in S:\n\n    str += i\n\nprint(str)\n","target":"N, L = list(map(int, input().split()))\n\nS = list(eval(input()) for i in range(N))\n\nS.sort()\n\nstr = \"\"\n\nfor i in S:\n\n    str += i\n\nprint(str)\n","code_v0_loc":10,"code_v1_loc":7,"code_v0_num_chars":252,"code_v1_num_chars":129,"code_v0_no_empty_lines":"N, L = list(map(int, input().split()))\nS = list(eval(input()) for i in range(N))\nstr = \"\"\nfor i in range(N - 1):\n    for j in range(N - 1):\n        if S[j + 1] + S[j] <= S[j] + S[j + 1]:\n            S[j], S[j + 1] = S[j + 1], S[j]\nfor i in S:\n    str += i\nprint(str)\n","code_v1_no_empty_lines":"N, L = list(map(int, input().split()))\nS = list(eval(input()) for i in range(N))\nS.sort()\nstr = \"\"\nfor i in S:\n    str += i\nprint(str)\n","code_same":false,"relative_loc_diff_percent":30.0,"diff":["+S.sort()","-for i in range(N - 1):","-    for j in range(N - 1):","-        if S[j + 1] + S[j] <= S[j] + S[j + 1]:","-            S[j], S[j + 1] = S[j + 1], S[j]"],"diff_only_import_comment":false,"measured_runtime_v0":0.3469125528,"measured_runtime_v1":0.2633319349,"runtime_lift":1.317396437,"key":["s532034645","s761755032"]}
{"user_id":"u344655022","problem_id":"p02555","language":"python","submission_id_v0":"s549296835","submission_id_v1":"s211921463","cpu_time_v0":71,"cpu_time_v1":60,"memory_v0":64940,"memory_v1":63572,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.49,"input":"s = int(eval(input()))\n\nmod = 10**9 + 7\n\n\n\n# dp[i]: \u6700\u5f8c\u306b\u5207\u3063\u305f\u5834\u6240\u304ci\n\ndp = [0]*(s + 1)\n\ndp[0] = 1\n\n\n\nfor i in range(3, s+1):\n\n    for j in range(0, (i-3)+1):\n\n        dp[i] += dp[j]\n\n        dp[i] %= mod\n\n\n\nprint((dp[s]))","target":"s = int(eval(input()))\n\nmod = 10**9 + 7\n\n\n\n# dp[i]: \u6700\u5f8c\u306b\u5207\u3063\u305f\u5834\u6240\u304ci\n\ndp = [0]*(s + 1)\n\ndp[0] = 1\n\ntotal = 0\n\nfor i in range(3, s+1):\n\n    total += dp[i-3]\n\n    total %= mod\n\n    dp[i] = total\n\n\n\nprint((dp[s]))","code_v0_loc":13,"code_v1_loc":13,"code_v0_num_chars":207,"code_v1_num_chars":196,"code_v0_no_empty_lines":"s = int(eval(input()))\nmod = 10**9 + 7\n# dp[i]: \u6700\u5f8c\u306b\u5207\u3063\u305f\u5834\u6240\u304ci\ndp = [0] * (s + 1)\ndp[0] = 1\nfor i in range(3, s + 1):\n    for j in range(0, (i - 3) + 1):\n        dp[i] += dp[j]\n        dp[i] %= mod\nprint((dp[s]))\n","code_v1_no_empty_lines":"s = int(eval(input()))\nmod = 10**9 + 7\n# dp[i]: \u6700\u5f8c\u306b\u5207\u3063\u305f\u5834\u6240\u304ci\ndp = [0] * (s + 1)\ndp[0] = 1\ntotal = 0\nfor i in range(3, s + 1):\n    total += dp[i - 3]\n    total %= mod\n    dp[i] = total\nprint((dp[s]))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["+total = 0","-    for j in range(0, (i - 3) + 1):","-        dp[i] += dp[j]","-        dp[i] %= mod","+    total += dp[i - 3]","+    total %= mod","+    dp[i] = total"],"diff_only_import_comment":false,"measured_runtime_v0":0.6875757372,"measured_runtime_v1":0.2074076123,"runtime_lift":3.3150940291,"key":["s549296835","s211921463"]}
{"user_id":"u617990214","problem_id":"p02412","language":"python","submission_id_v0":"s470319892","submission_id_v1":"s042746843","cpu_time_v0":30,"cpu_time_v1":20,"memory_v0":6348,"memory_v1":6436,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":33.33,"input":"while True:\n\n\tk=list(map(int,input().split(\" \")))\n\n\tif k[0]==k[1]==0:\n\n\t\tbreak\n\n\tct=0\n\n\ta=0\n\n\tb=0\n\n\tc=0\t\n\n\tmax=k[0]\n\n\tsum=k[1]\n\n\ta=max+1\n\n\t\n\n\twhile True:\n\n\t\ta-=1\n\n\t\tb=a-1\n\n\t\tc=sum-a-b\n\n\t\tif not a>b>c:\n\n\t\t\tprint(ct)\n\n\t\t\tbreak\n\n\t\twhile a>b>c:\n\n\t\t\tif a>b>c>0:\n\n\t\t\t\tct+=1\n\n\t\t\tb-=1\n\n\t\t\tc+=1\n\n\t\t\t","target":"while True:\n\n\tk=list(map(int,input().split(\" \")))\n\n\tif k[0]==k[1]==0:\n\n\t\tbreak\n\n\tct=0\n\n\ta=0\n\n\tb=0\n\n\tc=0\t\n\n\tmax=k[0]\n\n\tsum=k[1]\n\n\ta=max+1\n\n\twhile True:\n\n\t\ta-=1\n\n\t\tb=a-1\n\n\t\tc=sum-a-b\n\n\t\tif not a>c:\n\n\t\t\tprint(ct)\n\n\t\t\tbreak\n\n\t\twhile b>c:\n\n\t\t\tif c>0:\n\n\t\t\t\tct+=1\n\n\t\t\tb-=1\n\n\t\t\tc+=1","code_v0_loc":25,"code_v1_loc":23,"code_v0_num_chars":287,"code_v1_num_chars":271,"code_v0_no_empty_lines":"while True:\n    k = list(map(int, input().split(\" \")))\n    if k[0] == k[1] == 0:\n        break\n    ct = 0\n    a = 0\n    b = 0\n    c = 0\n    max = k[0]\n    sum = k[1]\n    a = max + 1\n    while True:\n        a -= 1\n        b = a - 1\n        c = sum - a - b\n        if not a > b > c:\n            print(ct)\n            break\n        while a > b > c:\n            if a > b > c > 0:\n                ct += 1\n            b -= 1\n            c += 1\n","code_v1_no_empty_lines":"while True:\n    k = list(map(int, input().split(\" \")))\n    if k[0] == k[1] == 0:\n        break\n    ct = 0\n    a = 0\n    b = 0\n    c = 0\n    max = k[0]\n    sum = k[1]\n    a = max + 1\n    while True:\n        a -= 1\n        b = a - 1\n        c = sum - a - b\n        if not a > c:\n            print(ct)\n            break\n        while b > c:\n            if c > 0:\n                ct += 1\n            b -= 1\n            c += 1\n","code_same":false,"relative_loc_diff_percent":8.0,"diff":["-        if not a > b > c:","+        if not a > c:","-        while a > b > c:","-            if a > b > c > 0:","+        while b > c:","+            if c > 0:"],"diff_only_import_comment":false,"measured_runtime_v0":0.2289849162,"measured_runtime_v1":0.1798006518,"runtime_lift":1.273548866,"key":["s470319892","s042746843"]}
{"user_id":"u536034761","problem_id":"p04044","language":"python","submission_id_v0":"s161300550","submission_id_v1":"s718856768","cpu_time_v0":29,"cpu_time_v1":24,"memory_v0":9032,"memory_v1":9016,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.24,"input":"n, l = list(map(int, input().split()))\n\nS = [eval(input()) for i in range(n)]\n\nS.sort()\n\nprint((\"\".join(S)))","target":"n, l = list(map(int, input().split()))\n\nA = [eval(input()) for _ in range(n)]\n\nA.sort()\n\nprint((\"\".join(A)))\n","code_v0_loc":4,"code_v1_loc":4,"code_v0_num_chars":94,"code_v1_num_chars":95,"code_v0_no_empty_lines":"n, l = list(map(int, input().split()))\nS = [eval(input()) for i in range(n)]\nS.sort()\nprint((\"\".join(S)))\n","code_v1_no_empty_lines":"n, l = list(map(int, input().split()))\nA = [eval(input()) for _ in range(n)]\nA.sort()\nprint((\"\".join(A)))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-S = [eval(input()) for i in range(n)]","-S.sort()","-print((\"\".join(S)))","+A = [eval(input()) for _ in range(n)]","+A.sort()","+print((\"\".join(A)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3658422339,"measured_runtime_v1":0.2564776862,"runtime_lift":1.4264096006,"key":["s161300550","s718856768"]}
{"user_id":"u996564551","problem_id":"p03644","language":"python","submission_id_v0":"s317462383","submission_id_v1":"s803396146","cpu_time_v0":32,"cpu_time_v1":25,"memory_v0":9180,"memory_v1":9176,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":21.88,"input":"N = int(eval(input()))\n\nif N < 2:\n\n  print(N)\n\nelif 2<=N<4:\n\n  print((2))\n\nelif 4<=N<8:\n\n  print((4))\n\nelif 8<=N<16:\n\n  print((8))\n\nelif 16<=N<32:\n\n  print((16))\n\nelif 32<=N<64:\n\n  print((32))\n\nelif 64<=N:\n\n  print((64))","target":"N = int(eval(input()))\n\nNum = [int(2**i) for i in range(7)]\n\nif N in Num:\n\n  print(N)\n\nelse:\n\n  Num.append(N)\n\n  Num = sorted(Num)\n\n  print((2 ** (Num.index(N) - 1)))","code_v0_loc":15,"code_v1_loc":8,"code_v0_num_chars":202,"code_v1_num_chars":158,"code_v0_no_empty_lines":"N = int(eval(input()))\nif N < 2:\n    print(N)\nelif 2 <= N < 4:\n    print((2))\nelif 4 <= N < 8:\n    print((4))\nelif 8 <= N < 16:\n    print((8))\nelif 16 <= N < 32:\n    print((16))\nelif 32 <= N < 64:\n    print((32))\nelif 64 <= N:\n    print((64))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nNum = [int(2**i) for i in range(7)]\nif N in Num:\n    print(N)\nelse:\n    Num.append(N)\n    Num = sorted(Num)\n    print((2 ** (Num.index(N) - 1)))\n","code_same":false,"relative_loc_diff_percent":46.6666666667,"diff":["-if N < 2:","+Num = [int(2**i) for i in range(7)]","+if N in Num:","-elif 2 <= N < 4:","-    print((2))","-elif 4 <= N < 8:","-    print((4))","-elif 8 <= N < 16:","-    print((8))","-elif 16 <= N < 32:","-    print((16))","-elif 32 <= N < 64:","-    print((32))","-elif 64 <= N:","-    print((64))","+else:","+    Num.append(N)","+    Num = sorted(Num)","+    print((2 ** (Num.index(N) - 1)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3866926632,"measured_runtime_v1":0.2723876703,"runtime_lift":1.4196408479,"key":["s317462383","s803396146"]}
{"user_id":"u815878613","problem_id":"p03037","language":"python","submission_id_v0":"s043802358","submission_id_v1":"s120994164","cpu_time_v0":220,"cpu_time_v1":195,"memory_v0":27220,"memory_v1":9100,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.36,"input":"N, M = list(map(int, input().split()))\n\nLR = [list(map(int, input().split())) for _ in range(M)]\n\n\n\nleft = 1\n\nright = N\n\n\n\nfor l, r in LR:\n\n    if left < l:\n\n        left = l\n\n    if right > r:\n\n        right = r\n\n\n\nans = right - left\n\n\n\nprint((ans + 1 if ans >= 0 else 0))\n","target":"N, M = list(map(int, input().split()))\n\n\n\nleft = 1\n\nright = N\n\n\n\nfor _ in range(M):\n\n    l, r = list(map(int, input().split()))\n\n\n\n    if left < l:\n\n        left = l\n\n    if right > r:\n\n        right = r\n\n\n\nans = right - left\n\n\n\nprint((ans + 1 if ans >= 0 else 0))\n","code_v0_loc":15,"code_v1_loc":16,"code_v0_num_chars":266,"code_v1_num_chars":251,"code_v0_no_empty_lines":"N, M = list(map(int, input().split()))\nLR = [list(map(int, input().split())) for _ in range(M)]\nleft = 1\nright = N\nfor l, r in LR:\n    if left < l:\n        left = l\n    if right > r:\n        right = r\nans = right - left\nprint((ans + 1 if ans >= 0 else 0))\n","code_v1_no_empty_lines":"N, M = list(map(int, input().split()))\nleft = 1\nright = N\nfor _ in range(M):\n    l, r = list(map(int, input().split()))\n    if left < l:\n        left = l\n    if right > r:\n        right = r\nans = right - left\nprint((ans + 1 if ans >= 0 else 0))\n","code_same":false,"relative_loc_diff_percent":6.25,"diff":["-LR = [list(map(int, input().split())) for _ in range(M)]","-for l, r in LR:","+for _ in range(M):","+    l, r = list(map(int, input().split()))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2458969798,"measured_runtime_v1":0.1910107524,"runtime_lift":1.2873462706,"key":["s043802358","s120994164"]}
{"user_id":"u282228874","problem_id":"p03293","language":"python","submission_id_v0":"s664706993","submission_id_v1":"s616247709","cpu_time_v0":20,"cpu_time_v1":17,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.0,"input":"s = eval(input())\n\nt = eval(input())\n\nfor i in range(len(s)):\n\n        if s[i:]+s[:i]==t:\n\n                print('Yes')\n\n                exit()\n\nprint('No')","target":"s = eval(input())\n\nt = eval(input())\n\n\n\nfor i in range(len(s)):\n\n    s = s[1:] + s[0]\n\n    if s == t:\n\n        print(\"Yes\")\n\n        exit()\n\nprint(\"No\")","code_v0_loc":7,"code_v1_loc":9,"code_v0_num_chars":144,"code_v1_num_chars":140,"code_v0_no_empty_lines":"s = eval(input())\nt = eval(input())\nfor i in range(len(s)):\n    if s[i:] + s[:i] == t:\n        print(\"Yes\")\n        exit()\nprint(\"No\")\n","code_v1_no_empty_lines":"s = eval(input())\nt = eval(input())\nfor i in range(len(s)):\n    s = s[1:] + s[0]\n    if s == t:\n        print(\"Yes\")\n        exit()\nprint(\"No\")\n","code_same":false,"relative_loc_diff_percent":22.2222222222,"diff":["-    if s[i:] + s[:i] == t:","+    s = s[1:] + s[0]","+    if s == t:"],"diff_only_import_comment":false,"measured_runtime_v0":0.1894659722,"measured_runtime_v1":0.0060859642,"runtime_lift":31.1316277188,"key":["s664706993","s616247709"]}
{"user_id":"u466335531","problem_id":"p03309","language":"python","submission_id_v0":"s648346082","submission_id_v1":"s083367920","cpu_time_v0":1558,"cpu_time_v1":225,"memory_v0":34220,"memory_v1":26360,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":85.56,"input":"import numpy as np\n\n\n\nN=int(eval(input()))\n\nA=list(map(int, input().split()))\n\n\n\nAA=[]\n\nfor i,a in enumerate(A):\n\n    AA.append(a-i+1)\n\n\n\nb=np.median(AA)\n\nans=0\n\n\n\nfor a in AA:\n\n    ans+=abs(a-b)\n\nprint((int(ans)))","target":"N=int(eval(input()))\n\nA=list(map(int,input().split()))\n\nB=[]\n\nfor i in range(N):\n\n    B.append(A[i]-i-1)\n\nB.sort()\n\nif N%2:\n\n    b=B[N\/\/2]\n\nelse:\n\n    b=(B[N\/\/2]+B[N\/\/2-1])\/\/2\n\nans=0\n\nfor k in B:\n\n    ans+=abs(k-b)\n\nprint(ans)","code_v0_loc":15,"code_v1_loc":14,"code_v0_num_chars":206,"code_v1_num_chars":220,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nA = list(map(int, input().split()))\nAA = []\nfor i, a in enumerate(A):\n    AA.append(a - i + 1)\nb = np.median(AA)\nans = 0\nfor a in AA:\n    ans += abs(a - b)\nprint((int(ans)))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = list(map(int, input().split()))\nB = []\nfor i in range(N):\n    B.append(A[i] - i - 1)\nB.sort()\nif N % 2:\n    b = B[N \/\/ 2]\nelse:\n    b = (B[N \/\/ 2] + B[N \/\/ 2 - 1]) \/\/ 2\nans = 0\nfor k in B:\n    ans += abs(k - b)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":6.6666666667,"diff":["-import numpy as np","-","-AA = []","-for i, a in enumerate(A):","-    AA.append(a - i + 1)","-b = np.median(AA)","+B = []","+for i in range(N):","+    B.append(A[i] - i - 1)","+B.sort()","+if N % 2:","+    b = B[N \/\/ 2]","+else:","+    b = (B[N \/\/ 2] + B[N \/\/ 2 - 1]) \/\/ 2","-for a in AA:","-    ans += abs(a - b)","-print((int(ans)))","+for k in B:","+    ans += abs(k - b)","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.5822621562,"measured_runtime_v1":0.1663134053,"runtime_lift":3.5009935324,"key":["s648346082","s083367920"]}
{"user_id":"u285121325","problem_id":"p03060","language":"python","submission_id_v0":"s176163369","submission_id_v1":"s307096938","cpu_time_v0":20,"cpu_time_v1":17,"memory_v0":3060,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.0,"input":"n = int(eval(input()))\n\nv = list(map(int, input().split()))\n\nc = list(map(int, input().split()))\n\nresult = 0\n\nfor i in range(n):\n\n  if v[i] > c[i]:\n\n    result += v[i] - c[i]\n\nprint(result)","target":"N = int(eval(input()))\n\nV = list(map(int, input().split()))\n\nC = list(map(int, input().split()))\n\nprint((sum([V[i] - C[i] for i in range(N) if V[i] > C[i]])))\n","code_v0_loc":8,"code_v1_loc":4,"code_v0_num_chars":183,"code_v1_num_chars":151,"code_v0_no_empty_lines":"n = int(eval(input()))\nv = list(map(int, input().split()))\nc = list(map(int, input().split()))\nresult = 0\nfor i in range(n):\n    if v[i] > c[i]:\n        result += v[i] - c[i]\nprint(result)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nV = list(map(int, input().split()))\nC = list(map(int, input().split()))\nprint((sum([V[i] - C[i] for i in range(N) if V[i] > C[i]])))\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-n = int(eval(input()))","-v = list(map(int, input().split()))","-c = list(map(int, input().split()))","-result = 0","-for i in range(n):","-    if v[i] > c[i]:","-        result += v[i] - c[i]","-print(result)","+N = int(eval(input()))","+V = list(map(int, input().split()))","+C = list(map(int, input().split()))","+print((sum([V[i] - C[i] for i in range(N) if V[i] > C[i]])))"],"diff_only_import_comment":false,"measured_runtime_v0":0.1697382522,"measured_runtime_v1":0.0057968805,"runtime_lift":29.2809645377,"key":["s176163369","s307096938"]}
{"user_id":"u222207357","problem_id":"p02760","language":"python","submission_id_v0":"s817889698","submission_id_v1":"s477297423","cpu_time_v0":276,"cpu_time_v1":18,"memory_v0":18000,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":93.48,"input":"import numpy as np\n\n\n\na = [list(map(int, input().split())) for _ in range(3)]\n\na = np.array(a)\n\nn = int(eval(input()))\n\n\n\nfor _ in range(n):\n\n    b = int(eval(input()))\n\n    \n\n    for j in range(3):\n\n        for i in range(3):\n\n            if a[j][i] == b:\n\n                a[j][i] = 0\n\n\n\nat = a.transpose()\n\nflag = False\n\nfor i in range(3):\n\n    if sum(a[:][i]) == 0 or sum(at[:][i]) == 0:\n\n        flag = True\n\n        break\n\ndiag = a[0][0] + a[1][1] + a[2][2]\n\ndiag2 = a[2][0] + a[1][1] + a[0][2]\n\nif diag == 0 or diag2 == 0:\n\n    flag = True\n\n\n\nprint((\"Yes\" if flag else \"No\"))","target":"a = [list(map(int, input().split())) for _ in range(3)]\n\nn = int(eval(input()))\n\nb = [int(eval(input())) for _ in range(n)]\n\n\n\nflag = False\n\nfor i in range(3):\n\n    if a[i][0] in b and a[i][1] in b and a[i][2] in b:\n\n        flag = True\n\n        break\n\n    if a[0][i] in b and a[1][i] in b and a[2][i] in b:\n\n        flag = True\n\n        break\n\nif a[0][0] in b and a[1][1] in b and a[2][2] in b:\n\n    flag = True\n\nif a[2][0] in b and a[1][1] in b and a[0][2] in b:\n\n    flag = True\n\n    \n\nprint((\"Yes\" if flag else \"No\"))","code_v0_loc":26,"code_v1_loc":18,"code_v0_num_chars":567,"code_v1_num_chars":507,"code_v0_no_empty_lines":"import numpy as np\n\na = [list(map(int, input().split())) for _ in range(3)]\na = np.array(a)\nn = int(eval(input()))\nfor _ in range(n):\n    b = int(eval(input()))\n    for j in range(3):\n        for i in range(3):\n            if a[j][i] == b:\n                a[j][i] = 0\nat = a.transpose()\nflag = False\nfor i in range(3):\n    if sum(a[:][i]) == 0 or sum(at[:][i]) == 0:\n        flag = True\n        break\ndiag = a[0][0] + a[1][1] + a[2][2]\ndiag2 = a[2][0] + a[1][1] + a[0][2]\nif diag == 0 or diag2 == 0:\n    flag = True\nprint((\"Yes\" if flag else \"No\"))\n","code_v1_no_empty_lines":"a = [list(map(int, input().split())) for _ in range(3)]\nn = int(eval(input()))\nb = [int(eval(input())) for _ in range(n)]\nflag = False\nfor i in range(3):\n    if a[i][0] in b and a[i][1] in b and a[i][2] in b:\n        flag = True\n        break\n    if a[0][i] in b and a[1][i] in b and a[2][i] in b:\n        flag = True\n        break\nif a[0][0] in b and a[1][1] in b and a[2][2] in b:\n    flag = True\nif a[2][0] in b and a[1][1] in b and a[0][2] in b:\n    flag = True\nprint((\"Yes\" if flag else \"No\"))\n","code_same":false,"relative_loc_diff_percent":30.7692307692,"diff":["-import numpy as np","-","-a = np.array(a)","-for _ in range(n):","-    b = int(eval(input()))","-    for j in range(3):","-        for i in range(3):","-            if a[j][i] == b:","-                a[j][i] = 0","-at = a.transpose()","+b = [int(eval(input())) for _ in range(n)]","-    if sum(a[:][i]) == 0 or sum(at[:][i]) == 0:","+    if a[i][0] in b and a[i][1] in b and a[i][2] in b:","-diag = a[0][0] + a[1][1] + a[2][2]","-diag2 = a[2][0] + a[1][1] + a[0][2]","-if diag == 0 or diag2 == 0:","+    if a[0][i] in b and a[1][i] in b and a[2][i] in b:","+        flag = True","+        break","+if a[0][0] in b and a[1][1] in b and a[2][2] in b:","+    flag = True","+if a[2][0] in b and a[1][1] in b and a[0][2] in b:"],"diff_only_import_comment":false,"measured_runtime_v0":1.1347907202,"measured_runtime_v1":0.1888160048,"runtime_lift":6.0100345924,"key":["s817889698","s477297423"]}
{"user_id":"u102242691","problem_id":"p03592","language":"python","submission_id_v0":"s217761930","submission_id_v1":"s778426463","cpu_time_v0":406,"cpu_time_v1":310,"memory_v0":3060,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":23.65,"input":"\n\nn,m,k = list(map(int,input().split()))\n\n#\uff11\u56de\u62bc\u3059\u3068\u5909\u308f\u308b\u30de\u30b9\u3000= N * M -1\n\n#\uff12\u56de\u76ee\u62bc\u3059\u3068\u9ed2\u306b\u5909\u308f\u308b\u30de\u30b9 N * M -1 -2\n\n# 3 = N * M -1 -4\n\n\n\ncnt = 0\n\nfor i in range(n+1):\n\n    for j in range(m + 1):\n\n        cnt = i * m + j * n -2 * i * j\n\n        if cnt == k:\n\n            print(\"Yes\")\n\n            exit()\n\nprint(\"No\")\n","target":"\n\nn,m,k = list(map(int,input().split()))\n\n\n\nfor i in range(n+1):\n\n    for j in range(m+1):\n\n        if i*(m-j) + j*(n-i) == k:\n\n            print(\"Yes\")\n\n            exit()\n\nprint(\"No\")\n","code_v0_loc":14,"code_v1_loc":9,"code_v0_num_chars":288,"code_v1_num_chars":180,"code_v0_no_empty_lines":"n, m, k = list(map(int, input().split()))\n# \uff11\u56de\u62bc\u3059\u3068\u5909\u308f\u308b\u30de\u30b9\u3000= N * M -1\n# \uff12\u56de\u76ee\u62bc\u3059\u3068\u9ed2\u306b\u5909\u308f\u308b\u30de\u30b9 N * M -1 -2\n# 3 = N * M -1 -4\ncnt = 0\nfor i in range(n + 1):\n    for j in range(m + 1):\n        cnt = i * m + j * n - 2 * i * j\n        if cnt == k:\n            print(\"Yes\")\n            exit()\nprint(\"No\")\n","code_v1_no_empty_lines":"n, m, k = list(map(int, input().split()))\nfor i in range(n + 1):\n    for j in range(m + 1):\n        if i * (m - j) + j * (n - i) == k:\n            print(\"Yes\")\n            exit()\nprint(\"No\")\n","code_same":false,"relative_loc_diff_percent":35.7142857143,"diff":["-# \uff11\u56de\u62bc\u3059\u3068\u5909\u308f\u308b\u30de\u30b9\u3000= N * M -1","-# \uff12\u56de\u76ee\u62bc\u3059\u3068\u9ed2\u306b\u5909\u308f\u308b\u30de\u30b9 N * M -1 -2","-# 3 = N * M -1 -4","-cnt = 0","-        cnt = i * m + j * n - 2 * i * j","-        if cnt == k:","+        if i * (m - j) + j * (n - i) == k:"],"diff_only_import_comment":false,"measured_runtime_v0":0.2209630473,"measured_runtime_v1":0.0057685788,"runtime_lift":38.3045903988,"key":["s217761930","s778426463"]}
{"user_id":"u879870653","problem_id":"p03416","language":"python","submission_id_v0":"s279175230","submission_id_v1":"s789865740","cpu_time_v0":111,"cpu_time_v1":45,"memory_v0":3060,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":59.46,"input":"a,b = list(map(int,input().split()))\n\nanswer = 0\n\nfor i in range(a,b+1) :\n\n    j = str(i)\n\n    p1 = j[4]\n\n    p2 = j[3]\n\n    p3 = j[2]\n\n    p4 = j[1]\n\n    p5 = j[0]\n\n    k = int(p1+p2+p3+p4+p5)\n\n    if i == k :\n\n        answer += 1\n\nprint(answer)\n\n\n","target":"A,B = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(A,B+1) :\n\n    l = str(i)\n\n    if l[0] == l[4] and l[1] == l[3] :\n\n        ans += 1\n\nprint(ans)\n","code_v0_loc":14,"code_v1_loc":7,"code_v0_num_chars":243,"code_v1_num_chars":151,"code_v0_no_empty_lines":"a, b = list(map(int, input().split()))\nanswer = 0\nfor i in range(a, b + 1):\n    j = str(i)\n    p1 = j[4]\n    p2 = j[3]\n    p3 = j[2]\n    p4 = j[1]\n    p5 = j[0]\n    k = int(p1 + p2 + p3 + p4 + p5)\n    if i == k:\n        answer += 1\nprint(answer)\n","code_v1_no_empty_lines":"A, B = list(map(int, input().split()))\nans = 0\nfor i in range(A, B + 1):\n    l = str(i)\n    if l[0] == l[4] and l[1] == l[3]:\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-a, b = list(map(int, input().split()))","-answer = 0","-for i in range(a, b + 1):","-    j = str(i)","-    p1 = j[4]","-    p2 = j[3]","-    p3 = j[2]","-    p4 = j[1]","-    p5 = j[0]","-    k = int(p1 + p2 + p3 + p4 + p5)","-    if i == k:","-        answer += 1","-print(answer)","+A, B = list(map(int, input().split()))","+ans = 0","+for i in range(A, B + 1):","+    l = str(i)","+    if l[0] == l[4] and l[1] == l[3]:","+        ans += 1","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.5475045266,"measured_runtime_v1":0.378210106,"runtime_lift":1.4476200343,"key":["s279175230","s789865740"]}
{"user_id":"u936985471","problem_id":"p03721","language":"python","submission_id_v0":"s865752287","submission_id_v1":"s921873406","cpu_time_v0":343,"cpu_time_v1":288,"memory_v0":15072,"memory_v1":29824,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.03,"input":"N,K=list(map(int,input().split()))\n\ndic={}\n\nfor i in range(N):\n\n  a,b=list(map(int,input().split()))\n\n  if a in dic:\n\n    dic[a]+=b\n\n  else:\n\n    dic[a]=b\n\n    \n\ndic=sorted(list(dic.items()),key=lambda x:x[0])\n\nfor d in range(len(dic)):\n\n  amount=dic[d][1]\n\n  if amount>=K:\n\n    print((dic[d][0]))\n\n    exit(0)\n\n  else:\n\n    K-=amount\n\n  ","target":"import sys\n\nreadline = sys.stdin.readline\n\n\n\nN,K = list(map(int,readline().split()))\n\n\n\nAB = [list(map(int,readline().split())) for i in range(N)]\n\n\n\nAB = sorted(AB, key = lambda x:x[0])\n\namount = 0\n\nfor a,b in AB:\n\n  amount += b\n\n  if amount >= K:\n\n    print(a)\n\n    break\n","code_v0_loc":18,"code_v1_loc":14,"code_v0_num_chars":318,"code_v1_num_chars":268,"code_v0_no_empty_lines":"N, K = list(map(int, input().split()))\ndic = {}\nfor i in range(N):\n    a, b = list(map(int, input().split()))\n    if a in dic:\n        dic[a] += b\n    else:\n        dic[a] = b\ndic = sorted(list(dic.items()), key=lambda x: x[0])\nfor d in range(len(dic)):\n    amount = dic[d][1]\n    if amount >= K:\n        print((dic[d][0]))\n        exit(0)\n    else:\n        K -= amount\n","code_v1_no_empty_lines":"import sys\n\nreadline = sys.stdin.readline\nN, K = list(map(int, readline().split()))\nAB = [list(map(int, readline().split())) for i in range(N)]\nAB = sorted(AB, key=lambda x: x[0])\namount = 0\nfor a, b in AB:\n    amount += b\n    if amount >= K:\n        print(a)\n        break\n","code_same":false,"relative_loc_diff_percent":22.2222222222,"diff":["-N, K = list(map(int, input().split()))","-dic = {}","-for i in range(N):","-    a, b = list(map(int, input().split()))","-    if a in dic:","-        dic[a] += b","-    else:","-        dic[a] = b","-dic = sorted(list(dic.items()), key=lambda x: x[0])","-for d in range(len(dic)):","-    amount = dic[d][1]","+import sys","+","+readline = sys.stdin.readline","+N, K = list(map(int, readline().split()))","+AB = [list(map(int, readline().split())) for i in range(N)]","+AB = sorted(AB, key=lambda x: x[0])","+amount = 0","+for a, b in AB:","+    amount += b","-        print((dic[d][0]))","-        exit(0)","-    else:","-        K -= amount","+        print(a)","+        break"],"diff_only_import_comment":false,"measured_runtime_v0":0.3684674098,"measured_runtime_v1":0.2810288085,"runtime_lift":1.3111375012,"key":["s865752287","s921873406"]}
{"user_id":"u197300260","problem_id":"p03814","language":"python","submission_id_v0":"s932284243","submission_id_v1":"s708109984","cpu_time_v0":36,"cpu_time_v1":29,"memory_v0":4012,"memory_v1":3516,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":19.44,"input":"# Problem https:\/\/atcoder.jp\/contests\/abc053\/tasks\/abc053_b\n\n# Python 1st Try\n\nimport copy\n\n\n\n\n\nclass Problem:\n\n    def __init__(self, stringdata):\n\n        self.stringdata = stringdata\n\n\n\n    def solver(self):\n\n        strcont = copy.copy(self.stringdata)\n\n        result = 0\n\n        rightposition = 0\n\n        leftposition = len(strcont)\n\n        j = 0\n\n        while True:\n\n            if strcont[j] == 'A':\n\n                rightposition = j\n\n                break\n\n            else:\n\n                j = j + 1\n\n        j = leftposition - 1\n\n        while True:\n\n            if strcont[j] == 'Z':\n\n                leftposition = j\n\n                break\n\n            else:\n\n                j = j - 1\n\n\n\n        result = leftposition - rightposition + 1\n\n        return result\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    s = eval(input())\n\n    print((\"{}\".format(Problem(s).solver())))\n","target":"# Problem https:\/\/atcoder.jp\/contests\/abc053\/tasks\/abc053_b\n\n# Python 2nd Try\n\n\n\n\n\ndef solver(string):\n\n    result = 200000\n\n    aposi = 0\n\n    zposi = len(string)\n\n    for j in range(0, len(string), 1):\n\n        if string[j] == 'A':\n\n            aposi = j\n\n            break\n\n    for j in range(len(string)-1, -1, -1):\n\n        if string[j] == 'Z':\n\n            zposi = j\n\n            break\n\n    result = zposi - aposi + 1\n\n    return result\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    s = eval(input())\n\n    print(('{}'.format(solver(s))))\n","code_v0_loc":36,"code_v1_loc":23,"code_v0_num_chars":875,"code_v1_num_chars":527,"code_v0_no_empty_lines":"# Problem https:\/\/atcoder.jp\/contests\/abc053\/tasks\/abc053_b\n# Python 1st Try\nimport copy\n\n\nclass Problem:\n    def __init__(self, stringdata):\n        self.stringdata = stringdata\n\n    def solver(self):\n        strcont = copy.copy(self.stringdata)\n        result = 0\n        rightposition = 0\n        leftposition = len(strcont)\n        j = 0\n        while True:\n            if strcont[j] == \"A\":\n                rightposition = j\n                break\n            else:\n                j = j + 1\n        j = leftposition - 1\n        while True:\n            if strcont[j] == \"Z\":\n                leftposition = j\n                break\n            else:\n                j = j - 1\n        result = leftposition - rightposition + 1\n        return result\n\n\nif __name__ == \"__main__\":\n    s = eval(input())\n    print((\"{}\".format(Problem(s).solver())))\n","code_v1_no_empty_lines":"# Problem https:\/\/atcoder.jp\/contests\/abc053\/tasks\/abc053_b\n# Python 2nd Try\ndef solver(string):\n    result = 200000\n    aposi = 0\n    zposi = len(string)\n    for j in range(0, len(string), 1):\n        if string[j] == \"A\":\n            aposi = j\n            break\n    for j in range(len(string) - 1, -1, -1):\n        if string[j] == \"Z\":\n            zposi = j\n            break\n    result = zposi - aposi + 1\n    return result\n\n\nif __name__ == \"__main__\":\n    s = eval(input())\n    print((\"{}\".format(solver(s))))\n","code_same":false,"relative_loc_diff_percent":36.1111111111,"diff":["-# Python 1st Try","-import copy","-","-","-class Problem:","-    def __init__(self, stringdata):","-        self.stringdata = stringdata","-","-    def solver(self):","-        strcont = copy.copy(self.stringdata)","-        result = 0","-        rightposition = 0","-        leftposition = len(strcont)","-        j = 0","-        while True:","-            if strcont[j] == \"A\":","-                rightposition = j","-                break","-            else:","-                j = j + 1","-        j = leftposition - 1","-        while True:","-            if strcont[j] == \"Z\":","-                leftposition = j","-                break","-            else:","-                j = j - 1","-        result = leftposition - rightposition + 1","-        return result","+# Python 2nd Try","+def solver(string):","+    result = 200000","+    aposi = 0","+    zposi = len(string)","+    for j in range(0, len(string), 1):","+        if string[j] == \"A\":","+            aposi = j","+            break","+    for j in range(len(string) - 1, -1, -1):","+        if string[j] == \"Z\":","+            zposi = j","+            break","+    result = zposi - aposi + 1","+    return result","-    print((\"{}\".format(Problem(s).solver())))","+    print((\"{}\".format(solver(s))))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2169195101,"measured_runtime_v1":0.1208960545,"runtime_lift":1.7942645936,"key":["s932284243","s708109984"]}
{"user_id":"u691874710","problem_id":"p02690","language":"python","submission_id_v0":"s109040531","submission_id_v1":"s154929994","cpu_time_v0":142,"cpu_time_v1":38,"memory_v0":9168,"memory_v1":9132,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":73.24,"input":"x=int(eval(input()))\n\nA=0\n\nB=0\n\nfor a in range(-120,120):\n\n    for b in range(-500,500):\n\n        if a**5-b**5==x:\n\n            A=a\n\n            B=b\n\n            break\n\nprint((A,B))","target":"x=int(eval(input()))\n\nA=0\n\nB=0\n\nfor a in range(-120, 120):\n\n    a5 = a**5\n\n    for b in range(-120, 120):\n\n        if a5 - b**5 == x:\n\n            A = a\n\n            B = b\n\n            break\n\nprint((A,B))","code_v0_loc":10,"code_v1_loc":11,"code_v0_num_chars":173,"code_v1_num_chars":196,"code_v0_no_empty_lines":"x = int(eval(input()))\nA = 0\nB = 0\nfor a in range(-120, 120):\n    for b in range(-500, 500):\n        if a**5 - b**5 == x:\n            A = a\n            B = b\n            break\nprint((A, B))\n","code_v1_no_empty_lines":"x = int(eval(input()))\nA = 0\nB = 0\nfor a in range(-120, 120):\n    a5 = a**5\n    for b in range(-120, 120):\n        if a5 - b**5 == x:\n            A = a\n            B = b\n            break\nprint((A, B))\n","code_same":false,"relative_loc_diff_percent":9.0909090909,"diff":["-    for b in range(-500, 500):","-        if a**5 - b**5 == x:","+    a5 = a**5","+    for b in range(-120, 120):","+        if a5 - b**5 == x:"],"diff_only_import_comment":false,"measured_runtime_v0":1.9916155219,"measured_runtime_v1":0.3713067094,"runtime_lift":5.363801599,"key":["s109040531","s154929994"]}
{"user_id":"u633068244","problem_id":"p00827","language":"python","submission_id_v0":"s400923829","submission_id_v1":"s127207739","cpu_time_v0":2670,"cpu_time_v1":1630,"memory_v0":4240,"memory_v1":4240,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":38.95,"input":"def judge(x,y):\n\n    global xx,yy,xy,axby\n\n    if min(x,y) >= 0 and x+y <= xy:\n\n        if x+y < xy or (x+y == xy and a*x+b*y < axby):\n\n            xy = x+y\n\n            axby = a*x+b*y\n\n            xx,yy = x,y\n\n    \n\nwhile 1:\n\n    a,b,d = list(map(int,input().split()))\n\n    if a == 0: break\n\n    xy = axby = 10**10\n\n    for y in range(50001):\n\n        if (d+b*y)%a == 0: judge((d+b*y)\/a,y)\n\n        if (b*y-d)%a == 0: judge((b*y-d)\/a,y)\n\n        if (d-b*y)%a == 0: judge((d-b*y)\/a,y)\n\n    print(xx,yy)","target":"def judge(x,y):\n\n    global xx,yy,xy,axby\n\n    if min(x,y) >= 0 and x+y <= xy:\n\n        if x+y < xy or (x+y == xy and a*x+b*y < axby):\n\n            xy = x+y\n\n            axby = a*x+b*y\n\n            xx,yy = x,y\n\n    \n\nwhile 1:\n\n    a,b,d = list(map(int,input().split()))\n\n    if a == 0: break\n\n    xy = axby = 10**10\n\n    for y in range(30001):\n\n        if (d+b*y)%a == 0: judge((d+b*y)\/a,y)\n\n        if (b*y-d)%a == 0: judge((b*y-d)\/a,y)\n\n        if (d-b*y)%a == 0: judge((d-b*y)\/a,y)\n\n    print(xx,yy)","code_v0_loc":17,"code_v1_loc":17,"code_v0_num_chars":500,"code_v1_num_chars":500,"code_v0_no_empty_lines":"def judge(x, y):\n    global xx, yy, xy, axby\n    if min(x, y) >= 0 and x + y <= xy:\n        if x + y < xy or (x + y == xy and a * x + b * y < axby):\n            xy = x + y\n            axby = a * x + b * y\n            xx, yy = x, y\n\n\nwhile 1:\n    a, b, d = list(map(int, input().split()))\n    if a == 0:\n        break\n    xy = axby = 10**10\n    for y in range(50001):\n        if (d + b * y) % a == 0:\n            judge((d + b * y) \/ a, y)\n        if (b * y - d) % a == 0:\n            judge((b * y - d) \/ a, y)\n        if (d - b * y) % a == 0:\n            judge((d - b * y) \/ a, y)\n    print(xx, yy)\n","code_v1_no_empty_lines":"def judge(x, y):\n    global xx, yy, xy, axby\n    if min(x, y) >= 0 and x + y <= xy:\n        if x + y < xy or (x + y == xy and a * x + b * y < axby):\n            xy = x + y\n            axby = a * x + b * y\n            xx, yy = x, y\n\n\nwhile 1:\n    a, b, d = list(map(int, input().split()))\n    if a == 0:\n        break\n    xy = axby = 10**10\n    for y in range(30001):\n        if (d + b * y) % a == 0:\n            judge((d + b * y) \/ a, y)\n        if (b * y - d) % a == 0:\n            judge((b * y - d) \/ a, y)\n        if (d - b * y) % a == 0:\n            judge((d - b * y) \/ a, y)\n    print(xx, yy)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    for y in range(50001):","+    for y in range(30001):"],"diff_only_import_comment":false,"measured_runtime_v0":2.061502672,"measured_runtime_v1":1.2161544886,"runtime_lift":1.6950993409,"key":["s400923829","s127207739"]}
{"user_id":"u934402094","problem_id":"p02982","language":"python","submission_id_v0":"s019304466","submission_id_v1":"s281685543","cpu_time_v0":150,"cpu_time_v1":60,"memory_v0":12392,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":60.0,"input":"import math\n\nimport numpy as np\n\nn, d = list(map(int, input().split()))\n\na = []\n\ncnt = 0\n\nfor x in range(n):\n\n    a.append(list(map(int, input().split())))\n\nfor i in range(len(a)):\n\n    for j in range(len(a)):\n\n        if i < j:\n\n            dis = np.array(a[i]) - np.array(a[j])\n\n            if np.linalg.norm(dis).is_integer():\n\n                cnt += 1\n\nprint(cnt)","target":"n, d = list(map(int, input().split()))\n\na = [[int(i) for i in input().split()] for i in range(n)]\n\nans = 0\n\ndef dis(x,y):\n\n    T = []\n\n    for i in range(len(x)):\n\n        T.append((x[i]-y[i])**2)\n\n    return sum(T)\n\nfor i in range(n):\n\n    for j in range(i+1,n):\n\n        r = dis(a[i], a[j])\n\n        for k in range(r + 1):\n\n            if k ** 2 == r:\n\n                ans += 1\n\nprint(ans)","code_v0_loc":14,"code_v1_loc":15,"code_v0_num_chars":361,"code_v1_num_chars":385,"code_v0_no_empty_lines":"import math\nimport numpy as np\n\nn, d = list(map(int, input().split()))\na = []\ncnt = 0\nfor x in range(n):\n    a.append(list(map(int, input().split())))\nfor i in range(len(a)):\n    for j in range(len(a)):\n        if i < j:\n            dis = np.array(a[i]) - np.array(a[j])\n            if np.linalg.norm(dis).is_integer():\n                cnt += 1\nprint(cnt)\n","code_v1_no_empty_lines":"n, d = list(map(int, input().split()))\na = [[int(i) for i in input().split()] for i in range(n)]\nans = 0\n\n\ndef dis(x, y):\n    T = []\n    for i in range(len(x)):\n        T.append((x[i] - y[i]) ** 2)\n    return sum(T)\n\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        r = dis(a[i], a[j])\n        for k in range(r + 1):\n            if k**2 == r:\n                ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":6.6666666667,"diff":["-import math","-import numpy as np","+n, d = list(map(int, input().split()))","+a = [[int(i) for i in input().split()] for i in range(n)]","+ans = 0","-n, d = list(map(int, input().split()))","-a = []","-cnt = 0","-for x in range(n):","-    a.append(list(map(int, input().split())))","-for i in range(len(a)):","-    for j in range(len(a)):","-        if i < j:","-            dis = np.array(a[i]) - np.array(a[j])","-            if np.linalg.norm(dis).is_integer():","-                cnt += 1","-print(cnt)","+","+def dis(x, y):","+    T = []","+    for i in range(len(x)):","+        T.append((x[i] - y[i]) ** 2)","+    return sum(T)","+","+","+for i in range(n):","+    for j in range(i + 1, n):","+        r = dis(a[i], a[j])","+        for k in range(r + 1):","+            if k**2 == r:","+                ans += 1","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.7124312692,"measured_runtime_v1":0.2432892454,"runtime_lift":7.0386640664,"key":["s019304466","s281685543"]}
{"user_id":"u821588465","problem_id":"p03000","language":"python","submission_id_v0":"s259788442","submission_id_v1":"s163625054","cpu_time_v0":29,"cpu_time_v1":25,"memory_v0":9172,"memory_v1":8984,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.79,"input":"from itertools import accumulate\n\nfrom bisect import *\n\nN, X = list(map(int, input().split()))\n\nL = list(tuple(map(int, input().split())))\n\n\n\nacc = sorted(list(accumulate(L)) + [0])\n\n\n\nn = bisect_right(acc,X)\n\nprint(n)\n\n\n","target":"N,X = list(map(int,input().split()))\n\nL = list(map(int,input().split()))\n\nList = [0]*(N+1)\n\nfor i in range(1,N+1):\n\n    List[i] = List[i-1] + L[i-1]\n\nA = [i for i in List if i <=X]\n\nprint((len(A)))","code_v0_loc":10,"code_v1_loc":7,"code_v0_num_chars":215,"code_v1_num_chars":189,"code_v0_no_empty_lines":"from itertools import accumulate\nfrom bisect import *\n\nN, X = list(map(int, input().split()))\nL = list(tuple(map(int, input().split())))\nacc = sorted(list(accumulate(L)) + [0])\nn = bisect_right(acc, X)\nprint(n)\n","code_v1_no_empty_lines":"N, X = list(map(int, input().split()))\nL = list(map(int, input().split()))\nList = [0] * (N + 1)\nfor i in range(1, N + 1):\n    List[i] = List[i - 1] + L[i - 1]\nA = [i for i in List if i <= X]\nprint((len(A)))\n","code_same":false,"relative_loc_diff_percent":30.0,"diff":["-from itertools import accumulate","-from bisect import *","-","-L = list(tuple(map(int, input().split())))","-acc = sorted(list(accumulate(L)) + [0])","-n = bisect_right(acc, X)","-print(n)","+L = list(map(int, input().split()))","+List = [0] * (N + 1)","+for i in range(1, N + 1):","+    List[i] = List[i - 1] + L[i - 1]","+A = [i for i in List if i <= X]","+print((len(A)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2199657279,"measured_runtime_v1":0.1756561113,"runtime_lift":1.2522520635,"key":["s259788442","s163625054"]}
{"user_id":"u460245024","problem_id":"p03416","language":"python","submission_id_v0":"s770002751","submission_id_v1":"s323286862","cpu_time_v0":51,"cpu_time_v1":32,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":37.25,"input":"A, B = list(map(int, input().split()))\n\n\n\ncnt = 0\n\nfor n in range(A, B+1):\n\n    n_s = str(n)\n\n    n_s_rvs = n_s[::-1]\n\n    if n_s == n_s_rvs:\n\n        cnt += 1\n\n\n\nprint(cnt)\n","target":"A, B = list(map(int, input().split()))\n\n\n\ncnt = 0\n\nfor n in range(A, B+1):\n\n    if n\/\/10000 == n%10 and (n\/\/1000)%10 == (n\/\/10)%10:\n\n        cnt += 1\n\n\n\nprint(cnt)\n","code_v0_loc":10,"code_v1_loc":8,"code_v0_num_chars":168,"code_v1_num_chars":158,"code_v0_no_empty_lines":"A, B = list(map(int, input().split()))\ncnt = 0\nfor n in range(A, B + 1):\n    n_s = str(n)\n    n_s_rvs = n_s[::-1]\n    if n_s == n_s_rvs:\n        cnt += 1\nprint(cnt)\n","code_v1_no_empty_lines":"A, B = list(map(int, input().split()))\ncnt = 0\nfor n in range(A, B + 1):\n    if n \/\/ 10000 == n % 10 and (n \/\/ 1000) % 10 == (n \/\/ 10) % 10:\n        cnt += 1\nprint(cnt)\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["-    n_s = str(n)","-    n_s_rvs = n_s[::-1]","-    if n_s == n_s_rvs:","+    if n \/\/ 10000 == n % 10 and (n \/\/ 1000) % 10 == (n \/\/ 10) % 10:"],"diff_only_import_comment":false,"measured_runtime_v0":0.3429904201,"measured_runtime_v1":0.2179555298,"runtime_lift":1.5736715671,"key":["s770002751","s323286862"]}
{"user_id":"u606045429","problem_id":"p03649","language":"python","submission_id_v0":"s241047741","submission_id_v1":"s915089659","cpu_time_v0":182,"cpu_time_v1":44,"memory_v0":12504,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":75.82,"input":"from numpy import*\n\nN,*A=open(0)\n\nN,A,S,a=int(N),loadtxt(A,int),1,0\n\nwhile S:B=A\/\/N;S=sum(B);a+=S;A+=S-B*-~N\n\nprint(a)","target":"N, *A = list(map(int, open(0).read().split()))\n\n\n\nans = 0\n\nS = -1\n\nwhile S:\n\n    S = sum(a \/\/ N for a in A)\n\n    ans += S\n\n    A = [a % N + (S - a \/\/ N) for a in A]\n\n\n\nprint(ans)\n","code_v0_loc":5,"code_v1_loc":10,"code_v0_num_chars":118,"code_v1_num_chars":173,"code_v0_no_empty_lines":"from numpy import *\n\nN, *A = open(0)\nN, A, S, a = int(N), loadtxt(A, int), 1, 0\nwhile S:\n    B = A \/\/ N\n    S = sum(B)\n    a += S\n    A += S - B * -~N\nprint(a)\n","code_v1_no_empty_lines":"N, *A = list(map(int, open(0).read().split()))\nans = 0\nS = -1\nwhile S:\n    S = sum(a \/\/ N for a in A)\n    ans += S\n    A = [a % N + (S - a \/\/ N) for a in A]\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-from numpy import *","-","-N, *A = open(0)","-N, A, S, a = int(N), loadtxt(A, int), 1, 0","+N, *A = list(map(int, open(0).read().split()))","+ans = 0","+S = -1","-    B = A \/\/ N","-    S = sum(B)","-    a += S","-    A += S - B * -~N","-print(a)","+    S = sum(a \/\/ N for a in A)","+    ans += S","+    A = [a % N + (S - a \/\/ N) for a in A]","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.776489467,"measured_runtime_v1":0.278480018,"runtime_lift":6.379234962,"key":["s241047741","s915089659"]}
{"user_id":"u829249049","problem_id":"p02702","language":"python","submission_id_v0":"s047602834","submission_id_v1":"s942020484","cpu_time_v0":745,"cpu_time_v1":112,"memory_v0":27280,"memory_v1":9336,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":84.97,"input":"import numpy as np\n\nS=eval(input())\n\nN=len(S)\n\nmod=[0 for i in range(2019)]\n\nmod2=0\n\nten=1\n\nfor i in range(N-1,-1,-1): \n\n  s=int(S[i])*ten\n\n  mod2+=np.mod(s,2019)\n\n  mod2=np.mod(mod2,2019)\n\n  mod[mod2]+=1\n\n  ten=(ten*10)%2019\n\nans=0\n\nfor i in range(2019):\n\n  k=mod[i]\n\n  if i==0:\n\n    if k>=2:\n\n      ans+=k*(k-1)\/\/2+k\n\n    else:\n\n      ans+=k\n\n  else:\n\n    if k>=2:\n\n      ans+=k*(k-1)\/\/2\n\nprint(ans) ","target":"S=eval(input())\n\nN=len(S)\n\nmod=[0 for i in range(2019)]\n\ns=0\n\nten=1\n\nfor i in range(N-1,-1,-1): \n\n  s+=int(S[i])*ten\n\n  mod2=s%2019\n\n  mod[mod2]+=1\n\n  ten=(ten*10)%2019\n\nans=0\n\nfor i in range(2019):\n\n  k=mod[i]\n\n  if i==0:\n\n    if k>=2:\n\n      ans+=k*(k-1)\/\/2+k\n\n    else:\n\n      ans+=k\n\n  else:\n\n    if k>=2:\n\n      ans+=k*(k-1)\/\/2\n\nprint(ans) ","code_v0_loc":24,"code_v1_loc":22,"code_v0_num_chars":396,"code_v1_num_chars":339,"code_v0_no_empty_lines":"import numpy as np\n\nS = eval(input())\nN = len(S)\nmod = [0 for i in range(2019)]\nmod2 = 0\nten = 1\nfor i in range(N - 1, -1, -1):\n    s = int(S[i]) * ten\n    mod2 += np.mod(s, 2019)\n    mod2 = np.mod(mod2, 2019)\n    mod[mod2] += 1\n    ten = (ten * 10) % 2019\nans = 0\nfor i in range(2019):\n    k = mod[i]\n    if i == 0:\n        if k >= 2:\n            ans += k * (k - 1) \/\/ 2 + k\n        else:\n            ans += k\n    else:\n        if k >= 2:\n            ans += k * (k - 1) \/\/ 2\nprint(ans)\n","code_v1_no_empty_lines":"S = eval(input())\nN = len(S)\nmod = [0 for i in range(2019)]\ns = 0\nten = 1\nfor i in range(N - 1, -1, -1):\n    s += int(S[i]) * ten\n    mod2 = s % 2019\n    mod[mod2] += 1\n    ten = (ten * 10) % 2019\nans = 0\nfor i in range(2019):\n    k = mod[i]\n    if i == 0:\n        if k >= 2:\n            ans += k * (k - 1) \/\/ 2 + k\n        else:\n            ans += k\n    else:\n        if k >= 2:\n            ans += k * (k - 1) \/\/ 2\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":8.3333333333,"diff":["-import numpy as np","-","-mod2 = 0","+s = 0","-    s = int(S[i]) * ten","-    mod2 += np.mod(s, 2019)","-    mod2 = np.mod(mod2, 2019)","+    s += int(S[i]) * ten","+    mod2 = s % 2019"],"diff_only_import_comment":false,"measured_runtime_v0":0.3945806601,"measured_runtime_v1":0.1306606822,"runtime_lift":3.0198882589,"key":["s047602834","s942020484"]}
{"user_id":"u216015528","problem_id":"p03162","language":"python","submission_id_v0":"s221937243","submission_id_v1":"s826522174","cpu_time_v0":984,"cpu_time_v1":281,"memory_v0":50312,"memory_v1":30052,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":71.44,"input":"#!\/usr\/bin\/env python3\n\ndef main():\n\n    import numpy as np\n\n\n\n    N = int(eval(input()))\n\n    happiness = [list(map(int, input().split())) for _ in range(N)]\n\n\n\n    dp = np.zeros((N, 3), dtype=np.int64)\n\n    dp[0] = happiness[0]\n\n    for i in range(1, N):\n\n        for a, yesterday in enumerate(dp[i - 1]):\n\n            for b, today in enumerate(happiness[i]):\n\n                if a == b:\n\n                    continue\n\n                dp[i][b] = max(dp[i][b], yesterday + today)\n\n    print((max(dp[-1])))\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"#!\/usr\/bin\/env python3\n\ndef main():\n\n    N = int(eval(input()))\n\n    happiness = [list(map(int, input().split())) for _ in range(N)]\n\n\n\n    dp = [0, 0, 0]\n\n    for a, b, c in happiness:\n\n        dp = [max(dp[1], dp[2]) + a,\n\n              max(dp[0], dp[2]) + b,\n\n              max(dp[0], dp[1]) + c]\n\n    print((max(dp)))\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":20,"code_v1_loc":15,"code_v0_num_chars":543,"code_v1_num_chars":358,"code_v0_no_empty_lines":"#!\/usr\/bin\/env python3\ndef main():\n    import numpy as np\n\n    N = int(eval(input()))\n    happiness = [list(map(int, input().split())) for _ in range(N)]\n    dp = np.zeros((N, 3), dtype=np.int64)\n    dp[0] = happiness[0]\n    for i in range(1, N):\n        for a, yesterday in enumerate(dp[i - 1]):\n            for b, today in enumerate(happiness[i]):\n                if a == b:\n                    continue\n                dp[i][b] = max(dp[i][b], yesterday + today)\n    print((max(dp[-1])))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"#!\/usr\/bin\/env python3\ndef main():\n    N = int(eval(input()))\n    happiness = [list(map(int, input().split())) for _ in range(N)]\n    dp = [0, 0, 0]\n    for a, b, c in happiness:\n        dp = [max(dp[1], dp[2]) + a, max(dp[0], dp[2]) + b, max(dp[0], dp[1]) + c]\n    print((max(dp)))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-    import numpy as np","-","-    dp = np.zeros((N, 3), dtype=np.int64)","-    dp[0] = happiness[0]","-    for i in range(1, N):","-        for a, yesterday in enumerate(dp[i - 1]):","-            for b, today in enumerate(happiness[i]):","-                if a == b:","-                    continue","-                dp[i][b] = max(dp[i][b], yesterday + today)","-    print((max(dp[-1])))","+    dp = [0, 0, 0]","+    for a, b, c in happiness:","+        dp = [max(dp[1], dp[2]) + a, max(dp[0], dp[2]) + b, max(dp[0], dp[1]) + c]","+    print((max(dp)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.24619206,"measured_runtime_v1":0.1905300226,"runtime_lift":6.5406598015,"key":["s221937243","s826522174"]}
{"user_id":"u840247626","problem_id":"p02264","language":"python","submission_id_v0":"s571730090","submission_id_v1":"s740509038","cpu_time_v0":620,"cpu_time_v1":400,"memory_v0":13012,"memory_v1":12536,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":35.48,"input":"n,q = list(map(int,input().split()))\n\nqueue = []\n\nfor i in range(n):\n\n\tname,time = input().split()\n\n\tqueue.append([name, int(time)])\n\n\n\nt = 0\n\ni = 0\n\nwhile queue:\n\n\ti %= len(queue)\n\n\tp = queue[i]\n\n\tt += min(q, p[1])\n\n\tif p[1] > q:\n\n\t\tp[1] -= q\n\n\t\ti += 1\n\n\telse:\n\n\t\tprint((p[0], t))\n\n\t\tqueue.pop(i)\n","target":"from collections import deque\n\n\n\nn,q = list(map(int,input().split()))\n\nqueue = deque()\n\nfor i in range(n):\n\n\tname,time = input().split()\n\n\tqueue.append((name, int(time)))\n\n\n\nt = 0\n\nwhile queue:\n\n\tname,time = queue.popleft()\n\n\tt += min(q, time)\n\n\tif time > q:\n\n\t\tqueue.append((name, time-q))\n\n\telse:\n\n\t\tprint((name,t))\n","code_v0_loc":18,"code_v1_loc":16,"code_v0_num_chars":290,"code_v1_num_chars":310,"code_v0_no_empty_lines":"n, q = list(map(int, input().split()))\nqueue = []\nfor i in range(n):\n    name, time = input().split()\n    queue.append([name, int(time)])\nt = 0\ni = 0\nwhile queue:\n    i %= len(queue)\n    p = queue[i]\n    t += min(q, p[1])\n    if p[1] > q:\n        p[1] -= q\n        i += 1\n    else:\n        print((p[0], t))\n        queue.pop(i)\n","code_v1_no_empty_lines":"from collections import deque\n\nn, q = list(map(int, input().split()))\nqueue = deque()\nfor i in range(n):\n    name, time = input().split()\n    queue.append((name, int(time)))\nt = 0\nwhile queue:\n    name, time = queue.popleft()\n    t += min(q, time)\n    if time > q:\n        queue.append((name, time - q))\n    else:\n        print((name, t))\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["+from collections import deque","+","-queue = []","+queue = deque()","-    queue.append([name, int(time)])","+    queue.append((name, int(time)))","-i = 0","-    i %= len(queue)","-    p = queue[i]","-    t += min(q, p[1])","-    if p[1] > q:","-        p[1] -= q","-        i += 1","+    name, time = queue.popleft()","+    t += min(q, time)","+    if time > q:","+        queue.append((name, time - q))","-        print((p[0], t))","-        queue.pop(i)","+        print((name, t))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3202849953,"measured_runtime_v1":0.2467377391,"runtime_lift":1.2980786664,"key":["s571730090","s740509038"]}
{"user_id":"u597374218","problem_id":"p03796","language":"python","submission_id_v0":"s636787028","submission_id_v1":"s575140392","cpu_time_v0":154,"cpu_time_v1":44,"memory_v0":10168,"memory_v1":9028,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":71.43,"input":"import math\n\nN=int(eval(input()))\n\nprint((math.factorial(N)%(10**9+7)))","target":"N=int(eval(input()))\n\npower=1\n\nfor i in range(1,N+1):\n\n    power*=i\n\n    power%=10**9+7\n\nprint(power)","code_v0_loc":3,"code_v1_loc":6,"code_v0_num_chars":63,"code_v1_num_chars":95,"code_v0_no_empty_lines":"import math\n\nN = int(eval(input()))\nprint((math.factorial(N) % (10**9 + 7)))\n","code_v1_no_empty_lines":"N = int(eval(input()))\npower = 1\nfor i in range(1, N + 1):\n    power *= i\n    power %= 10**9 + 7\nprint(power)\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-import math","-","-print((math.factorial(N) % (10**9 + 7)))","+power = 1","+for i in range(1, N + 1):","+    power *= i","+    power %= 10**9 + 7","+print(power)"],"diff_only_import_comment":false,"measured_runtime_v0":0.6653705416,"measured_runtime_v1":0.3042658694,"runtime_lift":2.1868063707,"key":["s636787028","s575140392"]}
{"user_id":"u970197315","problem_id":"p03371","language":"python","submission_id_v0":"s588181559","submission_id_v1":"s154731902","cpu_time_v0":63,"cpu_time_v1":17,"memory_v0":3064,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":73.02,"input":"# ABC95 C -Half and Half\n\na,b,c,x,y = list(map(float,input().split()))\n\nans = 0\n\nif a+b > 2*c:\n\n    while x != 0.0 and y != 0.0:\n\n        ans += 2*c\n\n        x -= 1.0\n\n        y -= 1.0\n\n        if y == 0.0:\n\n            while x != 0.0:\n\n                if a > 2*c:\n\n                    ans += 2*c\n\n                    x -= 1.0\n\n                else:\n\n                    ans += a\n\n                    x -= 1.0\n\n        if x == 0.0:\n\n            while y != 0.0:\n\n                if b > 2*c:\n\n                    ans += 2*c\n\n                    y -= 1.0\n\n                else:\n\n                    ans += b\n\n                    y -= 1.0\n\nelse:\n\n    ans += a*x + b*y\n\nprint((int(ans)))\n\n\n\n    ","target":"a,b,c,x,y=list(map(int,input().split()))\n\nans=0\n\nans1=0\n\n\n\ne=max(x,y)\n\nans1=e*(2*c)\n\nif 2*c<a+b:\n\n    d=min(x,y)\n\n    ans+=c*(2*d)\n\n    x-=d\n\n    y-=d\n\nelse:\n\n    ans=a*x+b*y\n\n    x-=x\n\n    y-=y\n\nans+=x*a\n\nans+=y*b\n\nprint((min(ans,ans1)))","code_v0_loc":29,"code_v1_loc":18,"code_v0_num_chars":682,"code_v1_num_chars":230,"code_v0_no_empty_lines":"# ABC95 C -Half and Half\na, b, c, x, y = list(map(float, input().split()))\nans = 0\nif a + b > 2 * c:\n    while x != 0.0 and y != 0.0:\n        ans += 2 * c\n        x -= 1.0\n        y -= 1.0\n        if y == 0.0:\n            while x != 0.0:\n                if a > 2 * c:\n                    ans += 2 * c\n                    x -= 1.0\n                else:\n                    ans += a\n                    x -= 1.0\n        if x == 0.0:\n            while y != 0.0:\n                if b > 2 * c:\n                    ans += 2 * c\n                    y -= 1.0\n                else:\n                    ans += b\n                    y -= 1.0\nelse:\n    ans += a * x + b * y\nprint((int(ans)))\n","code_v1_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nans = 0\nans1 = 0\ne = max(x, y)\nans1 = e * (2 * c)\nif 2 * c < a + b:\n    d = min(x, y)\n    ans += c * (2 * d)\n    x -= d\n    y -= d\nelse:\n    ans = a * x + b * y\n    x -= x\n    y -= y\nans += x * a\nans += y * b\nprint((min(ans, ans1)))\n","code_same":false,"relative_loc_diff_percent":37.9310344828,"diff":["-# ABC95 C -Half and Half","-a, b, c, x, y = list(map(float, input().split()))","+a, b, c, x, y = list(map(int, input().split()))","-if a + b > 2 * c:","-    while x != 0.0 and y != 0.0:","-        ans += 2 * c","-        x -= 1.0","-        y -= 1.0","-        if y == 0.0:","-            while x != 0.0:","-                if a > 2 * c:","-                    ans += 2 * c","-                    x -= 1.0","-                else:","-                    ans += a","-                    x -= 1.0","-        if x == 0.0:","-            while y != 0.0:","-                if b > 2 * c:","-                    ans += 2 * c","-                    y -= 1.0","-                else:","-                    ans += b","-                    y -= 1.0","+ans1 = 0","+e = max(x, y)","+ans1 = e * (2 * c)","+if 2 * c < a + b:","+    d = min(x, y)","+    ans += c * (2 * d)","+    x -= d","+    y -= d","-    ans += a * x + b * y","-print((int(ans)))","+    ans = a * x + b * y","+    x -= x","+    y -= y","+ans += x * a","+ans += y * b","+print((min(ans, ans1)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3221288462,"measured_runtime_v1":0.2473681471,"runtime_lift":1.3022244371,"key":["s588181559","s154731902"]}
{"user_id":"u341087021","problem_id":"p03640","language":"python","submission_id_v0":"s359248340","submission_id_v1":"s719148337","cpu_time_v0":284,"cpu_time_v1":25,"memory_v0":20484,"memory_v1":3568,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":91.2,"input":"import sys\n\nimport numpy as np\n\n\n\nh,w = [int(x) for x in sys.stdin.readline().split()]\n\nn = int(eval(input()))\n\na = [int(x) for x in sys.stdin.readline().split()]\n\ns = h*w\n\n\n\nl = []\n\n\n\nfor i,x in enumerate(a):\n\n\tfor j in range(x):\n\n\t\tl.append(i+1)\n\n\n\nl = np.array(l).reshape((h,w))\n\n\n\nfor i,x in enumerate(l):\n\n\tif i % 2 == 0:\n\n\t\tprint((' '.join(map(str, x))))\n\n\telse:\n\n\t\tprint((' '.join(map(str, reversed(x)))))","target":"h,w = list(map(int, input().split()))\n\nn = int(eval(input()))\n\na = list(map(int, input().split()))\n\n\n\nl = []\n\n\n\nfor i,x in enumerate(a):\n\n\tfor j in range(x):\n\n\t\tl.append(i+1)\n\n\n\nfor i in range(h):\n\n\tt = l[i*w:(i+1)*w]\n\n\tif i % 2 == 1:\n\n\t\tt.reverse()\n\n\tprint((' '.join(map(str, t))))","code_v0_loc":21,"code_v1_loc":15,"code_v0_num_chars":402,"code_v1_num_chars":262,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nh, w = [int(x) for x in sys.stdin.readline().split()]\nn = int(eval(input()))\na = [int(x) for x in sys.stdin.readline().split()]\ns = h * w\nl = []\nfor i, x in enumerate(a):\n    for j in range(x):\n        l.append(i + 1)\nl = np.array(l).reshape((h, w))\nfor i, x in enumerate(l):\n    if i % 2 == 0:\n        print((\" \".join(map(str, x))))\n    else:\n        print((\" \".join(map(str, reversed(x)))))\n","code_v1_no_empty_lines":"h, w = list(map(int, input().split()))\nn = int(eval(input()))\na = list(map(int, input().split()))\nl = []\nfor i, x in enumerate(a):\n    for j in range(x):\n        l.append(i + 1)\nfor i in range(h):\n    t = l[i * w : (i + 1) * w]\n    if i % 2 == 1:\n        t.reverse()\n    print((\" \".join(map(str, t))))\n","code_same":false,"relative_loc_diff_percent":28.5714285714,"diff":["-import sys","-import numpy as np","-","-h, w = [int(x) for x in sys.stdin.readline().split()]","+h, w = list(map(int, input().split()))","-a = [int(x) for x in sys.stdin.readline().split()]","-s = h * w","+a = list(map(int, input().split()))","-l = np.array(l).reshape((h, w))","-for i, x in enumerate(l):","-    if i % 2 == 0:","-        print((\" \".join(map(str, x))))","-    else:","-        print((\" \".join(map(str, reversed(x)))))","+for i in range(h):","+    t = l[i * w : (i + 1) * w]","+    if i % 2 == 1:","+        t.reverse()","+    print((\" \".join(map(str, t))))"],"diff_only_import_comment":false,"measured_runtime_v0":2.9760328727,"measured_runtime_v1":0.443032949,"runtime_lift":6.7174075416,"key":["s359248340","s719148337"]}
{"user_id":"u693378622","problem_id":"p03032","language":"python","submission_id_v0":"s328121940","submission_id_v1":"s024934592","cpu_time_v0":295,"cpu_time_v1":35,"memory_v0":21272,"memory_v1":3572,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.14,"input":"# coding: utf-8\n\nimport copy\n\nimport numpy as np\n\n\n\nn, k = list(map(int, input().split()))\n\nv = list(map(int, input().split()))\n\nrev = copy.copy(v)\n\nrev.reverse()\n\n\n\nlcs = [0]+np.cumsum(v)\n\nrcs = [0]+np.cumsum(rev)\n\n# print(lcs,rcs)\n\n\n\nans = -10**20\n\nfor l in range(n+1):\n\n  for r in range(n+1-l):\n\n    able = True\n\n    d = k - ( l + r )\n\n    if d < 0:\n\n      able = False\n\n      break\n\n    # m = lcs[l] + rcs[r]\n\n    t = v[0:l] + rev[0:r]\n\n    m = sum(t)\n\n    # print(t,l,r,m)\n\n    t.sort()\n\n    # print(t)\n\n    d = min(d,l+r)\n\n    for i in range(d):\n\n      if 0 > t[i]:\n\n        m -= t[i]\n\n      else:\n\n        break\n\n    # print(m)\n\n    ans = max(ans,m)\n\n\n\nprint(ans)\n\n    ","target":"# coding: utf-8\n\nimport copy\n\n\n\nn, k = list(map(int, input().split()))\n\nv = list(map(int, input().split()))\n\nrev = copy.copy(v)\n\nrev.reverse()\n\n\n\nans = -10**20\n\nfor l in range(n+1):\n\n  for r in range(n+1-l):\n\n    able = True\n\n    d = k - ( l + r )\n\n    if d < 0:\n\n      able = False\n\n      break\n\n    t = v[0:l] + rev[0:r]\n\n    m = sum(t)\n\n    t.sort()\n\n    d = min(d,l+r)\n\n    for i in range(d):\n\n      if 0 > t[i]:\n\n        m -= t[i]\n\n      else:\n\n        break\n\n    ans = max(ans,m)\n\n\n\nprint(ans)","code_v0_loc":38,"code_v1_loc":28,"code_v0_num_chars":670,"code_v1_num_chars":493,"code_v0_no_empty_lines":"# coding: utf-8\nimport copy\nimport numpy as np\n\nn, k = list(map(int, input().split()))\nv = list(map(int, input().split()))\nrev = copy.copy(v)\nrev.reverse()\nlcs = [0] + np.cumsum(v)\nrcs = [0] + np.cumsum(rev)\n# print(lcs,rcs)\nans = -(10**20)\nfor l in range(n + 1):\n    for r in range(n + 1 - l):\n        able = True\n        d = k - (l + r)\n        if d < 0:\n            able = False\n            break\n        # m = lcs[l] + rcs[r]\n        t = v[0:l] + rev[0:r]\n        m = sum(t)\n        # print(t,l,r,m)\n        t.sort()\n        # print(t)\n        d = min(d, l + r)\n        for i in range(d):\n            if 0 > t[i]:\n                m -= t[i]\n            else:\n                break\n        # print(m)\n        ans = max(ans, m)\nprint(ans)\n","code_v1_no_empty_lines":"# coding: utf-8\nimport copy\n\nn, k = list(map(int, input().split()))\nv = list(map(int, input().split()))\nrev = copy.copy(v)\nrev.reverse()\nans = -(10**20)\nfor l in range(n + 1):\n    for r in range(n + 1 - l):\n        able = True\n        d = k - (l + r)\n        if d < 0:\n            able = False\n            break\n        t = v[0:l] + rev[0:r]\n        m = sum(t)\n        t.sort()\n        d = min(d, l + r)\n        for i in range(d):\n            if 0 > t[i]:\n                m -= t[i]\n            else:\n                break\n        ans = max(ans, m)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":26.3157894737,"diff":["-import numpy as np","-lcs = [0] + np.cumsum(v)","-rcs = [0] + np.cumsum(rev)","-# print(lcs,rcs)","-        # m = lcs[l] + rcs[r]","-        # print(t,l,r,m)","-        # print(t)","-        # print(m)"],"diff_only_import_comment":false,"measured_runtime_v0":1.380007833,"measured_runtime_v1":0.1766864235,"runtime_lift":7.8104916341,"key":["s328121940","s024934592"]}
{"user_id":"u894934980","problem_id":"p03162","language":"python","submission_id_v0":"s199056850","submission_id_v1":"s898635714","cpu_time_v0":704,"cpu_time_v1":544,"memory_v0":31732,"memory_v1":22772,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":22.73,"input":"import numpy as np\n\nN = int(eval(input()))\n\ndp = [[0, 0, 0] for i in range(N+1)]\n\nfor i in range(1, N+1):\n\n    a, b, c = list(map(int, input().split(' ')))\n\n    dp[i][0] = max(dp[i-1][1], dp[i-1][2]) + a\n\n    dp[i][1] = max(dp[i-1][0], dp[i-1][2]) + b\n\n    dp[i][2] = max(dp[i-1][0], dp[i-1][1]) + c\n\nprint((np.max(dp[-1])))","target":"N = int(eval(input()))\n\ndp = [[0, 0, 0] for i in range(N+1)]\n\nfor i in range(1, N+1):\n\n    a, b, c = list(map(int, input().split(' ')))\n\n    dp[i][0] = max(dp[i-1][1], dp[i-1][2]) + a\n\n    dp[i][1] = max(dp[i-1][0], dp[i-1][2]) + b\n\n    dp[i][2] = max(dp[i-1][0], dp[i-1][1]) + c\n\nprint((max(dp[-1])))","code_v0_loc":9,"code_v1_loc":8,"code_v0_num_chars":316,"code_v1_num_chars":293,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\ndp = [[0, 0, 0] for i in range(N + 1)]\nfor i in range(1, N + 1):\n    a, b, c = list(map(int, input().split(\" \")))\n    dp[i][0] = max(dp[i - 1][1], dp[i - 1][2]) + a\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][2]) + b\n    dp[i][2] = max(dp[i - 1][0], dp[i - 1][1]) + c\nprint((np.max(dp[-1])))\n","code_v1_no_empty_lines":"N = int(eval(input()))\ndp = [[0, 0, 0] for i in range(N + 1)]\nfor i in range(1, N + 1):\n    a, b, c = list(map(int, input().split(\" \")))\n    dp[i][0] = max(dp[i - 1][1], dp[i - 1][2]) + a\n    dp[i][1] = max(dp[i - 1][0], dp[i - 1][2]) + b\n    dp[i][2] = max(dp[i - 1][0], dp[i - 1][1]) + c\nprint((max(dp[-1])))\n","code_same":false,"relative_loc_diff_percent":11.1111111111,"diff":["-import numpy as np","-","-print((np.max(dp[-1])))","+print((max(dp[-1])))"],"diff_only_import_comment":false,"measured_runtime_v0":1.4440617442,"measured_runtime_v1":0.3020155485,"runtime_lift":4.7814152334,"key":["s199056850","s898635714"]}
{"user_id":"u632413369","problem_id":"p02595","language":"python","submission_id_v0":"s512106161","submission_id_v1":"s251902862","cpu_time_v0":491,"cpu_time_v1":390,"memory_v0":9080,"memory_v1":9188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":20.57,"input":"N, D = list(map(int, input().split()))\n\ncnt = 0\n\nfor _ in range(N):\n\n    x, y = list(map(int, input().split()))\n\n    if x ** 2 + y ** 2 <= D ** 2:\n\n        cnt += 1\n\n        \n\nprint(cnt)","target":"N, D = list(map(int, input().split()))\n\ncnt = 0\n\nfor _ in range(N):\n\n    x, y = list(map(int, input().split()))\n\n    if x * x + y * y <= D * D:\n\n        cnt += 1\n\n        \n\nprint(cnt)","code_v0_loc":8,"code_v1_loc":8,"code_v0_num_chars":174,"code_v1_num_chars":171,"code_v0_no_empty_lines":"N, D = list(map(int, input().split()))\ncnt = 0\nfor _ in range(N):\n    x, y = list(map(int, input().split()))\n    if x**2 + y**2 <= D**2:\n        cnt += 1\nprint(cnt)\n","code_v1_no_empty_lines":"N, D = list(map(int, input().split()))\ncnt = 0\nfor _ in range(N):\n    x, y = list(map(int, input().split()))\n    if x * x + y * y <= D * D:\n        cnt += 1\nprint(cnt)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    if x**2 + y**2 <= D**2:","+    if x * x + y * y <= D * D:"],"diff_only_import_comment":false,"measured_runtime_v0":0.1756704731,"measured_runtime_v1":0.0073727348,"runtime_lift":23.8270435573,"key":["s512106161","s251902862"]}
{"user_id":"u072717685","problem_id":"p02690","language":"python","submission_id_v0":"s483749071","submission_id_v1":"s341017329","cpu_time_v0":162,"cpu_time_v1":124,"memory_v0":27024,"memory_v1":27028,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":23.46,"input":"import sys\n\nread = sys.stdin.read\n\nreadlines = sys.stdin.readlines\n\nimport numpy as np\n\ndef main():\n\n    x = int(eval(input()))\n\n    for i1 in range(-201, 201):\n\n        for i2 in range(-201, 201):\n\n            if i1**5 - i2**5 == x:\n\n                print((i1, i2))\n\n                sys.exit()\n\n\n\nif __name__ == '__main__':\n\n    main()","target":"import sys\n\nread = sys.stdin.read\n\nreadlines = sys.stdin.readlines\n\nimport numpy as np\n\nfrom itertools import product\n\ndef main():\n\n    x = int(input())\n\n    n5 = [i**5 for i in range(201)]\n\n\n\n    c = product(n5, repeat=2)\n\n    for ce in c:\n\n        if ce[0] + ce[1] == x:\n\n            r = (int(ce[0]**0.2), int(ce[1]**0.2)* -1)\n\n            break\n\n        elif ce[0] - ce[1] == x:\n\n            r = (int(ce[0] ** 0.2), int(ce[1] ** 0.2))\n\n            break\n\n    print(*r, sep=' ')\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":14,"code_v1_loc":21,"code_v0_num_chars":328,"code_v1_num_chars":522,"code_v0_no_empty_lines":"import sys\n\nread = sys.stdin.read\nreadlines = sys.stdin.readlines\nimport numpy as np\n\n\ndef main():\n    x = int(eval(input()))\n    for i1 in range(-201, 201):\n        for i2 in range(-201, 201):\n            if i1**5 - i2**5 == x:\n                print((i1, i2))\n                sys.exit()\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.read\nreadlines = sys.stdin.readlines\nimport numpy as np\nfrom itertools import product\n\n\ndef main():\n    x = int(input())\n    n5 = [i**5 for i in range(201)]\n    c = product(n5, repeat=2)\n    for ce in c:\n        if ce[0] + ce[1] == x:\n            r = (int(ce[0] ** 0.2), int(ce[1] ** 0.2) * -1)\n            break\n        elif ce[0] - ce[1] == x:\n            r = (int(ce[0] ** 0.2), int(ce[1] ** 0.2))\n            break\n    print(*r, sep=\" \")\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["+from itertools import product","-    x = int(eval(input()))","-    for i1 in range(-201, 201):","-        for i2 in range(-201, 201):","-            if i1**5 - i2**5 == x:","-                print((i1, i2))","-                sys.exit()","+    x = int(input())","+    n5 = [i**5 for i in range(201)]","+    c = product(n5, repeat=2)","+    for ce in c:","+        if ce[0] + ce[1] == x:","+            r = (int(ce[0] ** 0.2), int(ce[1] ** 0.2) * -1)","+            break","+        elif ce[0] - ce[1] == x:","+            r = (int(ce[0] ** 0.2), int(ce[1] ** 0.2))","+            break","+    print(*r, sep=\" \")"],"diff_only_import_comment":false,"measured_runtime_v0":0.6760180672,"measured_runtime_v1":0.2428507467,"runtime_lift":2.7836771199,"key":["s483749071","s341017329"]}
{"user_id":"u588341295","problem_id":"p03696","language":"python","submission_id_v0":"s490534414","submission_id_v1":"s928447020","cpu_time_v0":21,"cpu_time_v1":18,"memory_v0":3316,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.29,"input":"# -*- coding: utf-8 -*-\n\n\n\nimport sys\n\ndef input(): return sys.stdin.readline().strip()\n\nsys.setrecursionlimit(10 ** 9)\n\n\n\nfrom collections import deque\n\n\n\nN = int(eval(input()))\n\nS = eval(input())\n\n\n\nans = deque()\n\ntmp = ''\n\nl = r = 0\n\nfor c in S:\n\n    if c == '(':\n\n        l += 1\n\n        tmp += '('\n\n    else:\n\n        if l == 0:\n\n            ans.appendleft('(')\n\n            ans.append(')')\n\n        else:\n\n            r += 1\n\n            tmp += ')'\n\n            if l == r:\n\n                ans.append(tmp)\n\n                tmp = ''\n\n                l = r = 0\n\nif l > r:\n\n    tmp += ')' * (l-r)\n\n    ans.append(tmp)\n\nprint((''.join(ans)))\n","target":"# -*- coding: utf-8 -*-\n\n\n\nimport sys\n\n\n\ndef input(): return sys.stdin.readline().strip()\n\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\n\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\n\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\n\ndef ceil(x, y=1): return int(-(-x \/\/ y))\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\n\ndef Yes(): print('Yes')\n\ndef No(): print('No')\n\ndef YES(): print('YES')\n\ndef NO(): print('NO')\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = 10 ** 18\n\nMOD = 10 ** 9 + 7\n\n\n\nN = INT()\n\nS = eval(input())\n\n\n\n# \u305d\u308c\u305e\u308c\u5fc5\u8981\u306a\u6570\u3092\u78ba\u8a8d\n\nlneed = cnt = 0\n\nfor s in S:\n\n    if s == ')':\n\n        cnt += 1\n\n        lneed = max(lneed, cnt)\n\n    else:\n\n        cnt -= 1\n\nrneed = cnt = 0\n\nfor s in S[::-1]:\n\n    if s == '(':\n\n        cnt += 1\n\n        rneed = max(rneed, cnt)\n\n    else:\n\n        cnt -= 1\n\n\n\n# \u8f9e\u66f8\u9806\u6700\u5c0f\u306a\u306e\u3067\u3001(\u306f\u5168\u90e8\u5de6\u306b\u3001)\u306f\u5168\u90e8\u53f3\u306b\u4ed8\u3051\u308b\n\nans = ('(' * lneed) + S + (')' * rneed)\n\nprint(ans)\n","code_v0_loc":33,"code_v1_loc":42,"code_v0_num_chars":630,"code_v1_num_chars":1083,"code_v0_no_empty_lines":"# -*- coding: utf-8 -*-\nimport sys\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\nsys.setrecursionlimit(10**9)\nfrom collections import deque\n\nN = int(eval(input()))\nS = eval(input())\nans = deque()\ntmp = \"\"\nl = r = 0\nfor c in S:\n    if c == \"(\":\n        l += 1\n        tmp += \"(\"\n    else:\n        if l == 0:\n            ans.appendleft(\"(\")\n            ans.append(\")\")\n        else:\n            r += 1\n            tmp += \")\"\n            if l == r:\n                ans.append(tmp)\n                tmp = \"\"\n                l = r = 0\nif l > r:\n    tmp += \")\" * (l - r)\n    ans.append(tmp)\nprint((\"\".join(ans)))\n","code_v1_no_empty_lines":"# -*- coding: utf-8 -*-\nimport sys\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef list2d(a, b, c):\n    return [[c] * b for i in range(a)]\n\n\ndef list3d(a, b, c, d):\n    return [[[d] * c for j in range(b)] for i in range(a)]\n\n\ndef list4d(a, b, c, d, e):\n    return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\n\n\ndef ceil(x, y=1):\n    return int(-(-x \/\/ y))\n\n\ndef INT():\n    return int(eval(input()))\n\n\ndef MAP():\n    return list(map(int, input().split()))\n\n\ndef LIST(N=None):\n    return list(MAP()) if N is None else [INT() for i in range(N)]\n\n\ndef Yes():\n    print(\"Yes\")\n\n\ndef No():\n    print(\"No\")\n\n\ndef YES():\n    print(\"YES\")\n\n\ndef NO():\n    print(\"NO\")\n\n\nsys.setrecursionlimit(10**9)\nINF = 10**18\nMOD = 10**9 + 7\nN = INT()\nS = eval(input())\n# \u305d\u308c\u305e\u308c\u5fc5\u8981\u306a\u6570\u3092\u78ba\u8a8d\nlneed = cnt = 0\nfor s in S:\n    if s == \")\":\n        cnt += 1\n        lneed = max(lneed, cnt)\n    else:\n        cnt -= 1\nrneed = cnt = 0\nfor s in S[::-1]:\n    if s == \"(\":\n        cnt += 1\n        rneed = max(rneed, cnt)\n    else:\n        cnt -= 1\n# \u8f9e\u66f8\u9806\u6700\u5c0f\u306a\u306e\u3067\u3001(\u306f\u5168\u90e8\u5de6\u306b\u3001)\u306f\u5168\u90e8\u53f3\u306b\u4ed8\u3051\u308b\nans = (\"(\" * lneed) + S + (\")\" * rneed)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":21.4285714286,"diff":["+def list2d(a, b, c):","+    return [[c] * b for i in range(a)]","+","+","+def list3d(a, b, c, d):","+    return [[[d] * c for j in range(b)] for i in range(a)]","+","+","+def list4d(a, b, c, d, e):","+    return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]","+","+","+def ceil(x, y=1):","+    return int(-(-x \/\/ y))","+","+","+def INT():","+    return int(eval(input()))","+","+","+def MAP():","+    return list(map(int, input().split()))","+","+","+def LIST(N=None):","+    return list(MAP()) if N is None else [INT() for i in range(N)]","+","+","+def Yes():","+    print(\"Yes\")","+","+","+def No():","+    print(\"No\")","+","+","+def YES():","+    print(\"YES\")","+","+","+def NO():","+    print(\"NO\")","+","+","-from collections import deque","-","-N = int(eval(input()))","+INF = 10**18","+MOD = 10**9 + 7","+N = INT()","-ans = deque()","-tmp = \"\"","-l = r = 0","-for c in S:","-    if c == \"(\":","-        l += 1","-        tmp += \"(\"","+# \u305d\u308c\u305e\u308c\u5fc5\u8981\u306a\u6570\u3092\u78ba\u8a8d","+lneed = cnt = 0","+for s in S:","+    if s == \")\":","+        cnt += 1","+        lneed = max(lneed, cnt)","-        if l == 0:","-            ans.appendleft(\"(\")","-            ans.append(\")\")","-        else:","-            r += 1","-            tmp += \")\"","-            if l == r:","-                ans.append(tmp)","-                tmp = \"\"","-                l = r = 0","-if l > r:","-    tmp += \")\" * (l - r)","-    ans.append(tmp)","-print((\"\".join(ans)))","+        cnt -= 1","+rneed = cnt = 0","+for s in S[::-1]:","+    if s == \"(\":","+        cnt += 1","+        rneed = max(rneed, cnt)","+    else:","+        cnt -= 1","+# \u8f9e\u66f8\u9806\u6700\u5c0f\u306a\u306e\u3067\u3001(\u306f\u5168\u90e8\u5de6\u306b\u3001)\u306f\u5168\u90e8\u53f3\u306b\u4ed8\u3051\u308b","+ans = (\"(\" * lneed) + S + (\")\" * rneed)","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2003027639,"measured_runtime_v1":0.0062589979,"runtime_lift":32.0023694319,"key":["s490534414","s928447020"]}
{"user_id":"u617515020","problem_id":"p02814","language":"python","submission_id_v0":"s956521329","submission_id_v1":"s164820491","cpu_time_v0":67,"cpu_time_v1":51,"memory_v0":16316,"memory_v1":20372,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":23.88,"input":"from fractions import gcd\n\n\n\nn,m=list(map(int,input().split()))\n\na=list(map(int,input().split()))\n\na=list(set(a))\n\n\n\na=list([x\/\/2 for x in a])\n\n\n\ndef lcm(q):\n\n  x = q[0]\n\n  for i in range(1, len(q)):\n\n    x = (x * q[i]) \/\/ gcd(x, q[i])\n\n  return x\n\n\n\nlcma=lcm(a)\n\n\n\nif (lcma\/\/a[0])%2==0:\n\n  print((0))\n\nelse:\n\n  flg=0\n\n  for i in range(1,len(a)):\n\n    if (lcma\/\/a[i])%2==0:\n\n      print((0))\n\n      flg=1\n\n      break\n\n  if flg==0:\n\n    temp=m\/\/lcma\n\n    print((temp\/\/2 if temp%2==0 else temp\/\/2+1))","target":"from math import gcd\n\nn,m=list(map(int,input().split()))\n\na=list(map(int,input().split()))\n\na=list(set(a))\n\na=list([x\/\/2 for x in a])\n\n\n\ndef lcm(q):\n\n  x = q[0]\n\n  for i in range(1, len(q)):\n\n    x = (x * q[i]) \/\/ gcd(x, q[i])\n\n  return x\n\n\n\nlcma=lcm(a)\n\nfor i in range(len(a)):\n\n  if (lcma\/\/a[i])%2==0:\n\n    print((0))\n\n    exit()\n\ntemp=m\/\/lcma\n\nprint((temp\/\/2 if temp%2==0 else temp\/\/2+1))","code_v0_loc":28,"code_v1_loc":19,"code_v0_num_chars":492,"code_v1_num_chars":386,"code_v0_no_empty_lines":"from fractions import gcd\n\nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))\na = list(set(a))\na = list([x \/\/ 2 for x in a])\n\n\ndef lcm(q):\n    x = q[0]\n    for i in range(1, len(q)):\n        x = (x * q[i]) \/\/ gcd(x, q[i])\n    return x\n\n\nlcma = lcm(a)\nif (lcma \/\/ a[0]) % 2 == 0:\n    print((0))\nelse:\n    flg = 0\n    for i in range(1, len(a)):\n        if (lcma \/\/ a[i]) % 2 == 0:\n            print((0))\n            flg = 1\n            break\n    if flg == 0:\n        temp = m \/\/ lcma\n        print((temp \/\/ 2 if temp % 2 == 0 else temp \/\/ 2 + 1))\n","code_v1_no_empty_lines":"from math import gcd\n\nn, m = list(map(int, input().split()))\na = list(map(int, input().split()))\na = list(set(a))\na = list([x \/\/ 2 for x in a])\n\n\ndef lcm(q):\n    x = q[0]\n    for i in range(1, len(q)):\n        x = (x * q[i]) \/\/ gcd(x, q[i])\n    return x\n\n\nlcma = lcm(a)\nfor i in range(len(a)):\n    if (lcma \/\/ a[i]) % 2 == 0:\n        print((0))\n        exit()\ntemp = m \/\/ lcma\nprint((temp \/\/ 2 if temp % 2 == 0 else temp \/\/ 2 + 1))\n","code_same":false,"relative_loc_diff_percent":32.1428571429,"diff":["-from fractions import gcd","+from math import gcd","-if (lcma \/\/ a[0]) % 2 == 0:","-    print((0))","-else:","-    flg = 0","-    for i in range(1, len(a)):","-        if (lcma \/\/ a[i]) % 2 == 0:","-            print((0))","-            flg = 1","-            break","-    if flg == 0:","-        temp = m \/\/ lcma","-        print((temp \/\/ 2 if temp % 2 == 0 else temp \/\/ 2 + 1))","+for i in range(len(a)):","+    if (lcma \/\/ a[i]) % 2 == 0:","+        print((0))","+        exit()","+temp = m \/\/ lcma","+print((temp \/\/ 2 if temp % 2 == 0 else temp \/\/ 2 + 1))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2803374403,"measured_runtime_v1":0.2137892873,"runtime_lift":1.3112791747,"key":["s956521329","s164820491"]}
{"user_id":"u209275335","problem_id":"p02693","language":"python","submission_id_v0":"s337733409","submission_id_v1":"s217218479","cpu_time_v0":61,"cpu_time_v1":22,"memory_v0":61660,"memory_v1":9172,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":63.93,"input":"S = int(eval(input()))\n\na = 0\n\ncount = 0\n\nn,m = list(map(int,input().split()))\n\nwhile count == 0:\n\n    a += S\n\n    if n <= a and m >= a:\n\n        count = 1\n\n    if a >= 1000:\n\n        break\n\nif count == 0:\n\n    print(\"NG\")\n\nelse:\n\n    print(\"OK\")","target":"k = int(eval(input()))\n\nn = 0\n\na,b = list(map(int,input().split()))\n\nwhile True:\n\n    n += k\n\n    if n >= a and n <= b:\n\n        print(\"OK\")\n\n        break\n\n    if n > b:\n\n        print(\"NG\")\n\n        break","code_v0_loc":14,"code_v1_loc":11,"code_v0_num_chars":234,"code_v1_num_chars":194,"code_v0_no_empty_lines":"S = int(eval(input()))\na = 0\ncount = 0\nn, m = list(map(int, input().split()))\nwhile count == 0:\n    a += S\n    if n <= a and m >= a:\n        count = 1\n    if a >= 1000:\n        break\nif count == 0:\n    print(\"NG\")\nelse:\n    print(\"OK\")\n","code_v1_no_empty_lines":"k = int(eval(input()))\nn = 0\na, b = list(map(int, input().split()))\nwhile True:\n    n += k\n    if n >= a and n <= b:\n        print(\"OK\")\n        break\n    if n > b:\n        print(\"NG\")\n        break\n","code_same":false,"relative_loc_diff_percent":21.4285714286,"diff":["-S = int(eval(input()))","-a = 0","-count = 0","-n, m = list(map(int, input().split()))","-while count == 0:","-    a += S","-    if n <= a and m >= a:","-        count = 1","-    if a >= 1000:","+k = int(eval(input()))","+n = 0","+a, b = list(map(int, input().split()))","+while True:","+    n += k","+    if n >= a and n <= b:","+        print(\"OK\")","-if count == 0:","-    print(\"NG\")","-else:","-    print(\"OK\")","+    if n > b:","+        print(\"NG\")","+        break"],"diff_only_import_comment":false,"measured_runtime_v0":0.2075882792,"measured_runtime_v1":0.0060749435,"runtime_lift":34.1712276754,"key":["s337733409","s217218479"]}
{"user_id":"u038021590","problem_id":"p03171","language":"python","submission_id_v0":"s330952971","submission_id_v1":"s165498833","cpu_time_v0":615,"cpu_time_v1":234,"memory_v0":115036,"memory_v1":135316,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":61.95,"input":"N = int(eval(input()))\n\nA = list(map(int, input().split()))\n\nn = N % 2\n\n\n\nDP = [[0] * (N+1) for _ in range(N+1)]\n\n\n\nfor w in range(1, N+1):\n\n    for i in range(N):\n\n        j = i + w\n\n        if j > N:\n\n            continue\n\n        if (w+n) % 2 == 1:\n\n            DP[i][j] = min(DP[i+1][j] - A[i], DP[i][j-1] - A[j-1])\n\n        else:\n\n            DP[i][j] = max(DP[i+1][j] + A[i], DP[i][j-1] + A[j-1])\n\n\n\nprint((DP[0][N]))\n","target":"N = int(eval(input()))\n\nA = list(map(int, input().split()))\n\nDP = [[0] * (N+1) for _ in range(N+1)]\n\n\n\nfor num in range(1, N + 1):\n\n    for start in range(N):\n\n        end = start + num\n\n        if end > N:\n\n            break\n\n        if num == 1:\n\n            DP[start][end] = A[start]\n\n        else:\n\n            DP[start][end] = max(A[start] - DP[start+1][end], A[end - 1] - DP[start][end - 1])\n\nprint((DP[0][N]))\n","code_v0_loc":17,"code_v1_loc":14,"code_v0_num_chars":416,"code_v1_num_chars":409,"code_v0_no_empty_lines":"N = int(eval(input()))\nA = list(map(int, input().split()))\nn = N % 2\nDP = [[0] * (N + 1) for _ in range(N + 1)]\nfor w in range(1, N + 1):\n    for i in range(N):\n        j = i + w\n        if j > N:\n            continue\n        if (w + n) % 2 == 1:\n            DP[i][j] = min(DP[i + 1][j] - A[i], DP[i][j - 1] - A[j - 1])\n        else:\n            DP[i][j] = max(DP[i + 1][j] + A[i], DP[i][j - 1] + A[j - 1])\nprint((DP[0][N]))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = list(map(int, input().split()))\nDP = [[0] * (N + 1) for _ in range(N + 1)]\nfor num in range(1, N + 1):\n    for start in range(N):\n        end = start + num\n        if end > N:\n            break\n        if num == 1:\n            DP[start][end] = A[start]\n        else:\n            DP[start][end] = max(\n                A[start] - DP[start + 1][end], A[end - 1] - DP[start][end - 1]\n            )\nprint((DP[0][N]))\n","code_same":false,"relative_loc_diff_percent":17.6470588235,"diff":["-n = N % 2","-for w in range(1, N + 1):","-    for i in range(N):","-        j = i + w","-        if j > N:","-            continue","-        if (w + n) % 2 == 1:","-            DP[i][j] = min(DP[i + 1][j] - A[i], DP[i][j - 1] - A[j - 1])","+for num in range(1, N + 1):","+    for start in range(N):","+        end = start + num","+        if end > N:","+            break","+        if num == 1:","+            DP[start][end] = A[start]","-            DP[i][j] = max(DP[i + 1][j] + A[i], DP[i][j - 1] + A[j - 1])","+            DP[start][end] = max(","+                A[start] - DP[start + 1][end], A[end - 1] - DP[start][end - 1]","+            )"],"diff_only_import_comment":false,"measured_runtime_v0":0.1878290408,"measured_runtime_v1":0.0068282696,"runtime_lift":27.5075605354,"key":["s330952971","s165498833"]}
{"user_id":"u949115942","problem_id":"p02837","language":"python","submission_id_v0":"s340353046","submission_id_v1":"s559860999","cpu_time_v0":262,"cpu_time_v1":184,"memory_v0":3064,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":29.77,"input":"n = int(eval(input()))\n\n\n\nXY = []\n\nfor i in range(n):\n\n    a = int(eval(input()))\n\n    xy = []\n\n    for j in range(a):\n\n        xy.append(list(map(int, input().split())))\n\n    \n\n    XY.append(xy)\n\n    \n\ndef check(i, xiyj, HoU):\n\n    # \u77db\u76fe\u3057\u305f\u3089False \u6b63\u76f4\u8005\u3068\u4eee\u5b9a\u3057\u305f\u8a3c\u8a00\u3088\u308a \u6b63\u76f4&\u6b63\u76f4\u8005\u3068\u4eee\u5b9a\u3055\u308c\u3066\u3044\u308b \/ \u4e0d\u89aa\u5207&\u4e0d\u89aa\u5207\u3068\u4eee\u5b9a\u3055\u308c\u3066\u3044\u308b True\n\n    if ((i >> xiyj) & 1) ^ HoU:\n\n        return False\n\n\n\n    return True\n\n    \n\nmax_honest = 0\n\nfor i in range(2 ** len(XY)):\n\n    count = 0\n\n    is_contradiction = True\n\n    for j in range(len(XY)):\n\n        # \u6b63\u76f4\u8005\u3068\u4eee\u5b9a\u3057\u305f\u3068\u304d\u3060\u3051\u63a1\u7528\n\n        if not ((i >> j) & 1): continue\n\n        for k in range(len(XY[j])):\n\n            xiyj = XY[j][k][0] - 1\n\n            HoU = XY[j][k][1]\n\n            \n\n            if not check(i, xiyj, HoU):\n\n                is_contradiction = False\n\n                break\n\n                \n\n        if not is_contradiction:\n\n            break\n\n\n\n    if is_contradiction:\n\n        for j in range(len(XY)):\n\n            if ((i >> j) & 1): count+=1 \n\n                \n\n        if count > max_honest:\n\n            max_honest =count\n\n            \n\nprint(max_honest)","target":"n = int(eval(input()))\n\n\n\nXY = []\n\nfor i in range(n):\n\n    a = int(eval(input()))\n\n    xy = []\n\n    for j in range(a):\n\n        xy.append(list(map(int, input().split())))\n\n    \n\n    XY.append(xy)\n\n\n\n\"\"\"\n\n    \u77db\u76fe\u3057\u305f\u3089False\n\n    \u77db\u76fe\u3057\u306a\u3051\u308c\u3070True\n\n    \u6b63\u76f4\u8005\u3068\u4eee\u5b9a\u3057\u305f\u8005\u306e\u8a3c\u8a00\n\n        \u6b63\u76f4&\u6b63\u76f4\u8005\u3068\u4eee\u5b9a\u3055\u308c\u3066\u3044\u308b\n\n        \u4e0d\u89aa\u5207&\u4e0d\u89aa\u5207\u3068\u4eee\u5b9a\u3055\u308c\u3066\u3044\u308b\n\n\"\"\"\n\ndef check(i, xiyj, HoU):\n\n    # XOR\n\n    if HoU ^ ((i >> xiyj) & 1):\n\n        return False\n\n\n\n    return True\n\n\n\nmax_honest = 0\n\nfor i in range(2 ** len(XY)):\n\n    count = 0\n\n    is_contradiction = True\n\n    for j in range(len(XY)):\n\n        # \u6b63\u76f4\u8005\u3068\u4eee\u5b9a\u3057\u305f\u3068\u304d\u3060\u3051\u63a1\u7528\n\n        if not ((i >> j) & 1): continue\n\n        count+=1\n\n        for k in range(len(XY[j])):\n\n            xiyj = XY[j][k][0] - 1\n\n            HoU = XY[j][k][1]\n\n            \n\n            if not check(i, xiyj, HoU):\n\n                is_contradiction = False\n\n                break # TLE\u5bfe\u7b56\n\n                \n\n        if not is_contradiction:\n\n            break # TLE\u5bfe\u7b56\n\n\n\n    # \u77db\u76fe\u304c\u306a\u304f\u3001\u6b63\u76f4\u8005\u306e\u6570\u304c\u66f4\u65b0\u3067\u304d\u308c\u3070\u66f4\u65b0\n\n    if is_contradiction and (count > max_honest):\n\n        max_honest =count\n\n            \n\nprint(max_honest)","code_v0_loc":44,"code_v1_loc":49,"code_v0_num_chars":1065,"code_v1_num_chars":1066,"code_v0_no_empty_lines":"n = int(eval(input()))\nXY = []\nfor i in range(n):\n    a = int(eval(input()))\n    xy = []\n    for j in range(a):\n        xy.append(list(map(int, input().split())))\n    XY.append(xy)\n\n\ndef check(i, xiyj, HoU):\n    # \u77db\u76fe\u3057\u305f\u3089False \u6b63\u76f4\u8005\u3068\u4eee\u5b9a\u3057\u305f\u8a3c\u8a00\u3088\u308a \u6b63\u76f4&\u6b63\u76f4\u8005\u3068\u4eee\u5b9a\u3055\u308c\u3066\u3044\u308b \/ \u4e0d\u89aa\u5207&\u4e0d\u89aa\u5207\u3068\u4eee\u5b9a\u3055\u308c\u3066\u3044\u308b True\n    if ((i >> xiyj) & 1) ^ HoU:\n        return False\n    return True\n\n\nmax_honest = 0\nfor i in range(2 ** len(XY)):\n    count = 0\n    is_contradiction = True\n    for j in range(len(XY)):\n        # \u6b63\u76f4\u8005\u3068\u4eee\u5b9a\u3057\u305f\u3068\u304d\u3060\u3051\u63a1\u7528\n        if not ((i >> j) & 1):\n            continue\n        for k in range(len(XY[j])):\n            xiyj = XY[j][k][0] - 1\n            HoU = XY[j][k][1]\n            if not check(i, xiyj, HoU):\n                is_contradiction = False\n                break\n        if not is_contradiction:\n            break\n    if is_contradiction:\n        for j in range(len(XY)):\n            if (i >> j) & 1:\n                count += 1\n        if count > max_honest:\n            max_honest = count\nprint(max_honest)\n","code_v1_no_empty_lines":"n = int(eval(input()))\nXY = []\nfor i in range(n):\n    a = int(eval(input()))\n    xy = []\n    for j in range(a):\n        xy.append(list(map(int, input().split())))\n    XY.append(xy)\n\"\"\"\n    \u77db\u76fe\u3057\u305f\u3089False\n    \u77db\u76fe\u3057\u306a\u3051\u308c\u3070True\n    \u6b63\u76f4\u8005\u3068\u4eee\u5b9a\u3057\u305f\u8005\u306e\u8a3c\u8a00\n        \u6b63\u76f4&\u6b63\u76f4\u8005\u3068\u4eee\u5b9a\u3055\u308c\u3066\u3044\u308b\n        \u4e0d\u89aa\u5207&\u4e0d\u89aa\u5207\u3068\u4eee\u5b9a\u3055\u308c\u3066\u3044\u308b\n\"\"\"\n\n\ndef check(i, xiyj, HoU):\n    # XOR\n    if HoU ^ ((i >> xiyj) & 1):\n        return False\n    return True\n\n\nmax_honest = 0\nfor i in range(2 ** len(XY)):\n    count = 0\n    is_contradiction = True\n    for j in range(len(XY)):\n        # \u6b63\u76f4\u8005\u3068\u4eee\u5b9a\u3057\u305f\u3068\u304d\u3060\u3051\u63a1\u7528\n        if not ((i >> j) & 1):\n            continue\n        count += 1\n        for k in range(len(XY[j])):\n            xiyj = XY[j][k][0] - 1\n            HoU = XY[j][k][1]\n            if not check(i, xiyj, HoU):\n                is_contradiction = False\n                break  # TLE\u5bfe\u7b56\n        if not is_contradiction:\n            break  # TLE\u5bfe\u7b56\n    # \u77db\u76fe\u304c\u306a\u304f\u3001\u6b63\u76f4\u8005\u306e\u6570\u304c\u66f4\u65b0\u3067\u304d\u308c\u3070\u66f4\u65b0\n    if is_contradiction and (count > max_honest):\n        max_honest = count\nprint(max_honest)\n","code_same":false,"relative_loc_diff_percent":10.2040816327,"diff":["+\"\"\"","+    \u77db\u76fe\u3057\u305f\u3089False","+    \u77db\u76fe\u3057\u306a\u3051\u308c\u3070True","+    \u6b63\u76f4\u8005\u3068\u4eee\u5b9a\u3057\u305f\u8005\u306e\u8a3c\u8a00","+        \u6b63\u76f4&\u6b63\u76f4\u8005\u3068\u4eee\u5b9a\u3055\u308c\u3066\u3044\u308b","+        \u4e0d\u89aa\u5207&\u4e0d\u89aa\u5207\u3068\u4eee\u5b9a\u3055\u308c\u3066\u3044\u308b","+\"\"\"","-    # \u77db\u76fe\u3057\u305f\u3089False \u6b63\u76f4\u8005\u3068\u4eee\u5b9a\u3057\u305f\u8a3c\u8a00\u3088\u308a \u6b63\u76f4&\u6b63\u76f4\u8005\u3068\u4eee\u5b9a\u3055\u308c\u3066\u3044\u308b \/ \u4e0d\u89aa\u5207&\u4e0d\u89aa\u5207\u3068\u4eee\u5b9a\u3055\u308c\u3066\u3044\u308b True","-    if ((i >> xiyj) & 1) ^ HoU:","+    # XOR","+    if HoU ^ ((i >> xiyj) & 1):","+        count += 1","-                break","+                break  # TLE\u5bfe\u7b56","-            break","-    if is_contradiction:","-        for j in range(len(XY)):","-            if (i >> j) & 1:","-                count += 1","-        if count > max_honest:","-            max_honest = count","+            break  # TLE\u5bfe\u7b56","+    # \u77db\u76fe\u304c\u306a\u304f\u3001\u6b63\u76f4\u8005\u306e\u6570\u304c\u66f4\u65b0\u3067\u304d\u308c\u3070\u66f4\u65b0","+    if is_contradiction and (count > max_honest):","+        max_honest = count"],"diff_only_import_comment":false,"measured_runtime_v0":0.357986707,"measured_runtime_v1":0.2736512365,"runtime_lift":1.3081859651,"key":["s340353046","s559860999"]}
{"user_id":"u754022296","problem_id":"p03796","language":"python","submission_id_v0":"s893557911","submission_id_v1":"s686331748","cpu_time_v0":230,"cpu_time_v1":48,"memory_v0":3984,"memory_v1":9008,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":79.13,"input":"from math import factorial as fc\n\na = int(eval(input()))\n\nprint((fc(a)%(10**9+7)))","target":"n = int(eval(input()))\n\nm = 10**9+7\n\nans = 1\n\nfor i in range(1, n+1):\n\n  ans *= i\n\n  ans %= m\n\nprint(ans)","code_v0_loc":3,"code_v1_loc":7,"code_v0_num_chars":74,"code_v1_num_chars":99,"code_v0_no_empty_lines":"from math import factorial as fc\n\na = int(eval(input()))\nprint((fc(a) % (10**9 + 7)))\n","code_v1_no_empty_lines":"n = int(eval(input()))\nm = 10**9 + 7\nans = 1\nfor i in range(1, n + 1):\n    ans *= i\n    ans %= m\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":57.1428571429,"diff":["-from math import factorial as fc","-","-a = int(eval(input()))","-print((fc(a) % (10**9 + 7)))","+n = int(eval(input()))","+m = 10**9 + 7","+ans = 1","+for i in range(1, n + 1):","+    ans *= i","+    ans %= m","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.4826196883,"measured_runtime_v1":0.2178869207,"runtime_lift":2.2150007294,"key":["s893557911","s686331748"]}
{"user_id":"u957843607","problem_id":"p02574","language":"python","submission_id_v0":"s835620267","submission_id_v1":"s021486096","cpu_time_v0":703,"cpu_time_v1":584,"memory_v0":134500,"memory_v1":134400,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.93,"input":"from math import gcd\n\n\n\nN = int(eval(input()))\n\nnum_lis = list(map(int, input().split()))\n\nc = True\n\n\n\ndef osa_k(max_num):\n\n  lis = [i for i in range(max_num+1)]\n\n  p = 2\n\n  while p**2 <= max_num:\n\n    if lis[p] == p:\n\n      for q in range(2*p, max_num+1, p):\n\n        if lis[q] == q:\n\n          lis[q] = p\n\n    p += 1\n\n  return lis\n\n\n\nhoge = 0\n\nfor i in num_lis:\n\n  hoge = gcd(hoge, i)\n\nif hoge > 1:\n\n  print(\"not coprime\")\n\n  exit()\n\n\n\nd_lis = osa_k(10**6+10)\n\ntmp = set()\n\nfor i in num_lis:\n\n  num = i\n\n  new_tmp = set()\n\n  while num > 1:\n\n    d = d_lis[num]\n\n    new_tmp.add(d)\n\n    num \/\/= d\n\n  for j in new_tmp:\n\n    if j in tmp:\n\n      c = False\n\n      break\n\n    else:\n\n      tmp.add(j)\n\n  else:\n\n    continue\n\n  break\n\n\n\nif c:\n\n  print(\"pairwise coprime\")\n\nelse:\n\n  print(\"setwise coprime\")","target":"from math import gcd\n\n\n\nN = int(eval(input()))\n\nnum_lis = list(map(int, input().split()))\n\n\n\ndef osa_k(max_num):\n\n  lis = [i for i in range(max_num+1)]\n\n  p = 2\n\n  while p**2 <= max_num:\n\n    if lis[p] == p:\n\n      for q in range(2*p, max_num+1, p):\n\n        if lis[q] == q:\n\n          lis[q] = p\n\n    p += 1\n\n  return lis\n\n\n\nhoge = 0\n\nfor i in num_lis:\n\n  hoge = gcd(hoge, i)\n\nif hoge > 1:\n\n  print(\"not coprime\")\n\n  exit()\n\n\n\nd_lis = osa_k(max(num_lis))\n\ntmp = set()\n\nfor i in num_lis:\n\n  num = i\n\n  new_tmp = set()\n\n  while num > 1:\n\n    d = d_lis[num]\n\n    new_tmp.add(d)\n\n    num \/\/= d\n\n  for j in new_tmp:\n\n    if j in tmp:\n\n      print(\"setwise coprime\")\n\n      exit()\n\n    else:\n\n      tmp.add(j)\n\nprint(\"pairwise coprime\")","code_v0_loc":47,"code_v1_loc":39,"code_v0_num_chars":793,"code_v1_num_chars":725,"code_v0_no_empty_lines":"from math import gcd\n\nN = int(eval(input()))\nnum_lis = list(map(int, input().split()))\nc = True\n\n\ndef osa_k(max_num):\n    lis = [i for i in range(max_num + 1)]\n    p = 2\n    while p**2 <= max_num:\n        if lis[p] == p:\n            for q in range(2 * p, max_num + 1, p):\n                if lis[q] == q:\n                    lis[q] = p\n        p += 1\n    return lis\n\n\nhoge = 0\nfor i in num_lis:\n    hoge = gcd(hoge, i)\nif hoge > 1:\n    print(\"not coprime\")\n    exit()\nd_lis = osa_k(10**6 + 10)\ntmp = set()\nfor i in num_lis:\n    num = i\n    new_tmp = set()\n    while num > 1:\n        d = d_lis[num]\n        new_tmp.add(d)\n        num \/\/= d\n    for j in new_tmp:\n        if j in tmp:\n            c = False\n            break\n        else:\n            tmp.add(j)\n    else:\n        continue\n    break\nif c:\n    print(\"pairwise coprime\")\nelse:\n    print(\"setwise coprime\")\n","code_v1_no_empty_lines":"from math import gcd\n\nN = int(eval(input()))\nnum_lis = list(map(int, input().split()))\n\n\ndef osa_k(max_num):\n    lis = [i for i in range(max_num + 1)]\n    p = 2\n    while p**2 <= max_num:\n        if lis[p] == p:\n            for q in range(2 * p, max_num + 1, p):\n                if lis[q] == q:\n                    lis[q] = p\n        p += 1\n    return lis\n\n\nhoge = 0\nfor i in num_lis:\n    hoge = gcd(hoge, i)\nif hoge > 1:\n    print(\"not coprime\")\n    exit()\nd_lis = osa_k(max(num_lis))\ntmp = set()\nfor i in num_lis:\n    num = i\n    new_tmp = set()\n    while num > 1:\n        d = d_lis[num]\n        new_tmp.add(d)\n        num \/\/= d\n    for j in new_tmp:\n        if j in tmp:\n            print(\"setwise coprime\")\n            exit()\n        else:\n            tmp.add(j)\nprint(\"pairwise coprime\")\n","code_same":false,"relative_loc_diff_percent":17.0212765957,"diff":["-c = True","-d_lis = osa_k(10**6 + 10)","+d_lis = osa_k(max(num_lis))","-            c = False","-            break","+            print(\"setwise coprime\")","+            exit()","-    else:","-        continue","-    break","-if c:","-    print(\"pairwise coprime\")","-else:","-    print(\"setwise coprime\")","+print(\"pairwise coprime\")"],"diff_only_import_comment":false,"measured_runtime_v0":2.272307416,"measured_runtime_v1":0.2046107306,"runtime_lift":11.1055144012,"key":["s835620267","s021486096"]}
{"user_id":"u380524497","problem_id":"p02850","language":"python","submission_id_v0":"s943818401","submission_id_v1":"s978957689","cpu_time_v0":583,"cpu_time_v1":446,"memory_v0":25092,"memory_v1":25184,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":23.5,"input":"n = int(eval(input()))\n\nedges = []\n\n\n\nfor id in range(n-1):\n\n    a, b = list(map(int, input().split()))\n\n    edges.append([a-1, b-1, id])\n\n\n\nedges.sort()\n\n\n\nused = [0]*(n)\n\nans = [0]*(n-1)\n\nnum = 1\n\nprev = 0\n\nfor edge in edges:\n\n    _from, to, id = edge\n\n    if _from != prev:\n\n        num = 1\n\n    if used[_from] == num:\n\n        num += 1\n\n    ans[id] = num\n\n    used[to] = num\n\n    num += 1\n\n    prev = _from\n\n\n\nprint((max(ans)))\n\nfor color in ans:\n\n    print(color)\n","target":"import sys\n\ninput = sys.stdin.readline\n\n\n\nn = int(eval(input()))\n\nedges = []\n\n\n\nfor id in range(n-1):\n\n    a, b = list(map(int, input().split()))\n\n    edges.append([a-1, b-1, id])\n\n\n\nedges.sort()\n\n\n\nused = [0]*(n)\n\nans = [0]*(n-1)\n\nnum = 1\n\nprev = 0\n\nfor edge in edges:\n\n    _from, to, id = edge\n\n    if _from != prev:\n\n        num = 1\n\n    if used[_from] == num:\n\n        num += 1\n\n    ans[id] = num\n\n    used[to] = num\n\n    num += 1\n\n    prev = _from\n\n\n\nprint((max(ans)))\n\nfor color in ans:\n\n    print(color)\n","code_v0_loc":27,"code_v1_loc":30,"code_v0_num_chars":455,"code_v1_num_chars":497,"code_v0_no_empty_lines":"n = int(eval(input()))\nedges = []\nfor id in range(n - 1):\n    a, b = list(map(int, input().split()))\n    edges.append([a - 1, b - 1, id])\nedges.sort()\nused = [0] * (n)\nans = [0] * (n - 1)\nnum = 1\nprev = 0\nfor edge in edges:\n    _from, to, id = edge\n    if _from != prev:\n        num = 1\n    if used[_from] == num:\n        num += 1\n    ans[id] = num\n    used[to] = num\n    num += 1\n    prev = _from\nprint((max(ans)))\nfor color in ans:\n    print(color)\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nn = int(eval(input()))\nedges = []\nfor id in range(n - 1):\n    a, b = list(map(int, input().split()))\n    edges.append([a - 1, b - 1, id])\nedges.sort()\nused = [0] * (n)\nans = [0] * (n - 1)\nnum = 1\nprev = 0\nfor edge in edges:\n    _from, to, id = edge\n    if _from != prev:\n        num = 1\n    if used[_from] == num:\n        num += 1\n    ans[id] = num\n    used[to] = num\n    num += 1\n    prev = _from\nprint((max(ans)))\nfor color in ans:\n    print(color)\n","code_same":false,"relative_loc_diff_percent":10.0,"diff":["+import sys","+","+input = sys.stdin.readline"],"diff_only_import_comment":false,"measured_runtime_v0":0.2558188839,"measured_runtime_v1":0.0060829046,"runtime_lift":42.0553832838,"key":["s943818401","s978957689"]}
{"user_id":"u234052535","problem_id":"p00003","language":"python","submission_id_v0":"s822995507","submission_id_v1":"s034189952","cpu_time_v0":50,"cpu_time_v1":30,"memory_v0":7724,"memory_v1":7764,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":40.0,"input":"for i in range(0, int(eval(input()))):\n\n    sidelen = [int(j) for j in input().split(\" \")]\n\n    sidelen.sort(reverse=True)\n\n    if(sidelen[0]**2 == sidelen[1]**2 + sidelen[2]**2):\n\n        print(\"YES\")\n\n    else:\n\n        print(\"NO\")","target":"import sys\n\nfor i in sys.stdin:\n\n    try:\n\n        sidelen = [int(j) for j in i.split(\" \")]\n\n        sidelen.sort(reverse=True)\n\n        if(sidelen[0]**2 == sidelen[1]**2 + sidelen[2]**2):\n\n            print(\"YES\")\n\n        else:\n\n            print(\"NO\")\n\n    except:\n\n        continue","code_v0_loc":7,"code_v1_loc":11,"code_v0_num_chars":227,"code_v1_num_chars":285,"code_v0_no_empty_lines":"for i in range(0, int(eval(input()))):\n    sidelen = [int(j) for j in input().split(\" \")]\n    sidelen.sort(reverse=True)\n    if sidelen[0] ** 2 == sidelen[1] ** 2 + sidelen[2] ** 2:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n","code_v1_no_empty_lines":"import sys\n\nfor i in sys.stdin:\n    try:\n        sidelen = [int(j) for j in i.split(\" \")]\n        sidelen.sort(reverse=True)\n        if sidelen[0] ** 2 == sidelen[1] ** 2 + sidelen[2] ** 2:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    except:\n        continue\n","code_same":false,"relative_loc_diff_percent":36.3636363636,"diff":["-for i in range(0, int(eval(input()))):","-    sidelen = [int(j) for j in input().split(\" \")]","-    sidelen.sort(reverse=True)","-    if sidelen[0] ** 2 == sidelen[1] ** 2 + sidelen[2] ** 2:","-        print(\"YES\")","-    else:","-        print(\"NO\")","+import sys","+","+for i in sys.stdin:","+    try:","+        sidelen = [int(j) for j in i.split(\" \")]","+        sidelen.sort(reverse=True)","+        if sidelen[0] ** 2 == sidelen[1] ** 2 + sidelen[2] ** 2:","+            print(\"YES\")","+        else:","+            print(\"NO\")","+    except:","+        continue"],"diff_only_import_comment":false,"measured_runtime_v0":0.3279889946,"measured_runtime_v1":0.2582271154,"runtime_lift":1.2701570634,"key":["s822995507","s034189952"]}
{"user_id":"u247680229","problem_id":"p02760","language":"python","submission_id_v0":"s347634405","submission_id_v1":"s207417039","cpu_time_v0":151,"cpu_time_v1":18,"memory_v0":12472,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.08,"input":"import numpy as np\n\nN_1=list(map(int, input().split()))\n\nN_2=list(map(int, input().split()))\n\nN_3=list(map(int, input().split()))\n\nN=int(eval(input()))\n\na=[int(eval(input())) for i in range(N)]\n\n\n\nn=np.array([N_1,N_2,N_3])\n\n\n\nfor a_n in a:\n\n    if a_n in n:\n\n        n[n==a_n]=0\n\n    else:\n\n        pass\n\ni=0\n\n    \n\nif np.all(n[0:,0]==0)==True:\n\n    i=+1\n\n    \n\nelif np.all(n[0:,1]==0)==True:\n\n    i+=1\n\n    \n\nelif np.all(n[0:,2]==0)==True:\n\n    i+=1\n\n    \n\nelif np.all(n[0,0:]==0)==True:\n\n    i+=1\n\n    \n\nelif np.all(n[1,0:]==0)==True:\n\n    i+=1\n\n\n\nelif np.all(n[2,0:]==0)==True:\n\n    i+=1\n\n\n\nelif n[0,0]==0 and n[1,1]==0  and n[2,2] ==0:\n\n    i+=1\n\n    \n\nelif n[0,2]==0 and n[1,1]==0 and n[2,0] ==0:\n\n    i+=1\n\n    \n\nif i>0:\n\n    print(\"Yes\")\n\nelse:\n\n    print(\"No\")","target":"a_1=list(map(int, input().split()))\n\na_2=list(map(int, input().split()))\n\na_3=list(map(int, input().split()))\n\n\n\nc=[a_1,a_2,a_3]\n\n\n\nN=int(eval(input()))\n\n\n\nb=[int(eval(input())) for _ in range(N)]\n\n\n\nfor i in range(3):\n\n    for j in range(3):\n\n        if c[i][j] in b:\n\n            c[i][j]=0\n\n            \n\n            \n\ni=0\n\nif c[0][0]==0 and c[0][1]==0 and c[0][2]==0:\n\n    i+=1\n\nif c[1][0]==0 and c[1][1]==0 and c[1][2]==0:\n\n    i+=1\n\nif c[2][0]==0 and c[2][1]==0 and c[2][2]==0:\n\n    i+=1\n\nif c[0][0]==0 and c[1][0]==0 and c[2][0]==0:\n\n    i+=1\n\nif c[0][1]==0 and c[1][1]==0 and c[2][1]==0:\n\n    i+=1\n\nif c[0][2]==0 and c[1][2]==0 and c[2][2]==0:\n\n    i+=1\n\nif c[0][0]==0 and c[1][1]==0 and c[2][2]==0:\n\n    i+=1\n\nif c[0][2]==0 and c[1][1]==0 and c[2][0]==0:\n\n    i+=1\n\n    \n\nif i>0:\n\n    print(\"Yes\")\n\nelse:\n\n  print(\"No\")","code_v0_loc":44,"code_v1_loc":38,"code_v0_num_chars":756,"code_v1_num_chars":815,"code_v0_no_empty_lines":"import numpy as np\n\nN_1 = list(map(int, input().split()))\nN_2 = list(map(int, input().split()))\nN_3 = list(map(int, input().split()))\nN = int(eval(input()))\na = [int(eval(input())) for i in range(N)]\nn = np.array([N_1, N_2, N_3])\nfor a_n in a:\n    if a_n in n:\n        n[n == a_n] = 0\n    else:\n        pass\ni = 0\nif np.all(n[0:, 0] == 0) == True:\n    i = +1\nelif np.all(n[0:, 1] == 0) == True:\n    i += 1\nelif np.all(n[0:, 2] == 0) == True:\n    i += 1\nelif np.all(n[0, 0:] == 0) == True:\n    i += 1\nelif np.all(n[1, 0:] == 0) == True:\n    i += 1\nelif np.all(n[2, 0:] == 0) == True:\n    i += 1\nelif n[0, 0] == 0 and n[1, 1] == 0 and n[2, 2] == 0:\n    i += 1\nelif n[0, 2] == 0 and n[1, 1] == 0 and n[2, 0] == 0:\n    i += 1\nif i > 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","code_v1_no_empty_lines":"a_1 = list(map(int, input().split()))\na_2 = list(map(int, input().split()))\na_3 = list(map(int, input().split()))\nc = [a_1, a_2, a_3]\nN = int(eval(input()))\nb = [int(eval(input())) for _ in range(N)]\nfor i in range(3):\n    for j in range(3):\n        if c[i][j] in b:\n            c[i][j] = 0\ni = 0\nif c[0][0] == 0 and c[0][1] == 0 and c[0][2] == 0:\n    i += 1\nif c[1][0] == 0 and c[1][1] == 0 and c[1][2] == 0:\n    i += 1\nif c[2][0] == 0 and c[2][1] == 0 and c[2][2] == 0:\n    i += 1\nif c[0][0] == 0 and c[1][0] == 0 and c[2][0] == 0:\n    i += 1\nif c[0][1] == 0 and c[1][1] == 0 and c[2][1] == 0:\n    i += 1\nif c[0][2] == 0 and c[1][2] == 0 and c[2][2] == 0:\n    i += 1\nif c[0][0] == 0 and c[1][1] == 0 and c[2][2] == 0:\n    i += 1\nif c[0][2] == 0 and c[1][1] == 0 and c[2][0] == 0:\n    i += 1\nif i > 0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","code_same":false,"relative_loc_diff_percent":13.6363636364,"diff":["-import numpy as np","-","-N_1 = list(map(int, input().split()))","-N_2 = list(map(int, input().split()))","-N_3 = list(map(int, input().split()))","+a_1 = list(map(int, input().split()))","+a_2 = list(map(int, input().split()))","+a_3 = list(map(int, input().split()))","+c = [a_1, a_2, a_3]","-a = [int(eval(input())) for i in range(N)]","-n = np.array([N_1, N_2, N_3])","-for a_n in a:","-    if a_n in n:","-        n[n == a_n] = 0","-    else:","-        pass","+b = [int(eval(input())) for _ in range(N)]","+for i in range(3):","+    for j in range(3):","+        if c[i][j] in b:","+            c[i][j] = 0","-if np.all(n[0:, 0] == 0) == True:","-    i = +1","-elif np.all(n[0:, 1] == 0) == True:","+if c[0][0] == 0 and c[0][1] == 0 and c[0][2] == 0:","-elif np.all(n[0:, 2] == 0) == True:","+if c[1][0] == 0 and c[1][1] == 0 and c[1][2] == 0:","-elif np.all(n[0, 0:] == 0) == True:","+if c[2][0] == 0 and c[2][1] == 0 and c[2][2] == 0:","-elif np.all(n[1, 0:] == 0) == True:","+if c[0][0] == 0 and c[1][0] == 0 and c[2][0] == 0:","-elif np.all(n[2, 0:] == 0) == True:","+if c[0][1] == 0 and c[1][1] == 0 and c[2][1] == 0:","-elif n[0, 0] == 0 and n[1, 1] == 0 and n[2, 2] == 0:","+if c[0][2] == 0 and c[1][2] == 0 and c[2][2] == 0:","-elif n[0, 2] == 0 and n[1, 1] == 0 and n[2, 0] == 0:","+if c[0][0] == 0 and c[1][1] == 0 and c[2][2] == 0:","+    i += 1","+if c[0][2] == 0 and c[1][1] == 0 and c[2][0] == 0:"],"diff_only_import_comment":false,"measured_runtime_v0":1.9163406978,"measured_runtime_v1":0.2546290116,"runtime_lift":7.5260108242,"key":["s347634405","s207417039"]}
{"user_id":"u341543478","problem_id":"p03424","language":"python","submission_id_v0":"s841365629","submission_id_v1":"s932855105","cpu_time_v0":29,"cpu_time_v1":25,"memory_v0":9156,"memory_v1":8908,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.79,"input":"n = int(eval(input()))\n\ns = input().split()\n\ns = set(s)\n\nprint(('Four' if len(s) == 4 else 'Three'))","target":"n = int(eval(input()))\n\ns = input().split()\n\nprint(('Four' if len(set(s)) == 4 else 'Three'))","code_v0_loc":4,"code_v1_loc":3,"code_v0_num_chars":92,"code_v1_num_chars":85,"code_v0_no_empty_lines":"n = int(eval(input()))\ns = input().split()\ns = set(s)\nprint((\"Four\" if len(s) == 4 else \"Three\"))\n","code_v1_no_empty_lines":"n = int(eval(input()))\ns = input().split()\nprint((\"Four\" if len(set(s)) == 4 else \"Three\"))\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-s = set(s)","-print((\"Four\" if len(s) == 4 else \"Three\"))","+print((\"Four\" if len(set(s)) == 4 else \"Three\"))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2928216946,"measured_runtime_v1":0.09356422,"runtime_lift":3.1296332587,"key":["s841365629","s932855105"]}
{"user_id":"u784022244","problem_id":"p02899","language":"python","submission_id_v0":"s740817012","submission_id_v1":"s743309565","cpu_time_v0":819,"cpu_time_v1":165,"memory_v0":23368,"memory_v1":13880,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":79.85,"input":"import numpy as np\n\n\n\n\n\nN=int(input())\n\n\n\nA=np.array([list(map(int, input().split()))])\n\n\n\n\n\nB=np.argsort(A[0,:])\n\nfor b in B:\n\n  print(b+1, end=' ')\n","target":"N=int(input())\n\n\n\nA=list(map(int, input().split()))\n\nB=[-1]*N\n\nfor i in range(N):\n\n  B[A[i]-1]=i+1\n\n  \n\nfor b in B:\n\n  print(b, end=\" \")\n","code_v0_loc":11,"code_v1_loc":9,"code_v0_num_chars":149,"code_v1_num_chars":136,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(input())\nA = np.array([list(map(int, input().split()))])\nB = np.argsort(A[0, :])\nfor b in B:\n    print(b + 1, end=\" \")\n","code_v1_no_empty_lines":"N = int(input())\nA = list(map(int, input().split()))\nB = [-1] * N\nfor i in range(N):\n    B[A[i] - 1] = i + 1\nfor b in B:\n    print(b, end=\" \")\n","code_same":false,"relative_loc_diff_percent":18.1818181818,"diff":["-import numpy as np","-","-A = np.array([list(map(int, input().split()))])","-B = np.argsort(A[0, :])","+A = list(map(int, input().split()))","+B = [-1] * N","+for i in range(N):","+    B[A[i] - 1] = i + 1","-    print(b + 1, end=\" \")","+    print(b, end=\" \")"],"diff_only_import_comment":false,"measured_runtime_v0":1.8078299961,"measured_runtime_v1":0.2674438229,"runtime_lift":6.7596625581,"key":["s740817012","s743309565"]}
{"user_id":"u633068244","problem_id":"p00122","language":"python","submission_id_v0":"s871701752","submission_id_v1":"s889694954","cpu_time_v0":20,"cpu_time_v1":10,"memory_v0":4272,"memory_v1":4268,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":50.0,"input":"dX = [2,2,2,1,0,-1,-2,-2,-2,-1,0,1]\n\ndY = [-1,0,1,2,2,2,1,0,-1,-2,-2,-2]\n\ndef solve(x,y,XY):\n\n\txy = XY[:]\n\n\tif len(xy) == 0: return \"OK\"\n\n\tsx,sy = xy.pop(0),xy.pop(0)\n\n\tfor dx,dy in zip(dX,dY):\n\n\t\tif doa(x+dx,y+dy,sx,sy): \n\n\t\t\tr = solve(x+dx,y+dy,xy)\n\n\t\t\tif r: return r\n\n\n\ndef doa(x,y,sx,sy):\n\n\tif not (0 <= x <= 9 and 0 <= y <= 9): return False\n\n\treturn True if abs(x-sx) < 2 and abs(y-sy) < 2 else False\n\n\n\nwhile 1:\n\n\tx,y = list(map(int,input().split()))\n\n\tif x == y == 0: break\n\n\tn = eval(input())\n\n\txy = list(map(int,input().split()))\n\n\tans = solve(x,y,xy)\n\n\tprint(ans if ans else \"NA\")","target":"dX = [2,2,2,1,0,-1,-2,-2,-2,-1,0,1]\n\ndY = [-1,0,1,2,2,2,1,0,-1,-2,-2,-2]\n\ndef solve(x,y,XY):\n\n\txy = XY[:]\n\n\tif len(xy) == 0: return True\n\n\tsx,sy = xy.pop(0),xy.pop(0)\n\n\tfor dx,dy in zip(dX,dY):\n\n\t\tif doa(x+dx,y+dy,sx,sy): \n\n\t\t\tr = solve(x+dx,y+dy,xy)\n\n\t\t\tif r: return r\n\n\n\ndef doa(x,y,sx,sy):\n\n\tif not (0 <= x <= 9 and 0 <= y <= 9): return False\n\n\treturn True if abs(x-sx) < 2 and abs(y-sy) < 2 else False\n\n\n\nwhile 1:\n\n\tx,y = list(map(int,input().split()))\n\n\tif x == y == 0: break\n\n\tn = eval(input())\n\n\txy = list(map(int,input().split()))\n\n\tprint(\"OK\" if solve(x,y,xy) else \"NA\")","code_v0_loc":22,"code_v1_loc":21,"code_v0_num_chars":579,"code_v1_num_chars":568,"code_v0_no_empty_lines":"dX = [2, 2, 2, 1, 0, -1, -2, -2, -2, -1, 0, 1]\ndY = [-1, 0, 1, 2, 2, 2, 1, 0, -1, -2, -2, -2]\n\n\ndef solve(x, y, XY):\n    xy = XY[:]\n    if len(xy) == 0:\n        return \"OK\"\n    sx, sy = xy.pop(0), xy.pop(0)\n    for dx, dy in zip(dX, dY):\n        if doa(x + dx, y + dy, sx, sy):\n            r = solve(x + dx, y + dy, xy)\n            if r:\n                return r\n\n\ndef doa(x, y, sx, sy):\n    if not (0 <= x <= 9 and 0 <= y <= 9):\n        return False\n    return True if abs(x - sx) < 2 and abs(y - sy) < 2 else False\n\n\nwhile 1:\n    x, y = list(map(int, input().split()))\n    if x == y == 0:\n        break\n    n = eval(input())\n    xy = list(map(int, input().split()))\n    ans = solve(x, y, xy)\n    print(ans if ans else \"NA\")\n","code_v1_no_empty_lines":"dX = [2, 2, 2, 1, 0, -1, -2, -2, -2, -1, 0, 1]\ndY = [-1, 0, 1, 2, 2, 2, 1, 0, -1, -2, -2, -2]\n\n\ndef solve(x, y, XY):\n    xy = XY[:]\n    if len(xy) == 0:\n        return True\n    sx, sy = xy.pop(0), xy.pop(0)\n    for dx, dy in zip(dX, dY):\n        if doa(x + dx, y + dy, sx, sy):\n            r = solve(x + dx, y + dy, xy)\n            if r:\n                return r\n\n\ndef doa(x, y, sx, sy):\n    if not (0 <= x <= 9 and 0 <= y <= 9):\n        return False\n    return True if abs(x - sx) < 2 and abs(y - sy) < 2 else False\n\n\nwhile 1:\n    x, y = list(map(int, input().split()))\n    if x == y == 0:\n        break\n    n = eval(input())\n    xy = list(map(int, input().split()))\n    print(\"OK\" if solve(x, y, xy) else \"NA\")\n","code_same":false,"relative_loc_diff_percent":4.5454545455,"diff":["-        return \"OK\"","+        return True","-    ans = solve(x, y, xy)","-    print(ans if ans else \"NA\")","+    print(\"OK\" if solve(x, y, xy) else \"NA\")"],"diff_only_import_comment":false,"measured_runtime_v0":0.2335389843,"measured_runtime_v1":0.183096947,"runtime_lift":1.2754936015,"key":["s871701752","s889694954"]}
{"user_id":"u827202523","problem_id":"p03988","language":"python","submission_id_v0":"s661300903","submission_id_v1":"s790648502","cpu_time_v0":180,"cpu_time_v1":75,"memory_v0":38384,"memory_v1":69368,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":58.33,"input":"import sys\n\ninput = sys.stdin.readline\n\nsys.setrecursionlimit(1000000)\n\nfrom collections import deque\n\ndef getN():\n\n    return int(eval(input()))\n\ndef getList():\n\n    return list(map(int, input().split()))\n\nimport math\n\n\n\nn = getN()\n\nnums = getList()\n\n\n\n# nums.sort(reverse=True)\n\nmx = max(nums)\n\nmn = (mx+1) \/\/ 2\n\nmndx = (mx % 2) + 1\n\n\n\nfrom collections import Counter\n\n\n\ncnt = Counter(nums)\n\n\n\nfor i in range(mn+1, mx+1):\n\n    if cnt[i] < 2:\n\n        print(\"Impossible\")\n\n        sys.exit()\n\n\n\nif cnt[mn] != mndx:\n\n    print(\"Impossible\")\n\nelse:\n\n    print(\"Possible\")","target":"import sys\n\nimport math\n\nimport copy\n\nfrom heapq import heappush, heappop, heapify\n\nfrom functools import cmp_to_key\n\nfrom bisect import bisect_left, bisect_right\n\nfrom collections import defaultdict, deque, Counter\n\n# sys.setrecursionlimit(1000000)\n\n\n\n# input aliases\n\ninput = sys.stdin.readline\n\ngetS = lambda: input().strip()\n\ngetN = lambda: int(eval(input()))\n\ngetList = lambda: list(map(int, input().split()))\n\ngetZList = lambda: [int(x) - 1 for x in input().split()]\n\n\n\nINF = float(\"inf\")\n\nMOD = 10**9 + 7\n\ndivide = lambda x: pow(x, MOD-2, MOD)\n\n\n\ndef pim():\n\n    print(\"Impossible\")\n\n    sys.exit()\n\ndef pp():\n\n    print(\"Possible\")\n\n    sys.exit()\n\ndef solve():\n\n    n = getN()\n\n    nums = getList()\n\n    cnt = Counter(nums)\n\n    mx = max(nums)\n\n    mn = min(nums)\n\n\n\n    if cnt[mx] < 2:\n\n        pim()\n\n    if mn < (mx + 1) \/\/ 2:\n\n        pim()\n\n\n\n    if mx % 2 == 0:\n\n        if cnt[mx\/\/2] != 1:\n\n            pim()\n\n    else:\n\n        if cnt[(mx+1) \/\/ 2] != 2:\n\n            pim()\n\n\n\n    for i in range((mx + 1) \/\/ 2 + 1, mx+1):\n\n        if cnt[i] < 2:\n\n            pim()\n\n\n\n    pp()\n\n\n\n\n\ndef main():\n\n    n = getN()\n\n    for _ in range(n):\n\n        solve()\n\n\n\n    return\n\nif __name__ == \"__main__\":\n\n    # main()\n\n    solve()\n\n\n\n\n\n\n\n\n\n\n","code_v0_loc":31,"code_v1_loc":66,"code_v0_num_chars":564,"code_v1_num_chars":1240,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\nfrom collections import deque\n\n\ndef getN():\n    return int(eval(input()))\n\n\ndef getList():\n    return list(map(int, input().split()))\n\n\nimport math\n\nn = getN()\nnums = getList()\n# nums.sort(reverse=True)\nmx = max(nums)\nmn = (mx + 1) \/\/ 2\nmndx = (mx % 2) + 1\nfrom collections import Counter\n\ncnt = Counter(nums)\nfor i in range(mn + 1, mx + 1):\n    if cnt[i] < 2:\n        print(\"Impossible\")\n        sys.exit()\nif cnt[mn] != mndx:\n    print(\"Impossible\")\nelse:\n    print(\"Possible\")\n","code_v1_no_empty_lines":"import sys\nimport math\nimport copy\nfrom heapq import heappush, heappop, heapify\nfrom functools import cmp_to_key\nfrom bisect import bisect_left, bisect_right\nfrom collections import defaultdict, deque, Counter\n\n# sys.setrecursionlimit(1000000)\n# input aliases\ninput = sys.stdin.readline\ngetS = lambda: input().strip()\ngetN = lambda: int(eval(input()))\ngetList = lambda: list(map(int, input().split()))\ngetZList = lambda: [int(x) - 1 for x in input().split()]\nINF = float(\"inf\")\nMOD = 10**9 + 7\ndivide = lambda x: pow(x, MOD - 2, MOD)\n\n\ndef pim():\n    print(\"Impossible\")\n    sys.exit()\n\n\ndef pp():\n    print(\"Possible\")\n    sys.exit()\n\n\ndef solve():\n    n = getN()\n    nums = getList()\n    cnt = Counter(nums)\n    mx = max(nums)\n    mn = min(nums)\n    if cnt[mx] < 2:\n        pim()\n    if mn < (mx + 1) \/\/ 2:\n        pim()\n    if mx % 2 == 0:\n        if cnt[mx \/\/ 2] != 1:\n            pim()\n    else:\n        if cnt[(mx + 1) \/\/ 2] != 2:\n            pim()\n    for i in range((mx + 1) \/\/ 2 + 1, mx + 1):\n        if cnt[i] < 2:\n            pim()\n    pp()\n\n\ndef main():\n    n = getN()\n    for _ in range(n):\n        solve()\n    return\n\n\nif __name__ == \"__main__\":\n    # main()\n    solve()\n","code_same":false,"relative_loc_diff_percent":53.0303030303,"diff":["+import math","+import copy","+from heapq import heappush, heappop, heapify","+from functools import cmp_to_key","+from bisect import bisect_left, bisect_right","+from collections import defaultdict, deque, Counter","+# sys.setrecursionlimit(1000000)","+# input aliases","-sys.setrecursionlimit(1000000)","-from collections import deque","+getS = lambda: input().strip()","+getN = lambda: int(eval(input()))","+getList = lambda: list(map(int, input().split()))","+getZList = lambda: [int(x) - 1 for x in input().split()]","+INF = float(\"inf\")","+MOD = 10**9 + 7","+divide = lambda x: pow(x, MOD - 2, MOD)","-def getN():","-    return int(eval(input()))","+def pim():","+    print(\"Impossible\")","+    sys.exit()","-def getList():","-    return list(map(int, input().split()))","+def pp():","+    print(\"Possible\")","+    sys.exit()","-import math","+def solve():","+    n = getN()","+    nums = getList()","+    cnt = Counter(nums)","+    mx = max(nums)","+    mn = min(nums)","+    if cnt[mx] < 2:","+        pim()","+    if mn < (mx + 1) \/\/ 2:","+        pim()","+    if mx % 2 == 0:","+        if cnt[mx \/\/ 2] != 1:","+            pim()","+    else:","+        if cnt[(mx + 1) \/\/ 2] != 2:","+            pim()","+    for i in range((mx + 1) \/\/ 2 + 1, mx + 1):","+        if cnt[i] < 2:","+            pim()","+    pp()","-n = getN()","-nums = getList()","-# nums.sort(reverse=True)","-mx = max(nums)","-mn = (mx + 1) \/\/ 2","-mndx = (mx % 2) + 1","-from collections import Counter","-cnt = Counter(nums)","-for i in range(mn + 1, mx + 1):","-    if cnt[i] < 2:","-        print(\"Impossible\")","-        sys.exit()","-if cnt[mn] != mndx:","-    print(\"Impossible\")","-else:","-    print(\"Possible\")","+def main():","+    n = getN()","+    for _ in range(n):","+        solve()","+    return","+","+","+if __name__ == \"__main__\":","+    # main()","+    solve()"],"diff_only_import_comment":false,"measured_runtime_v0":0.200920903,"measured_runtime_v1":0.0064778831,"runtime_lift":31.0164448269,"key":["s661300903","s790648502"]}
{"user_id":"u990900604","problem_id":"p02390","language":"python","submission_id_v0":"s359089221","submission_id_v1":"s084524983","cpu_time_v0":50,"cpu_time_v1":10,"memory_v0":9852,"memory_v1":4632,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":80.0,"input":"import sys\n\n\n\nif __name__ == '__main__':\n\n    import doctest\n\n    doctest.testmod()\n\n    S = int(sys.stdin.read())\n\n    h = S \/ 3600\n\n    m = (S % 3600) \/ 60\n\n    s = S % 60\n\n    print(\"%d:%d:%d\" % (h, m, s))\n","target":"#!\/usr\/bin\/env python\n\n#-*- coding: utf-8 -*-\n\n\n\n# http:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=ITP1_1_D\n\n\n\nif __name__ == '__main__':\n\n    S = int(input())\n\n    h = S \/ 3600\n\n    m = (S % 3600) \/ 60\n\n    s = S % 60\n\n    print(\"%d:%d:%d\" % (h, m, s))\n","code_v0_loc":10,"code_v1_loc":11,"code_v0_num_chars":208,"code_v1_num_chars":266,"code_v0_no_empty_lines":"import sys\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n    S = int(sys.stdin.read())\n    h = S \/ 3600\n    m = (S % 3600) \/ 60\n    s = S % 60\n    print(\"%d:%d:%d\" % (h, m, s))\n","code_v1_no_empty_lines":"#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n# http:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=ITP1_1_D\nif __name__ == \"__main__\":\n    S = int(input())\n    h = S \/ 3600\n    m = (S % 3600) \/ 60\n    s = S % 60\n    print(\"%d:%d:%d\" % (h, m, s))\n","code_same":false,"relative_loc_diff_percent":9.0909090909,"diff":["-import sys","-","+#!\/usr\/bin\/env python","+# -*- coding: utf-8 -*-","+# http:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=ITP1_1_D","-    import doctest","-","-    doctest.testmod()","-    S = int(sys.stdin.read())","+    S = int(input())"],"diff_only_import_comment":false,"measured_runtime_v0":0.7406475422,"measured_runtime_v1":0.2172099149,"runtime_lift":3.4098238217,"key":["s359089221","s084524983"]}
{"user_id":"u780698286","problem_id":"p02880","language":"python","submission_id_v0":"s530137772","submission_id_v1":"s289678775","cpu_time_v0":31,"cpu_time_v1":26,"memory_v0":9160,"memory_v1":9096,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.13,"input":"n = int(eval(input()))\n\ns = []\n\nfor i in range(1, 10):\n\n  for j in range(1, 10):\n\n    s.append(i*j)\n\nif n in s:\n\n  print(\"Yes\")\n\nelse:\n\n  print(\"No\")","target":"import sys\n\n\n\nn = int(eval(input()))\n\nfor i in range(1, 10):\n\n  for j in range(1, 10):\n\n    if i*j == n:\n\n      print(\"Yes\")\n\n      sys.exit()\n\nprint(\"No\")\n","code_v0_loc":9,"code_v1_loc":9,"code_v0_num_chars":143,"code_v1_num_chars":150,"code_v0_no_empty_lines":"n = int(eval(input()))\ns = []\nfor i in range(1, 10):\n    for j in range(1, 10):\n        s.append(i * j)\nif n in s:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","code_v1_no_empty_lines":"import sys\n\nn = int(eval(input()))\nfor i in range(1, 10):\n    for j in range(1, 10):\n        if i * j == n:\n            print(\"Yes\")\n            sys.exit()\nprint(\"No\")\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["+import sys","+","-s = []","-        s.append(i * j)","-if n in s:","-    print(\"Yes\")","-else:","-    print(\"No\")","+        if i * j == n:","+            print(\"Yes\")","+            sys.exit()","+print(\"No\")"],"diff_only_import_comment":false,"measured_runtime_v0":0.2618995297,"measured_runtime_v1":0.0062340605,"runtime_lift":42.0110661723,"key":["s530137772","s289678775"]}
{"user_id":"u861109991","problem_id":"p02773","language":"python","submission_id_v0":"s393491495","submission_id_v1":"s671436001","cpu_time_v0":1842,"cpu_time_v1":304,"memory_v0":60120,"memory_v1":38476,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":83.5,"input":"# ABC 155 C\n\nfrom collections import Counter\n\nimport numpy as np\n\nN = int(eval(input()))\n\nS = [str(eval(input())) for i in range(N)]\n\nS = np.array(S)\n\n\n\ncount = Counter(S)\n\nmax_num = max(count.values())\n\nmax_list = [i for i,j in list(count.items()) if j==max_num]\n\n\n\nmax_list.sort()\n\nprint(('\\n'.join(max_list)))","target":"import sys\n\nfrom collections import Counter\n\nN = int(sys.stdin.readline())\n\nS = sys.stdin.read().split()\n\n\n\ncount = Counter(S)\n\nmax_num = max(count.values())\n\nmax_list = [i for i,j in list(count.items()) if j==max_num]\n\n \n\nmax_list.sort()\n\nprint(('\\n'.join(max_list)))","code_v0_loc":13,"code_v1_loc":11,"code_v0_num_chars":292,"code_v1_num_chars":260,"code_v0_no_empty_lines":"# ABC 155 C\nfrom collections import Counter\nimport numpy as np\n\nN = int(eval(input()))\nS = [str(eval(input())) for i in range(N)]\nS = np.array(S)\ncount = Counter(S)\nmax_num = max(count.values())\nmax_list = [i for i, j in list(count.items()) if j == max_num]\nmax_list.sort()\nprint((\"\\n\".join(max_list)))\n","code_v1_no_empty_lines":"import sys\nfrom collections import Counter\n\nN = int(sys.stdin.readline())\nS = sys.stdin.read().split()\ncount = Counter(S)\nmax_num = max(count.values())\nmax_list = [i for i, j in list(count.items()) if j == max_num]\nmax_list.sort()\nprint((\"\\n\".join(max_list)))\n","code_same":false,"relative_loc_diff_percent":15.3846153846,"diff":["-# ABC 155 C","+import sys","-import numpy as np","-N = int(eval(input()))","-S = [str(eval(input())) for i in range(N)]","-S = np.array(S)","+N = int(sys.stdin.readline())","+S = sys.stdin.read().split()"],"diff_only_import_comment":false,"measured_runtime_v0":1.8564253402,"measured_runtime_v1":0.2880120206,"runtime_lift":6.4456522902,"key":["s393491495","s671436001"]}
{"user_id":"u814986259","problem_id":"p03796","language":"python","submission_id_v0":"s294020052","submission_id_v1":"s579876547","cpu_time_v0":229,"cpu_time_v1":40,"memory_v0":3968,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":82.53,"input":"import math\n\nN=int(eval(input()))\n\nans=math.factorial(N)\n\nprint((ans%(10**9 +7)))","target":"mod=10**9+7\n\nN=int(eval(input()))\n\nans=1\n\nfor i in range(1,N+1):\n\n  ans*=i\n\n  ans%=mod\n\nprint(ans)","code_v0_loc":4,"code_v1_loc":7,"code_v0_num_chars":73,"code_v1_num_chars":92,"code_v0_no_empty_lines":"import math\n\nN = int(eval(input()))\nans = math.factorial(N)\nprint((ans % (10**9 + 7)))\n","code_v1_no_empty_lines":"mod = 10**9 + 7\nN = int(eval(input()))\nans = 1\nfor i in range(1, N + 1):\n    ans *= i\n    ans %= mod\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":42.8571428571,"diff":["-import math","-","+mod = 10**9 + 7","-ans = math.factorial(N)","-print((ans % (10**9 + 7)))","+ans = 1","+for i in range(1, N + 1):","+    ans *= i","+    ans %= mod","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3063099709,"measured_runtime_v1":0.2071282012,"runtime_lift":1.4788424222,"key":["s294020052","s579876547"]}
{"user_id":"u328510800","problem_id":"p02899","language":"python","submission_id_v0":"s903355789","submission_id_v1":"s800578512","cpu_time_v0":617,"cpu_time_v1":144,"memory_v0":23416,"memory_v1":30160,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":76.66,"input":"import numpy as np\n\nn = int(eval(input()))\n\na = np.array(list(map(int, input().split())))\n\n\n\nprint((*list([x + 1 for x in np.argsort(a)])))","target":"n = int(eval(input()))\n\nm = [(x, 0) for x in range(1, n+1)]\n\n\n\nfor i, x in enumerate(map(int, input().split())):\n\n  m[i] = (m[i][0], x)\n\nm.sort(key=lambda x : x[1])\n\nprint((' '.join([str(x[0]) for x in m])))","code_v0_loc":5,"code_v1_loc":7,"code_v0_num_chars":137,"code_v1_num_chars":199,"code_v0_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\na = np.array(list(map(int, input().split())))\nprint((*list([x + 1 for x in np.argsort(a)])))\n","code_v1_no_empty_lines":"n = int(eval(input()))\nm = [(x, 0) for x in range(1, n + 1)]\nfor i, x in enumerate(map(int, input().split())):\n    m[i] = (m[i][0], x)\nm.sort(key=lambda x: x[1])\nprint((\" \".join([str(x[0]) for x in m])))\n","code_same":false,"relative_loc_diff_percent":28.5714285714,"diff":["-import numpy as np","-","-a = np.array(list(map(int, input().split())))","-print((*list([x + 1 for x in np.argsort(a)])))","+m = [(x, 0) for x in range(1, n + 1)]","+for i, x in enumerate(map(int, input().split())):","+    m[i] = (m[i][0], x)","+m.sort(key=lambda x: x[1])","+print((\" \".join([str(x[0]) for x in m])))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3737991261,"measured_runtime_v1":0.1981218202,"runtime_lift":6.9341131869,"key":["s903355789","s800578512"]}
{"user_id":"u670180528","problem_id":"p03634","language":"python","submission_id_v0":"s592706363","submission_id_v1":"s081294326","cpu_time_v0":718,"cpu_time_v1":476,"memory_v0":63540,"memory_v1":64180,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":33.7,"input":"from collections import deque\n\nn,*t=list(map(int,open(0).read().split()))\n\ncon=[[] for _ in range(n)]\n\ndist_f_k=[0]*n\n\n\n\nfor a,b,c in zip(t[:3*n-3:3],t[1::3],t[2::3]):\n\n\tcon[a-1].append((b-1,c))\n\n\tcon[b-1].append((a-1,c))\n\n\n\nk=t[3*n-2]\n\nque=deque([k-1])\n\nwhile que:\n\n\tcur=que.popleft()\n\n\tfor nxt,dd in con[cur]:\n\n\t\tif dist_f_k[nxt]==0 and nxt!=k-1:\n\n\t\t\tque.append(nxt)\n\n\t\t\tdist_f_k[nxt]=dist_f_k[cur]+dd\n\n\n\nfor x,y in zip(t[3*n-1::2],t[3*n::2]):\n\n\tprint((dist_f_k[x-1]+dist_f_k[y-1]))","target":"def solve():\n\n\tfrom collections import deque\n\n\tn,*t=list(map(int,open(0).read().split()))\n\n\tcon=[[] for _ in range(n)]\n\n\tdist_f_k=[0]*n\n\n\tl1,l2=t[:3*n-3],t[3*n-1:]\n\n\n\n\tfor a,b,c in zip(*[iter(l1)]*3):\n\n\t\tcon[a-1].append((b-1,c))\n\n\t\tcon[b-1].append((a-1,c))\n\n\n\n\tk=t[3*n-2]\n\n\tque=deque([k-1])\n\n\twhile que:\n\n\t\tcur=que.popleft()\n\n\t\tfor nxt,dd in con[cur]:\n\n\t\t\tif dist_f_k[nxt]==0 and nxt!=k-1:\n\n\t\t\t\tque.append(nxt)\n\n\t\t\t\tdist_f_k[nxt]=dist_f_k[cur]+dd\n\n\n\n\tfor x,y in zip(*[iter(l2)]*2):\n\n\t\tprint((dist_f_k[x-1]+dist_f_k[y-1]))\n\n\t\t\n\nif __name__==\"__main__\":\n\n\tsolve()","code_v0_loc":20,"code_v1_loc":25,"code_v0_num_chars":476,"code_v1_num_chars":553,"code_v0_no_empty_lines":"from collections import deque\n\nn, *t = list(map(int, open(0).read().split()))\ncon = [[] for _ in range(n)]\ndist_f_k = [0] * n\nfor a, b, c in zip(t[: 3 * n - 3 : 3], t[1::3], t[2::3]):\n    con[a - 1].append((b - 1, c))\n    con[b - 1].append((a - 1, c))\nk = t[3 * n - 2]\nque = deque([k - 1])\nwhile que:\n    cur = que.popleft()\n    for nxt, dd in con[cur]:\n        if dist_f_k[nxt] == 0 and nxt != k - 1:\n            que.append(nxt)\n            dist_f_k[nxt] = dist_f_k[cur] + dd\nfor x, y in zip(t[3 * n - 1 :: 2], t[3 * n :: 2]):\n    print((dist_f_k[x - 1] + dist_f_k[y - 1]))\n","code_v1_no_empty_lines":"def solve():\n    from collections import deque\n\n    n, *t = list(map(int, open(0).read().split()))\n    con = [[] for _ in range(n)]\n    dist_f_k = [0] * n\n    l1, l2 = t[: 3 * n - 3], t[3 * n - 1 :]\n    for a, b, c in zip(*[iter(l1)] * 3):\n        con[a - 1].append((b - 1, c))\n        con[b - 1].append((a - 1, c))\n    k = t[3 * n - 2]\n    que = deque([k - 1])\n    while que:\n        cur = que.popleft()\n        for nxt, dd in con[cur]:\n            if dist_f_k[nxt] == 0 and nxt != k - 1:\n                que.append(nxt)\n                dist_f_k[nxt] = dist_f_k[cur] + dd\n    for x, y in zip(*[iter(l2)] * 2):\n        print((dist_f_k[x - 1] + dist_f_k[y - 1]))\n\n\nif __name__ == \"__main__\":\n    solve()\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["-from collections import deque","+def solve():","+    from collections import deque","-n, *t = list(map(int, open(0).read().split()))","-con = [[] for _ in range(n)]","-dist_f_k = [0] * n","-for a, b, c in zip(t[: 3 * n - 3 : 3], t[1::3], t[2::3]):","-    con[a - 1].append((b - 1, c))","-    con[b - 1].append((a - 1, c))","-k = t[3 * n - 2]","-que = deque([k - 1])","-while que:","-    cur = que.popleft()","-    for nxt, dd in con[cur]:","-        if dist_f_k[nxt] == 0 and nxt != k - 1:","-            que.append(nxt)","-            dist_f_k[nxt] = dist_f_k[cur] + dd","-for x, y in zip(t[3 * n - 1 :: 2], t[3 * n :: 2]):","-    print((dist_f_k[x - 1] + dist_f_k[y - 1]))","+    n, *t = list(map(int, open(0).read().split()))","+    con = [[] for _ in range(n)]","+    dist_f_k = [0] * n","+    l1, l2 = t[: 3 * n - 3], t[3 * n - 1 :]","+    for a, b, c in zip(*[iter(l1)] * 3):","+        con[a - 1].append((b - 1, c))","+        con[b - 1].append((a - 1, c))","+    k = t[3 * n - 2]","+    que = deque([k - 1])","+    while que:","+        cur = que.popleft()","+        for nxt, dd in con[cur]:","+            if dist_f_k[nxt] == 0 and nxt != k - 1:","+                que.append(nxt)","+                dist_f_k[nxt] = dist_f_k[cur] + dd","+    for x, y in zip(*[iter(l2)] * 2):","+        print((dist_f_k[x - 1] + dist_f_k[y - 1]))","+","+","+if __name__ == \"__main__\":","+    solve()"],"diff_only_import_comment":false,"measured_runtime_v0":0.331901531,"measured_runtime_v1":0.2149364519,"runtime_lift":1.5441844695,"key":["s592706363","s081294326"]}
{"user_id":"u724687935","problem_id":"p02622","language":"python","submission_id_v0":"s346270661","submission_id_v1":"s299240564","cpu_time_v0":67,"cpu_time_v1":60,"memory_v0":9408,"memory_v1":9320,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.45,"input":"S = eval(input())\n\nT = eval(input())\n\nN = len(S)\n\ncnt = 0\n\nfor i in range(N):\n\n    cnt += (S[i] != T[i])\n\n\n\nprint(cnt)\n","target":"S = eval(input())\n\nT = eval(input())\n\ncnt = 0\n\nfor i in range(len(S)):\n\n    cnt += (S[i] != T[i])\n\n\n\nprint(cnt)","code_v0_loc":8,"code_v1_loc":7,"code_v0_num_chars":107,"code_v1_num_chars":99,"code_v0_no_empty_lines":"S = eval(input())\nT = eval(input())\nN = len(S)\ncnt = 0\nfor i in range(N):\n    cnt += S[i] != T[i]\nprint(cnt)\n","code_v1_no_empty_lines":"S = eval(input())\nT = eval(input())\ncnt = 0\nfor i in range(len(S)):\n    cnt += S[i] != T[i]\nprint(cnt)\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-N = len(S)","-for i in range(N):","+for i in range(len(S)):"],"diff_only_import_comment":false,"measured_runtime_v0":0.3924936354,"measured_runtime_v1":0.2147260756,"runtime_lift":1.8278806345,"key":["s346270661","s299240564"]}
{"user_id":"u638456847","problem_id":"p03253","language":"python","submission_id_v0":"s213127805","submission_id_v1":"s828879500","cpu_time_v0":45,"cpu_time_v1":18,"memory_v0":7084,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":60.0,"input":"import sys\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\n\n\nMOD = 10**9+7\n\n\n\nfac = [1, 1]     # \u5143\u30c6\u30fc\u30d6\u30eb\n\nf_inv = [1, 1]   # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\n\ninv = [0, 1]     # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\ndef prepare(n, mod):\n\n    for i in range(2, n+1):\n\n        fac.append((fac[-1] * i) % mod)\n\n\n\n\n\ndef cmb(n, r, mod):\n\n    if n < 0 or r < 0:\n\n        return 0\n\n    if r > n:\n\n        return 0\n\n\n\n    return fac[n] * pow(fac[r],MOD-2,MOD) * pow(fac[n-r],MOD-2,MOD) % mod\n\n\n\n\n\ndef prime_factorization(n):\n\n    d = []\n\n    i, e = 2, 0  # factor, exponent\n\n    while i * i <= n:\n\n        while n % i == 0:\n\n            n \/\/= i\n\n            e += 1\n\n        if e > 0:\n\n            d.append((i, e))\n\n        i += 1\n\n        e = 0\n\n    if n > 1:\n\n        d.append((n, 1))\n\n    return d\n\n\n\n\n\ndef main():\n\n    N,M = list(map(int, readline().split()))\n\n\n\n    prepare(N+100, MOD)\n\n    d = prime_factorization(M)\n\n\n\n    ans = 1\n\n    for i, e in d:\n\n        ans *= cmb(N-1+e, e, MOD)\n\n        ans %= MOD\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"# AC: msec(Python3)\n\nfrom math import factorial\n\nimport sys\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\n\n\nMOD = 10**9+7\n\n\n\ndef cmb(n, r):\n\n    if n < 0 or r < 0:\n\n        return 0\n\n    if r > n:\n\n        return 0\n\n\n\n    r = min(n-r, r)\n\n    res = 1\n\n    for i in range(r):\n\n        res *= n - i\n\n\n\n    return res \/\/ factorial(r)\n\n\n\n\n\ndef prime_factorization(n):\n\n    d = []\n\n    i, e = 2, 0  # factor, exponent\n\n    while i * i <= n:\n\n        while n % i == 0:\n\n            n \/\/= i\n\n            e += 1\n\n        if e > 0:\n\n            d.append((i, e))\n\n        i += 1\n\n        e = 0\n\n    if n > 1:\n\n        d.append((n, 1))\n\n    return d\n\n\n\n\n\ndef main():\n\n    N,M = list(map(int, readline().split()))\n\n\n\n    d = prime_factorization(M)\n\n\n\n    ans = 1\n\n    for i, e in d:\n\n        ans *= cmb(N-1+e, e)\n\n        ans %= MOD\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":56,"code_v1_loc":54,"code_v0_num_chars":1049,"code_v1_num_chars":919,"code_v0_no_empty_lines":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nMOD = 10**9 + 7\nfac = [1, 1]  # \u5143\u30c6\u30fc\u30d6\u30eb\nf_inv = [1, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninv = [0, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\n\ndef prepare(n, mod):\n    for i in range(2, n + 1):\n        fac.append((fac[-1] * i) % mod)\n\n\ndef cmb(n, r, mod):\n    if n < 0 or r < 0:\n        return 0\n    if r > n:\n        return 0\n    return fac[n] * pow(fac[r], MOD - 2, MOD) * pow(fac[n - r], MOD - 2, MOD) % mod\n\n\ndef prime_factorization(n):\n    d = []\n    i, e = 2, 0  # factor, exponent\n    while i * i <= n:\n        while n % i == 0:\n            n \/\/= i\n            e += 1\n        if e > 0:\n            d.append((i, e))\n        i += 1\n        e = 0\n    if n > 1:\n        d.append((n, 1))\n    return d\n\n\ndef main():\n    N, M = list(map(int, readline().split()))\n    prepare(N + 100, MOD)\n    d = prime_factorization(M)\n    ans = 1\n    for i, e in d:\n        ans *= cmb(N - 1 + e, e, MOD)\n        ans %= MOD\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"# AC: msec(Python3)\nfrom math import factorial\nimport sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nMOD = 10**9 + 7\n\n\ndef cmb(n, r):\n    if n < 0 or r < 0:\n        return 0\n    if r > n:\n        return 0\n    r = min(n - r, r)\n    res = 1\n    for i in range(r):\n        res *= n - i\n    return res \/\/ factorial(r)\n\n\ndef prime_factorization(n):\n    d = []\n    i, e = 2, 0  # factor, exponent\n    while i * i <= n:\n        while n % i == 0:\n            n \/\/= i\n            e += 1\n        if e > 0:\n            d.append((i, e))\n        i += 1\n        e = 0\n    if n > 1:\n        d.append((n, 1))\n    return d\n\n\ndef main():\n    N, M = list(map(int, readline().split()))\n    d = prime_factorization(M)\n    ans = 1\n    for i, e in d:\n        ans *= cmb(N - 1 + e, e)\n        ans %= MOD\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":3.5714285714,"diff":["+# AC: msec(Python3)","+from math import factorial","-fac = [1, 1]  # \u5143\u30c6\u30fc\u30d6\u30eb","-f_inv = [1, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb","-inv = [0, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb","-def prepare(n, mod):","-    for i in range(2, n + 1):","-        fac.append((fac[-1] * i) % mod)","-","-","-def cmb(n, r, mod):","+def cmb(n, r):","-    return fac[n] * pow(fac[r], MOD - 2, MOD) * pow(fac[n - r], MOD - 2, MOD) % mod","+    r = min(n - r, r)","+    res = 1","+    for i in range(r):","+        res *= n - i","+    return res \/\/ factorial(r)","-    prepare(N + 100, MOD)","-        ans *= cmb(N - 1 + e, e, MOD)","+        ans *= cmb(N - 1 + e, e)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3783175611,"measured_runtime_v1":0.2571354423,"runtime_lift":1.4712773852,"key":["s213127805","s828879500"]}
{"user_id":"u047178225","problem_id":"p02690","language":"python","submission_id_v0":"s842823347","submission_id_v1":"s836367972","cpu_time_v0":81,"cpu_time_v1":27,"memory_v0":9444,"memory_v1":9444,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":66.67,"input":"X = int(eval(input()))\n\n#print(X)\n\nn = X\n\ndiv = []\n\nfor i in range(1, int(n**0.5)+1):\n\n  if n % i == 0:\n\n    div.append(i)\n\n    if i != n \/\/ i:\n\n      div.append(n\/\/i)\n\n#print(div)\n\n\n\nfor i in div:\n\n  for a in range(0, 10001): \n\n    b = a - i\n\n    #print(a, b)\n\n    if a**5 - b**5 == X:\n\n      print((a, b))\n\n      break\n\n  else:\n\n    continue\n\n  break\n\n   \n\n    ","target":"X = int(eval(input()))\n\n#print(X)\n\nn = X\n\ndiv = []\n\nfor i in range(1, int(n**0.5)+1):\n\n  if n % i == 0:\n\n    div.append(i)\n\n    if i != n \/\/ i:\n\n      div.append(n\/\/i)\n\n#print(div)\n\n\n\nfor i in div:\n\n  for a in range(0, 1001): \n\n    b = a - i\n\n    #print(a, b)\n\n    if a**5 - b**5 == X:\n\n      print((a, b))\n\n      break\n\n  else:\n\n    continue\n\n  break","code_v0_loc":23,"code_v1_loc":21,"code_v0_num_chars":355,"code_v1_num_chars":343,"code_v0_no_empty_lines":"X = int(eval(input()))\n# print(X)\nn = X\ndiv = []\nfor i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n        div.append(i)\n        if i != n \/\/ i:\n            div.append(n \/\/ i)\n# print(div)\nfor i in div:\n    for a in range(0, 10001):\n        b = a - i\n        # print(a, b)\n        if a**5 - b**5 == X:\n            print((a, b))\n            break\n    else:\n        continue\n    break\n","code_v1_no_empty_lines":"X = int(eval(input()))\n# print(X)\nn = X\ndiv = []\nfor i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n        div.append(i)\n        if i != n \/\/ i:\n            div.append(n \/\/ i)\n# print(div)\nfor i in div:\n    for a in range(0, 1001):\n        b = a - i\n        # print(a, b)\n        if a**5 - b**5 == X:\n            print((a, b))\n            break\n    else:\n        continue\n    break\n","code_same":false,"relative_loc_diff_percent":8.6956521739,"diff":["-    for a in range(0, 10001):","+    for a in range(0, 1001):"],"diff_only_import_comment":false,"measured_runtime_v0":0.4829796672,"measured_runtime_v1":0.3715977311,"runtime_lift":1.2997379336,"key":["s842823347","s836367972"]}
{"user_id":"u604774382","problem_id":"p02264","language":"python","submission_id_v0":"s685908626","submission_id_v1":"s418135932","cpu_time_v0":1410,"cpu_time_v1":1260,"memory_v0":17580,"memory_v1":11516,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.64,"input":"n, q = [ int( val ) for val in input( ).split( \" \" ) ]\n\nps = [0]*n\n\nt = [0]*n\n\nfor i in range( n ):\n\n\tps[i], t[i] = input( ).split( \" \" )\n\n\n\n\n\noutput = []\n\nqsum = 0\n\nwhile t:\n\n\tpsi = ps.pop( 0 )\n\n\tti = int( t.pop( 0 ) )\n\n\tif ti <= q:\n\n\t\tqsum += ti\t\n\n\t\toutput.append( psi+\" \"+str( qsum ) )\n\n\telse:\n\n\t\tt.append( ti - q )\n\n\t\tps.append( psi )\n\n\t\tqsum += q\n\n\n\nprint(( \"\\n\".join( output ) ))","target":"n, q = [ int( val ) for val in input( ).split( \" \" ) ]\n\nps = [0]*n\n\nt = [0]*n\n\nfor i in range( n ):\n\n    ps[i], t[i] = input( ).split( \" \" )\n\n \n\n \n\noutput = []\n\nqsum = 0\n\nwhile t:\n\n    psi = ps.pop( 0 )\n\n    ti = int( t.pop( 0 ) )\n\n    if ti <= q:\n\n        qsum += ti\n\n        output.append( \"\".join( ( psi, \" \", str( qsum ) ) ) )\n\n    else:\n\n        t.append( ti - q )\n\n        ps.append( psi )\n\n        qsum += q\n\n \n\nprint(( \"\\n\".join( output ) ))","code_v0_loc":21,"code_v1_loc":21,"code_v0_num_chars":383,"code_v1_num_chars":455,"code_v0_no_empty_lines":"n, q = [int(val) for val in input().split(\" \")]\nps = [0] * n\nt = [0] * n\nfor i in range(n):\n    ps[i], t[i] = input().split(\" \")\noutput = []\nqsum = 0\nwhile t:\n    psi = ps.pop(0)\n    ti = int(t.pop(0))\n    if ti <= q:\n        qsum += ti\n        output.append(psi + \" \" + str(qsum))\n    else:\n        t.append(ti - q)\n        ps.append(psi)\n        qsum += q\nprint((\"\\n\".join(output)))\n","code_v1_no_empty_lines":"n, q = [int(val) for val in input().split(\" \")]\nps = [0] * n\nt = [0] * n\nfor i in range(n):\n    ps[i], t[i] = input().split(\" \")\noutput = []\nqsum = 0\nwhile t:\n    psi = ps.pop(0)\n    ti = int(t.pop(0))\n    if ti <= q:\n        qsum += ti\n        output.append(\"\".join((psi, \" \", str(qsum))))\n    else:\n        t.append(ti - q)\n        ps.append(psi)\n        qsum += q\nprint((\"\\n\".join(output)))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-        output.append(psi + \" \" + str(qsum))","+        output.append(\"\".join((psi, \" \", str(qsum))))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2516228666,"measured_runtime_v1":0.0710392208,"runtime_lift":3.5420274002,"key":["s685908626","s418135932"]}
{"user_id":"u759412327","problem_id":"p03273","language":"python","submission_id_v0":"s715481285","submission_id_v1":"s158996242","cpu_time_v0":157,"cpu_time_v1":19,"memory_v0":12444,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.9,"input":"import numpy as np\n\nimport sys\n\n\n\nbuf = sys.stdin.buffer\n\nH,W = list(map(int,buf.readline().split()))\n\n\n\ngrid = np.frombuffer(buf.read(H*(W+1)), dtype='S1').reshape((H,W+1))\n\ngrid = grid[:,:-1]\n\n\n\nselect_col = (grid == b'#').any(axis = 0)\n\nselect_row = (grid == b'#').any(axis = 1)\n\n\n\ngrid = grid[select_row, :]\n\ngrid = grid[:, select_col]\n\ngrid = grid.astype(str)\n\n\n\nprint(('\\n'.join(''.join(row) for row in grid)))\n","target":"H,W = list(map(int,input().split()))\n\nA = [eval(input()) for _ in range(H)]\n\nA = list([a for a in A if any(x=='#' for x in a)]) \n\nA = list([a for a in zip(*A) if any(x=='#' for x in a)])\n\n\n\nfor a in zip(*A):\n\n  print((''.join(a)))","code_v0_loc":17,"code_v1_loc":7,"code_v0_num_chars":409,"code_v1_num_chars":222,"code_v0_no_empty_lines":"import numpy as np\nimport sys\n\nbuf = sys.stdin.buffer\nH, W = list(map(int, buf.readline().split()))\ngrid = np.frombuffer(buf.read(H * (W + 1)), dtype=\"S1\").reshape((H, W + 1))\ngrid = grid[:, :-1]\nselect_col = (grid == b\"#\").any(axis=0)\nselect_row = (grid == b\"#\").any(axis=1)\ngrid = grid[select_row, :]\ngrid = grid[:, select_col]\ngrid = grid.astype(str)\nprint((\"\\n\".join(\"\".join(row) for row in grid)))\n","code_v1_no_empty_lines":"H, W = list(map(int, input().split()))\nA = [eval(input()) for _ in range(H)]\nA = list([a for a in A if any(x == \"#\" for x in a)])\nA = list([a for a in zip(*A) if any(x == \"#\" for x in a)])\nfor a in zip(*A):\n    print((\"\".join(a)))\n","code_same":false,"relative_loc_diff_percent":58.8235294118,"diff":["-import numpy as np","-import sys","-","-buf = sys.stdin.buffer","-H, W = list(map(int, buf.readline().split()))","-grid = np.frombuffer(buf.read(H * (W + 1)), dtype=\"S1\").reshape((H, W + 1))","-grid = grid[:, :-1]","-select_col = (grid == b\"#\").any(axis=0)","-select_row = (grid == b\"#\").any(axis=1)","-grid = grid[select_row, :]","-grid = grid[:, select_col]","-grid = grid.astype(str)","-print((\"\\n\".join(\"\".join(row) for row in grid)))","+H, W = list(map(int, input().split()))","+A = [eval(input()) for _ in range(H)]","+A = list([a for a in A if any(x == \"#\" for x in a)])","+A = list([a for a in zip(*A) if any(x == \"#\" for x in a)])","+for a in zip(*A):","+    print((\"\".join(a)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.2476984263,"measured_runtime_v1":0.1928220473,"runtime_lift":6.4707249179,"key":["s715481285","s158996242"]}
{"user_id":"u629538480","problem_id":"p02688","language":"python","submission_id_v0":"s093466568","submission_id_v1":"s996398988","cpu_time_v0":24,"cpu_time_v1":21,"memory_v0":9192,"memory_v1":8948,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":12.5,"input":"N,K = list(map(int, input().split(' ')))\n\na=list(range(1,N+1))\n\nfor i in range(K):\n\n  count=int(eval(input()))\n\n  b=input().split(' ')\n\n  for j in range(count):\n\n    if int(b[j]) in a:\n\n      a.remove(int(b[j]))\n\nprint((len(a)))","target":"N,K = list(map(int, input().split(' ')))\n\na=list(range(1,N+1))\n\nfor i in range(K):\n\n  count=int(eval(input()))\n\n  b=[int(x.strip()) for x in input().split(' ')]\n\n  for j in range(count):\n\n    if b[j] in a:\n\n      a.remove(b[j])\n\nprint((len(a)))","code_v0_loc":9,"code_v1_loc":9,"code_v0_num_chars":214,"code_v1_num_chars":230,"code_v0_no_empty_lines":"N, K = list(map(int, input().split(\" \")))\na = list(range(1, N + 1))\nfor i in range(K):\n    count = int(eval(input()))\n    b = input().split(\" \")\n    for j in range(count):\n        if int(b[j]) in a:\n            a.remove(int(b[j]))\nprint((len(a)))\n","code_v1_no_empty_lines":"N, K = list(map(int, input().split(\" \")))\na = list(range(1, N + 1))\nfor i in range(K):\n    count = int(eval(input()))\n    b = [int(x.strip()) for x in input().split(\" \")]\n    for j in range(count):\n        if b[j] in a:\n            a.remove(b[j])\nprint((len(a)))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    b = input().split(\" \")","+    b = [int(x.strip()) for x in input().split(\" \")]","-        if int(b[j]) in a:","-            a.remove(int(b[j]))","+        if b[j] in a:","+            a.remove(b[j])"],"diff_only_import_comment":false,"measured_runtime_v0":0.2616522854,"measured_runtime_v1":0.1381282375,"runtime_lift":1.8942707889,"key":["s093466568","s996398988"]}
{"user_id":"u780342333","problem_id":"p02416","language":"python","submission_id_v0":"s248122741","submission_id_v1":"s360997133","cpu_time_v0":30,"cpu_time_v1":20,"memory_v0":7732,"memory_v1":5624,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":33.33,"input":"res = []\n\nwhile True:\n\n    s = eval(input())\n\n    if s == '0':\n\n        break\n\n\n\n    res.append(sum([int(x) for x in s]))\n\n\n\nfor e in res:\n\n    print(e)","target":"def sum_of_numbers(n):\n\n    '''\n\n    (* int -> int *)\n\n    '''\n\n    res = [int(n) for n in list(str(n))]\n\n    \n\n    return sum(res)\n\n\n\nif __name__ == \"__main__\":\n\n    while True:\n\n        n = eval(input())\n\n        if n == '0':\n\n            break\n\n        print((sum_of_numbers(n)))\n","code_v0_loc":10,"code_v1_loc":14,"code_v0_num_chars":146,"code_v1_num_chars":275,"code_v0_no_empty_lines":"res = []\nwhile True:\n    s = eval(input())\n    if s == \"0\":\n        break\n    res.append(sum([int(x) for x in s]))\nfor e in res:\n    print(e)\n","code_v1_no_empty_lines":"def sum_of_numbers(n):\n    \"\"\"\n    (* int -> int *)\n    \"\"\"\n    res = [int(n) for n in list(str(n))]\n    return sum(res)\n\n\nif __name__ == \"__main__\":\n    while True:\n        n = eval(input())\n        if n == \"0\":\n            break\n        print((sum_of_numbers(n)))\n","code_same":false,"relative_loc_diff_percent":28.5714285714,"diff":["-res = []","-while True:","-    s = eval(input())","-    if s == \"0\":","-        break","-    res.append(sum([int(x) for x in s]))","-for e in res:","-    print(e)","+def sum_of_numbers(n):","+    \"\"\"","+    (* int -> int *)","+    \"\"\"","+    res = [int(n) for n in list(str(n))]","+    return sum(res)","+","+","+if __name__ == \"__main__\":","+    while True:","+        n = eval(input())","+        if n == \"0\":","+            break","+        print((sum_of_numbers(n)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2668570542,"measured_runtime_v1":0.0949980106,"runtime_lift":2.8090804473,"key":["s248122741","s360997133"]}
{"user_id":"u989345508","problem_id":"p03796","language":"python","submission_id_v0":"s438142944","submission_id_v1":"s382070647","cpu_time_v0":48,"cpu_time_v1":40,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.67,"input":"n=int(eval(input()))\n\nx=1\n\nfor i in range(n):\n\n    x*=(i+1)\n\n    if x>10**9+7:\n\n        x=x%(10**9+7)\n\n\n\nprint(x)\n\n#import numpy as np\n\n#n=int(input())\n\n#print(np.prod([i+1 for i in range(n)]))\n\n#print(np.prod([i+1 for i in range(n)])%((10**9)+7))\n\n\n\n#\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\uff1f\n","target":"power=1\n\nn=int(eval(input()))\n\nmod=10**9+7\n\nfor i in range(1,n+1):\n\n    power*=i\n\n    power%=mod\n\n    #print(power)\n\nprint(power)\n","code_v0_loc":14,"code_v1_loc":8,"code_v0_num_chars":255,"code_v1_num_chars":124,"code_v0_no_empty_lines":"n = int(eval(input()))\nx = 1\nfor i in range(n):\n    x *= i + 1\n    if x > 10**9 + 7:\n        x = x % (10**9 + 7)\nprint(x)\n# import numpy as np\n# n=int(input())\n# print(np.prod([i+1 for i in range(n)]))\n# print(np.prod([i+1 for i in range(n)])%((10**9)+7))\n# \u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\uff1f\n","code_v1_no_empty_lines":"power = 1\nn = int(eval(input()))\nmod = 10**9 + 7\nfor i in range(1, n + 1):\n    power *= i\n    power %= mod\n    # print(power)\nprint(power)\n","code_same":false,"relative_loc_diff_percent":42.8571428571,"diff":["+power = 1","-x = 1","-for i in range(n):","-    x *= i + 1","-    if x > 10**9 + 7:","-        x = x % (10**9 + 7)","-print(x)","-# import numpy as np","-# n=int(input())","-# print(np.prod([i+1 for i in range(n)]))","-# print(np.prod([i+1 for i in range(n)])%((10**9)+7))","-# \u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\uff1f","+mod = 10**9 + 7","+for i in range(1, n + 1):","+    power *= i","+    power %= mod","+    # print(power)","+print(power)"],"diff_only_import_comment":false,"measured_runtime_v0":0.4326640232,"measured_runtime_v1":0.3277085986,"runtime_lift":1.3202705848,"key":["s438142944","s382070647"]}
{"user_id":"u729133443","problem_id":"p03086","language":"python","submission_id_v0":"s780520490","submission_id_v1":"s016683067","cpu_time_v0":19,"cpu_time_v1":17,"memory_v0":3188,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.53,"input":"import re;print((max(list(map(len,re.split('[^ACGT]',eval(input())))))))","target":"p=m=0\n\nfor c in eval(input()):p=-~p*(c in'ATGC');m=max(m,p)\n\nprint(m)","code_v0_loc":1,"code_v1_loc":3,"code_v0_num_chars":58,"code_v1_num_chars":63,"code_v0_no_empty_lines":"import re\n\nprint((max(list(map(len, re.split(\"[^ACGT]\", eval(input())))))))\n","code_v1_no_empty_lines":"p = m = 0\nfor c in eval(input()):\n    p = -~p * (c in \"ATGC\")\n    m = max(m, p)\nprint(m)\n","code_same":false,"relative_loc_diff_percent":66.6666666667,"diff":["-import re","-","-print((max(list(map(len, re.split(\"[^ACGT]\", eval(input())))))))","+p = m = 0","+for c in eval(input()):","+    p = -~p * (c in \"ATGC\")","+    m = max(m, p)","+print(m)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2963340635,"measured_runtime_v1":0.1579363909,"runtime_lift":1.8762874209,"key":["s780520490","s016683067"]}
{"user_id":"u119982001","problem_id":"p02690","language":"python","submission_id_v0":"s761984261","submission_id_v1":"s930653030","cpu_time_v0":42,"cpu_time_v1":32,"memory_v0":9160,"memory_v1":9092,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":23.81,"input":"X=int(eval(input()))\n\n\n\nfor i in range(200):\n\n    for j in range(-200,200):\n\n        if X == (i**5-j**5):\n\n            print((i, j))\n\n            exit()\n","target":"X=int(eval(input()))\n\n\n\nfor i in range(120):\n\n    for j in range(-120,120):\n\n        if X == (i**5-j**5):\n\n            print((i, j))\n\n            exit()\n","code_v0_loc":7,"code_v1_loc":7,"code_v0_num_chars":145,"code_v1_num_chars":145,"code_v0_no_empty_lines":"X = int(eval(input()))\nfor i in range(200):\n    for j in range(-200, 200):\n        if X == (i**5 - j**5):\n            print((i, j))\n            exit()\n","code_v1_no_empty_lines":"X = int(eval(input()))\nfor i in range(120):\n    for j in range(-120, 120):\n        if X == (i**5 - j**5):\n            print((i, j))\n            exit()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-for i in range(200):","-    for j in range(-200, 200):","+for i in range(120):","+    for j in range(-120, 120):"],"diff_only_import_comment":false,"measured_runtime_v0":0.2879281123,"measured_runtime_v1":0.1173316002,"runtime_lift":2.4539690233,"key":["s761984261","s930653030"]}
{"user_id":"u389910364","problem_id":"p03575","language":"python","submission_id_v0":"s425131512","submission_id_v1":"s549163277","cpu_time_v0":194,"cpu_time_v1":18,"memory_v0":14880,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":90.72,"input":"import os\n\nimport sys\n\n\n\nimport numpy as np\n\nfrom scipy.sparse import csr_matrix\n\nfrom scipy.sparse.csgraph import connected_components\n\n\n\nif os.getenv(\"LOCAL\"):\n\n    sys.stdin = open(\"_in.txt\", \"r\")\n\n\n\nsys.setrecursionlimit(2147483647)\n\nINF = float(\"inf\")\n\nIINF = 10 ** 18\n\nMOD = 10 ** 9 + 7\n\n\n\nN, M = list(map(int, sys.stdin.readline().split()))\n\nA, B = list(zip(*[list(map(int, sys.stdin.readline().split())) for _ in range(M)]))\n\nA = np.array(A) - 1\n\nB = np.array(B) - 1\n\n\n\n\n\ndef is_bridge(i):\n\n    a = np.concatenate([A[:i], A[i + 1:]])\n\n    b = np.concatenate([B[:i], B[i + 1:]])\n\n    graph = csr_matrix(([True] * (M - 1), (a, b)), shape=(N, N))\n\n    _, components = connected_components(graph, directed=False)\n\n    return components.max() >= 1\n\n\n\n\n\nans = 0\n\nfor i in range(M):\n\n    ans += is_bridge(i)\n\nprint(ans)\n","target":"import os\n\n\n\nimport sys\n\n\n\nif os.getenv(\"LOCAL\"):\n\n    sys.stdin = open(\"_in.txt\", \"r\")\n\n\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = float(\"inf\")\n\nIINF = 10 ** 18\n\nMOD = 10 ** 9 + 7\n\n\n\n\n\n# MOD = 998244353\n\n\n\n\n\ndef enumerate_bridges(graph):\n\n    \"\"\"\n\n    \u6a4b\u3092\u5217\u6319\u3059\u308b\n\n    http:\/\/nupioca.hatenadiary.jp\/entry\/2013\/11\/03\/200006\n\n    :param list of (list of int) graph:\n\n    \"\"\"\n\n    N = len(graph)\n\n    ret_bridges = []\n\n    pres = [-1] * N\n\n    lows = [-1] * N\n\n    order = -1\n\n    for v in range(N):\n\n        if pres[v] >= 0:\n\n            continue\n\n        edges = [(None, v, True)]\n\n        while edges:\n\n            v, u, forward = edges.pop()\n\n            if forward:\n\n                if pres[u] >= 0:\n\n                    # \u3082\u3046\u6765\u305f\u3053\u3068\u304c\u3042\u308b\n\n                    lows[v] = min(lows[v], lows[u])\n\n                    continue\n\n                edges.append((v, u, False))\n\n                parent, v = v, u\n\n                order += 1\n\n                pres[v] = lows[v] = order\n\n                for u in graph[v]:\n\n                    if u == parent:\n\n                        continue\n\n                    edges.append((v, u, True))\n\n            else:\n\n                if v is None:\n\n                    continue\n\n                if lows[u] == pres[u]:\n\n                    ret_bridges.append((v, u))\n\n                lows[v] = min(lows[v], lows[u])\n\n    return ret_bridges\n\n\n\n\n\nN, M = list(map(int, sys.stdin.buffer.readline().split()))\n\nAB = [list(map(int, sys.stdin.buffer.readline().split())) for _ in range(M)]\n\ngraph = [[] for _ in range(N + 1)]\n\nfor a, b in AB:\n\n    graph[a].append(b)\n\n    graph[b].append(a)\n\nbridges = enumerate_bridges(graph)\n\nprint((len(bridges)))\n","code_v0_loc":33,"code_v1_loc":63,"code_v0_num_chars":815,"code_v1_num_chars":1657,"code_v0_no_empty_lines":"import os\nimport sys\nimport numpy as np\nfrom scipy.sparse import csr_matrix\nfrom scipy.sparse.csgraph import connected_components\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\nsys.setrecursionlimit(2147483647)\nINF = float(\"inf\")\nIINF = 10**18\nMOD = 10**9 + 7\nN, M = list(map(int, sys.stdin.readline().split()))\nA, B = list(zip(*[list(map(int, sys.stdin.readline().split())) for _ in range(M)]))\nA = np.array(A) - 1\nB = np.array(B) - 1\n\n\ndef is_bridge(i):\n    a = np.concatenate([A[:i], A[i + 1 :]])\n    b = np.concatenate([B[:i], B[i + 1 :]])\n    graph = csr_matrix(([True] * (M - 1), (a, b)), shape=(N, N))\n    _, components = connected_components(graph, directed=False)\n    return components.max() >= 1\n\n\nans = 0\nfor i in range(M):\n    ans += is_bridge(i)\nprint(ans)\n","code_v1_no_empty_lines":"import os\nimport sys\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\nsys.setrecursionlimit(10**9)\nINF = float(\"inf\")\nIINF = 10**18\nMOD = 10**9 + 7\n# MOD = 998244353\ndef enumerate_bridges(graph):\n    \"\"\"\n    \u6a4b\u3092\u5217\u6319\u3059\u308b\n    http:\/\/nupioca.hatenadiary.jp\/entry\/2013\/11\/03\/200006\n    :param list of (list of int) graph:\n    \"\"\"\n    N = len(graph)\n    ret_bridges = []\n    pres = [-1] * N\n    lows = [-1] * N\n    order = -1\n    for v in range(N):\n        if pres[v] >= 0:\n            continue\n        edges = [(None, v, True)]\n        while edges:\n            v, u, forward = edges.pop()\n            if forward:\n                if pres[u] >= 0:\n                    # \u3082\u3046\u6765\u305f\u3053\u3068\u304c\u3042\u308b\n                    lows[v] = min(lows[v], lows[u])\n                    continue\n                edges.append((v, u, False))\n                parent, v = v, u\n                order += 1\n                pres[v] = lows[v] = order\n                for u in graph[v]:\n                    if u == parent:\n                        continue\n                    edges.append((v, u, True))\n            else:\n                if v is None:\n                    continue\n                if lows[u] == pres[u]:\n                    ret_bridges.append((v, u))\n                lows[v] = min(lows[v], lows[u])\n    return ret_bridges\n\n\nN, M = list(map(int, sys.stdin.buffer.readline().split()))\nAB = [list(map(int, sys.stdin.buffer.readline().split())) for _ in range(M)]\ngraph = [[] for _ in range(N + 1)]\nfor a, b in AB:\n    graph[a].append(b)\n    graph[b].append(a)\nbridges = enumerate_bridges(graph)\nprint((len(bridges)))\n","code_same":false,"relative_loc_diff_percent":47.619047619,"diff":["-import numpy as np","-from scipy.sparse import csr_matrix","-from scipy.sparse.csgraph import connected_components","-sys.setrecursionlimit(2147483647)","+sys.setrecursionlimit(10**9)","-N, M = list(map(int, sys.stdin.readline().split()))","-A, B = list(zip(*[list(map(int, sys.stdin.readline().split())) for _ in range(M)]))","-A = np.array(A) - 1","-B = np.array(B) - 1","+# MOD = 998244353","+def enumerate_bridges(graph):","+    \"\"\"","+    \u6a4b\u3092\u5217\u6319\u3059\u308b","+    http:\/\/nupioca.hatenadiary.jp\/entry\/2013\/11\/03\/200006","+    :param list of (list of int) graph:","+    \"\"\"","+    N = len(graph)","+    ret_bridges = []","+    pres = [-1] * N","+    lows = [-1] * N","+    order = -1","+    for v in range(N):","+        if pres[v] >= 0:","+            continue","+        edges = [(None, v, True)]","+        while edges:","+            v, u, forward = edges.pop()","+            if forward:","+                if pres[u] >= 0:","+                    # \u3082\u3046\u6765\u305f\u3053\u3068\u304c\u3042\u308b","+                    lows[v] = min(lows[v], lows[u])","+                    continue","+                edges.append((v, u, False))","+                parent, v = v, u","+                order += 1","+                pres[v] = lows[v] = order","+                for u in graph[v]:","+                    if u == parent:","+                        continue","+                    edges.append((v, u, True))","+            else:","+                if v is None:","+                    continue","+                if lows[u] == pres[u]:","+                    ret_bridges.append((v, u))","+                lows[v] = min(lows[v], lows[u])","+    return ret_bridges","-def is_bridge(i):","-    a = np.concatenate([A[:i], A[i + 1 :]])","-    b = np.concatenate([B[:i], B[i + 1 :]])","-    graph = csr_matrix(([True] * (M - 1), (a, b)), shape=(N, N))","-    _, components = connected_components(graph, directed=False)","-    return components.max() >= 1","-","-","-ans = 0","-for i in range(M):","-    ans += is_bridge(i)","-print(ans)","+N, M = list(map(int, sys.stdin.buffer.readline().split()))","+AB = [list(map(int, sys.stdin.buffer.readline().split())) for _ in range(M)]","+graph = [[] for _ in range(N + 1)]","+for a, b in AB:","+    graph[a].append(b)","+    graph[b].append(a)","+bridges = enumerate_bridges(graph)","+print((len(bridges)))"],"diff_only_import_comment":false,"measured_runtime_v0":2.0045171101,"measured_runtime_v1":0.2124494145,"runtime_lift":9.4352677545,"key":["s425131512","s549163277"]}
{"user_id":"u018679195","problem_id":"p03162","language":"python","submission_id_v0":"s697147605","submission_id_v1":"s734272026","cpu_time_v0":243,"cpu_time_v1":200,"memory_v0":90436,"memory_v1":74632,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.7,"input":"n = int(eval(input()))\n\n\n\nfelicidade = []\n\n\n\nfor x in range(n):\n\n    felicidade.append(list(map(int,input().split())))\n\n\n\nDP = [0,0,0]\n\n\n\nif n == 1:\n\n    print((max(felicidade[0])))\n\n\n\nelse:\n\n\n\n    for x in range(3):\n\n        DP[x] = felicidade[0][x]\n\n\n\n\n\n    for dia in range(1,n):\n\n        m = [0] * 3\n\n        for x  in range(3):#As duas poss\u00edveis escolhas s\u00e3o x e y\n\n            for y  in range(3):\n\n                if x != y: #Se elas forem diferentes\n\n                    m[x] = max(m[x], DP[y] + felicidade[dia][x])\n\n        DP = m\n\n    \n\n    print((max(DP)))\n","target":"nDays = int(eval(input()))\n\n\n\ntoday = [int(x) for x in input().split()]\n\n\n\nfor i in range(nDays - 1):\n\n    tomorrow = [int(x) for x in input().split()]\n\n    tomorrow[0] += max(today[1], today[2])\n\n    tomorrow[1] += max(today[0], today[2])\n\n    tomorrow[2] += max(today[0], today[1])\n\n    today = tomorrow\n\n\n\nprint((max(today)))","code_v0_loc":27,"code_v1_loc":12,"code_v0_num_chars":557,"code_v1_num_chars":320,"code_v0_no_empty_lines":"n = int(eval(input()))\nfelicidade = []\nfor x in range(n):\n    felicidade.append(list(map(int, input().split())))\nDP = [0, 0, 0]\nif n == 1:\n    print((max(felicidade[0])))\nelse:\n    for x in range(3):\n        DP[x] = felicidade[0][x]\n    for dia in range(1, n):\n        m = [0] * 3\n        for x in range(3):  # As duas poss\u00edveis escolhas s\u00e3o x e y\n            for y in range(3):\n                if x != y:  # Se elas forem diferentes\n                    m[x] = max(m[x], DP[y] + felicidade[dia][x])\n        DP = m\n    print((max(DP)))\n","code_v1_no_empty_lines":"nDays = int(eval(input()))\ntoday = [int(x) for x in input().split()]\nfor i in range(nDays - 1):\n    tomorrow = [int(x) for x in input().split()]\n    tomorrow[0] += max(today[1], today[2])\n    tomorrow[1] += max(today[0], today[2])\n    tomorrow[2] += max(today[0], today[1])\n    today = tomorrow\nprint((max(today)))\n","code_same":false,"relative_loc_diff_percent":55.5555555556,"diff":["-n = int(eval(input()))","-felicidade = []","-for x in range(n):","-    felicidade.append(list(map(int, input().split())))","-DP = [0, 0, 0]","-if n == 1:","-    print((max(felicidade[0])))","-else:","-    for x in range(3):","-        DP[x] = felicidade[0][x]","-    for dia in range(1, n):","-        m = [0] * 3","-        for x in range(3):  # As duas poss\u00edveis escolhas s\u00e3o x e y","-            for y in range(3):","-                if x != y:  # Se elas forem diferentes","-                    m[x] = max(m[x], DP[y] + felicidade[dia][x])","-        DP = m","-    print((max(DP)))","+nDays = int(eval(input()))","+today = [int(x) for x in input().split()]","+for i in range(nDays - 1):","+    tomorrow = [int(x) for x in input().split()]","+    tomorrow[0] += max(today[1], today[2])","+    tomorrow[1] += max(today[0], today[2])","+    tomorrow[2] += max(today[0], today[1])","+    today = tomorrow","+print((max(today)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2760919194,"measured_runtime_v1":0.0735631361,"runtime_lift":3.7531287275,"key":["s697147605","s734272026"]}
{"user_id":"u654470292","problem_id":"p03828","language":"python","submission_id_v0":"s594973511","submission_id_v1":"s914422541","cpu_time_v0":386,"cpu_time_v1":305,"memory_v0":54360,"memory_v1":67304,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":20.98,"input":"import math\n\nn=int(eval(input()))\n\nwaru=10**9+7\n\n\n\nli=[]\n\nli2=[]\n\n\n\nfor i in range(2,n+1):\n\n    tmp=math.factorial(n)\n\n    flag=1\n\n    for j in range(len(li)):\n\n        if i%li[j]==0:\n\n            flag=0\n\n            break\n\n    if flag==1:\n\n        li.append(i)\n\n        li2.append(0)\n\n        while tmp%i==0:\n\n            li2[len(li)-1]+=1\n\n            tmp=tmp\/\/i\n\nans=1\n\n# print(li)\n\n# print(li2)\n\nfor i in range(len(li2)):\n\n    ans*=li2[i]+1\n\nprint((ans%waru))","target":"import sys\n\nfrom collections import *\n\nimport heapq\n\nimport math\n\nimport bisect\n\nfrom itertools import permutations,accumulate,combinations,product\n\nfrom fractions import gcd\n\ndef input():\n\n    return sys.stdin.readline()[:-1]\n\ndef ruiseki(lst):\n\n    return [0]+list(accumulate(lst))\n\nmod=pow(10,9)+7\n\nal=[chr(ord('a') + i) for i in range(26)]\n\n\n\ndef factorization(n):\n\n    arr = []\n\n    temp = n\n\n    for i in range(2, int(-(-n**0.5\/\/1))+1):\n\n        if temp%i==0:\n\n            cnt=0\n\n            while temp%i==0:\n\n                cnt+=1\n\n                temp \/\/= i\n\n            arr.append([i, cnt])\n\n    if temp!=1:\n\n        arr.append([temp, 1])\n\n    if arr==[]:\n\n        arr.append([n, 1])\n\n    return arr\n\n\n\nn=int(eval(input()))\n\nif n==1:\n\n    print((1))\n\n    exit()\n\nd=defaultdict(int)\n\nfor i in range(2,n+1):\n\n    tmp=factorization(i)\n\n    for j in tmp:\n\n        yaku,ko=j\n\n        d[yaku]+=ko\n\n# print(d)\n\nans=1\n\nfor i in list(d.values()):\n\n    ans*=i+1\n\n    ans%=mod\n\nprint(ans)","code_v0_loc":26,"code_v1_loc":46,"code_v0_num_chars":455,"code_v1_num_chars":973,"code_v0_no_empty_lines":"import math\n\nn = int(eval(input()))\nwaru = 10**9 + 7\nli = []\nli2 = []\nfor i in range(2, n + 1):\n    tmp = math.factorial(n)\n    flag = 1\n    for j in range(len(li)):\n        if i % li[j] == 0:\n            flag = 0\n            break\n    if flag == 1:\n        li.append(i)\n        li2.append(0)\n        while tmp % i == 0:\n            li2[len(li) - 1] += 1\n            tmp = tmp \/\/ i\nans = 1\n# print(li)\n# print(li2)\nfor i in range(len(li2)):\n    ans *= li2[i] + 1\nprint((ans % waru))\n","code_v1_no_empty_lines":"import sys\nfrom collections import *\nimport heapq\nimport math\nimport bisect\nfrom itertools import permutations, accumulate, combinations, product\nfrom fractions import gcd\n\n\ndef input():\n    return sys.stdin.readline()[:-1]\n\n\ndef ruiseki(lst):\n    return [0] + list(accumulate(lst))\n\n\nmod = pow(10, 9) + 7\nal = [chr(ord(\"a\") + i) for i in range(26)]\n\n\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-(n**0.5) \/\/ 1)) + 1):\n        if temp % i == 0:\n            cnt = 0\n            while temp % i == 0:\n                cnt += 1\n                temp \/\/= i\n            arr.append([i, cnt])\n    if temp != 1:\n        arr.append([temp, 1])\n    if arr == []:\n        arr.append([n, 1])\n    return arr\n\n\nn = int(eval(input()))\nif n == 1:\n    print((1))\n    exit()\nd = defaultdict(int)\nfor i in range(2, n + 1):\n    tmp = factorization(i)\n    for j in tmp:\n        yaku, ko = j\n        d[yaku] += ko\n# print(d)\nans = 1\nfor i in list(d.values()):\n    ans *= i + 1\n    ans %= mod\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":43.4782608696,"diff":["+import sys","+from collections import *","+import heapq","+import bisect","+from itertools import permutations, accumulate, combinations, product","+from fractions import gcd","+","+","+def input():","+    return sys.stdin.readline()[:-1]","+","+","+def ruiseki(lst):","+    return [0] + list(accumulate(lst))","+","+","+mod = pow(10, 9) + 7","+al = [chr(ord(\"a\") + i) for i in range(26)]","+","+","+def factorization(n):","+    arr = []","+    temp = n","+    for i in range(2, int(-(-(n**0.5) \/\/ 1)) + 1):","+        if temp % i == 0:","+            cnt = 0","+            while temp % i == 0:","+                cnt += 1","+                temp \/\/= i","+            arr.append([i, cnt])","+    if temp != 1:","+        arr.append([temp, 1])","+    if arr == []:","+        arr.append([n, 1])","+    return arr","+","-waru = 10**9 + 7","-li = []","-li2 = []","+if n == 1:","+    print((1))","+    exit()","+d = defaultdict(int)","-    tmp = math.factorial(n)","-    flag = 1","-    for j in range(len(li)):","-        if i % li[j] == 0:","-            flag = 0","-            break","-    if flag == 1:","-        li.append(i)","-        li2.append(0)","-        while tmp % i == 0:","-            li2[len(li) - 1] += 1","-            tmp = tmp \/\/ i","+    tmp = factorization(i)","+    for j in tmp:","+        yaku, ko = j","+        d[yaku] += ko","+# print(d)","-# print(li)","-# print(li2)","-for i in range(len(li2)):","-    ans *= li2[i] + 1","-print((ans % waru))","+for i in list(d.values()):","+    ans *= i + 1","+    ans %= mod","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.4593854201,"measured_runtime_v1":0.0895126674,"runtime_lift":5.1320716194,"key":["s594973511","s914422541"]}
{"user_id":"u832039789","problem_id":"p03013","language":"python","submission_id_v0":"s697210381","submission_id_v1":"s891872184","cpu_time_v0":235,"cpu_time_v1":207,"memory_v0":11656,"memory_v1":8592,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.91,"input":"n,m = list(map(int, input().split()))\n\na = [-1] + [int(eval(input())) for _ in range(m)] + [n + 1]\n\nMOD = 10 ** 9 + 7\n\n\n\nfib = [0, 1]\n\nfor i in range(100100):\n\n\tfib.append((fib[i] + fib[i + 1] % MOD))\n\n\n\nres = 1\n\nfor i in range(m + 1):\n\n\tp, q = a[i], a[i + 1]\n\n\tres = (res * fib[q - p - 1]) % MOD\n\n\n\nprint(res)","target":"n,m = list(map(int, input().split()))\n\na = [int(eval(input())) for _ in range(m)]\n\nMOD = 10 ** 9 + 7\n\n\n\n# broken[i] : i\u6bb5\u76ee\u304c\u58ca\u308c\u3066\u3044\u305f\u3089True\n\nbroken = [False] * 100100\n\nfor i in a:\n\n\tbroken[i] = True\n\n\n\n# dp[i] : i\u6bb5\u76ee\u306b\u884c\u304f\u901a\u308a\u6570\n\ndp = [0] * 100100\n\n\n\n# 0\u6bb5\u76ee\u306b\u884c\u304f\u65b9\u6cd5\u306f1\u901a\u308a\n\ndp[0] = 1\n\n\n\n# 1\u6bb5\u76ee\u304b\u3089n\u6bb5\u76ee\u306b\u3064\u3044\u3066\u8abf\u3079\u308b\n\nfor i in range(1, n + 1):\n\n\t# \u58ca\u308c\u3066\u308b\u306a\u3089\n\n\tif broken[i]:\n\n\t\t# \u305d\u306e\u6bb5\u306b\u306f\u9032\u3081\u306a\u3044\u306e\u30670\u901a\u308a\n\n\t\tdp[i] = 0\n\n\t# \u58ca\u308c\u3066\u306a\u3044\u306a\u3089\n\n\telse:\n\n\t\t# i - 1\u6bb5\u76ee\u304b\u3089\u79fb\u52d5\u53ef\u80fd (i - 1\u6bb5\u76ee\u306f, i == 0 \u306e\u3068\u304d\u306b\u306f\u306a\u3044\u306e\u3067\u5206\u5c90)\n\n\t\tif i > 0:\n\n\t\t\tdp[i] += dp[i - 1]\n\n\t\t# i - 2\u6bb5\u76ee\u304b\u3089\u79fb\u52d5\u53ef\u80fd (i - 2\u6bb5\u76ee\u306f, i == 0, 1 \u306e\u3068\u304d\u306b\u306f\u306a\u3044\u306e\u3067\u5206\u5c90)\n\n\t\tif i > 1:\n\n\t\t\tdp[i] += dp[i - 2]\n\n\tdp[i] %= MOD\n\n\n\nprint((dp[n]))","code_v0_loc":14,"code_v1_loc":32,"code_v0_num_chars":298,"code_v1_num_chars":584,"code_v0_no_empty_lines":"n, m = list(map(int, input().split()))\na = [-1] + [int(eval(input())) for _ in range(m)] + [n + 1]\nMOD = 10**9 + 7\nfib = [0, 1]\nfor i in range(100100):\n    fib.append((fib[i] + fib[i + 1] % MOD))\nres = 1\nfor i in range(m + 1):\n    p, q = a[i], a[i + 1]\n    res = (res * fib[q - p - 1]) % MOD\nprint(res)\n","code_v1_no_empty_lines":"n, m = list(map(int, input().split()))\na = [int(eval(input())) for _ in range(m)]\nMOD = 10**9 + 7\n# broken[i] : i\u6bb5\u76ee\u304c\u58ca\u308c\u3066\u3044\u305f\u3089True\nbroken = [False] * 100100\nfor i in a:\n    broken[i] = True\n# dp[i] : i\u6bb5\u76ee\u306b\u884c\u304f\u901a\u308a\u6570\ndp = [0] * 100100\n# 0\u6bb5\u76ee\u306b\u884c\u304f\u65b9\u6cd5\u306f1\u901a\u308a\ndp[0] = 1\n# 1\u6bb5\u76ee\u304b\u3089n\u6bb5\u76ee\u306b\u3064\u3044\u3066\u8abf\u3079\u308b\nfor i in range(1, n + 1):\n    # \u58ca\u308c\u3066\u308b\u306a\u3089\n    if broken[i]:\n        # \u305d\u306e\u6bb5\u306b\u306f\u9032\u3081\u306a\u3044\u306e\u30670\u901a\u308a\n        dp[i] = 0\n    # \u58ca\u308c\u3066\u306a\u3044\u306a\u3089\n    else:\n        # i - 1\u6bb5\u76ee\u304b\u3089\u79fb\u52d5\u53ef\u80fd (i - 1\u6bb5\u76ee\u306f, i == 0 \u306e\u3068\u304d\u306b\u306f\u306a\u3044\u306e\u3067\u5206\u5c90)\n        if i > 0:\n            dp[i] += dp[i - 1]\n        # i - 2\u6bb5\u76ee\u304b\u3089\u79fb\u52d5\u53ef\u80fd (i - 2\u6bb5\u76ee\u306f, i == 0, 1 \u306e\u3068\u304d\u306b\u306f\u306a\u3044\u306e\u3067\u5206\u5c90)\n        if i > 1:\n            dp[i] += dp[i - 2]\n    dp[i] %= MOD\nprint((dp[n]))\n","code_same":false,"relative_loc_diff_percent":56.25,"diff":["-a = [-1] + [int(eval(input())) for _ in range(m)] + [n + 1]","+a = [int(eval(input())) for _ in range(m)]","-fib = [0, 1]","-for i in range(100100):","-    fib.append((fib[i] + fib[i + 1] % MOD))","-res = 1","-for i in range(m + 1):","-    p, q = a[i], a[i + 1]","-    res = (res * fib[q - p - 1]) % MOD","-print(res)","+# broken[i] : i\u6bb5\u76ee\u304c\u58ca\u308c\u3066\u3044\u305f\u3089True","+broken = [False] * 100100","+for i in a:","+    broken[i] = True","+# dp[i] : i\u6bb5\u76ee\u306b\u884c\u304f\u901a\u308a\u6570","+dp = [0] * 100100","+# 0\u6bb5\u76ee\u306b\u884c\u304f\u65b9\u6cd5\u306f1\u901a\u308a","+dp[0] = 1","+# 1\u6bb5\u76ee\u304b\u3089n\u6bb5\u76ee\u306b\u3064\u3044\u3066\u8abf\u3079\u308b","+for i in range(1, n + 1):","+    # \u58ca\u308c\u3066\u308b\u306a\u3089","+    if broken[i]:","+        # \u305d\u306e\u6bb5\u306b\u306f\u9032\u3081\u306a\u3044\u306e\u30670\u901a\u308a","+        dp[i] = 0","+    # \u58ca\u308c\u3066\u306a\u3044\u306a\u3089","+    else:","+        # i - 1\u6bb5\u76ee\u304b\u3089\u79fb\u52d5\u53ef\u80fd (i - 1\u6bb5\u76ee\u306f, i == 0 \u306e\u3068\u304d\u306b\u306f\u306a\u3044\u306e\u3067\u5206\u5c90)","+        if i > 0:","+            dp[i] += dp[i - 1]","+        # i - 2\u6bb5\u76ee\u304b\u3089\u79fb\u52d5\u53ef\u80fd (i - 2\u6bb5\u76ee\u306f, i == 0, 1 \u306e\u3068\u304d\u306b\u306f\u306a\u3044\u306e\u3067\u5206\u5c90)","+        if i > 1:","+            dp[i] += dp[i - 2]","+    dp[i] %= MOD","+print((dp[n]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.5020096426,"measured_runtime_v1":0.2284468935,"runtime_lift":2.197489469,"key":["s697210381","s891872184"]}
{"user_id":"u513081876","problem_id":"p03325","language":"python","submission_id_v0":"s352799823","submission_id_v1":"s651648403","cpu_time_v0":118,"cpu_time_v1":82,"memory_v0":4148,"memory_v1":4148,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":30.51,"input":"N = int(eval(input()))\n\nA = [int(i) for i in input().split()]\n\nans = 0\n\ncheck = [0]*30\n\nfor i in range(1, 31):\n\n    check[i-1] = 2**i\n\n\n\nfor i in A:\n\n    if i % 2 == 0:\n\n        j = 0\n\n        while check[j] <= i:\n\n            if i % check[j] == 0:\n\n                add = check[j]\n\n            else:\n\n                break\n\n                \n\n            j += 1\n\n        ans += j\n\n        \n\nprint(ans)","target":"N = int(eval(input()))\n\na = [int(i) for i in input().split()]\n\nans = 0\n\n\n\nfor i in a:\n\n    while i % 2 == 0:\n\n        i \/\/= 2\n\n        ans += 1\n\nprint(ans)","code_v0_loc":20,"code_v1_loc":9,"code_v0_num_chars":394,"code_v1_num_chars":149,"code_v0_no_empty_lines":"N = int(eval(input()))\nA = [int(i) for i in input().split()]\nans = 0\ncheck = [0] * 30\nfor i in range(1, 31):\n    check[i - 1] = 2**i\nfor i in A:\n    if i % 2 == 0:\n        j = 0\n        while check[j] <= i:\n            if i % check[j] == 0:\n                add = check[j]\n            else:\n                break\n            j += 1\n        ans += j\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\na = [int(i) for i in input().split()]\nans = 0\nfor i in a:\n    while i % 2 == 0:\n        i \/\/= 2\n        ans += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":55.0,"diff":["-A = [int(i) for i in input().split()]","+a = [int(i) for i in input().split()]","-check = [0] * 30","-for i in range(1, 31):","-    check[i - 1] = 2**i","-for i in A:","-    if i % 2 == 0:","-        j = 0","-        while check[j] <= i:","-            if i % check[j] == 0:","-                add = check[j]","-            else:","-                break","-            j += 1","-        ans += j","+for i in a:","+    while i % 2 == 0:","+        i \/\/= 2","+        ans += 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.3522037606,"measured_runtime_v1":0.279608284,"runtime_lift":1.2596327819,"key":["s352799823","s651648403"]}
{"user_id":"u861466636","problem_id":"p03074","language":"python","submission_id_v0":"s859028171","submission_id_v1":"s566775006","cpu_time_v0":328,"cpu_time_v1":144,"memory_v0":17700,"memory_v1":7440,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":56.1,"input":"import numpy as np\n\n\n\nN, K = list(map(int, input().split()))\n\nS = eval(input())\n\n\n\nl = [[], []]\n\nans = []\n\nk = [int(s) for s in S]\n\nif k[0] == 0:\n\n    l[1].append(0)\n\nv0 = 1 if k[0] == 0 else 0\n\nv1 = 1 if k[0] == 1 else 0\n\nfor i in range(1, N):\n\n    if (k[i]==0) & (k[i-1]==0):\n\n        v0 += 1\n\n    elif (k[i]==1) & (k[i-1]==0):\n\n        l[0].append(v0)\n\n        v0 = 0\n\n        v1 += 1\n\n    elif (k[i]==0) & (k[i-1]==1):\n\n        l[1].append(v1)\n\n        v0 += 1\n\n        v1 = 0 \n\n    else:\n\n        v1 += 1\n\n        \n\nfor i, v in enumerate([v0, v1]):\n\n    if v > 0:\n\n        l[i].append(v)\n\n        \n\nif k[0] == 0:\n\n    l[1].append(0)\n\n\n\nif len(l[0]) <= K:\n\n    print(N)\n\n\n\nelse:\n\n    l[0].extend(np.repeat(0,K+1))\n\n    l[1].extend(np.repeat(0,K+1))\n\n    a = sum(l[0][:K]) + sum(l[1][:K+1])\n\n    ans.append(a)\n\n    for i in range(1, len(l[0])-K-1):\n\n        a -= l[0][i-1] + l[1][i-1]\n\n        a += l[0][i+K-1] + l[1][i+K]\n\n        ans.append(a)\n\n    print((max(ans)))","target":"N, K = list(map(int, input().split()))\n\nS = eval(input())\n\n \n\nl = [[], []]\n\nans = []\n\nk = [int(s) for s in S]\n\nif k[0] == 0:\n\n    l[1].append(0)\n\nv0 = 1 if k[0] == 0 else 0\n\nv1 = 1 if k[0] == 1 else 0\n\nfor i in range(1, N):\n\n    if (k[i]==0) & (k[i-1]==0):\n\n        v0 += 1\n\n    elif (k[i]==1) & (k[i-1]==0):\n\n        l[0].append(v0)\n\n        v0 = 0\n\n        v1 += 1\n\n    elif (k[i]==0) & (k[i-1]==1):\n\n        l[1].append(v1)\n\n        v0 += 1\n\n        v1 = 0 \n\n    else:\n\n        v1 += 1\n\n        \n\nfor i, v in enumerate([v0, v1]):\n\n    if v > 0:\n\n        l[i].append(v)\n\n        \n\nif k[0] == 0:\n\n    l[1].append(0)\n\n    \n\nl[0] += [0]*(K+1)\n\nl[1] += [0]*(K+1)\n\na = sum(l[0][:K]) + sum(l[1][:K+1])\n\nans.append(a)\n\nfor i in range(1, len(l[0])-K-1):\n\n    a -= l[0][i-1] + l[1][i-1]\n\n    a += l[0][i+K-1] + l[1][i+K]\n\n    ans.append(a)\n\nprint((max(ans)))","code_v0_loc":46,"code_v1_loc":40,"code_v0_num_chars":957,"code_v1_num_chars":837,"code_v0_no_empty_lines":"import numpy as np\n\nN, K = list(map(int, input().split()))\nS = eval(input())\nl = [[], []]\nans = []\nk = [int(s) for s in S]\nif k[0] == 0:\n    l[1].append(0)\nv0 = 1 if k[0] == 0 else 0\nv1 = 1 if k[0] == 1 else 0\nfor i in range(1, N):\n    if (k[i] == 0) & (k[i - 1] == 0):\n        v0 += 1\n    elif (k[i] == 1) & (k[i - 1] == 0):\n        l[0].append(v0)\n        v0 = 0\n        v1 += 1\n    elif (k[i] == 0) & (k[i - 1] == 1):\n        l[1].append(v1)\n        v0 += 1\n        v1 = 0\n    else:\n        v1 += 1\nfor i, v in enumerate([v0, v1]):\n    if v > 0:\n        l[i].append(v)\nif k[0] == 0:\n    l[1].append(0)\nif len(l[0]) <= K:\n    print(N)\nelse:\n    l[0].extend(np.repeat(0, K + 1))\n    l[1].extend(np.repeat(0, K + 1))\n    a = sum(l[0][:K]) + sum(l[1][: K + 1])\n    ans.append(a)\n    for i in range(1, len(l[0]) - K - 1):\n        a -= l[0][i - 1] + l[1][i - 1]\n        a += l[0][i + K - 1] + l[1][i + K]\n        ans.append(a)\n    print((max(ans)))\n","code_v1_no_empty_lines":"N, K = list(map(int, input().split()))\nS = eval(input())\nl = [[], []]\nans = []\nk = [int(s) for s in S]\nif k[0] == 0:\n    l[1].append(0)\nv0 = 1 if k[0] == 0 else 0\nv1 = 1 if k[0] == 1 else 0\nfor i in range(1, N):\n    if (k[i] == 0) & (k[i - 1] == 0):\n        v0 += 1\n    elif (k[i] == 1) & (k[i - 1] == 0):\n        l[0].append(v0)\n        v0 = 0\n        v1 += 1\n    elif (k[i] == 0) & (k[i - 1] == 1):\n        l[1].append(v1)\n        v0 += 1\n        v1 = 0\n    else:\n        v1 += 1\nfor i, v in enumerate([v0, v1]):\n    if v > 0:\n        l[i].append(v)\nif k[0] == 0:\n    l[1].append(0)\nl[0] += [0] * (K + 1)\nl[1] += [0] * (K + 1)\na = sum(l[0][:K]) + sum(l[1][: K + 1])\nans.append(a)\nfor i in range(1, len(l[0]) - K - 1):\n    a -= l[0][i - 1] + l[1][i - 1]\n    a += l[0][i + K - 1] + l[1][i + K]\n    ans.append(a)\nprint((max(ans)))\n","code_same":false,"relative_loc_diff_percent":13.0434782609,"diff":["-import numpy as np","-","-if len(l[0]) <= K:","-    print(N)","-else:","-    l[0].extend(np.repeat(0, K + 1))","-    l[1].extend(np.repeat(0, K + 1))","-    a = sum(l[0][:K]) + sum(l[1][: K + 1])","+l[0] += [0] * (K + 1)","+l[1] += [0] * (K + 1)","+a = sum(l[0][:K]) + sum(l[1][: K + 1])","+ans.append(a)","+for i in range(1, len(l[0]) - K - 1):","+    a -= l[0][i - 1] + l[1][i - 1]","+    a += l[0][i + K - 1] + l[1][i + K]","-    for i in range(1, len(l[0]) - K - 1):","-        a -= l[0][i - 1] + l[1][i - 1]","-        a += l[0][i + K - 1] + l[1][i + K]","-        ans.append(a)","-    print((max(ans)))","+print((max(ans)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3263938189,"measured_runtime_v1":0.209388869,"runtime_lift":6.3345956489,"key":["s859028171","s566775006"]}
{"user_id":"u513081876","problem_id":"p03845","language":"python","submission_id_v0":"s710663686","submission_id_v1":"s021252857","cpu_time_v0":28,"cpu_time_v1":17,"memory_v0":3316,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":39.29,"input":"N = int(eval(input()))\n\nT = list(map(int, input().split()))\n\nM = int(eval(input()))\n\np = []\n\nx = []\n\nans = []\n\nfor i in range(M):\n\n    p, x = list(map(int, input().split()))\n\n    ans.append(sum(T[:p-1])+x+sum(T[p:]))\n\n\n\nfor _ in ans:\n\n    print(_)","target":"N = int(eval(input()))\n\nT = list(map(int, input().split()))\n\nM = int(eval(input()))\n\nP, X, ans = [0]*M, [0]*M, []\n\nbase = sum(T)\n\n\n\nfor i in range(M):\n\n    P, X = list(map(int, input().split()))\n\n    ans.append(base-T[P-1]+X)\n\n\n\nfor i in ans:\n\n    print(i)","code_v0_loc":12,"code_v1_loc":12,"code_v0_num_chars":229,"code_v1_num_chars":238,"code_v0_no_empty_lines":"N = int(eval(input()))\nT = list(map(int, input().split()))\nM = int(eval(input()))\np = []\nx = []\nans = []\nfor i in range(M):\n    p, x = list(map(int, input().split()))\n    ans.append(sum(T[: p - 1]) + x + sum(T[p:]))\nfor _ in ans:\n    print(_)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nT = list(map(int, input().split()))\nM = int(eval(input()))\nP, X, ans = [0] * M, [0] * M, []\nbase = sum(T)\nfor i in range(M):\n    P, X = list(map(int, input().split()))\n    ans.append(base - T[P - 1] + X)\nfor i in ans:\n    print(i)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-p = []","-x = []","-ans = []","+P, X, ans = [0] * M, [0] * M, []","+base = sum(T)","-    p, x = list(map(int, input().split()))","-    ans.append(sum(T[: p - 1]) + x + sum(T[p:]))","-for _ in ans:","-    print(_)","+    P, X = list(map(int, input().split()))","+    ans.append(base - T[P - 1] + X)","+for i in ans:","+    print(i)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2214040067,"measured_runtime_v1":0.1726463588,"runtime_lift":1.2824134157,"key":["s710663686","s021252857"]}
{"user_id":"u678505520","problem_id":"p03162","language":"python","submission_id_v0":"s129714630","submission_id_v1":"s550114997","cpu_time_v0":422,"cpu_time_v1":247,"memory_v0":108028,"memory_v1":87616,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":41.47,"input":"n=int(eval(input()))\n\ndp=[[0 for i in range(3)] for i in range(n)]\n\nS=[[0 for i in range(3)] for i in range(n)]\n\ndp[0]=list(map(int,input().split()))\n\nS[0]=dp[0].copy()\n\nfor i in range(1,n):\n\n    S[i]=list(map(int,input().split()))\n\n    for j in range(3):\n\n        dp[i][j]=max(dp[i-1][j-1],dp[i-1][j-2])+S[i][j]\n\n\n\nprint((max(dp[n-1][0],dp[n-1][1],dp[n-1][2])))\n\n#dp[i][j]=i\u756a\u76ee\u306bj\u3092\u9078\u3093\u3060\u6642\u306e\u6700\u5927\u5024(j\u306fa,b,c\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3002)","target":"n=int(eval(input()))\n\ndp=[[0 for i in range(3)] for i in range(n)]\n\ndp[0]=list(map(int,input().split()))\n\nfor i in range(1,n):\n\n    S=list(map(int,input().split()))\n\n    for j in range(3):\n\n        dp[i][j]=max(dp[i-1][j-1],dp[i-1][j-2])+S[j]\n\n\n\nprint((max(dp[n-1][0],dp[n-1][1],dp[n-1][2])))\n\n#dp[i][j]=i\u756a\u76ee\u306bj\u3092\u9078\u3093\u3060\u6642\u306e\u6700\u5927\u5024(j\u306fa,b,c\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3002)","code_v0_loc":12,"code_v1_loc":10,"code_v0_num_chars":397,"code_v1_num_chars":327,"code_v0_no_empty_lines":"n = int(eval(input()))\ndp = [[0 for i in range(3)] for i in range(n)]\nS = [[0 for i in range(3)] for i in range(n)]\ndp[0] = list(map(int, input().split()))\nS[0] = dp[0].copy()\nfor i in range(1, n):\n    S[i] = list(map(int, input().split()))\n    for j in range(3):\n        dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j - 2]) + S[i][j]\nprint((max(dp[n - 1][0], dp[n - 1][1], dp[n - 1][2])))\n# dp[i][j]=i\u756a\u76ee\u306bj\u3092\u9078\u3093\u3060\u6642\u306e\u6700\u5927\u5024(j\u306fa,b,c\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3002)\n","code_v1_no_empty_lines":"n = int(eval(input()))\ndp = [[0 for i in range(3)] for i in range(n)]\ndp[0] = list(map(int, input().split()))\nfor i in range(1, n):\n    S = list(map(int, input().split()))\n    for j in range(3):\n        dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j - 2]) + S[j]\nprint((max(dp[n - 1][0], dp[n - 1][1], dp[n - 1][2])))\n# dp[i][j]=i\u756a\u76ee\u306bj\u3092\u9078\u3093\u3060\u6642\u306e\u6700\u5927\u5024(j\u306fa,b,c\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3002)\n","code_same":false,"relative_loc_diff_percent":16.6666666667,"diff":["-S = [[0 for i in range(3)] for i in range(n)]","-S[0] = dp[0].copy()","-    S[i] = list(map(int, input().split()))","+    S = list(map(int, input().split()))","-        dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j - 2]) + S[i][j]","+        dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j - 2]) + S[j]"],"diff_only_import_comment":false,"measured_runtime_v0":0.2710427818,"measured_runtime_v1":0.006285902,"runtime_lift":43.1191546405,"key":["s129714630","s550114997"]}
{"user_id":"u869919400","problem_id":"p03162","language":"python","submission_id_v0":"s203896708","submission_id_v1":"s149433895","cpu_time_v0":1653,"cpu_time_v1":675,"memory_v0":43728,"memory_v1":76760,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":59.17,"input":"import numpy as np\n\nN = int(eval(input()))\n\nL = [list(map(int, input().split())) for i in range(N)]\n\ndp = np.zeros((N, 3), dtype=int)\n\n\n\nfor i in range(N):\n\n    dp[i][0] = L[0][0] if i == 0 else max(dp[i-1][1]+L[i][0], dp[i-1][2]+L[i][0])\n\n    dp[i][1] = L[0][1] if i == 0 else max(dp[i-1][0]+L[i][1], dp[i-1][2]+L[i][1])\n\n    dp[i][2] = L[0][2] if i == 0 else max(dp[i-1][0]+L[i][2], dp[i-1][1]+L[i][2])\n\n\n\nprint((max(dp[-1])))","target":"N = int(eval(input()))\n\nabc = [list(map(int, input().split())) for i in range(N)]\n\ndp = [[0 for i in range(3)] for j in range(N+1)]\n\nfor i in range(N):\n\n    dp[i+1][0] = max(dp[i][1]+abc[i][0], dp[i][2]+abc[i][0])\n\n    dp[i+1][1] = max(dp[i][0]+abc[i][1], dp[i][2]+abc[i][1])\n\n    dp[i+1][2] = max(dp[i][0]+abc[i][2], dp[i][1]+abc[i][2])\n\nprint((max(dp[-1])))","code_v0_loc":11,"code_v1_loc":8,"code_v0_num_chars":420,"code_v1_num_chars":351,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nL = [list(map(int, input().split())) for i in range(N)]\ndp = np.zeros((N, 3), dtype=int)\nfor i in range(N):\n    dp[i][0] = (\n        L[0][0] if i == 0 else max(dp[i - 1][1] + L[i][0], dp[i - 1][2] + L[i][0])\n    )\n    dp[i][1] = (\n        L[0][1] if i == 0 else max(dp[i - 1][0] + L[i][1], dp[i - 1][2] + L[i][1])\n    )\n    dp[i][2] = (\n        L[0][2] if i == 0 else max(dp[i - 1][0] + L[i][2], dp[i - 1][1] + L[i][2])\n    )\nprint((max(dp[-1])))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nabc = [list(map(int, input().split())) for i in range(N)]\ndp = [[0 for i in range(3)] for j in range(N + 1)]\nfor i in range(N):\n    dp[i + 1][0] = max(dp[i][1] + abc[i][0], dp[i][2] + abc[i][0])\n    dp[i + 1][1] = max(dp[i][0] + abc[i][1], dp[i][2] + abc[i][1])\n    dp[i + 1][2] = max(dp[i][0] + abc[i][2], dp[i][1] + abc[i][2])\nprint((max(dp[-1])))\n","code_same":false,"relative_loc_diff_percent":27.2727272727,"diff":["-import numpy as np","-","-L = [list(map(int, input().split())) for i in range(N)]","-dp = np.zeros((N, 3), dtype=int)","+abc = [list(map(int, input().split())) for i in range(N)]","+dp = [[0 for i in range(3)] for j in range(N + 1)]","-    dp[i][0] = (","-        L[0][0] if i == 0 else max(dp[i - 1][1] + L[i][0], dp[i - 1][2] + L[i][0])","-    )","-    dp[i][1] = (","-        L[0][1] if i == 0 else max(dp[i - 1][0] + L[i][1], dp[i - 1][2] + L[i][1])","-    )","-    dp[i][2] = (","-        L[0][2] if i == 0 else max(dp[i - 1][0] + L[i][2], dp[i - 1][1] + L[i][2])","-    )","+    dp[i + 1][0] = max(dp[i][1] + abc[i][0], dp[i][2] + abc[i][0])","+    dp[i + 1][1] = max(dp[i][0] + abc[i][1], dp[i][2] + abc[i][1])","+    dp[i + 1][2] = max(dp[i][0] + abc[i][2], dp[i][1] + abc[i][2])"],"diff_only_import_comment":false,"measured_runtime_v0":1.439308491,"measured_runtime_v1":0.1934893382,"runtime_lift":7.4386966466,"key":["s203896708","s149433895"]}
{"user_id":"u581603131","problem_id":"p03796","language":"python","submission_id_v0":"s669812244","submission_id_v1":"s638032890","cpu_time_v0":230,"cpu_time_v1":41,"memory_v0":3984,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":82.17,"input":"import math\n\nN = int(eval(input()))\n\nprint((math.factorial(N)%(10**9+7)))","target":"ans=1\n\nn=int(eval(input()))\n\nfor i in range(1,n+1):\n\n    ans*=i\n\n    ans=ans%(10**9+7)\n\nprint(ans)","code_v0_loc":3,"code_v1_loc":6,"code_v0_num_chars":65,"code_v1_num_chars":92,"code_v0_no_empty_lines":"import math\n\nN = int(eval(input()))\nprint((math.factorial(N) % (10**9 + 7)))\n","code_v1_no_empty_lines":"ans = 1\nn = int(eval(input()))\nfor i in range(1, n + 1):\n    ans *= i\n    ans = ans % (10**9 + 7)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-import math","-","-N = int(eval(input()))","-print((math.factorial(N) % (10**9 + 7)))","+ans = 1","+n = int(eval(input()))","+for i in range(1, n + 1):","+    ans *= i","+    ans = ans % (10**9 + 7)","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.8658925366,"measured_runtime_v1":0.3537542467,"runtime_lift":2.4477233692,"key":["s669812244","s638032890"]}
{"user_id":"u197300773","problem_id":"p02901","language":"python","submission_id_v0":"s172477662","submission_id_v1":"s096488733","cpu_time_v0":1463,"cpu_time_v1":1316,"memory_v0":36468,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.05,"input":"def main():\n\n    import math\n\n    N,M=list(map(int,input().split()))\n\n    a=[]\n\n    for i in range(M):\n\n        tmp=list(map(int,input().split()))\n\n        tmpc=list(map(int,input().split()))\n\n        c=0\n\n        for j in range(len(tmpc)):\n\n            c+=2**(tmpc[j]-1)\n\n        tmp[1]=c\n\n        a+=[tmp]\n\n\n\n\n\n    dp=[[10**10 for j in range(2**N)] for i in range(M)]\n\n    dp[0][0]=0\n\n    dp[0][a[0][1]]=a[0][0]\n\n\n\n\n\n    for i in range(1,M):\n\n        dp[i]=dp[i-1]\n\n        for j in range(2**N):\n\n            z,p=a[i][0],a[i][1]\n\n            q=j|p\n\n            x=dp[i-1][j]+z\n\n            if dp[i][q]>x: dp[i][q]=x\n\n\n\n    ans=dp[M-1][2**N-1]\n\n    print((ans if ans<10**10 else -1))\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"n,m=list(map(int,input().split()))\n\nL=2**n\n\ncost=[0]+[10**8 for i in range(L-1)]\n\n\n\nfor i in range(m):\n\n    a,b=list(map(int,input().split()))\n\n    c=sum([2**(int(i)-1) for i in input().split()])\n\n    for j in range(L):\n\n        q=j|c\n\n        x=cost[j]+a\n\n        if cost[q]>x:\n\n            cost[q]=x\n\nprint((cost[L-1] if cost[L-1]<10**8 else -1))","code_v0_loc":32,"code_v1_loc":13,"code_v0_num_chars":718,"code_v1_num_chars":334,"code_v0_no_empty_lines":"def main():\n    import math\n\n    N, M = list(map(int, input().split()))\n    a = []\n    for i in range(M):\n        tmp = list(map(int, input().split()))\n        tmpc = list(map(int, input().split()))\n        c = 0\n        for j in range(len(tmpc)):\n            c += 2 ** (tmpc[j] - 1)\n        tmp[1] = c\n        a += [tmp]\n    dp = [[10**10 for j in range(2**N)] for i in range(M)]\n    dp[0][0] = 0\n    dp[0][a[0][1]] = a[0][0]\n    for i in range(1, M):\n        dp[i] = dp[i - 1]\n        for j in range(2**N):\n            z, p = a[i][0], a[i][1]\n            q = j | p\n            x = dp[i - 1][j] + z\n            if dp[i][q] > x:\n                dp[i][q] = x\n    ans = dp[M - 1][2**N - 1]\n    print((ans if ans < 10**10 else -1))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"n, m = list(map(int, input().split()))\nL = 2**n\ncost = [0] + [10**8 for i in range(L - 1)]\nfor i in range(m):\n    a, b = list(map(int, input().split()))\n    c = sum([2 ** (int(i) - 1) for i in input().split()])\n    for j in range(L):\n        q = j | c\n        x = cost[j] + a\n        if cost[q] > x:\n            cost[q] = x\nprint((cost[L - 1] if cost[L - 1] < 10**8 else -1))\n","code_same":false,"relative_loc_diff_percent":59.375,"diff":["-def main():","-    import math","-","-    N, M = list(map(int, input().split()))","-    a = []","-    for i in range(M):","-        tmp = list(map(int, input().split()))","-        tmpc = list(map(int, input().split()))","-        c = 0","-        for j in range(len(tmpc)):","-            c += 2 ** (tmpc[j] - 1)","-        tmp[1] = c","-        a += [tmp]","-    dp = [[10**10 for j in range(2**N)] for i in range(M)]","-    dp[0][0] = 0","-    dp[0][a[0][1]] = a[0][0]","-    for i in range(1, M):","-        dp[i] = dp[i - 1]","-        for j in range(2**N):","-            z, p = a[i][0], a[i][1]","-            q = j | p","-            x = dp[i - 1][j] + z","-            if dp[i][q] > x:","-                dp[i][q] = x","-    ans = dp[M - 1][2**N - 1]","-    print((ans if ans < 10**10 else -1))","-","-","-if __name__ == \"__main__\":","-    main()","+n, m = list(map(int, input().split()))","+L = 2**n","+cost = [0] + [10**8 for i in range(L - 1)]","+for i in range(m):","+    a, b = list(map(int, input().split()))","+    c = sum([2 ** (int(i) - 1) for i in input().split()])","+    for j in range(L):","+        q = j | c","+        x = cost[j] + a","+        if cost[q] > x:","+            cost[q] = x","+print((cost[L - 1] if cost[L - 1] < 10**8 else -1))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3366471643,"measured_runtime_v1":0.2183672116,"runtime_lift":1.5416561941,"key":["s172477662","s096488733"]}
{"user_id":"u829796346","problem_id":"p02574","language":"python","submission_id_v0":"s911286307","submission_id_v1":"s843819881","cpu_time_v0":997,"cpu_time_v1":462,"memory_v0":203940,"memory_v1":203640,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":53.66,"input":"#!\/usr\/bin\/env pypy3\n\n# N,M = map(int,sys.stdin.readline().split())\n\n# a = tuple(map(int,sys.stdin.readline().split())) # single line with multi param\n\n# a = tuple(int(sys.stdin.readline()) for _ in range(N)) # multi line with single param\n\n# a = tuple(tuple(map(int,sys.stdin.readline().rstrip().split())) for _ in range(N)) # multi line with multi param\n\n# s = sys.stdin.readline().rstrip()\n\n# N = int(sys.stdin.readline())\n\n# INF = float(\"inf\")\n\nimport math,sys\n\n\n\nn = int(sys.stdin.readline())\n\na = tuple(map(int,sys.stdin.readline().split()))\n\n#n = int(input())\n\n#a = list(map(int,input().split()))\n\ng = math.gcd(a[0],a[1])\n\nfor i in range(2,n):\n\n    g = math.gcd(g,a[i])\n\nM = max(a)\n\nacc = a[0]\n\nfor i in range(n):\n\n    acc = math.gcd(acc,a[i])\n\nif acc != 1:\n\n    print(\"not coprime\")\n\n    exit()\n\n\n\nLIMIT=max(a)\n\nminPrime = [0]*(LIMIT+1)\n\nminPrime[1] = 1\n\ndef make():\n\n    for i in range(2,LIMIT+1):\n\n        if minPrime[i] == 0:\n\n            minPrime[i] = i\n\n            #print(i)\n\n            for j in range(i+i,LIMIT+1,i):\n\n                #print(i,j)\n\n                if minPrime[j] == 0:\n\n                    minPrime[j] = i\n\nmake()\n\ndef factrial(N):\n\n     ret = []\n\n     while minPrime[N] != N:\n\n         ret.append(minPrime[N])\n\n         N = N\/\/minPrime[N]\n\n     if N != 1:\n\n         ret.append(N)\n\n     return ret\n\n\n\njudge = set([])\n\npc = True\n\n\n\npairwise = True\n\np = set() #all prime\n\n\n\nfor e in a:\n\n    if not pairwise:\n\n        break\n\n    asf = set(factrial(e))\n\n    if judge & asf != set():\n\n        pc = False\n\n    #     #pairwise = False\n\n    #     print(\"setwise coprime\")\n\n    #     exit(0)\n\n    judge |= asf\n\n# for i in a:\n\n#     if not pc:\n\n#         break\n\n#     asf = set(factrial(i))\n\n\n\n#     if judge & asf != set():\n\n#         pc = False\n\n#     judge |= asf\n\nif pc:\n\n    print(\"pairwise coprime\")\n\nelif g == 1:\n\n    print(\"setwise coprime\")\n\nelse:\n\n    print(\"not coprime\")\n","target":"#!\/usr\/bin\/env pypy3\n\n# N,M = map(int,sys.stdin.readline().split())\n\n# a = tuple(map(int,sys.stdin.readline().split())) # single line with multi param\n\n# a = tuple(int(sys.stdin.readline()) for _ in range(N)) # multi line with single param\n\n# a = tuple(tuple(map(int,sys.stdin.readline().rstrip().split())) for _ in range(N)) # multi line with multi param\n\n# s = sys.stdin.readline().rstrip()\n\n# N = int(sys.stdin.readline())\n\n# INF = float(\"inf\")\n\nimport math,sys\n\n\n\nn = int(sys.stdin.readline())\n\na = tuple(map(int,sys.stdin.readline().split()))\n\n#n = int(input())\n\n#a = list(map(int,input().split()))\n\ng = math.gcd(a[0],a[1])\n\nfor i in range(2,n):\n\n    g = math.gcd(g,a[i])\n\nM = max(a)\n\nacc = a[0]\n\nfor i in range(n):\n\n    acc = math.gcd(acc,a[i])\n\nif acc != 1:\n\n    print(\"not coprime\")\n\n    exit()\n\n\n\nLIMIT=max(a)\n\nminPrime = [0]*(LIMIT+1)\n\nminPrime[1] = 1\n\ndef make():\n\n    for i in range(2,LIMIT+1):\n\n        if minPrime[i] == 0:\n\n            minPrime[i] = i\n\n            #print(i)\n\n            for j in range(i+i,LIMIT+1,i):\n\n                #print(i,j)\n\n                if minPrime[j] == 0:\n\n                    minPrime[j] = i\n\nmake()\n\ndef factrial(N):\n\n     ret = []\n\n     while minPrime[N] != N:\n\n         ret.append(minPrime[N])\n\n         N = N\/\/minPrime[N]\n\n     if N != 1:\n\n         ret.append(N)\n\n     return ret\n\n\n\njudge = set([])\n\n\n\nfor e in a:\n\n    asf = set(factrial(e))\n\n    if judge & asf != set():\n\n        print(\"setwise coprime\")\n\n        exit()\n\n    judge |= asf\n\n    #judge = judge | asf #too slow\n\nprint(\"pairwise coprime\")\n","code_v0_loc":77,"code_v1_loc":57,"code_v0_num_chars":1904,"code_v1_num_chars":1552,"code_v0_no_empty_lines":"#!\/usr\/bin\/env pypy3\n# N,M = map(int,sys.stdin.readline().split())\n# a = tuple(map(int,sys.stdin.readline().split())) # single line with multi param\n# a = tuple(int(sys.stdin.readline()) for _ in range(N)) # multi line with single param\n# a = tuple(tuple(map(int,sys.stdin.readline().rstrip().split())) for _ in range(N)) # multi line with multi param\n# s = sys.stdin.readline().rstrip()\n# N = int(sys.stdin.readline())\n# INF = float(\"inf\")\nimport math, sys\n\nn = int(sys.stdin.readline())\na = tuple(map(int, sys.stdin.readline().split()))\n# n = int(input())\n# a = list(map(int,input().split()))\ng = math.gcd(a[0], a[1])\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\nM = max(a)\nacc = a[0]\nfor i in range(n):\n    acc = math.gcd(acc, a[i])\nif acc != 1:\n    print(\"not coprime\")\n    exit()\nLIMIT = max(a)\nminPrime = [0] * (LIMIT + 1)\nminPrime[1] = 1\n\n\ndef make():\n    for i in range(2, LIMIT + 1):\n        if minPrime[i] == 0:\n            minPrime[i] = i\n            # print(i)\n            for j in range(i + i, LIMIT + 1, i):\n                # print(i,j)\n                if minPrime[j] == 0:\n                    minPrime[j] = i\n\n\nmake()\n\n\ndef factrial(N):\n    ret = []\n    while minPrime[N] != N:\n        ret.append(minPrime[N])\n        N = N \/\/ minPrime[N]\n    if N != 1:\n        ret.append(N)\n    return ret\n\n\njudge = set([])\npc = True\npairwise = True\np = set()  # all prime\nfor e in a:\n    if not pairwise:\n        break\n    asf = set(factrial(e))\n    if judge & asf != set():\n        pc = False\n    #     #pairwise = False\n    #     print(\"setwise coprime\")\n    #     exit(0)\n    judge |= asf\n# for i in a:\n#     if not pc:\n#         break\n#     asf = set(factrial(i))\n#     if judge & asf != set():\n#         pc = False\n#     judge |= asf\nif pc:\n    print(\"pairwise coprime\")\nelif g == 1:\n    print(\"setwise coprime\")\nelse:\n    print(\"not coprime\")\n","code_v1_no_empty_lines":"#!\/usr\/bin\/env pypy3\n# N,M = map(int,sys.stdin.readline().split())\n# a = tuple(map(int,sys.stdin.readline().split())) # single line with multi param\n# a = tuple(int(sys.stdin.readline()) for _ in range(N)) # multi line with single param\n# a = tuple(tuple(map(int,sys.stdin.readline().rstrip().split())) for _ in range(N)) # multi line with multi param\n# s = sys.stdin.readline().rstrip()\n# N = int(sys.stdin.readline())\n# INF = float(\"inf\")\nimport math, sys\n\nn = int(sys.stdin.readline())\na = tuple(map(int, sys.stdin.readline().split()))\n# n = int(input())\n# a = list(map(int,input().split()))\ng = math.gcd(a[0], a[1])\nfor i in range(2, n):\n    g = math.gcd(g, a[i])\nM = max(a)\nacc = a[0]\nfor i in range(n):\n    acc = math.gcd(acc, a[i])\nif acc != 1:\n    print(\"not coprime\")\n    exit()\nLIMIT = max(a)\nminPrime = [0] * (LIMIT + 1)\nminPrime[1] = 1\n\n\ndef make():\n    for i in range(2, LIMIT + 1):\n        if minPrime[i] == 0:\n            minPrime[i] = i\n            # print(i)\n            for j in range(i + i, LIMIT + 1, i):\n                # print(i,j)\n                if minPrime[j] == 0:\n                    minPrime[j] = i\n\n\nmake()\n\n\ndef factrial(N):\n    ret = []\n    while minPrime[N] != N:\n        ret.append(minPrime[N])\n        N = N \/\/ minPrime[N]\n    if N != 1:\n        ret.append(N)\n    return ret\n\n\njudge = set([])\nfor e in a:\n    asf = set(factrial(e))\n    if judge & asf != set():\n        print(\"setwise coprime\")\n        exit()\n    judge |= asf\n    # judge = judge | asf #too slow\nprint(\"pairwise coprime\")\n","code_same":false,"relative_loc_diff_percent":25.974025974,"diff":["-pc = True","-pairwise = True","-p = set()  # all prime","-    if not pairwise:","-        break","-        pc = False","-    #     #pairwise = False","-    #     print(\"setwise coprime\")","-    #     exit(0)","+        print(\"setwise coprime\")","+        exit()","-# for i in a:","-#     if not pc:","-#         break","-#     asf = set(factrial(i))","-#     if judge & asf != set():","-#         pc = False","-#     judge |= asf","-if pc:","-    print(\"pairwise coprime\")","-elif g == 1:","-    print(\"setwise coprime\")","-else:","-    print(\"not coprime\")","+    # judge = judge | asf #too slow","+print(\"pairwise coprime\")"],"diff_only_import_comment":false,"measured_runtime_v0":0.1574707303,"measured_runtime_v1":0.0059050472,"runtime_lift":26.6671417322,"key":["s911286307","s843819881"]}
{"user_id":"u864197622","problem_id":"p02599","language":"python","submission_id_v0":"s844952454","submission_id_v1":"s272405166","cpu_time_v0":1464,"cpu_time_v1":1163,"memory_v0":208840,"memory_v1":175860,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":20.56,"input":"NN = 19\n\nXX = [0] * (2**(NN+1)-1)\n\n\n\ndef addvalue(j, x):\n\n    i = 2**NN + j - 1\n\n    while i >= 0:\n\n        XX[i] += x\n\n        i = (i-1) \/\/ 2\n\n\n\ndef rangesum(a, b):\n\n    l = a + (1<<NN)\n\n    r = b + (1<<NN)\n\n    s = 0\n\n    while l < r:\n\n        if l%2:\n\n            s += XX[l-1]\n\n            l += 1\n\n        if r%2:\n\n            r -= 1\n\n            s += XX[r-1]\n\n        l >>= 1\n\n        r >>= 1\n\n    return s\n\n\n\nN, Q = map(int, input().split())\n\nC = [int(a) - 1 for a in input().split()]\n\nX = [[] for _ in range(N)]\n\nfor i in range(Q):\n\n    l, r = map(int, input().split())\n\n    X[r-1].append((l - 1, i))\n\nlast = [-1] * N\n\nANS = [-1] * Q\n\naddvalue(1, N)\n\nfor r in range(N):\n\n    c = C[r]\n\n    addvalue(last[c] + 2, -1)\n\n    addvalue(r + 2, 1)\n\n    last[c] = r\n\n    for l, i in X[r]:\n\n        ANS[i] = rangesum(l + 2, 1 << NN)\n\n    \n\nprint(*ANS, sep = \"\\n\")\n","target":"##### https:\/\/atcoder.jp\/contests\/abc174\/submissions\/15644075 \u30921\u6b21\u5143\u5316\n\n\n\nimport sys\n\nINF = 1 << 60\n\nMOD = 10**9 + 7 # 998244353\n\nsys.setrecursionlimit(2147483647)\n\ninput = lambda:sys.stdin.buffer.readline().rstrip()\n\n \n\nclass SegmentTree(object):\n\n    def __init__(self, A, dot, unit):\n\n        n = 1 << (len(A) - 1).bit_length()\n\n        tree = [unit] * (2 * n)\n\n        for i, v in enumerate(A):\n\n            tree[i + n] = v\n\n        for i in range(n - 1, 0, -1):\n\n            tree[i] = dot(tree[i << 1], tree[i << 1 | 1])\n\n        self._n = n\n\n        self._tree = tree\n\n        self._dot = dot\n\n        self._unit = unit\n\n \n\n    def __getitem__(self, i):\n\n        return self._tree[i + self._n]\n\n \n\n    def update(self, i, v):\n\n        i += self._n\n\n        self._tree[i] = v\n\n        while i != 1:\n\n            i >>= 1\n\n            self._tree[i] = self._dot(self._tree[i << 1], self._tree[i << 1 | 1])\n\n \n\n    def add(self, i, v):\n\n        self.update(i, self[i] + v)\n\n \n\n    def sum(self, l, r):\n\n        l += self._n\n\n        r += self._n\n\n        l_val = r_val = self._unit\n\n        while l < r:\n\n            if l & 1:\n\n                l_val = self._dot(l_val, self._tree[l])\n\n                l += 1\n\n            if r & 1:\n\n                r -= 1\n\n                r_val = self._dot(self._tree[r], r_val)\n\n            l >>= 1\n\n            r >>= 1\n\n        return self._dot(l_val, r_val)\n\n\n\nfrom operator import add\n\ndef resolve():\n\n    n, q = map(int, input().split())\n\n    C = list(map(lambda x : int(x) - 1, input().split()))\n\n \n\n    A = [0] * n\n\n    used = [0] * n\n\n    for i, c in enumerate(C):\n\n        if used[c]:\n\n            continue\n\n        used[c] = 1\n\n        A[i] = 1\n\n    tree = SegmentTree(A, add, 0)\n\n \n\n    next = [-1] * n\n\n    used = [-1] * n\n\n    for i in range(n - 1, -1, -1):\n\n        c = C[i]\n\n        if used[c] != -1:\n\n            next[i] = used[c]\n\n        used[c] = i\n\n \n\n    queries = [None] * q\n\n    for i in range(q):\n\n        l, r = map(int, input().split())\n\n        queries[i] = (l - 1 << 40) + (r << 20) + i\n\n    queries.sort(reverse = 1)\n\n    \n\n    m = (1 << 20) - 1\n\n    ans = [0] * q\n\n    for l in range(n):\n\n        while queries and queries[-1] >> 40 == l:\n\n            lri = queries.pop()\n\n            l = lri >> 40\n\n            r = (lri >> 20) & m\n\n            i = lri & m\n\n            ans[i] = tree.sum(l, r)\n\n        if next[l] != -1:\n\n            tree.add(next[l], 1)\n\n \n\n    print(*ans, sep = '\\n')\n\nresolve()\n","code_v0_loc":42,"code_v1_loc":91,"code_v0_num_chars":858,"code_v1_num_chars":2458,"code_v0_no_empty_lines":"NN = 19\nXX = [0] * (2 ** (NN + 1) - 1)\n\n\ndef addvalue(j, x):\n    i = 2**NN + j - 1\n    while i >= 0:\n        XX[i] += x\n        i = (i - 1) \/\/ 2\n\n\ndef rangesum(a, b):\n    l = a + (1 << NN)\n    r = b + (1 << NN)\n    s = 0\n    while l < r:\n        if l % 2:\n            s += XX[l - 1]\n            l += 1\n        if r % 2:\n            r -= 1\n            s += XX[r - 1]\n        l >>= 1\n        r >>= 1\n    return s\n\n\nN, Q = map(int, input().split())\nC = [int(a) - 1 for a in input().split()]\nX = [[] for _ in range(N)]\nfor i in range(Q):\n    l, r = map(int, input().split())\n    X[r - 1].append((l - 1, i))\nlast = [-1] * N\nANS = [-1] * Q\naddvalue(1, N)\nfor r in range(N):\n    c = C[r]\n    addvalue(last[c] + 2, -1)\n    addvalue(r + 2, 1)\n    last[c] = r\n    for l, i in X[r]:\n        ANS[i] = rangesum(l + 2, 1 << NN)\nprint(*ANS, sep=\"\\n\")\n","code_v1_no_empty_lines":"##### https:\/\/atcoder.jp\/contests\/abc174\/submissions\/15644075 \u30921\u6b21\u5143\u5316\nimport sys\n\nINF = 1 << 60\nMOD = 10**9 + 7  # 998244353\nsys.setrecursionlimit(2147483647)\ninput = lambda: sys.stdin.buffer.readline().rstrip()\n\n\nclass SegmentTree(object):\n    def __init__(self, A, dot, unit):\n        n = 1 << (len(A) - 1).bit_length()\n        tree = [unit] * (2 * n)\n        for i, v in enumerate(A):\n            tree[i + n] = v\n        for i in range(n - 1, 0, -1):\n            tree[i] = dot(tree[i << 1], tree[i << 1 | 1])\n        self._n = n\n        self._tree = tree\n        self._dot = dot\n        self._unit = unit\n\n    def __getitem__(self, i):\n        return self._tree[i + self._n]\n\n    def update(self, i, v):\n        i += self._n\n        self._tree[i] = v\n        while i != 1:\n            i >>= 1\n            self._tree[i] = self._dot(self._tree[i << 1], self._tree[i << 1 | 1])\n\n    def add(self, i, v):\n        self.update(i, self[i] + v)\n\n    def sum(self, l, r):\n        l += self._n\n        r += self._n\n        l_val = r_val = self._unit\n        while l < r:\n            if l & 1:\n                l_val = self._dot(l_val, self._tree[l])\n                l += 1\n            if r & 1:\n                r -= 1\n                r_val = self._dot(self._tree[r], r_val)\n            l >>= 1\n            r >>= 1\n        return self._dot(l_val, r_val)\n\n\nfrom operator import add\n\n\ndef resolve():\n    n, q = map(int, input().split())\n    C = list(map(lambda x: int(x) - 1, input().split()))\n    A = [0] * n\n    used = [0] * n\n    for i, c in enumerate(C):\n        if used[c]:\n            continue\n        used[c] = 1\n        A[i] = 1\n    tree = SegmentTree(A, add, 0)\n    next = [-1] * n\n    used = [-1] * n\n    for i in range(n - 1, -1, -1):\n        c = C[i]\n        if used[c] != -1:\n            next[i] = used[c]\n        used[c] = i\n    queries = [None] * q\n    for i in range(q):\n        l, r = map(int, input().split())\n        queries[i] = (l - 1 << 40) + (r << 20) + i\n    queries.sort(reverse=1)\n    m = (1 << 20) - 1\n    ans = [0] * q\n    for l in range(n):\n        while queries and queries[-1] >> 40 == l:\n            lri = queries.pop()\n            l = lri >> 40\n            r = (lri >> 20) & m\n            i = lri & m\n            ans[i] = tree.sum(l, r)\n        if next[l] != -1:\n            tree.add(next[l], 1)\n    print(*ans, sep=\"\\n\")\n\n\nresolve()\n","code_same":false,"relative_loc_diff_percent":53.8461538462,"diff":["-NN = 19","-XX = [0] * (2 ** (NN + 1) - 1)","+##### https:\/\/atcoder.jp\/contests\/abc174\/submissions\/15644075 \u30921\u6b21\u5143\u5316","+import sys","+","+INF = 1 << 60","+MOD = 10**9 + 7  # 998244353","+sys.setrecursionlimit(2147483647)","+input = lambda: sys.stdin.buffer.readline().rstrip()","-def addvalue(j, x):","-    i = 2**NN + j - 1","-    while i >= 0:","-        XX[i] += x","-        i = (i - 1) \/\/ 2","+class SegmentTree(object):","+    def __init__(self, A, dot, unit):","+        n = 1 << (len(A) - 1).bit_length()","+        tree = [unit] * (2 * n)","+        for i, v in enumerate(A):","+            tree[i + n] = v","+        for i in range(n - 1, 0, -1):","+            tree[i] = dot(tree[i << 1], tree[i << 1 | 1])","+        self._n = n","+        self._tree = tree","+        self._dot = dot","+        self._unit = unit","+","+    def __getitem__(self, i):","+        return self._tree[i + self._n]","+","+    def update(self, i, v):","+        i += self._n","+        self._tree[i] = v","+        while i != 1:","+            i >>= 1","+            self._tree[i] = self._dot(self._tree[i << 1], self._tree[i << 1 | 1])","+","+    def add(self, i, v):","+        self.update(i, self[i] + v)","+","+    def sum(self, l, r):","+        l += self._n","+        r += self._n","+        l_val = r_val = self._unit","+        while l < r:","+            if l & 1:","+                l_val = self._dot(l_val, self._tree[l])","+                l += 1","+            if r & 1:","+                r -= 1","+                r_val = self._dot(self._tree[r], r_val)","+            l >>= 1","+            r >>= 1","+        return self._dot(l_val, r_val)","-def rangesum(a, b):","-    l = a + (1 << NN)","-    r = b + (1 << NN)","-    s = 0","-    while l < r:","-        if l % 2:","-            s += XX[l - 1]","-            l += 1","-        if r % 2:","-            r -= 1","-            s += XX[r - 1]","-        l >>= 1","-        r >>= 1","-    return s","+from operator import add","-N, Q = map(int, input().split())","-C = [int(a) - 1 for a in input().split()]","-X = [[] for _ in range(N)]","-for i in range(Q):","-    l, r = map(int, input().split())","-    X[r - 1].append((l - 1, i))","-last = [-1] * N","-ANS = [-1] * Q","-addvalue(1, N)","-for r in range(N):","-    c = C[r]","-    addvalue(last[c] + 2, -1)","-    addvalue(r + 2, 1)","-    last[c] = r","-    for l, i in X[r]:","-        ANS[i] = rangesum(l + 2, 1 << NN)","-print(*ANS, sep=\"\\n\")","+def resolve():","+    n, q = map(int, input().split())","+    C = list(map(lambda x: int(x) - 1, input().split()))","+    A = [0] * n","+    used = [0] * n","+    for i, c in enumerate(C):","+        if used[c]:","+            continue","+        used[c] = 1","+        A[i] = 1","+    tree = SegmentTree(A, add, 0)","+    next = [-1] * n","+    used = [-1] * n","+    for i in range(n - 1, -1, -1):","+        c = C[i]","+        if used[c] != -1:","+            next[i] = used[c]","+        used[c] = i","+    queries = [None] * q","+    for i in range(q):","+        l, r = map(int, input().split())","+        queries[i] = (l - 1 << 40) + (r << 20) + i","+    queries.sort(reverse=1)","+    m = (1 << 20) - 1","+    ans = [0] * q","+    for l in range(n):","+        while queries and queries[-1] >> 40 == l:","+            lri = queries.pop()","+            l = lri >> 40","+            r = (lri >> 20) & m","+            i = lri & m","+            ans[i] = tree.sum(l, r)","+        if next[l] != -1:","+            tree.add(next[l], 1)","+    print(*ans, sep=\"\\n\")","+","+","+resolve()"],"diff_only_import_comment":false,"measured_runtime_v0":0.3892713579,"measured_runtime_v1":0.2184136535,"runtime_lift":1.7822665926,"key":["s844952454","s272405166"]}
{"user_id":"u987846648","problem_id":"p02627","language":"python","submission_id_v0":"s793826721","submission_id_v1":"s875451520","cpu_time_v0":75,"cpu_time_v1":67,"memory_v0":61796,"memory_v1":61608,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.67,"input":"alph = eval(input())\n\nif alph.isupper():\n\n    print(\"A\")\n\nelse:\n\n    print(\"a\")\n","target":"a = eval(input())\n\n\n\nif a.isupper():\n\n    print(\"A\")\n\nelse:\n\n    print(\"a\")","code_v0_loc":5,"code_v1_loc":6,"code_v0_num_chars":74,"code_v1_num_chars":69,"code_v0_no_empty_lines":"alph = eval(input())\nif alph.isupper():\n    print(\"A\")\nelse:\n    print(\"a\")\n","code_v1_no_empty_lines":"a = eval(input())\nif a.isupper():\n    print(\"A\")\nelse:\n    print(\"a\")\n","code_same":false,"relative_loc_diff_percent":16.6666666667,"diff":["-alph = eval(input())","-if alph.isupper():","+a = eval(input())","+if a.isupper():"],"diff_only_import_comment":false,"measured_runtime_v0":0.1834881261,"measured_runtime_v1":0.0064039894,"runtime_lift":28.6521595413,"key":["s793826721","s875451520"]}
{"user_id":"u816872429","problem_id":"p03039","language":"python","submission_id_v0":"s871362008","submission_id_v1":"s362897835","cpu_time_v0":1991,"cpu_time_v1":98,"memory_v0":18912,"memory_v1":11052,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":95.08,"input":"n, m, k = list(map(int, input().split()))\n\n\n\nmod = 1000000007\n\ndef pow(x, n):\n\n    ret = 1\n\n    while n > 0:\n\n        if (n & 1) == 1:\n\n            ret = (ret * x) % mod\n\n        x = (x * x) % mod\n\n        n >>= 1\n\n    return ret\n\n\n\nfac = [1]\n\ninv = [1]\n\nfor i in range(1, n * m + 1):\n\n    fac.append((fac[-1] * i) % mod)\n\n    inv.append(pow(fac[i], mod - 2))\n\n\n\ndef cmb(n, k):\n\n    return (fac[n] * inv[k] * inv[n - k]) % mod\n\n\n\ndef doit(n, m, k):\n\n    ret = 0\n\n    for d in range(m):\n\n        ret = (ret + d * (m - d)) % mod\n\n    return (ret * n * n * cmb(n * m - 2, k - 2)) % mod\n\n\n\nprint(((doit(n, m, k) + doit(m, n, k)) % mod))","target":"n, m, k = list(map(int, input().split()))\n\n\n\nmod = 1000000007\n\nfac = [1]\n\nfor i in range(1, n * m + 1):\n\n    fac.append((fac[-1] * i) % mod)\n\n\n\ndef pow(x, n):\n\n    ret = 1\n\n    while n > 0:\n\n        if (n & 1) == 1:\n\n            ret = (ret * x) % mod\n\n        x = (x * x) % mod\n\n        n >>= 1\n\n    return ret\n\n\n\ndef inv(i):\n\n    return pow(fac[i], mod - 2)\n\n\n\ndef cmb(n, k):\n\n    return (fac[n] * inv(k) * inv(n - k)) % mod\n\n\n\nx = sum(d * (m - d) for d in range(m)) % mod\n\ny = sum(d * (n - d) for d in range(n)) % mod\n\n\n\nc = cmb(n * m - 2, k - 2)\n\nx = (x * n * n * c) % mod\n\ny = (y * m * m * c) % mod\n\n\n\nprint(((x + y) % mod))","code_v0_loc":28,"code_v1_loc":30,"code_v0_num_chars":624,"code_v1_num_chars":620,"code_v0_no_empty_lines":"n, m, k = list(map(int, input().split()))\nmod = 1000000007\n\n\ndef pow(x, n):\n    ret = 1\n    while n > 0:\n        if (n & 1) == 1:\n            ret = (ret * x) % mod\n        x = (x * x) % mod\n        n >>= 1\n    return ret\n\n\nfac = [1]\ninv = [1]\nfor i in range(1, n * m + 1):\n    fac.append((fac[-1] * i) % mod)\n    inv.append(pow(fac[i], mod - 2))\n\n\ndef cmb(n, k):\n    return (fac[n] * inv[k] * inv[n - k]) % mod\n\n\ndef doit(n, m, k):\n    ret = 0\n    for d in range(m):\n        ret = (ret + d * (m - d)) % mod\n    return (ret * n * n * cmb(n * m - 2, k - 2)) % mod\n\n\nprint(((doit(n, m, k) + doit(m, n, k)) % mod))\n","code_v1_no_empty_lines":"n, m, k = list(map(int, input().split()))\nmod = 1000000007\nfac = [1]\nfor i in range(1, n * m + 1):\n    fac.append((fac[-1] * i) % mod)\n\n\ndef pow(x, n):\n    ret = 1\n    while n > 0:\n        if (n & 1) == 1:\n            ret = (ret * x) % mod\n        x = (x * x) % mod\n        n >>= 1\n    return ret\n\n\ndef inv(i):\n    return pow(fac[i], mod - 2)\n\n\ndef cmb(n, k):\n    return (fac[n] * inv(k) * inv(n - k)) % mod\n\n\nx = sum(d * (m - d) for d in range(m)) % mod\ny = sum(d * (n - d) for d in range(n)) % mod\nc = cmb(n * m - 2, k - 2)\nx = (x * n * n * c) % mod\ny = (y * m * m * c) % mod\nprint(((x + y) % mod))\n","code_same":false,"relative_loc_diff_percent":6.6666666667,"diff":["+fac = [1]","+for i in range(1, n * m + 1):","+    fac.append((fac[-1] * i) % mod)","-fac = [1]","-inv = [1]","-for i in range(1, n * m + 1):","-    fac.append((fac[-1] * i) % mod)","-    inv.append(pow(fac[i], mod - 2))","+def inv(i):","+    return pow(fac[i], mod - 2)","-    return (fac[n] * inv[k] * inv[n - k]) % mod","+    return (fac[n] * inv(k) * inv(n - k)) % mod","-def doit(n, m, k):","-    ret = 0","-    for d in range(m):","-        ret = (ret + d * (m - d)) % mod","-    return (ret * n * n * cmb(n * m - 2, k - 2)) % mod","-","-","-print(((doit(n, m, k) + doit(m, n, k)) % mod))","+x = sum(d * (m - d) for d in range(m)) % mod","+y = sum(d * (n - d) for d in range(n)) % mod","+c = cmb(n * m - 2, k - 2)","+x = (x * n * n * c) % mod","+y = (y * m * m * c) % mod","+print(((x + y) % mod))"],"diff_only_import_comment":false,"measured_runtime_v0":0.7987827396,"measured_runtime_v1":0.3213389852,"runtime_lift":2.4857946791,"key":["s871362008","s362897835"]}
{"user_id":"u806976856","problem_id":"p02555","language":"python","submission_id_v0":"s550500681","submission_id_v1":"s439989437","cpu_time_v0":123,"cpu_time_v1":70,"memory_v0":9160,"memory_v1":64844,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":43.09,"input":"s=int(eval(input()))\n\np=10**9+7\n\nif s<=2:\n\n    print((0))\n\n    exit()\n\nn=s\/\/3\n\nans=0\n\ndef f(n,k,p):\n\n    if k==0:\n\n        return 1\n\n    elif k%2==0:\n\n        return (f(n,k\/\/2,p)**2)%p\n\n    else:\n\n        return (n*f(n,k-1,p))%p\n\n\n\nfor k in range(1,n+1):\n\n    a=1\n\n    b=1\n\n    for j in range(k-1):\n\n        a=(a*(s-3*k+1+j))%p\n\n        b=(b*(j+1))%p\n\n    ans=(ans+a*f(b,p-2,p))%p\n\n\n\nprint((ans%p))\n\n\n","target":"s=int(eval(input()))\n\np=10**9+7\n\nif s<=2:\n\n    print((0))\n\n    exit()\n\nn=s\/\/3\n\nans=0\n\nx=[0]*(s+1)\n\nx[0]=1\n\nx[1]=1\n\ny=[0]*(s+1)\n\n\n\nfor i in range(2,s+1):\n\n    x[i]=x[i-1]*i%p\n\n\n\ny[s]=pow(x[s],p-2,p)\n\nfor i in range(s):\n\n    y[s-1-i]=y[s-i]*(s-i)%p\n\n\n\nfor k in range(1,n+1):\n\n    ans+=x[s-2*k-1]*y[k-1]*y[s-3*k]%p\n\n\n\nprint((ans%p))\n\n\n","code_v0_loc":25,"code_v1_loc":24,"code_v0_num_chars":391,"code_v1_num_chars":322,"code_v0_no_empty_lines":"s = int(eval(input()))\np = 10**9 + 7\nif s <= 2:\n    print((0))\n    exit()\nn = s \/\/ 3\nans = 0\n\n\ndef f(n, k, p):\n    if k == 0:\n        return 1\n    elif k % 2 == 0:\n        return (f(n, k \/\/ 2, p) ** 2) % p\n    else:\n        return (n * f(n, k - 1, p)) % p\n\n\nfor k in range(1, n + 1):\n    a = 1\n    b = 1\n    for j in range(k - 1):\n        a = (a * (s - 3 * k + 1 + j)) % p\n        b = (b * (j + 1)) % p\n    ans = (ans + a * f(b, p - 2, p)) % p\nprint((ans % p))\n","code_v1_no_empty_lines":"s = int(eval(input()))\np = 10**9 + 7\nif s <= 2:\n    print((0))\n    exit()\nn = s \/\/ 3\nans = 0\nx = [0] * (s + 1)\nx[0] = 1\nx[1] = 1\ny = [0] * (s + 1)\nfor i in range(2, s + 1):\n    x[i] = x[i - 1] * i % p\ny[s] = pow(x[s], p - 2, p)\nfor i in range(s):\n    y[s - 1 - i] = y[s - i] * (s - i) % p\nfor k in range(1, n + 1):\n    ans += x[s - 2 * k - 1] * y[k - 1] * y[s - 3 * k] % p\nprint((ans % p))\n","code_same":false,"relative_loc_diff_percent":4.0,"diff":["-","-","-def f(n, k, p):","-    if k == 0:","-        return 1","-    elif k % 2 == 0:","-        return (f(n, k \/\/ 2, p) ** 2) % p","-    else:","-        return (n * f(n, k - 1, p)) % p","-","-","+x = [0] * (s + 1)","+x[0] = 1","+x[1] = 1","+y = [0] * (s + 1)","+for i in range(2, s + 1):","+    x[i] = x[i - 1] * i % p","+y[s] = pow(x[s], p - 2, p)","+for i in range(s):","+    y[s - 1 - i] = y[s - i] * (s - i) % p","-    a = 1","-    b = 1","-    for j in range(k - 1):","-        a = (a * (s - 3 * k + 1 + j)) % p","-        b = (b * (j + 1)) % p","-    ans = (ans + a * f(b, p - 2, p)) % p","+    ans += x[s - 2 * k - 1] * y[k - 1] * y[s - 3 * k] % p"],"diff_only_import_comment":false,"measured_runtime_v0":0.3091425891,"measured_runtime_v1":0.216736346,"runtime_lift":1.4263532387,"key":["s550500681","s439989437"]}
{"user_id":"u224353074","problem_id":"p03162","language":"python","submission_id_v0":"s119181910","submission_id_v1":"s673450457","cpu_time_v0":1121,"cpu_time_v1":611,"memory_v0":41852,"memory_v1":60888,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":45.5,"input":"import numpy as np\n\nN = int(eval(input()))\n\n\n\nabc = np.array([list(map(int, input().split())) for i in range(N)])\n\n\n\ndp = [[0]*3 for i in range(N+1)]\n\n\n\nfor i in range(1, N+1):\n\n    dp[i][0] = max(dp[i - 1][1] + abc[i - 1][1], dp[i - 1][2] + abc[i - 1][2])\n\n    dp[i][1] = max(dp[i - 1][0] + abc[i - 1][0], dp[i - 1][2] + abc[i - 1][2])\n\n    dp[i][2] = max(dp[i - 1][1] + abc[i - 1][1], dp[i - 1][0] + abc[i - 1][0])\n\n\n\nprint((max(dp[-1])))\n","target":"N = int(eval(input()))\n\n\n\nA = [0] * (N + 1)\n\nB = [0] * (N + 1)\n\nC = [0] * (N + 1)\n\n\n\nfor i in range(1, N + 1):\n\n    A[i], B[i], C[i] = list(map(int, input().split()))\n\n\n\ndp = [[0] * 3 for _ in range(N + 1)]\n\nfor i in range(1, N + 1):\n\n    dp[i][0] = A[i] + max(dp[i-1][1], dp[i-1][2])\n\n    dp[i][1] = B[i] + max(dp[i-1][2], dp[i-1][0])\n\n    dp[i][2] = C[i] + max(dp[i-1][0], dp[i-1][1])\n\n\n\nprint((max(dp[N])))","code_v0_loc":13,"code_v1_loc":16,"code_v0_num_chars":433,"code_v1_num_chars":395,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nabc = np.array([list(map(int, input().split())) for i in range(N)])\ndp = [[0] * 3 for i in range(N + 1)]\nfor i in range(1, N + 1):\n    dp[i][0] = max(dp[i - 1][1] + abc[i - 1][1], dp[i - 1][2] + abc[i - 1][2])\n    dp[i][1] = max(dp[i - 1][0] + abc[i - 1][0], dp[i - 1][2] + abc[i - 1][2])\n    dp[i][2] = max(dp[i - 1][1] + abc[i - 1][1], dp[i - 1][0] + abc[i - 1][0])\nprint((max(dp[-1])))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = [0] * (N + 1)\nB = [0] * (N + 1)\nC = [0] * (N + 1)\nfor i in range(1, N + 1):\n    A[i], B[i], C[i] = list(map(int, input().split()))\ndp = [[0] * 3 for _ in range(N + 1)]\nfor i in range(1, N + 1):\n    dp[i][0] = A[i] + max(dp[i - 1][1], dp[i - 1][2])\n    dp[i][1] = B[i] + max(dp[i - 1][2], dp[i - 1][0])\n    dp[i][2] = C[i] + max(dp[i - 1][0], dp[i - 1][1])\nprint((max(dp[N])))\n","code_same":false,"relative_loc_diff_percent":18.75,"diff":["-import numpy as np","-","-abc = np.array([list(map(int, input().split())) for i in range(N)])","-dp = [[0] * 3 for i in range(N + 1)]","+A = [0] * (N + 1)","+B = [0] * (N + 1)","+C = [0] * (N + 1)","-    dp[i][0] = max(dp[i - 1][1] + abc[i - 1][1], dp[i - 1][2] + abc[i - 1][2])","-    dp[i][1] = max(dp[i - 1][0] + abc[i - 1][0], dp[i - 1][2] + abc[i - 1][2])","-    dp[i][2] = max(dp[i - 1][1] + abc[i - 1][1], dp[i - 1][0] + abc[i - 1][0])","-print((max(dp[-1])))","+    A[i], B[i], C[i] = list(map(int, input().split()))","+dp = [[0] * 3 for _ in range(N + 1)]","+for i in range(1, N + 1):","+    dp[i][0] = A[i] + max(dp[i - 1][1], dp[i - 1][2])","+    dp[i][1] = B[i] + max(dp[i - 1][2], dp[i - 1][0])","+    dp[i][2] = C[i] + max(dp[i - 1][0], dp[i - 1][1])","+print((max(dp[N])))"],"diff_only_import_comment":false,"measured_runtime_v0":1.7828589861,"measured_runtime_v1":0.2997257252,"runtime_lift":5.9483015181,"key":["s119181910","s673450457"]}
{"user_id":"u729133443","problem_id":"p03371","language":"python","submission_id_v0":"s416055764","submission_id_v1":"s218640380","cpu_time_v0":227,"cpu_time_v1":17,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":92.51,"input":"a,b,c,x,y=list(map(int,input().split()));print((min(k*c*2+a*max(x-k,0)+b*max(y-k,0)for k in range(max(x,y)*3))))","target":"a,b,c,x,y=list(map(int,input().split()));print((min(x*a+y*b,2*x*c+b*max(0,y-x),2*y*c+a*max(0,x-y))))","code_v0_loc":1,"code_v1_loc":1,"code_v0_num_chars":104,"code_v1_num_chars":92,"code_v0_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nprint(\n    (\n        min(\n            k * c * 2 + a * max(x - k, 0) + b * max(y - k, 0)\n            for k in range(max(x, y) * 3)\n        )\n    )\n)\n","code_v1_no_empty_lines":"a, b, c, x, y = list(map(int, input().split()))\nprint(\n    (min(x * a + y * b, 2 * x * c + b * max(0, y - x), 2 * y * c + a * max(0, x - y)))\n)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    (","-        min(","-            k * c * 2 + a * max(x - k, 0) + b * max(y - k, 0)","-            for k in range(max(x, y) * 3)","-        )","-    )","+    (min(x * a + y * b, 2 * x * c + b * max(0, y - x), 2 * y * c + a * max(0, x - y)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.4340552337,"measured_runtime_v1":0.2001633718,"runtime_lift":2.1685048058,"key":["s416055764","s218640380"]}
{"user_id":"u207799478","problem_id":"p03545","language":"python","submission_id_v0":"s023850696","submission_id_v1":"s177314828","cpu_time_v0":173,"cpu_time_v1":104,"memory_v0":38512,"memory_v1":77244,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":39.88,"input":"import math\n\nimport string\n\nimport collections\n\nfrom collections import Counter\n\n\n\n\n\ndef readints():\n\n    return list(map(int, input().split()))\n\n\n\n\n\ndef nCr(n, r):\n\n    return math.factorial(n)\/\/(math.factorial(n-r)*math.factorial(r))\n\n\n\n\n\ndef has_duplicates2(seq):\n\n    seen = []\n\n    for item in seq:\n\n        if not(item in seen):\n\n            seen.append(item)\n\n    return len(seq) != len(seen)\n\n\n\n\n\ndef divisor(n):\n\n    divisor = []\n\n    for i in range(1, n+1):\n\n        if n % i == 0:\n\n            divisor.append(i)\n\n    return divisor\n\n\n\n\n\n# coordinates\n\ndx = [-1, -1, -1, 0, 0, 1, 1, 1]\n\ndy = [-1, 0, 1, -1, 1, -1, 0, 1]\n\na, b, c, d = list(map(int, eval(input())))\n\n#print(a, b, c, d)\n\nif a+b+c+d == 7:\n\n    print((str(a)+'+'+str(b)+'+'+str(c)+'+'+str(d)+'=7'))\n\n    exit()\n\nif a+b-c+d == 7:\n\n    print((str(a)+'+'+str(b)+'-'+str(c)+'+'+str(d)+'=7'))\n\n    exit()\n\nif a+b+c-d == 7:\n\n    print((str(a)+'+'+str(b)+'+'+str(c)+'-'+str(d)+'=7'))\n\n    exit()\n\nif a+b-c-d == 7:\n\n    print((str(a)+'+'+str(b)+'-'+str(c)+'-'+str(d)+'=7'))\n\n    exit()\n\nif a-b+c+d == 7:\n\n    print((str(a)+'-'+str(b)+'+'+str(c)+'+'+str(d)+'=7'))\n\n    exit()\n\nif a-b-c+d == 7:\n\n    print((str(a)+'-'+str(b)+'-'+str(c)+'+'+str(d)+'=7'))\n\n    exit()\n\nif a-b+c-d == 7:\n\n    print((str(a)+'-'+str(b)+'+'+str(c)+'-'+str(d)+'=7'))\n\n    exit()\n\nif a-b-c-d == 7:\n\n    print((str(a)+'-'+str(b)+'-'+str(c)+'-'+str(d)+'=7'))\n\n    exit()\n","target":"from copy import deepcopy\n\nimport math\n\nimport string\n\nimport collections\n\nfrom collections import Counter\n\nfrom collections import deque\n\nfrom decimal import Decimal\n\nimport sys\n\nimport fractions\n\nfrom operator import itemgetter\n\nimport itertools\n\nimport copy\n\n\n\n\n\ndef readints():\n\n    return list(map(int, input().split()))\n\n\n\n\n\ndef nCr(n, r):\n\n    return math.factorial(n)\/\/(math.factorial(n-r)*math.factorial(r))\n\n\n\n\n\ndef has_duplicates2(seq):\n\n    seen = []\n\n    for item in seq:\n\n        if not(item in seen):\n\n            seen.append(item)\n\n    return len(seq) != len(seen)\n\n\n\n\n\ndef divisor(n):\n\n    divisor = []\n\n    for i in range(1, n+1):\n\n        if n % i == 0:\n\n            divisor.append(i)\n\n    return divisor\n\n\n\n\n\n# coordinates\n\ndx = [-1, -1, -1, 0, 0, 1, 1, 1]\n\ndy = [-1, 0, 1, -1, 1, -1, 0, 1]\n\n\n\ns = list(map(int, input()))\n\n\n\nif s[0]+s[1]+s[2]+s[3] == 7:\n\n    print(str(s[0]), '+', str(s[1]), '+',\n\n          str(s[2]), '+', str(s[3]), '=', 7, sep='')\n\n    exit()\n\nif s[0]+s[1]-s[2]+s[3] == 7:\n\n    print(str(s[0]), '+', str(s[1]), '-', str(s[2]),\n\n          '+', str(s[3]),  '=', 7, sep='')\n\n    exit()\n\nif s[0]-s[1]+s[2]+s[3] == 7:\n\n    print(str(s[0]), '-', str(s[1]), '+', str(s[2]),\n\n          '+', str(s[3]),  '=', 7, sep='')\n\n    exit()\n\nif s[0]-s[1]-s[2]+s[3] == 7:\n\n    print(str(s[0]), '-', str(s[1]), '-', str(s[2]),\n\n          '+', str(s[3]),  '=', 7, sep='')\n\n    exit()\n\nif s[0]+s[1]+s[2]-s[3] == 7:\n\n    print(str(s[0]), '+', str(s[1]), '+', str(s[2]),\n\n          '-', str(s[3]),  '=', 7, sep='')\n\n    exit()\n\nif s[0]-s[1]-s[2]-s[3] == 7:\n\n    print(str(s[0]), '-', str(s[1]), '-', str(s[2]),\n\n          '-', str(s[3]),  '=', 7, sep='')\n\n    exit()\n\nif s[0]-s[1]+s[2]-s[3] == 7:\n\n    print(str(s[0]), '-', str(s[1]), '+', str(s[2]),\n\n          '-', str(s[3]),  '=', 7, sep='')\n\n    exit()\n\nif s[0]+s[1]-s[2]-s[3] == 7:\n\n    print(str(s[0]), '+', str(s[1]), '-', str(s[2]),\n\n          '-', str(s[3]),  '=', 7, sep='')\n\n    exit()\n","code_v0_loc":59,"code_v1_loc":76,"code_v0_num_chars":1378,"code_v1_num_chars":1963,"code_v0_no_empty_lines":"import math\nimport string\nimport collections\nfrom collections import Counter\n\n\ndef readints():\n    return list(map(int, input().split()))\n\n\ndef nCr(n, r):\n    return math.factorial(n) \/\/ (math.factorial(n - r) * math.factorial(r))\n\n\ndef has_duplicates2(seq):\n    seen = []\n    for item in seq:\n        if not (item in seen):\n            seen.append(item)\n    return len(seq) != len(seen)\n\n\ndef divisor(n):\n    divisor = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor.append(i)\n    return divisor\n\n\n# coordinates\ndx = [-1, -1, -1, 0, 0, 1, 1, 1]\ndy = [-1, 0, 1, -1, 1, -1, 0, 1]\na, b, c, d = list(map(int, eval(input())))\n# print(a, b, c, d)\nif a + b + c + d == 7:\n    print((str(a) + \"+\" + str(b) + \"+\" + str(c) + \"+\" + str(d) + \"=7\"))\n    exit()\nif a + b - c + d == 7:\n    print((str(a) + \"+\" + str(b) + \"-\" + str(c) + \"+\" + str(d) + \"=7\"))\n    exit()\nif a + b + c - d == 7:\n    print((str(a) + \"+\" + str(b) + \"+\" + str(c) + \"-\" + str(d) + \"=7\"))\n    exit()\nif a + b - c - d == 7:\n    print((str(a) + \"+\" + str(b) + \"-\" + str(c) + \"-\" + str(d) + \"=7\"))\n    exit()\nif a - b + c + d == 7:\n    print((str(a) + \"-\" + str(b) + \"+\" + str(c) + \"+\" + str(d) + \"=7\"))\n    exit()\nif a - b - c + d == 7:\n    print((str(a) + \"-\" + str(b) + \"-\" + str(c) + \"+\" + str(d) + \"=7\"))\n    exit()\nif a - b + c - d == 7:\n    print((str(a) + \"-\" + str(b) + \"+\" + str(c) + \"-\" + str(d) + \"=7\"))\n    exit()\nif a - b - c - d == 7:\n    print((str(a) + \"-\" + str(b) + \"-\" + str(c) + \"-\" + str(d) + \"=7\"))\n    exit()\n","code_v1_no_empty_lines":"from copy import deepcopy\nimport math\nimport string\nimport collections\nfrom collections import Counter\nfrom collections import deque\nfrom decimal import Decimal\nimport sys\nimport fractions\nfrom operator import itemgetter\nimport itertools\nimport copy\n\n\ndef readints():\n    return list(map(int, input().split()))\n\n\ndef nCr(n, r):\n    return math.factorial(n) \/\/ (math.factorial(n - r) * math.factorial(r))\n\n\ndef has_duplicates2(seq):\n    seen = []\n    for item in seq:\n        if not (item in seen):\n            seen.append(item)\n    return len(seq) != len(seen)\n\n\ndef divisor(n):\n    divisor = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor.append(i)\n    return divisor\n\n\n# coordinates\ndx = [-1, -1, -1, 0, 0, 1, 1, 1]\ndy = [-1, 0, 1, -1, 1, -1, 0, 1]\ns = list(map(int, input()))\nif s[0] + s[1] + s[2] + s[3] == 7:\n    print(str(s[0]), \"+\", str(s[1]), \"+\", str(s[2]), \"+\", str(s[3]), \"=\", 7, sep=\"\")\n    exit()\nif s[0] + s[1] - s[2] + s[3] == 7:\n    print(str(s[0]), \"+\", str(s[1]), \"-\", str(s[2]), \"+\", str(s[3]), \"=\", 7, sep=\"\")\n    exit()\nif s[0] - s[1] + s[2] + s[3] == 7:\n    print(str(s[0]), \"-\", str(s[1]), \"+\", str(s[2]), \"+\", str(s[3]), \"=\", 7, sep=\"\")\n    exit()\nif s[0] - s[1] - s[2] + s[3] == 7:\n    print(str(s[0]), \"-\", str(s[1]), \"-\", str(s[2]), \"+\", str(s[3]), \"=\", 7, sep=\"\")\n    exit()\nif s[0] + s[1] + s[2] - s[3] == 7:\n    print(str(s[0]), \"+\", str(s[1]), \"+\", str(s[2]), \"-\", str(s[3]), \"=\", 7, sep=\"\")\n    exit()\nif s[0] - s[1] - s[2] - s[3] == 7:\n    print(str(s[0]), \"-\", str(s[1]), \"-\", str(s[2]), \"-\", str(s[3]), \"=\", 7, sep=\"\")\n    exit()\nif s[0] - s[1] + s[2] - s[3] == 7:\n    print(str(s[0]), \"-\", str(s[1]), \"+\", str(s[2]), \"-\", str(s[3]), \"=\", 7, sep=\"\")\n    exit()\nif s[0] + s[1] - s[2] - s[3] == 7:\n    print(str(s[0]), \"+\", str(s[1]), \"-\", str(s[2]), \"-\", str(s[3]), \"=\", 7, sep=\"\")\n    exit()\n","code_same":false,"relative_loc_diff_percent":22.3684210526,"diff":["+from copy import deepcopy","+from collections import deque","+from decimal import Decimal","+import sys","+import fractions","+from operator import itemgetter","+import itertools","+import copy","-a, b, c, d = list(map(int, eval(input())))","-# print(a, b, c, d)","-if a + b + c + d == 7:","-    print((str(a) + \"+\" + str(b) + \"+\" + str(c) + \"+\" + str(d) + \"=7\"))","+s = list(map(int, input()))","+if s[0] + s[1] + s[2] + s[3] == 7:","+    print(str(s[0]), \"+\", str(s[1]), \"+\", str(s[2]), \"+\", str(s[3]), \"=\", 7, sep=\"\")","-if a + b - c + d == 7:","-    print((str(a) + \"+\" + str(b) + \"-\" + str(c) + \"+\" + str(d) + \"=7\"))","+if s[0] + s[1] - s[2] + s[3] == 7:","+    print(str(s[0]), \"+\", str(s[1]), \"-\", str(s[2]), \"+\", str(s[3]), \"=\", 7, sep=\"\")","-if a + b + c - d == 7:","-    print((str(a) + \"+\" + str(b) + \"+\" + str(c) + \"-\" + str(d) + \"=7\"))","+if s[0] - s[1] + s[2] + s[3] == 7:","+    print(str(s[0]), \"-\", str(s[1]), \"+\", str(s[2]), \"+\", str(s[3]), \"=\", 7, sep=\"\")","-if a + b - c - d == 7:","-    print((str(a) + \"+\" + str(b) + \"-\" + str(c) + \"-\" + str(d) + \"=7\"))","+if s[0] - s[1] - s[2] + s[3] == 7:","+    print(str(s[0]), \"-\", str(s[1]), \"-\", str(s[2]), \"+\", str(s[3]), \"=\", 7, sep=\"\")","-if a - b + c + d == 7:","-    print((str(a) + \"-\" + str(b) + \"+\" + str(c) + \"+\" + str(d) + \"=7\"))","+if s[0] + s[1] + s[2] - s[3] == 7:","+    print(str(s[0]), \"+\", str(s[1]), \"+\", str(s[2]), \"-\", str(s[3]), \"=\", 7, sep=\"\")","-if a - b - c + d == 7:","-    print((str(a) + \"-\" + str(b) + \"-\" + str(c) + \"+\" + str(d) + \"=7\"))","+if s[0] - s[1] - s[2] - s[3] == 7:","+    print(str(s[0]), \"-\", str(s[1]), \"-\", str(s[2]), \"-\", str(s[3]), \"=\", 7, sep=\"\")","-if a - b + c - d == 7:","-    print((str(a) + \"-\" + str(b) + \"+\" + str(c) + \"-\" + str(d) + \"=7\"))","+if s[0] - s[1] + s[2] - s[3] == 7:","+    print(str(s[0]), \"-\", str(s[1]), \"+\", str(s[2]), \"-\", str(s[3]), \"=\", 7, sep=\"\")","-if a - b - c - d == 7:","-    print((str(a) + \"-\" + str(b) + \"-\" + str(c) + \"-\" + str(d) + \"=7\"))","+if s[0] + s[1] - s[2] - s[3] == 7:","+    print(str(s[0]), \"+\", str(s[1]), \"-\", str(s[2]), \"-\", str(s[3]), \"=\", 7, sep=\"\")"],"diff_only_import_comment":false,"measured_runtime_v0":0.2534237525,"measured_runtime_v1":0.1793848307,"runtime_lift":1.4127379195,"key":["s023850696","s177314828"]}
{"user_id":"u102461423","problem_id":"p02599","language":"python","submission_id_v0":"s861498168","submission_id_v1":"s937881941","cpu_time_v0":1554,"cpu_time_v1":1387,"memory_v0":102172,"memory_v1":102328,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.75,"input":"import sys\n\nimport numpy as np\n\n\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nBsize = 700\n\n\n\ndef Mo_argsort(LR):\n\n    L = LR[:, 0]\n\n    R = LR[:, 1]\n\n    key1 = L \/\/ Bsize\n\n    key2 = np.where(key1 & 1, -R, R)\n\n    key = (key1 << 32) + key2\n\n    return np.argsort(key)\n\n\n\ndef main(A, LR):\n\n    N = len(A)\n\n    Q = len(LR)\n\n    ind = Mo_argsort(LR)\n\n    count = np.zeros(N + 1, np.int64)\n\n    ans = 0\n\n\n\n    def add(x):\n\n        nonlocal ans\n\n        if not count[x]:\n\n            ans += 1\n\n        count[x] += 1\n\n\n\n    def rem(x):\n\n        nonlocal ans\n\n        count[x] -= 1\n\n        if not count[x]:\n\n            ans -= 1\n\n\n\n    answers = np.empty(Q, np.int64)\n\n    nl, nr = 0, 0\n\n    for i in ind:\n\n        l, r = LR[i]\n\n        l -= 1\n\n        # \u533a\u9593 [l, r) \u306b\u5bfe\u3059\u308b\u8a08\u7b97\n\n        while nl > l:\n\n            nl -= 1\n\n            add(A[nl])\n\n        while nr < r:\n\n            add(A[nr])\n\n            nr += 1\n\n        while nl < l:\n\n            rem(A[nl])\n\n            nl += 1\n\n        while nr > r:\n\n            nr -= 1\n\n            rem(A[nr])\n\n        #  \u7b54\u3092\u6c42\u3081\u3066 ans[i] \u306b\u683c\u7d0d\u3059\u308b\n\n        answers[i] = ans\n\n    return answers\n\n\n\nif sys.argv[-1] == 'ONLINE_JUDGE':\n\n    import numba\n\n    from numba.pycc import CC\n\n    i4 = numba.int32\n\n    i8 = numba.int64\n\n    cc = CC('my_module')\n\n\n\n    def cc_export(f, signature):\n\n        cc.export(f.__name__, signature)(f)\n\n        return numba.njit(f)\n\n\n\n    Mo_argsort = cc_export(Mo_argsort, (i8[:,:],))\n\n    main = cc_export(main, (i8[:], i8[:, :]))\n\n    cc.compile()\n\n\n\nfrom my_module import main\n\n\n\nN, Q = list(map(int, readline().split()))\n\nA = np.array(readline().split(), np.int64)\n\nLR = np.array(read().split(), np.int64).reshape(Q, 2)\n\n\n\nans = main(A, LR)\n\nprint(('\\n'.join(map(str, ans.tolist()))))","target":"import sys\n\nimport numpy as np\n\n\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nBsize = 1000\n\n\n\ndef Mo_argsort(LR):\n\n    L = LR[:, 0]\n\n    R = LR[:, 1]\n\n    key1 = L \/\/ Bsize\n\n    key2 = np.where(key1 & 1, -R, R)\n\n    key = (key1 << 32) + key2\n\n    return np.argsort(key)\n\n\n\ndef main(A, LR):\n\n    N = len(A)\n\n    Q = len(LR)\n\n    ind = Mo_argsort(LR)\n\n    count = np.zeros(N + 1, np.int64)\n\n    ans = 0\n\n\n\n    def add(x):\n\n        nonlocal ans\n\n        if not count[x]:\n\n            ans += 1\n\n        count[x] += 1\n\n\n\n    def rem(x):\n\n        nonlocal ans\n\n        count[x] -= 1\n\n        if not count[x]:\n\n            ans -= 1\n\n\n\n    answers = np.empty(Q, np.int64)\n\n    nl, nr = 0, 0\n\n    for i in ind:\n\n        l, r = LR[i]\n\n        l -= 1\n\n        # \u533a\u9593 [l, r) \u306b\u5bfe\u3059\u308b\u8a08\u7b97\n\n        while nl > l:\n\n            nl -= 1\n\n            add(A[nl])\n\n        while nr < r:\n\n            add(A[nr])\n\n            nr += 1\n\n        while nl < l:\n\n            rem(A[nl])\n\n            nl += 1\n\n        while nr > r:\n\n            nr -= 1\n\n            rem(A[nr])\n\n        #  \u7b54\u3092\u6c42\u3081\u3066 ans[i] \u306b\u683c\u7d0d\u3059\u308b\n\n        answers[i] = ans\n\n    return answers\n\n\n\nif sys.argv[-1] == 'ONLINE_JUDGE':\n\n    import numba\n\n    from numba.pycc import CC\n\n    i4 = numba.int32\n\n    i8 = numba.int64\n\n    cc = CC('my_module')\n\n\n\n    def cc_export(f, signature):\n\n        cc.export(f.__name__, signature)(f)\n\n        return numba.njit(f)\n\n\n\n    Mo_argsort = cc_export(Mo_argsort, (i8[:,:],))\n\n    main = cc_export(main, (i8[:], i8[:, :]))\n\n    cc.compile()\n\n\n\nfrom my_module import main\n\n\n\nN, Q = list(map(int, readline().split()))\n\nA = np.array(readline().split(), np.int64)\n\nLR = np.array(read().split(), np.int64).reshape(Q, 2)\n\n\n\nans = main(A, LR)\n\nprint(('\\n'.join(map(str, ans.tolist()))))\n","code_v0_loc":81,"code_v1_loc":81,"code_v0_num_chars":1799,"code_v1_num_chars":1801,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nBsize = 700\n\n\ndef Mo_argsort(LR):\n    L = LR[:, 0]\n    R = LR[:, 1]\n    key1 = L \/\/ Bsize\n    key2 = np.where(key1 & 1, -R, R)\n    key = (key1 << 32) + key2\n    return np.argsort(key)\n\n\ndef main(A, LR):\n    N = len(A)\n    Q = len(LR)\n    ind = Mo_argsort(LR)\n    count = np.zeros(N + 1, np.int64)\n    ans = 0\n\n    def add(x):\n        nonlocal ans\n        if not count[x]:\n            ans += 1\n        count[x] += 1\n\n    def rem(x):\n        nonlocal ans\n        count[x] -= 1\n        if not count[x]:\n            ans -= 1\n\n    answers = np.empty(Q, np.int64)\n    nl, nr = 0, 0\n    for i in ind:\n        l, r = LR[i]\n        l -= 1\n        # \u533a\u9593 [l, r) \u306b\u5bfe\u3059\u308b\u8a08\u7b97\n        while nl > l:\n            nl -= 1\n            add(A[nl])\n        while nr < r:\n            add(A[nr])\n            nr += 1\n        while nl < l:\n            rem(A[nl])\n            nl += 1\n        while nr > r:\n            nr -= 1\n            rem(A[nr])\n        #  \u7b54\u3092\u6c42\u3081\u3066 ans[i] \u306b\u683c\u7d0d\u3059\u308b\n        answers[i] = ans\n    return answers\n\n\nif sys.argv[-1] == \"ONLINE_JUDGE\":\n    import numba\n    from numba.pycc import CC\n\n    i4 = numba.int32\n    i8 = numba.int64\n    cc = CC(\"my_module\")\n\n    def cc_export(f, signature):\n        cc.export(f.__name__, signature)(f)\n        return numba.njit(f)\n\n    Mo_argsort = cc_export(Mo_argsort, (i8[:, :],))\n    main = cc_export(main, (i8[:], i8[:, :]))\n    cc.compile()\nfrom my_module import main\n\nN, Q = list(map(int, readline().split()))\nA = np.array(readline().split(), np.int64)\nLR = np.array(read().split(), np.int64).reshape(Q, 2)\nans = main(A, LR)\nprint((\"\\n\".join(map(str, ans.tolist()))))\n","code_v1_no_empty_lines":"import sys\nimport numpy as np\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nBsize = 1000\n\n\ndef Mo_argsort(LR):\n    L = LR[:, 0]\n    R = LR[:, 1]\n    key1 = L \/\/ Bsize\n    key2 = np.where(key1 & 1, -R, R)\n    key = (key1 << 32) + key2\n    return np.argsort(key)\n\n\ndef main(A, LR):\n    N = len(A)\n    Q = len(LR)\n    ind = Mo_argsort(LR)\n    count = np.zeros(N + 1, np.int64)\n    ans = 0\n\n    def add(x):\n        nonlocal ans\n        if not count[x]:\n            ans += 1\n        count[x] += 1\n\n    def rem(x):\n        nonlocal ans\n        count[x] -= 1\n        if not count[x]:\n            ans -= 1\n\n    answers = np.empty(Q, np.int64)\n    nl, nr = 0, 0\n    for i in ind:\n        l, r = LR[i]\n        l -= 1\n        # \u533a\u9593 [l, r) \u306b\u5bfe\u3059\u308b\u8a08\u7b97\n        while nl > l:\n            nl -= 1\n            add(A[nl])\n        while nr < r:\n            add(A[nr])\n            nr += 1\n        while nl < l:\n            rem(A[nl])\n            nl += 1\n        while nr > r:\n            nr -= 1\n            rem(A[nr])\n        #  \u7b54\u3092\u6c42\u3081\u3066 ans[i] \u306b\u683c\u7d0d\u3059\u308b\n        answers[i] = ans\n    return answers\n\n\nif sys.argv[-1] == \"ONLINE_JUDGE\":\n    import numba\n    from numba.pycc import CC\n\n    i4 = numba.int32\n    i8 = numba.int64\n    cc = CC(\"my_module\")\n\n    def cc_export(f, signature):\n        cc.export(f.__name__, signature)(f)\n        return numba.njit(f)\n\n    Mo_argsort = cc_export(Mo_argsort, (i8[:, :],))\n    main = cc_export(main, (i8[:], i8[:, :]))\n    cc.compile()\nfrom my_module import main\n\nN, Q = list(map(int, readline().split()))\nA = np.array(readline().split(), np.int64)\nLR = np.array(read().split(), np.int64).reshape(Q, 2)\nans = main(A, LR)\nprint((\"\\n\".join(map(str, ans.tolist()))))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-Bsize = 700","+Bsize = 1000"],"diff_only_import_comment":false,"measured_runtime_v0":2.3248852704,"measured_runtime_v1":1.8262778948,"runtime_lift":1.2730183489,"key":["s861498168","s937881941"]}
{"user_id":"u064408584","problem_id":"p03723","language":"python","submission_id_v0":"s414644536","submission_id_v1":"s610159769","cpu_time_v0":146,"cpu_time_v1":26,"memory_v0":2940,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":82.19,"input":"a,b,c=list(map(int, input().split()))\n\nd=0\n\nwhile d<10**5:\n\n    if a%2==1 or b%2==1 or c%2==1:break\n\n    a,b,c=b\/2+c\/2,a\/2+c\/2,a\/2+b\/2\n\n    d+=1\n\nelse:d=-1\n\nprint(d)","target":"a,b,c=list(map(int, input().split()))\n\nans=0\n\nwhile a%2==0 and b%2==0 and c%2==0 and ans<10000:\n\n    a,b,c=b\/\/2+c\/\/2,a\/\/2+c\/\/2,a\/\/2+b\/\/2\n\n    ans+=1\n\nif ans==10000:ans=-1\n\nprint(ans)","code_v0_loc":8,"code_v1_loc":7,"code_v0_num_chars":159,"code_v1_num_chars":176,"code_v0_no_empty_lines":"a, b, c = list(map(int, input().split()))\nd = 0\nwhile d < 10**5:\n    if a % 2 == 1 or b % 2 == 1 or c % 2 == 1:\n        break\n    a, b, c = b \/ 2 + c \/ 2, a \/ 2 + c \/ 2, a \/ 2 + b \/ 2\n    d += 1\nelse:\n    d = -1\nprint(d)\n","code_v1_no_empty_lines":"a, b, c = list(map(int, input().split()))\nans = 0\nwhile a % 2 == 0 and b % 2 == 0 and c % 2 == 0 and ans < 10000:\n    a, b, c = b \/\/ 2 + c \/\/ 2, a \/\/ 2 + c \/\/ 2, a \/\/ 2 + b \/\/ 2\n    ans += 1\nif ans == 10000:\n    ans = -1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-d = 0","-while d < 10**5:","-    if a % 2 == 1 or b % 2 == 1 or c % 2 == 1:","-        break","-    a, b, c = b \/ 2 + c \/ 2, a \/ 2 + c \/ 2, a \/ 2 + b \/ 2","-    d += 1","-else:","-    d = -1","-print(d)","+ans = 0","+while a % 2 == 0 and b % 2 == 0 and c % 2 == 0 and ans < 10000:","+    a, b, c = b \/\/ 2 + c \/\/ 2, a \/\/ 2 + c \/\/ 2, a \/\/ 2 + b \/\/ 2","+    ans += 1","+if ans == 10000:","+    ans = -1","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.5153860836,"measured_runtime_v1":0.3941329796,"runtime_lift":1.307645161,"key":["s414644536","s610159769"]}
{"user_id":"u179169725","problem_id":"p03013","language":"python","submission_id_v0":"s062412783","submission_id_v1":"s752380372","cpu_time_v0":334,"cpu_time_v1":193,"memory_v0":19904,"memory_v1":7668,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":42.22,"input":"# https:\/\/atcoder.jp\/contests\/abc129\/tasks\/abc129_c\n\n# \u5178\u578b\u7684\u306aDP\n\n\n\nMOD = 10**9 + 7\n\nimport numpy as np\n\n# dp[i]\u3092i\u6bb5\u76ee\u307e\u3067\u306e\u901a\u308a\u306e\u6570\u3068\u3059\u308b\u3002\n\nN, M = list(map(int, input().split()))\n\nto_zero = np.full((N + 1), False).tolist()\n\nfor _ in range(M):\n\n    to_zero[int(eval(input()))] = True  # \u5e8a\u304c\u629c\u3051\u3066\u3044\u308b\u3068\u3053\u308d\n\n\n\n# dp\u30c6\u30fc\u30d6\u30eb\u306e\u7528\u610f\n\ndp = np.full((N + 1), -1).tolist()\n\ndp[0] = 1\n\ndp[1] = 0 if to_zero[1] else 1\n\nfor i in range(2, N + 1):\n\n    dp[i] = 0 if to_zero[i] else dp[i - 2] + dp[i - 1]\n\n    if dp[i] > MOD:\n\n        dp[i] %= MOD\n\n\n\nprint((dp[-1]))\n","target":"# https:\/\/atcoder.jp\/contests\/abc129\/tasks\/abc129_c\n\n# \u5178\u578b\u7684\u306aDP\n\n\n\n\n\ndef full(shape, full_value):\n\n    if isinstance(shape, tuple):\n\n        NotImplementedError()\n\n    else:\n\n        return [full_value] * shape\n\n\n\n\n\nMOD = 10**9 + 7\n\n# dp[i]\u3092i\u6bb5\u76ee\u307e\u3067\u306e\u901a\u308a\u306e\u6570\u3068\u3059\u308b\u3002\n\nN, M = list(map(int, input().split()))\n\nto_zero = full((N + 1), False)\n\nfor _ in range(M):\n\n    to_zero[int(eval(input()))] = True  # \u5e8a\u304c\u629c\u3051\u3066\u3044\u308b\u3068\u3053\u308d\n\n\n\n# dp\u30c6\u30fc\u30d6\u30eb\u306e\u7528\u610f\n\ndp = full((N + 1), -1)\n\ndp[0] = 1\n\ndp[1] = 0 if to_zero[1] else 1\n\nfor i in range(2, N + 1):\n\n    dp[i] = 0 if to_zero[i] else dp[i - 2] + dp[i - 1]\n\n    if dp[i] > MOD:\n\n        dp[i] %= MOD\n\n\n\nprint((dp[-1]))\n","code_v0_loc":21,"code_v1_loc":28,"code_v0_num_chars":514,"code_v1_num_chars":619,"code_v0_no_empty_lines":"# https:\/\/atcoder.jp\/contests\/abc129\/tasks\/abc129_c\n# \u5178\u578b\u7684\u306aDP\nMOD = 10**9 + 7\nimport numpy as np\n\n# dp[i]\u3092i\u6bb5\u76ee\u307e\u3067\u306e\u901a\u308a\u306e\u6570\u3068\u3059\u308b\u3002\nN, M = list(map(int, input().split()))\nto_zero = np.full((N + 1), False).tolist()\nfor _ in range(M):\n    to_zero[int(eval(input()))] = True  # \u5e8a\u304c\u629c\u3051\u3066\u3044\u308b\u3068\u3053\u308d\n# dp\u30c6\u30fc\u30d6\u30eb\u306e\u7528\u610f\ndp = np.full((N + 1), -1).tolist()\ndp[0] = 1\ndp[1] = 0 if to_zero[1] else 1\nfor i in range(2, N + 1):\n    dp[i] = 0 if to_zero[i] else dp[i - 2] + dp[i - 1]\n    if dp[i] > MOD:\n        dp[i] %= MOD\nprint((dp[-1]))\n","code_v1_no_empty_lines":"# https:\/\/atcoder.jp\/contests\/abc129\/tasks\/abc129_c\n# \u5178\u578b\u7684\u306aDP\ndef full(shape, full_value):\n    if isinstance(shape, tuple):\n        NotImplementedError()\n    else:\n        return [full_value] * shape\n\n\nMOD = 10**9 + 7\n# dp[i]\u3092i\u6bb5\u76ee\u307e\u3067\u306e\u901a\u308a\u306e\u6570\u3068\u3059\u308b\u3002\nN, M = list(map(int, input().split()))\nto_zero = full((N + 1), False)\nfor _ in range(M):\n    to_zero[int(eval(input()))] = True  # \u5e8a\u304c\u629c\u3051\u3066\u3044\u308b\u3068\u3053\u308d\n# dp\u30c6\u30fc\u30d6\u30eb\u306e\u7528\u610f\ndp = full((N + 1), -1)\ndp[0] = 1\ndp[1] = 0 if to_zero[1] else 1\nfor i in range(2, N + 1):\n    dp[i] = 0 if to_zero[i] else dp[i - 2] + dp[i - 1]\n    if dp[i] > MOD:\n        dp[i] %= MOD\nprint((dp[-1]))\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["+def full(shape, full_value):","+    if isinstance(shape, tuple):","+        NotImplementedError()","+    else:","+        return [full_value] * shape","+","+","-import numpy as np","-","-to_zero = np.full((N + 1), False).tolist()","+to_zero = full((N + 1), False)","-dp = np.full((N + 1), -1).tolist()","+dp = full((N + 1), -1)"],"diff_only_import_comment":false,"measured_runtime_v0":1.3572561545,"measured_runtime_v1":0.1989456849,"runtime_lift":6.8222447503,"key":["s062412783","s752380372"]}
{"user_id":"u341087021","problem_id":"p03720","language":"python","submission_id_v0":"s071290860","submission_id_v1":"s320305187","cpu_time_v0":316,"cpu_time_v1":17,"memory_v0":21660,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":94.62,"input":"import sys\n\nimport numpy as np\n\nn,m = [int(x) for x in sys.stdin.readline().split()]\n\nr = np.zeros(n)\n\nfor i in range(m):\n\n\ta, b = [int(x) for x in sys.stdin.readline().split()]\n\n\tr[a-1] += 1\n\n\tr[b-1] += 1\n\nfor i in range(n):\n\n\tprint((int(r[i])))","target":"import sys\n\nn,m = [int(x) for x in sys.stdin.readline().split()]\n\nr = [0]*n\n\nfor _ in range(m):\n\n\ta, b = [int(x) for x in sys.stdin.readline().split()]\n\n\tr[a-1] += 1\n\n\tr[b-1] += 1\n\nfor i in r:\n\n\tprint(i)","code_v0_loc":10,"code_v1_loc":9,"code_v0_num_chars":244,"code_v1_num_chars":203,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nn, m = [int(x) for x in sys.stdin.readline().split()]\nr = np.zeros(n)\nfor i in range(m):\n    a, b = [int(x) for x in sys.stdin.readline().split()]\n    r[a - 1] += 1\n    r[b - 1] += 1\nfor i in range(n):\n    print((int(r[i])))\n","code_v1_no_empty_lines":"import sys\n\nn, m = [int(x) for x in sys.stdin.readline().split()]\nr = [0] * n\nfor _ in range(m):\n    a, b = [int(x) for x in sys.stdin.readline().split()]\n    r[a - 1] += 1\n    r[b - 1] += 1\nfor i in r:\n    print(i)\n","code_same":false,"relative_loc_diff_percent":10.0,"diff":["-import numpy as np","-r = np.zeros(n)","-for i in range(m):","+r = [0] * n","+for _ in range(m):","-for i in range(n):","-    print((int(r[i])))","+for i in r:","+    print(i)"],"diff_only_import_comment":false,"measured_runtime_v0":1.5877735901,"measured_runtime_v1":0.2398138795,"runtime_lift":6.620857781,"key":["s071290860","s320305187"]}
{"user_id":"u285443936","problem_id":"p03309","language":"python","submission_id_v0":"s057200482","submission_id_v1":"s045600813","cpu_time_v0":246,"cpu_time_v1":216,"memory_v0":27232,"memory_v1":25200,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":12.2,"input":"import statistics\n\nN = int(eval(input()))\n\na = [int(i) for i in input().split()]\n\nans = 0\n\n\n\nfor i in range(1,N+1):\n\n  a[i-1] -= i\n\n\n\nb = statistics.median(a)\n\nfor i in range(N):\n\n  ans += abs(a[i]-b)\n\nprint((int(ans)))","target":"N = int(eval(input()))\n\nA = [int(i) for i in input().split()]\n\nC = [A[i]-i for i in range(N)]\n\nC.sort()\n\nans = 0\n\nmed = C[N\/\/2]\n\nfor i in range(N):\n\n  ans += abs(C[i]-med)\n\nprint(ans)","code_v0_loc":12,"code_v1_loc":9,"code_v0_num_chars":211,"code_v1_num_chars":177,"code_v0_no_empty_lines":"import statistics\n\nN = int(eval(input()))\na = [int(i) for i in input().split()]\nans = 0\nfor i in range(1, N + 1):\n    a[i - 1] -= i\nb = statistics.median(a)\nfor i in range(N):\n    ans += abs(a[i] - b)\nprint((int(ans)))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = [int(i) for i in input().split()]\nC = [A[i] - i for i in range(N)]\nC.sort()\nans = 0\nmed = C[N \/\/ 2]\nfor i in range(N):\n    ans += abs(C[i] - med)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-import statistics","-","-a = [int(i) for i in input().split()]","+A = [int(i) for i in input().split()]","+C = [A[i] - i for i in range(N)]","+C.sort()","-for i in range(1, N + 1):","-    a[i - 1] -= i","-b = statistics.median(a)","+med = C[N \/\/ 2]","-    ans += abs(a[i] - b)","-print((int(ans)))","+    ans += abs(C[i] - med)","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2933883266,"measured_runtime_v1":0.2086455548,"runtime_lift":1.406156613,"key":["s057200482","s045600813"]}
{"user_id":"u652583512","problem_id":"p03078","language":"python","submission_id_v0":"s221829319","submission_id_v1":"s354836218","cpu_time_v0":342,"cpu_time_v1":121,"memory_v0":19068,"memory_v1":8728,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":64.62,"input":"import numpy as np\n\n\n\nX, Y, Z, K = list(map(int, input().split()))\n\nA = np.array([int(i) for i in input().split()])\n\nB = np.array([int(i) for i in input().split()])\n\nC =np.array([int(i) for i in input().split()])\n\nA = -np.sort(-A) #\u8981\u30c1\u30a7\u30c3\u30af\u3084\n\nB = -np.sort(-B)\n\nC = -np.sort(-C)\n\nD = []\n\nfor i in range(min(K, X)):\n\n    for j in range(min(K, Y)):\n\n        if (i + 1) * (j + 1) > K:\n\n            break\n\n        for k in range(min(K, Z)):\n\n            if (i + 1) * (j + 1) * (k + 1) > K:\n\n                break\n\n            else:\n\n\n\n                D.append(A[i] + B[j] + C[k])\n\n\n\nX = np.array(D)\n\nX = -np.sort(-X)\n\nfor i in range(K):\n\n    print((X[i]))","target":"X, Y, Z, K = list(map(int, input().split()))\n\nA = sorted([int(i) for i in input().split()], reverse=True)\n\nB = sorted([int(i) for i in input().split()], reverse=True)\n\nC = sorted([int(i) for i in input().split()], reverse=True)\n\nD = []\n\nfor i in range(min(K, X)):\n\n    for j in range(min(K, Y)):\n\n        if (i + 1) * (j + 1) > K:\n\n            break\n\n        for k in range(min(K, Z)):\n\n            if (i + 1) * (j + 1) * (k + 1) > K:\n\n                break\n\n            else:\n\n\n\n                D.append(A[i] + B[j] + C[k])\n\n\n\nD.sort(reverse=True)\n\nfor i in range(K):\n\n    print((D[i]))","code_v0_loc":25,"code_v1_loc":19,"code_v0_num_chars":639,"code_v1_num_chars":579,"code_v0_no_empty_lines":"import numpy as np\n\nX, Y, Z, K = list(map(int, input().split()))\nA = np.array([int(i) for i in input().split()])\nB = np.array([int(i) for i in input().split()])\nC = np.array([int(i) for i in input().split()])\nA = -np.sort(-A)  # \u8981\u30c1\u30a7\u30c3\u30af\u3084\nB = -np.sort(-B)\nC = -np.sort(-C)\nD = []\nfor i in range(min(K, X)):\n    for j in range(min(K, Y)):\n        if (i + 1) * (j + 1) > K:\n            break\n        for k in range(min(K, Z)):\n            if (i + 1) * (j + 1) * (k + 1) > K:\n                break\n            else:\n                D.append(A[i] + B[j] + C[k])\nX = np.array(D)\nX = -np.sort(-X)\nfor i in range(K):\n    print((X[i]))\n","code_v1_no_empty_lines":"X, Y, Z, K = list(map(int, input().split()))\nA = sorted([int(i) for i in input().split()], reverse=True)\nB = sorted([int(i) for i in input().split()], reverse=True)\nC = sorted([int(i) for i in input().split()], reverse=True)\nD = []\nfor i in range(min(K, X)):\n    for j in range(min(K, Y)):\n        if (i + 1) * (j + 1) > K:\n            break\n        for k in range(min(K, Z)):\n            if (i + 1) * (j + 1) * (k + 1) > K:\n                break\n            else:\n                D.append(A[i] + B[j] + C[k])\nD.sort(reverse=True)\nfor i in range(K):\n    print((D[i]))\n","code_same":false,"relative_loc_diff_percent":24.0,"diff":["-import numpy as np","-","-A = np.array([int(i) for i in input().split()])","-B = np.array([int(i) for i in input().split()])","-C = np.array([int(i) for i in input().split()])","-A = -np.sort(-A)  # \u8981\u30c1\u30a7\u30c3\u30af\u3084","-B = -np.sort(-B)","-C = -np.sort(-C)","+A = sorted([int(i) for i in input().split()], reverse=True)","+B = sorted([int(i) for i in input().split()], reverse=True)","+C = sorted([int(i) for i in input().split()], reverse=True)","-X = np.array(D)","-X = -np.sort(-X)","+D.sort(reverse=True)","-    print((X[i]))","+    print((D[i]))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3790917091,"measured_runtime_v1":0.1937455821,"runtime_lift":7.1180549982,"key":["s221829319","s354836218"]}
{"user_id":"u479719434","problem_id":"p02665","language":"python","submission_id_v0":"s890279539","submission_id_v1":"s923250526","cpu_time_v0":175,"cpu_time_v1":149,"memory_v0":26380,"memory_v1":22304,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.86,"input":"n = int(eval(input()))\n\nleaves = list(map(int, input().split()))\n\n\n\nans = 0\n\nnodes_min = [0] * (n + 1)\n\nnodes_max = [0] * (n + 1)\n\nnodes_min[n] = leaves[n]\n\nnodes_max[n] = leaves[n]\n\n\n\nfor depth in range(n, 0, -1):\n\n    root_min = nodes_min[depth] \/\/ 2 + nodes_min[depth] % 2\n\n    nodes_min[depth - 1] = leaves[depth - 1] + root_min\n\n    root_max = nodes_max[depth]\n\n    nodes_max[depth - 1] = leaves[depth - 1] + root_max\n\nnodes = [0] * (n + 1)\n\nnodes[0] = 1\n\nif nodes[0] < nodes_min[0]:\n\n    print((-1))\n\nelse:\n\n    for depth in range(n):\n\n        roots = nodes[depth]-leaves[depth]\n\n        nodes[depth + 1] = min(roots * 2, nodes_max[depth + 1])\n\n        if nodes[depth+1] < nodes_min[depth+1]:\n\n            print((-1))\n\n            break\n\n    else:\n\n        print((sum(nodes)))\n","target":"n = int(eval(input()))\n\nleaves = list(map(int, input().split()))\n\n\n\nsum_leaves = [0]*(n+1)\n\nsum_leaves[0] = leaves[0]\n\nfor depth in range(n):\n\n    sum_leaves[depth+1] = sum_leaves[depth] + leaves[depth+1]\n\n\n\nans = 0\n\n\n\nroot = [None] * (n + 1)\n\nif n == 0:\n\n    root[0] = 0\n\nelse:\n\n    root[0] = 1\n\nif root[0] + leaves[0] != 1:\n\n    print((-1))\n\nelse:\n\n    for depth in range(n):\n\n        root[depth+1] = min(2*root[depth]-leaves[depth+1],\n\n                            sum_leaves[n]-sum_leaves[depth+1])\n\n        if root[depth + 1] < root[depth] - leaves[depth + 1] or root[depth+1] < 0:\n\n            print((-1))\n\n            break\n\n    else:\n\n        print((sum(root)+sum(leaves)))\n","code_v0_loc":27,"code_v1_loc":26,"code_v0_num_chars":771,"code_v1_num_chars":669,"code_v0_no_empty_lines":"n = int(eval(input()))\nleaves = list(map(int, input().split()))\nans = 0\nnodes_min = [0] * (n + 1)\nnodes_max = [0] * (n + 1)\nnodes_min[n] = leaves[n]\nnodes_max[n] = leaves[n]\nfor depth in range(n, 0, -1):\n    root_min = nodes_min[depth] \/\/ 2 + nodes_min[depth] % 2\n    nodes_min[depth - 1] = leaves[depth - 1] + root_min\n    root_max = nodes_max[depth]\n    nodes_max[depth - 1] = leaves[depth - 1] + root_max\nnodes = [0] * (n + 1)\nnodes[0] = 1\nif nodes[0] < nodes_min[0]:\n    print((-1))\nelse:\n    for depth in range(n):\n        roots = nodes[depth] - leaves[depth]\n        nodes[depth + 1] = min(roots * 2, nodes_max[depth + 1])\n        if nodes[depth + 1] < nodes_min[depth + 1]:\n            print((-1))\n            break\n    else:\n        print((sum(nodes)))\n","code_v1_no_empty_lines":"n = int(eval(input()))\nleaves = list(map(int, input().split()))\nsum_leaves = [0] * (n + 1)\nsum_leaves[0] = leaves[0]\nfor depth in range(n):\n    sum_leaves[depth + 1] = sum_leaves[depth] + leaves[depth + 1]\nans = 0\nroot = [None] * (n + 1)\nif n == 0:\n    root[0] = 0\nelse:\n    root[0] = 1\nif root[0] + leaves[0] != 1:\n    print((-1))\nelse:\n    for depth in range(n):\n        root[depth + 1] = min(\n            2 * root[depth] - leaves[depth + 1], sum_leaves[n] - sum_leaves[depth + 1]\n        )\n        if root[depth + 1] < root[depth] - leaves[depth + 1] or root[depth + 1] < 0:\n            print((-1))\n            break\n    else:\n        print((sum(root) + sum(leaves)))\n","code_same":false,"relative_loc_diff_percent":3.7037037037,"diff":["+sum_leaves = [0] * (n + 1)","+sum_leaves[0] = leaves[0]","+for depth in range(n):","+    sum_leaves[depth + 1] = sum_leaves[depth] + leaves[depth + 1]","-nodes_min = [0] * (n + 1)","-nodes_max = [0] * (n + 1)","-nodes_min[n] = leaves[n]","-nodes_max[n] = leaves[n]","-for depth in range(n, 0, -1):","-    root_min = nodes_min[depth] \/\/ 2 + nodes_min[depth] % 2","-    nodes_min[depth - 1] = leaves[depth - 1] + root_min","-    root_max = nodes_max[depth]","-    nodes_max[depth - 1] = leaves[depth - 1] + root_max","-nodes = [0] * (n + 1)","-nodes[0] = 1","-if nodes[0] < nodes_min[0]:","+root = [None] * (n + 1)","+if n == 0:","+    root[0] = 0","+else:","+    root[0] = 1","+if root[0] + leaves[0] != 1:","-        roots = nodes[depth] - leaves[depth]","-        nodes[depth + 1] = min(roots * 2, nodes_max[depth + 1])","-        if nodes[depth + 1] < nodes_min[depth + 1]:","+        root[depth + 1] = min(","+            2 * root[depth] - leaves[depth + 1], sum_leaves[n] - sum_leaves[depth + 1]","+        )","+        if root[depth + 1] < root[depth] - leaves[depth + 1] or root[depth + 1] < 0:","-        print((sum(nodes)))","+        print((sum(root) + sum(leaves)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.455775662,"measured_runtime_v1":0.2425963848,"runtime_lift":1.8787405363,"key":["s890279539","s923250526"]}
{"user_id":"u440985596","problem_id":"p03013","language":"python","submission_id_v0":"s706783355","submission_id_v1":"s449961507","cpu_time_v0":252,"cpu_time_v1":161,"memory_v0":20632,"memory_v1":7848,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":36.11,"input":"import math\n\ndef cmb(n, r, mod, g1, g2):\n\n    if ( r<0 or r>n ):\n\n        return 0\n\n    r = min(r, n-r)\n\n    return g1[n] * g2[r] * g2[n-r] % mod\n\n\n\ndef main():\n\n    N, M = list(map(int, input().split()))\n\n    A = [-1] + [int(eval(input())) for i in range(M)] + [N + 1]\n\n\n\n    mod = 10**9+7 #\u51fa\u529b\u306e\u5236\u9650\n\n    N = 10**5\n\n    g1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\n\n    g2 = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\n\n    inverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\n    for i in range( 2, N + 1 ):\n\n        g1.append( ( g1[-1] * i ) % mod )\n\n        inverse.append( ( -inverse[mod % i] * (mod\/\/i) ) % mod )\n\n        g2.append( (g2[-1] * inverse[-1]) % mod )\n\n\n\n    d = [0] * (len(A) - 1)\n\n    for i in range(len(A) - 1):\n\n        if A[i+1] - A[i] == 1:\n\n            print((0))\n\n            exit(0)\n\n        d[i] = A[i+1] - 1 - (A[i] + 1)\n\n\n\n    ans = 1\n\n    for dd in d:\n\n        if dd > 1:\n\n            tmp = 0\n\n            for j in range(dd\/\/2 + 1):\n\n                tmp += cmb(dd - j, j, mod, g1, g2)\n\n            ans *= tmp\n\n\n\n    print((ans % 1000000007))\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"def main():\n\n    N, M = list(map(int, input().split()))\n\n    A = [int(eval(input())) for i in range(M)] + [0]\n\n\n\n    a = 0\n\n    b = 1\n\n    j = 0\n\n    tmp = 0\n\n    if N == 1:\n\n        print((1))\n\n    else:\n\n        for i in range(1, N + 1):\n\n            if A[j] == i:\n\n                if tmp == 1:\n\n                    print((0))\n\n                    exit()\n\n                tmp = 1\n\n                j += 1\n\n                a = 0\n\n            else:\n\n                if tmp == 1:\n\n                    b = a + b\n\n                    a = 0\n\n                else:\n\n                    c = a + b\n\n                    a = b\n\n                    b = c\n\n                tmp = 0\n\n        print((b % 1000000007))\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":40,"code_v1_loc":32,"code_v0_num_chars":1022,"code_v1_num_chars":726,"code_v0_no_empty_lines":"import math\n\n\ndef cmb(n, r, mod, g1, g2):\n    if r < 0 or r > n:\n        return 0\n    r = min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\ndef main():\n    N, M = list(map(int, input().split()))\n    A = [-1] + [int(eval(input())) for i in range(M)] + [N + 1]\n    mod = 10**9 + 7  # \u51fa\u529b\u306e\u5236\u9650\n    N = 10**5\n    g1 = [1, 1]  # \u5143\u30c6\u30fc\u30d6\u30eb\n    g2 = [1, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\n    inverse = [0, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n    for i in range(2, N + 1):\n        g1.append((g1[-1] * i) % mod)\n        inverse.append((-inverse[mod % i] * (mod \/\/ i)) % mod)\n        g2.append((g2[-1] * inverse[-1]) % mod)\n    d = [0] * (len(A) - 1)\n    for i in range(len(A) - 1):\n        if A[i + 1] - A[i] == 1:\n            print((0))\n            exit(0)\n        d[i] = A[i + 1] - 1 - (A[i] + 1)\n    ans = 1\n    for dd in d:\n        if dd > 1:\n            tmp = 0\n            for j in range(dd \/\/ 2 + 1):\n                tmp += cmb(dd - j, j, mod, g1, g2)\n            ans *= tmp\n    print((ans % 1000000007))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def main():\n    N, M = list(map(int, input().split()))\n    A = [int(eval(input())) for i in range(M)] + [0]\n    a = 0\n    b = 1\n    j = 0\n    tmp = 0\n    if N == 1:\n        print((1))\n    else:\n        for i in range(1, N + 1):\n            if A[j] == i:\n                if tmp == 1:\n                    print((0))\n                    exit()\n                tmp = 1\n                j += 1\n                a = 0\n            else:\n                if tmp == 1:\n                    b = a + b\n                    a = 0\n                else:\n                    c = a + b\n                    a = b\n                    b = c\n                tmp = 0\n        print((b % 1000000007))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["-import math","-","-","-def cmb(n, r, mod, g1, g2):","-    if r < 0 or r > n:","-        return 0","-    r = min(r, n - r)","-    return g1[n] * g2[r] * g2[n - r] % mod","-","-","-    A = [-1] + [int(eval(input())) for i in range(M)] + [N + 1]","-    mod = 10**9 + 7  # \u51fa\u529b\u306e\u5236\u9650","-    N = 10**5","-    g1 = [1, 1]  # \u5143\u30c6\u30fc\u30d6\u30eb","-    g2 = [1, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb","-    inverse = [0, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb","-    for i in range(2, N + 1):","-        g1.append((g1[-1] * i) % mod)","-        inverse.append((-inverse[mod % i] * (mod \/\/ i)) % mod)","-        g2.append((g2[-1] * inverse[-1]) % mod)","-    d = [0] * (len(A) - 1)","-    for i in range(len(A) - 1):","-        if A[i + 1] - A[i] == 1:","-            print((0))","-            exit(0)","-        d[i] = A[i + 1] - 1 - (A[i] + 1)","-    ans = 1","-    for dd in d:","-        if dd > 1:","-            tmp = 0","-            for j in range(dd \/\/ 2 + 1):","-                tmp += cmb(dd - j, j, mod, g1, g2)","-            ans *= tmp","-    print((ans % 1000000007))","+    A = [int(eval(input())) for i in range(M)] + [0]","+    a = 0","+    b = 1","+    j = 0","+    tmp = 0","+    if N == 1:","+        print((1))","+    else:","+        for i in range(1, N + 1):","+            if A[j] == i:","+                if tmp == 1:","+                    print((0))","+                    exit()","+                tmp = 1","+                j += 1","+                a = 0","+            else:","+                if tmp == 1:","+                    b = a + b","+                    a = 0","+                else:","+                    c = a + b","+                    a = b","+                    b = c","+                tmp = 0","+        print((b % 1000000007))"],"diff_only_import_comment":false,"measured_runtime_v0":1.4844854877,"measured_runtime_v1":0.2640559788,"runtime_lift":5.621859026,"key":["s706783355","s449961507"]}
{"user_id":"u060896757","problem_id":"p02691","language":"python","submission_id_v0":"s720467562","submission_id_v1":"s807450341","cpu_time_v0":266,"cpu_time_v1":106,"memory_v0":97968,"memory_v1":92728,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":60.15,"input":"N = int(eval(input()))\n\nA = [int(i) for i in input().split()]\n\ndp = [0] * 10 ** 7\n\nans = 0\n\nfor i in range(N):\n\n    x = i + 1 - A[i]\n\n    if x >= 0:\n\n        ans += dp[x]\n\n    y = i + 1 + A[i]\n\n    if y < 10 ** 7:\n\n        dp[y] += 1\n\n\n\nprint(ans)\n","target":"N = int(eval(input()))\n\nA = [int(i) for i in input().split()]\n\nINF = 2 * 10 ** 5\n\ndp = [0] * INF\n\nans = 0\n\nfor i in range(N):\n\n    i_i_ = i + 1 - A[i]\n\n    if 0 < i_i_ < INF:\n\n        ans += dp[i_i_]\n\n    i_ = i + 1 + A[i]\n\n    if 0 < i_ < INF:\n\n        dp[i_] += 1\n\n\n\nprint(ans)","code_v0_loc":13,"code_v1_loc":14,"code_v0_num_chars":242,"code_v1_num_chars":273,"code_v0_no_empty_lines":"N = int(eval(input()))\nA = [int(i) for i in input().split()]\ndp = [0] * 10**7\nans = 0\nfor i in range(N):\n    x = i + 1 - A[i]\n    if x >= 0:\n        ans += dp[x]\n    y = i + 1 + A[i]\n    if y < 10**7:\n        dp[y] += 1\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = [int(i) for i in input().split()]\nINF = 2 * 10**5\ndp = [0] * INF\nans = 0\nfor i in range(N):\n    i_i_ = i + 1 - A[i]\n    if 0 < i_i_ < INF:\n        ans += dp[i_i_]\n    i_ = i + 1 + A[i]\n    if 0 < i_ < INF:\n        dp[i_] += 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":7.1428571429,"diff":["-dp = [0] * 10**7","+INF = 2 * 10**5","+dp = [0] * INF","-    x = i + 1 - A[i]","-    if x >= 0:","-        ans += dp[x]","-    y = i + 1 + A[i]","-    if y < 10**7:","-        dp[y] += 1","+    i_i_ = i + 1 - A[i]","+    if 0 < i_i_ < INF:","+        ans += dp[i_i_]","+    i_ = i + 1 + A[i]","+    if 0 < i_ < INF:","+        dp[i_] += 1"],"diff_only_import_comment":false,"measured_runtime_v0":1.4942608066,"measured_runtime_v1":0.2557353399,"runtime_lift":5.8429969327,"key":["s720467562","s807450341"]}
{"user_id":"u657913472","problem_id":"p03544","language":"python","submission_id_v0":"s581568984","submission_id_v1":"s775677409","cpu_time_v0":17,"cpu_time_v1":10,"memory_v0":2940,"memory_v1":2568,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":41.18,"input":"a,b=2,1\n\nfor i in[0]*int(eval(input())):a,b=b,a+b\n\nprint(a)","target":"a,b=2,1\n\nfor i in[0]*eval(input()):a,b=b,a+b\n\nprint(a)","code_v0_loc":3,"code_v1_loc":3,"code_v0_num_chars":53,"code_v1_num_chars":47,"code_v0_no_empty_lines":"a, b = 2, 1\nfor i in [0] * int(eval(input())):\n    a, b = b, a + b\nprint(a)\n","code_v1_no_empty_lines":"a, b = 2, 1\nfor i in [0] * eval(input()):\n    a, b = b, a + b\nprint(a)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-for i in [0] * int(eval(input())):","+for i in [0] * eval(input()):"],"diff_only_import_comment":false,"measured_runtime_v0":0.2172925947,"measured_runtime_v1":0.0059480793,"runtime_lift":36.5315560885,"key":["s581568984","s775677409"]}
{"user_id":"u880730787","problem_id":"p02555","language":"python","submission_id_v0":"s669686668","submission_id_v1":"s427616795","cpu_time_v0":487,"cpu_time_v1":297,"memory_v0":9116,"memory_v1":9128,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":39.01,"input":"S = int(eval(input()))\n\nmod = 10**9+7\n\n\n\ndp = [0]*(S+1)\n\ndp[0] = 1\n\nfor i in range(1,S+1):\n\n    for j in range(0,(i-3)+1):\n\n        dp[i] += dp[j]\n\n        dp[i] %= mod\n\nprint((dp[S]))","target":"S = int(eval(input()))\n\nmod = 10**9+7\n\n\n\ndp = [0]*(S+1)\n\ndp[0] = 1\n\nfor i in range(1,S+1):\n\n    for j in range(0,(i-3)+1):\n\n        dp[i] += dp[j]\n\n    dp[i] %= mod\n\nprint((dp[S]))","code_v0_loc":10,"code_v1_loc":10,"code_v0_num_chars":176,"code_v1_num_chars":172,"code_v0_no_empty_lines":"S = int(eval(input()))\nmod = 10**9 + 7\ndp = [0] * (S + 1)\ndp[0] = 1\nfor i in range(1, S + 1):\n    for j in range(0, (i - 3) + 1):\n        dp[i] += dp[j]\n        dp[i] %= mod\nprint((dp[S]))\n","code_v1_no_empty_lines":"S = int(eval(input()))\nmod = 10**9 + 7\ndp = [0] * (S + 1)\ndp[0] = 1\nfor i in range(1, S + 1):\n    for j in range(0, (i - 3) + 1):\n        dp[i] += dp[j]\n    dp[i] %= mod\nprint((dp[S]))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-        dp[i] %= mod","+    dp[i] %= mod"],"diff_only_import_comment":false,"measured_runtime_v0":0.6781705019,"measured_runtime_v1":0.481741133,"runtime_lift":1.4077488002,"key":["s669686668","s427616795"]}
{"user_id":"u733814820","problem_id":"p03107","language":"python","submission_id_v0":"s607050481","submission_id_v1":"s627055692","cpu_time_v0":41,"cpu_time_v1":35,"memory_v0":3316,"memory_v1":3956,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.63,"input":"# ABC 120 C\n\n\n\nimport re\n\n\n\nS = eval(input())\n\n\n\nl0 = 0\n\nl1 = 0\n\n\n\nfor i in range(len(S)):\n\n    if S[i] == '0':\n\n        l0 += 1\n\n    elif S[i] == '1':\n\n        l1 += 1\n\n\n\nprint((min(l0, l1) * 2))\n","target":"def resolve():\n\n  S = eval(input())\n\n  arr = []\n\n  for s in S:\n\n    if len(arr) != 0 and arr[-1] != s:\n\n      arr.pop()\n\n    else:\n\n      arr.append(s)\n\n\n\n  print((len(S) - len(arr)))\n\n  return\n\n\n\nif __name__ == \"__main__\":\n\n  resolve()\n","code_v0_loc":16,"code_v1_loc":14,"code_v0_num_chars":189,"code_v1_num_chars":229,"code_v0_no_empty_lines":"# ABC 120 C\nimport re\n\nS = eval(input())\nl0 = 0\nl1 = 0\nfor i in range(len(S)):\n    if S[i] == \"0\":\n        l0 += 1\n    elif S[i] == \"1\":\n        l1 += 1\nprint((min(l0, l1) * 2))\n","code_v1_no_empty_lines":"def resolve():\n    S = eval(input())\n    arr = []\n    for s in S:\n        if len(arr) != 0 and arr[-1] != s:\n            arr.pop()\n        else:\n            arr.append(s)\n    print((len(S) - len(arr)))\n    return\n\n\nif __name__ == \"__main__\":\n    resolve()\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-# ABC 120 C","-import re","+def resolve():","+    S = eval(input())","+    arr = []","+    for s in S:","+        if len(arr) != 0 and arr[-1] != s:","+            arr.pop()","+        else:","+            arr.append(s)","+    print((len(S) - len(arr)))","+    return","-S = eval(input())","-l0 = 0","-l1 = 0","-for i in range(len(S)):","-    if S[i] == \"0\":","-        l0 += 1","-    elif S[i] == \"1\":","-        l1 += 1","-print((min(l0, l1) * 2))","+","+if __name__ == \"__main__\":","+    resolve()"],"diff_only_import_comment":false,"measured_runtime_v0":0.4207458491,"measured_runtime_v1":0.3073607309,"runtime_lift":1.3688991691,"key":["s607050481","s627055692"]}
{"user_id":"u811733736","problem_id":"p00106","language":"python","submission_id_v0":"s822597744","submission_id_v1":"s769405427","cpu_time_v0":2250,"cpu_time_v1":40,"memory_v0":7564,"memory_v1":7920,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":98.22,"input":"# -*- coding: utf-8 -*-\n\n\"\"\"\n\nhttp:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=0106&lang=jp\n\n\"\"\"\n\nimport sys\n\n\n\n\n\ndef solve(amount):\n\n    \"\"\"\n\n    :param amount: ?????\\???????????\u00b0?????????\n\n    :return: ?????????\n\n    \"\"\"\n\n    best_price = (amount + 199) \/\/ 200 * 380\n\n    for a in range(amount \/\/ 200 + 1):\n\n        for b in range(amount \/\/ 300 + 1):\n\n            for c in range(amount \/\/ 500 + 1):\n\n                for a1 in range(amount \/\/ 1000 + 1):\n\n                    for b1 in range(amount \/\/ 1200 + 1):\n\n                        for c1 in range(amount \/\/ 1500 + 1):\n\n                            if a*200 + b*300 + c*500 + a1*1000 + b1*1200 + c1*1500 == amount:\n\n                                price = a*380 + b*550 + c*850 + a1*1520 + b1*1870 + c1*2244\n\n                                if price < best_price:\n\n                                    best_price = price\n\n    return best_price\n\n\n\n\n\n\n\n\n\ndef main(args):\n\n    while True:\n\n        amount = int(eval(input()))\n\n        if amount == 0:\n\n            break\n\n        result = solve(amount)\n\n        print(result)\n\n\n\n\n\n\n\nif __name__ == '__main__':\n\n    main(sys.argv[1:])","target":"# -*- coding: utf-8 -*-\n\n\"\"\"\n\nhttp:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=0106&lang=jp\n\n\"\"\"\n\nimport sys\n\n\n\n\n\ndef solve(amount):\n\n    \"\"\"\n\n    :param amount: ?????\\???????????\u00b0?????????\n\n    :return: ?????????\n\n    \"\"\"\n\n    best_price = (amount + 199) \/\/ 200 * 380\n\n    for a in range(amount \/\/ 200 + 1):\n\n        for b in range(amount \/\/ 300 + 1):\n\n            for c in range(amount \/\/ 500 + 1):\n\n                for a1 in range(amount \/\/ 1000 + 1):\n\n                    for b1 in range(amount \/\/ 1200 + 1):\n\n                        for c1 in range(amount \/\/ 1500 + 1):\n\n                            if a*200 + b*300 + c*500 + a1*1000 + b1*1200 + c1*1500 == amount:\n\n                                price = a*380 + b*550 + c*850 + a1*1520 + b1*1870 + c1*2244\n\n                                if price < best_price:\n\n                                    best_price = price\n\n    return best_price\n\n\n\n\n\ndef solve2(amount):\n\n    \"\"\"\n\n    ???????\u00a8???????????????\u00a8?????????????????\u00a7???\n\n    \"\"\"\n\n    packages = [(0, 0), (2, 380), (3, 550), (5, 850), (10, 1520), (12, 1870), (15, 2244)] # 1?\u00a2??????????(100g??????)??\u00a8??????????????\u00a2l\n\n    # dp??\u00a8???2?\u00ac??????????????\u00a8?????????????(100g??????)?????????????????\u00a8??\u00a7??????packages????\u00a8????\n\n    # 999999...??????INF??\u00a8?????? (phthon 3.5??\\??????????????????math.inf????????\u00a8??\u00a7??????)\n\n    cart = [[99999999] * (amount\/\/100 + 1) for _ in range(len(packages))]\n\n    for i in range(len(packages)):\n\n        cart[i][0] = 0          #  0g???????????\\????????\u00b4??????0???????????????\n\n\n\n    for i in range(1, len(packages)):\n\n        for j in range(1, len(cart[0])):\n\n            w = packages[i][0]  #  ??????\n\n            p = packages[i][1]  #  ??????\n\n            if j < w:\n\n                cart[i][j] = cart[i-1][j]\n\n            else:\n\n                # ???????????????????????????????????????????????????????????????????????????????\u00a8????\n\n                cart[i][j] = min(cart[i-1][j], cart[i-1][max(0, j-w)]+p, cart[i][max(0, j-w)]+p)\n\n    return cart[-1][-1]\n\n\n\n\n\ndef main(args):\n\n    while True:\n\n        amount = int(eval(input()))\n\n        if amount == 0:\n\n            break\n\n        #result = solve(amount)\n\n        #print(result)\n\n        result = solve2(amount)\n\n        print(result)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main(sys.argv[1:])","code_v0_loc":40,"code_v1_loc":62,"code_v0_num_chars":1135,"code_v1_num_chars":2291,"code_v0_no_empty_lines":"# -*- coding: utf-8 -*-\n\"\"\"\nhttp:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=0106&lang=jp\n\"\"\"\nimport sys\n\n\ndef solve(amount):\n    \"\"\"\n    :param amount: ?????\\???????????\u00b0?????????\n    :return: ?????????\n    \"\"\"\n    best_price = (amount + 199) \/\/ 200 * 380\n    for a in range(amount \/\/ 200 + 1):\n        for b in range(amount \/\/ 300 + 1):\n            for c in range(amount \/\/ 500 + 1):\n                for a1 in range(amount \/\/ 1000 + 1):\n                    for b1 in range(amount \/\/ 1200 + 1):\n                        for c1 in range(amount \/\/ 1500 + 1):\n                            if (\n                                a * 200\n                                + b * 300\n                                + c * 500\n                                + a1 * 1000\n                                + b1 * 1200\n                                + c1 * 1500\n                                == amount\n                            ):\n                                price = (\n                                    a * 380\n                                    + b * 550\n                                    + c * 850\n                                    + a1 * 1520\n                                    + b1 * 1870\n                                    + c1 * 2244\n                                )\n                                if price < best_price:\n                                    best_price = price\n    return best_price\n\n\ndef main(args):\n    while True:\n        amount = int(eval(input()))\n        if amount == 0:\n            break\n        result = solve(amount)\n        print(result)\n\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])\n","code_v1_no_empty_lines":"# -*- coding: utf-8 -*-\n\"\"\"\nhttp:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=0106&lang=jp\n\"\"\"\nimport sys\n\n\ndef solve(amount):\n    \"\"\"\n    :param amount: ?????\\???????????\u00b0?????????\n    :return: ?????????\n    \"\"\"\n    best_price = (amount + 199) \/\/ 200 * 380\n    for a in range(amount \/\/ 200 + 1):\n        for b in range(amount \/\/ 300 + 1):\n            for c in range(amount \/\/ 500 + 1):\n                for a1 in range(amount \/\/ 1000 + 1):\n                    for b1 in range(amount \/\/ 1200 + 1):\n                        for c1 in range(amount \/\/ 1500 + 1):\n                            if (\n                                a * 200\n                                + b * 300\n                                + c * 500\n                                + a1 * 1000\n                                + b1 * 1200\n                                + c1 * 1500\n                                == amount\n                            ):\n                                price = (\n                                    a * 380\n                                    + b * 550\n                                    + c * 850\n                                    + a1 * 1520\n                                    + b1 * 1870\n                                    + c1 * 2244\n                                )\n                                if price < best_price:\n                                    best_price = price\n    return best_price\n\n\ndef solve2(amount):\n    \"\"\"\n    ???????\u00a8???????????????\u00a8?????????????????\u00a7???\n    \"\"\"\n    packages = [\n        (0, 0),\n        (2, 380),\n        (3, 550),\n        (5, 850),\n        (10, 1520),\n        (12, 1870),\n        (15, 2244),\n    ]  # 1?\u00a2??????????(100g??????)??\u00a8??????????????\u00a2l\n    # dp??\u00a8???2?\u00ac??????????????\u00a8?????????????(100g??????)?????????????????\u00a8??\u00a7??????packages????\u00a8????\n    # 999999...??????INF??\u00a8?????? (phthon 3.5??\\??????????????????math.inf????????\u00a8??\u00a7??????)\n    cart = [[99999999] * (amount \/\/ 100 + 1) for _ in range(len(packages))]\n    for i in range(len(packages)):\n        cart[i][0] = 0  #  0g???????????\\????????\u00b4??????0???????????????\n    for i in range(1, len(packages)):\n        for j in range(1, len(cart[0])):\n            w = packages[i][0]  #  ??????\n            p = packages[i][1]  #  ??????\n            if j < w:\n                cart[i][j] = cart[i - 1][j]\n            else:\n                # ???????????????????????????????????????????????????????????????????????????????\u00a8????\n                cart[i][j] = min(\n                    cart[i - 1][j],\n                    cart[i - 1][max(0, j - w)] + p,\n                    cart[i][max(0, j - w)] + p,\n                )\n    return cart[-1][-1]\n\n\ndef main(args):\n    while True:\n        amount = int(eval(input()))\n        if amount == 0:\n            break\n        # result = solve(amount)\n        # print(result)\n        result = solve2(amount)\n        print(result)\n\n\nif __name__ == \"__main__\":\n    main(sys.argv[1:])\n","code_same":false,"relative_loc_diff_percent":35.4838709677,"diff":["+def solve2(amount):","+    \"\"\"","+    ???????\u00a8???????????????\u00a8?????????????????\u00a7???","+    \"\"\"","+    packages = [","+        (0, 0),","+        (2, 380),","+        (3, 550),","+        (5, 850),","+        (10, 1520),","+        (12, 1870),","+        (15, 2244),","+    ]  # 1?\u00a2??????????(100g??????)??\u00a8??????????????\u00a2l","+    # dp??\u00a8???2?\u00ac??????????????\u00a8?????????????(100g??????)?????????????????\u00a8??\u00a7??????packages????\u00a8????","+    # 999999...??????INF??\u00a8?????? (phthon 3.5??\\??????????????????math.inf????????\u00a8??\u00a7??????)","+    cart = [[99999999] * (amount \/\/ 100 + 1) for _ in range(len(packages))]","+    for i in range(len(packages)):","+        cart[i][0] = 0  #  0g???????????\\????????\u00b4??????0???????????????","+    for i in range(1, len(packages)):","+        for j in range(1, len(cart[0])):","+            w = packages[i][0]  #  ??????","+            p = packages[i][1]  #  ??????","+            if j < w:","+                cart[i][j] = cart[i - 1][j]","+            else:","+                # ???????????????????????????????????????????????????????????????????????????????\u00a8????","+                cart[i][j] = min(","+                    cart[i - 1][j],","+                    cart[i - 1][max(0, j - w)] + p,","+                    cart[i][max(0, j - w)] + p,","+                )","+    return cart[-1][-1]","+","+","-        result = solve(amount)","+        # result = solve(amount)","+        # print(result)","+        result = solve2(amount)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3584752986,"measured_runtime_v1":0.2651723213,"runtime_lift":1.3518579045,"key":["s822597744","s769405427"]}
{"user_id":"u075304271","problem_id":"p02657","language":"python","submission_id_v0":"s027336468","submission_id_v1":"s218994202","cpu_time_v0":65,"cpu_time_v1":22,"memory_v0":61680,"memory_v1":9168,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":66.15,"input":"def iput(): return int(eval(input()))\n\ndef mput(): return list(map(int, input().split()))\n\ndef lput(): return list(map(int, input().split()))\n\n\n\ndef solve():\n\n    a, b = mput()\n\n    print((a*b))\n\n    return 0\n\n\n\nif __name__ == \"__main__\":\n\n    solve()","target":"import math\n\ndef solve():\n\n    a, b = input().split()\n\n    a = int(a)\n\n    b = float(b)\n\n    print((int(a*b)))\n\n    return 0\n\n \n\nif __name__ == \"__main__\":\n\n    solve()","code_v0_loc":11,"code_v1_loc":10,"code_v0_num_chars":237,"code_v1_num_chars":166,"code_v0_no_empty_lines":"def iput():\n    return int(eval(input()))\n\n\ndef mput():\n    return list(map(int, input().split()))\n\n\ndef lput():\n    return list(map(int, input().split()))\n\n\ndef solve():\n    a, b = mput()\n    print((a * b))\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n","code_v1_no_empty_lines":"import math\n\n\ndef solve():\n    a, b = input().split()\n    a = int(a)\n    b = float(b)\n    print((int(a * b)))\n    return 0\n\n\nif __name__ == \"__main__\":\n    solve()\n","code_same":false,"relative_loc_diff_percent":9.0909090909,"diff":["-def iput():","-    return int(eval(input()))","-","-","-def mput():","-    return list(map(int, input().split()))","-","-","-def lput():","-    return list(map(int, input().split()))","+import math","-    a, b = mput()","-    print((a * b))","+    a, b = input().split()","+    a = int(a)","+    b = float(b)","+    print((int(a * b)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2298483524,"measured_runtime_v1":0.0062991838,"runtime_lift":36.4885924311,"key":["s027336468","s218994202"]}
{"user_id":"u762420987","problem_id":"p03759","language":"python","submission_id_v0":"s246152829","submission_id_v1":"s501080791","cpu_time_v0":20,"cpu_time_v1":17,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.0,"input":"a, b, c = list(map(int, input().split()))\n\nif (b - a) == (c - b):\n\n    print(\"YES\")\n\nelse:\n\n    print(\"NO\")","target":"a, b, c = list(map(int, input().split()))\n\nif b - a == c - b:\n\n    print(\"YES\")\n\nelse:\n\n    print(\"NO\")","code_v0_loc":5,"code_v1_loc":5,"code_v0_num_chars":101,"code_v1_num_chars":97,"code_v0_no_empty_lines":"a, b, c = list(map(int, input().split()))\nif (b - a) == (c - b):\n    print(\"YES\")\nelse:\n    print(\"NO\")\n","code_v1_no_empty_lines":"a, b, c = list(map(int, input().split()))\nif b - a == c - b:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-if (b - a) == (c - b):","+if b - a == c - b:"],"diff_only_import_comment":false,"measured_runtime_v0":0.1914725397,"measured_runtime_v1":0.0060755644,"runtime_lift":31.5151856242,"key":["s246152829","s501080791"]}
{"user_id":"u033606236","problem_id":"p03796","language":"python","submission_id_v0":"s645296559","submission_id_v1":"s055332014","cpu_time_v0":229,"cpu_time_v1":39,"memory_v0":4020,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":82.97,"input":"import math\n\nprint((math.factorial(int(eval(input())))%1000000007))","target":"num = int(eval(input()))\n\nresult = 1\n\nfor i in range(1,num+1):\n\n    result = result *i % 1000000007\n\nprint(result)","code_v0_loc":2,"code_v1_loc":5,"code_v0_num_chars":59,"code_v1_num_chars":108,"code_v0_no_empty_lines":"import math\n\nprint((math.factorial(int(eval(input()))) % 1000000007))\n","code_v1_no_empty_lines":"num = int(eval(input()))\nresult = 1\nfor i in range(1, num + 1):\n    result = result * i % 1000000007\nprint(result)\n","code_same":false,"relative_loc_diff_percent":60.0,"diff":["-import math","-","-print((math.factorial(int(eval(input()))) % 1000000007))","+num = int(eval(input()))","+result = 1","+for i in range(1, num + 1):","+    result = result * i % 1000000007","+print(result)"],"diff_only_import_comment":false,"measured_runtime_v0":0.7005937328,"measured_runtime_v1":0.3298725822,"runtime_lift":2.1238313537,"key":["s645296559","s055332014"]}
{"user_id":"u488127128","problem_id":"p03416","language":"python","submission_id_v0":"s570028181","submission_id_v1":"s434791726","cpu_time_v0":103,"cpu_time_v1":46,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":55.34,"input":"a,b = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(a,b+1):\n\n    j = str(i)\n\n    if j==''.join(reversed(j)):\n\n        count += 1\n\nprint(count)","target":"a,b = list(map(int, input().split()))\n\nn = [i for i in map(str, list(range(a,b+1))) if i==i[::-1]]\n\nprint((len(n)))","code_v0_loc":7,"code_v1_loc":3,"code_v0_num_chars":149,"code_v1_num_chars":101,"code_v0_no_empty_lines":"a, b = list(map(int, input().split()))\ncount = 0\nfor i in range(a, b + 1):\n    j = str(i)\n    if j == \"\".join(reversed(j)):\n        count += 1\nprint(count)\n","code_v1_no_empty_lines":"a, b = list(map(int, input().split()))\nn = [i for i in map(str, list(range(a, b + 1))) if i == i[::-1]]\nprint((len(n)))\n","code_same":false,"relative_loc_diff_percent":57.1428571429,"diff":["-count = 0","-for i in range(a, b + 1):","-    j = str(i)","-    if j == \"\".join(reversed(j)):","-        count += 1","-print(count)","+n = [i for i in map(str, list(range(a, b + 1))) if i == i[::-1]]","+print((len(n)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.4183517286,"measured_runtime_v1":0.2983190859,"runtime_lift":1.4023632692,"key":["s570028181","s434791726"]}
{"user_id":"u759412327","problem_id":"p02899","language":"python","submission_id_v0":"s615112852","submission_id_v1":"s878311039","cpu_time_v0":459,"cpu_time_v1":87,"memory_v0":22876,"memory_v1":20400,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":81.05,"input":"from numpy import *\n\neval(input())\n\nprint((\" \".join(map(str,argsort(list(map(int,input().split())))+1))))","target":"N = int(eval(input()))\n\nA = list(map(int,input().split()))\n\nB = N*[0]\n\n\n\nfor n in range(N):\n\n  B[A[n]-1]=n+1\n\n\n\nprint((*B))","code_v0_loc":3,"code_v1_loc":8,"code_v0_num_chars":97,"code_v1_num_chars":115,"code_v0_no_empty_lines":"from numpy import *\n\neval(input())\nprint((\" \".join(map(str, argsort(list(map(int, input().split()))) + 1))))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = list(map(int, input().split()))\nB = N * [0]\nfor n in range(N):\n    B[A[n] - 1] = n + 1\nprint((*B))\n","code_same":false,"relative_loc_diff_percent":62.5,"diff":["-from numpy import *","-","-eval(input())","-print((\" \".join(map(str, argsort(list(map(int, input().split()))) + 1))))","+N = int(eval(input()))","+A = list(map(int, input().split()))","+B = N * [0]","+for n in range(N):","+    B[A[n] - 1] = n + 1","+print((*B))"],"diff_only_import_comment":false,"measured_runtime_v0":1.7102132904,"measured_runtime_v1":0.1885396422,"runtime_lift":9.0708419192,"key":["s615112852","s878311039"]}
{"user_id":"u581187895","problem_id":"p03363","language":"python","submission_id_v0":"s713142800","submission_id_v1":"s742671433","cpu_time_v0":298,"cpu_time_v1":167,"memory_v0":39380,"memory_v1":44480,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":43.96,"input":"from collections import Counter\n\nimport numpy as np\n\n\n\nN = int(eval(input()))\n\nA = np.array(input().split(), dtype=np.int64)\n\n\n\nc = Counter(A.cumsum())\n\nc[0] += 1 # np.cumsum(), 0start \u3067\u306f\u7121\u3044\u70ba 0\u3092\u52a0\u3048\u308b\n\nans = sum(v*(v-1)\/\/2 for v in list(c.values()))\n\nprint(ans)","target":"\n\nfrom itertools import accumulate\n\nfrom collections import defaultdict\n\ndef resolve():\n\n    N = int(eval(input()))\n\n    A = list(map(int, input().split()))\n\n\n\n    Acum = [0] + list(accumulate(A))\n\n    dic = defaultdict(int)\n\n    ans = 0\n\n    for i in range(N + 1):\n\n        ans += dic[Acum[i]]\n\n        dic[Acum[i]] += 1\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    resolve()","code_v0_loc":10,"code_v1_loc":19,"code_v0_num_chars":245,"code_v1_num_chars":380,"code_v0_no_empty_lines":"from collections import Counter\nimport numpy as np\n\nN = int(eval(input()))\nA = np.array(input().split(), dtype=np.int64)\nc = Counter(A.cumsum())\nc[0] += 1  # np.cumsum(), 0start \u3067\u306f\u7121\u3044\u70ba 0\u3092\u52a0\u3048\u308b\nans = sum(v * (v - 1) \/\/ 2 for v in list(c.values()))\nprint(ans)\n","code_v1_no_empty_lines":"from itertools import accumulate\nfrom collections import defaultdict\n\n\ndef resolve():\n    N = int(eval(input()))\n    A = list(map(int, input().split()))\n    Acum = [0] + list(accumulate(A))\n    dic = defaultdict(int)\n    ans = 0\n    for i in range(N + 1):\n        ans += dic[Acum[i]]\n        dic[Acum[i]] += 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    resolve()\n","code_same":false,"relative_loc_diff_percent":47.3684210526,"diff":["-from collections import Counter","-import numpy as np","+from itertools import accumulate","+from collections import defaultdict","-N = int(eval(input()))","-A = np.array(input().split(), dtype=np.int64)","-c = Counter(A.cumsum())","-c[0] += 1  # np.cumsum(), 0start \u3067\u306f\u7121\u3044\u70ba 0\u3092\u52a0\u3048\u308b","-ans = sum(v * (v - 1) \/\/ 2 for v in list(c.values()))","-print(ans)","+","+def resolve():","+    N = int(eval(input()))","+    A = list(map(int, input().split()))","+    Acum = [0] + list(accumulate(A))","+    dic = defaultdict(int)","+    ans = 0","+    for i in range(N + 1):","+        ans += dic[Acum[i]]","+        dic[Acum[i]] += 1","+    print(ans)","+","+","+if __name__ == \"__main__\":","+    resolve()"],"diff_only_import_comment":false,"measured_runtime_v0":1.2848177447,"measured_runtime_v1":0.2021386924,"runtime_lift":6.3561197985,"key":["s713142800","s742671433"]}
{"user_id":"u642883360","problem_id":"p03796","language":"python","submission_id_v0":"s671319819","submission_id_v1":"s345697128","cpu_time_v0":230,"cpu_time_v1":167,"memory_v0":3984,"memory_v1":38512,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":27.39,"input":"#!\/usr\/bin\/env pypy3\n\n\n\nimport math\n\nprint((math.factorial(int(eval(input()))) % 1000000007))","target":"n = int(eval(input()))\n\nfor i in range(n - 1, 1, -1):\n\n\tn *= i\n\n\tn %= 10**9 + 7\n\nprint(n)","code_v0_loc":4,"code_v1_loc":5,"code_v0_num_chars":85,"code_v1_num_chars":83,"code_v0_no_empty_lines":"#!\/usr\/bin\/env pypy3\nimport math\n\nprint((math.factorial(int(eval(input()))) % 1000000007))\n","code_v1_no_empty_lines":"n = int(eval(input()))\nfor i in range(n - 1, 1, -1):\n    n *= i\n    n %= 10**9 + 7\nprint(n)\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["-#!\/usr\/bin\/env pypy3","-import math","-","-print((math.factorial(int(eval(input()))) % 1000000007))","+n = int(eval(input()))","+for i in range(n - 1, 1, -1):","+    n *= i","+    n %= 10**9 + 7","+print(n)"],"diff_only_import_comment":false,"measured_runtime_v0":0.5574923191,"measured_runtime_v1":0.2242465372,"runtime_lift":2.4860687974,"key":["s671319819","s345697128"]}
{"user_id":"u060938295","problem_id":"p03170","language":"python","submission_id_v0":"s262531692","submission_id_v1":"s447405152","cpu_time_v0":775,"cpu_time_v1":215,"memory_v0":14308,"memory_v1":14256,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":72.26,"input":"# -*- coding: utf-8 -*-\n\n\"\"\"\n\nCreated on Sat Apr 25 18:20:35 2020\n\n\"\"\"\n\n\n\nimport sys\n\nimport numpy as np\n\n\n\nsys.setrecursionlimit(10 ** 9)\n\n#def input():\n\n#    return sys.stdin.readline()[:-1]\n\nmod = 10**9+7\n\n\n\n#N = int(input())\n\nN, K = list(map(int,input().split()))\n\nA = np.array(list(map(int,input().split())))\n\n\n\ndp = [True for i in range(K + A[-1] + 1)]\n\nfor i in range(K):\n\n    if dp[i]:\n\n        for a in A:\n\n            dp[i + a] = False\n\n\n\n#    print(i, dp[i],A+i,dp[A+i])\n\n#print(dp)\n\n\n\nif dp[K]:\n\n    ans = 'Second'\n\nelse:\n\n    ans = 'First'\n\nprint(ans)","target":"# -*- coding: utf-8 -*-\n\n\"\"\"\n\nCreated on Sat Apr 25 18:20:35 2020\n\n\"\"\"\n\n\n\nimport sys\n\nimport numpy as np\n\n\n\nsys.setrecursionlimit(10 ** 9)\n\n#def input():\n\n#    return sys.stdin.readline()[:-1]\n\nmod = 10**9+7\n\n\n\n#N = int(input())\n\n#N, K = map(int,input().split())\n\n#A = np.array(list(map(int,input().split())))\n\nN, K, *A = list(map(int, open(0).read().split()))\n\n\n\ndp = [True for i in range(K + A[-1] + 1)]\n\nfor i in range(K):\n\n    if dp[i]:\n\n        for a in A:\n\n            dp[i + a] = False\n\n\n\n#    print(i, dp[i],A+i,dp[A+i])\n\n#print(dp)\n\n\n\nif dp[K]:\n\n    ans = 'Second'\n\nelse:\n\n    ans = 'First'\n\nprint(ans)","code_v0_loc":31,"code_v1_loc":32,"code_v0_num_chars":558,"code_v1_num_chars":605,"code_v0_no_empty_lines":"# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Apr 25 18:20:35 2020\n\"\"\"\nimport sys\nimport numpy as np\n\nsys.setrecursionlimit(10**9)\n# def input():\n#    return sys.stdin.readline()[:-1]\nmod = 10**9 + 7\n# N = int(input())\nN, K = list(map(int, input().split()))\nA = np.array(list(map(int, input().split())))\ndp = [True for i in range(K + A[-1] + 1)]\nfor i in range(K):\n    if dp[i]:\n        for a in A:\n            dp[i + a] = False\n#    print(i, dp[i],A+i,dp[A+i])\n# print(dp)\nif dp[K]:\n    ans = \"Second\"\nelse:\n    ans = \"First\"\nprint(ans)\n","code_v1_no_empty_lines":"# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sat Apr 25 18:20:35 2020\n\"\"\"\nimport sys\nimport numpy as np\n\nsys.setrecursionlimit(10**9)\n# def input():\n#    return sys.stdin.readline()[:-1]\nmod = 10**9 + 7\n# N = int(input())\n# N, K = map(int,input().split())\n# A = np.array(list(map(int,input().split())))\nN, K, *A = list(map(int, open(0).read().split()))\ndp = [True for i in range(K + A[-1] + 1)]\nfor i in range(K):\n    if dp[i]:\n        for a in A:\n            dp[i + a] = False\n#    print(i, dp[i],A+i,dp[A+i])\n# print(dp)\nif dp[K]:\n    ans = \"Second\"\nelse:\n    ans = \"First\"\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":3.125,"diff":["-N, K = list(map(int, input().split()))","-A = np.array(list(map(int, input().split())))","+# N, K = map(int,input().split())","+# A = np.array(list(map(int,input().split())))","+N, K, *A = list(map(int, open(0).read().split()))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3617031952,"measured_runtime_v1":0.2231245196,"runtime_lift":6.102884603,"key":["s262531692","s447405152"]}
{"user_id":"u888092736","problem_id":"p03721","language":"python","submission_id_v0":"s705162733","submission_id_v1":"s360654843","cpu_time_v0":281,"cpu_time_v1":145,"memory_v0":28552,"memory_v1":31636,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":48.4,"input":"(N, K), *AB = [list(map(int, s.split())) for s in open(0)]\n\nfor a, b in sorted(AB):\n\n    K -= b\n\n    if K <= 0:\n\n        print(a)\n\n        break\n","target":"N, K, *AB = list(map(int, open(0).read().split()))\n\nli = [(a, b) for a, b in zip(*[iter(AB)] * 2)]\n\nli.sort()\n\nfor a, b in li:\n\n    if K > b:\n\n        K -= b\n\n    else:\n\n        print(a)\n\n        break\n","code_v0_loc":6,"code_v1_loc":9,"code_v0_num_chars":145,"code_v1_num_chars":196,"code_v0_no_empty_lines":"(N, K), *AB = [list(map(int, s.split())) for s in open(0)]\nfor a, b in sorted(AB):\n    K -= b\n    if K <= 0:\n        print(a)\n        break\n","code_v1_no_empty_lines":"N, K, *AB = list(map(int, open(0).read().split()))\nli = [(a, b) for a, b in zip(*[iter(AB)] * 2)]\nli.sort()\nfor a, b in li:\n    if K > b:\n        K -= b\n    else:\n        print(a)\n        break\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-(N, K), *AB = [list(map(int, s.split())) for s in open(0)]","-for a, b in sorted(AB):","-    K -= b","-    if K <= 0:","+N, K, *AB = list(map(int, open(0).read().split()))","+li = [(a, b) for a, b in zip(*[iter(AB)] * 2)]","+li.sort()","+for a, b in li:","+    if K > b:","+        K -= b","+    else:"],"diff_only_import_comment":false,"measured_runtime_v0":0.2949739402,"measured_runtime_v1":0.0817868489,"runtime_lift":3.6066182276,"key":["s705162733","s360654843"]}
{"user_id":"u254871849","problem_id":"p03796","language":"python","submission_id_v0":"s710953077","submission_id_v1":"s484408635","cpu_time_v0":36,"cpu_time_v1":32,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.11,"input":"mod = int(1e9+7)\n\nn = int(eval(input()))\n\n\n\npower = 1\n\nfor i in range(1, n+1):\n\n    power = power * i % mod\n\nprint(power)","target":"import sys\n\n\n\nMOD = 10 ** 9 + 7\n\nn = int(sys.stdin.readline().rstrip())\n\n\n\ndef main():\n\n    res = 1\n\n    for i in range(1, n+1):\n\n        res *= i\n\n        res %= MOD\n\n\n\n    return res\n\n\n\nif __name__ == '__main__':\n\n    ans = main()\n\n    print(ans)","code_v0_loc":7,"code_v1_loc":16,"code_v0_num_chars":115,"code_v1_num_chars":248,"code_v0_no_empty_lines":"mod = int(1e9 + 7)\nn = int(eval(input()))\npower = 1\nfor i in range(1, n + 1):\n    power = power * i % mod\nprint(power)\n","code_v1_no_empty_lines":"import sys\n\nMOD = 10**9 + 7\nn = int(sys.stdin.readline().rstrip())\n\n\ndef main():\n    res = 1\n    for i in range(1, n + 1):\n        res *= i\n        res %= MOD\n    return res\n\n\nif __name__ == \"__main__\":\n    ans = main()\n    print(ans)\n","code_same":false,"relative_loc_diff_percent":56.25,"diff":["-mod = int(1e9 + 7)","-n = int(eval(input()))","-power = 1","-for i in range(1, n + 1):","-    power = power * i % mod","-print(power)","+import sys","+","+MOD = 10**9 + 7","+n = int(sys.stdin.readline().rstrip())","+","+","+def main():","+    res = 1","+    for i in range(1, n + 1):","+        res *= i","+        res %= MOD","+    return res","+","+","+if __name__ == \"__main__\":","+    ans = main()","+    print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.3650334806,"measured_runtime_v1":0.2122802832,"runtime_lift":1.7195825967,"key":["s710953077","s484408635"]}
{"user_id":"u623052494","problem_id":"p03307","language":"python","submission_id_v0":"s987197453","submission_id_v1":"s279142481","cpu_time_v0":1774,"cpu_time_v1":17,"memory_v0":21764,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":99.04,"input":"import numpy as np\n\nN=int(eval(input()))\n\ndef gcd(a,b):\n\n    c=int(np.floor(a\/b))\n\n    return a-b*c\n\nif gcd(N,2)==0:\n\n    print(N)\n\nelse:\n\n    print((2*N))","target":"N=int(eval(input()))\n\nif N%2==0:\n\n    print(N)\n\nelse:\n\n    print((2*N))","code_v0_loc":9,"code_v1_loc":5,"code_v0_num_chars":147,"code_v1_num_chars":63,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\n\n\ndef gcd(a, b):\n    c = int(np.floor(a \/ b))\n    return a - b * c\n\n\nif gcd(N, 2) == 0:\n    print(N)\nelse:\n    print((2 * N))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nif N % 2 == 0:\n    print(N)\nelse:\n    print((2 * N))\n","code_same":false,"relative_loc_diff_percent":44.4444444444,"diff":["-import numpy as np","-","-","-","-def gcd(a, b):","-    c = int(np.floor(a \/ b))","-    return a - b * c","-","-","-if gcd(N, 2) == 0:","+if N % 2 == 0:"],"diff_only_import_comment":false,"measured_runtime_v0":1.8725976269,"measured_runtime_v1":0.2854303327,"runtime_lift":6.5606118642,"key":["s987197453","s279142481"]}
{"user_id":"u492605584","problem_id":"p03164","language":"python","submission_id_v0":"s292196170","submission_id_v1":"s917581247","cpu_time_v0":446,"cpu_time_v1":321,"memory_v0":119916,"memory_v1":41964,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":28.03,"input":"N, W = list(map(int, input().split()))\n\nL = [list(map(int, input().split())) for i in range(N)]\n\nV = 0\n\nfor i in range(N):\n\n  V += L[i][1]\n\n\n\ndp = [[10**9+1] * (V + 1) for i in range(N+1)]\n\ndp[0][0] = 0\n\nfor i in range(N):\n\n    for j in range(V+1):\n\n        if j - L[i][1] >= 0:\n\n          dp[i+1][j] = min(dp[i][j], dp[i][j-L[i][1]] + L[i][0])\n\n        else:\n\n          dp[i+1][j] = dp[i][j]\n\nans = 0\n\nfor j in range(V+1):\n\n    if  W >= dp[-1][j]:\n\n        ans = max(ans, j)\n\nprint(ans)","target":"N, W = list(map(int, input().split()))\n\nL = [list(map(int, input().split())) for i in range(N)]\n\nV = 0\n\nfor i in range(N):\n\n  V += L[i][1]\n\n\n\ndp = [10**9+1] * (V + 1)\n\ndp[0] = 0\n\nfor i in range(N):\n\n    for j in range(V, -1, -1):\n\n        dp[j] = min(dp[j], dp[j-L[i][1]] + L[i][0])\n\nans = 0\n\nfor j in range(V+1):\n\n    if  W >= dp[j]:\n\n        ans = max(ans, j)\n\nprint(ans)","code_v0_loc":19,"code_v1_loc":16,"code_v0_num_chars":481,"code_v1_num_chars":367,"code_v0_no_empty_lines":"N, W = list(map(int, input().split()))\nL = [list(map(int, input().split())) for i in range(N)]\nV = 0\nfor i in range(N):\n    V += L[i][1]\ndp = [[10**9 + 1] * (V + 1) for i in range(N + 1)]\ndp[0][0] = 0\nfor i in range(N):\n    for j in range(V + 1):\n        if j - L[i][1] >= 0:\n            dp[i + 1][j] = min(dp[i][j], dp[i][j - L[i][1]] + L[i][0])\n        else:\n            dp[i + 1][j] = dp[i][j]\nans = 0\nfor j in range(V + 1):\n    if W >= dp[-1][j]:\n        ans = max(ans, j)\nprint(ans)\n","code_v1_no_empty_lines":"N, W = list(map(int, input().split()))\nL = [list(map(int, input().split())) for i in range(N)]\nV = 0\nfor i in range(N):\n    V += L[i][1]\ndp = [10**9 + 1] * (V + 1)\ndp[0] = 0\nfor i in range(N):\n    for j in range(V, -1, -1):\n        dp[j] = min(dp[j], dp[j - L[i][1]] + L[i][0])\nans = 0\nfor j in range(V + 1):\n    if W >= dp[j]:\n        ans = max(ans, j)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":15.7894736842,"diff":["-dp = [[10**9 + 1] * (V + 1) for i in range(N + 1)]","-dp[0][0] = 0","+dp = [10**9 + 1] * (V + 1)","+dp[0] = 0","-    for j in range(V + 1):","-        if j - L[i][1] >= 0:","-            dp[i + 1][j] = min(dp[i][j], dp[i][j - L[i][1]] + L[i][0])","-        else:","-            dp[i + 1][j] = dp[i][j]","+    for j in range(V, -1, -1):","+        dp[j] = min(dp[j], dp[j - L[i][1]] + L[i][0])","-    if W >= dp[-1][j]:","+    if W >= dp[j]:"],"diff_only_import_comment":false,"measured_runtime_v0":0.3010064836,"measured_runtime_v1":0.1980076838,"runtime_lift":1.5201757721,"key":["s292196170","s917581247"]}
{"user_id":"u494927057","problem_id":"p03814","language":"python","submission_id_v0":"s883482084","submission_id_v1":"s072538424","cpu_time_v0":59,"cpu_time_v1":35,"memory_v0":3516,"memory_v1":3516,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":40.68,"input":"s = eval(input())\n\n\n\nstart = -1\n\nend = 0\n\nfor i in range(len(s)):\n\n    if s[i] == 'A' and start < 0:\n\n        start = i\n\n    elif s[i] == 'Z':\n\n        end = i\n\nprint((end - start + 1))\n","target":"s = eval(input())\n\n\n\nstart = 0\n\nfor i in range(len(s)):\n\n    if s[i] == 'A':\n\n        start = i\n\n        break\n\n\n\nend = 0\n\nfor i in reversed(list(range(len(s)))):\n\n    if s[i] == 'Z':\n\n        end = i\n\n        break\n\nprint((end - start + 1))\n","code_v0_loc":10,"code_v1_loc":14,"code_v0_num_chars":178,"code_v1_num_chars":228,"code_v0_no_empty_lines":"s = eval(input())\nstart = -1\nend = 0\nfor i in range(len(s)):\n    if s[i] == \"A\" and start < 0:\n        start = i\n    elif s[i] == \"Z\":\n        end = i\nprint((end - start + 1))\n","code_v1_no_empty_lines":"s = eval(input())\nstart = 0\nfor i in range(len(s)):\n    if s[i] == \"A\":\n        start = i\n        break\nend = 0\nfor i in reversed(list(range(len(s)))):\n    if s[i] == \"Z\":\n        end = i\n        break\nprint((end - start + 1))\n","code_same":false,"relative_loc_diff_percent":28.5714285714,"diff":["-start = -1","+start = 0","+for i in range(len(s)):","+    if s[i] == \"A\":","+        start = i","+        break","-for i in range(len(s)):","-    if s[i] == \"A\" and start < 0:","-        start = i","-    elif s[i] == \"Z\":","+for i in reversed(list(range(len(s)))):","+    if s[i] == \"Z\":","+        break"],"diff_only_import_comment":false,"measured_runtime_v0":0.2661928608,"measured_runtime_v1":0.1145644054,"runtime_lift":2.3235215143,"key":["s883482084","s072538424"]}
{"user_id":"u150984829","problem_id":"p02412","language":"python","submission_id_v0":"s777094380","submission_id_v1":"s391711407","cpu_time_v0":40,"cpu_time_v1":30,"memory_v0":5608,"memory_v1":5612,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":25.0,"input":"while 1:\n\n n,x=list(map(int,input().split()))\n\n if n+x==0:break\n\n print((len([1 for i in range(3,n+1)for j in range(2,x-i)if x-i-j<j<i])))","target":"while 1:\n\n n,x=list(map(int,input().split()))\n\n if n+x==0:break\n\n print((len([1 for i in range(1,n-1)for j in range(i+1,n)if j<x-i-j<=n])))","code_v0_loc":4,"code_v1_loc":4,"code_v0_num_chars":130,"code_v1_num_chars":131,"code_v0_no_empty_lines":"while 1:\n    n, x = list(map(int, input().split()))\n    if n + x == 0:\n        break\n    print(\n        (\n            len(\n                [\n                    1\n                    for i in range(3, n + 1)\n                    for j in range(2, x - i)\n                    if x - i - j < j < i\n                ]\n            )\n        )\n    )\n","code_v1_no_empty_lines":"while 1:\n    n, x = list(map(int, input().split()))\n    if n + x == 0:\n        break\n    print(\n        (\n            len(\n                [\n                    1\n                    for i in range(1, n - 1)\n                    for j in range(i + 1, n)\n                    if j < x - i - j <= n\n                ]\n            )\n        )\n    )\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-                    for i in range(3, n + 1)","-                    for j in range(2, x - i)","-                    if x - i - j < j < i","+                    for i in range(1, n - 1)","+                    for j in range(i + 1, n)","+                    if j < x - i - j <= n"],"diff_only_import_comment":false,"measured_runtime_v0":0.3140420382,"measured_runtime_v1":0.2154633672,"runtime_lift":1.4575194022,"key":["s777094380","s391711407"]}
{"user_id":"u141786930","problem_id":"p02760","language":"python","submission_id_v0":"s443014228","submission_id_v1":"s169210240","cpu_time_v0":371,"cpu_time_v1":319,"memory_v0":21804,"memory_v1":21720,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.02,"input":"import numpy as np\n\n\n\nA = np.zeros((3,3),int)\n\nfor i in range(3):\n\n    A[i,:] = np.array([int(x) for x in input().split()])\n\n    \n\nN = int(eval(input()))\n\n\n\nfor _ in range(N):\n\n    b = int(eval(input()))\n\n    A[A==b] = 0\n\n\n\nans = 'No'\n\nif np.sum(A[0,:])==0 or np.sum(A[1,:])==0 or np.sum(A[2,:])==0 or np.sum(A[:,0])==0 or np.sum(A[:,1])==0 or np.sum(A[:,2])==0 or np.sum(A[0,0]+A[1,1]+A[2,2])==0 or np.sum(A[0,2]+A[1,1]+A[2,0])==0:\n\n   ans = 'Yes'\n\n\n\nprint(ans)\n","target":"# B - Bingo\n\n\n\nimport numpy as np\n\n\n\nA = np.zeros((3,3), dtype=np.int64)\n\n\n\nfor i in range(3):\n\n    A[i] = [int(x) for x in input().split()]\n\n\n\nN = int(input())\n\n\n\nfor _ in range(N):\n\n    b = int(input())\n\n    A = np.where(A==b, 0, A)\n\n\n\nif sum(A[0])==0 or sum(A[1])==0 or sum(A[2])==0 or \\\n\n    sum(A[:,0])==0 or sum(A[:,1])==0 or sum(A[:,2])==0 or \\\n\n    A[0,0]+A[1,1]+A[2,2]==0 or \\\n\n    A[2,0]+A[1,1]+A[0,2]==0:\n\n    print('Yes')\n\nelse:\n\n    print('No')\n","code_v0_loc":17,"code_v1_loc":22,"code_v0_num_chars":451,"code_v1_num_chars":457,"code_v0_no_empty_lines":"import numpy as np\n\nA = np.zeros((3, 3), int)\nfor i in range(3):\n    A[i, :] = np.array([int(x) for x in input().split()])\nN = int(eval(input()))\nfor _ in range(N):\n    b = int(eval(input()))\n    A[A == b] = 0\nans = \"No\"\nif (\n    np.sum(A[0, :]) == 0\n    or np.sum(A[1, :]) == 0\n    or np.sum(A[2, :]) == 0\n    or np.sum(A[:, 0]) == 0\n    or np.sum(A[:, 1]) == 0\n    or np.sum(A[:, 2]) == 0\n    or np.sum(A[0, 0] + A[1, 1] + A[2, 2]) == 0\n    or np.sum(A[0, 2] + A[1, 1] + A[2, 0]) == 0\n):\n    ans = \"Yes\"\nprint(ans)\n","code_v1_no_empty_lines":"# B - Bingo\nimport numpy as np\n\nA = np.zeros((3, 3), dtype=np.int64)\nfor i in range(3):\n    A[i] = [int(x) for x in input().split()]\nN = int(input())\nfor _ in range(N):\n    b = int(input())\n    A = np.where(A == b, 0, A)\nif (\n    sum(A[0]) == 0\n    or sum(A[1]) == 0\n    or sum(A[2]) == 0\n    or sum(A[:, 0]) == 0\n    or sum(A[:, 1]) == 0\n    or sum(A[:, 2]) == 0\n    or A[0, 0] + A[1, 1] + A[2, 2] == 0\n    or A[2, 0] + A[1, 1] + A[0, 2] == 0\n):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","code_same":false,"relative_loc_diff_percent":22.7272727273,"diff":["+# B - Bingo","-A = np.zeros((3, 3), int)","+A = np.zeros((3, 3), dtype=np.int64)","-    A[i, :] = np.array([int(x) for x in input().split()])","-N = int(eval(input()))","+    A[i] = [int(x) for x in input().split()]","+N = int(input())","-    b = int(eval(input()))","-    A[A == b] = 0","-ans = \"No\"","+    b = int(input())","+    A = np.where(A == b, 0, A)","-    np.sum(A[0, :]) == 0","-    or np.sum(A[1, :]) == 0","-    or np.sum(A[2, :]) == 0","-    or np.sum(A[:, 0]) == 0","-    or np.sum(A[:, 1]) == 0","-    or np.sum(A[:, 2]) == 0","-    or np.sum(A[0, 0] + A[1, 1] + A[2, 2]) == 0","-    or np.sum(A[0, 2] + A[1, 1] + A[2, 0]) == 0","+    sum(A[0]) == 0","+    or sum(A[1]) == 0","+    or sum(A[2]) == 0","+    or sum(A[:, 0]) == 0","+    or sum(A[:, 1]) == 0","+    or sum(A[:, 2]) == 0","+    or A[0, 0] + A[1, 1] + A[2, 2] == 0","+    or A[2, 0] + A[1, 1] + A[0, 2] == 0","-    ans = \"Yes\"","-print(ans)","+    print(\"Yes\")","+else:","+    print(\"No\")"],"diff_only_import_comment":false,"measured_runtime_v0":1.363245188,"measured_runtime_v1":0.2093592176,"runtime_lift":6.5115126206,"key":["s443014228","s169210240"]}
{"user_id":"u070201429","problem_id":"p03608","language":"python","submission_id_v0":"s030633020","submission_id_v1":"s301564470","cpu_time_v0":137,"cpu_time_v1":113,"memory_v0":74552,"memory_v1":74516,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":17.52,"input":"def main():\n\n    from sys import stdin\n\n    input = stdin.readline\n\n\n\n    n, m, r = list(map(int, input().split()))\n\n    l = list(map(int, input().split()))\n\n    for i in range(r):\n\n        l[i] -= 1\n\n    d = [[10**8] * n for _ in range(n)]\n\n    for _ in range(m):\n\n        i, j, k = list(map(int, input().split()))\n\n        d[i-1][j-1] = k\n\n        d[j-1][i-1] = k\n\n\n\n    # Warshall-Floyd algorithm\n\n    for k in range(n):\n\n        for i in range(n):\n\n            for j in range(n):\n\n                if d[i][j] > d[i][k] + d[k][j]:\n\n                    d[i][j] = d[i][k] + d[k][j]\n\n\n\n    # full search\n\n    # 8! = 40320\n\n    from itertools import permutations\n\n\n\n    answer = 10**8\n\n    for i in permutations(l):\n\n        ans = 0\n\n        for j in range(r-1):\n\n            ans += d[i[j]][i[j+1]]\n\n        if ans < answer:\n\n            answer = ans\n\n\n\n    print(answer)\n\n\n\nmain()\n","target":"def main():\n\n    from sys import stdin\n\n    input = stdin.readline\n\n\n\n    n, m, r = list(map(int, input().split()))\n\n    l = list(map(int, input().split()))\n\n    for i in range(r):\n\n        l[i] -= 1\n\n    d = [[10**8] * n for _ in range(n)]\n\n    for _ in range(m):\n\n        i, j, k = list(map(int, input().split()))\n\n        d[i-1][j-1] = k\n\n        d[j-1][i-1] = k\n\n\n\n    # Warshall-Floyd algorithm\n\n    for k in range(n):\n\n        for i in range(n-1):\n\n            for j in range(i+1, n):\n\n                if d[i][j] > d[i][k] + d[k][j]:\n\n                    d[i][j] = d[i][k] + d[k][j]\n\n                    d[j][i] = d[i][j]\n\n\n\n    # full search\n\n    # 8! = 40320\n\n    from itertools import permutations\n\n\n\n    answer = 10**8\n\n    for i in permutations(l):\n\n        ans = 0\n\n        for j in range(r-1):\n\n            ans += d[i[j]][i[j+1]]\n\n        if ans < answer:\n\n            answer = ans\n\n\n\n    print(answer)\n\n\n\nmain()\n","code_v0_loc":36,"code_v1_loc":37,"code_v0_num_chars":868,"code_v1_num_chars":914,"code_v0_no_empty_lines":"def main():\n    from sys import stdin\n\n    input = stdin.readline\n    n, m, r = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    for i in range(r):\n        l[i] -= 1\n    d = [[10**8] * n for _ in range(n)]\n    for _ in range(m):\n        i, j, k = list(map(int, input().split()))\n        d[i - 1][j - 1] = k\n        d[j - 1][i - 1] = k\n    # Warshall-Floyd algorithm\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if d[i][j] > d[i][k] + d[k][j]:\n                    d[i][j] = d[i][k] + d[k][j]\n    # full search\n    # 8! = 40320\n    from itertools import permutations\n\n    answer = 10**8\n    for i in permutations(l):\n        ans = 0\n        for j in range(r - 1):\n            ans += d[i[j]][i[j + 1]]\n        if ans < answer:\n            answer = ans\n    print(answer)\n\n\nmain()\n","code_v1_no_empty_lines":"def main():\n    from sys import stdin\n\n    input = stdin.readline\n    n, m, r = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    for i in range(r):\n        l[i] -= 1\n    d = [[10**8] * n for _ in range(n)]\n    for _ in range(m):\n        i, j, k = list(map(int, input().split()))\n        d[i - 1][j - 1] = k\n        d[j - 1][i - 1] = k\n    # Warshall-Floyd algorithm\n    for k in range(n):\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if d[i][j] > d[i][k] + d[k][j]:\n                    d[i][j] = d[i][k] + d[k][j]\n                    d[j][i] = d[i][j]\n    # full search\n    # 8! = 40320\n    from itertools import permutations\n\n    answer = 10**8\n    for i in permutations(l):\n        ans = 0\n        for j in range(r - 1):\n            ans += d[i[j]][i[j + 1]]\n        if ans < answer:\n            answer = ans\n    print(answer)\n\n\nmain()\n","code_same":false,"relative_loc_diff_percent":2.7027027027,"diff":["-        for i in range(n):","-            for j in range(n):","+        for i in range(n - 1):","+            for j in range(i + 1, n):","+                    d[j][i] = d[i][j]"],"diff_only_import_comment":false,"measured_runtime_v0":0.2599997888,"measured_runtime_v1":0.1532082543,"runtime_lift":1.697035123,"key":["s030633020","s301564470"]}
{"user_id":"u994988729","problem_id":"p02702","language":"python","submission_id_v0":"s376874744","submission_id_v1":"s887269917","cpu_time_v0":337,"cpu_time_v1":135,"memory_v0":16640,"memory_v1":9800,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":59.94,"input":"from collections import Counter\n\nS = input()[::-1]\n\n\n\nmemo = [0]\n\nd = 0\n\nmod = 2019\n\n\n\nfor s in S:\n\n    tmp = int(s) * pow(10, d, mod) % mod\n\n    tmp = memo[-1] + tmp\n\n    memo.append(tmp % mod)\n\n    d += 1\n\n\n\nc = Counter(memo)\n\nans = sum(v * (v - 1) \/\/ 2 for v in list(c.values()))\n\nprint(ans)","target":"from collections import defaultdict\n\nS = eval(input())\n\nN = len(S)\n\n\n\nmemo = defaultdict(int)\n\nmemo[0] += 1\n\n\n\nmod = 2019\n\nd = 1\n\nval = 0\n\n\n\nfor s in S[::-1]:\n\n    s = int(s)\n\n    val += s * d\n\n    val %= mod\n\n    memo[val] += 1\n\n    d *= 10\n\n    d %= mod\n\n\n\nprint((sum(v * (v - 1) \/\/ 2 for v in list(memo.values()))))","code_v0_loc":16,"code_v1_loc":20,"code_v0_num_chars":288,"code_v1_num_chars":304,"code_v0_no_empty_lines":"from collections import Counter\n\nS = input()[::-1]\nmemo = [0]\nd = 0\nmod = 2019\nfor s in S:\n    tmp = int(s) * pow(10, d, mod) % mod\n    tmp = memo[-1] + tmp\n    memo.append(tmp % mod)\n    d += 1\nc = Counter(memo)\nans = sum(v * (v - 1) \/\/ 2 for v in list(c.values()))\nprint(ans)\n","code_v1_no_empty_lines":"from collections import defaultdict\n\nS = eval(input())\nN = len(S)\nmemo = defaultdict(int)\nmemo[0] += 1\nmod = 2019\nd = 1\nval = 0\nfor s in S[::-1]:\n    s = int(s)\n    val += s * d\n    val %= mod\n    memo[val] += 1\n    d *= 10\n    d %= mod\nprint((sum(v * (v - 1) \/\/ 2 for v in list(memo.values()))))\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["-from collections import Counter","+from collections import defaultdict","-S = input()[::-1]","-memo = [0]","-d = 0","+S = eval(input())","+N = len(S)","+memo = defaultdict(int)","+memo[0] += 1","-for s in S:","-    tmp = int(s) * pow(10, d, mod) % mod","-    tmp = memo[-1] + tmp","-    memo.append(tmp % mod)","-    d += 1","-c = Counter(memo)","-ans = sum(v * (v - 1) \/\/ 2 for v in list(c.values()))","-print(ans)","+d = 1","+val = 0","+for s in S[::-1]:","+    s = int(s)","+    val += s * d","+    val %= mod","+    memo[val] += 1","+    d *= 10","+    d %= mod","+print((sum(v * (v - 1) \/\/ 2 for v in list(memo.values()))))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2615414739,"measured_runtime_v1":0.0063235409,"runtime_lift":41.3599716541,"key":["s376874744","s887269917"]}
{"user_id":"u790710233","problem_id":"p02627","language":"python","submission_id_v0":"s724454634","submission_id_v1":"s209300808","cpu_time_v0":29,"cpu_time_v1":25,"memory_v0":9064,"memory_v1":9076,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.79,"input":"a = eval(input())\n\nprint(('A' if not a.islower() else 'a'))\n","target":"print(('A' if input().isupper() else 'a'))\n","code_v0_loc":2,"code_v1_loc":1,"code_v0_num_chars":52,"code_v1_num_chars":41,"code_v0_no_empty_lines":"a = eval(input())\nprint((\"A\" if not a.islower() else \"a\"))\n","code_v1_no_empty_lines":"print((\"A\" if input().isupper() else \"a\"))\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-a = eval(input())","-print((\"A\" if not a.islower() else \"a\"))","+print((\"A\" if input().isupper() else \"a\"))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3926431958,"measured_runtime_v1":0.2988653038,"runtime_lift":1.3137797892,"key":["s724454634","s209300808"]}
{"user_id":"u296518383","problem_id":"p03325","language":"python","submission_id_v0":"s558724347","submission_id_v1":"s377057284","cpu_time_v0":137,"cpu_time_v1":60,"memory_v0":4148,"memory_v1":3956,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":56.2,"input":"N=int(eval(input()))\n\na=list(map(int,input().split()))\n\nfor i in range(N):\n\n  for j in range(1,31):\n\n    if a[i]%(2**j)!=0:\n\n      a[i]=j-1\n\n      break\n\nprint((sum(a)))","target":"import sys\n\ninput = sys.stdin.buffer.readline\n\n\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n\n\ndef f(n):\n\n  res = 0\n\n  while n % 2 == 0:\n\n    n \/\/= 2\n\n    res += 1\n\n  return res\n\n\n\nanswer = 0\n\nfor a in A:\n\n  answer += f(a)\n\n\n\nprint(answer)","code_v0_loc":8,"code_v1_loc":18,"code_v0_num_chars":161,"code_v1_num_chars":250,"code_v0_no_empty_lines":"N = int(eval(input()))\na = list(map(int, input().split()))\nfor i in range(N):\n    for j in range(1, 31):\n        if a[i] % (2**j) != 0:\n            a[i] = j - 1\n            break\nprint((sum(a)))\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.buffer.readline\nN = int(eval(input()))\nA = list(map(int, input().split()))\n\n\ndef f(n):\n    res = 0\n    while n % 2 == 0:\n        n \/\/= 2\n        res += 1\n    return res\n\n\nanswer = 0\nfor a in A:\n    answer += f(a)\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":55.5555555556,"diff":["+import sys","+","+input = sys.stdin.buffer.readline","-a = list(map(int, input().split()))","-for i in range(N):","-    for j in range(1, 31):","-        if a[i] % (2**j) != 0:","-            a[i] = j - 1","-            break","-print((sum(a)))","+A = list(map(int, input().split()))","+","+","+def f(n):","+    res = 0","+    while n % 2 == 0:","+        n \/\/= 2","+        res += 1","+    return res","+","+","+answer = 0","+for a in A:","+    answer += f(a)","+print(answer)"],"diff_only_import_comment":false,"measured_runtime_v0":0.4158020542,"measured_runtime_v1":0.3166491349,"runtime_lift":1.313131818,"key":["s558724347","s377057284"]}
{"user_id":"u211706121","problem_id":"p02821","language":"python","submission_id_v0":"s417724663","submission_id_v1":"s715320802","cpu_time_v0":1145,"cpu_time_v1":532,"memory_v0":47196,"memory_v1":37156,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":53.54,"input":"import numpy as np\n\n\n\nn,m = [int(i) for i in input().split()]\n\na = [int(i) for i in input().split()]\n\nd = 2**18\n\n\n\nf = np.zeros(d,dtype=int)\n\nfor i in a:\n\n    f[i]+=1\n\n\n\ntf = np.fft.fft(f)\n\nf = np.fft.ifft(tf*tf)\n\nf = [int(i+0.5) for i in f]\n\n\n\nans=0\n\nfor i in range(len(f)-1,0,-1):\n\n    if f[i]<=m:\n\n        ans+=i*f[i]\n\n        m-=f[i]\n\n    elif f[i]>m:\n\n        ans+=i*m\n\n        break\n\nprint(ans)","target":"import numpy as np\n\n\n\nn,m = [int(i) for i in input().split()]\n\na = [int(i) for i in input().split()]\n\nd = 2**18\n\n\n\nf = np.zeros(d,dtype=int)\n\nfor i in a:\n\n    f[i]+=1\n\n\n\ntf = np.fft.rfft(f)\n\nf = np.fft.irfft(tf*tf)\n\nf = [int(i+0.5) for i in f]\n\n\n\nans=0\n\nfor i in range(len(f)-1,0,-1):\n\n    if f[i]<=m:\n\n        ans+=i*f[i]\n\n        m-=f[i]\n\n    elif f[i]>m:\n\n        ans+=i*m\n\n        break\n\nprint(ans)","code_v0_loc":23,"code_v1_loc":23,"code_v0_num_chars":400,"code_v1_num_chars":402,"code_v0_no_empty_lines":"import numpy as np\n\nn, m = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nd = 2**18\nf = np.zeros(d, dtype=int)\nfor i in a:\n    f[i] += 1\ntf = np.fft.fft(f)\nf = np.fft.ifft(tf * tf)\nf = [int(i + 0.5) for i in f]\nans = 0\nfor i in range(len(f) - 1, 0, -1):\n    if f[i] <= m:\n        ans += i * f[i]\n        m -= f[i]\n    elif f[i] > m:\n        ans += i * m\n        break\nprint(ans)\n","code_v1_no_empty_lines":"import numpy as np\n\nn, m = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nd = 2**18\nf = np.zeros(d, dtype=int)\nfor i in a:\n    f[i] += 1\ntf = np.fft.rfft(f)\nf = np.fft.irfft(tf * tf)\nf = [int(i + 0.5) for i in f]\nans = 0\nfor i in range(len(f) - 1, 0, -1):\n    if f[i] <= m:\n        ans += i * f[i]\n        m -= f[i]\n    elif f[i] > m:\n        ans += i * m\n        break\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-tf = np.fft.fft(f)","-f = np.fft.ifft(tf * tf)","+tf = np.fft.rfft(f)","+f = np.fft.irfft(tf * tf)"],"diff_only_import_comment":false,"measured_runtime_v0":3.91252525,"measured_runtime_v1":2.866683816,"runtime_lift":1.3648262247,"key":["s417724663","s715320802"]}
{"user_id":"u280552586","problem_id":"p03416","language":"python","submission_id_v0":"s181217545","submission_id_v1":"s674939126","cpu_time_v0":47,"cpu_time_v1":18,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":61.7,"input":"a, b = list(map(int, input().split()))\n\ncnt = 0\n\n\n\nfor i in range(a, b+1):\n\n    i = str(i)\n\n    if i[0] == i[-1] and i[1] == i[-2]:\n\n        cnt += 1\n\n\n\nprint(cnt)\n","target":"a, b = list(map(int, input().split()))\n\ncnt = 0\n\n\n\nfor i in range(10):\n\n    for j in range(10):\n\n        for k in range(10):\n\n            c = 10000*i+1000*j+100*k+10*j+i\n\n            if a <= c <= b:\n\n                cnt += 1\n\n\n\nprint(cnt)\n","code_v0_loc":9,"code_v1_loc":11,"code_v0_num_chars":158,"code_v1_num_chars":233,"code_v0_no_empty_lines":"a, b = list(map(int, input().split()))\ncnt = 0\nfor i in range(a, b + 1):\n    i = str(i)\n    if i[0] == i[-1] and i[1] == i[-2]:\n        cnt += 1\nprint(cnt)\n","code_v1_no_empty_lines":"a, b = list(map(int, input().split()))\ncnt = 0\nfor i in range(10):\n    for j in range(10):\n        for k in range(10):\n            c = 10000 * i + 1000 * j + 100 * k + 10 * j + i\n            if a <= c <= b:\n                cnt += 1\nprint(cnt)\n","code_same":false,"relative_loc_diff_percent":18.1818181818,"diff":["-for i in range(a, b + 1):","-    i = str(i)","-    if i[0] == i[-1] and i[1] == i[-2]:","-        cnt += 1","+for i in range(10):","+    for j in range(10):","+        for k in range(10):","+            c = 10000 * i + 1000 * j + 100 * k + 10 * j + i","+            if a <= c <= b:","+                cnt += 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.3654750098,"measured_runtime_v1":0.273478784,"runtime_lift":1.3363925508,"key":["s181217545","s674939126"]}
{"user_id":"u753803401","problem_id":"p03835","language":"python","submission_id_v0":"s742815481","submission_id_v1":"s376437490","cpu_time_v0":1589,"cpu_time_v1":1250,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":21.33,"input":"k, s = list(map(int, input().split()))\n\ncnt = 0\n\nfor i in range(k + 1):\n\n    for j in range(k + 1):\n\n        if i + j > s:\n\n            break\n\n        elif s - i - j <= k:\n\n            cnt += 1\n\nprint(cnt)\n","target":"k, s = list(map(int, input().split()))\n\ncnt = 0\n\nfor i in range(k + 1):\n\n    for j in range(k + 1):\n\n        if 0 <= s - i - j <= k:\n\n            cnt += 1\n\nprint(cnt)\n","code_v0_loc":9,"code_v1_loc":7,"code_v0_num_chars":200,"code_v1_num_chars":161,"code_v0_no_empty_lines":"k, s = list(map(int, input().split()))\ncnt = 0\nfor i in range(k + 1):\n    for j in range(k + 1):\n        if i + j > s:\n            break\n        elif s - i - j <= k:\n            cnt += 1\nprint(cnt)\n","code_v1_no_empty_lines":"k, s = list(map(int, input().split()))\ncnt = 0\nfor i in range(k + 1):\n    for j in range(k + 1):\n        if 0 <= s - i - j <= k:\n            cnt += 1\nprint(cnt)\n","code_same":false,"relative_loc_diff_percent":22.2222222222,"diff":["-        if i + j > s:","-            break","-        elif s - i - j <= k:","+        if 0 <= s - i - j <= k:"],"diff_only_import_comment":false,"measured_runtime_v0":0.3744940901,"measured_runtime_v1":0.2492418245,"runtime_lift":1.5025330956,"key":["s742815481","s376437490"]}
{"user_id":"u893063840","problem_id":"p02702","language":"python","submission_id_v0":"s375368375","submission_id_v1":"s846087139","cpu_time_v0":644,"cpu_time_v1":545,"memory_v0":26036,"memory_v1":24420,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.37,"input":"from collections import Counter\n\n\n\ns = eval(input())\n\nmod1 = 673\n\nmod2 = 3\n\n\n\nnum1 = 0\n\nnum2 = 0\n\nli1 = []\n\nli2 = []\n\npw1 = 10\n\npw2 = 10\n\nfor i, e in enumerate(s, 1):\n\n    num1 *= 10\n\n    num1 += int(e)\n\n    num1 %= mod1\n\n    inv = pow(pw1, mod1 - 2, mod1)\n\n    li1.append(num1 * inv % mod1)\n\n\n\n    num2 *= 10\n\n    num2 += int(e)\n\n    num2 %= mod2\n\n    inv = pow(pw2, mod2 - 2, mod2)\n\n    li2.append(num2 * inv % mod2)\n\n\n\n    pw1 *= 10\n\n    pw1 %= mod1\n\n    pw2 *= 10\n\n    pw2 %= mod2\n\n\n\nli = [0] + [10 * e1 + e2 for e1, e2 in zip(li1, li2)]\n\nc = Counter(li)\n\n\n\nans = 0\n\nfor v in list(c.values()):\n\n    ans += v * (v - 1) \/\/ 2\n\n\n\nprint(ans)\n","target":"from collections import Counter\n\n\n\n\n\ndef f(mod):\n\n    ret = [0]\n\n    power = 1\n\n    num = 0\n\n    for i, e in enumerate(s, 1):\n\n        num *= 10\n\n        num += int(e)\n\n        num %= mod\n\n\n\n        power *= 10\n\n        power %= mod\n\n        inv = pow(power, mod - 2, mod)\n\n\n\n        ret.append(num * inv % mod)\n\n\n\n    return ret\n\n\n\n\n\ns = eval(input())\n\n\n\nmod3 = f(3)\n\nmod673 = f(673)\n\n\n\nli = [10 * e673 + e3 for e3, e673 in zip(mod3, mod673)]\n\n\n\nc = Counter(li)\n\nans = 0\n\nfor v in list(c.values()):\n\n    ans += v * (v - 1) \/\/ 2\n\nprint(ans)\n","code_v0_loc":38,"code_v1_loc":33,"code_v0_num_chars":629,"code_v1_num_chars":529,"code_v0_no_empty_lines":"from collections import Counter\n\ns = eval(input())\nmod1 = 673\nmod2 = 3\nnum1 = 0\nnum2 = 0\nli1 = []\nli2 = []\npw1 = 10\npw2 = 10\nfor i, e in enumerate(s, 1):\n    num1 *= 10\n    num1 += int(e)\n    num1 %= mod1\n    inv = pow(pw1, mod1 - 2, mod1)\n    li1.append(num1 * inv % mod1)\n    num2 *= 10\n    num2 += int(e)\n    num2 %= mod2\n    inv = pow(pw2, mod2 - 2, mod2)\n    li2.append(num2 * inv % mod2)\n    pw1 *= 10\n    pw1 %= mod1\n    pw2 *= 10\n    pw2 %= mod2\nli = [0] + [10 * e1 + e2 for e1, e2 in zip(li1, li2)]\nc = Counter(li)\nans = 0\nfor v in list(c.values()):\n    ans += v * (v - 1) \/\/ 2\nprint(ans)\n","code_v1_no_empty_lines":"from collections import Counter\n\n\ndef f(mod):\n    ret = [0]\n    power = 1\n    num = 0\n    for i, e in enumerate(s, 1):\n        num *= 10\n        num += int(e)\n        num %= mod\n        power *= 10\n        power %= mod\n        inv = pow(power, mod - 2, mod)\n        ret.append(num * inv % mod)\n    return ret\n\n\ns = eval(input())\nmod3 = f(3)\nmod673 = f(673)\nli = [10 * e673 + e3 for e3, e673 in zip(mod3, mod673)]\nc = Counter(li)\nans = 0\nfor v in list(c.values()):\n    ans += v * (v - 1) \/\/ 2\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":13.1578947368,"diff":["+","+def f(mod):","+    ret = [0]","+    power = 1","+    num = 0","+    for i, e in enumerate(s, 1):","+        num *= 10","+        num += int(e)","+        num %= mod","+        power *= 10","+        power %= mod","+        inv = pow(power, mod - 2, mod)","+        ret.append(num * inv % mod)","+    return ret","+","+","-mod1 = 673","-mod2 = 3","-num1 = 0","-num2 = 0","-li1 = []","-li2 = []","-pw1 = 10","-pw2 = 10","-for i, e in enumerate(s, 1):","-    num1 *= 10","-    num1 += int(e)","-    num1 %= mod1","-    inv = pow(pw1, mod1 - 2, mod1)","-    li1.append(num1 * inv % mod1)","-    num2 *= 10","-    num2 += int(e)","-    num2 %= mod2","-    inv = pow(pw2, mod2 - 2, mod2)","-    li2.append(num2 * inv % mod2)","-    pw1 *= 10","-    pw1 %= mod1","-    pw2 *= 10","-    pw2 %= mod2","-li = [0] + [10 * e1 + e2 for e1, e2 in zip(li1, li2)]","+mod3 = f(3)","+mod673 = f(673)","+li = [10 * e673 + e3 for e3, e673 in zip(mod3, mod673)]"],"diff_only_import_comment":false,"measured_runtime_v0":0.4600284932,"measured_runtime_v1":0.2683121743,"runtime_lift":1.7145270963,"key":["s375368375","s846087139"]}
{"user_id":"u545368057","problem_id":"p02537","language":"python","submission_id_v0":"s842030357","submission_id_v1":"s767194684","cpu_time_v0":1764,"cpu_time_v1":1543,"memory_v0":141700,"memory_v1":111052,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":12.53,"input":"import sys\n\ninput = sys.stdin.readline\n\n\n\nn,k = list(map(int, input().split()))\n\nAs = [int(eval(input())) for i in range(n)]\n\n\n\n# N: \u51e6\u7406\u3059\u308b\u533a\u9593\u306e\u9577\u3055\n\n\n\nINF = 0\n\n\n\nmx = 300001\n\nLV = (mx-1).bit_length()\n\nN0 = 2**LV\n\ndata = [INF]*(2*N0)\n\nlazy = [None]*(2*N0)\n\n\n\n# \u4f1d\u642c\u5bfe\u8c61\u306e\u533a\u9593\u3092\u6c42\u3081\u308b\n\ndef gindex(l, r):\n\n    L = (l + N0) >> 1; R = (r + N0) >> 1\n\n    lc = 0 if l & 1 else (L & -L).bit_length()\n\n    rc = 0 if r & 1 else (R & -R).bit_length()\n\n    for i in range(LV):\n\n        if rc <= i:\n\n            yield R\n\n        if L < R and lc <= i:\n\n            yield L\n\n        L >>= 1; R >>= 1\n\n\n\n# \u9045\u5ef6\u4f1d\u642c\u51e6\u7406\n\ndef propagates(*ids):\n\n    for i in reversed(ids):\n\n        v = lazy[i-1]\n\n        if v is None:\n\n            continue\n\n        lazy[2*i-1] = data[2*i-1] = lazy[2*i] = data[2*i] = v\n\n        lazy[i-1] = None\n\n\n\n# \u533a\u9593[l, r)\u3092x\u3067\u66f4\u65b0\n\ndef update(l, r, x):\n\n    *ids, = gindex(l, r)\n\n    propagates(*ids)\n\n\n\n    L = N0 + l; R = N0 + r\n\n    while L < R:\n\n        if R & 1:\n\n            R -= 1\n\n            lazy[R-1] = data[R-1] = x\n\n        if L & 1:\n\n            lazy[L-1] = data[L-1] = x\n\n            L += 1\n\n        L >>= 1; R >>= 1\n\n    for i in ids:\n\n        data[i-1] = max(data[2*i-1], data[2*i])\n\n\n\n# \u533a\u9593[l, r)\u5185\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\n\ndef query(l, r):\n\n    propagates(*gindex(l, r))\n\n    L = N0 + l; R = N0 + r\n\n\n\n    s = INF\n\n    while L < R:\n\n        if R & 1:\n\n            R -= 1\n\n            s = max(s, data[R-1])\n\n        if L & 1:\n\n            s = max(s, data[L-1])\n\n            L += 1\n\n        L >>= 1; R >>= 1\n\n    return s\n\n\n\nupdate(As[0],As[0]+1,1)\n\nfor i, a in enumerate(As[1:]):\n\n    l = max(0,a-k)\n\n    r = min(mx,a+k)\n\n    upd = query(l,r+1)\n\n    if upd == -1:continue\n\n    # print(\"i\",i,\"a\",a,\"upd\",upd,\"l\",l,\"r\",r)\n\n    update(a, a+1, upd+1)\n\n\n\nans = 0\n\nfor a in set(As):\n\n    ans = max(ans,query(a,a+1))\n\nprint(ans)","target":"import sys\n\ninput = sys.stdin.readline\n\n\n\nn,k = list(map(int, input().split()))\n\nAs = [int(eval(input())) for i in range(n)]\n\n\n\n# N: \u51e6\u7406\u3059\u308b\u533a\u9593\u306e\u9577\u3055\n\n\n\nINF = 0\n\n\n\nmx = 300001\n\nLV = (mx-1).bit_length()\n\nN0 = 2**LV\n\ndata = [INF]*(2*N0)\n\nlazy = [None]*(2*N0)\n\n\n\n# \u4f1d\u642c\u5bfe\u8c61\u306e\u533a\u9593\u3092\u6c42\u3081\u308b\n\ndef gindex(l, r):\n\n    L = (l + N0) >> 1; R = (r + N0) >> 1\n\n    lc = 0 if l & 1 else (L & -L).bit_length()\n\n    rc = 0 if r & 1 else (R & -R).bit_length()\n\n    for i in range(LV):\n\n        if rc <= i:\n\n            yield R\n\n        if L < R and lc <= i:\n\n            yield L\n\n        L >>= 1; R >>= 1\n\n\n\n# \u9045\u5ef6\u4f1d\u642c\u51e6\u7406\n\ndef propagates(*ids):\n\n    for i in reversed(ids):\n\n        v = lazy[i-1]\n\n        if v is None:\n\n            continue\n\n        lazy[2*i-1] = data[2*i-1] = lazy[2*i] = data[2*i] = v\n\n        lazy[i-1] = None\n\n\n\n# \u533a\u9593[l, r)\u3092x\u3067\u66f4\u65b0\n\ndef update(l, r, x):\n\n    *ids, = gindex(l, r)\n\n    propagates(*ids)\n\n\n\n    L = N0 + l; R = N0 + r\n\n    while L < R:\n\n        if R & 1:\n\n            R -= 1\n\n            lazy[R-1] = data[R-1] = x\n\n        if L & 1:\n\n            lazy[L-1] = data[L-1] = x\n\n            L += 1\n\n        L >>= 1; R >>= 1\n\n    for i in ids:\n\n        data[i-1] = max(data[2*i-1], data[2*i])\n\n\n\n# \u533a\u9593[l, r)\u5185\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\n\ndef query(l, r):\n\n    propagates(*gindex(l, r))\n\n    L = N0 + l; R = N0 + r\n\n\n\n    s = INF\n\n    while L < R:\n\n        if R & 1:\n\n            R -= 1\n\n            s = max(s, data[R-1])\n\n        if L & 1:\n\n            s = max(s, data[L-1])\n\n            L += 1\n\n        L >>= 1; R >>= 1\n\n    return s\n\n\n\nans = 0\n\nupdate(As[0],As[0]+1,1)\n\nfor i, a in enumerate(As[1:]):\n\n    l = max(0,a-k)\n\n    r = min(mx,a+k)\n\n    upd = query(l,r+1)\n\n    if upd == -1:continue\n\n    # print(\"i\",i,\"a\",a,\"upd\",upd,\"l\",l,\"r\",r)\n\n    update(a, a+1, upd+1)\n\n    ans = max(ans, upd+1)\n\nprint(ans)\n\n\n","code_v0_loc":83,"code_v1_loc":82,"code_v0_num_chars":1786,"code_v1_num_chars":1762,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\n# N: \u51e6\u7406\u3059\u308b\u533a\u9593\u306e\u9577\u3055\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2**LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\n# \u4f1d\u642c\u5bfe\u8c61\u306e\u533a\u9593\u3092\u6c42\u3081\u308b\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & -L).bit_length()\n    rc = 0 if r & 1 else (R & -R).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if L < R and lc <= i:\n            yield L\n        L >>= 1\n        R >>= 1\n\n\n# \u9045\u5ef6\u4f1d\u642c\u51e6\u7406\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[2 * i - 1] = data[2 * i - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\n\n\n# \u533a\u9593[l, r)\u3092x\u3067\u66f4\u65b0\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[2 * i - 1], data[2 * i])\n\n\n# \u533a\u9593[l, r)\u5185\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\n\n\nupdate(As[0], As[0] + 1, 1)\nfor i, a in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    # print(\"i\",i,\"a\",a,\"upd\",upd,\"l\",l,\"r\",r)\n    update(a, a + 1, upd + 1)\nans = 0\nfor a in set(As):\n    ans = max(ans, query(a, a + 1))\nprint(ans)\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\n# N: \u51e6\u7406\u3059\u308b\u533a\u9593\u306e\u9577\u3055\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2**LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\n# \u4f1d\u642c\u5bfe\u8c61\u306e\u533a\u9593\u3092\u6c42\u3081\u308b\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & -L).bit_length()\n    rc = 0 if r & 1 else (R & -R).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if L < R and lc <= i:\n            yield L\n        L >>= 1\n        R >>= 1\n\n\n# \u9045\u5ef6\u4f1d\u642c\u51e6\u7406\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[2 * i - 1] = data[2 * i - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\n\n\n# \u533a\u9593[l, r)\u3092x\u3067\u66f4\u65b0\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[2 * i - 1], data[2 * i])\n\n\n# \u533a\u9593[l, r)\u5185\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\n\n\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor i, a in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    # print(\"i\",i,\"a\",a,\"upd\",upd,\"l\",l,\"r\",r)\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":1.2048192771,"diff":["+ans = 0","-ans = 0","-for a in set(As):","-    ans = max(ans, query(a, a + 1))","+    ans = max(ans, upd + 1)"],"diff_only_import_comment":false,"measured_runtime_v0":0.820688494,"measured_runtime_v1":0.5116031129,"runtime_lift":1.6041507043,"key":["s842030357","s767194684"]}
{"user_id":"u199290844","problem_id":"p02725","language":"python","submission_id_v0":"s958779549","submission_id_v1":"s995029254","cpu_time_v0":279,"cpu_time_v1":126,"memory_v0":35108,"memory_v1":26420,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":54.84,"input":"import numpy as np\n\n\n\nK, N = [int(i) for i in input().rstrip().split(' ')]\n\nA = [int(i) for i in input().rstrip().split(' ')]\n\n\n\nx = A[0]\n\ny = K - A[-1]\n\nn = [int(A[i+1] - A[i]) for i in range(N-1)]\n\nn.append(x+y)\n\n\n\nnp_list = np.array(n)\n\nn.pop(np_list.argmax())\n\nprint((sum(n)))","target":"k,n = list(map(int,input().split()))\n\na = list(map(int,input().split()))\n\n\n\ndp = [0 for i in range(n)]\n\ndp[0] = abs(k-a[-1]) + a[0]\n\n\n\nfor i in range(1,n):\n\n    dp[i] = abs(a[i]-a[i-1])\n\n\n\nprint((sum(dp) - max(dp)))","code_v0_loc":13,"code_v1_loc":10,"code_v0_num_chars":278,"code_v1_num_chars":213,"code_v0_no_empty_lines":"import numpy as np\n\nK, N = [int(i) for i in input().rstrip().split(\" \")]\nA = [int(i) for i in input().rstrip().split(\" \")]\nx = A[0]\ny = K - A[-1]\nn = [int(A[i + 1] - A[i]) for i in range(N - 1)]\nn.append(x + y)\nnp_list = np.array(n)\nn.pop(np_list.argmax())\nprint((sum(n)))\n","code_v1_no_empty_lines":"k, n = list(map(int, input().split()))\na = list(map(int, input().split()))\ndp = [0 for i in range(n)]\ndp[0] = abs(k - a[-1]) + a[0]\nfor i in range(1, n):\n    dp[i] = abs(a[i] - a[i - 1])\nprint((sum(dp) - max(dp)))\n","code_same":false,"relative_loc_diff_percent":23.0769230769,"diff":["-import numpy as np","-","-K, N = [int(i) for i in input().rstrip().split(\" \")]","-A = [int(i) for i in input().rstrip().split(\" \")]","-x = A[0]","-y = K - A[-1]","-n = [int(A[i + 1] - A[i]) for i in range(N - 1)]","-n.append(x + y)","-np_list = np.array(n)","-n.pop(np_list.argmax())","-print((sum(n)))","+k, n = list(map(int, input().split()))","+a = list(map(int, input().split()))","+dp = [0 for i in range(n)]","+dp[0] = abs(k - a[-1]) + a[0]","+for i in range(1, n):","+    dp[i] = abs(a[i] - a[i - 1])","+print((sum(dp) - max(dp)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.5235492842,"measured_runtime_v1":0.2507305129,"runtime_lift":6.0764414622,"key":["s958779549","s995029254"]}
{"user_id":"u029315034","problem_id":"p03253","language":"python","submission_id_v0":"s594579996","submission_id_v1":"s281376329","cpu_time_v0":178,"cpu_time_v1":23,"memory_v0":14168,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.08,"input":"from math import sqrt\n\nfrom scipy.misc import comb\n\n\n\ndef cal_factors(num):\n\n    factors = {}\n\n    maxmod = int(sqrt(num)) + 1\n\n    for mod in range(2, maxmod):\n\n        i = 0\n\n        while True:\n\n            d, q = divmod(num, mod)\n\n            if q == 0:\n\n                num = d\n\n                i += 1\n\n                factors[mod] = i\n\n            else:\n\n                break\n\n\n\n    if num > 1:\n\n        factors[num] = 1\n\n\n\n    return factors\n\n\n\n\n\nn, m = [int(v) for v in input().split()]\n\n\n\nmod = 1000000000 + 7\n\nfactors = cal_factors(m)\n\nans = 1\n\nfor v in list(factors.values()):\n\n    ans *= comb(v + n - 1, v, exact=True) % mod\n\n    ans %= mod\n\n\n\nprint(ans)","target":"from math import sqrt\n\n\n\ndef cal_factors(num):\n\n    factors = {}\n\n    maxmod = int(sqrt(num)) + 1\n\n    for mod in range(2, maxmod):\n\n        i = 0\n\n        while True:\n\n            d, q = divmod(num, mod)\n\n            if q == 0:\n\n                num = d\n\n                i += 1\n\n                factors[mod] = i\n\n            else:\n\n                break\n\n\n\n    if num > 1:\n\n        factors[num] = 1\n\n\n\n    return factors\n\n\n\n\n\ndef comb(n, r, mod):\n\n    result = 1\n\n    r = min(r, n-r)\n\n    for i in range(n, n-r, -1):\n\n        result *= i\n\n    for i in range(2, r+1):\n\n        result \/\/= i\n\n\n\n    return result % mod\n\n\n\n\n\nn, m = [int(v) for v in input().split()]\n\n\n\nmod = 1000000000 + 7\n\nfactors = cal_factors(m)\n\nans = 1\n\nfor v in list(factors.values()):\n\n    ans *= comb(v + n - 1, v, mod)\n\n    ans %= mod\n\n\n\nprint(ans)","code_v0_loc":33,"code_v1_loc":43,"code_v0_num_chars":661,"code_v1_num_chars":814,"code_v0_no_empty_lines":"from math import sqrt\nfrom scipy.misc import comb\n\n\ndef cal_factors(num):\n    factors = {}\n    maxmod = int(sqrt(num)) + 1\n    for mod in range(2, maxmod):\n        i = 0\n        while True:\n            d, q = divmod(num, mod)\n            if q == 0:\n                num = d\n                i += 1\n                factors[mod] = i\n            else:\n                break\n    if num > 1:\n        factors[num] = 1\n    return factors\n\n\nn, m = [int(v) for v in input().split()]\nmod = 1000000000 + 7\nfactors = cal_factors(m)\nans = 1\nfor v in list(factors.values()):\n    ans *= comb(v + n - 1, v, exact=True) % mod\n    ans %= mod\nprint(ans)\n","code_v1_no_empty_lines":"from math import sqrt\n\n\ndef cal_factors(num):\n    factors = {}\n    maxmod = int(sqrt(num)) + 1\n    for mod in range(2, maxmod):\n        i = 0\n        while True:\n            d, q = divmod(num, mod)\n            if q == 0:\n                num = d\n                i += 1\n                factors[mod] = i\n            else:\n                break\n    if num > 1:\n        factors[num] = 1\n    return factors\n\n\ndef comb(n, r, mod):\n    result = 1\n    r = min(r, n - r)\n    for i in range(n, n - r, -1):\n        result *= i\n    for i in range(2, r + 1):\n        result \/\/= i\n    return result % mod\n\n\nn, m = [int(v) for v in input().split()]\nmod = 1000000000 + 7\nfactors = cal_factors(m)\nans = 1\nfor v in list(factors.values()):\n    ans *= comb(v + n - 1, v, mod)\n    ans %= mod\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":23.2558139535,"diff":["-from scipy.misc import comb","+def comb(n, r, mod):","+    result = 1","+    r = min(r, n - r)","+    for i in range(n, n - r, -1):","+        result *= i","+    for i in range(2, r + 1):","+        result \/\/= i","+    return result % mod","+","+","-    ans *= comb(v + n - 1, v, exact=True) % mod","+    ans *= comb(v + n - 1, v, mod)"],"diff_only_import_comment":false,"measured_runtime_v0":0.6768635447,"measured_runtime_v1":0.1470470848,"runtime_lift":4.6030395335,"key":["s594579996","s281376329"]}
{"user_id":"u882564128","problem_id":"p03371","language":"python","submission_id_v0":"s136733954","submission_id_v1":"s827725289","cpu_time_v0":100,"cpu_time_v1":70,"memory_v0":9180,"memory_v1":9068,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":30.0,"input":"a, b, c, x, y = list(map(int, input().split(' ')))\n\n\n\nc = int(c*2)\n\nm = float('inf')\n\nfor i in range(10**5+1):\n\n    m = min(m, a*max(0, x-i)+b*max(0,y-i)+c*i)\n\nprint(m)","target":"import math\n\na, b, c, x, y = list(map(int, input().split(' ')))\n\nans = float('inf')\n\nc = c*2\n\nfor i in range(max(x, y)+1):\n\n    if i > x:\n\n        price = b*(y-i) + c*i\n\n    elif i > y:\n\n        price = a*(x-i) + c*i\n\n    else:\n\n        price = a*(x-i) + b*(y-i) + c*i\n\n\n\n    if ans > price:\n\n        ans = price\n\nprint(ans)","code_v0_loc":7,"code_v1_loc":15,"code_v0_num_chars":162,"code_v1_num_chars":318,"code_v0_no_empty_lines":"a, b, c, x, y = list(map(int, input().split(\" \")))\nc = int(c * 2)\nm = float(\"inf\")\nfor i in range(10**5 + 1):\n    m = min(m, a * max(0, x - i) + b * max(0, y - i) + c * i)\nprint(m)\n","code_v1_no_empty_lines":"import math\n\na, b, c, x, y = list(map(int, input().split(\" \")))\nans = float(\"inf\")\nc = c * 2\nfor i in range(max(x, y) + 1):\n    if i > x:\n        price = b * (y - i) + c * i\n    elif i > y:\n        price = a * (x - i) + c * i\n    else:\n        price = a * (x - i) + b * (y - i) + c * i\n    if ans > price:\n        ans = price\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":53.3333333333,"diff":["+import math","+","-c = int(c * 2)","-m = float(\"inf\")","-for i in range(10**5 + 1):","-    m = min(m, a * max(0, x - i) + b * max(0, y - i) + c * i)","-print(m)","+ans = float(\"inf\")","+c = c * 2","+for i in range(max(x, y) + 1):","+    if i > x:","+        price = b * (y - i) + c * i","+    elif i > y:","+        price = a * (x - i) + c * i","+    else:","+        price = a * (x - i) + b * (y - i) + c * i","+    if ans > price:","+        ans = price","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.0457227323,"measured_runtime_v1":0.348341011,"runtime_lift":3.0020086614,"key":["s136733954","s827725289"]}
{"user_id":"u094191970","problem_id":"p03575","language":"python","submission_id_v0":"s541572320","submission_id_v1":"s786496298","cpu_time_v0":431,"cpu_time_v1":33,"memory_v0":22604,"memory_v1":3444,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":92.34,"input":"from scipy.sparse.csgraph import floyd_warshall\n\n\n\nn,m=list(map(int,input().split()))\n\nl=[list(map(int,input().split())) for i in range(m)]\n\n\n\nans=0\n\nfor i in range(m):\n\n    ll=l[:i]+l[i+1:]\n\n\n\n    d=[[float('inf')]*n for i in range(n)]\n\n    for i in range(n):\n\n        d[i][i]=0\n\n\n\n    for j in ll:\n\n        d[j[0]-1][j[1]-1]=1\n\n        d[j[1]-1][j[0]-1]=1\n\n\n\n    d=floyd_warshall(d)\n\n\n\n    if float('inf') in d:\n\n        ans+=1\n\n\n\nprint(ans)","target":"class UnionFind():\n\n    def __init__(self, n):\n\n        self.n = n\n\n        self.parents = [-1] * n\n\n\n\n    def find(self, x):\n\n        if self.parents[x] < 0:\n\n            return x\n\n        else:\n\n            self.parents[x] = self.find(self.parents[x])\n\n            return self.parents[x]\n\n\n\n    def union(self, x, y):\n\n        x = self.find(x)\n\n        y = self.find(y)\n\n\n\n        if x == y:\n\n            return\n\n\n\n        if self.parents[x] > self.parents[y]:\n\n            x, y = y, x\n\n\n\n        self.parents[x] += self.parents[y]\n\n        self.parents[y] = x\n\n\n\n    def roots(self):\n\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n\n\n    def group_count(self):\n\n        return len(self.roots())\n\n\n\nfrom copy import deepcopy\n\n\n\nn,m=list(map(int,input().split()))\n\nl=[list(map(int,input().split())) for i in range(m)]\n\n\n\ncnt=0\n\nfor i in range(m):\n\n  uf=UnionFind(n)\n\n  ll=deepcopy(l)\n\n  del ll[i]\n\n  for a,b in ll:\n\n    a-=1\n\n    b-=1\n\n    uf.union(a,b)\n\n  if uf.group_count()>=2:\n\n    cnt+=1\n\nprint(cnt)","code_v0_loc":23,"code_v1_loc":48,"code_v0_num_chars":437,"code_v1_num_chars":1017,"code_v0_no_empty_lines":"from scipy.sparse.csgraph import floyd_warshall\n\nn, m = list(map(int, input().split()))\nl = [list(map(int, input().split())) for i in range(m)]\nans = 0\nfor i in range(m):\n    ll = l[:i] + l[i + 1 :]\n    d = [[float(\"inf\")] * n for i in range(n)]\n    for i in range(n):\n        d[i][i] = 0\n    for j in ll:\n        d[j[0] - 1][j[1] - 1] = 1\n        d[j[1] - 1][j[0] - 1] = 1\n    d = floyd_warshall(d)\n    if float(\"inf\") in d:\n        ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"class UnionFind:\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x == y:\n            return\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n\nfrom copy import deepcopy\n\nn, m = list(map(int, input().split()))\nl = [list(map(int, input().split())) for i in range(m)]\ncnt = 0\nfor i in range(m):\n    uf = UnionFind(n)\n    ll = deepcopy(l)\n    del ll[i]\n    for a, b in ll:\n        a -= 1\n        b -= 1\n        uf.union(a, b)\n    if uf.group_count() >= 2:\n        cnt += 1\nprint(cnt)\n","code_same":false,"relative_loc_diff_percent":52.0833333333,"diff":["-from scipy.sparse.csgraph import floyd_warshall","+class UnionFind:","+    def __init__(self, n):","+        self.n = n","+        self.parents = [-1] * n","+","+    def find(self, x):","+        if self.parents[x] < 0:","+            return x","+        else:","+            self.parents[x] = self.find(self.parents[x])","+            return self.parents[x]","+","+    def union(self, x, y):","+        x = self.find(x)","+        y = self.find(y)","+        if x == y:","+            return","+        if self.parents[x] > self.parents[y]:","+            x, y = y, x","+        self.parents[x] += self.parents[y]","+        self.parents[y] = x","+","+    def roots(self):","+        return [i for i, x in enumerate(self.parents) if x < 0]","+","+    def group_count(self):","+        return len(self.roots())","+","+","+from copy import deepcopy","-ans = 0","+cnt = 0","-    ll = l[:i] + l[i + 1 :]","-    d = [[float(\"inf\")] * n for i in range(n)]","-    for i in range(n):","-        d[i][i] = 0","-    for j in ll:","-        d[j[0] - 1][j[1] - 1] = 1","-        d[j[1] - 1][j[0] - 1] = 1","-    d = floyd_warshall(d)","-    if float(\"inf\") in d:","-        ans += 1","-print(ans)","+    uf = UnionFind(n)","+    ll = deepcopy(l)","+    del ll[i]","+    for a, b in ll:","+        a -= 1","+        b -= 1","+        uf.union(a, b)","+    if uf.group_count() >= 2:","+        cnt += 1","+print(cnt)"],"diff_only_import_comment":false,"measured_runtime_v0":2.1057568979,"measured_runtime_v1":0.2238623059,"runtime_lift":9.4064826571,"key":["s541572320","s786496298"]}
{"user_id":"u547492399","problem_id":"p02414","language":"python","submission_id_v0":"s921780738","submission_id_v1":"s807901791","cpu_time_v0":510,"cpu_time_v1":320,"memory_v0":9192,"memory_v1":9076,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":37.25,"input":"n, m, l = list(map(int, input().split()))\n\n\n\na = [0]*n\n\nb = [0]*m\n\nc = [[0 for col in range(l)] for row in range(n)]\n\n\n\nfor i in range(n):\n\n    a[i] = list(map(int,input().split()))\n\n\n\nfor i in range(m):\n\n    b[i] = list(map(int,input().split()))\n\n\n\n\n\nfor i in range(n):\n\n    for j in range(l):\n\n        for k in range(m):\n\n            c[i][j] += a[i][k]*b[k][j]\n\n    print((*c[i]))","target":"n, m, l = list(map(int, input().split()))\n\n\n\na = [0]*n\n\nb = [0]*m\n\nc = [[0 for col in range(l)] for row in range(n)]\n\n\n\nfor i in range(n):\n\n    a[i] = list(map(int,input().split()))\n\n\n\nfor i in range(m):\n\n    b[i] = list(map(int,input().split()))\n\n\n\n\n\nfor i in range(n):\n\n    for j in range(l):\n\n        c[i][j] = sum([a[i][k]*b[k][j] for k in range(m)])\n\n#        for k in range(m):\n\n#            c[i][j] += a[i][k]*b[k][j]\n\n    print((*c[i]))","code_v0_loc":18,"code_v1_loc":19,"code_v0_num_chars":380,"code_v1_num_chars":442,"code_v0_no_empty_lines":"n, m, l = list(map(int, input().split()))\na = [0] * n\nb = [0] * m\nc = [[0 for col in range(l)] for row in range(n)]\nfor i in range(n):\n    a[i] = list(map(int, input().split()))\nfor i in range(m):\n    b[i] = list(map(int, input().split()))\nfor i in range(n):\n    for j in range(l):\n        for k in range(m):\n            c[i][j] += a[i][k] * b[k][j]\n    print((*c[i]))\n","code_v1_no_empty_lines":"n, m, l = list(map(int, input().split()))\na = [0] * n\nb = [0] * m\nc = [[0 for col in range(l)] for row in range(n)]\nfor i in range(n):\n    a[i] = list(map(int, input().split()))\nfor i in range(m):\n    b[i] = list(map(int, input().split()))\nfor i in range(n):\n    for j in range(l):\n        c[i][j] = sum([a[i][k] * b[k][j] for k in range(m)])\n    #        for k in range(m):\n    #            c[i][j] += a[i][k]*b[k][j]\n    print((*c[i]))\n","code_same":false,"relative_loc_diff_percent":5.2631578947,"diff":["-        for k in range(m):","-            c[i][j] += a[i][k] * b[k][j]","+        c[i][j] = sum([a[i][k] * b[k][j] for k in range(m)])","+    #        for k in range(m):","+    #            c[i][j] += a[i][k]*b[k][j]"],"diff_only_import_comment":false,"measured_runtime_v0":0.2572952261,"measured_runtime_v1":0.1473404789,"runtime_lift":1.7462629958,"key":["s921780738","s807901791"]}
{"user_id":"u729133443","problem_id":"p02983","language":"python","submission_id_v0":"s140577970","submission_id_v1":"s371672772","cpu_time_v0":591,"cpu_time_v1":74,"memory_v0":40556,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.48,"input":"l,r=list(map(int,input().split()))\n\ns=list(range(l,r+1))[:2019]\n\nprint((min(i*j%2019for i in s for j in s if i<j)))","target":"l,r=list(map(int,input().split()));s=list(range(l,r+1))[:673];print((min(i*j%2019for i in s for j in s if i<j)))","code_v0_loc":3,"code_v1_loc":1,"code_v0_num_chars":101,"code_v1_num_chars":98,"code_v0_no_empty_lines":"l, r = list(map(int, input().split()))\ns = list(range(l, r + 1))[:2019]\nprint((min(i * j % 2019 for i in s for j in s if i < j)))\n","code_v1_no_empty_lines":"l, r = list(map(int, input().split()))\ns = list(range(l, r + 1))[:673]\nprint((min(i * j % 2019 for i in s for j in s if i < j)))\n","code_same":false,"relative_loc_diff_percent":66.6666666667,"diff":["-s = list(range(l, r + 1))[:2019]","+s = list(range(l, r + 1))[:673]"],"diff_only_import_comment":false,"measured_runtime_v0":0.3116879605,"measured_runtime_v1":0.2372809026,"runtime_lift":1.3135821597,"key":["s140577970","s371672772"]}
{"user_id":"u977389981","problem_id":"p03945","language":"python","submission_id_v0":"s766452702","submission_id_v1":"s266627272","cpu_time_v0":58,"cpu_time_v1":33,"memory_v0":3188,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":43.1,"input":"s = eval(input())\n\ncnt = 0\n\nfor i in range(len(s) - 1):\n\n    if s[i] == 'W' and s[i + 1] == 'B':\n\n        cnt += 1\n\n    if s[i] == 'B' and s[i + 1] == 'W':\n\n        cnt += 1\n\nprint(cnt)","target":"S = eval(input())\n\n\n\ntmp = S[0]\n\ncnt = 0\n\nfor s in S[1:]:\n\n    if tmp != s:\n\n        cnt += 1\n\n        tmp = s\n\n        \n\nprint(cnt)","code_v0_loc":8,"code_v1_loc":10,"code_v0_num_chars":179,"code_v1_num_chars":126,"code_v0_no_empty_lines":"s = eval(input())\ncnt = 0\nfor i in range(len(s) - 1):\n    if s[i] == \"W\" and s[i + 1] == \"B\":\n        cnt += 1\n    if s[i] == \"B\" and s[i + 1] == \"W\":\n        cnt += 1\nprint(cnt)\n","code_v1_no_empty_lines":"S = eval(input())\ntmp = S[0]\ncnt = 0\nfor s in S[1:]:\n    if tmp != s:\n        cnt += 1\n        tmp = s\nprint(cnt)\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["-s = eval(input())","+S = eval(input())","+tmp = S[0]","-for i in range(len(s) - 1):","-    if s[i] == \"W\" and s[i + 1] == \"B\":","+for s in S[1:]:","+    if tmp != s:","-    if s[i] == \"B\" and s[i + 1] == \"W\":","-        cnt += 1","+        tmp = s"],"diff_only_import_comment":false,"measured_runtime_v0":0.2203695748,"measured_runtime_v1":0.0064766238,"runtime_lift":34.0253783683,"key":["s766452702","s266627272"]}
{"user_id":"u977389981","problem_id":"p03796","language":"python","submission_id_v0":"s559298633","submission_id_v1":"s569125766","cpu_time_v0":231,"cpu_time_v1":41,"memory_v0":3984,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":82.25,"input":"import math\n\nmod = 10 ** 9 + 7\n\nn = int(eval(input()))\n\nprint((math.factorial(n) % mod))","target":"mod = 10 ** 9 + 7\n\nn = int(eval(input()))\n\nans = 1\n\nfor i in range(1, n + 1):\n\n    ans *= i\n\n    ans %= mod\n\nprint(ans)","code_v0_loc":4,"code_v1_loc":7,"code_v0_num_chars":80,"code_v1_num_chars":113,"code_v0_no_empty_lines":"import math\n\nmod = 10**9 + 7\nn = int(eval(input()))\nprint((math.factorial(n) % mod))\n","code_v1_no_empty_lines":"mod = 10**9 + 7\nn = int(eval(input()))\nans = 1\nfor i in range(1, n + 1):\n    ans *= i\n    ans %= mod\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":42.8571428571,"diff":["-import math","-","-print((math.factorial(n) % mod))","+ans = 1","+for i in range(1, n + 1):","+    ans *= i","+    ans %= mod","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.5416102607,"measured_runtime_v1":0.2347814059,"runtime_lift":2.3068703357,"key":["s559298633","s569125766"]}
{"user_id":"u186426563","problem_id":"p03416","language":"python","submission_id_v0":"s658008469","submission_id_v1":"s153128369","cpu_time_v0":69,"cpu_time_v1":18,"memory_v0":2940,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":73.91,"input":"A, B = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(A, B+1):\n\n    if(str(i) == str(i)[::-1]):\n\n        count += 1\n\nprint(count)\n","target":"A, B = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(10):\n\n    for j in range(10):\n\n        for k in range(10):\n\n            if(A <= 10000*i + 1000*j + 100*k + 10*j +i <= B):\n\n                count += 1\n\nprint(count)","code_v0_loc":6,"code_v1_loc":8,"code_v0_num_chars":136,"code_v1_num_chars":223,"code_v0_no_empty_lines":"A, B = list(map(int, input().split()))\ncount = 0\nfor i in range(A, B + 1):\n    if str(i) == str(i)[::-1]:\n        count += 1\nprint(count)\n","code_v1_no_empty_lines":"A, B = list(map(int, input().split()))\ncount = 0\nfor i in range(10):\n    for j in range(10):\n        for k in range(10):\n            if A <= 10000 * i + 1000 * j + 100 * k + 10 * j + i <= B:\n                count += 1\nprint(count)\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-for i in range(A, B + 1):","-    if str(i) == str(i)[::-1]:","-        count += 1","+for i in range(10):","+    for j in range(10):","+        for k in range(10):","+            if A <= 10000 * i + 1000 * j + 100 * k + 10 * j + i <= B:","+                count += 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.2767280417,"measured_runtime_v1":0.2133212276,"runtime_lift":1.2972363083,"key":["s658008469","s153128369"]}
{"user_id":"u864013199","problem_id":"p03013","language":"python","submission_id_v0":"s190076821","submission_id_v1":"s577413214","cpu_time_v0":508,"cpu_time_v1":180,"memory_v0":50008,"memory_v1":7848,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":64.57,"input":"Mod = 10**9+7\n\nN,M = list(map(int, input().split()))\n\na = [int(eval(input())) for _ in range(M)]\n\nb = [1]*(N+1)\n\nfor j in a:\n\n    b[j] = 0\n\nfor i in range(1,N+1):\n\n    if b[i] == 0:\n\n        continue\n\n    if i == 1:\n\n        b[1] = 1\n\n        continue\n\n    b[i] = b[i-1]+b[i-2]\n\n    if b[i] >= Mod:\n\n        b[i] %= Mod\n\nprint((b[N]))","target":"# https:\/\/atcoder.jp\/contests\/abc129\/submissions\/5841482 \u3092\u53c2\u8003 \n\nN,M = list(map(int, input().split()))\n\nA = [int(eval(input())) for _ in range(M)]\n\nMOD = 10**9 + 7\n\nF = [1]*(N+1)\n\nfor j in A:\n\n    F[j-1] = 0\n\n \n\na = 1; b = 0\n\nfor i in range(N):\n\n    if not F[i]:    #F[i] == 0\n\n        a, b = 0, a\n\n    else:\n\n        a, b = ((a+b) % MOD), a\n\nprint(a)","code_v0_loc":16,"code_v1_loc":15,"code_v0_num_chars":320,"code_v1_num_chars":337,"code_v0_no_empty_lines":"Mod = 10**9 + 7\nN, M = list(map(int, input().split()))\na = [int(eval(input())) for _ in range(M)]\nb = [1] * (N + 1)\nfor j in a:\n    b[j] = 0\nfor i in range(1, N + 1):\n    if b[i] == 0:\n        continue\n    if i == 1:\n        b[1] = 1\n        continue\n    b[i] = b[i - 1] + b[i - 2]\n    if b[i] >= Mod:\n        b[i] %= Mod\nprint((b[N]))\n","code_v1_no_empty_lines":"# https:\/\/atcoder.jp\/contests\/abc129\/submissions\/5841482 \u3092\u53c2\u8003\nN, M = list(map(int, input().split()))\nA = [int(eval(input())) for _ in range(M)]\nMOD = 10**9 + 7\nF = [1] * (N + 1)\nfor j in A:\n    F[j - 1] = 0\na = 1\nb = 0\nfor i in range(N):\n    if not F[i]:  # F[i] == 0\n        a, b = 0, a\n    else:\n        a, b = ((a + b) % MOD), a\nprint(a)\n","code_same":false,"relative_loc_diff_percent":6.25,"diff":["-Mod = 10**9 + 7","+# https:\/\/atcoder.jp\/contests\/abc129\/submissions\/5841482 \u3092\u53c2\u8003","-a = [int(eval(input())) for _ in range(M)]","-b = [1] * (N + 1)","-for j in a:","-    b[j] = 0","-for i in range(1, N + 1):","-    if b[i] == 0:","-        continue","-    if i == 1:","-        b[1] = 1","-        continue","-    b[i] = b[i - 1] + b[i - 2]","-    if b[i] >= Mod:","-        b[i] %= Mod","-print((b[N]))","+A = [int(eval(input())) for _ in range(M)]","+MOD = 10**9 + 7","+F = [1] * (N + 1)","+for j in A:","+    F[j - 1] = 0","+a = 1","+b = 0","+for i in range(N):","+    if not F[i]:  # F[i] == 0","+        a, b = 0, a","+    else:","+        a, b = ((a + b) % MOD), a","+print(a)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2807373931,"measured_runtime_v1":0.2199227238,"runtime_lift":1.2765274471,"key":["s190076821","s577413214"]}
{"user_id":"u247830763","problem_id":"p02555","language":"python","submission_id_v0":"s099094742","submission_id_v1":"s047523250","cpu_time_v0":119,"cpu_time_v1":62,"memory_v0":9192,"memory_v1":63452,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":47.9,"input":"n = int(eval(input()))\n\nmx = n\/\/3\n\nans = 0\n\nmod = 10**9+7\n\nimport math\n\ndef combinations_count(n, r): #\u7d44\u307f\u5408\u308f\u305b(nCr)\n\n    return math.factorial(n) \/\/ (math.factorial(n - r) * math.factorial(r))\n\nfor i in range(1,mx+1):\n\n    if i == 1:\n\n        ans += 1\n\n    else:\n\n        ans += combinations_count(n-2*i-1,i-1) % mod\n\nprint((ans%mod))","target":"s = int(eval(input()))\n\ndp = [0]*(2001)\n\ndp[3] = 1\n\nmod = 10**9+7\n\nfor i in range(4,s+1):\n\n    dp[i] = (dp[i-1] + dp[i-3]) % mod\n\nprint((dp[s]))","code_v0_loc":13,"code_v1_loc":7,"code_v0_num_chars":324,"code_v1_num_chars":136,"code_v0_no_empty_lines":"n = int(eval(input()))\nmx = n \/\/ 3\nans = 0\nmod = 10**9 + 7\nimport math\n\n\ndef combinations_count(n, r):  # \u7d44\u307f\u5408\u308f\u305b(nCr)\n    return math.factorial(n) \/\/ (math.factorial(n - r) * math.factorial(r))\n\n\nfor i in range(1, mx + 1):\n    if i == 1:\n        ans += 1\n    else:\n        ans += combinations_count(n - 2 * i - 1, i - 1) % mod\nprint((ans % mod))\n","code_v1_no_empty_lines":"s = int(eval(input()))\ndp = [0] * (2001)\ndp[3] = 1\nmod = 10**9 + 7\nfor i in range(4, s + 1):\n    dp[i] = (dp[i - 1] + dp[i - 3]) % mod\nprint((dp[s]))\n","code_same":false,"relative_loc_diff_percent":46.1538461538,"diff":["-n = int(eval(input()))","-mx = n \/\/ 3","-ans = 0","+s = int(eval(input()))","+dp = [0] * (2001)","+dp[3] = 1","-import math","-","-","-def combinations_count(n, r):  # \u7d44\u307f\u5408\u308f\u305b(nCr)","-    return math.factorial(n) \/\/ (math.factorial(n - r) * math.factorial(r))","-","-","-for i in range(1, mx + 1):","-    if i == 1:","-        ans += 1","-    else:","-        ans += combinations_count(n - 2 * i - 1, i - 1) % mod","-print((ans % mod))","+for i in range(4, s + 1):","+    dp[i] = (dp[i - 1] + dp[i - 3]) % mod","+print((dp[s]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2684851468,"measured_runtime_v1":0.2075273387,"runtime_lift":1.2937338684,"key":["s099094742","s047523250"]}
{"user_id":"u321071346","problem_id":"p03494","language":"python","submission_id_v0":"s013135216","submission_id_v1":"s040740173","cpu_time_v0":118,"cpu_time_v1":30,"memory_v0":27148,"memory_v1":9044,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":74.58,"input":"import numpy as np\n\nn = int(eval(input()))\n\na_list = np.array(list(map(int, input().split())))\n\n\n\ncounter = 0\n\nwhile True:\n\n    if np.sum(a_list % 2) > 0:\n\n        break\n\n    counter += 1\n\n    a_list = a_list \/ 2\n\nprint(counter)\n","target":"n = int(eval(input()))\n\na_list = list(map(int, input().split()))\n\n\n\nstatus = True\n\nexecute = 0\n\nwhile status:\n\n    for i in range(n):\n\n        if a_list[i] % 2 == 1:\n\n            status = False\n\n            break\n\n        else:\n\n            a_list[i] = a_list[i] \/ 2\n\n    if status:\n\n        execute += 1\n\nprint(execute)\n","code_v0_loc":11,"code_v1_loc":15,"code_v0_num_chars":223,"code_v1_num_chars":315,"code_v0_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\na_list = np.array(list(map(int, input().split())))\ncounter = 0\nwhile True:\n    if np.sum(a_list % 2) > 0:\n        break\n    counter += 1\n    a_list = a_list \/ 2\nprint(counter)\n","code_v1_no_empty_lines":"n = int(eval(input()))\na_list = list(map(int, input().split()))\nstatus = True\nexecute = 0\nwhile status:\n    for i in range(n):\n        if a_list[i] % 2 == 1:\n            status = False\n            break\n        else:\n            a_list[i] = a_list[i] \/ 2\n    if status:\n        execute += 1\nprint(execute)\n","code_same":false,"relative_loc_diff_percent":26.6666666667,"diff":["-import numpy as np","-","-a_list = np.array(list(map(int, input().split())))","-counter = 0","-while True:","-    if np.sum(a_list % 2) > 0:","-        break","-    counter += 1","-    a_list = a_list \/ 2","-print(counter)","+a_list = list(map(int, input().split()))","+status = True","+execute = 0","+while status:","+    for i in range(n):","+        if a_list[i] % 2 == 1:","+            status = False","+            break","+        else:","+            a_list[i] = a_list[i] \/ 2","+    if status:","+        execute += 1","+print(execute)"],"diff_only_import_comment":false,"measured_runtime_v0":1.2315113308,"measured_runtime_v1":0.1929617555,"runtime_lift":6.3821523985,"key":["s013135216","s040740173"]}
{"user_id":"u207799478","problem_id":"p03568","language":"python","submission_id_v0":"s195491532","submission_id_v1":"s278252901","cpu_time_v0":90,"cpu_time_v1":25,"memory_v0":3832,"memory_v1":3832,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":72.22,"input":"import math\n\nimport string\n\n\n\n\n\ndef readints():\n\n    return list(map(int, input().split()))\n\n\n\n\n\ndef nCr(n, r):\n\n    return math.factorial(n)\/\/(math.factorial(n-r)*math.factorial(r))\n\n\n\n\n\ndef has_duplicates2(seq):\n\n    seen = []\n\n    for item in seq:\n\n        if not(item in seen):\n\n            seen.append(item)\n\n    return len(seq) != len(seen)\n\n\n\n\n\ndef divisor(n):\n\n    divisor = []\n\n    for i in range(1, n+1):\n\n        if n % i == 0:\n\n            divisor.append(i)\n\n    return divisor\n\n\n\n\n\n# coordinates\n\ndx = [-1, -1, -1, 0, 0, 1, 1, 1]\n\ndy = [-1, 0, 1, -1, 1, -1, 0, 1]\n\n\n\nn = int(eval(input()))\n\na = readints()\n\n\n\n\n\ndef func(l):\n\n    if len(l) == n:\n\n        for i in range(len(l)):\n\n            if l[i] % 2 == 0:\n\n                return 1\n\n\n\n        return 0\n\n    return func(l+[(a[len(l)])])+func(l+[(a[len(l)]-1)])+func(l+[(a[len(l)]+1)])\n\n\n\n\n\nprint((func([])))\n","target":"import math\n\nimport string\n\n\n\n\n\ndef readints():\n\n    return list(map(int, input().split()))\n\n\n\n\n\ndef nCr(n, r):\n\n    return math.factorial(n)\/\/(math.factorial(n-r)*math.factorial(r))\n\n\n\n\n\ndef has_duplicates2(seq):\n\n    seen = []\n\n    for item in seq:\n\n        if not(item in seen):\n\n            seen.append(item)\n\n    return len(seq) != len(seen)\n\n\n\n\n\ndef divisor(n):\n\n    divisor = []\n\n    for i in range(1, n+1):\n\n        if n % i == 0:\n\n            divisor.append(i)\n\n    return divisor\n\n\n\n\n\n# coordinates\n\ndx = [-1, -1, -1, 0, 0, 1, 1, 1]\n\ndy = [-1, 0, 1, -1, 1, -1, 0, 1]\n\n\n\nn = int(eval(input()))\n\na = readints()\n\nsum = 1\n\nfor i in range(len(a)):\n\n    if a[i] % 2 == 0:\n\n        sum *= 2\n\n    else:\n\n        sum *= 1\n\nprint((3**len(a)-sum))\n","code_v0_loc":47,"code_v1_loc":41,"code_v0_num_chars":865,"code_v1_num_chars":739,"code_v0_no_empty_lines":"import math\nimport string\n\n\ndef readints():\n    return list(map(int, input().split()))\n\n\ndef nCr(n, r):\n    return math.factorial(n) \/\/ (math.factorial(n - r) * math.factorial(r))\n\n\ndef has_duplicates2(seq):\n    seen = []\n    for item in seq:\n        if not (item in seen):\n            seen.append(item)\n    return len(seq) != len(seen)\n\n\ndef divisor(n):\n    divisor = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor.append(i)\n    return divisor\n\n\n# coordinates\ndx = [-1, -1, -1, 0, 0, 1, 1, 1]\ndy = [-1, 0, 1, -1, 1, -1, 0, 1]\nn = int(eval(input()))\na = readints()\n\n\ndef func(l):\n    if len(l) == n:\n        for i in range(len(l)):\n            if l[i] % 2 == 0:\n                return 1\n        return 0\n    return (\n        func(l + [(a[len(l)])])\n        + func(l + [(a[len(l)] - 1)])\n        + func(l + [(a[len(l)] + 1)])\n    )\n\n\nprint((func([])))\n","code_v1_no_empty_lines":"import math\nimport string\n\n\ndef readints():\n    return list(map(int, input().split()))\n\n\ndef nCr(n, r):\n    return math.factorial(n) \/\/ (math.factorial(n - r) * math.factorial(r))\n\n\ndef has_duplicates2(seq):\n    seen = []\n    for item in seq:\n        if not (item in seen):\n            seen.append(item)\n    return len(seq) != len(seen)\n\n\ndef divisor(n):\n    divisor = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor.append(i)\n    return divisor\n\n\n# coordinates\ndx = [-1, -1, -1, 0, 0, 1, 1, 1]\ndy = [-1, 0, 1, -1, 1, -1, 0, 1]\nn = int(eval(input()))\na = readints()\nsum = 1\nfor i in range(len(a)):\n    if a[i] % 2 == 0:\n        sum *= 2\n    else:\n        sum *= 1\nprint((3 ** len(a) - sum))\n","code_same":false,"relative_loc_diff_percent":12.7659574468,"diff":["-","-","-def func(l):","-    if len(l) == n:","-        for i in range(len(l)):","-            if l[i] % 2 == 0:","-                return 1","-        return 0","-    return (","-        func(l + [(a[len(l)])])","-        + func(l + [(a[len(l)] - 1)])","-        + func(l + [(a[len(l)] + 1)])","-    )","-","-","-print((func([])))","+sum = 1","+for i in range(len(a)):","+    if a[i] % 2 == 0:","+        sum *= 2","+    else:","+        sum *= 1","+print((3 ** len(a) - sum))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3073070612,"measured_runtime_v1":0.2000235903,"runtime_lift":1.5363540904,"key":["s195491532","s278252901"]}
{"user_id":"u378157957","problem_id":"p03796","language":"python","submission_id_v0":"s064171222","submission_id_v1":"s323999427","cpu_time_v0":230,"cpu_time_v1":58,"memory_v0":3984,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":74.78,"input":"import math\n\n\n\nN = int(eval(input()))\n\n\n\nnum = math.factorial(N)\n\n\n\nk, r = divmod(num, 10**9 + 7)\n\nprint(r)","target":"N = int(eval(input()))\n\n\n\nFACTOR = 10 ** 9 + 7\n\n\n\nnum = 1\n\nfor i in range(1, N+1):\n\n    num *= i\n\n    k, r = divmod(num, FACTOR)\n\n    num = r\n\n\n\nprint(r)","code_v0_loc":8,"code_v1_loc":11,"code_v0_num_chars":101,"code_v1_num_chars":147,"code_v0_no_empty_lines":"import math\n\nN = int(eval(input()))\nnum = math.factorial(N)\nk, r = divmod(num, 10**9 + 7)\nprint(r)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nFACTOR = 10**9 + 7\nnum = 1\nfor i in range(1, N + 1):\n    num *= i\n    k, r = divmod(num, FACTOR)\n    num = r\nprint(r)\n","code_same":false,"relative_loc_diff_percent":27.2727272727,"diff":["-import math","-","-num = math.factorial(N)","-k, r = divmod(num, 10**9 + 7)","+FACTOR = 10**9 + 7","+num = 1","+for i in range(1, N + 1):","+    num *= i","+    k, r = divmod(num, FACTOR)","+    num = r"],"diff_only_import_comment":false,"measured_runtime_v0":0.6578995652,"measured_runtime_v1":0.3768342862,"runtime_lift":1.7458590932,"key":["s064171222","s323999427"]}
{"user_id":"u312025627","problem_id":"p03241","language":"python","submission_id_v0":"s848556972","submission_id_v1":"s836748791","cpu_time_v0":174,"cpu_time_v1":20,"memory_v0":38640,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.51,"input":"def main():\n\n    N, M = (int(i) for i in input().split())\n\n\n\n    def trial_division(n):\n\n        divs = []\n\n        for i in range(1, int(n**0.5)+1):\n\n            if n % i == 0:\n\n                divs.append(i)\n\n                if i != n\/\/i:\n\n                    divs.append(n\/\/i)\n\n        divs.sort(reverse=True)\n\n        return divs\n\n    divs = trial_division(M)\n\n    for d in divs:\n\n        if d*N <= M:\n\n            return print(d)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"def main():\n\n    def trial_division(n):\n\n        divs = []\n\n        for i in range(1, int(n**0.5)+1):\n\n            if n % i == 0:\n\n                divs.append(i)\n\n                if i != n\/\/i:\n\n                    divs.append(n\/\/i)\n\n        divs.sort(reverse=True)\n\n        return divs\n\n\n\n    N, M = (int(i) for i in input().split())\n\n    divs = trial_division(M)\n\n    for d in divs:\n\n        if N*d <= M:\n\n            return print(d)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":20,"code_v1_loc":20,"code_v0_num_chars":479,"code_v1_num_chars":479,"code_v0_no_empty_lines":"def main():\n    N, M = (int(i) for i in input().split())\n\n    def trial_division(n):\n        divs = []\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divs.append(i)\n                if i != n \/\/ i:\n                    divs.append(n \/\/ i)\n        divs.sort(reverse=True)\n        return divs\n\n    divs = trial_division(M)\n    for d in divs:\n        if d * N <= M:\n            return print(d)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def main():\n    def trial_division(n):\n        divs = []\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                divs.append(i)\n                if i != n \/\/ i:\n                    divs.append(n \/\/ i)\n        divs.sort(reverse=True)\n        return divs\n\n    N, M = (int(i) for i in input().split())\n    divs = trial_division(M)\n    for d in divs:\n        if N * d <= M:\n            return print(d)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    N, M = (int(i) for i in input().split())","-","+    N, M = (int(i) for i in input().split())","-        if d * N <= M:","+        if N * d <= M:"],"diff_only_import_comment":false,"measured_runtime_v0":0.3135980744,"measured_runtime_v1":0.0063253348,"runtime_lift":49.5780989437,"key":["s848556972","s836748791"]}
{"user_id":"u010110540","problem_id":"p03796","language":"python","submission_id_v0":"s700640855","submission_id_v1":"s281752333","cpu_time_v0":230,"cpu_time_v1":40,"memory_v0":3984,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":82.61,"input":"import math\n\n\n\nN = int(eval(input()))\n\nC = 10**9 + 7\n\n\n\nprint((math.factorial(N) % C))","target":"N = int(eval(input()))\n\nC = 10**9+7\n\nans = 1\n\nfor i in range(1, N + 1):\n\n    ans *= i\n\n    ans %= C\n\nprint(ans)","code_v0_loc":6,"code_v1_loc":7,"code_v0_num_chars":78,"code_v1_num_chars":105,"code_v0_no_empty_lines":"import math\n\nN = int(eval(input()))\nC = 10**9 + 7\nprint((math.factorial(N) % C))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nC = 10**9 + 7\nans = 1\nfor i in range(1, N + 1):\n    ans *= i\n    ans %= C\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":14.2857142857,"diff":["-import math","-","-print((math.factorial(N) % C))","+ans = 1","+for i in range(1, N + 1):","+    ans *= i","+    ans %= C","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.7524980175,"measured_runtime_v1":0.4259025633,"runtime_lift":1.7668313889,"key":["s700640855","s281752333"]}
{"user_id":"u754022296","problem_id":"p04017","language":"python","submission_id_v0":"s083196734","submission_id_v1":"s862767700","cpu_time_v0":1272,"cpu_time_v1":635,"memory_v0":90144,"memory_v1":80288,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":50.08,"input":"import sys\n\ninput = sys.stdin.readline\n\nimport bisect\n\n\n\nn = int(eval(input()))\n\nX = list(map(int, input().split()))\n\nl = int(eval(input()))\n\nU = 17\n\ndp = [[0]*n for _ in range(U+1)]\n\nfor i, x in enumerate(X):\n\n  t = bisect.bisect_left(X, x+l)\n\n  dp[0][i] = bisect.bisect_right(X, x+l) - 1\n\nfor k in range(U):\n\n  for i in range(n):\n\n    dp[k+1][i] = dp[k][dp[k][i]]\n\ndef test(x, a, b):\n\n  for i in range(U, -1, -1):\n\n    if x >> i & 1:\n\n      a = dp[i][a]\n\n  return a >= b\n\ndef solve(a, b):\n\n  if a > b:\n\n    a, b = b, a\n\n  ng = 0\n\n  ok = n-1\n\n  while ok - ng > 1:\n\n    mid = (ng + ok) \/\/ 2\n\n    if test(mid, a, b):\n\n      ok = mid\n\n    else:\n\n      ng = mid\n\n  print(ok)\n\nq = int(eval(input()))\n\nfor _ in range(q):\n\n  a, b = list(map(int, input().split()))\n\n  a -= 1\n\n  b -= 1\n\n  solve(a, b)","target":"import sys\n\ninput = sys.stdin.readline\n\nimport bisect\n\n\n\nn = int(eval(input()))\n\nX = list(map(int, input().split()))\n\nl = int(eval(input()))\n\nU = 17\n\ndp = [[0]*n for _ in range(U+1)]\n\nfor i, x in enumerate(X):\n\n  t = bisect.bisect_left(X, x+l)\n\n  dp[0][i] = bisect.bisect_right(X, x+l) - 1\n\nfor k in range(U):\n\n  for i in range(n):\n\n    dp[k+1][i] = dp[k][dp[k][i]]\n\nq = int(eval(input()))\n\nfor _ in range(q):\n\n  a, b = list(map(int, input().split()))\n\n  a -= 1\n\n  b -= 1\n\n  if a > b:\n\n    a, b = b, a\n\n  res = 1\n\n  for k in range(U, -1, -1):\n\n    if dp[k][a] < b:\n\n      a = dp[k][a]\n\n      res += (1<<k)\n\n    if a == b:\n\n      break\n\n  print(res)","code_v0_loc":38,"code_v1_loc":30,"code_v0_num_chars":768,"code_v1_num_chars":624,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nimport bisect\n\nn = int(eval(input()))\nX = list(map(int, input().split()))\nl = int(eval(input()))\nU = 17\ndp = [[0] * n for _ in range(U + 1)]\nfor i, x in enumerate(X):\n    t = bisect.bisect_left(X, x + l)\n    dp[0][i] = bisect.bisect_right(X, x + l) - 1\nfor k in range(U):\n    for i in range(n):\n        dp[k + 1][i] = dp[k][dp[k][i]]\n\n\ndef test(x, a, b):\n    for i in range(U, -1, -1):\n        if x >> i & 1:\n            a = dp[i][a]\n    return a >= b\n\n\ndef solve(a, b):\n    if a > b:\n        a, b = b, a\n    ng = 0\n    ok = n - 1\n    while ok - ng > 1:\n        mid = (ng + ok) \/\/ 2\n        if test(mid, a, b):\n            ok = mid\n        else:\n            ng = mid\n    print(ok)\n\n\nq = int(eval(input()))\nfor _ in range(q):\n    a, b = list(map(int, input().split()))\n    a -= 1\n    b -= 1\n    solve(a, b)\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nimport bisect\n\nn = int(eval(input()))\nX = list(map(int, input().split()))\nl = int(eval(input()))\nU = 17\ndp = [[0] * n for _ in range(U + 1)]\nfor i, x in enumerate(X):\n    t = bisect.bisect_left(X, x + l)\n    dp[0][i] = bisect.bisect_right(X, x + l) - 1\nfor k in range(U):\n    for i in range(n):\n        dp[k + 1][i] = dp[k][dp[k][i]]\nq = int(eval(input()))\nfor _ in range(q):\n    a, b = list(map(int, input().split()))\n    a -= 1\n    b -= 1\n    if a > b:\n        a, b = b, a\n    res = 1\n    for k in range(U, -1, -1):\n        if dp[k][a] < b:\n            a = dp[k][a]\n            res += 1 << k\n        if a == b:\n            break\n    print(res)\n","code_same":false,"relative_loc_diff_percent":21.0526315789,"diff":["-","-","-def test(x, a, b):","-    for i in range(U, -1, -1):","-        if x >> i & 1:","-            a = dp[i][a]","-    return a >= b","-","-","-def solve(a, b):","-    if a > b:","-        a, b = b, a","-    ng = 0","-    ok = n - 1","-    while ok - ng > 1:","-        mid = (ng + ok) \/\/ 2","-        if test(mid, a, b):","-            ok = mid","-        else:","-            ng = mid","-    print(ok)","-","-","-    solve(a, b)","+    if a > b:","+        a, b = b, a","+    res = 1","+    for k in range(U, -1, -1):","+        if dp[k][a] < b:","+            a = dp[k][a]","+            res += 1 << k","+        if a == b:","+            break","+    print(res)"],"diff_only_import_comment":false,"measured_runtime_v0":0.33038889,"measured_runtime_v1":0.2620919657,"runtime_lift":1.2605838152,"key":["s083196734","s862767700"]}
{"user_id":"u216015528","problem_id":"p03164","language":"python","submission_id_v0":"s162537560","submission_id_v1":"s108250483","cpu_time_v0":915,"cpu_time_v1":682,"memory_v0":50204,"memory_v1":50172,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":25.46,"input":"#!\/usr\/bin\/env python3\n\ndef main():\n\n    import numpy as np\n\n\n\n    np.set_printoptions(linewidth=200)\n\n\n\n    N, W = list(map(int, input().split()))\n\n    lst = [list(map(int, input().split())) for _ in range(N)]\n\n    v_max = 10 ** 3 * 100 * 10\n\n    w_max = 10 ** 9 * v_max\n\n\n\n    # i\u4ee5\u4e0a\u306e\u4fa1\u5024\u3092\u6301\u3064\u3068\u304d\u306e\u6700\u5c0f\u91cd\u91cf\n\n    dp = np.full(v_max, w_max, dtype=np.int64)\n\n    # initialize\n\n    dp[0] = 0\n\n\n\n    for n in range(N):\n\n        w, v = lst[n]\n\n        dp[v:] = np.minimum(dp[v:], dp[:-v] + w)\n\n\n\n    ans = 0\n\n    for i, w in enumerate(dp):\n\n        if w <= W:\n\n            ans = i\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"#!\/usr\/bin\/env python3\n\ndef main():\n\n    import numpy as np\n\n\n\n    N, W = list(map(int, input().split()))\n\n    lst = [list(map(int, input().split())) for _ in range(N)]\n\n    v_max = 10 ** 3 * 100 * 10\n\n    w_max = 10 ** 9 * v_max\n\n\n\n    # i\u4ee5\u4e0a\u306e\u4fa1\u5024\u3092\u6301\u3064\u3068\u304d\u306e\u6700\u5c0f\u91cd\u91cf\n\n    dp = np.full(v_max, w_max, dtype=np.int64)\n\n    # initialize\n\n    dp[0] = 0\n\n\n\n    for w, v in lst:\n\n        dp[v:] = np.minimum(dp[v:], dp[:-v] + w)\n\n\n\n    print((np.asarray(dp <= W).nonzero()[0].max()))\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":29,"code_v1_loc":22,"code_v0_num_chars":620,"code_v1_num_chars":502,"code_v0_no_empty_lines":"#!\/usr\/bin\/env python3\ndef main():\n    import numpy as np\n\n    np.set_printoptions(linewidth=200)\n    N, W = list(map(int, input().split()))\n    lst = [list(map(int, input().split())) for _ in range(N)]\n    v_max = 10**3 * 100 * 10\n    w_max = 10**9 * v_max\n    # i\u4ee5\u4e0a\u306e\u4fa1\u5024\u3092\u6301\u3064\u3068\u304d\u306e\u6700\u5c0f\u91cd\u91cf\n    dp = np.full(v_max, w_max, dtype=np.int64)\n    # initialize\n    dp[0] = 0\n    for n in range(N):\n        w, v = lst[n]\n        dp[v:] = np.minimum(dp[v:], dp[:-v] + w)\n    ans = 0\n    for i, w in enumerate(dp):\n        if w <= W:\n            ans = i\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"#!\/usr\/bin\/env python3\ndef main():\n    import numpy as np\n\n    N, W = list(map(int, input().split()))\n    lst = [list(map(int, input().split())) for _ in range(N)]\n    v_max = 10**3 * 100 * 10\n    w_max = 10**9 * v_max\n    # i\u4ee5\u4e0a\u306e\u4fa1\u5024\u3092\u6301\u3064\u3068\u304d\u306e\u6700\u5c0f\u91cd\u91cf\n    dp = np.full(v_max, w_max, dtype=np.int64)\n    # initialize\n    dp[0] = 0\n    for w, v in lst:\n        dp[v:] = np.minimum(dp[v:], dp[:-v] + w)\n    print((np.asarray(dp <= W).nonzero()[0].max()))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":24.1379310345,"diff":["-    np.set_printoptions(linewidth=200)","-    for n in range(N):","-        w, v = lst[n]","+    for w, v in lst:","-    ans = 0","-    for i, w in enumerate(dp):","-        if w <= W:","-            ans = i","-    print(ans)","+    print((np.asarray(dp <= W).nonzero()[0].max()))"],"diff_only_import_comment":false,"measured_runtime_v0":2.6562573321,"measured_runtime_v1":1.670549144,"runtime_lift":1.5900503984,"key":["s162537560","s108250483"]}
{"user_id":"u844005364","problem_id":"p02994","language":"python","submission_id_v0":"s135697405","submission_id_v1":"s243236458","cpu_time_v0":20,"cpu_time_v1":17,"memory_v0":3060,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.0,"input":"n, like = list(map(int, input().split()))\n\n\n\narr = [like + i for i in range(n)]\n\n\n\narr.sort(key=lambda x:abs(x))\n\n\n\nprint((sum(arr[1:])))\n","target":"n, like = list(map(int, input().split()))\n\narr = [like + i for i in range(n)]\n\narr.sort(key=abs)\n\nprint((sum(arr[1:])))\n","code_v0_loc":7,"code_v1_loc":4,"code_v0_num_chars":130,"code_v1_num_chars":112,"code_v0_no_empty_lines":"n, like = list(map(int, input().split()))\narr = [like + i for i in range(n)]\narr.sort(key=lambda x: abs(x))\nprint((sum(arr[1:])))\n","code_v1_no_empty_lines":"n, like = list(map(int, input().split()))\narr = [like + i for i in range(n)]\narr.sort(key=abs)\nprint((sum(arr[1:])))\n","code_same":false,"relative_loc_diff_percent":42.8571428571,"diff":["-arr.sort(key=lambda x: abs(x))","+arr.sort(key=abs)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2677221475,"measured_runtime_v1":0.0993615375,"runtime_lift":2.6944243647,"key":["s135697405","s243236458"]}
{"user_id":"u296150111","problem_id":"p02937","language":"python","submission_id_v0":"s421754829","submission_id_v1":"s024807040","cpu_time_v0":1985,"cpu_time_v1":360,"memory_v0":114612,"memory_v1":3316,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":81.86,"input":"s=eval(input())\n\nt=eval(input())\n\ns*=2\n\nnext=[[-1]*26 for _ in range(len(s))]\n\nalph=[[]for _ in range(26)]\n\nfor i in range(len(s)):\n\n\talph[ord(s[i])-ord(\"a\")].append(i)\n\nfrom bisect import bisect_right\n\nfor i in range(len(s)\/\/2):\n\n\tfor j in range(26):\n\n\t\tif len(alph[j])>bisect_right(alph[j],i):\n\n\t\t\tnext[i][j]=alph[j][bisect_right(alph[j],i)]\n\nans=1\n\nnow=len(s)\/\/2-1\n\nfor x in t:\n\n\tr=ord(x)-ord(\"a\")\n\n\tnow=next[now][r]\n\n\tif now==-1:\n\n\t\tprint((-1))\n\n\t\texit()\n\n\tif now>=len(s)\/\/2:\n\n\t\tans+=len(s)\/\/2\n\n\t\tnow-=len(s)\/\/2\n\nprint((ans+now-len(s)\/\/2))","target":"#O(|S|log|s|)\n\ndef main():\n\n\ts=eval(input())\n\n\tt=eval(input())\n\n\tn=len(s)\n\n\tnow=-1\n\n\tans=1\n\n\tif not set(t)<=set(s):#t\u304cs\u306e\u90e8\u5206\u96c6\u5408\u3067\u306a\u3044\n\n\t\tprint((-1))\n\n\t\texit()\n\n\tfor x in t:\n\n\t\tnow=s.find(x,now+1)#now\u3088\u308a\u5927\u304d\u3044\u3068\u3053\u308d\u304b\u3089x\u3092\u63a2\u3059\n\n\t\tif now==-1:#now\u3088\u308a\u5927\u304d\u3044\u3068\u3053\u308d\u3067x\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u3089\n\n\t\t\tans+=n\n\n\t\t\tnow=s.find(x)\n\n\tprint((ans+now))\n\nif __name__ == '__main__':\n\n\tmain()","code_v0_loc":24,"code_v1_loc":18,"code_v0_num_chars":527,"code_v1_num_chars":315,"code_v0_no_empty_lines":"s = eval(input())\nt = eval(input())\ns *= 2\nnext = [[-1] * 26 for _ in range(len(s))]\nalph = [[] for _ in range(26)]\nfor i in range(len(s)):\n    alph[ord(s[i]) - ord(\"a\")].append(i)\nfrom bisect import bisect_right\n\nfor i in range(len(s) \/\/ 2):\n    for j in range(26):\n        if len(alph[j]) > bisect_right(alph[j], i):\n            next[i][j] = alph[j][bisect_right(alph[j], i)]\nans = 1\nnow = len(s) \/\/ 2 - 1\nfor x in t:\n    r = ord(x) - ord(\"a\")\n    now = next[now][r]\n    if now == -1:\n        print((-1))\n        exit()\n    if now >= len(s) \/\/ 2:\n        ans += len(s) \/\/ 2\n        now -= len(s) \/\/ 2\nprint((ans + now - len(s) \/\/ 2))\n","code_v1_no_empty_lines":"# O(|S|log|s|)\ndef main():\n    s = eval(input())\n    t = eval(input())\n    n = len(s)\n    now = -1\n    ans = 1\n    if not set(t) <= set(s):  # t\u304cs\u306e\u90e8\u5206\u96c6\u5408\u3067\u306a\u3044\n        print((-1))\n        exit()\n    for x in t:\n        now = s.find(x, now + 1)  # now\u3088\u308a\u5927\u304d\u3044\u3068\u3053\u308d\u304b\u3089x\u3092\u63a2\u3059\n        if now == -1:  # now\u3088\u308a\u5927\u304d\u3044\u3068\u3053\u308d\u3067x\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u3089\n            ans += n\n            now = s.find(x)\n    print((ans + now))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-s = eval(input())","-t = eval(input())","-s *= 2","-next = [[-1] * 26 for _ in range(len(s))]","-alph = [[] for _ in range(26)]","-for i in range(len(s)):","-    alph[ord(s[i]) - ord(\"a\")].append(i)","-from bisect import bisect_right","-","-for i in range(len(s) \/\/ 2):","-    for j in range(26):","-        if len(alph[j]) > bisect_right(alph[j], i):","-            next[i][j] = alph[j][bisect_right(alph[j], i)]","-ans = 1","-now = len(s) \/\/ 2 - 1","-for x in t:","-    r = ord(x) - ord(\"a\")","-    now = next[now][r]","-    if now == -1:","+# O(|S|log|s|)","+def main():","+    s = eval(input())","+    t = eval(input())","+    n = len(s)","+    now = -1","+    ans = 1","+    if not set(t) <= set(s):  # t\u304cs\u306e\u90e8\u5206\u96c6\u5408\u3067\u306a\u3044","-    if now >= len(s) \/\/ 2:","-        ans += len(s) \/\/ 2","-        now -= len(s) \/\/ 2","-print((ans + now - len(s) \/\/ 2))","+    for x in t:","+        now = s.find(x, now + 1)  # now\u3088\u308a\u5927\u304d\u3044\u3068\u3053\u308d\u304b\u3089x\u3092\u63a2\u3059","+        if now == -1:  # now\u3088\u308a\u5927\u304d\u3044\u3068\u3053\u308d\u3067x\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u3089","+            ans += n","+            now = s.find(x)","+    print((ans + now))","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.2948810172,"measured_runtime_v1":0.1485264051,"runtime_lift":1.9853777313,"key":["s421754829","s024807040"]}
{"user_id":"u325282913","problem_id":"p03371","language":"python","submission_id_v0":"s614340278","submission_id_v1":"s677161923","cpu_time_v0":117,"cpu_time_v1":18,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":84.62,"input":"A, B, C, X, Y = list(map(int, input().split()))\n\nans = float('inf')\n\nfor i in range(max(X,Y)+1):\n\n    cost = 2 * C * i + max(0,X-i)*A +max(0,Y-i)*B\n\n    ans = min(ans,cost)\n\nprint(ans)","target":"A, B, C, X, Y = list(map(int, input().split()))\n\ntmp = A*X + B*Y\n\nif X >= Y:\n\n    tmp = min(tmp,2*Y*C+(X-Y)*A)\n\nelse:\n\n    tmp = min(tmp,2*X*C+(Y-X)*B)\n\ntmp = min(tmp,max(X,Y)*2*C)\n\nprint(tmp)","code_v0_loc":6,"code_v1_loc":8,"code_v0_num_chars":178,"code_v1_num_chars":186,"code_v0_no_empty_lines":"A, B, C, X, Y = list(map(int, input().split()))\nans = float(\"inf\")\nfor i in range(max(X, Y) + 1):\n    cost = 2 * C * i + max(0, X - i) * A + max(0, Y - i) * B\n    ans = min(ans, cost)\nprint(ans)\n","code_v1_no_empty_lines":"A, B, C, X, Y = list(map(int, input().split()))\ntmp = A * X + B * Y\nif X >= Y:\n    tmp = min(tmp, 2 * Y * C + (X - Y) * A)\nelse:\n    tmp = min(tmp, 2 * X * C + (Y - X) * B)\ntmp = min(tmp, max(X, Y) * 2 * C)\nprint(tmp)\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-ans = float(\"inf\")","-for i in range(max(X, Y) + 1):","-    cost = 2 * C * i + max(0, X - i) * A + max(0, Y - i) * B","-    ans = min(ans, cost)","-print(ans)","+tmp = A * X + B * Y","+if X >= Y:","+    tmp = min(tmp, 2 * Y * C + (X - Y) * A)","+else:","+    tmp = min(tmp, 2 * X * C + (Y - X) * B)","+tmp = min(tmp, max(X, Y) * 2 * C)","+print(tmp)"],"diff_only_import_comment":false,"measured_runtime_v0":0.571060118,"measured_runtime_v1":0.3373241339,"runtime_lift":1.6929121299,"key":["s614340278","s677161923"]}
{"user_id":"u873917047","problem_id":"p03828","language":"python","submission_id_v0":"s924740576","submission_id_v1":"s078000611","cpu_time_v0":523,"cpu_time_v1":182,"memory_v0":3188,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":65.2,"input":"#coding: UTF-8\n\nimport math\n\nN=int(eval(input()))\n\ndef prime_list(k):\n\n    lis=[True for i in range(1,k+1)]\n\n    lis[0]=False\n\n    for i in range(2,k+1):\n\n        j=2\n\n        while j*j<=i:\n\n            if i%j==0:\n\n                lis[i-1]=False\n\n                break\n\n            else:\n\n                j+=1\n\n    return lis\n\n#    print(lis)\n\ndef p_fact(k,N):\n\n    plist=prime_list(k)\n\n    lis=[0]*N\n\n    for i in range(0,k):\n\n        n=0\n\n        if plist[i]:\n\n            while k%(i+1)==0:\n\n                n+=1\n\n                k=k\/(i+1)\n\n        lis[i]=n\n\n    return lis\n\nout_lis=[0]*N\n\nfor i in range(1,N+1):\n\n    input_lis=p_fact(i,N)\n\n    out_lis=[out_lis[j]+input_lis[j] for j in range(0,N)]\n\n#print(out_lis)\n\nout=1\n\nfor i in range(0,N):\n\n    out=out*(out_lis[i]+1)\n\nprint((out%1000000007))","target":"#coding: UTF-8\n\nimport math\n\nN=int(eval(input()))\n\ndef prime_list(k):\n\n    lis=[True for i in range(1,k+1)]\n\n    lis[0]=False\n\n    for i in range(2,k+1):\n\n        j=2\n\n        while j*j<=i:\n\n            if i%j==0:\n\n                lis[i-1]=False\n\n                break\n\n            else:\n\n                j+=1\n\n    return lis\n\n#    print(lis)\n\ndef p_fact(k,N,plist):\n\n#    plist=prime_list(k)\n\n    lis=[0]*N\n\n    for i in range(0,k):\n\n        n=0\n\n        if plist[i]:\n\n            while k%(i+1)==0:\n\n                n+=1\n\n                k=k\/(i+1)\n\n        lis[i]=n\n\n    return lis\n\n#    print(lis)\n\nout_lis=[0]*N\n\nplist=prime_list(N)\n\nfor i in range(1,N+1):\n\n    input_lis=p_fact(i,N,plist)\n\n    out_lis=[out_lis[j]+input_lis[j] for j in range(0,N)]\n\n#print(out_lis)\n\nout=1\n\nfor i in range(0,N):\n\n    out=out*(out_lis[i]+1)\n\n#print(out%1000000007)\n\nprint((out%(10**9+7)))","code_v0_loc":36,"code_v1_loc":39,"code_v0_num_chars":791,"code_v1_num_chars":865,"code_v0_no_empty_lines":"# coding: UTF-8\nimport math\n\nN = int(eval(input()))\n\n\ndef prime_list(k):\n    lis = [True for i in range(1, k + 1)]\n    lis[0] = False\n    for i in range(2, k + 1):\n        j = 2\n        while j * j <= i:\n            if i % j == 0:\n                lis[i - 1] = False\n                break\n            else:\n                j += 1\n    return lis\n\n\n#    print(lis)\ndef p_fact(k, N):\n    plist = prime_list(k)\n    lis = [0] * N\n    for i in range(0, k):\n        n = 0\n        if plist[i]:\n            while k % (i + 1) == 0:\n                n += 1\n                k = k \/ (i + 1)\n        lis[i] = n\n    return lis\n\n\nout_lis = [0] * N\nfor i in range(1, N + 1):\n    input_lis = p_fact(i, N)\n    out_lis = [out_lis[j] + input_lis[j] for j in range(0, N)]\n# print(out_lis)\nout = 1\nfor i in range(0, N):\n    out = out * (out_lis[i] + 1)\nprint((out % 1000000007))\n","code_v1_no_empty_lines":"# coding: UTF-8\nimport math\n\nN = int(eval(input()))\n\n\ndef prime_list(k):\n    lis = [True for i in range(1, k + 1)]\n    lis[0] = False\n    for i in range(2, k + 1):\n        j = 2\n        while j * j <= i:\n            if i % j == 0:\n                lis[i - 1] = False\n                break\n            else:\n                j += 1\n    return lis\n\n\n#    print(lis)\ndef p_fact(k, N, plist):\n    #    plist=prime_list(k)\n    lis = [0] * N\n    for i in range(0, k):\n        n = 0\n        if plist[i]:\n            while k % (i + 1) == 0:\n                n += 1\n                k = k \/ (i + 1)\n        lis[i] = n\n    return lis\n\n\n#    print(lis)\nout_lis = [0] * N\nplist = prime_list(N)\nfor i in range(1, N + 1):\n    input_lis = p_fact(i, N, plist)\n    out_lis = [out_lis[j] + input_lis[j] for j in range(0, N)]\n# print(out_lis)\nout = 1\nfor i in range(0, N):\n    out = out * (out_lis[i] + 1)\n# print(out%1000000007)\nprint((out % (10**9 + 7)))\n","code_same":false,"relative_loc_diff_percent":7.6923076923,"diff":["-def p_fact(k, N):","-    plist = prime_list(k)","+def p_fact(k, N, plist):","+    #    plist=prime_list(k)","+#    print(lis)","+plist = prime_list(N)","-    input_lis = p_fact(i, N)","+    input_lis = p_fact(i, N, plist)","-print((out % 1000000007))","+# print(out%1000000007)","+print((out % (10**9 + 7)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.6020502172,"measured_runtime_v1":0.3540123932,"runtime_lift":1.7006472899,"key":["s924740576","s078000611"]}
{"user_id":"u800534567","problem_id":"p02245","language":"python","submission_id_v0":"s424620538","submission_id_v1":"s007973982","cpu_time_v0":3310,"cpu_time_v1":2340,"memory_v0":34416,"memory_v1":34452,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":29.31,"input":"import sys\n\nimport queue\n\n\n\nN = 3\n\nf= ''.join(sys.stdin.readline().split())\n\nf+= ''.join(sys.stdin.readline().split())\n\nf+= ''.join(sys.stdin.readline().split())\n\n\n\ndd = [[-1, 0], [0, -1], [1, 0], [0, 1]]\n\n\n\nQ = queue.Queue()\n\nV = dict()\n\n\n\nQ.put([f,f.index('0'),0])\n\nV[f] = True\n\n\n\nwhile not Q.empty():\n\n    u = Q.get()\n\n    if u[0] == '123456780':  break\n\n    sx, sy = u[1]\/\/N, u[1]%N\n\n    for dx, dy in dd:\n\n        tx, ty = sx+dx, sy+dy\n\n        if tx<0 or ty<0 or tx>=N or ty>=N: continue\n\n        v = u[:]\n\n        n1, n2 = u[1], tx*N+ty\n\n        v[1] = n2\n\n        if n1>n2: n1, n2 = n2, n1\n\n        v[0] = v[0][0:n1]+v[0][n2]+v[0][n1+1:n2]+v[0][n1]+v[0][n2+1:]\n\n        if not V.get(v[0], False):\n\n            V[v[0]] = True\n\n            v[2] += 1                                                    \n\n            Q.put(v)\n\n\n\nprint((u[2]))\n","target":"import sys\n\nimport queue\n\n\n\nN = 3\n\n\n\nf = ''.join(sys.stdin.readline().split())\n\nf += ''.join(sys.stdin.readline().split())\n\nf += ''.join(sys.stdin.readline().split())\n\n\n\ndd = [[-1, 0], [0, -1], [1, 0], [0, 1]]\n\n\n\nQ = [[f,f.index('0'),0]]\n\nV = { f: True }\n\n\n\nwhile len(Q)>0:\n\n    u = Q.pop(0)\n\n    if u[0] == '123456780':  break\n\n    sx, sy = u[1]\/\/N, u[1]%N\n\n    for dx, dy in dd:\n\n        tx, ty = sx+dx, sy+dy\n\n        if tx<0 or ty<0 or tx>=N or ty>=N: continue\n\n        v = u[:]\n\n        n1, n2 = u[1], tx*N+ty\n\n        v[1] = n2\n\n        if n1>n2: n1, n2 = n2, n1\n\n        v[0] = v[0][0:n1]+v[0][n2]+v[0][n1+1:n2]+v[0][n1]+v[0][n2+1:]\n\n        if not V.get(v[0], False):\n\n            V[v[0]] = True\n\n            v[2] += 1 # dir[r]                                                       \n\n            Q.append(v)\n\n\n\nprint((u[2]))\n","code_v0_loc":34,"code_v1_loc":32,"code_v0_num_chars":845,"code_v1_num_chars":831,"code_v0_no_empty_lines":"import sys\nimport queue\n\nN = 3\nf = \"\".join(sys.stdin.readline().split())\nf += \"\".join(sys.stdin.readline().split())\nf += \"\".join(sys.stdin.readline().split())\ndd = [[-1, 0], [0, -1], [1, 0], [0, 1]]\nQ = queue.Queue()\nV = dict()\nQ.put([f, f.index(\"0\"), 0])\nV[f] = True\nwhile not Q.empty():\n    u = Q.get()\n    if u[0] == \"123456780\":\n        break\n    sx, sy = u[1] \/\/ N, u[1] % N\n    for dx, dy in dd:\n        tx, ty = sx + dx, sy + dy\n        if tx < 0 or ty < 0 or tx >= N or ty >= N:\n            continue\n        v = u[:]\n        n1, n2 = u[1], tx * N + ty\n        v[1] = n2\n        if n1 > n2:\n            n1, n2 = n2, n1\n        v[0] = v[0][0:n1] + v[0][n2] + v[0][n1 + 1 : n2] + v[0][n1] + v[0][n2 + 1 :]\n        if not V.get(v[0], False):\n            V[v[0]] = True\n            v[2] += 1\n            Q.put(v)\nprint((u[2]))\n","code_v1_no_empty_lines":"import sys\nimport queue\n\nN = 3\nf = \"\".join(sys.stdin.readline().split())\nf += \"\".join(sys.stdin.readline().split())\nf += \"\".join(sys.stdin.readline().split())\ndd = [[-1, 0], [0, -1], [1, 0], [0, 1]]\nQ = [[f, f.index(\"0\"), 0]]\nV = {f: True}\nwhile len(Q) > 0:\n    u = Q.pop(0)\n    if u[0] == \"123456780\":\n        break\n    sx, sy = u[1] \/\/ N, u[1] % N\n    for dx, dy in dd:\n        tx, ty = sx + dx, sy + dy\n        if tx < 0 or ty < 0 or tx >= N or ty >= N:\n            continue\n        v = u[:]\n        n1, n2 = u[1], tx * N + ty\n        v[1] = n2\n        if n1 > n2:\n            n1, n2 = n2, n1\n        v[0] = v[0][0:n1] + v[0][n2] + v[0][n1 + 1 : n2] + v[0][n1] + v[0][n2 + 1 :]\n        if not V.get(v[0], False):\n            V[v[0]] = True\n            v[2] += 1  # dir[r]\n            Q.append(v)\nprint((u[2]))\n","code_same":false,"relative_loc_diff_percent":5.8823529412,"diff":["-Q = queue.Queue()","-V = dict()","-Q.put([f, f.index(\"0\"), 0])","-V[f] = True","-while not Q.empty():","-    u = Q.get()","+Q = [[f, f.index(\"0\"), 0]]","+V = {f: True}","+while len(Q) > 0:","+    u = Q.pop(0)","-            v[2] += 1","-            Q.put(v)","+            v[2] += 1  # dir[r]","+            Q.append(v)"],"diff_only_import_comment":false,"measured_runtime_v0":0.5507428885,"measured_runtime_v1":0.3782181978,"runtime_lift":1.4561512154,"key":["s424620538","s007973982"]}
{"user_id":"u484780899","problem_id":"p02899","language":"python","submission_id_v0":"s524734651","submission_id_v1":"s003316364","cpu_time_v0":684,"cpu_time_v1":151,"memory_v0":23488,"memory_v1":13880,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":77.92,"input":"import numpy as np\n\n\n\nN = int(input())\n\n\n\nA = np.array([int(i) for i in input().split()])\n\n\n\nx = np.argsort(A)\n\nx += 1\n\n\n\nfor i in range(N):\n\n    print(x[i], end=\" \")\n\n    \n\nprint()\n","target":"N = int(eval(input()))\n\n\n\nA = [int(i) for i in input().split()]\n\n\n\nB = [0]*N\n\nfor i in range(N):\n\n    B[A[i]-1] = i+1\n\n\n\nfor i in range(N):\n\n    print((B[i]))\n","code_v0_loc":13,"code_v1_loc":10,"code_v0_num_chars":181,"code_v1_num_chars":151,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(input())\nA = np.array([int(i) for i in input().split()])\nx = np.argsort(A)\nx += 1\nfor i in range(N):\n    print(x[i], end=\" \")\nprint()\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = [int(i) for i in input().split()]\nB = [0] * N\nfor i in range(N):\n    B[A[i] - 1] = i + 1\nfor i in range(N):\n    print((B[i]))\n","code_same":false,"relative_loc_diff_percent":23.0769230769,"diff":["-import numpy as np","-","-N = int(input())","-A = np.array([int(i) for i in input().split()])","-x = np.argsort(A)","-x += 1","+N = int(eval(input()))","+A = [int(i) for i in input().split()]","+B = [0] * N","-    print(x[i], end=\" \")","-print()","+    B[A[i] - 1] = i + 1","+for i in range(N):","+    print((B[i]))"],"diff_only_import_comment":false,"measured_runtime_v0":1.4031675689,"measured_runtime_v1":0.1788432901,"runtime_lift":7.8457937574,"key":["s524734651","s003316364"]}
{"user_id":"u002459665","problem_id":"p03854","language":"python","submission_id_v0":"s451133157","submission_id_v1":"s498631928","cpu_time_v0":759,"cpu_time_v1":146,"memory_v0":3936,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":80.76,"input":"def main():\n\n    S = eval(input())\n\n    w1 = 'dream'[::-1]\n\n    w2 = 'dreamer'[::-1]\n\n    w3 = 'erase'[::-1]\n\n    w4 = 'eraser'[::-1]\n\n    # print(w1,w2,w3,w4)\n\n    S = S[::-1]\n\n    # print(S)\n\n\n\n    # words = ['dream', 'dreamer', 'erase', 'eraser']\n\n    words = [w1, w2, w3, w4]\n\n    T = ''\n\n    while S != T:\n\n        cand = []\n\n        for w in words:\n\n            new_t = T + w\n\n            cand.append(new_t) \n\n        # print('cand', cand)\n\n        ans = False\n\n        for c in cand:\n\n            if c == S[:len(c)]:\n\n                T = c\n\n                ans = True\n\n\n\n        if not ans:\n\n            break\n\n\n\n    if S == T:\n\n        print('YES')\n\n    else:\n\n        print(\"NO\")\n\n\n\nif __name__ == \"__main__\":\n\n    main()","target":"def main():\n\n    S = eval(input())\n\n    w1 = 'dream'[::-1]\n\n    w2 = 'dreamer'[::-1]\n\n    w3 = 'erase'[::-1]\n\n    w4 = 'eraser'[::-1]\n\n    S = S[::-1]\n\n    words = [w1, w2, w3, w4]\n\n\n\n    flag = False\n\n    i = 0\n\n    while i < len(S):\n\n        for w in words:\n\n            if S[i:].startswith(w):\n\n                i += len(w)\n\n                flag = True\n\n                break\n\n\n\n        if not flag:\n\n            print(\"NO\")\n\n            exit()\n\n        flag = False\n\n\n\n    print(\"YES\")\n\n\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()","code_v0_loc":35,"code_v1_loc":29,"code_v0_num_chars":724,"code_v1_num_chars":528,"code_v0_no_empty_lines":"def main():\n    S = eval(input())\n    w1 = \"dream\"[::-1]\n    w2 = \"dreamer\"[::-1]\n    w3 = \"erase\"[::-1]\n    w4 = \"eraser\"[::-1]\n    # print(w1,w2,w3,w4)\n    S = S[::-1]\n    # print(S)\n    # words = ['dream', 'dreamer', 'erase', 'eraser']\n    words = [w1, w2, w3, w4]\n    T = \"\"\n    while S != T:\n        cand = []\n        for w in words:\n            new_t = T + w\n            cand.append(new_t)\n        # print('cand', cand)\n        ans = False\n        for c in cand:\n            if c == S[: len(c)]:\n                T = c\n                ans = True\n        if not ans:\n            break\n    if S == T:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"def main():\n    S = eval(input())\n    w1 = \"dream\"[::-1]\n    w2 = \"dreamer\"[::-1]\n    w3 = \"erase\"[::-1]\n    w4 = \"eraser\"[::-1]\n    S = S[::-1]\n    words = [w1, w2, w3, w4]\n    flag = False\n    i = 0\n    while i < len(S):\n        for w in words:\n            if S[i:].startswith(w):\n                i += len(w)\n                flag = True\n                break\n        if not flag:\n            print(\"NO\")\n            exit()\n        flag = False\n    print(\"YES\")\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":17.1428571429,"diff":["-    # print(w1,w2,w3,w4)","-    # print(S)","-    # words = ['dream', 'dreamer', 'erase', 'eraser']","-    T = \"\"","-    while S != T:","-        cand = []","+    flag = False","+    i = 0","+    while i < len(S):","-            new_t = T + w","-            cand.append(new_t)","-        # print('cand', cand)","-        ans = False","-        for c in cand:","-            if c == S[: len(c)]:","-                T = c","-                ans = True","-        if not ans:","-            break","-    if S == T:","-        print(\"YES\")","-    else:","-        print(\"NO\")","+            if S[i:].startswith(w):","+                i += len(w)","+                flag = True","+                break","+        if not flag:","+            print(\"NO\")","+            exit()","+        flag = False","+    print(\"YES\")"],"diff_only_import_comment":false,"measured_runtime_v0":0.3388795207,"measured_runtime_v1":0.2570693116,"runtime_lift":1.3182418333,"key":["s451133157","s498631928"]}
{"user_id":"u761320129","problem_id":"p03806","language":"python","submission_id_v0":"s128261336","submission_id_v1":"s895482909","cpu_time_v0":493,"cpu_time_v1":263,"memory_v0":4852,"memory_v1":4852,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":46.65,"input":"N,MA,MB = list(map(int,input().split()))\n\nsrc = [tuple(map(int,input().split())) for i in range(N)]\n\n\n\nINF = 10**9\n\ndp = [[INF for j in range(401)] for i in range(401)]\n\ndp[0][0] = 0\n\nmaxa = maxb = 0\n\nfor a,b,c in src:\n\n    for ai in range(maxa,-1,-1):\n\n        for bi in range(maxb,-1,-1):\n\n            dp[ai+a][bi+b] = min(dp[ai+a][bi+b], dp[ai][bi] + c)\n\n    maxa += a\n\n    maxb += b\n\n\n\nans = INF\n\nfor i in range(1,401):\n\n    if MA*i > 400 or MB*i > 400: break\n\n    ans = min(ans, dp[MA*i][MB*i])\n\nprint((-1 if ans == INF else ans))","target":"N,MA,MB = list(map(int,input().split()))\n\nsrc = [tuple(map(int,input().split())) for i in range(N)]\n\n\n\nINF = 10**9\n\nMAX = 401\n\ndp = [[INF] * MAX for i in range(MAX)]\n\ndp[0][0] = 0\n\namax = bmax = 0\n\nfor a,b,n in src:\n\n    for i in reversed(list(range(bmax+1))):\n\n        for j in range(amax+1):\n\n            if dp[i][j] == INF: continue\n\n            dp[i+b][j+a] = min(dp[i+b][j+a], dp[i][j] + n)\n\n    amax += a\n\n    bmax += b\n\n\n\nans = INF\n\nfor i in range(1,MAX):\n\n    if i*MA >= MAX or i*MB >= MAX: break\n\n    ans = min(ans, dp[i*MB][i*MA])\n\nprint((-1 if ans == INF else ans))","code_v0_loc":19,"code_v1_loc":21,"code_v0_num_chars":527,"code_v1_num_chars":562,"code_v0_no_empty_lines":"N, MA, MB = list(map(int, input().split()))\nsrc = [tuple(map(int, input().split())) for i in range(N)]\nINF = 10**9\ndp = [[INF for j in range(401)] for i in range(401)]\ndp[0][0] = 0\nmaxa = maxb = 0\nfor a, b, c in src:\n    for ai in range(maxa, -1, -1):\n        for bi in range(maxb, -1, -1):\n            dp[ai + a][bi + b] = min(dp[ai + a][bi + b], dp[ai][bi] + c)\n    maxa += a\n    maxb += b\nans = INF\nfor i in range(1, 401):\n    if MA * i > 400 or MB * i > 400:\n        break\n    ans = min(ans, dp[MA * i][MB * i])\nprint((-1 if ans == INF else ans))\n","code_v1_no_empty_lines":"N, MA, MB = list(map(int, input().split()))\nsrc = [tuple(map(int, input().split())) for i in range(N)]\nINF = 10**9\nMAX = 401\ndp = [[INF] * MAX for i in range(MAX)]\ndp[0][0] = 0\namax = bmax = 0\nfor a, b, n in src:\n    for i in reversed(list(range(bmax + 1))):\n        for j in range(amax + 1):\n            if dp[i][j] == INF:\n                continue\n            dp[i + b][j + a] = min(dp[i + b][j + a], dp[i][j] + n)\n    amax += a\n    bmax += b\nans = INF\nfor i in range(1, MAX):\n    if i * MA >= MAX or i * MB >= MAX:\n        break\n    ans = min(ans, dp[i * MB][i * MA])\nprint((-1 if ans == INF else ans))\n","code_same":false,"relative_loc_diff_percent":9.5238095238,"diff":["-dp = [[INF for j in range(401)] for i in range(401)]","+MAX = 401","+dp = [[INF] * MAX for i in range(MAX)]","-maxa = maxb = 0","-for a, b, c in src:","-    for ai in range(maxa, -1, -1):","-        for bi in range(maxb, -1, -1):","-            dp[ai + a][bi + b] = min(dp[ai + a][bi + b], dp[ai][bi] + c)","-    maxa += a","-    maxb += b","+amax = bmax = 0","+for a, b, n in src:","+    for i in reversed(list(range(bmax + 1))):","+        for j in range(amax + 1):","+            if dp[i][j] == INF:","+                continue","+            dp[i + b][j + a] = min(dp[i + b][j + a], dp[i][j] + n)","+    amax += a","+    bmax += b","-for i in range(1, 401):","-    if MA * i > 400 or MB * i > 400:","+for i in range(1, MAX):","+    if i * MA >= MAX or i * MB >= MAX:","-    ans = min(ans, dp[MA * i][MB * i])","+    ans = min(ans, dp[i * MB][i * MA])"],"diff_only_import_comment":false,"measured_runtime_v0":0.4613628248,"measured_runtime_v1":0.3376750898,"runtime_lift":1.3662921511,"key":["s128261336","s895482909"]}
{"user_id":"u638456847","problem_id":"p03253","language":"python","submission_id_v0":"s318779524","submission_id_v1":"s213127805","cpu_time_v0":120,"cpu_time_v1":45,"memory_v0":15264,"memory_v1":7084,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":62.5,"input":"import sys\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\n\n\nMOD = 10**9+7\n\n\n\nfac = [1, 1]     # \u5143\u30c6\u30fc\u30d6\u30eb\n\nf_inv = [1, 1]   # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\n\ninv = [0, 1]     # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\ndef prepare(n, mod):\n\n    for i in range(2, n+1):\n\n        fac.append((fac[-1] * i) % mod)\n\n        inv.append((-inv[mod % i] * (mod\/\/i)) % mod)\n\n        f_inv.append((f_inv[-1] * inv[-1]) % mod)\n\n\n\n\n\ndef cmb(n, r, mod):\n\n    if n < 0 or r < 0:\n\n        return 0\n\n    if r > n:\n\n        return 0\n\n\n\n    return fac[n] * f_inv[r] * f_inv[n-r] % mod\n\n\n\n\n\ndef prime_factorization(n):\n\n    d = []\n\n    i, e = 2, 0  # factor, exponent\n\n    while i * i <= n:\n\n        while n % i == 0:\n\n            n \/\/= i\n\n            e += 1\n\n        if e > 0:\n\n            d.append((i, e))\n\n        i += 1\n\n        e = 0\n\n    if n > 1:\n\n        d.append((n, 1))\n\n    return d\n\n\n\n\n\ndef main():\n\n    N,M = list(map(int, readline().split()))\n\n\n\n    prepare(N+100, MOD)\n\n    d = prime_factorization(M)\n\n\n\n    ans = 1\n\n    for i, e in d:\n\n        ans *= cmb(N-1+e, e, MOD)\n\n        ans %= MOD\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"import sys\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\n\n\nMOD = 10**9+7\n\n\n\nfac = [1, 1]     # \u5143\u30c6\u30fc\u30d6\u30eb\n\nf_inv = [1, 1]   # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\n\ninv = [0, 1]     # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\ndef prepare(n, mod):\n\n    for i in range(2, n+1):\n\n        fac.append((fac[-1] * i) % mod)\n\n\n\n\n\ndef cmb(n, r, mod):\n\n    if n < 0 or r < 0:\n\n        return 0\n\n    if r > n:\n\n        return 0\n\n\n\n    return fac[n] * pow(fac[r],MOD-2,MOD) * pow(fac[n-r],MOD-2,MOD) % mod\n\n\n\n\n\ndef prime_factorization(n):\n\n    d = []\n\n    i, e = 2, 0  # factor, exponent\n\n    while i * i <= n:\n\n        while n % i == 0:\n\n            n \/\/= i\n\n            e += 1\n\n        if e > 0:\n\n            d.append((i, e))\n\n        i += 1\n\n        e = 0\n\n    if n > 1:\n\n        d.append((n, 1))\n\n    return d\n\n\n\n\n\ndef main():\n\n    N,M = list(map(int, readline().split()))\n\n\n\n    prepare(N+100, MOD)\n\n    d = prime_factorization(M)\n\n\n\n    ans = 1\n\n    for i, e in d:\n\n        ans *= cmb(N-1+e, e, MOD)\n\n        ans %= MOD\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":58,"code_v1_loc":56,"code_v0_num_chars":1128,"code_v1_num_chars":1049,"code_v0_no_empty_lines":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nMOD = 10**9 + 7\nfac = [1, 1]  # \u5143\u30c6\u30fc\u30d6\u30eb\nf_inv = [1, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninv = [0, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\n\ndef prepare(n, mod):\n    for i in range(2, n + 1):\n        fac.append((fac[-1] * i) % mod)\n        inv.append((-inv[mod % i] * (mod \/\/ i)) % mod)\n        f_inv.append((f_inv[-1] * inv[-1]) % mod)\n\n\ndef cmb(n, r, mod):\n    if n < 0 or r < 0:\n        return 0\n    if r > n:\n        return 0\n    return fac[n] * f_inv[r] * f_inv[n - r] % mod\n\n\ndef prime_factorization(n):\n    d = []\n    i, e = 2, 0  # factor, exponent\n    while i * i <= n:\n        while n % i == 0:\n            n \/\/= i\n            e += 1\n        if e > 0:\n            d.append((i, e))\n        i += 1\n        e = 0\n    if n > 1:\n        d.append((n, 1))\n    return d\n\n\ndef main():\n    N, M = list(map(int, readline().split()))\n    prepare(N + 100, MOD)\n    d = prime_factorization(M)\n    ans = 1\n    for i, e in d:\n        ans *= cmb(N - 1 + e, e, MOD)\n        ans %= MOD\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nMOD = 10**9 + 7\nfac = [1, 1]  # \u5143\u30c6\u30fc\u30d6\u30eb\nf_inv = [1, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninv = [0, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\n\ndef prepare(n, mod):\n    for i in range(2, n + 1):\n        fac.append((fac[-1] * i) % mod)\n\n\ndef cmb(n, r, mod):\n    if n < 0 or r < 0:\n        return 0\n    if r > n:\n        return 0\n    return fac[n] * pow(fac[r], MOD - 2, MOD) * pow(fac[n - r], MOD - 2, MOD) % mod\n\n\ndef prime_factorization(n):\n    d = []\n    i, e = 2, 0  # factor, exponent\n    while i * i <= n:\n        while n % i == 0:\n            n \/\/= i\n            e += 1\n        if e > 0:\n            d.append((i, e))\n        i += 1\n        e = 0\n    if n > 1:\n        d.append((n, 1))\n    return d\n\n\ndef main():\n    N, M = list(map(int, readline().split()))\n    prepare(N + 100, MOD)\n    d = prime_factorization(M)\n    ans = 1\n    for i, e in d:\n        ans *= cmb(N - 1 + e, e, MOD)\n        ans %= MOD\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":3.4482758621,"diff":["-        inv.append((-inv[mod % i] * (mod \/\/ i)) % mod)","-        f_inv.append((f_inv[-1] * inv[-1]) % mod)","-    return fac[n] * f_inv[r] * f_inv[n - r] % mod","+    return fac[n] * pow(fac[r], MOD - 2, MOD) * pow(fac[n - r], MOD - 2, MOD) % mod"],"diff_only_import_comment":false,"measured_runtime_v0":0.6358441951,"measured_runtime_v1":0.3783175611,"runtime_lift":1.6807155163,"key":["s318779524","s213127805"]}
{"user_id":"u678167152","problem_id":"p03814","language":"python","submission_id_v0":"s292011694","submission_id_v1":"s577750700","cpu_time_v0":173,"cpu_time_v1":33,"memory_v0":41456,"memory_v1":9328,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":80.92,"input":"s = eval(input())\n\na = s.find('A')\n\nz = s[::-1].find('Z')\n\nans = len(s)-a-z\n\n\n\nprint(ans)\n\n\n\n#print(*ans, sep='\\n')","target":"def solve():\n\n  S = eval(input())\n\n  a = S.find('A')\n\n  z = S[::-1].find('Z')\n\n  ans = len(S)-a-z\n\n  return ans\n\nprint((solve()))","code_v0_loc":8,"code_v1_loc":7,"code_v0_num_chars":109,"code_v1_num_chars":121,"code_v0_no_empty_lines":"s = eval(input())\na = s.find(\"A\")\nz = s[::-1].find(\"Z\")\nans = len(s) - a - z\nprint(ans)\n# print(*ans, sep='\\n')\n","code_v1_no_empty_lines":"def solve():\n    S = eval(input())\n    a = S.find(\"A\")\n    z = S[::-1].find(\"Z\")\n    ans = len(S) - a - z\n    return ans\n\n\nprint((solve()))\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-s = eval(input())","-a = s.find(\"A\")","-z = s[::-1].find(\"Z\")","-ans = len(s) - a - z","-print(ans)","-# print(*ans, sep='\\n')","+def solve():","+    S = eval(input())","+    a = S.find(\"A\")","+    z = S[::-1].find(\"Z\")","+    ans = len(S) - a - z","+    return ans","+","+","+print((solve()))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3115016568,"measured_runtime_v1":0.2242342863,"runtime_lift":1.3891794243,"key":["s292011694","s577750700"]}
{"user_id":"u729133443","problem_id":"p03494","language":"python","submission_id_v0":"s130510697","submission_id_v1":"s993121873","cpu_time_v0":166,"cpu_time_v1":32,"memory_v0":38256,"memory_v1":9048,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":80.72,"input":"_,t=open(0);n=eval(t.replace(' ','|'));print((len(bin(n&-n))-3))","target":"n=eval([*open(0)][1].replace(*' |'))\n\nprint((len(bin(n&-n))-3))","code_v0_loc":1,"code_v1_loc":2,"code_v0_num_chars":62,"code_v1_num_chars":61,"code_v0_no_empty_lines":"_, t = open(0)\nn = eval(t.replace(\" \", \"|\"))\nprint((len(bin(n & -n)) - 3))\n","code_v1_no_empty_lines":"n = eval([*open(0)][1].replace(*\" |\"))\nprint((len(bin(n & -n)) - 3))\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-_, t = open(0)","-n = eval(t.replace(\" \", \"|\"))","+n = eval([*open(0)][1].replace(*\" |\"))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2380404282,"measured_runtime_v1":0.1070810323,"runtime_lift":2.2229934012,"key":["s130510697","s993121873"]}
{"user_id":"u293528047","problem_id":"p02780","language":"python","submission_id_v0":"s372211236","submission_id_v1":"s213603098","cpu_time_v0":393,"cpu_time_v1":115,"memory_v0":33764,"memory_v1":25060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":70.74,"input":"import numpy as np\n\n\n\nN, K= list(map(int, input().split()))\n\np = np.array(list(map(int, input().split())))\n\n\n\ntmp = np.sum(p[:K])\n\nmax = tmp\n\nfor i in range(N-K):\n\n    tmp = tmp-p[i]+p[i+K]\n\n    if tmp>max:\n\n        max = tmp\n\n\n\nprint(((max+K)\/2))","target":"N, K= list(map(int, input().split()))\n\np = list(map(int, input().split()))\n\n\n\ntmp = sum(p[:K])\n\nmax = tmp\n\nfor i in range(N-K):\n\n    tmp = tmp-p[i]+p[i+K]\n\n    if tmp>max:\n\n        max = tmp\n\n\n\nprint(((max+K)\/2))","code_v0_loc":13,"code_v1_loc":11,"code_v0_num_chars":239,"code_v1_num_chars":204,"code_v0_no_empty_lines":"import numpy as np\n\nN, K = list(map(int, input().split()))\np = np.array(list(map(int, input().split())))\ntmp = np.sum(p[:K])\nmax = tmp\nfor i in range(N - K):\n    tmp = tmp - p[i] + p[i + K]\n    if tmp > max:\n        max = tmp\nprint(((max + K) \/ 2))\n","code_v1_no_empty_lines":"N, K = list(map(int, input().split()))\np = list(map(int, input().split()))\ntmp = sum(p[:K])\nmax = tmp\nfor i in range(N - K):\n    tmp = tmp - p[i] + p[i + K]\n    if tmp > max:\n        max = tmp\nprint(((max + K) \/ 2))\n","code_same":false,"relative_loc_diff_percent":15.3846153846,"diff":["-import numpy as np","-","-p = np.array(list(map(int, input().split())))","-tmp = np.sum(p[:K])","+p = list(map(int, input().split()))","+tmp = sum(p[:K])"],"diff_only_import_comment":false,"measured_runtime_v0":1.5991840155,"measured_runtime_v1":0.2738144584,"runtime_lift":5.8403928886,"key":["s372211236","s213603098"]}
{"user_id":"u923662841","problem_id":"p03309","language":"python","submission_id_v0":"s990999147","submission_id_v1":"s307361938","cpu_time_v0":211,"cpu_time_v1":159,"memory_v0":34024,"memory_v1":31160,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":24.64,"input":"import statistics\n\nN = int(eval(input()))\n\nA = [int(a)-i-1 for i,a in enumerate(input().split(),1)]\n\nb = statistics.median_low(A)\n\nc = statistics.median_high(A)\n\nd = sum([abs(x-b) for x in A])\n\ne = sum([abs(x-c) for x in A])\n\nprint((min(d,e)))","target":"N=int(eval(input()))\n\nA=sorted(a-i-1 for i,a in enumerate(map(int,input().split())))\n\nprint((sum(abs(a-A[N\/\/2]) for a in A)))","code_v0_loc":8,"code_v1_loc":3,"code_v0_num_chars":241,"code_v1_num_chars":117,"code_v0_no_empty_lines":"import statistics\n\nN = int(eval(input()))\nA = [int(a) - i - 1 for i, a in enumerate(input().split(), 1)]\nb = statistics.median_low(A)\nc = statistics.median_high(A)\nd = sum([abs(x - b) for x in A])\ne = sum([abs(x - c) for x in A])\nprint((min(d, e)))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = sorted(a - i - 1 for i, a in enumerate(map(int, input().split())))\nprint((sum(abs(a - A[N \/\/ 2]) for a in A)))\n","code_same":false,"relative_loc_diff_percent":62.5,"diff":["-import statistics","-","-A = [int(a) - i - 1 for i, a in enumerate(input().split(), 1)]","-b = statistics.median_low(A)","-c = statistics.median_high(A)","-d = sum([abs(x - b) for x in A])","-e = sum([abs(x - c) for x in A])","-print((min(d, e)))","+A = sorted(a - i - 1 for i, a in enumerate(map(int, input().split())))","+print((sum(abs(a - A[N \/\/ 2]) for a in A)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3014758439,"measured_runtime_v1":0.2369829128,"runtime_lift":1.2721416931,"key":["s990999147","s307361938"]}
{"user_id":"u060793972","problem_id":"p02690","language":"python","submission_id_v0":"s517275230","submission_id_v1":"s191136547","cpu_time_v0":69,"cpu_time_v1":37,"memory_v0":9100,"memory_v1":9100,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":46.38,"input":"x = int(eval(input()))\n\nfor i in range(-200,201):\n\n    for j in range(-200,201):\n\n        if (i**5)-(j**5)==x:\n\n            print((i,j))\n\n            exit()\n","target":"x = int(eval(input()))\n\nfor i in range(-120,121):\n\n    for j in range(-120,121):\n\n        if (i**5)-(j**5)==x:\n\n            print((i,j))\n\n            exit()\n","code_v0_loc":6,"code_v1_loc":6,"code_v0_num_chars":149,"code_v1_num_chars":149,"code_v0_no_empty_lines":"x = int(eval(input()))\nfor i in range(-200, 201):\n    for j in range(-200, 201):\n        if (i**5) - (j**5) == x:\n            print((i, j))\n            exit()\n","code_v1_no_empty_lines":"x = int(eval(input()))\nfor i in range(-120, 121):\n    for j in range(-120, 121):\n        if (i**5) - (j**5) == x:\n            print((i, j))\n            exit()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-for i in range(-200, 201):","-    for j in range(-200, 201):","+for i in range(-120, 121):","+    for j in range(-120, 121):"],"diff_only_import_comment":false,"measured_runtime_v0":0.5919232865,"measured_runtime_v1":0.3199627697,"runtime_lift":1.8499755049,"key":["s517275230","s191136547"]}
{"user_id":"u294385082","problem_id":"p03416","language":"python","submission_id_v0":"s823919342","submission_id_v1":"s499216276","cpu_time_v0":175,"cpu_time_v1":125,"memory_v0":2940,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":28.57,"input":"a,b = list(map(int,input().split()))\n\nc = 0\n\n\n\nfor i in range(a,b+1):\n\n  new = list(reversed(list(str(i))))\n\n  if new == list(str(i)):\n\n    c += 1\n\n    \n\n    \n\nprint(c)","target":"a,b = list(map(int,input().split()))\n\nc = 0\n\n\n\nfor i in range(a,b+1):\n\n  if list(str(i)) == list(str(i))[::-1]:\n\n    c += 1\n\n    \n\n    \n\nprint(c)","code_v0_loc":10,"code_v1_loc":9,"code_v0_num_chars":162,"code_v1_num_chars":139,"code_v0_no_empty_lines":"a, b = list(map(int, input().split()))\nc = 0\nfor i in range(a, b + 1):\n    new = list(reversed(list(str(i))))\n    if new == list(str(i)):\n        c += 1\nprint(c)\n","code_v1_no_empty_lines":"a, b = list(map(int, input().split()))\nc = 0\nfor i in range(a, b + 1):\n    if list(str(i)) == list(str(i))[::-1]:\n        c += 1\nprint(c)\n","code_same":false,"relative_loc_diff_percent":10.0,"diff":["-    new = list(reversed(list(str(i))))","-    if new == list(str(i)):","+    if list(str(i)) == list(str(i))[::-1]:"],"diff_only_import_comment":false,"measured_runtime_v0":0.7237584333,"measured_runtime_v1":0.3522657444,"runtime_lift":2.0545807954,"key":["s823919342","s499216276"]}
{"user_id":"u325282913","problem_id":"p03013","language":"python","submission_id_v0":"s961535130","submission_id_v1":"s147927462","cpu_time_v0":230,"cpu_time_v1":192,"memory_v0":40940,"memory_v1":7668,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.52,"input":"import sys\n\ninput = sys.stdin.readline\n\nN, M = list(map(int,input().split()))\n\nhole = [0] * (N+1)\n\nfor i in range(M):\n\n    hole[int(eval(input()))] = 1\n\nif N == 1:\n\n    print((1))\n\n    exit()\n\nif N == 2:\n\n    if hole[1] == 1:\n\n        print((1))\n\n        exit()\n\n    if hole[1] == 0:\n\n        print((2))\n\n        exit()\n\nflg_one = False\n\nflg_two = False\n\nfirst = 1\n\nsecond = 2\n\nif hole[1] == 1:\n\n    first = 0\n\n    second = 1\n\n    flg_one = True\n\nif hole[2] == 1:\n\n    first = 1\n\n    second = 0\n\n    flg_two = True\n\nif flg_one and flg_two:\n\n    print((0))\n\n    exit()\n\n\n\nfor i in range(3,N):\n\n    if hole[i] == 1:\n\n        first = second\n\n        second = 0\n\n        continue\n\n    tmp = first + second\n\n    tmp %= 1000000007\n\n    first = second\n\n    second = tmp\n\ntmp = first + second\n\ntmp %= 1000000007\n\nprint(tmp)","target":"MOD = 10**9 + 7\n\nN, M = list(map(int, input().split()))\n\nstairs = [0]*(N+1)\n\nfor _ in range(M):\n\n    stairs[int(eval(input()))] = 1\n\nif N == 1:\n\n    print((1))\n\n    exit()\n\nans = [0]*(N+1)\n\nans[1] = 1 if stairs[1] == 0 else 0\n\nans[2] = 1 + ans[1] if stairs[2] == 0 else 0\n\nfor i in range(3,N+1):\n\n    if stairs[i] == 1:\n\n        ans[i] = 0\n\n        continue\n\n    ans[i] = (ans[i-1] + ans[i-2]) % MOD\n\nprint((ans[N]))","code_v0_loc":44,"code_v1_loc":17,"code_v0_num_chars":795,"code_v1_num_chars":400,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nN, M = list(map(int, input().split()))\nhole = [0] * (N + 1)\nfor i in range(M):\n    hole[int(eval(input()))] = 1\nif N == 1:\n    print((1))\n    exit()\nif N == 2:\n    if hole[1] == 1:\n        print((1))\n        exit()\n    if hole[1] == 0:\n        print((2))\n        exit()\nflg_one = False\nflg_two = False\nfirst = 1\nsecond = 2\nif hole[1] == 1:\n    first = 0\n    second = 1\n    flg_one = True\nif hole[2] == 1:\n    first = 1\n    second = 0\n    flg_two = True\nif flg_one and flg_two:\n    print((0))\n    exit()\nfor i in range(3, N):\n    if hole[i] == 1:\n        first = second\n        second = 0\n        continue\n    tmp = first + second\n    tmp %= 1000000007\n    first = second\n    second = tmp\ntmp = first + second\ntmp %= 1000000007\nprint(tmp)\n","code_v1_no_empty_lines":"MOD = 10**9 + 7\nN, M = list(map(int, input().split()))\nstairs = [0] * (N + 1)\nfor _ in range(M):\n    stairs[int(eval(input()))] = 1\nif N == 1:\n    print((1))\n    exit()\nans = [0] * (N + 1)\nans[1] = 1 if stairs[1] == 0 else 0\nans[2] = 1 + ans[1] if stairs[2] == 0 else 0\nfor i in range(3, N + 1):\n    if stairs[i] == 1:\n        ans[i] = 0\n        continue\n    ans[i] = (ans[i - 1] + ans[i - 2]) % MOD\nprint((ans[N]))\n","code_same":false,"relative_loc_diff_percent":61.3636363636,"diff":["-import sys","-","-input = sys.stdin.readline","+MOD = 10**9 + 7","-hole = [0] * (N + 1)","-for i in range(M):","-    hole[int(eval(input()))] = 1","+stairs = [0] * (N + 1)","+for _ in range(M):","+    stairs[int(eval(input()))] = 1","-if N == 2:","-    if hole[1] == 1:","-        print((1))","-        exit()","-    if hole[1] == 0:","-        print((2))","-        exit()","-flg_one = False","-flg_two = False","-first = 1","-second = 2","-if hole[1] == 1:","-    first = 0","-    second = 1","-    flg_one = True","-if hole[2] == 1:","-    first = 1","-    second = 0","-    flg_two = True","-if flg_one and flg_two:","-    print((0))","-    exit()","-for i in range(3, N):","-    if hole[i] == 1:","-        first = second","-        second = 0","+ans = [0] * (N + 1)","+ans[1] = 1 if stairs[1] == 0 else 0","+ans[2] = 1 + ans[1] if stairs[2] == 0 else 0","+for i in range(3, N + 1):","+    if stairs[i] == 1:","+        ans[i] = 0","-    tmp = first + second","-    tmp %= 1000000007","-    first = second","-    second = tmp","-tmp = first + second","-tmp %= 1000000007","-print(tmp)","+    ans[i] = (ans[i - 1] + ans[i - 2]) % MOD","+print((ans[N]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3368466201,"measured_runtime_v1":0.2647972648,"runtime_lift":1.2720925207,"key":["s961535130","s147927462"]}
{"user_id":"u585482323","problem_id":"p03558","language":"python","submission_id_v0":"s378178699","submission_id_v1":"s370816259","cpu_time_v0":982,"cpu_time_v1":230,"memory_v0":88880,"memory_v1":47180,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":76.58,"input":"#!usr\/bin\/env python3\n\nfrom collections import defaultdict\n\nfrom collections import deque\n\nfrom heapq import heappush, heappop\n\nimport sys\n\nimport math\n\nimport bisect\n\nimport random\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\n\ndef I(): return int(sys.stdin.readline())\n\ndef LS():return list(map(list, sys.stdin.readline().split()))\n\ndef S(): return list(sys.stdin.readline())[:-1]\n\ndef IR(n):\n\n    l = [None for i in range(n)]\n\n    for i in range(n):l[i] = I()\n\n    return l\n\ndef LIR(n):\n\n    l = [None for i in range(n)]\n\n    for i in range(n):l[i] = LI()\n\n    return l\n\ndef SR(n):\n\n    l = [None for i in range(n)]\n\n    for i in range(n):l[i] = S()\n\n    return l\n\ndef LSR(n):\n\n    l = [None for i in range(n)]\n\n    for i in range(n):l[i] = SR()\n\n    return l\n\nmod = 1000000007\n\n\n\n#A\n\ndef A():\n\n    s = S()\n\n    t = S()\n\n    if s+t == t[::-1]+s[::-1]:\n\n        print(\"YES\")\n\n    else:\n\n        print(\"NO\")\n\n\n\n#B\n\ndef B():\n\n    n = I()\n\n    for i in range(int(n**0.5)+2)[::-1]:\n\n        if i*i <= n:\n\n            print((i*i))\n\n            quit()\n\n#C\n\ndef C():\n\n    n = I()\n\n    a = LI()\n\n    b = LI()\n\n    c = LI()\n\n    q = [0 for i in range(n)]\n\n    ans = 0\n\n    a.sort()\n\n    b.sort()\n\n    c.sort()\n\n    for i in range(n):\n\n        j = bisect.bisect_left(a,b[i])\n\n        q[i] = j\n\n    for i in range(n-1):\n\n        q[i+1] += q[i]\n\n    q.insert(0,0)\n\n    for i in range(n):\n\n        j = bisect.bisect_left(b,c[i])\n\n        ans += q[j]\n\n    print(ans)\n\n#D\n\ndef D():\n\n    def dijkstra():\n\n        d = [float(\"inf\") for i in range(k)]\n\n        q = [[0,1]]\n\n        d[1] = 0\n\n        while q:\n\n            dx,x = heappop(q)\n\n            for y,dy in v[x]:\n\n                if d[y] > dx+dy:\n\n                    d[y] = dx+dy\n\n                    heappush(q,[d[y],y])\n\n        print((d[0]+1))\n\n    k = I()\n\n    if k == 1:\n\n        print((1))\n\n        quit()\n\n    v = [[] for i in range(k)]\n\n    for i in range(1,k):\n\n        v[i].append([(i+1)%k,1])\n\n        v[i].append([i*10%k,0])\n\n    dijkstra()\n\n#E\n\ndef E():\n\n    return\n\n\n\n#F\n\ndef F():\n\n    return\n\n\n\n#G\n\ndef G():\n\n    return\n\n\n\n#H\n\ndef H():\n\n    return\n\n\n\n#Solve\n\nif __name__ == \"__main__\":\n\n    D()\n","target":"#!usr\/bin\/env python3\n\nfrom collections import defaultdict,deque\n\nfrom heapq import heappush, heappop\n\nfrom itertools import permutations\n\nimport sys\n\nimport math\n\nimport bisect\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\n\ndef I(): return int(sys.stdin.readline())\n\ndef LS():return [list(x) for x in sys.stdin.readline().split()]\n\ndef S():\n\n    res = list(sys.stdin.readline())\n\n    if res[-1] == \"\\n\":\n\n        return res[:-1]\n\n    return res\n\ndef IR(n):\n\n    return [I() for i in range(n)]\n\ndef LIR(n):\n\n    return [LI() for i in range(n)]\n\ndef SR(n):\n\n    return [S() for i in range(n)]\n\ndef LSR(n):\n\n    return [LS() for i in range(n)]\n\n\n\nsys.setrecursionlimit(1000000)\n\nmod = 1000000007\n\n\n\ndef solve():\n\n    def v(n):\n\n        return [n*10%k, (n+1)%k]\n\n    k = I()\n\n    d = [float(\"inf\")]*k\n\n    d[1] = 1\n\n    q = deque([1])\n\n    while q:\n\n        x = q.popleft()\n\n        vx = v(x)\n\n        dx = d[x]\n\n        for c in range(2):\n\n            nd = dx+c\n\n            y = vx[c]\n\n            if nd < d[y]:\n\n                d[y] = nd\n\n                if c:\n\n                    q.append(y)\n\n                else:\n\n                    q.appendleft(y)\n\n    print((d[0]))\n\n    return\n\n\n\n#Solve\n\nif __name__ == \"__main__\":\n\n    solve()\n","code_v0_loc":108,"code_v1_loc":53,"code_v0_num_chars":2164,"code_v1_num_chars":1252,"code_v0_no_empty_lines":"#!usr\/bin\/env python3\nfrom collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef I():\n    return int(sys.stdin.readline())\n\n\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\n\n\ndef S():\n    return list(sys.stdin.readline())[:-1]\n\n\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\n\n\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\n\n\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\n\n\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = SR()\n    return l\n\n\nmod = 1000000007\n# A\ndef A():\n    s = S()\n    t = S()\n    if s + t == t[::-1] + s[::-1]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\n# B\ndef B():\n    n = I()\n    for i in range(int(n**0.5) + 2)[::-1]:\n        if i * i <= n:\n            print((i * i))\n            quit()\n\n\n# C\ndef C():\n    n = I()\n    a = LI()\n    b = LI()\n    c = LI()\n    q = [0 for i in range(n)]\n    ans = 0\n    a.sort()\n    b.sort()\n    c.sort()\n    for i in range(n):\n        j = bisect.bisect_left(a, b[i])\n        q[i] = j\n    for i in range(n - 1):\n        q[i + 1] += q[i]\n    q.insert(0, 0)\n    for i in range(n):\n        j = bisect.bisect_left(b, c[i])\n        ans += q[j]\n    print(ans)\n\n\n# D\ndef D():\n    def dijkstra():\n        d = [float(\"inf\") for i in range(k)]\n        q = [[0, 1]]\n        d[1] = 0\n        while q:\n            dx, x = heappop(q)\n            for y, dy in v[x]:\n                if d[y] > dx + dy:\n                    d[y] = dx + dy\n                    heappush(q, [d[y], y])\n        print((d[0] + 1))\n\n    k = I()\n    if k == 1:\n        print((1))\n        quit()\n    v = [[] for i in range(k)]\n    for i in range(1, k):\n        v[i].append([(i + 1) % k, 1])\n        v[i].append([i * 10 % k, 0])\n    dijkstra()\n\n\n# E\ndef E():\n    return\n\n\n# F\ndef F():\n    return\n\n\n# G\ndef G():\n    return\n\n\n# H\ndef H():\n    return\n\n\n# Solve\nif __name__ == \"__main__\":\n    D()\n","code_v1_no_empty_lines":"#!usr\/bin\/env python3\nfrom collections import defaultdict, deque\nfrom heapq import heappush, heappop\nfrom itertools import permutations\nimport sys\nimport math\nimport bisect\n\n\ndef LI():\n    return [int(x) for x in sys.stdin.readline().split()]\n\n\ndef I():\n    return int(sys.stdin.readline())\n\n\ndef LS():\n    return [list(x) for x in sys.stdin.readline().split()]\n\n\ndef S():\n    res = list(sys.stdin.readline())\n    if res[-1] == \"\\n\":\n        return res[:-1]\n    return res\n\n\ndef IR(n):\n    return [I() for i in range(n)]\n\n\ndef LIR(n):\n    return [LI() for i in range(n)]\n\n\ndef SR(n):\n    return [S() for i in range(n)]\n\n\ndef LSR(n):\n    return [LS() for i in range(n)]\n\n\nsys.setrecursionlimit(1000000)\nmod = 1000000007\n\n\ndef solve():\n    def v(n):\n        return [n * 10 % k, (n + 1) % k]\n\n    k = I()\n    d = [float(\"inf\")] * k\n    d[1] = 1\n    q = deque([1])\n    while q:\n        x = q.popleft()\n        vx = v(x)\n        dx = d[x]\n        for c in range(2):\n            nd = dx + c\n            y = vx[c]\n            if nd < d[y]:\n                d[y] = nd\n                if c:\n                    q.append(y)\n                else:\n                    q.appendleft(y)\n    print((d[0]))\n    return\n\n\n# Solve\nif __name__ == \"__main__\":\n    solve()\n","code_same":false,"relative_loc_diff_percent":50.9259259259,"diff":["-from collections import defaultdict","-from collections import deque","+from collections import defaultdict, deque","+from itertools import permutations","-import random","-    return list(map(int, sys.stdin.readline().split()))","+    return [int(x) for x in sys.stdin.readline().split()]","-    return list(map(list, sys.stdin.readline().split()))","+    return [list(x) for x in sys.stdin.readline().split()]","-    return list(sys.stdin.readline())[:-1]","+    res = list(sys.stdin.readline())","+    if res[-1] == \"\\n\":","+        return res[:-1]","+    return res","-    l = [None for i in range(n)]","-    for i in range(n):","-        l[i] = I()","-    return l","+    return [I() for i in range(n)]","-    l = [None for i in range(n)]","-    for i in range(n):","-        l[i] = LI()","-    return l","+    return [LI() for i in range(n)]","-    l = [None for i in range(n)]","-    for i in range(n):","-        l[i] = S()","-    return l","+    return [S() for i in range(n)]","-    l = [None for i in range(n)]","-    for i in range(n):","-        l[i] = SR()","-    return l","+    return [LS() for i in range(n)]","+sys.setrecursionlimit(1000000)","-# A","-def A():","-    s = S()","-    t = S()","-    if s + t == t[::-1] + s[::-1]:","-        print(\"YES\")","-    else:","-        print(\"NO\")","-# B","-def B():","-    n = I()","-    for i in range(int(n**0.5) + 2)[::-1]:","-        if i * i <= n:","-            print((i * i))","-            quit()","-","-","-# C","-def C():","-    n = I()","-    a = LI()","-    b = LI()","-    c = LI()","-    q = [0 for i in range(n)]","-    ans = 0","-    a.sort()","-    b.sort()","-    c.sort()","-    for i in range(n):","-        j = bisect.bisect_left(a, b[i])","-        q[i] = j","-    for i in range(n - 1):","-        q[i + 1] += q[i]","-    q.insert(0, 0)","-    for i in range(n):","-        j = bisect.bisect_left(b, c[i])","-        ans += q[j]","-    print(ans)","-","-","-# D","-def D():","-    def dijkstra():","-        d = [float(\"inf\") for i in range(k)]","-        q = [[0, 1]]","-        d[1] = 0","-        while q:","-            dx, x = heappop(q)","-            for y, dy in v[x]:","-                if d[y] > dx + dy:","-                    d[y] = dx + dy","-                    heappush(q, [d[y], y])","-        print((d[0] + 1))","+def solve():","+    def v(n):","+        return [n * 10 % k, (n + 1) % k]","-    if k == 1:","-        print((1))","-        quit()","-    v = [[] for i in range(k)]","-    for i in range(1, k):","-        v[i].append([(i + 1) % k, 1])","-        v[i].append([i * 10 % k, 0])","-    dijkstra()","-","-","-# E","-def E():","-    return","-","-","-# F","-def F():","-    return","-","-","-# G","-def G():","-    return","-","-","-# H","-def H():","+    d = [float(\"inf\")] * k","+    d[1] = 1","+    q = deque([1])","+    while q:","+        x = q.popleft()","+        vx = v(x)","+        dx = d[x]","+        for c in range(2):","+            nd = dx + c","+            y = vx[c]","+            if nd < d[y]:","+                d[y] = nd","+                if c:","+                    q.append(y)","+                else:","+                    q.appendleft(y)","+    print((d[0]))","-    D()","+    solve()"],"diff_only_import_comment":false,"measured_runtime_v0":0.6112481251,"measured_runtime_v1":0.2866115916,"runtime_lift":2.1326706352,"key":["s378178699","s370816259"]}
{"user_id":"u815878613","problem_id":"p02994","language":"python","submission_id_v0":"s699978858","submission_id_v1":"s611045566","cpu_time_v0":314,"cpu_time_v1":31,"memory_v0":21116,"memory_v1":9068,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":90.13,"input":"import sys\n\nimport numpy as np\n\n\n\nN, L = list(map(int, input().split()))\n\n\n\n# \u5473\n\nLL = np.arange(L,L+N)\n\n\n\nm = abs(LL[0])\n\n\n\nfor i in range(N):\n\n    if abs(m) > abs(LL[i]):\n\n        m = LL[i]\n\n\n\nprint((np.sum(LL)-m))\n","target":"N, L = list(map(int, input().split()))\n\n\n\nA = [i for i in range(L, L + N)]\n\n\n\nif A[0] < 0:\n\n    if A[-1] < 0:\n\n        print((sum(A) - max(A)))\n\n    else:\n\n        print((sum(A)))\n\nelse:\n\n    print((sum(A) - min(A)))\n","code_v0_loc":15,"code_v1_loc":11,"code_v0_num_chars":214,"code_v1_num_chars":205,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nN, L = list(map(int, input().split()))\n# \u5473\nLL = np.arange(L, L + N)\nm = abs(LL[0])\nfor i in range(N):\n    if abs(m) > abs(LL[i]):\n        m = LL[i]\nprint((np.sum(LL) - m))\n","code_v1_no_empty_lines":"N, L = list(map(int, input().split()))\nA = [i for i in range(L, L + N)]\nif A[0] < 0:\n    if A[-1] < 0:\n        print((sum(A) - max(A)))\n    else:\n        print((sum(A)))\nelse:\n    print((sum(A) - min(A)))\n","code_same":false,"relative_loc_diff_percent":26.6666666667,"diff":["-import sys","-import numpy as np","-","-# \u5473","-LL = np.arange(L, L + N)","-m = abs(LL[0])","-for i in range(N):","-    if abs(m) > abs(LL[i]):","-        m = LL[i]","-print((np.sum(LL) - m))","+A = [i for i in range(L, L + N)]","+if A[0] < 0:","+    if A[-1] < 0:","+        print((sum(A) - max(A)))","+    else:","+        print((sum(A)))","+else:","+    print((sum(A) - min(A)))"],"diff_only_import_comment":false,"measured_runtime_v0":1.5312956157,"measured_runtime_v1":0.2108477986,"runtime_lift":7.2625639246,"key":["s699978858","s611045566"]}
{"user_id":"u089230684","problem_id":"p03796","language":"python","submission_id_v0":"s560811979","submission_id_v1":"s868944422","cpu_time_v0":230,"cpu_time_v1":37,"memory_v0":3984,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":83.91,"input":"import math\n\nx = int(eval(input()))\n\nprint((math.factorial(x) % (10**9 + 7)))","target":"n = int(eval(input()))\n\nfact = 1\n\nfor i in range(1,n+1):\n\n  fact = fact * i % (10**9 +7)\n\nres = fact % (10**9 + 7)\n\nprint(res)","code_v0_loc":3,"code_v1_loc":6,"code_v0_num_chars":69,"code_v1_num_chars":120,"code_v0_no_empty_lines":"import math\n\nx = int(eval(input()))\nprint((math.factorial(x) % (10**9 + 7)))\n","code_v1_no_empty_lines":"n = int(eval(input()))\nfact = 1\nfor i in range(1, n + 1):\n    fact = fact * i % (10**9 + 7)\nres = fact % (10**9 + 7)\nprint(res)\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-import math","-","-x = int(eval(input()))","-print((math.factorial(x) % (10**9 + 7)))","+n = int(eval(input()))","+fact = 1","+for i in range(1, n + 1):","+    fact = fact * i % (10**9 + 7)","+res = fact % (10**9 + 7)","+print(res)"],"diff_only_import_comment":false,"measured_runtime_v0":0.5532854562,"measured_runtime_v1":0.2473686228,"runtime_lift":2.2366840626,"key":["s560811979","s868944422"]}
{"user_id":"u545368057","problem_id":"p02537","language":"python","submission_id_v0":"s767194684","submission_id_v1":"s838681052","cpu_time_v0":1543,"cpu_time_v1":497,"memory_v0":111052,"memory_v1":90604,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":67.79,"input":"import sys\n\ninput = sys.stdin.readline\n\n\n\nn,k = list(map(int, input().split()))\n\nAs = [int(eval(input())) for i in range(n)]\n\n\n\n# N: \u51e6\u7406\u3059\u308b\u533a\u9593\u306e\u9577\u3055\n\n\n\nINF = 0\n\n\n\nmx = 300001\n\nLV = (mx-1).bit_length()\n\nN0 = 2**LV\n\ndata = [INF]*(2*N0)\n\nlazy = [None]*(2*N0)\n\n\n\n# \u4f1d\u642c\u5bfe\u8c61\u306e\u533a\u9593\u3092\u6c42\u3081\u308b\n\ndef gindex(l, r):\n\n    L = (l + N0) >> 1; R = (r + N0) >> 1\n\n    lc = 0 if l & 1 else (L & -L).bit_length()\n\n    rc = 0 if r & 1 else (R & -R).bit_length()\n\n    for i in range(LV):\n\n        if rc <= i:\n\n            yield R\n\n        if L < R and lc <= i:\n\n            yield L\n\n        L >>= 1; R >>= 1\n\n\n\n# \u9045\u5ef6\u4f1d\u642c\u51e6\u7406\n\ndef propagates(*ids):\n\n    for i in reversed(ids):\n\n        v = lazy[i-1]\n\n        if v is None:\n\n            continue\n\n        lazy[2*i-1] = data[2*i-1] = lazy[2*i] = data[2*i] = v\n\n        lazy[i-1] = None\n\n\n\n# \u533a\u9593[l, r)\u3092x\u3067\u66f4\u65b0\n\ndef update(l, r, x):\n\n    *ids, = gindex(l, r)\n\n    propagates(*ids)\n\n\n\n    L = N0 + l; R = N0 + r\n\n    while L < R:\n\n        if R & 1:\n\n            R -= 1\n\n            lazy[R-1] = data[R-1] = x\n\n        if L & 1:\n\n            lazy[L-1] = data[L-1] = x\n\n            L += 1\n\n        L >>= 1; R >>= 1\n\n    for i in ids:\n\n        data[i-1] = max(data[2*i-1], data[2*i])\n\n\n\n# \u533a\u9593[l, r)\u5185\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\n\ndef query(l, r):\n\n    propagates(*gindex(l, r))\n\n    L = N0 + l; R = N0 + r\n\n\n\n    s = INF\n\n    while L < R:\n\n        if R & 1:\n\n            R -= 1\n\n            s = max(s, data[R-1])\n\n        if L & 1:\n\n            s = max(s, data[L-1])\n\n            L += 1\n\n        L >>= 1; R >>= 1\n\n    return s\n\n\n\nans = 0\n\nupdate(As[0],As[0]+1,1)\n\nfor i, a in enumerate(As[1:]):\n\n    l = max(0,a-k)\n\n    r = min(mx,a+k)\n\n    upd = query(l,r+1)\n\n    if upd == -1:continue\n\n    # print(\"i\",i,\"a\",a,\"upd\",upd,\"l\",l,\"r\",r)\n\n    update(a, a+1, upd+1)\n\n    ans = max(ans, upd+1)\n\nprint(ans)\n\n\n","target":"# \u30bb\u30b0\u30e1\u30f3\u30c8\u6728\n\n# segment tree\n\nimport sys\n\ninput = sys.stdin.readline\n\n\n\nclass segmented_tree:\n\n    X_unit = 0\n\n    X_f = lambda self, a, b: max(a,b)\n\n    def __init__(self, N):\n\n        self.N = N\n\n        self.X = [self.X_unit] * (2*N)\n\n        \n\n    def build(self, seq):\n\n        for i, x in enumerate(seq, self.N):\n\n            self.X[i] = x \n\n        # \u5f8c\u308d\u304b\u3089\u5165\u308c\u3066\u3044\u304f\n\n        for i in range(self.N-1, 0, -1):\n\n            self.X[i] = self.X_f(self.X[i<<1], self.X[i<<1|1])\n\n\n\n    # 1\u70b9\u66f4\u65b0\n\n    def set_val(self, i, x):\n\n        i += self.N\n\n        self.X[i] = x\n\n        while i > 1:\n\n            i >>= 1\n\n            self.X[i] = self.X_f(self.X[i<<1],self.X[i<<1|1])\n\n    \n\n    # \u533a\u9593\u53d6\u5f97\n\n    def fold(self, l, r):\n\n        l += self.N\n\n        r += self.N\n\n        vl = self.X_unit\n\n        vr = self.X_unit\n\n        # \u5916\u304b\u3089\u6c7a\u3081\u3066\u3044\u304f\n\n        while l < r:\n\n            # print(l,r)\n\n            if l & 1:\n\n                vl = self.X_f(vl, self.X[l])\n\n                l += 1\n\n            if r & 1:\n\n                r -= 1\n\n                vr = self.X_f(vr, self.X[r])\n\n            l >>= 1\n\n            r >>= 1\n\n        return self.X_f(vl,vr)\n\n\n\nn,k = list(map(int, input().split()))\n\nAs = [int(eval(input())) for i in range(n)]\n\nmx = 300001\n\nans = 0\n\nsg = segmented_tree(330000)\n\n\n\nfor a in As:\n\n    l = max(0,a-k)\n\n    r = min(mx,a+k)\n\n\n\n    upd = sg.fold(l,r+1)\n\n    ans = max(ans, upd+1)\n\n\n\n    sg.set_val(a, upd+1)\n\nprint(ans)\n\n\n","code_v0_loc":82,"code_v1_loc":62,"code_v0_num_chars":1762,"code_v1_num_chars":1410,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.readline\nn, k = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\n# N: \u51e6\u7406\u3059\u308b\u533a\u9593\u306e\u9577\u3055\nINF = 0\nmx = 300001\nLV = (mx - 1).bit_length()\nN0 = 2**LV\ndata = [INF] * (2 * N0)\nlazy = [None] * (2 * N0)\n# \u4f1d\u642c\u5bfe\u8c61\u306e\u533a\u9593\u3092\u6c42\u3081\u308b\ndef gindex(l, r):\n    L = (l + N0) >> 1\n    R = (r + N0) >> 1\n    lc = 0 if l & 1 else (L & -L).bit_length()\n    rc = 0 if r & 1 else (R & -R).bit_length()\n    for i in range(LV):\n        if rc <= i:\n            yield R\n        if L < R and lc <= i:\n            yield L\n        L >>= 1\n        R >>= 1\n\n\n# \u9045\u5ef6\u4f1d\u642c\u51e6\u7406\ndef propagates(*ids):\n    for i in reversed(ids):\n        v = lazy[i - 1]\n        if v is None:\n            continue\n        lazy[2 * i - 1] = data[2 * i - 1] = lazy[2 * i] = data[2 * i] = v\n        lazy[i - 1] = None\n\n\n# \u533a\u9593[l, r)\u3092x\u3067\u66f4\u65b0\ndef update(l, r, x):\n    (*ids,) = gindex(l, r)\n    propagates(*ids)\n    L = N0 + l\n    R = N0 + r\n    while L < R:\n        if R & 1:\n            R -= 1\n            lazy[R - 1] = data[R - 1] = x\n        if L & 1:\n            lazy[L - 1] = data[L - 1] = x\n            L += 1\n        L >>= 1\n        R >>= 1\n    for i in ids:\n        data[i - 1] = max(data[2 * i - 1], data[2 * i])\n\n\n# \u533a\u9593[l, r)\u5185\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b\ndef query(l, r):\n    propagates(*gindex(l, r))\n    L = N0 + l\n    R = N0 + r\n    s = INF\n    while L < R:\n        if R & 1:\n            R -= 1\n            s = max(s, data[R - 1])\n        if L & 1:\n            s = max(s, data[L - 1])\n            L += 1\n        L >>= 1\n        R >>= 1\n    return s\n\n\nans = 0\nupdate(As[0], As[0] + 1, 1)\nfor i, a in enumerate(As[1:]):\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = query(l, r + 1)\n    if upd == -1:\n        continue\n    # print(\"i\",i,\"a\",a,\"upd\",upd,\"l\",l,\"r\",r)\n    update(a, a + 1, upd + 1)\n    ans = max(ans, upd + 1)\nprint(ans)\n","code_v1_no_empty_lines":"# \u30bb\u30b0\u30e1\u30f3\u30c8\u6728\n# segment tree\nimport sys\n\ninput = sys.stdin.readline\n\n\nclass segmented_tree:\n    X_unit = 0\n    X_f = lambda self, a, b: max(a, b)\n\n    def __init__(self, N):\n        self.N = N\n        self.X = [self.X_unit] * (2 * N)\n\n    def build(self, seq):\n        for i, x in enumerate(seq, self.N):\n            self.X[i] = x\n        # \u5f8c\u308d\u304b\u3089\u5165\u308c\u3066\u3044\u304f\n        for i in range(self.N - 1, 0, -1):\n            self.X[i] = self.X_f(self.X[i << 1], self.X[i << 1 | 1])\n\n    # 1\u70b9\u66f4\u65b0\n    def set_val(self, i, x):\n        i += self.N\n        self.X[i] = x\n        while i > 1:\n            i >>= 1\n            self.X[i] = self.X_f(self.X[i << 1], self.X[i << 1 | 1])\n\n    # \u533a\u9593\u53d6\u5f97\n    def fold(self, l, r):\n        l += self.N\n        r += self.N\n        vl = self.X_unit\n        vr = self.X_unit\n        # \u5916\u304b\u3089\u6c7a\u3081\u3066\u3044\u304f\n        while l < r:\n            # print(l,r)\n            if l & 1:\n                vl = self.X_f(vl, self.X[l])\n                l += 1\n            if r & 1:\n                r -= 1\n                vr = self.X_f(vr, self.X[r])\n            l >>= 1\n            r >>= 1\n        return self.X_f(vl, vr)\n\n\nn, k = list(map(int, input().split()))\nAs = [int(eval(input())) for i in range(n)]\nmx = 300001\nans = 0\nsg = segmented_tree(330000)\nfor a in As:\n    l = max(0, a - k)\n    r = min(mx, a + k)\n    upd = sg.fold(l, r + 1)\n    ans = max(ans, upd + 1)\n    sg.set_val(a, upd + 1)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":24.3902439024,"diff":["+# \u30bb\u30b0\u30e1\u30f3\u30c8\u6728","+# segment tree","+","+","+class segmented_tree:","+    X_unit = 0","+    X_f = lambda self, a, b: max(a, b)","+","+    def __init__(self, N):","+        self.N = N","+        self.X = [self.X_unit] * (2 * N)","+","+    def build(self, seq):","+        for i, x in enumerate(seq, self.N):","+            self.X[i] = x","+        # \u5f8c\u308d\u304b\u3089\u5165\u308c\u3066\u3044\u304f","+        for i in range(self.N - 1, 0, -1):","+            self.X[i] = self.X_f(self.X[i << 1], self.X[i << 1 | 1])","+","+    # 1\u70b9\u66f4\u65b0","+    def set_val(self, i, x):","+        i += self.N","+        self.X[i] = x","+        while i > 1:","+            i >>= 1","+            self.X[i] = self.X_f(self.X[i << 1], self.X[i << 1 | 1])","+","+    # \u533a\u9593\u53d6\u5f97","+    def fold(self, l, r):","+        l += self.N","+        r += self.N","+        vl = self.X_unit","+        vr = self.X_unit","+        # \u5916\u304b\u3089\u6c7a\u3081\u3066\u3044\u304f","+        while l < r:","+            # print(l,r)","+            if l & 1:","+                vl = self.X_f(vl, self.X[l])","+                l += 1","+            if r & 1:","+                r -= 1","+                vr = self.X_f(vr, self.X[r])","+            l >>= 1","+            r >>= 1","+        return self.X_f(vl, vr)","+","+","-# N: \u51e6\u7406\u3059\u308b\u533a\u9593\u306e\u9577\u3055","-INF = 0","-LV = (mx - 1).bit_length()","-N0 = 2**LV","-data = [INF] * (2 * N0)","-lazy = [None] * (2 * N0)","-# \u4f1d\u642c\u5bfe\u8c61\u306e\u533a\u9593\u3092\u6c42\u3081\u308b","-def gindex(l, r):","-    L = (l + N0) >> 1","-    R = (r + N0) >> 1","-    lc = 0 if l & 1 else (L & -L).bit_length()","-    rc = 0 if r & 1 else (R & -R).bit_length()","-    for i in range(LV):","-        if rc <= i:","-            yield R","-        if L < R and lc <= i:","-            yield L","-        L >>= 1","-        R >>= 1","-","-","-# \u9045\u5ef6\u4f1d\u642c\u51e6\u7406","-def propagates(*ids):","-    for i in reversed(ids):","-        v = lazy[i - 1]","-        if v is None:","-            continue","-        lazy[2 * i - 1] = data[2 * i - 1] = lazy[2 * i] = data[2 * i] = v","-        lazy[i - 1] = None","-","-","-# \u533a\u9593[l, r)\u3092x\u3067\u66f4\u65b0","-def update(l, r, x):","-    (*ids,) = gindex(l, r)","-    propagates(*ids)","-    L = N0 + l","-    R = N0 + r","-    while L < R:","-        if R & 1:","-            R -= 1","-            lazy[R - 1] = data[R - 1] = x","-        if L & 1:","-            lazy[L - 1] = data[L - 1] = x","-            L += 1","-        L >>= 1","-        R >>= 1","-    for i in ids:","-        data[i - 1] = max(data[2 * i - 1], data[2 * i])","-","-","-# \u533a\u9593[l, r)\u5185\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u308b","-def query(l, r):","-    propagates(*gindex(l, r))","-    L = N0 + l","-    R = N0 + r","-    s = INF","-    while L < R:","-        if R & 1:","-            R -= 1","-            s = max(s, data[R - 1])","-        if L & 1:","-            s = max(s, data[L - 1])","-            L += 1","-        L >>= 1","-        R >>= 1","-    return s","-","-","-update(As[0], As[0] + 1, 1)","-for i, a in enumerate(As[1:]):","+sg = segmented_tree(330000)","+for a in As:","-    upd = query(l, r + 1)","-    if upd == -1:","-        continue","-    # print(\"i\",i,\"a\",a,\"upd\",upd,\"l\",l,\"r\",r)","-    update(a, a + 1, upd + 1)","+    upd = sg.fold(l, r + 1)","+    sg.set_val(a, upd + 1)"],"diff_only_import_comment":false,"measured_runtime_v0":0.5116031129,"measured_runtime_v1":0.2937918727,"runtime_lift":1.7413793927,"key":["s767194684","s838681052"]}
{"user_id":"u164727245","problem_id":"p02596","language":"python","submission_id_v0":"s121951272","submission_id_v1":"s390007993","cpu_time_v0":131,"cpu_time_v1":33,"memory_v0":9476,"memory_v1":9244,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":74.81,"input":"# coding: utf-8\n\n\n\n\n\ndef solve(*args: str) -> str:\n\n    k = int(args[0])\n\n\n\n    l = 9*(k\/\/7 if k % 7 == 0 else k)\n\n    if l % 2 == 0 or l % 5 == 0:\n\n        return '-1'\n\n\n\n    r = phi = l\n\n    for i in range(2, int(-pow(l, 1\/2))):\n\n        if r % i == 0:\n\n            phi = phi\/\/i*(i-1)\n\n            while r % i:\n\n                r \/\/= i\n\n\n\n    a = 10 % l\n\n    ret = 1\n\n    while(a != 1):\n\n        a = a*10 % l\n\n        ret += 1\n\n        if phi < ret:\n\n            ret = -1\n\n            break\n\n\n\n    return str(ret)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    print((solve(*(open(0).read().splitlines()))))\n","target":"# coding: utf-8\n\nfrom math import sqrt\n\n\n\n\n\ndef solve(*args: str) -> str:\n\n    k = int(args[0])\n\n\n\n    l = 9*(k\/\/7 if 0 == k % 7 else k)\n\n    if 0 == l % 2 or 0 == l % 5:\n\n        return '-1'\n\n\n\n    r = phi = l\n\n    for i in range(2, int(sqrt(l)+1)):\n\n        if 0 == r % i:\n\n            phi = phi*(i-1)\/\/i\n\n            while 0 == r % i:\n\n                r \/\/= i\n\n    if 1 < r:\n\n        phi = phi*(r-1)\/\/r\n\n\n\n    D = set()\n\n    for d in range(1, int(sqrt(phi)+1)):\n\n        if 0 == phi % d:\n\n            D.add(d)\n\n            D.add(phi\/\/d)\n\n\n\n    ret = -1\n\n    for m in sorted(D):\n\n        if 1 == pow(10, m, l):\n\n            ret = m\n\n            break\n\n\n\n    return str(ret)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    print((solve(*(open(0).read().splitlines()))))\n","code_v0_loc":31,"code_v1_loc":37,"code_v0_num_chars":598,"code_v1_num_chars":758,"code_v0_no_empty_lines":"# coding: utf-8\ndef solve(*args: str) -> str:\n    k = int(args[0])\n    l = 9 * (k \/\/ 7 if k % 7 == 0 else k)\n    if l % 2 == 0 or l % 5 == 0:\n        return \"-1\"\n    r = phi = l\n    for i in range(2, int(-pow(l, 1 \/ 2))):\n        if r % i == 0:\n            phi = phi \/\/ i * (i - 1)\n            while r % i:\n                r \/\/= i\n    a = 10 % l\n    ret = 1\n    while a != 1:\n        a = a * 10 % l\n        ret += 1\n        if phi < ret:\n            ret = -1\n            break\n    return str(ret)\n\n\nif __name__ == \"__main__\":\n    print((solve(*(open(0).read().splitlines()))))\n","code_v1_no_empty_lines":"# coding: utf-8\nfrom math import sqrt\n\n\ndef solve(*args: str) -> str:\n    k = int(args[0])\n    l = 9 * (k \/\/ 7 if 0 == k % 7 else k)\n    if 0 == l % 2 or 0 == l % 5:\n        return \"-1\"\n    r = phi = l\n    for i in range(2, int(sqrt(l) + 1)):\n        if 0 == r % i:\n            phi = phi * (i - 1) \/\/ i\n            while 0 == r % i:\n                r \/\/= i\n    if 1 < r:\n        phi = phi * (r - 1) \/\/ r\n    D = set()\n    for d in range(1, int(sqrt(phi) + 1)):\n        if 0 == phi % d:\n            D.add(d)\n            D.add(phi \/\/ d)\n    ret = -1\n    for m in sorted(D):\n        if 1 == pow(10, m, l):\n            ret = m\n            break\n    return str(ret)\n\n\nif __name__ == \"__main__\":\n    print((solve(*(open(0).read().splitlines()))))\n","code_same":false,"relative_loc_diff_percent":16.2162162162,"diff":["+from math import sqrt","+","+","-    l = 9 * (k \/\/ 7 if k % 7 == 0 else k)","-    if l % 2 == 0 or l % 5 == 0:","+    l = 9 * (k \/\/ 7 if 0 == k % 7 else k)","+    if 0 == l % 2 or 0 == l % 5:","-    for i in range(2, int(-pow(l, 1 \/ 2))):","-        if r % i == 0:","-            phi = phi \/\/ i * (i - 1)","-            while r % i:","+    for i in range(2, int(sqrt(l) + 1)):","+        if 0 == r % i:","+            phi = phi * (i - 1) \/\/ i","+            while 0 == r % i:","-    a = 10 % l","-    ret = 1","-    while a != 1:","-        a = a * 10 % l","-        ret += 1","-        if phi < ret:","-            ret = -1","+    if 1 < r:","+        phi = phi * (r - 1) \/\/ r","+    D = set()","+    for d in range(1, int(sqrt(phi) + 1)):","+        if 0 == phi % d:","+            D.add(d)","+            D.add(phi \/\/ d)","+    ret = -1","+    for m in sorted(D):","+        if 1 == pow(10, m, l):","+            ret = m"],"diff_only_import_comment":false,"measured_runtime_v0":0.4349818358,"measured_runtime_v1":0.2757263954,"runtime_lift":1.5775850377,"key":["s121951272","s390007993"]}
{"user_id":"u440566786","problem_id":"p02863","language":"python","submission_id_v0":"s564882715","submission_id_v1":"s252011051","cpu_time_v0":496,"cpu_time_v1":355,"memory_v0":47580,"memory_v1":43228,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":28.43,"input":"import sys\n\nsys.setrecursionlimit(2147483647)\n\nINF=float(\"inf\")\n\nMOD=10**9+7\n\ninput=lambda :sys.stdin.readline().rstrip()\n\ndef resolve():\n\n    n,T=list(map(int,input().split()))\n\n    AB=[tuple(map(int,input().split())) for _ in range(n)]\n\n    ans=-INF\n\n\n\n    # \u4f55\u3082\u8003\u3048\u305a\u3084\u308b\n\n    dp=[0]*T\n\n    for i in range(n):\n\n        a,b=AB[i]\n\n        ndp=dp[:]\n\n        for t in range(T):\n\n            if(t+a<T):\n\n                ndp[t+a]=max(ndp[t+a],dp[t]+b)\n\n            else:\n\n                ans=max(ans,dp[t]+b)\n\n        dp=ndp\n\n    ans=max(ans,max(dp))\n\n\n\n    # \u6642\u9593\u304c\u6700\u3082\u304b\u304b\u308b\u3082\u306e\u306e\u3046\u3061\u3001\u4fa1\u5024\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u6700\u5f8c\u306b\u3059\u308b\n\n    AB.sort()\n\n    la,lb=AB[-1]\n\n\n\n    dp=[0]*T\n\n    for i in range(n-1):\n\n        a,b=AB[i]\n\n        ndp=dp[:]\n\n        for t in range(T):\n\n            if(t+a<T):\n\n                ndp[t+a]=max(ndp[t+a],dp[t]+b)\n\n            else:\n\n                ans=max(ans,dp[t]+b)\n\n        dp=ndp\n\n    ans=max(ans,max(dp)+lb)\n\n\n\n    # \u4fa1\u5024\u304c\u6700\u5927\u306e\u3082\u306e\u306e\u3046\u3061\u3001\u6642\u9593\u304c\u6700\u3082\u304b\u304b\u308b\u3082\u306e\u3092\u6700\u5f8c\u306b\u3059\u308b\n\n    AB.sort(lambda x:(x[1],x[0]))\n\n    la,lb=AB[-1]\n\n\n\n    dp=[0]*T\n\n    for i in range(n-1):\n\n        a,b=AB[i]\n\n        ndp=dp[:]\n\n        for t in range(T):\n\n            if(t+a<T):\n\n                ndp[t+a]=max(ndp[t+a],dp[t]+b)\n\n            else:\n\n                ans=max(ans,dp[t]+b)\n\n        dp=ndp\n\n    ans=max(ans,max(dp)+lb)\n\n\n\n    print(ans)\n\nresolve()","target":"import sys\n\nsys.setrecursionlimit(2147483647)\n\nINF=float(\"inf\")\n\nMOD=10**9+7\n\ninput=lambda :sys.stdin.readline().rstrip()\n\ndef resolve():\n\n    n,T=list(map(int,input().split()))\n\n    AB=[tuple(map(int,input().split())) for _ in range(n)]\n\n    AB.sort()\n\n\n\n    dp=[0]*T\n\n    ans=-INF\n\n    for i in range(n):\n\n        a,b=AB[i]\n\n        ndp=dp[:]\n\n        for t in range(T):\n\n            if(t+a<T):\n\n                ndp[t+a]=max(ndp[t+a],dp[t]+b)\n\n            else:\n\n                ans=max(ans,dp[t]+b)\n\n        dp=ndp\n\n    print((max(ans,max(dp))))\n\nresolve()","code_v0_loc":57,"code_v1_loc":23,"code_v0_num_chars":1292,"code_v1_num_chars":551,"code_v0_no_empty_lines":"import sys\n\nsys.setrecursionlimit(2147483647)\nINF = float(\"inf\")\nMOD = 10**9 + 7\ninput = lambda: sys.stdin.readline().rstrip()\n\n\ndef resolve():\n    n, T = list(map(int, input().split()))\n    AB = [tuple(map(int, input().split())) for _ in range(n)]\n    ans = -INF\n    # \u4f55\u3082\u8003\u3048\u305a\u3084\u308b\n    dp = [0] * T\n    for i in range(n):\n        a, b = AB[i]\n        ndp = dp[:]\n        for t in range(T):\n            if t + a < T:\n                ndp[t + a] = max(ndp[t + a], dp[t] + b)\n            else:\n                ans = max(ans, dp[t] + b)\n        dp = ndp\n    ans = max(ans, max(dp))\n    # \u6642\u9593\u304c\u6700\u3082\u304b\u304b\u308b\u3082\u306e\u306e\u3046\u3061\u3001\u4fa1\u5024\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u6700\u5f8c\u306b\u3059\u308b\n    AB.sort()\n    la, lb = AB[-1]\n    dp = [0] * T\n    for i in range(n - 1):\n        a, b = AB[i]\n        ndp = dp[:]\n        for t in range(T):\n            if t + a < T:\n                ndp[t + a] = max(ndp[t + a], dp[t] + b)\n            else:\n                ans = max(ans, dp[t] + b)\n        dp = ndp\n    ans = max(ans, max(dp) + lb)\n    # \u4fa1\u5024\u304c\u6700\u5927\u306e\u3082\u306e\u306e\u3046\u3061\u3001\u6642\u9593\u304c\u6700\u3082\u304b\u304b\u308b\u3082\u306e\u3092\u6700\u5f8c\u306b\u3059\u308b\n    AB.sort(lambda x: (x[1], x[0]))\n    la, lb = AB[-1]\n    dp = [0] * T\n    for i in range(n - 1):\n        a, b = AB[i]\n        ndp = dp[:]\n        for t in range(T):\n            if t + a < T:\n                ndp[t + a] = max(ndp[t + a], dp[t] + b)\n            else:\n                ans = max(ans, dp[t] + b)\n        dp = ndp\n    ans = max(ans, max(dp) + lb)\n    print(ans)\n\n\nresolve()\n","code_v1_no_empty_lines":"import sys\n\nsys.setrecursionlimit(2147483647)\nINF = float(\"inf\")\nMOD = 10**9 + 7\ninput = lambda: sys.stdin.readline().rstrip()\n\n\ndef resolve():\n    n, T = list(map(int, input().split()))\n    AB = [tuple(map(int, input().split())) for _ in range(n)]\n    AB.sort()\n    dp = [0] * T\n    ans = -INF\n    for i in range(n):\n        a, b = AB[i]\n        ndp = dp[:]\n        for t in range(T):\n            if t + a < T:\n                ndp[t + a] = max(ndp[t + a], dp[t] + b)\n            else:\n                ans = max(ans, dp[t] + b)\n        dp = ndp\n    print((max(ans, max(dp))))\n\n\nresolve()\n","code_same":false,"relative_loc_diff_percent":59.649122807,"diff":["+    AB.sort()","+    dp = [0] * T","-    # \u4f55\u3082\u8003\u3048\u305a\u3084\u308b","-    dp = [0] * T","-    ans = max(ans, max(dp))","-    # \u6642\u9593\u304c\u6700\u3082\u304b\u304b\u308b\u3082\u306e\u306e\u3046\u3061\u3001\u4fa1\u5024\u304c\u6700\u5927\u306e\u3082\u306e\u3092\u6700\u5f8c\u306b\u3059\u308b","-    AB.sort()","-    la, lb = AB[-1]","-    dp = [0] * T","-    for i in range(n - 1):","-        a, b = AB[i]","-        ndp = dp[:]","-        for t in range(T):","-            if t + a < T:","-                ndp[t + a] = max(ndp[t + a], dp[t] + b)","-            else:","-                ans = max(ans, dp[t] + b)","-        dp = ndp","-    ans = max(ans, max(dp) + lb)","-    # \u4fa1\u5024\u304c\u6700\u5927\u306e\u3082\u306e\u306e\u3046\u3061\u3001\u6642\u9593\u304c\u6700\u3082\u304b\u304b\u308b\u3082\u306e\u3092\u6700\u5f8c\u306b\u3059\u308b","-    AB.sort(lambda x: (x[1], x[0]))","-    la, lb = AB[-1]","-    dp = [0] * T","-    for i in range(n - 1):","-        a, b = AB[i]","-        ndp = dp[:]","-        for t in range(T):","-            if t + a < T:","-                ndp[t + a] = max(ndp[t + a], dp[t] + b)","-            else:","-                ans = max(ans, dp[t] + b)","-        dp = ndp","-    ans = max(ans, max(dp) + lb)","-    print(ans)","+    print((max(ans, max(dp))))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3969796331,"measured_runtime_v1":0.3060182066,"runtime_lift":1.2972418782,"key":["s564882715","s252011051"]}
{"user_id":"u618107373","problem_id":"p03013","language":"python","submission_id_v0":"s205446737","submission_id_v1":"s887904874","cpu_time_v0":450,"cpu_time_v1":113,"memory_v0":473344,"memory_v1":11884,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":74.89,"input":"import sys\n\nsys.setrecursionlimit(100000)\n\n\n\ndef intinput(): return list(map(int,sys.stdin.readline().split()))\n\n\n\nfib={0:0,1:1,2:1}\n\nfor i in range(3,100003):\n\n    fib[i]=fib[i-1]+fib[i-2]\n\n  #  fib.append(fib[i-1]+fib[i-2])\n\n\n\nn,m=intinput()\n\nmod=10**9+7\n\na=[int(sys.stdin.readline()) for _ in range(m)]\n\nif m!=0:\n\n    l=[a[0]]\n\n    for i in range(len(a)-1):\n\n        l.append(a[i+1]-a[i]-1)\n\n    l.append(n-a[-1])\n\n    k=1\n\n    for i in l:\n\n        k=fib[i]*k%mod\n\n    print((k%mod))\n\nelse:\n\n    print((fib[n+1]%mod))","target":"import sys\n\nsys.setrecursionlimit(100000)\n\n\n\ndef intinput(): return list(map(int,sys.stdin.readline().split()))\n\n\n\n\n\nn, m = intinput()\n\na = {int(sys.stdin.readline()) for _ in range(m)}\n\nmemo = [0 for x in range(n + 4)]\n\nmemo[0] = 1\n\nmod = 10 ** 9 + 7\n\nfor i in range(n):\n\n    if i + 1 not in a:\n\n        memo[i + 1] = (memo[i + 1] + memo[i]) % mod\n\n    if i + 2 not in a:\n\n        memo[i + 2] = (memo[i + 2] + memo[i]) % mod\n\nprint((memo[n]))","code_v0_loc":24,"code_v1_loc":17,"code_v0_num_chars":510,"code_v1_num_chars":435,"code_v0_no_empty_lines":"import sys\n\nsys.setrecursionlimit(100000)\n\n\ndef intinput():\n    return list(map(int, sys.stdin.readline().split()))\n\n\nfib = {0: 0, 1: 1, 2: 1}\nfor i in range(3, 100003):\n    fib[i] = fib[i - 1] + fib[i - 2]\n#  fib.append(fib[i-1]+fib[i-2])\nn, m = intinput()\nmod = 10**9 + 7\na = [int(sys.stdin.readline()) for _ in range(m)]\nif m != 0:\n    l = [a[0]]\n    for i in range(len(a) - 1):\n        l.append(a[i + 1] - a[i] - 1)\n    l.append(n - a[-1])\n    k = 1\n    for i in l:\n        k = fib[i] * k % mod\n    print((k % mod))\nelse:\n    print((fib[n + 1] % mod))\n","code_v1_no_empty_lines":"import sys\n\nsys.setrecursionlimit(100000)\n\n\ndef intinput():\n    return list(map(int, sys.stdin.readline().split()))\n\n\nn, m = intinput()\na = {int(sys.stdin.readline()) for _ in range(m)}\nmemo = [0 for x in range(n + 4)]\nmemo[0] = 1\nmod = 10**9 + 7\nfor i in range(n):\n    if i + 1 not in a:\n        memo[i + 1] = (memo[i + 1] + memo[i]) % mod\n    if i + 2 not in a:\n        memo[i + 2] = (memo[i + 2] + memo[i]) % mod\nprint((memo[n]))\n","code_same":false,"relative_loc_diff_percent":29.1666666667,"diff":["-fib = {0: 0, 1: 1, 2: 1}","-for i in range(3, 100003):","-    fib[i] = fib[i - 1] + fib[i - 2]","-#  fib.append(fib[i-1]+fib[i-2])","+a = {int(sys.stdin.readline()) for _ in range(m)}","+memo = [0 for x in range(n + 4)]","+memo[0] = 1","-a = [int(sys.stdin.readline()) for _ in range(m)]","-if m != 0:","-    l = [a[0]]","-    for i in range(len(a) - 1):","-        l.append(a[i + 1] - a[i] - 1)","-    l.append(n - a[-1])","-    k = 1","-    for i in l:","-        k = fib[i] * k % mod","-    print((k % mod))","-else:","-    print((fib[n + 1] % mod))","+for i in range(n):","+    if i + 1 not in a:","+        memo[i + 1] = (memo[i + 1] + memo[i]) % mod","+    if i + 2 not in a:","+        memo[i + 2] = (memo[i + 2] + memo[i]) % mod","+print((memo[n]))"],"diff_only_import_comment":false,"measured_runtime_v0":3.8133613999,"measured_runtime_v1":0.2074506006,"runtime_lift":18.3820214944,"key":["s205446737","s887904874"]}
{"user_id":"u254871849","problem_id":"p03013","language":"python","submission_id_v0":"s826622254","submission_id_v1":"s766798908","cpu_time_v0":66,"cpu_time_v1":55,"memory_v0":20944,"memory_v1":20944,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.67,"input":"import sys\n\n\n\nmod = 10 ** 9 + 7\n\nn, m, *a = [int(x) for x in sys.stdin.read().split()]\n\n\n\nsafe = sorted(set(range(1,n+1)) - set(a))\n\ndp = [0] * (n + 2)\n\ndp[0] = 0\n\ndp[1] = 1\n\nfor i in safe:\n\n    dp[i+1] = (dp[i] + dp[i-1]) % mod\n\n\n\nprint((dp[-1]))","target":"\n\n# 2019-11-14 10:01:24(JST)\n\nimport sys\n\n# import collections\n\n# import math\n\n# from string import ascii_lowercase, ascii_uppercase, digits\n\n# from bisect import bisect_left as bi_l, bisect_right as bi_r\n\n# import itertools\n\n# from functools import reduce\n\n# import operator as op\n\n# from scipy.misc import comb # float\n\n# import numpy as np \n\n\n\nmod = 10 ** 9 + 7\n\ndef main():\n\n    n, m, *a = [int(x) for x in sys.stdin.read().split()]\n\n\n\n    safe = sorted(set(range(1,n+1)) - set(a))\n\n    dp = [0] * (n + 2) # dp[i+1]: i\u6bb5\u76ee\u307e\u3067\u3044\u304f\u30d1\u30bf\u30fc\u30f3\u6570\n\n    dp[0] = 0  # -1\u6bb5\u76ee\u306b\u306f\u3044\u3051\u306a\u3044\n\n    dp[1] = 1  # \u521d\u671f\u6761\u4ef6(0\u6bb5\u76ee\u306b\u3044\u308b)\n\n    for i in safe:\n\n        dp[i+1] = (dp[i] + dp[i-1]) % mod\n\n\n\n    print((dp[-1]))\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":13,"code_v1_loc":28,"code_v0_num_chars":245,"code_v1_num_chars":720,"code_v0_no_empty_lines":"import sys\n\nmod = 10**9 + 7\nn, m, *a = [int(x) for x in sys.stdin.read().split()]\nsafe = sorted(set(range(1, n + 1)) - set(a))\ndp = [0] * (n + 2)\ndp[0] = 0\ndp[1] = 1\nfor i in safe:\n    dp[i + 1] = (dp[i] + dp[i - 1]) % mod\nprint((dp[-1]))\n","code_v1_no_empty_lines":"# 2019-11-14 10:01:24(JST)\nimport sys\n\n# import collections\n# import math\n# from string import ascii_lowercase, ascii_uppercase, digits\n# from bisect import bisect_left as bi_l, bisect_right as bi_r\n# import itertools\n# from functools import reduce\n# import operator as op\n# from scipy.misc import comb # float\n# import numpy as np\nmod = 10**9 + 7\n\n\ndef main():\n    n, m, *a = [int(x) for x in sys.stdin.read().split()]\n    safe = sorted(set(range(1, n + 1)) - set(a))\n    dp = [0] * (n + 2)  # dp[i+1]: i\u6bb5\u76ee\u307e\u3067\u3044\u304f\u30d1\u30bf\u30fc\u30f3\u6570\n    dp[0] = 0  # -1\u6bb5\u76ee\u306b\u306f\u3044\u3051\u306a\u3044\n    dp[1] = 1  # \u521d\u671f\u6761\u4ef6(0\u6bb5\u76ee\u306b\u3044\u308b)\n    for i in safe:\n        dp[i + 1] = (dp[i] + dp[i - 1]) % mod\n    print((dp[-1]))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":53.5714285714,"diff":["+# 2019-11-14 10:01:24(JST)","+# import collections","+# import math","+# from string import ascii_lowercase, ascii_uppercase, digits","+# from bisect import bisect_left as bi_l, bisect_right as bi_r","+# import itertools","+# from functools import reduce","+# import operator as op","+# from scipy.misc import comb # float","+# import numpy as np","-n, m, *a = [int(x) for x in sys.stdin.read().split()]","-safe = sorted(set(range(1, n + 1)) - set(a))","-dp = [0] * (n + 2)","-dp[0] = 0","-dp[1] = 1","-for i in safe:","-    dp[i + 1] = (dp[i] + dp[i - 1]) % mod","-print((dp[-1]))","+","+","+def main():","+    n, m, *a = [int(x) for x in sys.stdin.read().split()]","+    safe = sorted(set(range(1, n + 1)) - set(a))","+    dp = [0] * (n + 2)  # dp[i+1]: i\u6bb5\u76ee\u307e\u3067\u3044\u304f\u30d1\u30bf\u30fc\u30f3\u6570","+    dp[0] = 0  # -1\u6bb5\u76ee\u306b\u306f\u3044\u3051\u306a\u3044","+    dp[1] = 1  # \u521d\u671f\u6761\u4ef6(0\u6bb5\u76ee\u306b\u3044\u308b)","+    for i in safe:","+        dp[i + 1] = (dp[i] + dp[i - 1]) % mod","+    print((dp[-1]))","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.2316791441,"measured_runtime_v1":0.0060535467,"runtime_lift":38.2716375213,"key":["s826622254","s766798908"]}
{"user_id":"u732061897","problem_id":"p02767","language":"python","submission_id_v0":"s699773211","submission_id_v1":"s064206410","cpu_time_v0":21,"cpu_time_v1":18,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.29,"input":"N = int(eval(input()))\n\nA = list(map(int, input().split()))\n\nanswer = 10 ** 9\n\nfor i in range(1,101):\n\n    tmp = 0\n\n    for a in A:\n\n        tmp += abs(a-i) ** 2\n\n    answer = min(answer,tmp)\n\nprint(answer)","target":"N = int(eval(input()))\n\nA = list(map(int, input().split()))\n\nchushin = sum(A)\/\/N\n\nchushin_1 = sum(A)\/\/N +1\n\nanswer = 0\n\nanswer_1 = 0\n\nfor a in A:\n\n    answer += abs(a-chushin) ** 2\n\n    answer_1 += abs(a-chushin_1) ** 2\n\nprint((min(answer,answer_1)))","code_v0_loc":9,"code_v1_loc":10,"code_v0_num_chars":200,"code_v1_num_chars":242,"code_v0_no_empty_lines":"N = int(eval(input()))\nA = list(map(int, input().split()))\nanswer = 10**9\nfor i in range(1, 101):\n    tmp = 0\n    for a in A:\n        tmp += abs(a - i) ** 2\n    answer = min(answer, tmp)\nprint(answer)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = list(map(int, input().split()))\nchushin = sum(A) \/\/ N\nchushin_1 = sum(A) \/\/ N + 1\nanswer = 0\nanswer_1 = 0\nfor a in A:\n    answer += abs(a - chushin) ** 2\n    answer_1 += abs(a - chushin_1) ** 2\nprint((min(answer, answer_1)))\n","code_same":false,"relative_loc_diff_percent":10.0,"diff":["-answer = 10**9","-for i in range(1, 101):","-    tmp = 0","-    for a in A:","-        tmp += abs(a - i) ** 2","-    answer = min(answer, tmp)","-print(answer)","+chushin = sum(A) \/\/ N","+chushin_1 = sum(A) \/\/ N + 1","+answer = 0","+answer_1 = 0","+for a in A:","+    answer += abs(a - chushin) ** 2","+    answer_1 += abs(a - chushin_1) ** 2","+print((min(answer, answer_1)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3756797752,"measured_runtime_v1":0.2943871524,"runtime_lift":1.2761418836,"key":["s699773211","s064206410"]}
{"user_id":"u227020436","problem_id":"p02691","language":"python","submission_id_v0":"s398079244","submission_id_v1":"s005565219","cpu_time_v0":275,"cpu_time_v1":188,"memory_v0":40672,"memory_v1":40564,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":31.64,"input":"# E - This Message Will Self-Distruct in 5s\n\n\n\nfrom collections import Counter\n\n\n\nn = int(eval(input()))\n\na = list(map(int, input().split()))\n\nassert len(a) == n\n\n\n\n# Ai + Aj == j - i\n\n# Aj - j == -Ai - i\n\n\n\n# Aj - j \u306e\u5404\u5024\u306e\u500b\u6570\n\ndiff = Counter(a[j] - (j+1) for j in range(n))\n\n\n\n# \u5404Ai\u306b\u3064\u3044\u3066 Aj - j == -Ai - i \u3068\u306a\u308bj\u306e\u500b\u6570\u3092\u6570\u3048\u308b\n\ncount = 0\n\nfor i in range(n):\n\n    diff[a[i] - (i+1)] -= 1  # i\u81ea\u8eab\u3092\u53d6\u308a\u9664\u304f\n\n    count += diff[-a[i] - (i+1)]\n\n\n\nprint(count)\n","target":"# E - This Message Will Self-Distruct in 5s\n\n\n\nfrom collections import Counter\n\n\n\nn = int(eval(input()))\n\na = list(map(int, input().split()))\n\nassert len(a) == n\n\n\n\n# Aj - j \u306e\u5404\u5024\u306e\u500b\u6570\n\ndiff = Counter(a[j] - (j+1) for j in range(n))\n\n\n\n# Aj - j == -Ai - i \u3068\u306a\u308b(i,j)\u306e\u500b\u6570\n\ncount = sum(diff[-a[i] - (i+1)] for i in range(n))\n\nprint(count)\n","code_v0_loc":21,"code_v1_loc":14,"code_v0_num_chars":431,"code_v1_num_chars":324,"code_v0_no_empty_lines":"# E - This Message Will Self-Distruct in 5s\nfrom collections import Counter\n\nn = int(eval(input()))\na = list(map(int, input().split()))\nassert len(a) == n\n# Ai + Aj == j - i\n# Aj - j == -Ai - i\n# Aj - j \u306e\u5404\u5024\u306e\u500b\u6570\ndiff = Counter(a[j] - (j + 1) for j in range(n))\n# \u5404Ai\u306b\u3064\u3044\u3066 Aj - j == -Ai - i \u3068\u306a\u308bj\u306e\u500b\u6570\u3092\u6570\u3048\u308b\ncount = 0\nfor i in range(n):\n    diff[a[i] - (i + 1)] -= 1  # i\u81ea\u8eab\u3092\u53d6\u308a\u9664\u304f\n    count += diff[-a[i] - (i + 1)]\nprint(count)\n","code_v1_no_empty_lines":"# E - This Message Will Self-Distruct in 5s\nfrom collections import Counter\n\nn = int(eval(input()))\na = list(map(int, input().split()))\nassert len(a) == n\n# Aj - j \u306e\u5404\u5024\u306e\u500b\u6570\ndiff = Counter(a[j] - (j + 1) for j in range(n))\n# Aj - j == -Ai - i \u3068\u306a\u308b(i,j)\u306e\u500b\u6570\ncount = sum(diff[-a[i] - (i + 1)] for i in range(n))\nprint(count)\n","code_same":false,"relative_loc_diff_percent":33.3333333333,"diff":["-# Ai + Aj == j - i","-# Aj - j == -Ai - i","-# \u5404Ai\u306b\u3064\u3044\u3066 Aj - j == -Ai - i \u3068\u306a\u308bj\u306e\u500b\u6570\u3092\u6570\u3048\u308b","-count = 0","-for i in range(n):","-    diff[a[i] - (i + 1)] -= 1  # i\u81ea\u8eab\u3092\u53d6\u308a\u9664\u304f","-    count += diff[-a[i] - (i + 1)]","+# Aj - j == -Ai - i \u3068\u306a\u308b(i,j)\u306e\u500b\u6570","+count = sum(diff[-a[i] - (i + 1)] for i in range(n))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3012974186,"measured_runtime_v1":0.2404572899,"runtime_lift":1.2530184411,"key":["s398079244","s005565219"]}
{"user_id":"u606045429","problem_id":"p02850","language":"python","submission_id_v0":"s780367922","submission_id_v1":"s062691036","cpu_time_v0":222,"cpu_time_v1":198,"memory_v0":25900,"memory_v1":25900,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.81,"input":"\"\"\"\n\nchallenge case\n\n\n\nin:\n\n3\n\n1 3\n\n2 3\n\n\n\nout:\n\n1\n\n1\n\n1\n\n\"\"\"\n\n\n\nfrom collections import deque\n\n\n\ndef main():\n\n\tN, *AB = list(map(int, open(0).read().split()))\n\n\tB = AB[1::2]\n\n\n\n\tE = [[] for _ in range(N + 1)]\n\n\tfor a, b in zip(*[iter(AB)] * 2):\n\n\t\tE[a] += b,\n\n\n\n\tQ = deque([1])\n\n\tC = [0] * (N + 1)\n\n\twhile Q:\n\n\t\tv = Q.popleft()\n\n\t\tc = 0\n\n\t\tfor u in E[v]:\n\n\t\t\tc += 1 + (c + 1 == C[v])\n\n\t\t\tC[u] = c\n\n\t\t\tQ += u,\n\n\n\n\tprint((max(C)))\n\n\tfor b in B:\n\n\t\tprint((C[b]))\n\n\n\nmain()","target":"\"\"\"\n\nchallenge case\n\n\n\nin:\n\n3\n\n1 3\n\n2 3\n\n\n\nout:\n\n1\n\n1\n\n1\n\n\"\"\"\n\n\n\nfrom collections import deque\n\n\n\ndef main():\n\n\tN, *AB = list(map(int, open(0).read().split()))\n\n\tB = AB[1::2]\n\n\n\n\tE = [[] for _ in range(N + 1)]\n\n\tfor a, b in zip(*[iter(AB)] * 2):\n\n\t\tE[a].append(b)\n\n\n\n\tQ = deque([1])\n\n\tC = [0] * (N + 1)\n\n\twhile Q:\n\n\t\tv = Q.popleft()\n\n\t\tc = 0\n\n\t\tfor u in E[v]:\n\n\t\t\tc += 1 + (c + 1 == C[v])\n\n\t\t\tC[u] = c\n\n\t\t\tQ.append(u)\n\n\n\n\tprint((max(C)))\n\n\tfor b in B:\n\n\t\tprint((C[b]))\n\n\n\nmain()","code_v0_loc":39,"code_v1_loc":39,"code_v0_num_chars":460,"code_v1_num_chars":468,"code_v0_no_empty_lines":"\"\"\"\nchallenge case\nin:\n3\n1 3\n2 3\nout:\n1\n1\n1\n\"\"\"\nfrom collections import deque\n\n\ndef main():\n    N, *AB = list(map(int, open(0).read().split()))\n    B = AB[1::2]\n    E = [[] for _ in range(N + 1)]\n    for a, b in zip(*[iter(AB)] * 2):\n        E[a] += (b,)\n    Q = deque([1])\n    C = [0] * (N + 1)\n    while Q:\n        v = Q.popleft()\n        c = 0\n        for u in E[v]:\n            c += 1 + (c + 1 == C[v])\n            C[u] = c\n            Q += (u,)\n    print((max(C)))\n    for b in B:\n        print((C[b]))\n\n\nmain()\n","code_v1_no_empty_lines":"\"\"\"\nchallenge case\nin:\n3\n1 3\n2 3\nout:\n1\n1\n1\n\"\"\"\nfrom collections import deque\n\n\ndef main():\n    N, *AB = list(map(int, open(0).read().split()))\n    B = AB[1::2]\n    E = [[] for _ in range(N + 1)]\n    for a, b in zip(*[iter(AB)] * 2):\n        E[a].append(b)\n    Q = deque([1])\n    C = [0] * (N + 1)\n    while Q:\n        v = Q.popleft()\n        c = 0\n        for u in E[v]:\n            c += 1 + (c + 1 == C[v])\n            C[u] = c\n            Q.append(u)\n    print((max(C)))\n    for b in B:\n        print((C[b]))\n\n\nmain()\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-        E[a] += (b,)","+        E[a].append(b)","-            Q += (u,)","+            Q.append(u)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2432860727,"measured_runtime_v1":0.1842362597,"runtime_lift":1.3205113538,"key":["s780367922","s062691036"]}
{"user_id":"u648212584","problem_id":"p03253","language":"python","submission_id_v0":"s901379470","submission_id_v1":"s767594103","cpu_time_v0":251,"cpu_time_v1":204,"memory_v0":16168,"memory_v1":45680,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":18.73,"input":"import sys\n\ninput = sys.stdin.buffer.readline\n\nfrom collections import defaultdict\n\nimport copy\n\n\n\ndef main():\n\n    N,M = list(map(int,input().split()))\n\n    d = defaultdict(int)\n\n    MOD = 10**9+7\n\n    R = 10**5+100\n\n    fac = [0 for _ in range(R+1)]\n\n    fac[0],fac[1] = 1,1\n\n    inv = copy.deepcopy(fac)\n\n    invfac = copy.deepcopy(fac)\n\n    \n\n    for i in range(2,R+1):\n\n        fac[i] = (fac[i-1]*i)%MOD\n\n        inv[i] = MOD-(MOD\/\/i)*inv[MOD%i]%MOD\n\n        invfac[i] = (invfac[i-1]*inv[i])%MOD\n\n        \n\n    def coef(x,y):\n\n        num = (((fac[x+y]*invfac[y])%MOD)*invfac[x]%MOD)\n\n        return num\n\n\n\n    while M%2 == 0:\n\n        d[2] += 1\n\n        M \/\/= 2\n\n    f = 3\n\n    while f ** 2 <= M:\n\n        if M % f == 0:\n\n            d[f] += 1\n\n            M \/\/= f\n\n        else:\n\n            f += 2\n\n    if M != 1:\n\n        d[M] += 1\n\n    \n\n    l = list(d.values())\n\n    ans = 1\n\n    for num in l:\n\n        ans *= coef(num,N-1)\n\n        ans %= MOD\n\n        \n\n    print(ans)\n\n    \n\nif __name__ == \"__main__\":\n\n    main()","target":"import sys\n\ninput = sys.stdin.buffer.readline\n\n\n\ndef main():\n\n    N,M = list(map(int,input().split()))\n\n    MOD = 10**9+7\n\n    \n\n    def factorization(n):\n\n        arr = []\n\n        temp = n\n\n        for i in range(2, int(-(-n**0.5\/\/1))+1):\n\n            if temp%i==0:\n\n                cnt=0\n\n                while temp%i==0:\n\n                    cnt+=1\n\n                    temp \/\/= i\n\n                arr.append([i, cnt])\n\n\n\n        if temp!=1:\n\n            arr.append([temp, 1])\n\n\n\n        return arr\n\n        \n\n    cl = factorization(M)\n\n    \n\n    def combinations(x,y,N):\n\n        fac = [0]*(N+1)\n\n        fac[0],fac[1] = 1,1\n\n        \n\n        for i in range(2,N+1):\n\n            fac[i] = (fac[i-1]*i)%MOD\n\n            \n\n        return (fac[x+y]*pow(fac[x],MOD-2,MOD)*pow(fac[y],MOD-2,MOD))%MOD\n\n        \n\n    ans = 1\n\n    for pr,num in cl:\n\n        ans *= combinations(N-1,num,N+num)\n\n        ans %= MOD\n\n    \n\n    print(ans)\n\n    \n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":47,"code_v1_loc":43,"code_v0_num_chars":1020,"code_v1_num_chars":972,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.buffer.readline\nfrom collections import defaultdict\nimport copy\n\n\ndef main():\n    N, M = list(map(int, input().split()))\n    d = defaultdict(int)\n    MOD = 10**9 + 7\n    R = 10**5 + 100\n    fac = [0 for _ in range(R + 1)]\n    fac[0], fac[1] = 1, 1\n    inv = copy.deepcopy(fac)\n    invfac = copy.deepcopy(fac)\n    for i in range(2, R + 1):\n        fac[i] = (fac[i - 1] * i) % MOD\n        inv[i] = MOD - (MOD \/\/ i) * inv[MOD % i] % MOD\n        invfac[i] = (invfac[i - 1] * inv[i]) % MOD\n\n    def coef(x, y):\n        num = ((fac[x + y] * invfac[y]) % MOD) * invfac[x] % MOD\n        return num\n\n    while M % 2 == 0:\n        d[2] += 1\n        M \/\/= 2\n    f = 3\n    while f**2 <= M:\n        if M % f == 0:\n            d[f] += 1\n            M \/\/= f\n        else:\n            f += 2\n    if M != 1:\n        d[M] += 1\n    l = list(d.values())\n    ans = 1\n    for num in l:\n        ans *= coef(num, N - 1)\n        ans %= MOD\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.buffer.readline\n\n\ndef main():\n    N, M = list(map(int, input().split()))\n    MOD = 10**9 + 7\n\n    def factorization(n):\n        arr = []\n        temp = n\n        for i in range(2, int(-(-(n**0.5) \/\/ 1)) + 1):\n            if temp % i == 0:\n                cnt = 0\n                while temp % i == 0:\n                    cnt += 1\n                    temp \/\/= i\n                arr.append([i, cnt])\n        if temp != 1:\n            arr.append([temp, 1])\n        return arr\n\n    cl = factorization(M)\n\n    def combinations(x, y, N):\n        fac = [0] * (N + 1)\n        fac[0], fac[1] = 1, 1\n        for i in range(2, N + 1):\n            fac[i] = (fac[i - 1] * i) % MOD\n        return (\n            fac[x + y] * pow(fac[x], MOD - 2, MOD) * pow(fac[y], MOD - 2, MOD)\n        ) % MOD\n\n    ans = 1\n    for pr, num in cl:\n        ans *= combinations(N - 1, num, N + num)\n        ans %= MOD\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":8.5106382979,"diff":["-from collections import defaultdict","-import copy","-    d = defaultdict(int)","-    R = 10**5 + 100","-    fac = [0 for _ in range(R + 1)]","-    fac[0], fac[1] = 1, 1","-    inv = copy.deepcopy(fac)","-    invfac = copy.deepcopy(fac)","-    for i in range(2, R + 1):","-        fac[i] = (fac[i - 1] * i) % MOD","-        inv[i] = MOD - (MOD \/\/ i) * inv[MOD % i] % MOD","-        invfac[i] = (invfac[i - 1] * inv[i]) % MOD","-    def coef(x, y):","-        num = ((fac[x + y] * invfac[y]) % MOD) * invfac[x] % MOD","-        return num","+    def factorization(n):","+        arr = []","+        temp = n","+        for i in range(2, int(-(-(n**0.5) \/\/ 1)) + 1):","+            if temp % i == 0:","+                cnt = 0","+                while temp % i == 0:","+                    cnt += 1","+                    temp \/\/= i","+                arr.append([i, cnt])","+        if temp != 1:","+            arr.append([temp, 1])","+        return arr","-    while M % 2 == 0:","-        d[2] += 1","-        M \/\/= 2","-    f = 3","-    while f**2 <= M:","-        if M % f == 0:","-            d[f] += 1","-            M \/\/= f","-        else:","-            f += 2","-    if M != 1:","-        d[M] += 1","-    l = list(d.values())","+    cl = factorization(M)","+","+    def combinations(x, y, N):","+        fac = [0] * (N + 1)","+        fac[0], fac[1] = 1, 1","+        for i in range(2, N + 1):","+            fac[i] = (fac[i - 1] * i) % MOD","+        return (","+            fac[x + y] * pow(fac[x], MOD - 2, MOD) * pow(fac[y], MOD - 2, MOD)","+        ) % MOD","+","-    for num in l:","-        ans *= coef(num, N - 1)","+    for pr, num in cl:","+        ans *= combinations(N - 1, num, N + num)"],"diff_only_import_comment":false,"measured_runtime_v0":1.7565106795,"measured_runtime_v1":0.2943952236,"runtime_lift":5.9665053592,"key":["s901379470","s767594103"]}
{"user_id":"u074220993","problem_id":"p03575","language":"python","submission_id_v0":"s277296975","submission_id_v1":"s689362610","cpu_time_v0":268,"cpu_time_v1":30,"memory_v0":37860,"memory_v1":9224,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.81,"input":"N, M = (int(x) for x in input().split())\n\nedge = [tuple(int(x) for x in input().split()) for _ in range(M)]\n\n\n\nimport numpy as np\n\nfrom scipy.sparse.csgraph import floyd_warshall\n\nINF = 100\n\ntmpl_graph = [[INF if i != j else 0 for j in range(N)] for i in range(N)]\n\n\n\nans = 0\n\nfor E in edge:\n\n    edgeWithoutE = edge.copy()\n\n    edgeWithoutE.remove(E)\n\n    graph = np.array(tmpl_graph)\n\n    for x in edgeWithoutE:\n\n        graph[x[0]-1,x[1]-1] = 1\n\n        graph[x[1]-1,x[0]-1] = 1\n\n    graph = floyd_warshall(graph,directed=False)\n\n    if len(graph[graph == 100]) > 0:\n\n        ans += 1\n\nprint(ans)","target":"\n\nclass node:\n\n    def __init__(self, id):\n\n        self.id = id\n\n        self.root = self\n\n\n\n    def findRoot(self):\n\n        if self == self.root:\n\n            return self\n\n        else:\n\n            self.root = self.root.findRoot()\n\n            return self.root\n\n\n\n    def resetRoot(self):\n\n        self.root = self\n\n\n\nclass Tree:\n\n    def __init__(self, num):\n\n        self.nodes = {i:node(i) for i in range(num)}\n\n\n\n    def union(self, one, other):\n\n        root1 = one.findRoot()\n\n        root2 = other.findRoot()\n\n        root1.root = root2.root = self.nodes[min(root1.id, root2.id)]\n\n\n\n    def resetTree(self):\n\n        for n in list(self.nodes.values()):\n\n            n.resetRoot()\n\n\n\n    def makeTree(self, Edge):\n\n        self.edge = Edge\n\n        for x,y in Edge:\n\n            self.union(self.nodes[x-1], self.nodes[y-1])\n\n\n\n\n\ndef main():\n\n    with open(0) as f:\n\n        N, M = list(map(int, f.readline().split()))\n\n        Edge = [tuple(map(int, line.split())) for line in f.readlines()]\n\n    \n\n    tree = Tree(N)\n\n    ans = 0\n\n    for i in range(M):\n\n        edge = [v for  v in Edge if v != Edge[i]]\n\n        tree.makeTree(edge)\n\n        if any(x.findRoot().id != 0 for x in list(tree.nodes.values())):\n\n            ans += 1\n\n        tree.resetTree()\n\n    print(ans)\n\n\n\nif __name__ == '__main__':\n\n    main()","code_v0_loc":20,"code_v1_loc":52,"code_v0_num_chars":599,"code_v1_num_chars":1306,"code_v0_no_empty_lines":"N, M = (int(x) for x in input().split())\nedge = [tuple(int(x) for x in input().split()) for _ in range(M)]\nimport numpy as np\nfrom scipy.sparse.csgraph import floyd_warshall\n\nINF = 100\ntmpl_graph = [[INF if i != j else 0 for j in range(N)] for i in range(N)]\nans = 0\nfor E in edge:\n    edgeWithoutE = edge.copy()\n    edgeWithoutE.remove(E)\n    graph = np.array(tmpl_graph)\n    for x in edgeWithoutE:\n        graph[x[0] - 1, x[1] - 1] = 1\n        graph[x[1] - 1, x[0] - 1] = 1\n    graph = floyd_warshall(graph, directed=False)\n    if len(graph[graph == 100]) > 0:\n        ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"class node:\n    def __init__(self, id):\n        self.id = id\n        self.root = self\n\n    def findRoot(self):\n        if self == self.root:\n            return self\n        else:\n            self.root = self.root.findRoot()\n            return self.root\n\n    def resetRoot(self):\n        self.root = self\n\n\nclass Tree:\n    def __init__(self, num):\n        self.nodes = {i: node(i) for i in range(num)}\n\n    def union(self, one, other):\n        root1 = one.findRoot()\n        root2 = other.findRoot()\n        root1.root = root2.root = self.nodes[min(root1.id, root2.id)]\n\n    def resetTree(self):\n        for n in list(self.nodes.values()):\n            n.resetRoot()\n\n    def makeTree(self, Edge):\n        self.edge = Edge\n        for x, y in Edge:\n            self.union(self.nodes[x - 1], self.nodes[y - 1])\n\n\ndef main():\n    with open(0) as f:\n        N, M = list(map(int, f.readline().split()))\n        Edge = [tuple(map(int, line.split())) for line in f.readlines()]\n    tree = Tree(N)\n    ans = 0\n    for i in range(M):\n        edge = [v for v in Edge if v != Edge[i]]\n        tree.makeTree(edge)\n        if any(x.findRoot().id != 0 for x in list(tree.nodes.values())):\n            ans += 1\n        tree.resetTree()\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":61.5384615385,"diff":["-N, M = (int(x) for x in input().split())","-edge = [tuple(int(x) for x in input().split()) for _ in range(M)]","-import numpy as np","-from scipy.sparse.csgraph import floyd_warshall","+class node:","+    def __init__(self, id):","+        self.id = id","+        self.root = self","-INF = 100","-tmpl_graph = [[INF if i != j else 0 for j in range(N)] for i in range(N)]","-ans = 0","-for E in edge:","-    edgeWithoutE = edge.copy()","-    edgeWithoutE.remove(E)","-    graph = np.array(tmpl_graph)","-    for x in edgeWithoutE:","-        graph[x[0] - 1, x[1] - 1] = 1","-        graph[x[1] - 1, x[0] - 1] = 1","-    graph = floyd_warshall(graph, directed=False)","-    if len(graph[graph == 100]) > 0:","-        ans += 1","-print(ans)","+    def findRoot(self):","+        if self == self.root:","+            return self","+        else:","+            self.root = self.root.findRoot()","+            return self.root","+","+    def resetRoot(self):","+        self.root = self","+","+","+class Tree:","+    def __init__(self, num):","+        self.nodes = {i: node(i) for i in range(num)}","+","+    def union(self, one, other):","+        root1 = one.findRoot()","+        root2 = other.findRoot()","+        root1.root = root2.root = self.nodes[min(root1.id, root2.id)]","+","+    def resetTree(self):","+        for n in list(self.nodes.values()):","+            n.resetRoot()","+","+    def makeTree(self, Edge):","+        self.edge = Edge","+        for x, y in Edge:","+            self.union(self.nodes[x - 1], self.nodes[y - 1])","+","+","+def main():","+    with open(0) as f:","+        N, M = list(map(int, f.readline().split()))","+        Edge = [tuple(map(int, line.split())) for line in f.readlines()]","+    tree = Tree(N)","+    ans = 0","+    for i in range(M):","+        edge = [v for v in Edge if v != Edge[i]]","+        tree.makeTree(edge)","+        if any(x.findRoot().id != 0 for x in list(tree.nodes.values())):","+            ans += 1","+        tree.resetTree()","+    print(ans)","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":2.0407500911,"measured_runtime_v1":0.2041443679,"runtime_lift":9.9966024615,"key":["s277296975","s689362610"]}
{"user_id":"u440161695","problem_id":"p03107","language":"python","submission_id_v0":"s703980325","submission_id_v1":"s025529722","cpu_time_v0":26,"cpu_time_v1":18,"memory_v0":3444,"memory_v1":3188,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":30.77,"input":"from collections import Counter\n\nd={chr(i):0 for i in range(2)}\n\ns=Counter(eval(input()))\n\nd=d.update(s)\n\nprint((min(s[\"0\"],s[\"1\"])*2))","target":"s=eval(input())\n\nprint((min(s.count(\"0\"),s.count(\"1\"))*2))","code_v0_loc":5,"code_v1_loc":2,"code_v0_num_chars":127,"code_v1_num_chars":50,"code_v0_no_empty_lines":"from collections import Counter\n\nd = {chr(i): 0 for i in range(2)}\ns = Counter(eval(input()))\nd = d.update(s)\nprint((min(s[\"0\"], s[\"1\"]) * 2))\n","code_v1_no_empty_lines":"s = eval(input())\nprint((min(s.count(\"0\"), s.count(\"1\")) * 2))\n","code_same":false,"relative_loc_diff_percent":60.0,"diff":["-from collections import Counter","-","-d = {chr(i): 0 for i in range(2)}","-s = Counter(eval(input()))","-d = d.update(s)","-print((min(s[\"0\"], s[\"1\"]) * 2))","+s = eval(input())","+print((min(s.count(\"0\"), s.count(\"1\")) * 2))"],"diff_only_import_comment":false,"measured_runtime_v0":0.5096813786,"measured_runtime_v1":0.1983500416,"runtime_lift":2.5696056043,"key":["s703980325","s025529722"]}
{"user_id":"u841531687","problem_id":"p03000","language":"python","submission_id_v0":"s390185170","submission_id_v1":"s766981142","cpu_time_v0":22,"cpu_time_v1":18,"memory_v0":3316,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":18.18,"input":"import bisect\n\n\n\nN, X = list(map(int, input().split()))\n\nl = list(map(int, input().split()))\n\nd = [-1]*(N+1) #0-index #\u30d0\u30a6\u30f3\u30c9\u3059\u308b\u4f4d\u7f6e\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\n\nd[0] = 0 #\u30d0\u30a6\u30f3\u30c9\u3059\u308b\u521d\u671f\u5024\u306f0\n\n\n\nfor i in range(1, N+1):\n\n    d[i] = d[i-1] + l[i-1]\n\n\n\n#print(d)\n\n#print('left:', bisect.bisect_left(d, X))\n\n#print('right:', bisect.bisect_right(d, X))\n\nprint((bisect.bisect_right(d, X)))","target":"import bisect\n\n\n\nn,x = list(map(int, input().split()))\n\nl = tuple(map(int, input().split()))\n\n\n\nd = [-1]*(n+1)\n\nd[0] = 0\n\nfor i in range(1, n+1):\n\n    d[i] = d[i-1] + l[i-1]\n\nres = bisect.bisect_right(sorted(d), x)\n\nprint(res)","code_v0_loc":14,"code_v1_loc":11,"code_v0_num_chars":342,"code_v1_num_chars":220,"code_v0_no_empty_lines":"import bisect\n\nN, X = list(map(int, input().split()))\nl = list(map(int, input().split()))\nd = [-1] * (N + 1)  # 0-index #\u30d0\u30a6\u30f3\u30c9\u3059\u308b\u4f4d\u7f6e\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\nd[0] = 0  # \u30d0\u30a6\u30f3\u30c9\u3059\u308b\u521d\u671f\u5024\u306f0\nfor i in range(1, N + 1):\n    d[i] = d[i - 1] + l[i - 1]\n# print(d)\n# print('left:', bisect.bisect_left(d, X))\n# print('right:', bisect.bisect_right(d, X))\nprint((bisect.bisect_right(d, X)))\n","code_v1_no_empty_lines":"import bisect\n\nn, x = list(map(int, input().split()))\nl = tuple(map(int, input().split()))\nd = [-1] * (n + 1)\nd[0] = 0\nfor i in range(1, n + 1):\n    d[i] = d[i - 1] + l[i - 1]\nres = bisect.bisect_right(sorted(d), x)\nprint(res)\n","code_same":false,"relative_loc_diff_percent":21.4285714286,"diff":["-N, X = list(map(int, input().split()))","-l = list(map(int, input().split()))","-d = [-1] * (N + 1)  # 0-index #\u30d0\u30a6\u30f3\u30c9\u3059\u308b\u4f4d\u7f6e\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8","-d[0] = 0  # \u30d0\u30a6\u30f3\u30c9\u3059\u308b\u521d\u671f\u5024\u306f0","-for i in range(1, N + 1):","+n, x = list(map(int, input().split()))","+l = tuple(map(int, input().split()))","+d = [-1] * (n + 1)","+d[0] = 0","+for i in range(1, n + 1):","-# print(d)","-# print('left:', bisect.bisect_left(d, X))","-# print('right:', bisect.bisect_right(d, X))","-print((bisect.bisect_right(d, X)))","+res = bisect.bisect_right(sorted(d), x)","+print(res)"],"diff_only_import_comment":false,"measured_runtime_v0":0.359830588,"measured_runtime_v1":0.2651810681,"runtime_lift":1.356924122,"key":["s390185170","s766981142"]}
{"user_id":"u017415492","problem_id":"p02690","language":"python","submission_id_v0":"s441153846","submission_id_v1":"s191790319","cpu_time_v0":115,"cpu_time_v1":38,"memory_v0":28112,"memory_v1":9176,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":66.96,"input":"import numpy as np\n\nx=int(eval(input()))\n\n#\uff41\u2075\uff0d\uff42\u2075\uff1d(\uff41\uff0d\uff42)(\uff41\u2074\uff0b\uff41\u00b3\uff42\uff0b\uff41\u00b2\uff42\u00b2\uff0b\uff41\uff42\u00b3\uff0b\uff42\u2074)\n\ndef make_divisors(n):\n\n    divisors = []\n\n    for i in range(1, int(n**0.5)+1):\n\n        if n % i == 0:\n\n            divisors.append(i)\n\n            if i != n \/\/ i:\n\n                divisors.append(n\/\/i)\n\n    return divisors\n\nd=make_divisors(x)\n\nfor i in range(len(d)):\n\n  d.append(-d[i])\n\nflag=False\n\n\n\nfor i in d:\n\n  if flag==True:\n\n    break\n\n  tui=x\/\/i\n\n  ans=np.roots([5,10*i,10*i**2,5*i**3,i**4-tui])\n\n  for j in ans:\n\n    if flag==True:\n\n      break\n\n    if j.imag==0:\n\n      a=i+round(j.real)\n\n    if a**5-(round(j.real))**5==x:\n\n      print((int(a),int(round(j.real))))\n\n      flag=True\n\n      break","target":"x=int(eval(input()))\n\nflag=True\n\nfor i in range(-118,120):\n\n  if flag==False:\n\n    break\n\n  for j in range(-119,119):\n\n    if x==(i**5-j**5):\n\n      print((i,j))\n\n      flag=False\n\n      break","code_v0_loc":30,"code_v1_loc":10,"code_v0_num_chars":676,"code_v1_num_chars":184,"code_v0_no_empty_lines":"import numpy as np\n\nx = int(eval(input()))\n# \uff41\u2075\uff0d\uff42\u2075\uff1d(\uff41\uff0d\uff42)(\uff41\u2074\uff0b\uff41\u00b3\uff42\uff0b\uff41\u00b2\uff42\u00b2\uff0b\uff41\uff42\u00b3\uff0b\uff42\u2074)\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n \/\/ i:\n                divisors.append(n \/\/ i)\n    return divisors\n\n\nd = make_divisors(x)\nfor i in range(len(d)):\n    d.append(-d[i])\nflag = False\nfor i in d:\n    if flag == True:\n        break\n    tui = x \/\/ i\n    ans = np.roots([5, 10 * i, 10 * i**2, 5 * i**3, i**4 - tui])\n    for j in ans:\n        if flag == True:\n            break\n        if j.imag == 0:\n            a = i + round(j.real)\n        if a**5 - (round(j.real)) ** 5 == x:\n            print((int(a), int(round(j.real))))\n            flag = True\n            break\n","code_v1_no_empty_lines":"x = int(eval(input()))\nflag = True\nfor i in range(-118, 120):\n    if flag == False:\n        break\n    for j in range(-119, 119):\n        if x == (i**5 - j**5):\n            print((i, j))\n            flag = False\n            break\n","code_same":false,"relative_loc_diff_percent":66.6666666667,"diff":["-import numpy as np","-","-# \uff41\u2075\uff0d\uff42\u2075\uff1d(\uff41\uff0d\uff42)(\uff41\u2074\uff0b\uff41\u00b3\uff42\uff0b\uff41\u00b2\uff42\u00b2\uff0b\uff41\uff42\u00b3\uff0b\uff42\u2074)","-def make_divisors(n):","-    divisors = []","-    for i in range(1, int(n**0.5) + 1):","-        if n % i == 0:","-            divisors.append(i)","-            if i != n \/\/ i:","-                divisors.append(n \/\/ i)","-    return divisors","-","-","-d = make_divisors(x)","-for i in range(len(d)):","-    d.append(-d[i])","-flag = False","-for i in d:","-    if flag == True:","+flag = True","+for i in range(-118, 120):","+    if flag == False:","-    tui = x \/\/ i","-    ans = np.roots([5, 10 * i, 10 * i**2, 5 * i**3, i**4 - tui])","-    for j in ans:","-        if flag == True:","+    for j in range(-119, 119):","+        if x == (i**5 - j**5):","+            print((i, j))","+            flag = False","-        if j.imag == 0:","-            a = i + round(j.real)","-        if a**5 - (round(j.real)) ** 5 == x:","-            print((int(a), int(round(j.real))))","-            flag = True","-            break"],"diff_only_import_comment":false,"measured_runtime_v0":1.4192973773,"measured_runtime_v1":0.0068819066,"runtime_lift":206.2360709024,"key":["s441153846","s191790319"]}
{"user_id":"u912237403","problem_id":"p00145","language":"python","submission_id_v0":"s120507501","submission_id_v1":"s768605614","cpu_time_v0":160,"cpu_time_v1":130,"memory_v0":4524,"memory_v1":4520,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":18.75,"input":"from functools import reduce\ndef f(a,b): return [Card[a][0], Card[b][1]]\n\nn = int(input())\n\nCard = [[] for _ in [0]*n]\n\nCost = {}\n\nfor i in range(n):\n\n  Card[i] = list(map(int, input().split()))\n\n  Cost[(i, i)] = 0\n\nfor i in range(1, n):\n\n  for j in range(0, n-i):\n\n    a = j+i\n\n    Cost[(j, a)] = min([reduce(lambda a,b: a*b, f(j, k) + f(k+1, a)) + Cost[(j, k)] + Cost[(k+1, a)] for k in range(j, j+i)])\n\nprint(Cost[0, n-1])","target":"from functools import reduce\nn = int(input())\n\nCard = [[] for _ in [0]*n]\n\nCost = {}\n\nfor i in range(n):\n\n  Card[i] = list(map(int, input().split()))\n\n  Cost[(i, i)] = 0\n\nfor i in range(1, n):\n\n  for j in range(0, n-i):\n\n    a = j+i\n\n    Cost[(j, a)] = min([reduce(lambda a,b: a*b, [Card[j][0],Card[k][1],Card[k+1][0],Card[a][1]]) + Cost[(j, k)] + Cost[(k+1, a)] for k in range(j, j+i)])\n\nprint(Cost[0, n-1])","code_v0_loc":12,"code_v1_loc":11,"code_v0_num_chars":397,"code_v1_num_chars":380,"code_v0_no_empty_lines":"from functools import reduce\n\n\ndef f(a, b):\n    return [Card[a][0], Card[b][1]]\n\n\nn = int(input())\nCard = [[] for _ in [0] * n]\nCost = {}\nfor i in range(n):\n    Card[i] = list(map(int, input().split()))\n    Cost[(i, i)] = 0\nfor i in range(1, n):\n    for j in range(0, n - i):\n        a = j + i\n        Cost[(j, a)] = min(\n            [\n                reduce(lambda a, b: a * b, f(j, k) + f(k + 1, a))\n                + Cost[(j, k)]\n                + Cost[(k + 1, a)]\n                for k in range(j, j + i)\n            ]\n        )\nprint(Cost[0, n - 1])\n","code_v1_no_empty_lines":"from functools import reduce\n\nn = int(input())\nCard = [[] for _ in [0] * n]\nCost = {}\nfor i in range(n):\n    Card[i] = list(map(int, input().split()))\n    Cost[(i, i)] = 0\nfor i in range(1, n):\n    for j in range(0, n - i):\n        a = j + i\n        Cost[(j, a)] = min(\n            [\n                reduce(\n                    lambda a, b: a * b,\n                    [Card[j][0], Card[k][1], Card[k + 1][0], Card[a][1]],\n                )\n                + Cost[(j, k)]\n                + Cost[(k + 1, a)]\n                for k in range(j, j + i)\n            ]\n        )\nprint(Cost[0, n - 1])\n","code_same":false,"relative_loc_diff_percent":8.3333333333,"diff":["-","-","-def f(a, b):","-    return [Card[a][0], Card[b][1]]","-","-                reduce(lambda a, b: a * b, f(j, k) + f(k + 1, a))","+                reduce(","+                    lambda a, b: a * b,","+                    [Card[j][0], Card[k][1], Card[k + 1][0], Card[a][1]],","+                )"],"diff_only_import_comment":false,"measured_runtime_v0":0.2898506114,"measured_runtime_v1":0.2096236434,"runtime_lift":1.3827190804,"key":["s120507501","s768605614"]}
{"user_id":"u532966492","problem_id":"p03039","language":"python","submission_id_v0":"s814969347","submission_id_v1":"s884180243","cpu_time_v0":555,"cpu_time_v1":399,"memory_v0":27096,"memory_v1":3192,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":28.11,"input":"def cmb(n, r, mod):\n\n    if ( r<0 or r>n ):\n\n        return 0\n\n    r = min(r, n-r)\n\n    return g1[n] * g2[r] * g2[n-r] % mod\n\n\n\nA=2*10**5\n\nmod = 10**9+7\n\ng1 = [1, 1]\n\ng2 = [1, 1]\n\ninverse = [0, 1]\n\n\n\nfor i in range( 2, A + 1 ):\n\n    g1.append( ( g1[-1] * i ) % mod )\n\n    inverse.append( ( -inverse[mod % i] * (mod\/\/i) ) % mod )\n\n    g2.append( (g2[-1] * inverse[-1]) % mod )\n\n\n\nN,M,K=list(map(int,input().split()))\n\nkeisuu=cmb(N*M-2,K-2,mod)\n\n\n\nsum_=0\n\nfor i in range(N):\n\n    a=min(abs(i),abs(N-i-1))\n\n    b=max(abs(i),abs(N-i-1))\n\n    sum_+=(M**2)*((a*(a+1)\/\/2)+(b*(b+1)\/\/2))\n\nfor i in range(M):\n\n    a=min(abs(i),abs(M-i-1))\n\n    b=max(abs(i),abs(M-i-1))\n\n    sum_+=(N**2)*((a*(a+1)\/\/2)+(b*(b+1)\/\/2))\n\nprint(((keisuu * (sum_\/\/2))%mod))","target":"def power_mod(a,b,mod=10**9+7):\n\n    i,temp,box=0,b,[]\n\n    while(2**i<=b):\n\n        i+=1\n\n    for j in range(i-1,-1,-1):\n\n        box=[[j,temp\/\/2**j]]+box\n\n        temp-=2**j*(temp\/\/2**j)\n\n    box[0].append(a)\n\n    ans=box[0][1]*a%mod\n\n    for j in range(1,i):\n\n        box[j].append(box[j-1][2]**2%mod)\n\n        if box[j][1]==1:\n\n            ans=(ans*box[j][2])%mod\n\n    return ans\n\ndef n_func(n,mod=10**9+7):\n\n    ans=1\n\n    for i in range(1,n+1):\n\n        ans=(ans*i)%mod\n\n    return ans\n\ndef nPr(n,r,mod=10**9+7):\n\n    ans=n_func(n-r,mod)\n\n    ans=power_mod(ans,mod-2,mod)\n\n    return ans*n_func(n,mod)%mod\n\ndef nCr(n,r,mod=10**9+7):\n\n    ans=n_func(n-r,mod)*n_func(r,mod)%mod\n\n    ans=power_mod(ans,mod-2,mod)\n\n    return ans*n_func(n,mod)%mod\n\n\n\nN,M,K=list(map(int,input().split()))\n\nkeisuu=nCr(N*M-2,K-2)\n\nmod=10**9+7\n\n\n\nsum_=0\n\nfor i in range(N):\n\n    a=min(abs(i),abs(N-i-1))\n\n    b=max(abs(i),abs(N-i-1))\n\n    sum_+=(M**2)*((a*(a+1)\/\/2)+(b*(b+1)\/\/2))\n\nfor i in range(M):\n\n    a=min(abs(i),abs(M-i-1))\n\n    b=max(abs(i),abs(M-i-1))\n\n    sum_+=(N**2)*((a*(a+1)\/\/2)+(b*(b+1)\/\/2))\n\nprint(((keisuu * (sum_\/\/2))%mod))","code_v0_loc":30,"code_v1_loc":42,"code_v0_num_chars":731,"code_v1_num_chars":1114,"code_v0_no_empty_lines":"def cmb(n, r, mod):\n    if r < 0 or r > n:\n        return 0\n    r = min(r, n - r)\n    return g1[n] * g2[r] * g2[n - r] % mod\n\n\nA = 2 * 10**5\nmod = 10**9 + 7\ng1 = [1, 1]\ng2 = [1, 1]\ninverse = [0, 1]\nfor i in range(2, A + 1):\n    g1.append((g1[-1] * i) % mod)\n    inverse.append((-inverse[mod % i] * (mod \/\/ i)) % mod)\n    g2.append((g2[-1] * inverse[-1]) % mod)\nN, M, K = list(map(int, input().split()))\nkeisuu = cmb(N * M - 2, K - 2, mod)\nsum_ = 0\nfor i in range(N):\n    a = min(abs(i), abs(N - i - 1))\n    b = max(abs(i), abs(N - i - 1))\n    sum_ += (M**2) * ((a * (a + 1) \/\/ 2) + (b * (b + 1) \/\/ 2))\nfor i in range(M):\n    a = min(abs(i), abs(M - i - 1))\n    b = max(abs(i), abs(M - i - 1))\n    sum_ += (N**2) * ((a * (a + 1) \/\/ 2) + (b * (b + 1) \/\/ 2))\nprint(((keisuu * (sum_ \/\/ 2)) % mod))\n","code_v1_no_empty_lines":"def power_mod(a, b, mod=10**9 + 7):\n    i, temp, box = 0, b, []\n    while 2**i <= b:\n        i += 1\n    for j in range(i - 1, -1, -1):\n        box = [[j, temp \/\/ 2**j]] + box\n        temp -= 2**j * (temp \/\/ 2**j)\n    box[0].append(a)\n    ans = box[0][1] * a % mod\n    for j in range(1, i):\n        box[j].append(box[j - 1][2] ** 2 % mod)\n        if box[j][1] == 1:\n            ans = (ans * box[j][2]) % mod\n    return ans\n\n\ndef n_func(n, mod=10**9 + 7):\n    ans = 1\n    for i in range(1, n + 1):\n        ans = (ans * i) % mod\n    return ans\n\n\ndef nPr(n, r, mod=10**9 + 7):\n    ans = n_func(n - r, mod)\n    ans = power_mod(ans, mod - 2, mod)\n    return ans * n_func(n, mod) % mod\n\n\ndef nCr(n, r, mod=10**9 + 7):\n    ans = n_func(n - r, mod) * n_func(r, mod) % mod\n    ans = power_mod(ans, mod - 2, mod)\n    return ans * n_func(n, mod) % mod\n\n\nN, M, K = list(map(int, input().split()))\nkeisuu = nCr(N * M - 2, K - 2)\nmod = 10**9 + 7\nsum_ = 0\nfor i in range(N):\n    a = min(abs(i), abs(N - i - 1))\n    b = max(abs(i), abs(N - i - 1))\n    sum_ += (M**2) * ((a * (a + 1) \/\/ 2) + (b * (b + 1) \/\/ 2))\nfor i in range(M):\n    a = min(abs(i), abs(M - i - 1))\n    b = max(abs(i), abs(M - i - 1))\n    sum_ += (N**2) * ((a * (a + 1) \/\/ 2) + (b * (b + 1) \/\/ 2))\nprint(((keisuu * (sum_ \/\/ 2)) % mod))\n","code_same":false,"relative_loc_diff_percent":28.5714285714,"diff":["-def cmb(n, r, mod):","-    if r < 0 or r > n:","-        return 0","-    r = min(r, n - r)","-    return g1[n] * g2[r] * g2[n - r] % mod","+def power_mod(a, b, mod=10**9 + 7):","+    i, temp, box = 0, b, []","+    while 2**i <= b:","+        i += 1","+    for j in range(i - 1, -1, -1):","+        box = [[j, temp \/\/ 2**j]] + box","+        temp -= 2**j * (temp \/\/ 2**j)","+    box[0].append(a)","+    ans = box[0][1] * a % mod","+    for j in range(1, i):","+        box[j].append(box[j - 1][2] ** 2 % mod)","+        if box[j][1] == 1:","+            ans = (ans * box[j][2]) % mod","+    return ans","-A = 2 * 10**5","+def n_func(n, mod=10**9 + 7):","+    ans = 1","+    for i in range(1, n + 1):","+        ans = (ans * i) % mod","+    return ans","+","+","+def nPr(n, r, mod=10**9 + 7):","+    ans = n_func(n - r, mod)","+    ans = power_mod(ans, mod - 2, mod)","+    return ans * n_func(n, mod) % mod","+","+","+def nCr(n, r, mod=10**9 + 7):","+    ans = n_func(n - r, mod) * n_func(r, mod) % mod","+    ans = power_mod(ans, mod - 2, mod)","+    return ans * n_func(n, mod) % mod","+","+","+N, M, K = list(map(int, input().split()))","+keisuu = nCr(N * M - 2, K - 2)","-g1 = [1, 1]","-g2 = [1, 1]","-inverse = [0, 1]","-for i in range(2, A + 1):","-    g1.append((g1[-1] * i) % mod)","-    inverse.append((-inverse[mod % i] * (mod \/\/ i)) % mod)","-    g2.append((g2[-1] * inverse[-1]) % mod)","-N, M, K = list(map(int, input().split()))","-keisuu = cmb(N * M - 2, K - 2, mod)"],"diff_only_import_comment":false,"measured_runtime_v0":2.5172936699,"measured_runtime_v1":0.2314554,"runtime_lift":10.8759340674,"key":["s814969347","s884180243"]}
{"user_id":"u580316619","problem_id":"p03494","language":"python","submission_id_v0":"s104933715","submission_id_v1":"s431749405","cpu_time_v0":148,"cpu_time_v1":21,"memory_v0":12396,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":85.81,"input":"import numpy as np\n\nn=int(eval(input()))\n\na=np.array(list(map(int,input().split())))\n\nb=0\n\nwhile np.all(a%2==0):\n\n\ta=a\/2\n\n\tb+=1\n\n\t\n\nprint(b)","target":"a = int(eval(input(\"\")))\n\nb = input(\"\").split(\" \")\n\nc = 0\n\nd = []\n\n\n\nfor i in range(a):\n\n\tc = 0\n\n\twhile (int(b[i]) % 2 == 0):\n\n\t\tb[i] = int(b[i]) \/ 2\n\n\t\tc += 1\n\n\td.append(c)\n\nprint((min(d)))","code_v0_loc":9,"code_v1_loc":12,"code_v0_num_chars":134,"code_v1_num_chars":182,"code_v0_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\na = np.array(list(map(int, input().split())))\nb = 0\nwhile np.all(a % 2 == 0):\n    a = a \/ 2\n    b += 1\nprint(b)\n","code_v1_no_empty_lines":"a = int(eval(input(\"\")))\nb = input(\"\").split(\" \")\nc = 0\nd = []\nfor i in range(a):\n    c = 0\n    while int(b[i]) % 2 == 0:\n        b[i] = int(b[i]) \/ 2\n        c += 1\n    d.append(c)\nprint((min(d)))\n","code_same":false,"relative_loc_diff_percent":25.0,"diff":["-import numpy as np","-","-n = int(eval(input()))","-a = np.array(list(map(int, input().split())))","-b = 0","-while np.all(a % 2 == 0):","-    a = a \/ 2","-    b += 1","-print(b)","+a = int(eval(input(\"\")))","+b = input(\"\").split(\" \")","+c = 0","+d = []","+for i in range(a):","+    c = 0","+    while int(b[i]) % 2 == 0:","+        b[i] = int(b[i]) \/ 2","+        c += 1","+    d.append(c)","+print((min(d)))"],"diff_only_import_comment":false,"measured_runtime_v0":2.2201787407,"measured_runtime_v1":0.3198084066,"runtime_lift":6.9422150729,"key":["s104933715","s431749405"]}
{"user_id":"u525065967","problem_id":"p02574","language":"python","submission_id_v0":"s426798312","submission_id_v1":"s281371619","cpu_time_v0":542,"cpu_time_v1":466,"memory_v0":127576,"memory_v1":127552,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.02,"input":"def gen_d_prim(n):\n\n    D = [n+1 if i%2 else 2 for i in range(n+1)]\n\n    D[0] = D[1] = 0\n\n    for i in range(3, n+1, 2):\n\n        if D[i] != n+1: continue\n\n        for j in range(i, n+1, i): D[j] = i\n\n    return D\n\n\n\ndef is_pairwise(A):\n\n    D = gen_d_prim(10**6)\n\n    past = set()\n\n    for a in A:\n\n        now = set()\n\n        while a != 1:\n\n            # \u7d20\u6570 D[a]: \u4eca\u56de\u306f\u672a\u6e08 & \u904e\u53bb\u3067\u6e08\n\n            if not D[a] in now and D[a] in past: return False\n\n            now.add(D[a])\n\n            past.add(D[a])\n\n            a \/\/= D[a]\n\n    return True\n\n\n\ndef gcd_all(A):\n\n    from math import gcd\n\n    g = 0\n\n    for a in A: g = gcd(g, a)\n\n    return g\n\n\n\ndef solve():\n\n    if is_pairwise(A): return 0\n\n    if gcd_all(A) == 1: return 1\n\n    return 2\n\n\n\nn = int(eval(input()))\n\nA = [*list(map(int, input().split()))]\n\nprint((['pairwise','setwise','not'][solve()], 'coprime'))\n","target":"def gen_d_prim(n):\n\n    D = [0,0] + [-1] * (n-1)\n\n    for i in range(2, n+1, 2): D[i] = 2\n\n    for i in range(3, n+1, 2):\n\n        if D[i] > 0: continue\n\n        for j in range(i, n+1, i): D[j] = i\n\n    return D\n\n\n\ndef is_pairwise(A):\n\n    D = gen_d_prim(10**6)\n\n    past = set()\n\n    for a in A:\n\n        now = set()\n\n        while a != 1:\n\n            # \u7d20\u6570 D[a]: \u4eca\u56de\u306f\u672a\u6e08 & \u904e\u53bb\u3067\u6e08\n\n            if not D[a] in now and D[a] in past: return False\n\n            now.add(D[a])\n\n            past.add(D[a])\n\n            a \/\/= D[a]\n\n    return True\n\n\n\ndef gcd_all(A):\n\n    from math import gcd\n\n    g = 0\n\n    for a in A: g = gcd(g, a)\n\n    return g\n\n\n\ndef solve():\n\n    if is_pairwise(A): return 0\n\n    if gcd_all(A) == 1: return 1\n\n    return 2\n\n\n\nn = int(eval(input()))\n\nA = [*list(map(int, input().split()))]\n\nprint((['pairwise','setwise','not'][solve()], 'coprime'))\n","code_v0_loc":35,"code_v1_loc":35,"code_v0_num_chars":848,"code_v1_num_chars":846,"code_v0_no_empty_lines":"def gen_d_prim(n):\n    D = [n + 1 if i % 2 else 2 for i in range(n + 1)]\n    D[0] = D[1] = 0\n    for i in range(3, n + 1, 2):\n        if D[i] != n + 1:\n            continue\n        for j in range(i, n + 1, i):\n            D[j] = i\n    return D\n\n\ndef is_pairwise(A):\n    D = gen_d_prim(10**6)\n    past = set()\n    for a in A:\n        now = set()\n        while a != 1:\n            # \u7d20\u6570 D[a]: \u4eca\u56de\u306f\u672a\u6e08 & \u904e\u53bb\u3067\u6e08\n            if not D[a] in now and D[a] in past:\n                return False\n            now.add(D[a])\n            past.add(D[a])\n            a \/\/= D[a]\n    return True\n\n\ndef gcd_all(A):\n    from math import gcd\n\n    g = 0\n    for a in A:\n        g = gcd(g, a)\n    return g\n\n\ndef solve():\n    if is_pairwise(A):\n        return 0\n    if gcd_all(A) == 1:\n        return 1\n    return 2\n\n\nn = int(eval(input()))\nA = [*list(map(int, input().split()))]\nprint(([\"pairwise\", \"setwise\", \"not\"][solve()], \"coprime\"))\n","code_v1_no_empty_lines":"def gen_d_prim(n):\n    D = [0, 0] + [-1] * (n - 1)\n    for i in range(2, n + 1, 2):\n        D[i] = 2\n    for i in range(3, n + 1, 2):\n        if D[i] > 0:\n            continue\n        for j in range(i, n + 1, i):\n            D[j] = i\n    return D\n\n\ndef is_pairwise(A):\n    D = gen_d_prim(10**6)\n    past = set()\n    for a in A:\n        now = set()\n        while a != 1:\n            # \u7d20\u6570 D[a]: \u4eca\u56de\u306f\u672a\u6e08 & \u904e\u53bb\u3067\u6e08\n            if not D[a] in now and D[a] in past:\n                return False\n            now.add(D[a])\n            past.add(D[a])\n            a \/\/= D[a]\n    return True\n\n\ndef gcd_all(A):\n    from math import gcd\n\n    g = 0\n    for a in A:\n        g = gcd(g, a)\n    return g\n\n\ndef solve():\n    if is_pairwise(A):\n        return 0\n    if gcd_all(A) == 1:\n        return 1\n    return 2\n\n\nn = int(eval(input()))\nA = [*list(map(int, input().split()))]\nprint(([\"pairwise\", \"setwise\", \"not\"][solve()], \"coprime\"))\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-    D = [n + 1 if i % 2 else 2 for i in range(n + 1)]","-    D[0] = D[1] = 0","+    D = [0, 0] + [-1] * (n - 1)","+    for i in range(2, n + 1, 2):","+        D[i] = 2","-        if D[i] != n + 1:","+        if D[i] > 0:"],"diff_only_import_comment":false,"measured_runtime_v0":4.0933866422,"measured_runtime_v1":3.0755219285,"runtime_lift":1.3309567408,"key":["s426798312","s281371619"]}
{"user_id":"u843175622","problem_id":"p03298","language":"python","submission_id_v0":"s154354411","submission_id_v1":"s298686601","cpu_time_v0":1580,"cpu_time_v1":641,"memory_v0":300724,"memory_v1":222320,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":59.43,"input":"from collections import defaultdict\n\nn = int(eval(input()))\n\ns = eval(input())\n\n\n\na = s[:n]\n\nb = s[n:][::-1]\n\nd = defaultdict(int)\n\ne = defaultdict(int)\n\n\n\ndef cnt(c, d):\n\n    for bit in range(1 << n):\n\n        x = []\n\n        y = []\n\n        for i in range(n):\n\n            if bit >> i & 1:\n\n                x.append(c[i])\n\n            else:\n\n                y.append(c[i])\n\n        d[(str(x), str(y))] += 1\n\n\n\n\n\ncnt(a, d)\n\ncnt(b, e)\n\n\n\nans = 0\n\nfor k, v in list(d.items()):\n\n    ans += e[k] * v\n\nprint(ans)\n","target":"from collections import defaultdict\n\nn = int(eval(input()))\n\ns = eval(input())\n\n\n\na = s[:n]\n\nb = s[n:][::-1]\n\nd = defaultdict(int)\n\ne = defaultdict(int)\n\n\n\nfor bit in range(1 << n):\n\n    x = \"\"\n\n    y = \"\"\n\n    z = \"\"\n\n    w = \"\"\n\n    for i in range(n):\n\n        if bit >> i & 1:\n\n            x += a[i]\n\n            z += b[i]\n\n        else:\n\n            y += a[i]\n\n            w += b[i]\n\n    d[x+'\u03c9'+y] += 1\n\n    e[z+'\u03c9'+w] += 1\n\n\n\nprint((sum([e[k] * v for k, v in list(d.items())])))\n","code_v0_loc":28,"code_v1_loc":25,"code_v0_num_chars":491,"code_v1_num_chars":465,"code_v0_no_empty_lines":"from collections import defaultdict\n\nn = int(eval(input()))\ns = eval(input())\na = s[:n]\nb = s[n:][::-1]\nd = defaultdict(int)\ne = defaultdict(int)\n\n\ndef cnt(c, d):\n    for bit in range(1 << n):\n        x = []\n        y = []\n        for i in range(n):\n            if bit >> i & 1:\n                x.append(c[i])\n            else:\n                y.append(c[i])\n        d[(str(x), str(y))] += 1\n\n\ncnt(a, d)\ncnt(b, e)\nans = 0\nfor k, v in list(d.items()):\n    ans += e[k] * v\nprint(ans)\n","code_v1_no_empty_lines":"from collections import defaultdict\n\nn = int(eval(input()))\ns = eval(input())\na = s[:n]\nb = s[n:][::-1]\nd = defaultdict(int)\ne = defaultdict(int)\nfor bit in range(1 << n):\n    x = \"\"\n    y = \"\"\n    z = \"\"\n    w = \"\"\n    for i in range(n):\n        if bit >> i & 1:\n            x += a[i]\n            z += b[i]\n        else:\n            y += a[i]\n            w += b[i]\n    d[x + \"\u03c9\" + y] += 1\n    e[z + \"\u03c9\" + w] += 1\nprint((sum([e[k] * v for k, v in list(d.items())])))\n","code_same":false,"relative_loc_diff_percent":10.7142857143,"diff":["-","-","-def cnt(c, d):","-    for bit in range(1 << n):","-        x = []","-        y = []","-        for i in range(n):","-            if bit >> i & 1:","-                x.append(c[i])","-            else:","-                y.append(c[i])","-        d[(str(x), str(y))] += 1","-","-","-cnt(a, d)","-cnt(b, e)","-ans = 0","-for k, v in list(d.items()):","-    ans += e[k] * v","-print(ans)","+for bit in range(1 << n):","+    x = \"\"","+    y = \"\"","+    z = \"\"","+    w = \"\"","+    for i in range(n):","+        if bit >> i & 1:","+            x += a[i]","+            z += b[i]","+        else:","+            y += a[i]","+            w += b[i]","+    d[x + \"\u03c9\" + y] += 1","+    e[z + \"\u03c9\" + w] += 1","+print((sum([e[k] * v for k, v in list(d.items())])))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2700868397,"measured_runtime_v1":0.1086692932,"runtime_lift":2.4854016418,"key":["s154354411","s298686601"]}
{"user_id":"u821284362","problem_id":"p02959","language":"python","submission_id_v0":"s294034147","submission_id_v1":"s880787880","cpu_time_v0":443,"cpu_time_v1":280,"memory_v0":23968,"memory_v1":85468,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":36.79,"input":"\n\nimport numpy as np\n\nN = int(eval(input()))\n\n\n\nA_ls = np.array(list(map(int,input().split(\" \"))))\n\nB_ls = np.array(list(map(int,input().split(\" \"))))\n\n\n\nS = 0\n\n\n\nfor i,b in enumerate(B_ls):\n\n    if b > A_ls[i]:\n\n        b -= A_ls[i]\n\n        S += A_ls[i]\n\n        if A_ls[i+1] >= b:\n\n            A_ls[i+1] -=b\n\n            S+=b\n\n        else:\n\n            S+=A_ls[i+1]\n\n            A_ls[i+1] = 0 \n\n    else:\n\n        S += b\n\n\n\nprint(S)\n","target":"\n\nN = int(eval(input()))\n\n\n\nA_ls = list(map(int,input().split(\" \")))\n\nB_ls = list(map(int,input().split(\" \")))\n\n\n\nS = 0\n\n\n\nfor i,b in enumerate(B_ls):\n\n    if b > A_ls[i]:\n\n        b -= A_ls[i]\n\n        S += A_ls[i]\n\n        if A_ls[i+1] >= b:\n\n            A_ls[i+1] -=b\n\n            S+=b\n\n        else:\n\n            S+=A_ls[i+1]\n\n            A_ls[i+1] = 0 \n\n    else:\n\n        S += b\n\n\n\nprint(S)\n","code_v0_loc":23,"code_v1_loc":22,"code_v0_num_chars":431,"code_v1_num_chars":391,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nA_ls = np.array(list(map(int, input().split(\" \"))))\nB_ls = np.array(list(map(int, input().split(\" \"))))\nS = 0\nfor i, b in enumerate(B_ls):\n    if b > A_ls[i]:\n        b -= A_ls[i]\n        S += A_ls[i]\n        if A_ls[i + 1] >= b:\n            A_ls[i + 1] -= b\n            S += b\n        else:\n            S += A_ls[i + 1]\n            A_ls[i + 1] = 0\n    else:\n        S += b\nprint(S)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA_ls = list(map(int, input().split(\" \")))\nB_ls = list(map(int, input().split(\" \")))\nS = 0\nfor i, b in enumerate(B_ls):\n    if b > A_ls[i]:\n        b -= A_ls[i]\n        S += A_ls[i]\n        if A_ls[i + 1] >= b:\n            A_ls[i + 1] -= b\n            S += b\n        else:\n            S += A_ls[i + 1]\n            A_ls[i + 1] = 0\n    else:\n        S += b\nprint(S)\n","code_same":false,"relative_loc_diff_percent":4.347826087,"diff":["-import numpy as np","-","-A_ls = np.array(list(map(int, input().split(\" \"))))","-B_ls = np.array(list(map(int, input().split(\" \"))))","+A_ls = list(map(int, input().split(\" \")))","+B_ls = list(map(int, input().split(\" \")))"],"diff_only_import_comment":false,"measured_runtime_v0":1.4409986854,"measured_runtime_v1":0.2063152339,"runtime_lift":6.9844512096,"key":["s294034147","s880787880"]}
{"user_id":"u238940874","problem_id":"p02725","language":"python","submission_id_v0":"s425361145","submission_id_v1":"s820245641","cpu_time_v0":183,"cpu_time_v1":162,"memory_v0":25840,"memory_v1":25840,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.48,"input":"k,n = list(map(int,input().split()))\n\na=list(map(int,input().split()))\n\na.append(a[0]+k)\n\nlongd=0\n\nfor i in range(n):\n\n    tmp=abs(a[i+1]-a[i])\n\n    longd=max(longd,tmp)\n\nprint((k-longd))","target":"k,n=list(map(int,input().split()))\n\na=list(map(int,input().split()))\n\na.append(a[0]+k)\n\n\n\nx=0\n\nfor i in range(len(a)-1):\n\n    dis=abs(a[i+1]-a[i])\n\n    x=max(x,dis)\n\n\n\nprint((k-x))","code_v0_loc":8,"code_v1_loc":10,"code_v0_num_chars":179,"code_v1_num_chars":172,"code_v0_no_empty_lines":"k, n = list(map(int, input().split()))\na = list(map(int, input().split()))\na.append(a[0] + k)\nlongd = 0\nfor i in range(n):\n    tmp = abs(a[i + 1] - a[i])\n    longd = max(longd, tmp)\nprint((k - longd))\n","code_v1_no_empty_lines":"k, n = list(map(int, input().split()))\na = list(map(int, input().split()))\na.append(a[0] + k)\nx = 0\nfor i in range(len(a) - 1):\n    dis = abs(a[i + 1] - a[i])\n    x = max(x, dis)\nprint((k - x))\n","code_same":false,"relative_loc_diff_percent":20.0,"diff":["-longd = 0","-for i in range(n):","-    tmp = abs(a[i + 1] - a[i])","-    longd = max(longd, tmp)","-print((k - longd))","+x = 0","+for i in range(len(a) - 1):","+    dis = abs(a[i + 1] - a[i])","+    x = max(x, dis)","+print((k - x))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2313908032,"measured_runtime_v1":0.1406400898,"runtime_lift":1.645269165,"key":["s425361145","s820245641"]}
{"user_id":"u342869120","problem_id":"p02690","language":"python","submission_id_v0":"s557028395","submission_id_v1":"s922919122","cpu_time_v0":65,"cpu_time_v1":58,"memory_v0":64700,"memory_v1":63784,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.77,"input":"\n\nX = int(eval(input()))\n\nfor a in range(-200, 200):\n\n    find = False\n\n    for b in range(-200, 200):\n\n        x = a**5-b**5\n\n        if x == X:\n\n            find = True\n\n            print((a, b))\n\n            break\n\n    if find:\n\n        break\n","target":"\n\nX = int(eval(input()))\n\nfor a in range(-120, 120):\n\n    find = False\n\n    for b in range(-120, 120):\n\n        x = a**5-b**5\n\n        if x == X:\n\n            find = True\n\n            print((a, b))\n\n            break\n\n    if find:\n\n        break\n","code_v0_loc":12,"code_v1_loc":12,"code_v0_num_chars":238,"code_v1_num_chars":238,"code_v0_no_empty_lines":"X = int(eval(input()))\nfor a in range(-200, 200):\n    find = False\n    for b in range(-200, 200):\n        x = a**5 - b**5\n        if x == X:\n            find = True\n            print((a, b))\n            break\n    if find:\n        break\n","code_v1_no_empty_lines":"X = int(eval(input()))\nfor a in range(-120, 120):\n    find = False\n    for b in range(-120, 120):\n        x = a**5 - b**5\n        if x == X:\n            find = True\n            print((a, b))\n            break\n    if find:\n        break\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-for a in range(-200, 200):","+for a in range(-120, 120):","-    for b in range(-200, 200):","+    for b in range(-120, 120):"],"diff_only_import_comment":false,"measured_runtime_v0":0.6603648007,"measured_runtime_v1":0.3721980631,"runtime_lift":1.7742295463,"key":["s557028395","s922919122"]}
{"user_id":"u195054737","problem_id":"p03162","language":"python","submission_id_v0":"s669133667","submission_id_v1":"s547309192","cpu_time_v0":1799,"cpu_time_v1":388,"memory_v0":42816,"memory_v1":40452,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":78.43,"input":"import sys\n\nimport itertools\n\nfrom operator import itemgetter #sorted\u306e\u5bfe\u8c61\u3092\u6c7a\u3081\u305f\u3044\n\nfrom fractions import gcd #\u6700\u5927\u516c\u7d04\u6570\n\nfrom math import ceil, floor, sqrt, isinf #\u5c0f\u6570\u70b9\u5207\u308a\u4e0a\u3052\u3001\u5207\u308a\u6368\u3066\u3001\u5e73\u65b9\u6839\n\nfrom copy import deepcopy #\u53c2\u7167\u3067\u5f71\u97ff\u3055\u308c\u306a\u3044\u30b3\u30d4\u30fc\n\nfrom collections import Counter, deque #\u8981\u7d20\u3054\u3068\u306e\u51fa\u73fe\u56de\u6570\u3001\u53cc\u65b9\u5411\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u30c7\u30fc\u30bf\u578b\n\nimport heapq\n\nimport numpy as np\n\nfrom functools import reduce\n\nsys.setrecursionlimit(200000)\n\n\n\ninput = sys.stdin.readline\n\n# template\n\n\n\ndef retmax(a, b):\n\n    if a > b:\n\n        return a\n\n    else:\n\n        return b\n\n\n\ndef main():\n\n    n = int(eval(input()))\n\n    a = [list(map(int, input().split())) for _ in range(n)]\n\n\n\n    dp = np.zeros([3, n+1])\n\n\n\n    for i, a_l in enumerate(a):\n\n        for j in range(3):\n\n            for k in range(3):\n\n                if j != k:\n\n                    dp[k, i+1] = retmax(dp[k, i+1], dp[j, i] + a_l[k])\n\n\n\n    print((int(np.max(dp[:, n], axis=0))))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n\n\n","target":"import sys\n\nimport itertools\n\nfrom operator import itemgetter #sorted\u306e\u5bfe\u8c61\u3092\u6c7a\u3081\u305f\u3044\n\nfrom fractions import gcd #\u6700\u5927\u516c\u7d04\u6570\n\nfrom math import ceil, floor, sqrt, isinf #\u5c0f\u6570\u70b9\u5207\u308a\u4e0a\u3052\u3001\u5207\u308a\u6368\u3066\u3001\u5e73\u65b9\u6839\n\nfrom copy import deepcopy #\u53c2\u7167\u3067\u5f71\u97ff\u3055\u308c\u306a\u3044\u30b3\u30d4\u30fc\n\nfrom collections import Counter, deque #\u8981\u7d20\u3054\u3068\u306e\u51fa\u73fe\u56de\u6570\u3001\u53cc\u65b9\u5411\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u30c7\u30fc\u30bf\u578b\n\nimport heapq\n\nimport numpy as np\n\nfrom functools import reduce\n\nsys.setrecursionlimit(200000)\n\n\n\ninput = sys.stdin.readline\n\n# template\n\n\n\ndef main():\n\n    n = int(eval(input()))\n\n    abc = [list(map(int, input().split())) for _ in range(n)]\n\n\n\n    a, b, c = 0, 0, 0\n\n    for x, y, z in abc:\n\n        a, b, c = max(b, c) + x, max(a, c) + y, max(a, b) + z\n\n\n\n    print((max(a, b, c)))\n\n\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n\n\n","code_v0_loc":39,"code_v1_loc":30,"code_v0_num_chars":913,"code_v1_num_chars":704,"code_v0_no_empty_lines":"import sys\nimport itertools\nfrom operator import itemgetter  # sorted\u306e\u5bfe\u8c61\u3092\u6c7a\u3081\u305f\u3044\nfrom fractions import gcd  # \u6700\u5927\u516c\u7d04\u6570\nfrom math import ceil, floor, sqrt, isinf  # \u5c0f\u6570\u70b9\u5207\u308a\u4e0a\u3052\u3001\u5207\u308a\u6368\u3066\u3001\u5e73\u65b9\u6839\nfrom copy import deepcopy  # \u53c2\u7167\u3067\u5f71\u97ff\u3055\u308c\u306a\u3044\u30b3\u30d4\u30fc\nfrom collections import Counter, deque  # \u8981\u7d20\u3054\u3068\u306e\u51fa\u73fe\u56de\u6570\u3001\u53cc\u65b9\u5411\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u30c7\u30fc\u30bf\u578b\nimport heapq\nimport numpy as np\nfrom functools import reduce\n\nsys.setrecursionlimit(200000)\ninput = sys.stdin.readline\n# template\ndef retmax(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n\n\ndef main():\n    n = int(eval(input()))\n    a = [list(map(int, input().split())) for _ in range(n)]\n    dp = np.zeros([3, n + 1])\n    for i, a_l in enumerate(a):\n        for j in range(3):\n            for k in range(3):\n                if j != k:\n                    dp[k, i + 1] = retmax(dp[k, i + 1], dp[j, i] + a_l[k])\n    print((int(np.max(dp[:, n], axis=0))))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\nimport itertools\nfrom operator import itemgetter  # sorted\u306e\u5bfe\u8c61\u3092\u6c7a\u3081\u305f\u3044\nfrom fractions import gcd  # \u6700\u5927\u516c\u7d04\u6570\nfrom math import ceil, floor, sqrt, isinf  # \u5c0f\u6570\u70b9\u5207\u308a\u4e0a\u3052\u3001\u5207\u308a\u6368\u3066\u3001\u5e73\u65b9\u6839\nfrom copy import deepcopy  # \u53c2\u7167\u3067\u5f71\u97ff\u3055\u308c\u306a\u3044\u30b3\u30d4\u30fc\nfrom collections import Counter, deque  # \u8981\u7d20\u3054\u3068\u306e\u51fa\u73fe\u56de\u6570\u3001\u53cc\u65b9\u5411\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u30c7\u30fc\u30bf\u578b\nimport heapq\nimport numpy as np\nfrom functools import reduce\n\nsys.setrecursionlimit(200000)\ninput = sys.stdin.readline\n# template\ndef main():\n    n = int(eval(input()))\n    abc = [list(map(int, input().split())) for _ in range(n)]\n    a, b, c = 0, 0, 0\n    for x, y, z in abc:\n        a, b, c = max(b, c) + x, max(a, c) + y, max(a, b) + z\n    print((max(a, b, c)))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":23.0769230769,"diff":["-def retmax(a, b):","-    if a > b:","-        return a","-    else:","-        return b","-","-","-    a = [list(map(int, input().split())) for _ in range(n)]","-    dp = np.zeros([3, n + 1])","-    for i, a_l in enumerate(a):","-        for j in range(3):","-            for k in range(3):","-                if j != k:","-                    dp[k, i + 1] = retmax(dp[k, i + 1], dp[j, i] + a_l[k])","-    print((int(np.max(dp[:, n], axis=0))))","+    abc = [list(map(int, input().split())) for _ in range(n)]","+    a, b, c = 0, 0, 0","+    for x, y, z in abc:","+        a, b, c = max(b, c) + x, max(a, c) + y, max(a, b) + z","+    print((max(a, b, c)))"],"diff_only_import_comment":false,"measured_runtime_v0":2.2678967826,"measured_runtime_v1":0.4848643332,"runtime_lift":4.6773842238,"key":["s669133667","s547309192"]}
{"user_id":"u021916304","problem_id":"p02886","language":"python","submission_id_v0":"s631255245","submission_id_v1":"s295881998","cpu_time_v0":21,"cpu_time_v1":17,"memory_v0":3316,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":19.05,"input":"def ii():return int(eval(input()))\n\ndef iim():return list(map(int,input().split()))\n\ndef iil():return list(map(int,input().split()))\n\ndef ism():return list(map(str,input().split()))\n\ndef isl():return list(map(str,input().split()))\n\n\n\nn = ii()\n\nD = iil()\n\nans = 0\n\nfor i in range(n):\n\n    for j in range(i+1,n):\n\n#        print(i,j)\n\n        ans += D[i]*D[j] \n\nprint(ans)","target":"def ii():return int(eval(input()))\n\ndef iim():return list(map(int,input().split()))\n\ndef iil():return list(map(int,input().split()))\n\ndef ism():return list(map(str,input().split()))\n\ndef isl():return list(map(str,input().split()))\n\n\n\nn = ii()\n\nD = iil()\n\nsumD = sum(D)\n\nans = 0\n\nfor i in range(n):\n\n    ans += D[i]*(sum(D)-D[i])\n\nprint((ans\/\/2))","code_v0_loc":14,"code_v1_loc":13,"code_v0_num_chars":352,"code_v1_num_chars":325,"code_v0_no_empty_lines":"def ii():\n    return int(eval(input()))\n\n\ndef iim():\n    return list(map(int, input().split()))\n\n\ndef iil():\n    return list(map(int, input().split()))\n\n\ndef ism():\n    return list(map(str, input().split()))\n\n\ndef isl():\n    return list(map(str, input().split()))\n\n\nn = ii()\nD = iil()\nans = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        #        print(i,j)\n        ans += D[i] * D[j]\nprint(ans)\n","code_v1_no_empty_lines":"def ii():\n    return int(eval(input()))\n\n\ndef iim():\n    return list(map(int, input().split()))\n\n\ndef iil():\n    return list(map(int, input().split()))\n\n\ndef ism():\n    return list(map(str, input().split()))\n\n\ndef isl():\n    return list(map(str, input().split()))\n\n\nn = ii()\nD = iil()\nsumD = sum(D)\nans = 0\nfor i in range(n):\n    ans += D[i] * (sum(D) - D[i])\nprint((ans \/\/ 2))\n","code_same":false,"relative_loc_diff_percent":7.1428571429,"diff":["+sumD = sum(D)","-    for j in range(i + 1, n):","-        #        print(i,j)","-        ans += D[i] * D[j]","-print(ans)","+    ans += D[i] * (sum(D) - D[i])","+print((ans \/\/ 2))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2355280421,"measured_runtime_v1":0.0063002633,"runtime_lift":37.3838408874,"key":["s631255245","s295881998"]}
{"user_id":"u175034939","problem_id":"p03353","language":"python","submission_id_v0":"s387813464","submission_id_v1":"s460839958","cpu_time_v0":62,"cpu_time_v1":40,"memory_v0":5068,"memory_v1":5068,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":35.48,"input":"S = eval(input())\n\nK = int(eval(input()))\n\na = list(set(S))\n\na.sort()\n\n\n\nk = []\n\nl = 0\n\nwhile l < len(a):\n\n    for i in range(len(S)):\n\n        if S[i] == a[l]:\n\n            for j in range(1,6):\n\n                if i+j <= len(S):\n\n                    k.append(S[i:i+j])\n\n                else:\n\n                    break\n\n    l += 1\n\n\n\nk = list(set(k))\n\nk.sort()\n\nprint((k[K-1]))","target":"S = eval(input())\n\nK = int(eval(input()))\n\na = []\n\nfor i in range(len(S)+1):\n\n    for j in range(1,6):\n\n        if i+j <= len(S):\n\n            a.append(S[i:i+j])\n\n        else:\n\n            break\n\n            \n\na = list(set(a))\n\na.sort()\n\nprint((a[K-1]))","code_v0_loc":20,"code_v1_loc":13,"code_v0_num_chars":364,"code_v1_num_chars":240,"code_v0_no_empty_lines":"S = eval(input())\nK = int(eval(input()))\na = list(set(S))\na.sort()\nk = []\nl = 0\nwhile l < len(a):\n    for i in range(len(S)):\n        if S[i] == a[l]:\n            for j in range(1, 6):\n                if i + j <= len(S):\n                    k.append(S[i : i + j])\n                else:\n                    break\n    l += 1\nk = list(set(k))\nk.sort()\nprint((k[K - 1]))\n","code_v1_no_empty_lines":"S = eval(input())\nK = int(eval(input()))\na = []\nfor i in range(len(S) + 1):\n    for j in range(1, 6):\n        if i + j <= len(S):\n            a.append(S[i : i + j])\n        else:\n            break\na = list(set(a))\na.sort()\nprint((a[K - 1]))\n","code_same":false,"relative_loc_diff_percent":35.0,"diff":["-a = list(set(S))","+a = []","+for i in range(len(S) + 1):","+    for j in range(1, 6):","+        if i + j <= len(S):","+            a.append(S[i : i + j])","+        else:","+            break","+a = list(set(a))","-k = []","-l = 0","-while l < len(a):","-    for i in range(len(S)):","-        if S[i] == a[l]:","-            for j in range(1, 6):","-                if i + j <= len(S):","-                    k.append(S[i : i + j])","-                else:","-                    break","-    l += 1","-k = list(set(k))","-k.sort()","-print((k[K - 1]))","+print((a[K - 1]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3274912031,"measured_runtime_v1":0.2526222069,"runtime_lift":1.2963674375,"key":["s387813464","s460839958"]}
{"user_id":"u653837719","problem_id":"p02702","language":"python","submission_id_v0":"s121665958","submission_id_v1":"s794197403","cpu_time_v0":113,"cpu_time_v1":101,"memory_v0":9288,"memory_v1":9236,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.62,"input":"s = input()[::-1]\n\nl = len(s)\n\nc = [0] * 2019\n\nc[0] = 1\n\nten = 1\n\nmod = 0\n\nans = 0\n\n\n\nfor i in range(l):\n\n    mod = (mod + int(s[i]) * ten) % 2019\n\n    ten = ten * 10 % 2019\n\n    c[mod] += 1\n\n\n\nfor i in c:\n\n    ans += i * (i - 1) \/\/ 2\n\n\n\nprint(ans)","target":"s = input()[::-1]\n\nc = [0] * 2019\n\nc[0] = 1\n\nmod = 0\n\nten = 1\n\nans = 0\n\n\n\nfor i in s:\n\n    mod = (mod + int(i) * ten) % 2019\n\n    ten = ten * 10 % 2019\n\n    c[mod] += 1\n\n\n\nfor i in c:\n\n    ans += i * (i - 1) \/\/ 2\n\n\n\nprint(ans)","code_v0_loc":17,"code_v1_loc":16,"code_v0_num_chars":248,"code_v1_num_chars":226,"code_v0_no_empty_lines":"s = input()[::-1]\nl = len(s)\nc = [0] * 2019\nc[0] = 1\nten = 1\nmod = 0\nans = 0\nfor i in range(l):\n    mod = (mod + int(s[i]) * ten) % 2019\n    ten = ten * 10 % 2019\n    c[mod] += 1\nfor i in c:\n    ans += i * (i - 1) \/\/ 2\nprint(ans)\n","code_v1_no_empty_lines":"s = input()[::-1]\nc = [0] * 2019\nc[0] = 1\nmod = 0\nten = 1\nans = 0\nfor i in s:\n    mod = (mod + int(i) * ten) % 2019\n    ten = ten * 10 % 2019\n    c[mod] += 1\nfor i in c:\n    ans += i * (i - 1) \/\/ 2\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":5.8823529412,"diff":["-l = len(s)","+mod = 0","-mod = 0","-for i in range(l):","-    mod = (mod + int(s[i]) * ten) % 2019","+for i in s:","+    mod = (mod + int(i) * ten) % 2019"],"diff_only_import_comment":false,"measured_runtime_v0":0.2661841769,"measured_runtime_v1":0.1600983288,"runtime_lift":1.6626293282,"key":["s121665958","s794197403"]}
{"user_id":"u271752889","problem_id":"p02994","language":"python","submission_id_v0":"s550736524","submission_id_v1":"s101169834","cpu_time_v0":149,"cpu_time_v1":17,"memory_v0":12504,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.59,"input":"import numpy as np\n\n\n\nn,l=list(map(int,input().split()))\n\nli=[]\n\nfor i in range(n):\n\n  li.append(l+i)\n\ns=sum(li)\n\np=np.array(li)\n\na=np.abs(p).tolist()\n\nk=min(a)\n\nb=a.index(k)\n\nprint((s-li[b]))","target":"n,l=list(map(int,input().split()))\n\na=0\n\nfor i in range(n):\n\n  a+=i+l\n\nif l>=0:\n\n  print((a-l))\n\nelif l+n-1<0:\n\n  print((a-(l+n-1)))\n\nelse:\n\n  print(a)","code_v0_loc":12,"code_v1_loc":10,"code_v0_num_chars":184,"code_v1_num_chars":141,"code_v0_no_empty_lines":"import numpy as np\n\nn, l = list(map(int, input().split()))\nli = []\nfor i in range(n):\n    li.append(l + i)\ns = sum(li)\np = np.array(li)\na = np.abs(p).tolist()\nk = min(a)\nb = a.index(k)\nprint((s - li[b]))\n","code_v1_no_empty_lines":"n, l = list(map(int, input().split()))\na = 0\nfor i in range(n):\n    a += i + l\nif l >= 0:\n    print((a - l))\nelif l + n - 1 < 0:\n    print((a - (l + n - 1)))\nelse:\n    print(a)\n","code_same":false,"relative_loc_diff_percent":16.6666666667,"diff":["-import numpy as np","-","-li = []","+a = 0","-    li.append(l + i)","-s = sum(li)","-p = np.array(li)","-a = np.abs(p).tolist()","-k = min(a)","-b = a.index(k)","-print((s - li[b]))","+    a += i + l","+if l >= 0:","+    print((a - l))","+elif l + n - 1 < 0:","+    print((a - (l + n - 1)))","+else:","+    print(a)"],"diff_only_import_comment":false,"measured_runtime_v0":1.6350720274,"measured_runtime_v1":0.006301439,"runtime_lift":259.4759725026,"key":["s550736524","s101169834"]}
{"user_id":"u762420987","problem_id":"p02780","language":"python","submission_id_v0":"s906856884","submission_id_v1":"s911933040","cpu_time_v0":571,"cpu_time_v1":234,"memory_v0":33780,"memory_v1":25060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":59.02,"input":"import numpy as np\n\nN, K = list(map(int, input().split()))\n\nplist = list(map(int, input().split()))\n\nkitaiti = np.array([(0.5*(p+1)) for p in plist])\n\nans = 0\n\nval = sum(kitaiti[:K])\n\nans = max(ans, val)\n\nfor i in range(1, N-K+1):\n\n    # print(i-1, i+K)\n\n    val -= kitaiti[i-1]\n\n    val += kitaiti[i+K-1]\n\n    ans = max(ans, val)\n\nprint(ans)","target":"N, K = list(map(int, input().split()))\n\nplist = [((num*(num+1))\/\/2)\/num for num in list(map(int, input().split()))]\n\n# print(plist)\n\nans = 0\n\nfor i in range(K):\n\n    ans += plist[i]\n\n_ = ans\n\nfor i in range(N-K):\n\n    temp = _\n\n    temp -= plist[i]\n\n    temp += plist[i+K]\n\n    # print(i, i+K, ans, temp)\n\n    ans = max(ans, temp)\n\n    _ = temp\n\nprint(ans)","code_v0_loc":13,"code_v1_loc":15,"code_v0_num_chars":336,"code_v1_num_chars":350,"code_v0_no_empty_lines":"import numpy as np\n\nN, K = list(map(int, input().split()))\nplist = list(map(int, input().split()))\nkitaiti = np.array([(0.5 * (p + 1)) for p in plist])\nans = 0\nval = sum(kitaiti[:K])\nans = max(ans, val)\nfor i in range(1, N - K + 1):\n    # print(i-1, i+K)\n    val -= kitaiti[i - 1]\n    val += kitaiti[i + K - 1]\n    ans = max(ans, val)\nprint(ans)\n","code_v1_no_empty_lines":"N, K = list(map(int, input().split()))\nplist = [((num * (num + 1)) \/\/ 2) \/ num for num in list(map(int, input().split()))]\n# print(plist)\nans = 0\nfor i in range(K):\n    ans += plist[i]\n_ = ans\nfor i in range(N - K):\n    temp = _\n    temp -= plist[i]\n    temp += plist[i + K]\n    # print(i, i+K, ans, temp)\n    ans = max(ans, temp)\n    _ = temp\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":13.3333333333,"diff":["-import numpy as np","-","-plist = list(map(int, input().split()))","-kitaiti = np.array([(0.5 * (p + 1)) for p in plist])","+plist = [((num * (num + 1)) \/\/ 2) \/ num for num in list(map(int, input().split()))]","+# print(plist)","-val = sum(kitaiti[:K])","-ans = max(ans, val)","-for i in range(1, N - K + 1):","-    # print(i-1, i+K)","-    val -= kitaiti[i - 1]","-    val += kitaiti[i + K - 1]","-    ans = max(ans, val)","+for i in range(K):","+    ans += plist[i]","+_ = ans","+for i in range(N - K):","+    temp = _","+    temp -= plist[i]","+    temp += plist[i + K]","+    # print(i, i+K, ans, temp)","+    ans = max(ans, temp)","+    _ = temp"],"diff_only_import_comment":false,"measured_runtime_v0":2.2856271963,"measured_runtime_v1":0.3424234481,"runtime_lift":6.6748559686,"key":["s906856884","s911933040"]}
{"user_id":"u488178971","problem_id":"p03000","language":"python","submission_id_v0":"s335888065","submission_id_v1":"s975287095","cpu_time_v0":287,"cpu_time_v1":148,"memory_v0":21148,"memory_v1":12516,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":48.43,"input":"#ABC 130 B\n\nN,X=list(map(int,input().split()))\n\nL= [int(j) for j in input().split()]\n\ncnt=0\n\nimport numpy as np\n\njump = list(np.cumsum(L))\n\nfor j in jump:\n\n    if j <= X:\n\n        cnt+=1\n\nprint((cnt+1))","target":"#ABC 130 B\n\nN,X=list(map(int,input().split()))\n\nL= [int(j) for j in input().split()]\n\ncnt=0\n\nimport numpy as np\n\njump = list(np.cumsum(L))\n\nfor j in jump:\n\n    if j <= X:\n\n        cnt+=1\n\n    else:\n\n        break\n\nprint((cnt+1))","code_v0_loc":10,"code_v1_loc":12,"code_v0_num_chars":194,"code_v1_num_chars":220,"code_v0_no_empty_lines":"# ABC 130 B\nN, X = list(map(int, input().split()))\nL = [int(j) for j in input().split()]\ncnt = 0\nimport numpy as np\n\njump = list(np.cumsum(L))\nfor j in jump:\n    if j <= X:\n        cnt += 1\nprint((cnt + 1))\n","code_v1_no_empty_lines":"# ABC 130 B\nN, X = list(map(int, input().split()))\nL = [int(j) for j in input().split()]\ncnt = 0\nimport numpy as np\n\njump = list(np.cumsum(L))\nfor j in jump:\n    if j <= X:\n        cnt += 1\n    else:\n        break\nprint((cnt + 1))\n","code_same":false,"relative_loc_diff_percent":16.6666666667,"diff":["+    else:","+        break"],"diff_only_import_comment":false,"measured_runtime_v0":2.1490399387,"measured_runtime_v1":1.4958784676,"runtime_lift":1.4366407333,"key":["s335888065","s975287095"]}
{"user_id":"u561231954","problem_id":"p03545","language":"python","submission_id_v0":"s357290049","submission_id_v1":"s861261131","cpu_time_v0":152,"cpu_time_v1":18,"memory_v0":12488,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":88.16,"input":"import numpy as np\n\nnum=np.array(list(eval(input())))\n\n\n\nfor bit in  range(1<<3):\n\n  op=np.array(['-']*3)\n\n  for i in range(3):\n\n    if (bit>>i)&1:\n\n      op[i]='+'\n\n  formula=np.insert(num,[1,2,3],op)\n\n  \n\n  if eval(''.join(formula))==7:\n\n    flag=True\n\n    print((''.join(formula)+'=7'))\n\n    break","target":"INF = 10 ** 9\n\nimport sys\n\nsys.setrecursionlimit(100000000)\n\ndy = (-1,0,1,0)\n\ndx = (0,1,0,-1)\n\nfrom  heapq import heappop,heapify,heappush\n\nfrom bisect import bisect_left\n\n\n\ndef main():\n\n    s = eval(input())\n\n    for bit in range(8):\n\n        op = []\n\n        for i in range(3):\n\n            if (bit>>i)&1:\n\n                op.append('+')\n\n            else:\n\n                op.append('-')\n\n        \n\n        tmp = s[0]\n\n        for i in range(3):\n\n            tmp += op[i]\n\n            tmp += s[i + 1]\n\n\n\n        if eval(tmp) == 7:\n\n            ans = tmp + '=7'\n\n            break\n\n    print(ans)\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":14,"code_v1_loc":29,"code_v0_num_chars":292,"code_v1_num_chars":633,"code_v0_no_empty_lines":"import numpy as np\n\nnum = np.array(list(eval(input())))\nfor bit in range(1 << 3):\n    op = np.array([\"-\"] * 3)\n    for i in range(3):\n        if (bit >> i) & 1:\n            op[i] = \"+\"\n    formula = np.insert(num, [1, 2, 3], op)\n    if eval(\"\".join(formula)) == 7:\n        flag = True\n        print((\"\".join(formula) + \"=7\"))\n        break\n","code_v1_no_empty_lines":"INF = 10**9\nimport sys\n\nsys.setrecursionlimit(100000000)\ndy = (-1, 0, 1, 0)\ndx = (0, 1, 0, -1)\nfrom heapq import heappop, heapify, heappush\nfrom bisect import bisect_left\n\n\ndef main():\n    s = eval(input())\n    for bit in range(8):\n        op = []\n        for i in range(3):\n            if (bit >> i) & 1:\n                op.append(\"+\")\n            else:\n                op.append(\"-\")\n        tmp = s[0]\n        for i in range(3):\n            tmp += op[i]\n            tmp += s[i + 1]\n        if eval(tmp) == 7:\n            ans = tmp + \"=7\"\n            break\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":51.724137931,"diff":["-import numpy as np","+INF = 10**9","+import sys","-num = np.array(list(eval(input())))","-for bit in range(1 << 3):","-    op = np.array([\"-\"] * 3)","-    for i in range(3):","-        if (bit >> i) & 1:","-            op[i] = \"+\"","-    formula = np.insert(num, [1, 2, 3], op)","-    if eval(\"\".join(formula)) == 7:","-        flag = True","-        print((\"\".join(formula) + \"=7\"))","-        break","+sys.setrecursionlimit(100000000)","+dy = (-1, 0, 1, 0)","+dx = (0, 1, 0, -1)","+from heapq import heappop, heapify, heappush","+from bisect import bisect_left","+","+","+def main():","+    s = eval(input())","+    for bit in range(8):","+        op = []","+        for i in range(3):","+            if (bit >> i) & 1:","+                op.append(\"+\")","+            else:","+                op.append(\"-\")","+        tmp = s[0]","+        for i in range(3):","+            tmp += op[i]","+            tmp += s[i + 1]","+        if eval(tmp) == 7:","+            ans = tmp + \"=7\"","+            break","+    print(ans)","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":1.58260882,"measured_runtime_v1":0.259734097,"runtime_lift":6.0931885269,"key":["s357290049","s861261131"]}
{"user_id":"u045939752","problem_id":"p03814","language":"python","submission_id_v0":"s574890983","submission_id_v1":"s839527046","cpu_time_v0":23,"cpu_time_v1":18,"memory_v0":3516,"memory_v1":3500,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":21.74,"input":"S=eval(input())\n\nprint((S.rfind('Z')-S.find('A')+1))","target":"s=input().strip()\n\na = s.find('A')\n\nz = s.rfind('Z')\n\nprint((z-a+1))\n","code_v0_loc":2,"code_v1_loc":4,"code_v0_num_chars":44,"code_v1_num_chars":67,"code_v0_no_empty_lines":"S = eval(input())\nprint((S.rfind(\"Z\") - S.find(\"A\") + 1))\n","code_v1_no_empty_lines":"s = input().strip()\na = s.find(\"A\")\nz = s.rfind(\"Z\")\nprint((z - a + 1))\n","code_same":false,"relative_loc_diff_percent":50.0,"diff":["-S = eval(input())","-print((S.rfind(\"Z\") - S.find(\"A\") + 1))","+s = input().strip()","+a = s.find(\"A\")","+z = s.rfind(\"Z\")","+print((z - a + 1))"],"diff_only_import_comment":false,"measured_runtime_v0":0.286565238,"measured_runtime_v1":0.2292430663,"runtime_lift":1.2500497511,"key":["s574890983","s839527046"]}
{"user_id":"u585482323","problem_id":"p03371","language":"python","submission_id_v0":"s026349855","submission_id_v1":"s676818074","cpu_time_v0":206,"cpu_time_v1":183,"memory_v0":40944,"memory_v1":39408,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.17,"input":"#!usr\/bin\/env python3\n\nfrom collections import defaultdict\n\nfrom collections import deque\n\nfrom heapq import heappush, heappop\n\nimport sys\n\nimport math\n\nimport bisect\n\nimport random\n\ndef LI(): return list(map(int, sys.stdin.readline().split()))\n\ndef I(): return int(sys.stdin.readline())\n\ndef LS():return list(map(list, sys.stdin.readline().split()))\n\ndef S(): return list(sys.stdin.readline())[:-1]\n\ndef IR(n):\n\n    l = [None for i in range(n)]\n\n    for i in range(n):l[i] = I()\n\n    return l\n\ndef LIR(n):\n\n    l = [None for i in range(n)]\n\n    for i in range(n):l[i] = LI()\n\n    return l\n\ndef SR(n):\n\n    l = [None for i in range(n)]\n\n    for i in range(n):l[i] = S()\n\n    return l\n\ndef LSR(n):\n\n    l = [None for i in range(n)]\n\n    for i in range(n):l[i] = LS()\n\n    return l\n\nsys.setrecursionlimit(1000000)\n\nmod = 1000000007\n\n\n\n#A\n\ndef A():\n\n    return\n\n\n\n#B\n\ndef B():\n\n    return\n\n\n\n#C\n\ndef C():\n\n    return\n\n\n\n#D\n\ndef D():\n\n    return\n\n\n\n#E\n\ndef E():\n\n    return\n\n\n\n#F\n\ndef F():\n\n    a,b,c,X,Y = LI()\n\n    ans = float(\"inf\")\n\n    for z in range(300001):\n\n        if z%2 == 0:\n\n            m = c*z\n\n            x = z\/\/2\n\n            y = z\/\/2\n\n            m += a*max(0,X-x)\n\n            m += b*max(0,Y-y)\n\n            if m < ans:\n\n                ans = m\n\n    print(ans)\n\n    return\n\n\n\n#G\n\ndef G():\n\n    n = I()\n\n    x = LI()\n\n    f = [(i,x[i]) for i in range(n)]\n\n    f.sort(key = lambda x:x[1])\n\n    g = [(f[i][0],i) for i in range(n)]\n\n    g.sort(key = lambda x:x[0])\n\n    for i in range(n):\n\n        if g[i][1] < n\/\/2:\n\n            print((f[n\/\/2][1]))\n\n        else:\n\n            print((f[n\/\/2-1][1]))\n\n    return\n\n\n\n#H\n\ndef H():\n\n    return\n\n\n\n#I\n\ndef I_():\n\n    return\n\n\n\n#J\n\ndef J():\n\n    return\n\n\n\n#Solve\n\nif __name__ == \"__main__\":\n\n    F()\n","target":"#!usr\/bin\/env python3\n\nfrom collections import defaultdict,deque\n\nfrom heapq import heappush, heappop\n\nfrom itertools import permutations\n\nimport sys\n\nimport math\n\nimport bisect\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\n\ndef I(): return int(sys.stdin.readline())\n\ndef LS():return [list(x) for x in sys.stdin.readline().split()]\n\ndef S():\n\n    res = list(sys.stdin.readline())\n\n    if res[-1] == \"\\n\":\n\n        return res[:-1]\n\n    return res\n\ndef IR(n):\n\n    return [I() for i in range(n)]\n\ndef LIR(n):\n\n    return [LI() for i in range(n)]\n\ndef SR(n):\n\n    return [S() for i in range(n)]\n\ndef LSR(n):\n\n    return [LS() for i in range(n)]\n\n\n\nsys.setrecursionlimit(1000000)\n\nmod = 1000000007\n\n\n\ndef solve():\n\n    A,B,C,x,y = LI()\n\n    ans = float(\"inf\")\n\n    for c in range(200001)[::2]:\n\n        a = b = c >> 1\n\n        a = max(0,x-a)\n\n        b = max(0,y-b)\n\n        s = A*a+B*b+C*c\n\n        if s < ans:\n\n            ans = s\n\n    print(ans)\n\n    return\n\n\n\n#Solve\n\nif __name__ == \"__main__\":\n\n    solve()\n","code_v0_loc":97,"code_v1_loc":43,"code_v0_num_chars":1751,"code_v1_num_chars":1027,"code_v0_no_empty_lines":"#!usr\/bin\/env python3\nfrom collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\n\ndef I():\n    return int(sys.stdin.readline())\n\n\ndef LS():\n    return list(map(list, sys.stdin.readline().split()))\n\n\ndef S():\n    return list(sys.stdin.readline())[:-1]\n\n\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = I()\n    return l\n\n\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LI()\n    return l\n\n\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = S()\n    return l\n\n\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):\n        l[i] = LS()\n    return l\n\n\nsys.setrecursionlimit(1000000)\nmod = 1000000007\n# A\ndef A():\n    return\n\n\n# B\ndef B():\n    return\n\n\n# C\ndef C():\n    return\n\n\n# D\ndef D():\n    return\n\n\n# E\ndef E():\n    return\n\n\n# F\ndef F():\n    a, b, c, X, Y = LI()\n    ans = float(\"inf\")\n    for z in range(300001):\n        if z % 2 == 0:\n            m = c * z\n            x = z \/\/ 2\n            y = z \/\/ 2\n            m += a * max(0, X - x)\n            m += b * max(0, Y - y)\n            if m < ans:\n                ans = m\n    print(ans)\n    return\n\n\n# G\ndef G():\n    n = I()\n    x = LI()\n    f = [(i, x[i]) for i in range(n)]\n    f.sort(key=lambda x: x[1])\n    g = [(f[i][0], i) for i in range(n)]\n    g.sort(key=lambda x: x[0])\n    for i in range(n):\n        if g[i][1] < n \/\/ 2:\n            print((f[n \/\/ 2][1]))\n        else:\n            print((f[n \/\/ 2 - 1][1]))\n    return\n\n\n# H\ndef H():\n    return\n\n\n# I\ndef I_():\n    return\n\n\n# J\ndef J():\n    return\n\n\n# Solve\nif __name__ == \"__main__\":\n    F()\n","code_v1_no_empty_lines":"#!usr\/bin\/env python3\nfrom collections import defaultdict, deque\nfrom heapq import heappush, heappop\nfrom itertools import permutations\nimport sys\nimport math\nimport bisect\n\n\ndef LI():\n    return [int(x) for x in sys.stdin.readline().split()]\n\n\ndef I():\n    return int(sys.stdin.readline())\n\n\ndef LS():\n    return [list(x) for x in sys.stdin.readline().split()]\n\n\ndef S():\n    res = list(sys.stdin.readline())\n    if res[-1] == \"\\n\":\n        return res[:-1]\n    return res\n\n\ndef IR(n):\n    return [I() for i in range(n)]\n\n\ndef LIR(n):\n    return [LI() for i in range(n)]\n\n\ndef SR(n):\n    return [S() for i in range(n)]\n\n\ndef LSR(n):\n    return [LS() for i in range(n)]\n\n\nsys.setrecursionlimit(1000000)\nmod = 1000000007\n\n\ndef solve():\n    A, B, C, x, y = LI()\n    ans = float(\"inf\")\n    for c in range(200001)[::2]:\n        a = b = c >> 1\n        a = max(0, x - a)\n        b = max(0, y - b)\n        s = A * a + B * b + C * c\n        if s < ans:\n            ans = s\n    print(ans)\n    return\n\n\n# Solve\nif __name__ == \"__main__\":\n    solve()\n","code_same":false,"relative_loc_diff_percent":55.6701030928,"diff":["-from collections import defaultdict","-from collections import deque","+from collections import defaultdict, deque","+from itertools import permutations","-import random","-    return list(map(int, sys.stdin.readline().split()))","+    return [int(x) for x in sys.stdin.readline().split()]","-    return list(map(list, sys.stdin.readline().split()))","+    return [list(x) for x in sys.stdin.readline().split()]","-    return list(sys.stdin.readline())[:-1]","+    res = list(sys.stdin.readline())","+    if res[-1] == \"\\n\":","+        return res[:-1]","+    return res","-    l = [None for i in range(n)]","-    for i in range(n):","-        l[i] = I()","-    return l","+    return [I() for i in range(n)]","-    l = [None for i in range(n)]","-    for i in range(n):","-        l[i] = LI()","-    return l","+    return [LI() for i in range(n)]","-    l = [None for i in range(n)]","-    for i in range(n):","-        l[i] = S()","-    return l","+    return [S() for i in range(n)]","-    l = [None for i in range(n)]","-    for i in range(n):","-        l[i] = LS()","-    return l","+    return [LS() for i in range(n)]","-# A","-def A():","-    return","-# B","-def B():","-    return","-","-","-# C","-def C():","-    return","-","-","-# D","-def D():","-    return","-","-","-# E","-def E():","-    return","-","-","-# F","-def F():","-    a, b, c, X, Y = LI()","+def solve():","+    A, B, C, x, y = LI()","-    for z in range(300001):","-        if z % 2 == 0:","-            m = c * z","-            x = z \/\/ 2","-            y = z \/\/ 2","-            m += a * max(0, X - x)","-            m += b * max(0, Y - y)","-            if m < ans:","-                ans = m","+    for c in range(200001)[::2]:","+        a = b = c >> 1","+        a = max(0, x - a)","+        b = max(0, y - b)","+        s = A * a + B * b + C * c","+        if s < ans:","+            ans = s","-    return","-","-","-# G","-def G():","-    n = I()","-    x = LI()","-    f = [(i, x[i]) for i in range(n)]","-    f.sort(key=lambda x: x[1])","-    g = [(f[i][0], i) for i in range(n)]","-    g.sort(key=lambda x: x[0])","-    for i in range(n):","-        if g[i][1] < n \/\/ 2:","-            print((f[n \/\/ 2][1]))","-        else:","-            print((f[n \/\/ 2 - 1][1]))","-    return","-","-","-# H","-def H():","-    return","-","-","-# I","-def I_():","-    return","-","-","-# J","-def J():","-    F()","+    solve()"],"diff_only_import_comment":false,"measured_runtime_v0":1.3533082061,"measured_runtime_v1":0.0063346879,"runtime_lift":213.6345491689,"key":["s026349855","s676818074"]}
{"user_id":"u183422236","problem_id":"p02612","language":"python","submission_id_v0":"s828418851","submission_id_v1":"s809335980","cpu_time_v0":81,"cpu_time_v1":70,"memory_v0":61540,"memory_v1":61736,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.58,"input":"n = int(eval(input())) % 1000\n\nif n == 0:\n\n    print((0))\n\nelse:\n\n    print((1000 - n))","target":"n = int(eval(input()))\n\nprint(((1000 - n % 1000) % 1000))","code_v0_loc":5,"code_v1_loc":2,"code_v0_num_chars":77,"code_v1_num_chars":49,"code_v0_no_empty_lines":"n = int(eval(input())) % 1000\nif n == 0:\n    print((0))\nelse:\n    print((1000 - n))\n","code_v1_no_empty_lines":"n = int(eval(input()))\nprint(((1000 - n % 1000) % 1000))\n","code_same":false,"relative_loc_diff_percent":60.0,"diff":["-n = int(eval(input())) % 1000","-if n == 0:","-    print((0))","-else:","-    print((1000 - n))","+n = int(eval(input()))","+print(((1000 - n % 1000) % 1000))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2545247498,"measured_runtime_v1":0.1889497155,"runtime_lift":1.3470501881,"key":["s828418851","s809335980"]}
{"user_id":"u724687935","problem_id":"p02599","language":"python","submission_id_v0":"s870922238","submission_id_v1":"s250640318","cpu_time_v0":1686,"cpu_time_v1":1507,"memory_v0":281560,"memory_v1":281720,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.62,"input":"import sys\n\n\n\n\n\nclass BinaryIndexedTree():\n\n    '''\n\n    1-indexed\n\n    '''\n\n    def __init__(self, A):\n\n        self.__n = len(A)\n\n        self.__node = [0] * (self.__n + 1)\n\n        self.__data = [0] * (self.__n + 1)\n\n\n\n        S = [0] * (self.__n + 1)\n\n        for i in range(1, self.__n + 1):\n\n            S[i] = S[i - 1] + A[i - 1]\n\n            self.__data[i] = A[i - 1]\n\n            self.__node[i] = S[i] - S[i - (i & -i)]\n\n\n\n    def add(self, i, v):\n\n        self.__data[i] += v\n\n        while i <= self.__n:\n\n            self.__node[i] += v\n\n            i += i & -i\n\n\n\n    def sum(self, i):\n\n        ''' [1, i]\u306e\u548c\n\n        '''\n\n        rst = 0\n\n        while i > 0:\n\n            rst += self.__node[i]\n\n            i -= i & -i\n\n        return rst\n\n    \n\n    def get(self, i, j):\n\n        '''[i, j]\u306e\u548c\n\n        '''\n\n        if i == j:\n\n            return self.__data[i]\n\n        else:\n\n            return self.sum(j) - self.sum(i - 1)\n\n\n\n\n\ndef main():\n\n    N, Q = map(int, input().split())\n\n    C = list(map(int, input().split()))\n\n\n\n    P = [[] for _ in range(N)]\n\n    for i, c in enumerate(C):\n\n        P[c - 1].append(i)\n\n\n\n    right = [0] * N\n\n    for p in P:\n\n        if len(p):\n\n            right[p.pop()] = 1\n\n    BIT = BinaryIndexedTree(right)\n\n\n\n    query = [[] for _ in range(N)]\n\n    for i, s in enumerate(sys.stdin.readlines()):\n\n        l, r = map(int, s.split())\n\n        query[r - 1].append((l - 1, i))\n\n\n\n    ans = [None] * Q\n\n\n\n    cur = N - 1\n\n    for r, q in enumerate(reversed(query)):\n\n        r = (N - 1) - r\n\n        while q:\n\n            l, i = q.pop()\n\n            while r < cur:\n\n                c = C[cur] - 1\n\n                p = P[c]\n\n                if len(p):\n\n                    BIT.add(p.pop() + 1, 1)\n\n                cur -= 1\n\n            tmp = BIT.get(l + 1, r + 1)\n\n            ans[i] = tmp\n\n\n\n    print(*ans, sep='\\n')\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"import sys\n\n\n\n\n\nclass BinaryIndexedTree():\n\n    '''\n\n    1-indexed\n\n    '''\n\n    def __init__(self, A):\n\n        self.__n = len(A)\n\n        self.__node = [0] * (self.__n + 1)\n\n        self.__data = [0] * (self.__n + 1)\n\n\n\n        S = [0] * (self.__n + 1)\n\n        for i in range(self.__n):\n\n            S[i + 1] = S[i] + A[i]\n\n\n\n        for i in range(1, self.__n + 1):\n\n            self.__data[i] = A[i - 1]\n\n            self.__node[i] = S[i] - S[i - (i & -i)]\n\n\n\n    def add(self, i, v):\n\n        self.__data[i] += v\n\n        while i <= self.__n:\n\n            self.__node[i] += v\n\n            i += i & -i\n\n\n\n    def sum(self, i):\n\n        ''' [1, i]\u306e\u548c\n\n        '''\n\n        rst = 0\n\n        while i > 0:\n\n            rst += self.__node[i]\n\n            i -= i & -i\n\n        return rst\n\n    \n\n    def get(self, i, j):\n\n        '''[i, j]\u306e\u548c\n\n        '''\n\n        if i == j:\n\n            return self.__data[i]\n\n        else:\n\n            return self.sum(j) - self.sum(i - 1)\n\n\n\n\n\ndef main():\n\n    N, Q = map(int, input().split())\n\n    C = list(map(int, input().split()))\n\n\n\n    P = [[] for _ in range(N)]\n\n    for i, c in enumerate(C):\n\n        P[c - 1].append(i)\n\n\n\n    right = [0] * N\n\n    for p in P:\n\n        if len(p):\n\n            right[p.pop()] = 1\n\n    BIT = BinaryIndexedTree(right)\n\n\n\n    query = [[] for _ in range(N)]\n\n    for i, s in enumerate(sys.stdin.readlines()):\n\n        l, r = map(int, s.split())\n\n        query[r - 1].append((l - 1, i))\n\n\n\n    ans = [None] * Q\n\n\n\n    cur = N - 1\n\n    for r, q in enumerate(reversed(query)):\n\n        r = (N - 1) - r\n\n        while q:\n\n            l, i = q.pop()\n\n            while r < cur:\n\n                c = C[cur] - 1\n\n                p = P[c]\n\n                if len(p):\n\n                    BIT.add(p.pop() + 1, 1)\n\n                cur -= 1\n\n            tmp = BIT.get(l + 1, r + 1)\n\n            ans[i] = tmp\n\n\n\n    print(*ans, sep='\\n')\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":82,"code_v1_loc":84,"code_v0_num_chars":1906,"code_v1_num_chars":1939,"code_v0_no_empty_lines":"import sys\n\n\nclass BinaryIndexedTree:\n    \"\"\"\n    1-indexed\n    \"\"\"\n\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(1, self.__n + 1):\n            S[i] = S[i - 1] + A[i - 1]\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & -i)]\n\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & -i\n\n    def sum(self, i):\n        \"\"\"[1, i]\u306e\u548c\"\"\"\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & -i\n        return rst\n\n    def get(self, i, j):\n        \"\"\"[i, j]\u306e\u548c\"\"\"\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\n\n\ndef main():\n    N, Q = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for i, c in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for i, s in enumerate(sys.stdin.readlines()):\n        l, r = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for r, q in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            l, i = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(*ans, sep=\"\\n\")\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\n\nclass BinaryIndexedTree:\n    \"\"\"\n    1-indexed\n    \"\"\"\n\n    def __init__(self, A):\n        self.__n = len(A)\n        self.__node = [0] * (self.__n + 1)\n        self.__data = [0] * (self.__n + 1)\n        S = [0] * (self.__n + 1)\n        for i in range(self.__n):\n            S[i + 1] = S[i] + A[i]\n        for i in range(1, self.__n + 1):\n            self.__data[i] = A[i - 1]\n            self.__node[i] = S[i] - S[i - (i & -i)]\n\n    def add(self, i, v):\n        self.__data[i] += v\n        while i <= self.__n:\n            self.__node[i] += v\n            i += i & -i\n\n    def sum(self, i):\n        \"\"\"[1, i]\u306e\u548c\"\"\"\n        rst = 0\n        while i > 0:\n            rst += self.__node[i]\n            i -= i & -i\n        return rst\n\n    def get(self, i, j):\n        \"\"\"[i, j]\u306e\u548c\"\"\"\n        if i == j:\n            return self.__data[i]\n        else:\n            return self.sum(j) - self.sum(i - 1)\n\n\ndef main():\n    N, Q = map(int, input().split())\n    C = list(map(int, input().split()))\n    P = [[] for _ in range(N)]\n    for i, c in enumerate(C):\n        P[c - 1].append(i)\n    right = [0] * N\n    for p in P:\n        if len(p):\n            right[p.pop()] = 1\n    BIT = BinaryIndexedTree(right)\n    query = [[] for _ in range(N)]\n    for i, s in enumerate(sys.stdin.readlines()):\n        l, r = map(int, s.split())\n        query[r - 1].append((l - 1, i))\n    ans = [None] * Q\n    cur = N - 1\n    for r, q in enumerate(reversed(query)):\n        r = (N - 1) - r\n        while q:\n            l, i = q.pop()\n            while r < cur:\n                c = C[cur] - 1\n                p = P[c]\n                if len(p):\n                    BIT.add(p.pop() + 1, 1)\n                cur -= 1\n            tmp = BIT.get(l + 1, r + 1)\n            ans[i] = tmp\n    print(*ans, sep=\"\\n\")\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":2.380952381,"diff":["+        for i in range(self.__n):","+            S[i + 1] = S[i] + A[i]","-            S[i] = S[i - 1] + A[i - 1]"],"diff_only_import_comment":false,"measured_runtime_v0":0.1911105648,"measured_runtime_v1":0.00684015,"runtime_lift":27.9395284689,"key":["s870922238","s250640318"]}
{"user_id":"u912650255","problem_id":"p02983","language":"python","submission_id_v0":"s074902378","submission_id_v1":"s358904585","cpu_time_v0":618,"cpu_time_v1":67,"memory_v0":75568,"memory_v1":6888,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":89.16,"input":"L ,R = list(map(int,input().split()))\n\n\n\nans =[]\n\nif R - L <= 2019:\n\n    for i in range(L,R+1):\n\n        for j in range(i+1,R+1):\n\n            ans.append(i*j%2019)\n\n\n\nelse:\n\n    for i in range(R-L-1010,R-L+1010):\n\n        for j in range(i,R-L+1010):\n\n            ans.append(i*j%2019)\n\n\n\nprint((min(ans)))\n","target":"L ,R = list(map(int,input().split()))\n\n\n\nans =[]\n\nfor i in range(L,R+1):\n\n    for j in range(i+1,R+1):\n\n        ans.append(i*j%2019)\n\n        if (i * j % 2019) == 0:\n\n            break\n\n    else:\n\n        continue\n\n    break\n\n\n\nprint((min(ans)))","code_v0_loc":14,"code_v1_loc":13,"code_v0_num_chars":297,"code_v1_num_chars":237,"code_v0_no_empty_lines":"L, R = list(map(int, input().split()))\nans = []\nif R - L <= 2019:\n    for i in range(L, R + 1):\n        for j in range(i + 1, R + 1):\n            ans.append(i * j % 2019)\nelse:\n    for i in range(R - L - 1010, R - L + 1010):\n        for j in range(i, R - L + 1010):\n            ans.append(i * j % 2019)\nprint((min(ans)))\n","code_v1_no_empty_lines":"L, R = list(map(int, input().split()))\nans = []\nfor i in range(L, R + 1):\n    for j in range(i + 1, R + 1):\n        ans.append(i * j % 2019)\n        if (i * j % 2019) == 0:\n            break\n    else:\n        continue\n    break\nprint((min(ans)))\n","code_same":false,"relative_loc_diff_percent":7.1428571429,"diff":["-if R - L <= 2019:","-    for i in range(L, R + 1):","-        for j in range(i + 1, R + 1):","-            ans.append(i * j % 2019)","-else:","-    for i in range(R - L - 1010, R - L + 1010):","-        for j in range(i, R - L + 1010):","-            ans.append(i * j % 2019)","+for i in range(L, R + 1):","+    for j in range(i + 1, R + 1):","+        ans.append(i * j % 2019)","+        if (i * j % 2019) == 0:","+            break","+    else:","+        continue","+    break"],"diff_only_import_comment":false,"measured_runtime_v0":0.3668963638,"measured_runtime_v1":0.2102679547,"runtime_lift":1.7448990943,"key":["s074902378","s358904585"]}
{"user_id":"u622570247","problem_id":"p02773","language":"python","submission_id_v0":"s074380513","submission_id_v1":"s228830644","cpu_time_v0":1054,"cpu_time_v1":898,"memory_v0":45492,"memory_v1":47732,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.8,"input":"from collections import Counter\n\nimport heapq\n\n\n\nn = int(eval(input()))\n\nss = []\n\nfor _ in range(n):\n\n    ss.append(input().rstrip())\n\nctr = Counter(ss)\n\nheap = [(-v, k) for k, v in list(ctr.items())]\n\nheapq.heapify(heap)\n\nmaxv = heap[0][0]\n\nwhile heap:\n\n    c = heapq.heappop(heap)\n\n    if c[0] != maxv:\n\n        break\n\n    print((c[1]))\n","target":"from collections import Counter\n\n\n\nn = int(eval(input()))\n\nss = []\n\nfor _ in range(n):\n\n    ss.append(input().rstrip())\n\nctr = Counter(ss)\n\n\n\na = sorted([(-v, k) for k, v in list(ctr.items())])\n\nmaxv = a[0][0]\n\nfor i in range(len(a)):\n\n    if a[i][0] != maxv:\n\n        break\n\n    print((a[i][1]))","code_v0_loc":16,"code_v1_loc":14,"code_v0_num_chars":325,"code_v1_num_chars":282,"code_v0_no_empty_lines":"from collections import Counter\nimport heapq\n\nn = int(eval(input()))\nss = []\nfor _ in range(n):\n    ss.append(input().rstrip())\nctr = Counter(ss)\nheap = [(-v, k) for k, v in list(ctr.items())]\nheapq.heapify(heap)\nmaxv = heap[0][0]\nwhile heap:\n    c = heapq.heappop(heap)\n    if c[0] != maxv:\n        break\n    print((c[1]))\n","code_v1_no_empty_lines":"from collections import Counter\n\nn = int(eval(input()))\nss = []\nfor _ in range(n):\n    ss.append(input().rstrip())\nctr = Counter(ss)\na = sorted([(-v, k) for k, v in list(ctr.items())])\nmaxv = a[0][0]\nfor i in range(len(a)):\n    if a[i][0] != maxv:\n        break\n    print((a[i][1]))\n","code_same":false,"relative_loc_diff_percent":12.5,"diff":["-import heapq","-heap = [(-v, k) for k, v in list(ctr.items())]","-heapq.heapify(heap)","-maxv = heap[0][0]","-while heap:","-    c = heapq.heappop(heap)","-    if c[0] != maxv:","+a = sorted([(-v, k) for k, v in list(ctr.items())])","+maxv = a[0][0]","+for i in range(len(a)):","+    if a[i][0] != maxv:","-    print((c[1]))","+    print((a[i][1]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3121475418,"measured_runtime_v1":0.0064239368,"runtime_lift":48.5913153977,"key":["s074380513","s228830644"]}
{"user_id":"u638456847","problem_id":"p02685","language":"python","submission_id_v0":"s295745028","submission_id_v1":"s749223274","cpu_time_v0":1095,"cpu_time_v1":852,"memory_v0":32948,"memory_v1":9220,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":22.19,"input":"import sys\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\n\n\nfac = [1, 1]     # \u5143\u30c6\u30fc\u30d6\u30eb\n\nf_inv = [1, 1]   # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\n\ninv = [0, 1]     # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\n\n\ndef prepare(n, mod):\n\n    for i in range(2, n+1):\n\n        fac.append((fac[-1] * i) % mod)\n\n        inv.append((-inv[mod % i] * (mod\/\/i)) % mod)\n\n        f_inv.append((f_inv[-1] * inv[-1]) % mod)\n\n\n\ndef cmb(n, r, mod):\n\n    if n < 0 or r < 0:\n\n        return 0\n\n    if r > n:\n\n        return 0\n\n\n\n    return fac[n] * f_inv[r] * f_inv[n-r] % mod\n\n\n\n\n\ndef main():\n\n    N,M,K = list(map(int, readline().split()))\n\n\n\n    MOD = 998244353\n\n    prepare(N + 10, MOD)\n\n\n\n    if M == 1 and K == N - 1:\n\n        print((1))\n\n        exit()\n\n\n\n    m = M\n\n    for _ in range(N-1):\n\n        m *= M - 1\n\n        m %= MOD\n\n\n\n    ans = 0\n\n    for k in range(K+1):\n\n        ans += (m * cmb(N-1, k, MOD)) % MOD\n\n        ans %= MOD\n\n\n\n        m *= pow(M-1, MOD-2, MOD)\n\n        m %= MOD\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","target":"import sys\n\nread = sys.stdin.read\n\nreadline = sys.stdin.readline\n\nreadlines = sys.stdin.readlines\n\n\n\n# 0^0 = 1\n\n\n\ndef main():\n\n    N,M,K = list(map(int, readline().split()))\n\n\n\n    MOD = 998244353\n\n\n\n    if M == 1:\n\n        if K == N - 1:\n\n            print((1))\n\n        else:\n\n            print((0))\n\n        exit()\n\n\n\n    m = pow(M-1, N-1, MOD)\n\n    m_1_inv = pow(M-1, MOD-2, MOD)\n\n    comb = 1\n\n    ans = comb * m\n\n    for k in range(1,K+1):\n\n        m *= m_1_inv\n\n        m %= MOD\n\n        comb *= N - k\n\n        comb %= MOD\n\n        comb *= pow(k, MOD-2, MOD)\n\n        \n\n        ans += (m * comb) % MOD\n\n        ans %= MOD\n\n\n\n    print((ans * M % MOD))\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()\n","code_v0_loc":52,"code_v1_loc":38,"code_v0_num_chars":1010,"code_v1_num_chars":691,"code_v0_no_empty_lines":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nfac = [1, 1]  # \u5143\u30c6\u30fc\u30d6\u30eb\nf_inv = [1, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninv = [0, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\n\ndef prepare(n, mod):\n    for i in range(2, n + 1):\n        fac.append((fac[-1] * i) % mod)\n        inv.append((-inv[mod % i] * (mod \/\/ i)) % mod)\n        f_inv.append((f_inv[-1] * inv[-1]) % mod)\n\n\ndef cmb(n, r, mod):\n    if n < 0 or r < 0:\n        return 0\n    if r > n:\n        return 0\n    return fac[n] * f_inv[r] * f_inv[n - r] % mod\n\n\ndef main():\n    N, M, K = list(map(int, readline().split()))\n    MOD = 998244353\n    prepare(N + 10, MOD)\n    if M == 1 and K == N - 1:\n        print((1))\n        exit()\n    m = M\n    for _ in range(N - 1):\n        m *= M - 1\n        m %= MOD\n    ans = 0\n    for k in range(K + 1):\n        ans += (m * cmb(N - 1, k, MOD)) % MOD\n        ans %= MOD\n        m *= pow(M - 1, MOD - 2, MOD)\n        m %= MOD\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\n# 0^0 = 1\ndef main():\n    N, M, K = list(map(int, readline().split()))\n    MOD = 998244353\n    if M == 1:\n        if K == N - 1:\n            print((1))\n        else:\n            print((0))\n        exit()\n    m = pow(M - 1, N - 1, MOD)\n    m_1_inv = pow(M - 1, MOD - 2, MOD)\n    comb = 1\n    ans = comb * m\n    for k in range(1, K + 1):\n        m *= m_1_inv\n        m %= MOD\n        comb *= N - k\n        comb %= MOD\n        comb *= pow(k, MOD - 2, MOD)\n        ans += (m * comb) % MOD\n        ans %= MOD\n    print((ans * M % MOD))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":26.9230769231,"diff":["-fac = [1, 1]  # \u5143\u30c6\u30fc\u30d6\u30eb","-f_inv = [1, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb","-inv = [0, 1]  # \u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb","-","-","-def prepare(n, mod):","-    for i in range(2, n + 1):","-        fac.append((fac[-1] * i) % mod)","-        inv.append((-inv[mod % i] * (mod \/\/ i)) % mod)","-        f_inv.append((f_inv[-1] * inv[-1]) % mod)","-","-","-def cmb(n, r, mod):","-    if n < 0 or r < 0:","-        return 0","-    if r > n:","-        return 0","-    return fac[n] * f_inv[r] * f_inv[n - r] % mod","-","-","+# 0^0 = 1","-    prepare(N + 10, MOD)","-    if M == 1 and K == N - 1:","-        print((1))","+    if M == 1:","+        if K == N - 1:","+            print((1))","+        else:","+            print((0))","-    m = M","-    for _ in range(N - 1):","-        m *= M - 1","+    m = pow(M - 1, N - 1, MOD)","+    m_1_inv = pow(M - 1, MOD - 2, MOD)","+    comb = 1","+    ans = comb * m","+    for k in range(1, K + 1):","+        m *= m_1_inv","-    ans = 0","-    for k in range(K + 1):","-        ans += (m * cmb(N - 1, k, MOD)) % MOD","+        comb *= N - k","+        comb %= MOD","+        comb *= pow(k, MOD - 2, MOD)","+        ans += (m * comb) % MOD","-        m *= pow(M - 1, MOD - 2, MOD)","-        m %= MOD","-    print(ans)","+    print((ans * M % MOD))"],"diff_only_import_comment":false,"measured_runtime_v0":0.9888417046,"measured_runtime_v1":0.3609299815,"runtime_lift":2.7397050823,"key":["s295745028","s749223274"]}
{"user_id":"u588341295","problem_id":"p02748","language":"python","submission_id_v0":"s850163388","submission_id_v1":"s734063266","cpu_time_v0":667,"cpu_time_v1":325,"memory_v0":36848,"memory_v1":18864,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":51.27,"input":"# -*- coding: utf-8 -*-\n\n\n\nimport sys\n\nfrom collections import Counter\n\n\n\ndef input(): return sys.stdin.readline().strip()\n\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\n\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\n\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\n\ndef ceil(x, y=1): return int(-(-x \/\/ y))\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\n\ndef Yes(): print('Yes')\n\ndef No(): print('No')\n\ndef YES(): print('YES')\n\ndef NO(): print('NO')\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = 10 ** 18\n\nMOD = 10 ** 9 + 7\n\n\n\ndef fft(A, B):\n\n    \"\"\" \n\n    \u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db(FFT)\n\n        A\uff1a\u51fa\u73fe\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u305f\u30ea\u30b9\u30c8\n\n        B\uff1a\u51fa\u73fe\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u305f\u30ea\u30b9\u30c8\n\n    \"\"\"\n\n    import numpy as np\n\n    from numpy.fft import rfft, irfft\n\n\n\n    # \u51fa\u73fe\u6570\u30ab\u30a6\u30f3\u30c8\n\n    MAXA = max(A)\n\n    MAXB = max(B)\n\n    C1 = [0] * (MAXA+1)\n\n    C2 = [0] * (MAXB+1)\n\n    for a in A:\n\n        C1[a] += 1\n\n    for b in B:\n\n        C2[b] += 1\n\n    # max(A)+max(B)\u3088\u308a\u5927\u304d\u30442\u51aa\n\n    L = 1\n\n    k = 0\n\n    while L <= MAXA + MAXB:\n\n        k += 1\n\n        L = 2**k\n\n    # FFT\n\n    res = irfft(rfft(C1, L) * rfft(C2, L), L)\n\n    # \u56db\u6368\u4e94\u5165\u3057\u3066\u6574\u6570\u306b\n\n    res = np.rint(res).astype(np.int64)\n\n    return res\n\n\n\nN, M, L = MAP()\n\nA = LIST()\n\nB = LIST()\n\n\n\nres = list(fft(A, B))\n\n\n\nmn = INF\n\nfor i, a in enumerate(res):\n\n    if a != 0:\n\n        mn = i\n\n        break\n\n\n\nfor _ in range(L):\n\n    x, y, c = MAP()\n\n    x -= 1; y -= 1\n\n    mn = min(mn, A[x] + B[y] - c)\n\nprint(mn)\n","target":"# -*- coding: utf-8 -*-\n\n\n\nimport sys\n\nfrom collections import Counter\n\n\n\ndef input(): return sys.stdin.readline().strip()\n\ndef list2d(a, b, c): return [[c] * b for i in range(a)]\n\ndef list3d(a, b, c, d): return [[[d] * c for j in range(b)] for i in range(a)]\n\ndef list4d(a, b, c, d, e): return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\n\ndef ceil(x, y=1): return int(-(-x \/\/ y))\n\ndef INT(): return int(eval(input()))\n\ndef MAP(): return list(map(int, input().split()))\n\ndef LIST(N=None): return list(MAP()) if N is None else [INT() for i in range(N)]\n\ndef Yes(): print('Yes')\n\ndef No(): print('No')\n\ndef YES(): print('YES')\n\ndef NO(): print('NO')\n\nsys.setrecursionlimit(10 ** 9)\n\nINF = 10 ** 18\n\nMOD = 10 ** 9 + 7\n\n\n\nN, M, L = MAP()\n\nA = LIST()\n\nB = LIST()\n\n\n\nmn = min(A) + min(B)\n\nfor _ in range(L):\n\n    x, y, c = MAP()\n\n    x -= 1; y -= 1\n\n    mn = min(mn, A[x] + B[y] - c)\n\nprint(mn)\n","code_v0_loc":68,"code_v1_loc":31,"code_v0_num_chars":1587,"code_v1_num_chars":901,"code_v0_no_empty_lines":"# -*- coding: utf-8 -*-\nimport sys\nfrom collections import Counter\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef list2d(a, b, c):\n    return [[c] * b for i in range(a)]\n\n\ndef list3d(a, b, c, d):\n    return [[[d] * c for j in range(b)] for i in range(a)]\n\n\ndef list4d(a, b, c, d, e):\n    return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\n\n\ndef ceil(x, y=1):\n    return int(-(-x \/\/ y))\n\n\ndef INT():\n    return int(eval(input()))\n\n\ndef MAP():\n    return list(map(int, input().split()))\n\n\ndef LIST(N=None):\n    return list(MAP()) if N is None else [INT() for i in range(N)]\n\n\ndef Yes():\n    print(\"Yes\")\n\n\ndef No():\n    print(\"No\")\n\n\ndef YES():\n    print(\"YES\")\n\n\ndef NO():\n    print(\"NO\")\n\n\nsys.setrecursionlimit(10**9)\nINF = 10**18\nMOD = 10**9 + 7\n\n\ndef fft(A, B):\n    \"\"\"\n    \u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db(FFT)\n        A\uff1a\u51fa\u73fe\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u305f\u30ea\u30b9\u30c8\n        B\uff1a\u51fa\u73fe\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u305f\u30ea\u30b9\u30c8\n    \"\"\"\n    import numpy as np\n    from numpy.fft import rfft, irfft\n\n    # \u51fa\u73fe\u6570\u30ab\u30a6\u30f3\u30c8\n    MAXA = max(A)\n    MAXB = max(B)\n    C1 = [0] * (MAXA + 1)\n    C2 = [0] * (MAXB + 1)\n    for a in A:\n        C1[a] += 1\n    for b in B:\n        C2[b] += 1\n    # max(A)+max(B)\u3088\u308a\u5927\u304d\u30442\u51aa\n    L = 1\n    k = 0\n    while L <= MAXA + MAXB:\n        k += 1\n        L = 2**k\n    # FFT\n    res = irfft(rfft(C1, L) * rfft(C2, L), L)\n    # \u56db\u6368\u4e94\u5165\u3057\u3066\u6574\u6570\u306b\n    res = np.rint(res).astype(np.int64)\n    return res\n\n\nN, M, L = MAP()\nA = LIST()\nB = LIST()\nres = list(fft(A, B))\nmn = INF\nfor i, a in enumerate(res):\n    if a != 0:\n        mn = i\n        break\nfor _ in range(L):\n    x, y, c = MAP()\n    x -= 1\n    y -= 1\n    mn = min(mn, A[x] + B[y] - c)\nprint(mn)\n","code_v1_no_empty_lines":"# -*- coding: utf-8 -*-\nimport sys\nfrom collections import Counter\n\n\ndef input():\n    return sys.stdin.readline().strip()\n\n\ndef list2d(a, b, c):\n    return [[c] * b for i in range(a)]\n\n\ndef list3d(a, b, c, d):\n    return [[[d] * c for j in range(b)] for i in range(a)]\n\n\ndef list4d(a, b, c, d, e):\n    return [[[[e] * d for j in range(c)] for j in range(b)] for i in range(a)]\n\n\ndef ceil(x, y=1):\n    return int(-(-x \/\/ y))\n\n\ndef INT():\n    return int(eval(input()))\n\n\ndef MAP():\n    return list(map(int, input().split()))\n\n\ndef LIST(N=None):\n    return list(MAP()) if N is None else [INT() for i in range(N)]\n\n\ndef Yes():\n    print(\"Yes\")\n\n\ndef No():\n    print(\"No\")\n\n\ndef YES():\n    print(\"YES\")\n\n\ndef NO():\n    print(\"NO\")\n\n\nsys.setrecursionlimit(10**9)\nINF = 10**18\nMOD = 10**9 + 7\nN, M, L = MAP()\nA = LIST()\nB = LIST()\nmn = min(A) + min(B)\nfor _ in range(L):\n    x, y, c = MAP()\n    x -= 1\n    y -= 1\n    mn = min(mn, A[x] + B[y] - c)\nprint(mn)\n","code_same":false,"relative_loc_diff_percent":54.4117647059,"diff":["-","-","-def fft(A, B):","-    \"\"\"","-    \u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db(FFT)","-        A\uff1a\u51fa\u73fe\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u305f\u30ea\u30b9\u30c8","-        B\uff1a\u51fa\u73fe\u56de\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u305f\u30ea\u30b9\u30c8","-    \"\"\"","-    import numpy as np","-    from numpy.fft import rfft, irfft","-","-    # \u51fa\u73fe\u6570\u30ab\u30a6\u30f3\u30c8","-    MAXA = max(A)","-    MAXB = max(B)","-    C1 = [0] * (MAXA + 1)","-    C2 = [0] * (MAXB + 1)","-    for a in A:","-        C1[a] += 1","-    for b in B:","-        C2[b] += 1","-    # max(A)+max(B)\u3088\u308a\u5927\u304d\u30442\u51aa","-    L = 1","-    k = 0","-    while L <= MAXA + MAXB:","-        k += 1","-        L = 2**k","-    # FFT","-    res = irfft(rfft(C1, L) * rfft(C2, L), L)","-    # \u56db\u6368\u4e94\u5165\u3057\u3066\u6574\u6570\u306b","-    res = np.rint(res).astype(np.int64)","-    return res","-","-","-res = list(fft(A, B))","-mn = INF","-for i, a in enumerate(res):","-    if a != 0:","-        mn = i","-        break","+mn = min(A) + min(B)"],"diff_only_import_comment":false,"measured_runtime_v0":2.0354720068,"measured_runtime_v1":0.3338449564,"runtime_lift":6.097057834,"key":["s850163388","s734063266"]}
{"user_id":"u945405878","problem_id":"p02899","language":"python","submission_id_v0":"s615780042","submission_id_v1":"s374426185","cpu_time_v0":230,"cpu_time_v1":119,"memory_v0":30320,"memory_v1":18956,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":48.26,"input":"import numpy as np\n\n\n\nN = int(eval(input()))\n\nA = [int(_) for _ in input().split(\" \")]\n\n\n\ntmp = np.argsort(A)\n\ntmp2= tmp + np.ones(N)\n\ntmp3 = [int(_) for _ in tmp2.tolist()]\n\nans = [str(_) for _ in tmp3]\n\n\n\nprint((\" \".join(ans)))","target":"N = int(eval(input()))\n\nA = [int(_) for _ in input().split(\" \")]\n\n\n\ntmp = sorted(list(range(1, len(A) + 1)), key=lambda x:A[x - 1])\n\nans = [str(_) for _ in tmp]\n\nprint((\" \".join(ans)))","code_v0_loc":11,"code_v1_loc":6,"code_v0_num_chars":221,"code_v1_num_chars":170,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nA = [int(_) for _ in input().split(\" \")]\ntmp = np.argsort(A)\ntmp2 = tmp + np.ones(N)\ntmp3 = [int(_) for _ in tmp2.tolist()]\nans = [str(_) for _ in tmp3]\nprint((\" \".join(ans)))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = [int(_) for _ in input().split(\" \")]\ntmp = sorted(list(range(1, len(A) + 1)), key=lambda x: A[x - 1])\nans = [str(_) for _ in tmp]\nprint((\" \".join(ans)))\n","code_same":false,"relative_loc_diff_percent":45.4545454545,"diff":["-import numpy as np","-","-tmp = np.argsort(A)","-tmp2 = tmp + np.ones(N)","-tmp3 = [int(_) for _ in tmp2.tolist()]","-ans = [str(_) for _ in tmp3]","+tmp = sorted(list(range(1, len(A) + 1)), key=lambda x: A[x - 1])","+ans = [str(_) for _ in tmp]"],"diff_only_import_comment":false,"measured_runtime_v0":1.608368429,"measured_runtime_v1":0.1298276195,"runtime_lift":12.3884920241,"key":["s615780042","s374426185"]}
{"user_id":"u599114793","problem_id":"p03273","language":"python","submission_id_v0":"s483518668","submission_id_v1":"s544930407","cpu_time_v0":317,"cpu_time_v1":185,"memory_v0":20624,"memory_v1":39152,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":41.64,"input":"import numpy\n\nh,w = list(map(int,input().split()))\n\ngrid = numpy.empty([h,w], str)\n\nwhite_h = []\n\nwhite_w = []\n\nfor i in range(h):\n\n    grid[i] = list(eval(input()))\n\nfor i in range(h):\n\n    if \"#\" not in grid[i]:\n\n        white_h.append(i)\n\nfor i in range(w):\n\n    if \"#\" not in grid[:, i]:\n\n        white_w.append(i)\n\nans_grid = numpy.empty([h-len(white_h), w-len(white_w)], str)\n\ncnt_h = 0\n\nfor i in range(h):\n\n    if i not in white_h:\n\n        cnt_w = 0\n\n        for j in range(w):\n\n            if j not in white_w:\n\n                ans_grid[cnt_h, cnt_w] = grid[i,j]\n\n                cnt_w += 1\n\n        cnt_h += 1\n\nfor i in range(len(ans_grid)):\n\n    print((\"\".join(ans_grid[i])))\n\n\n\n\n\n\n","target":"h,w = list(map(int,input().split()))\n\ngrid = []\n\nfor i in range(h):\n\n    grid.append(list(eval(input())))\n\nh_b = []\n\nw_b = []\n\nfor i in range(h):\n\n    if \"#\" in grid[i]:\n\n        h_b.append(i)\n\ngrid_t = [list(x) for x in zip(*grid)]\n\nfor i in range(w):\n\n    if \"#\" in grid_t[i]:\n\n        w_b.append(i)\n\nans = []\n\nfor i in h_b:\n\n    crt = []\n\n    for j in w_b:\n\n        crt.append(grid[i][j])\n\n    ans.append(crt)\n\nfor i in range(len(ans)):\n\n    print((\"\".join(ans[i])))\n\n\n","code_v0_loc":28,"code_v1_loc":22,"code_v0_num_chars":679,"code_v1_num_chars":458,"code_v0_no_empty_lines":"import numpy\n\nh, w = list(map(int, input().split()))\ngrid = numpy.empty([h, w], str)\nwhite_h = []\nwhite_w = []\nfor i in range(h):\n    grid[i] = list(eval(input()))\nfor i in range(h):\n    if \"#\" not in grid[i]:\n        white_h.append(i)\nfor i in range(w):\n    if \"#\" not in grid[:, i]:\n        white_w.append(i)\nans_grid = numpy.empty([h - len(white_h), w - len(white_w)], str)\ncnt_h = 0\nfor i in range(h):\n    if i not in white_h:\n        cnt_w = 0\n        for j in range(w):\n            if j not in white_w:\n                ans_grid[cnt_h, cnt_w] = grid[i, j]\n                cnt_w += 1\n        cnt_h += 1\nfor i in range(len(ans_grid)):\n    print((\"\".join(ans_grid[i])))\n","code_v1_no_empty_lines":"h, w = list(map(int, input().split()))\ngrid = []\nfor i in range(h):\n    grid.append(list(eval(input())))\nh_b = []\nw_b = []\nfor i in range(h):\n    if \"#\" in grid[i]:\n        h_b.append(i)\ngrid_t = [list(x) for x in zip(*grid)]\nfor i in range(w):\n    if \"#\" in grid_t[i]:\n        w_b.append(i)\nans = []\nfor i in h_b:\n    crt = []\n    for j in w_b:\n        crt.append(grid[i][j])\n    ans.append(crt)\nfor i in range(len(ans)):\n    print((\"\".join(ans[i])))\n","code_same":false,"relative_loc_diff_percent":21.4285714286,"diff":["-import numpy","-","-grid = numpy.empty([h, w], str)","-white_h = []","-white_w = []","+grid = []","-    grid[i] = list(eval(input()))","+    grid.append(list(eval(input())))","+h_b = []","+w_b = []","-    if \"#\" not in grid[i]:","-        white_h.append(i)","+    if \"#\" in grid[i]:","+        h_b.append(i)","+grid_t = [list(x) for x in zip(*grid)]","-    if \"#\" not in grid[:, i]:","-        white_w.append(i)","-ans_grid = numpy.empty([h - len(white_h), w - len(white_w)], str)","-cnt_h = 0","-for i in range(h):","-    if i not in white_h:","-        cnt_w = 0","-        for j in range(w):","-            if j not in white_w:","-                ans_grid[cnt_h, cnt_w] = grid[i, j]","-                cnt_w += 1","-        cnt_h += 1","-for i in range(len(ans_grid)):","-    print((\"\".join(ans_grid[i])))","+    if \"#\" in grid_t[i]:","+        w_b.append(i)","+ans = []","+for i in h_b:","+    crt = []","+    for j in w_b:","+        crt.append(grid[i][j])","+    ans.append(crt)","+for i in range(len(ans)):","+    print((\"\".join(ans[i])))"],"diff_only_import_comment":false,"measured_runtime_v0":1.7529192381,"measured_runtime_v1":0.3749449561,"runtime_lift":4.675137536,"key":["s483518668","s544930407"]}
{"user_id":"u428397309","problem_id":"p03037","language":"python","submission_id_v0":"s058389905","submission_id_v1":"s302443687","cpu_time_v0":285,"cpu_time_v1":131,"memory_v0":10868,"memory_v1":10868,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":54.04,"input":"# -*- coding: utf-8 -*-\n\n\n\nN, M = list(map(int, input().split()))\n\nL, R = [None] * M, [None] * M\n\nfor i in range(M):\n\n    L[i], R[i] = list(map(int, input().split()))\n\n\n\nl = max(L)\n\nr = min(R)\n\n\n\nans = max(r - l + 1, 0)\n\n\n\nprint(ans)\n","target":"# -*- coding: utf-8 -*-\n\n\n\nimport sys\n\ninput = sys.stdin.readline\n\n\n\nN, M = list(map(int, input().split()))\n\nL, R = [None] * M, [None] * M\n\nfor i in range(M):\n\n    L[i], R[i] = list(map(int, input().split()))\n\n\n\nans = max(min(R) - max(L) + 1, 0)\n\n\n\nprint(ans)\n","code_v0_loc":13,"code_v1_loc":13,"code_v0_num_chars":222,"code_v1_num_chars":248,"code_v0_no_empty_lines":"# -*- coding: utf-8 -*-\nN, M = list(map(int, input().split()))\nL, R = [None] * M, [None] * M\nfor i in range(M):\n    L[i], R[i] = list(map(int, input().split()))\nl = max(L)\nr = min(R)\nans = max(r - l + 1, 0)\nprint(ans)\n","code_v1_no_empty_lines":"# -*- coding: utf-8 -*-\nimport sys\n\ninput = sys.stdin.readline\nN, M = list(map(int, input().split()))\nL, R = [None] * M, [None] * M\nfor i in range(M):\n    L[i], R[i] = list(map(int, input().split()))\nans = max(min(R) - max(L) + 1, 0)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["+import sys","+","+input = sys.stdin.readline","-l = max(L)","-r = min(R)","-ans = max(r - l + 1, 0)","+ans = max(min(R) - max(L) + 1, 0)"],"diff_only_import_comment":false,"measured_runtime_v0":0.2363609416,"measured_runtime_v1":0.0060358713,"runtime_lift":39.1593741465,"key":["s058389905","s302443687"]}
{"user_id":"u756270013","problem_id":"p02881","language":"python","submission_id_v0":"s868775809","submission_id_v1":"s345973481","cpu_time_v0":439,"cpu_time_v1":210,"memory_v0":3060,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":52.16,"input":"import math\n\ninput_num = int(eval(input()))\n\nnum_sqrt = int(math.sqrt(input_num))\n\n\n\nminimam = input_num\n\nfor i in range(num_sqrt+1,0,-1):\n\n    q, mod = divmod(input_num, i)\n\n    distance = q + i -2\n\n    if mod == 0 and minimam > distance:\n\n        minimam = distance\n\nprint(minimam)","target":"import math\n\ndef main1():\n\n    input_num = int(eval(input()))\n\n    num_sqrt = int(math.sqrt(input_num))\n\n\n\n    minimam = input_num\n\n    for i in range(num_sqrt+1,0,-1):\n\n        q, mod = divmod(input_num, i)\n\n        if mod == 0:\n\n            distance = q + i -2\n\n            if minimam > distance:\n\n                minimam = distance\n\n    print(minimam)\n\nmain1()","code_v0_loc":11,"code_v1_loc":14,"code_v0_num_chars":277,"code_v1_num_chars":357,"code_v0_no_empty_lines":"import math\n\ninput_num = int(eval(input()))\nnum_sqrt = int(math.sqrt(input_num))\nminimam = input_num\nfor i in range(num_sqrt + 1, 0, -1):\n    q, mod = divmod(input_num, i)\n    distance = q + i - 2\n    if mod == 0 and minimam > distance:\n        minimam = distance\nprint(minimam)\n","code_v1_no_empty_lines":"import math\n\n\ndef main1():\n    input_num = int(eval(input()))\n    num_sqrt = int(math.sqrt(input_num))\n    minimam = input_num\n    for i in range(num_sqrt + 1, 0, -1):\n        q, mod = divmod(input_num, i)\n        if mod == 0:\n            distance = q + i - 2\n            if minimam > distance:\n                minimam = distance\n    print(minimam)\n\n\nmain1()\n","code_same":false,"relative_loc_diff_percent":21.4285714286,"diff":["-input_num = int(eval(input()))","-num_sqrt = int(math.sqrt(input_num))","-minimam = input_num","-for i in range(num_sqrt + 1, 0, -1):","-    q, mod = divmod(input_num, i)","-    distance = q + i - 2","-    if mod == 0 and minimam > distance:","-        minimam = distance","-print(minimam)","+","+def main1():","+    input_num = int(eval(input()))","+    num_sqrt = int(math.sqrt(input_num))","+    minimam = input_num","+    for i in range(num_sqrt + 1, 0, -1):","+        q, mod = divmod(input_num, i)","+        if mod == 0:","+            distance = q + i - 2","+            if minimam > distance:","+                minimam = distance","+    print(minimam)","+","+","+main1()"],"diff_only_import_comment":false,"measured_runtime_v0":0.27158184,"measured_runtime_v1":0.2170004892,"runtime_lift":1.2515263951,"key":["s868775809","s345973481"]}
{"user_id":"u802963389","problem_id":"p02881","language":"python","submission_id_v0":"s879601223","submission_id_v1":"s706921267","cpu_time_v0":178,"cpu_time_v1":148,"memory_v0":3060,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":16.85,"input":"# C - Walk on Multiplication Table\n\n# https:\/\/atcoder.jp\/contests\/abc144\/tasks\/abc144_c\n\n\n\nn = int(eval(input()))\n\n\n\nans = 10 ** 12\n\nfor i in range(1, 10 ** 6 + 1):\n\n  if n % i == 0:\n\n    ans = min(ans, n \/\/ i + i)\n\n\n\nprint((ans - 2))","target":"# C - Walk on Multiplication Table\n\n# https:\/\/atcoder.jp\/contests\/abc144\/tasks\/abc144_c\n\n\n\nn = int(eval(input()))\n\n\n\nans = n\n\nfor i in range(1, int(n**.5) + 2):\n\n  if n % i == 0:\n\n    ans = min(ans, n \/\/ i + i - 2)\n\n\n\nprint(ans)","code_v0_loc":11,"code_v1_loc":11,"code_v0_num_chars":226,"code_v1_num_chars":222,"code_v0_no_empty_lines":"# C - Walk on Multiplication Table\n# https:\/\/atcoder.jp\/contests\/abc144\/tasks\/abc144_c\nn = int(eval(input()))\nans = 10**12\nfor i in range(1, 10**6 + 1):\n    if n % i == 0:\n        ans = min(ans, n \/\/ i + i)\nprint((ans - 2))\n","code_v1_no_empty_lines":"# C - Walk on Multiplication Table\n# https:\/\/atcoder.jp\/contests\/abc144\/tasks\/abc144_c\nn = int(eval(input()))\nans = n\nfor i in range(1, int(n**0.5) + 2):\n    if n % i == 0:\n        ans = min(ans, n \/\/ i + i - 2)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-ans = 10**12","-for i in range(1, 10**6 + 1):","+ans = n","+for i in range(1, int(n**0.5) + 2):","-        ans = min(ans, n \/\/ i + i)","-print((ans - 2))","+        ans = min(ans, n \/\/ i + i - 2)","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.0824642203,"measured_runtime_v1":0.2210092547,"runtime_lift":4.8978230425,"key":["s879601223","s706921267"]}
{"user_id":"u077291787","problem_id":"p04020","language":"python","submission_id_v0":"s648607888","submission_id_v1":"s112859245","cpu_time_v0":58,"cpu_time_v1":46,"memory_v0":14252,"memory_v1":14092,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":20.69,"input":"# AGC003B - Simplified mahjong\n\nimport sys\n\ninput = sys.stdin.readline\n\n\n\ndef main():\n\n    # split in subsequences when 0 appears -> sum up cur \/\/ 2\n\n    N = int(eval(input()))\n\n    A = list(map(int, [eval(input()) for _ in range(N)])) + [0]\n\n    ans, cur = 0, 0\n\n    for i in A:\n\n        if i:\n\n            cur += i\n\n        else:\n\n            ans += cur \/\/ 2\n\n            cur = 0\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()","target":"# AGC003B - Simplified mahjong\n\ndef main():\n\n    # split in subsequences when 0 appears -> sum up cur \/\/ 2\n\n    N, *A = list(map(int, open(0).read().split()))\n\n    A.append(0)\n\n    ans, cur = 0, 0\n\n    for i in A:\n\n        if i:\n\n            cur += i\n\n        else:\n\n            ans += cur \/\/ 2\n\n            cur = 0\n\n    print(ans)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    main()","code_v0_loc":20,"code_v1_loc":17,"code_v0_num_chars":429,"code_v1_num_chars":369,"code_v0_no_empty_lines":"# AGC003B - Simplified mahjong\nimport sys\n\ninput = sys.stdin.readline\n\n\ndef main():\n    # split in subsequences when 0 appears -> sum up cur \/\/ 2\n    N = int(eval(input()))\n    A = list(map(int, [eval(input()) for _ in range(N)])) + [0]\n    ans, cur = 0, 0\n    for i in A:\n        if i:\n            cur += i\n        else:\n            ans += cur \/\/ 2\n            cur = 0\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"# AGC003B - Simplified mahjong\ndef main():\n    # split in subsequences when 0 appears -> sum up cur \/\/ 2\n    N, *A = list(map(int, open(0).read().split()))\n    A.append(0)\n    ans, cur = 0, 0\n    for i in A:\n        if i:\n            cur += i\n        else:\n            ans += cur \/\/ 2\n            cur = 0\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":15.0,"diff":["-import sys","-","-input = sys.stdin.readline","-","-","-    N = int(eval(input()))","-    A = list(map(int, [eval(input()) for _ in range(N)])) + [0]","+    N, *A = list(map(int, open(0).read().split()))","+    A.append(0)"],"diff_only_import_comment":false,"measured_runtime_v0":0.282343082,"measured_runtime_v1":0.1984000847,"runtime_lift":1.4230996042,"key":["s648607888","s112859245"]}
{"user_id":"u131984977","problem_id":"p02412","language":"python","submission_id_v0":"s229334190","submission_id_v1":"s721700065","cpu_time_v0":1150,"cpu_time_v1":900,"memory_v0":6724,"memory_v1":6720,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":21.74,"input":"while True:\n\n    (n, x) = [int(i) for i in input().split()]\n\n    if n == x == 0:\n\n        break\n\n\n\n    count = 0\n\n    for a in range(1, n + 1):\n\n        for b in range(a + 1, n + 1):\n\n            for c in range(b + 1, n + 1):\n\n                if sum([a,b,c]) == x:\n\n                    count += 1\n\n\n\n    print(count)","target":"while True:\n\n    (n, x) = [int(i) for i in input().split()]\n\n    if n == x == 0:\n\n        break\n\n\n\n    count = 0\n\n    limit = n if n < x else x\n\n    for a in range(1, limit + 1):\n\n        for b in range(a + 1, limit + 1):\n\n            for c in range(b + 1, limit + 1):\n\n                if sum([a,b,c]) == x:\n\n                    count += 1\n\n\n\n    print(count)","code_v0_loc":13,"code_v1_loc":14,"code_v0_num_chars":316,"code_v1_num_chars":359,"code_v0_no_empty_lines":"while True:\n    (n, x) = [int(i) for i in input().split()]\n    if n == x == 0:\n        break\n    count = 0\n    for a in range(1, n + 1):\n        for b in range(a + 1, n + 1):\n            for c in range(b + 1, n + 1):\n                if sum([a, b, c]) == x:\n                    count += 1\n    print(count)\n","code_v1_no_empty_lines":"while True:\n    (n, x) = [int(i) for i in input().split()]\n    if n == x == 0:\n        break\n    count = 0\n    limit = n if n < x else x\n    for a in range(1, limit + 1):\n        for b in range(a + 1, limit + 1):\n            for c in range(b + 1, limit + 1):\n                if sum([a, b, c]) == x:\n                    count += 1\n    print(count)\n","code_same":false,"relative_loc_diff_percent":7.1428571429,"diff":["-    for a in range(1, n + 1):","-        for b in range(a + 1, n + 1):","-            for c in range(b + 1, n + 1):","+    limit = n if n < x else x","+    for a in range(1, limit + 1):","+        for b in range(a + 1, limit + 1):","+            for c in range(b + 1, limit + 1):"],"diff_only_import_comment":false,"measured_runtime_v0":0.2860648324,"measured_runtime_v1":0.2158536868,"runtime_lift":1.3252719315,"key":["s229334190","s721700065"]}
{"user_id":"u857428111","problem_id":"p03200","language":"python","submission_id_v0":"s495063826","submission_id_v1":"s740606838","cpu_time_v0":91,"cpu_time_v1":46,"memory_v0":6208,"memory_v1":3500,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":49.45,"input":"import sys\n\nsys.setrecursionlimit(10000000)\n\n\n\n#const\n\ndxdy=((1,0),(0,1))\n\n#my functions here!\n\ndef pin(type=int):\n\n    return list(map(type,input().rstrip().split()))\n\n\n\n\n\n#your code here!\n\ndef resolve():\n\n    S=eval(input())\n\n    ans=0\n\n    \n\n    hidari=0\n\n    for i,c in enumerate(S):\n\n        if c==\"W\":\n\n            ans+=i-hidari\n\n            hidari+=1\n\n    print(ans)\n\n\n\nimport sys\n\nfrom io import StringIO\n\nimport unittest\n\n\n\n\n\nclass TestClass(unittest.TestCase):\n\n    def assertIO(self, input, output):\n\n        stdout, stdin = sys.stdout, sys.stdin\n\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n\n        resolve()\n\n        sys.stdout.seek(0)\n\n        out = sys.stdout.read()[:-1]\n\n        sys.stdout, sys.stdin = stdout, stdin\n\n        self.assertEqual(out, output)\n\n\n\n    def test_\u5165\u529b\u4f8b_1(self):\n\n        input = \"\"\"BBW\"\"\"\n\n        output = \"\"\"2\"\"\"\n\n        self.assertIO(input, output)\n\n\n\n    def test_\u5165\u529b\u4f8b_2(self):\n\n        input = \"\"\"BWBWBW\"\"\"\n\n        output = \"\"\"6\"\"\"\n\n        self.assertIO(input, output)\n\n\n\n\n\nif __name__ == \"__main__\":\n\n    #unittest.main()\n\n\n\n\n\n    resolve()#and submit 2 atcoder!\n\n\n","target":"import sys\n\ninput= lambda: sys.stdin.readline().rstrip()\n\ndef pin(type=int):\n\n    return list(map(type,input().split()))\n\n\n\n#%%code\n\n\n\ndef resolve():\n\n    \n\n    S=eval(input())\n\n    index=0\n\n    ans=0\n\n    for i in range(len(S)):\n\n        if S[i]==\"W\":\n\n            ans+=i-index\n\n            index+=1\n\n    print(ans)\n\n#%%submit!\n\nresolve()","code_v0_loc":54,"code_v1_loc":19,"code_v0_num_chars":1118,"code_v1_num_chars":327,"code_v0_no_empty_lines":"import sys\n\nsys.setrecursionlimit(10000000)\n# const\ndxdy = ((1, 0), (0, 1))\n# my functions here!\ndef pin(type=int):\n    return list(map(type, input().rstrip().split()))\n\n\n# your code here!\ndef resolve():\n    S = eval(input())\n    ans = 0\n    hidari = 0\n    for i, c in enumerate(S):\n        if c == \"W\":\n            ans += i - hidari\n            hidari += 1\n    print(ans)\n\n\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"BBW\"\"\"\n        output = \"\"\"2\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"BWBWBW\"\"\"\n        output = \"\"\"6\"\"\"\n        self.assertIO(input, output)\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()  # and submit 2 atcoder!\n","code_v1_no_empty_lines":"import sys\n\ninput = lambda: sys.stdin.readline().rstrip()\n\n\ndef pin(type=int):\n    return list(map(type, input().split()))\n\n\n#%%code\ndef resolve():\n    S = eval(input())\n    index = 0\n    ans = 0\n    for i in range(len(S)):\n        if S[i] == \"W\":\n            ans += i - index\n            index += 1\n    print(ans)\n\n\n#%%submit!\nresolve()\n","code_same":false,"relative_loc_diff_percent":64.8148148148,"diff":["-sys.setrecursionlimit(10000000)","-# const","-dxdy = ((1, 0), (0, 1))","-# my functions here!","-def pin(type=int):","-    return list(map(type, input().rstrip().split()))","+input = lambda: sys.stdin.readline().rstrip()","-# your code here!","+def pin(type=int):","+    return list(map(type, input().split()))","+","+","+#%%code","+    index = 0","-    hidari = 0","-    for i, c in enumerate(S):","-        if c == \"W\":","-            ans += i - hidari","-            hidari += 1","+    for i in range(len(S)):","+        if S[i] == \"W\":","+            ans += i - index","+            index += 1","-import sys","-from io import StringIO","-import unittest","-","-","-class TestClass(unittest.TestCase):","-    def assertIO(self, input, output):","-        stdout, stdin = sys.stdout, sys.stdin","-        sys.stdout, sys.stdin = StringIO(), StringIO(input)","-        resolve()","-        sys.stdout.seek(0)","-        out = sys.stdout.read()[:-1]","-        sys.stdout, sys.stdin = stdout, stdin","-        self.assertEqual(out, output)","-","-    def test_\u5165\u529b\u4f8b_1(self):","-        input = \"\"\"BBW\"\"\"","-        output = \"\"\"2\"\"\"","-        self.assertIO(input, output)","-","-    def test_\u5165\u529b\u4f8b_2(self):","-        input = \"\"\"BWBWBW\"\"\"","-        output = \"\"\"6\"\"\"","-        self.assertIO(input, output)","-","-","-if __name__ == \"__main__\":","-    # unittest.main()","-    resolve()  # and submit 2 atcoder!","+#%%submit!","+resolve()"],"diff_only_import_comment":false,"measured_runtime_v0":0.7679491718,"measured_runtime_v1":0.21292143,"runtime_lift":3.6067255965,"key":["s495063826","s740606838"]}
{"user_id":"u562935282","problem_id":"p04005","language":"python","submission_id_v0":"s576816693","submission_id_v1":"s557622241","cpu_time_v0":19,"cpu_time_v1":17,"memory_v0":3060,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":10.53,"input":"'''\n\n\u3042\u308b\u5e73\u9762\u306e\u30d6\u30ed\u30c3\u30af\u6570\u00d7(0,1)\n\n\u4e00\u3064\u3067\u3082\u5076\u6570\u304c\u3042\u308c\u3070\u3001\u5747\u7b49\u5206\u5272\u53ef\u80fd\n\n\u3059\u3079\u3066\u5947\u6570\u306e\u3068\u304d\u3001\n\n\u3042\u308b\u5e73\u9762\u306e\u30d6\u30ed\u30c3\u30af\u6570\u3092\u6700\u5c0f\u3068\u306a\u308b\u3088\u3046\u306b\u3059\u308b\u3068\u3001\u305d\u306e\u6570\u304c\u7b54\u3048\u306b\u306a\u308b\n\n'''\n\n\n\narr = list(map(int, input().split()))\n\n\n\nret = -1\n\nif 0 in list([x % 2 for x in arr]):\n\n    ret = 0\n\nelse:\n\n    arr_sorted = sorted(arr)\n\n    ret = arr_sorted[0] * arr_sorted[1]\n\nprint(ret)","target":"a = list(map(int, input().split()))\n\n\n\nif any([x % 2 == 0 for x in a]):\n\n    print((0))\n\nelse:\n\n    a = list(sorted(a))\n\n    print((a[0] * a[1]))\n","code_v0_loc":16,"code_v1_loc":7,"code_v0_num_chars":288,"code_v1_num_chars":147,"code_v0_no_empty_lines":"\"\"\"\n\u3042\u308b\u5e73\u9762\u306e\u30d6\u30ed\u30c3\u30af\u6570\u00d7(0,1)\n\u4e00\u3064\u3067\u3082\u5076\u6570\u304c\u3042\u308c\u3070\u3001\u5747\u7b49\u5206\u5272\u53ef\u80fd\n\u3059\u3079\u3066\u5947\u6570\u306e\u3068\u304d\u3001\n\u3042\u308b\u5e73\u9762\u306e\u30d6\u30ed\u30c3\u30af\u6570\u3092\u6700\u5c0f\u3068\u306a\u308b\u3088\u3046\u306b\u3059\u308b\u3068\u3001\u305d\u306e\u6570\u304c\u7b54\u3048\u306b\u306a\u308b\n\"\"\"\narr = list(map(int, input().split()))\nret = -1\nif 0 in list([x % 2 for x in arr]):\n    ret = 0\nelse:\n    arr_sorted = sorted(arr)\n    ret = arr_sorted[0] * arr_sorted[1]\nprint(ret)\n","code_v1_no_empty_lines":"a = list(map(int, input().split()))\nif any([x % 2 == 0 for x in a]):\n    print((0))\nelse:\n    a = list(sorted(a))\n    print((a[0] * a[1]))\n","code_same":false,"relative_loc_diff_percent":56.25,"diff":["-\"\"\"","-\u3042\u308b\u5e73\u9762\u306e\u30d6\u30ed\u30c3\u30af\u6570\u00d7(0,1)","-\u4e00\u3064\u3067\u3082\u5076\u6570\u304c\u3042\u308c\u3070\u3001\u5747\u7b49\u5206\u5272\u53ef\u80fd","-\u3059\u3079\u3066\u5947\u6570\u306e\u3068\u304d\u3001","-\u3042\u308b\u5e73\u9762\u306e\u30d6\u30ed\u30c3\u30af\u6570\u3092\u6700\u5c0f\u3068\u306a\u308b\u3088\u3046\u306b\u3059\u308b\u3068\u3001\u305d\u306e\u6570\u304c\u7b54\u3048\u306b\u306a\u308b","-\"\"\"","-arr = list(map(int, input().split()))","-ret = -1","-if 0 in list([x % 2 for x in arr]):","-    ret = 0","+a = list(map(int, input().split()))","+if any([x % 2 == 0 for x in a]):","+    print((0))","-    arr_sorted = sorted(arr)","-    ret = arr_sorted[0] * arr_sorted[1]","-print(ret)","+    a = list(sorted(a))","+    print((a[0] * a[1]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.1621806974,"measured_runtime_v1":0.0068150451,"runtime_lift":23.7974502571,"key":["s576816693","s557622241"]}
{"user_id":"u940342887","problem_id":"p03162","language":"python","submission_id_v0":"s060379978","submission_id_v1":"s122581978","cpu_time_v0":1633,"cpu_time_v1":622,"memory_v0":43156,"memory_v1":50048,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":61.91,"input":"import numpy as np\n\nN = int(eval(input()))\n\nabc = []\n\nfor i in range(N):\n\n    abc.append(list(map(int, input().split())))\n\n    \n\ndp = np.zeros(shape=(N, 3), dtype=int)\n\ndp[0, :] = abc[0]\n\nfor i in range(N-1):\n\n    dp[i+1, 0] = max(dp[i+1, 0], dp[i, 1] + abc[i+1][0], dp[i, 2] + abc[i+1][0])\n\n    dp[i+1, 1] = max(dp[i+1, 1], dp[i, 0] + abc[i+1][1], dp[i, 2] + abc[i+1][1])\n\n    dp[i+1, 2] = max(dp[i+1, 2], dp[i, 0] + abc[i+1][2], dp[i, 1] + abc[i+1][2])\n\nprint((max(dp[N-1, :])))","target":"N = int(eval(input()))\n\nabc = []\n\nfor i in range(N):\n\n    data = list(map(int, input().split()))\n\n    abc.append(data)\n\n\n\ndp = [[0 for i in range(3)] for j in range(N)]\n\ndp[0][0] = abc[0][0]\n\ndp[0][1] = abc[0][1]\n\ndp[0][2] = abc[0][2]\n\n\n\nfor i in range(N-1):\n\n    for j in range(3):\n\n        if j == 0:\n\n            dp[i+1][1] = max(dp[i][0] + abc[i+1][1], dp[i+1][1])\n\n            dp[i+1][2] = max(dp[i][0] + abc[i+1][2], dp[i+1][2])\n\n        if j == 1:\n\n            dp[i+1][0] = max(dp[i][1] + abc[i+1][0], dp[i+1][0])\n\n            dp[i+1][2] = max(dp[i][1] + abc[i+1][2], dp[i+1][2])\n\n        if j == 2:\n\n            dp[i+1][1] = max(dp[i][2] + abc[i+1][1], dp[i+1][1])\n\n            dp[i+1][0] = max(dp[i][2] + abc[i+1][0], dp[i+1][0])\n\n\n\nprint((max(dp[N-1])))","code_v0_loc":13,"code_v1_loc":24,"code_v0_num_chars":472,"code_v1_num_chars":755,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nabc = []\nfor i in range(N):\n    abc.append(list(map(int, input().split())))\ndp = np.zeros(shape=(N, 3), dtype=int)\ndp[0, :] = abc[0]\nfor i in range(N - 1):\n    dp[i + 1, 0] = max(dp[i + 1, 0], dp[i, 1] + abc[i + 1][0], dp[i, 2] + abc[i + 1][0])\n    dp[i + 1, 1] = max(dp[i + 1, 1], dp[i, 0] + abc[i + 1][1], dp[i, 2] + abc[i + 1][1])\n    dp[i + 1, 2] = max(dp[i + 1, 2], dp[i, 0] + abc[i + 1][2], dp[i, 1] + abc[i + 1][2])\nprint((max(dp[N - 1, :])))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nabc = []\nfor i in range(N):\n    data = list(map(int, input().split()))\n    abc.append(data)\ndp = [[0 for i in range(3)] for j in range(N)]\ndp[0][0] = abc[0][0]\ndp[0][1] = abc[0][1]\ndp[0][2] = abc[0][2]\nfor i in range(N - 1):\n    for j in range(3):\n        if j == 0:\n            dp[i + 1][1] = max(dp[i][0] + abc[i + 1][1], dp[i + 1][1])\n            dp[i + 1][2] = max(dp[i][0] + abc[i + 1][2], dp[i + 1][2])\n        if j == 1:\n            dp[i + 1][0] = max(dp[i][1] + abc[i + 1][0], dp[i + 1][0])\n            dp[i + 1][2] = max(dp[i][1] + abc[i + 1][2], dp[i + 1][2])\n        if j == 2:\n            dp[i + 1][1] = max(dp[i][2] + abc[i + 1][1], dp[i + 1][1])\n            dp[i + 1][0] = max(dp[i][2] + abc[i + 1][0], dp[i + 1][0])\nprint((max(dp[N - 1])))\n","code_same":false,"relative_loc_diff_percent":45.8333333333,"diff":["-import numpy as np","-","-    abc.append(list(map(int, input().split())))","-dp = np.zeros(shape=(N, 3), dtype=int)","-dp[0, :] = abc[0]","+    data = list(map(int, input().split()))","+    abc.append(data)","+dp = [[0 for i in range(3)] for j in range(N)]","+dp[0][0] = abc[0][0]","+dp[0][1] = abc[0][1]","+dp[0][2] = abc[0][2]","-    dp[i + 1, 0] = max(dp[i + 1, 0], dp[i, 1] + abc[i + 1][0], dp[i, 2] + abc[i + 1][0])","-    dp[i + 1, 1] = max(dp[i + 1, 1], dp[i, 0] + abc[i + 1][1], dp[i, 2] + abc[i + 1][1])","-    dp[i + 1, 2] = max(dp[i + 1, 2], dp[i, 0] + abc[i + 1][2], dp[i, 1] + abc[i + 1][2])","-print((max(dp[N - 1, :])))","+    for j in range(3):","+        if j == 0:","+            dp[i + 1][1] = max(dp[i][0] + abc[i + 1][1], dp[i + 1][1])","+            dp[i + 1][2] = max(dp[i][0] + abc[i + 1][2], dp[i + 1][2])","+        if j == 1:","+            dp[i + 1][0] = max(dp[i][1] + abc[i + 1][0], dp[i + 1][0])","+            dp[i + 1][2] = max(dp[i][1] + abc[i + 1][2], dp[i + 1][2])","+        if j == 2:","+            dp[i + 1][1] = max(dp[i][2] + abc[i + 1][1], dp[i + 1][1])","+            dp[i + 1][0] = max(dp[i][2] + abc[i + 1][0], dp[i + 1][0])","+print((max(dp[N - 1])))"],"diff_only_import_comment":false,"measured_runtime_v0":1.3918258445,"measured_runtime_v1":0.1973543379,"runtime_lift":7.0524208338,"key":["s060379978","s122581978"]}
{"user_id":"u272075541","problem_id":"p02767","language":"python","submission_id_v0":"s628544873","submission_id_v1":"s617455512","cpu_time_v0":325,"cpu_time_v1":158,"memory_v0":21516,"memory_v1":13284,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":51.38,"input":"import numpy as np\n\nn = int(eval(input()))\n\na = np.array(input().split(), np.int)\n\na.sort()\n\n\n\nans = []\n\nfor x in range(a[0], a[-1]+1):\n\n    ans.append(np.sum((a - x) ** 2))\n\n\n\nprint((min(ans)))","target":"from decimal import Decimal, ROUND_HALF_UP\n\nimport numpy as np\n\nn = int(eval(input()))\n\nx = np.array(input().split(), int)\n\n\n\nm = Decimal(np.sum(x) \/ n)\n\nmq = int(m.quantize(0, rounding=ROUND_HALF_UP))\n\n\n\ns = np.sum((x-mq)**2)\n\nprint(s)","code_v0_loc":10,"code_v1_loc":10,"code_v0_num_chars":186,"code_v1_num_chars":230,"code_v0_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\na = np.array(input().split(), np.int)\na.sort()\nans = []\nfor x in range(a[0], a[-1] + 1):\n    ans.append(np.sum((a - x) ** 2))\nprint((min(ans)))\n","code_v1_no_empty_lines":"from decimal import Decimal, ROUND_HALF_UP\nimport numpy as np\n\nn = int(eval(input()))\nx = np.array(input().split(), int)\nm = Decimal(np.sum(x) \/ n)\nmq = int(m.quantize(0, rounding=ROUND_HALF_UP))\ns = np.sum((x - mq) ** 2)\nprint(s)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["+from decimal import Decimal, ROUND_HALF_UP","-a = np.array(input().split(), np.int)","-a.sort()","-ans = []","-for x in range(a[0], a[-1] + 1):","-    ans.append(np.sum((a - x) ** 2))","-print((min(ans)))","+x = np.array(input().split(), int)","+m = Decimal(np.sum(x) \/ n)","+mq = int(m.quantize(0, rounding=ROUND_HALF_UP))","+s = np.sum((x - mq) ** 2)","+print(s)"],"diff_only_import_comment":false,"measured_runtime_v0":2.7178692944,"measured_runtime_v1":2.1309513599,"runtime_lift":1.2754253079,"key":["s628544873","s617455512"]}
{"user_id":"u883040023","problem_id":"p02994","language":"python","submission_id_v0":"s336365694","submission_id_v1":"s043859026","cpu_time_v0":170,"cpu_time_v1":17,"memory_v0":13596,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":90.0,"input":"N , L = list(map(int , input().split()))\n\n\n\napple_taste = []\n\n\n\nfor i in range(N):\n\n    taste = L + i + 1 - 1\n\n    apple_taste.append(taste)\n\n    \n\nimport numpy as np\n\n\n\nabs_apple_taste = np.abs(apple_taste)\n\nm = min(abs_apple_taste)\n\n\n\nfor j in range(N):\n\n    if m == abs_apple_taste[j]:\n\n        apple_taste.remove(apple_taste[j])\n\n\n\npie_taste = 0       \n\n\n\nfor k in range(N-1):\n\n    pie_taste += apple_taste[k]\n\n    \n\nprint(pie_taste)","target":"n,l = list(map(int,input().split()))\n\nans = l\n\neat = l\n\n\n\nfor i in range(n-1):\n\n    l += 1\n\n    ans += l\n\n    \n\n    if abs(l) < abs(eat):\n\n        eat = l\n\n        \n\nprint((ans-eat))","code_v0_loc":23,"code_v1_loc":12,"code_v0_num_chars":431,"code_v1_num_chars":174,"code_v0_no_empty_lines":"N, L = list(map(int, input().split()))\napple_taste = []\nfor i in range(N):\n    taste = L + i + 1 - 1\n    apple_taste.append(taste)\nimport numpy as np\n\nabs_apple_taste = np.abs(apple_taste)\nm = min(abs_apple_taste)\nfor j in range(N):\n    if m == abs_apple_taste[j]:\n        apple_taste.remove(apple_taste[j])\npie_taste = 0\nfor k in range(N - 1):\n    pie_taste += apple_taste[k]\nprint(pie_taste)\n","code_v1_no_empty_lines":"n, l = list(map(int, input().split()))\nans = l\neat = l\nfor i in range(n - 1):\n    l += 1\n    ans += l\n    if abs(l) < abs(eat):\n        eat = l\nprint((ans - eat))\n","code_same":false,"relative_loc_diff_percent":47.8260869565,"diff":["-N, L = list(map(int, input().split()))","-apple_taste = []","-for i in range(N):","-    taste = L + i + 1 - 1","-    apple_taste.append(taste)","-import numpy as np","-","-abs_apple_taste = np.abs(apple_taste)","-m = min(abs_apple_taste)","-for j in range(N):","-    if m == abs_apple_taste[j]:","-        apple_taste.remove(apple_taste[j])","-pie_taste = 0","-for k in range(N - 1):","-    pie_taste += apple_taste[k]","-print(pie_taste)","+n, l = list(map(int, input().split()))","+ans = l","+eat = l","+for i in range(n - 1):","+    l += 1","+    ans += l","+    if abs(l) < abs(eat):","+        eat = l","+print((ans - eat))"],"diff_only_import_comment":false,"measured_runtime_v0":1.8756559513,"measured_runtime_v1":0.2713351281,"runtime_lift":6.9126911968,"key":["s336365694","s043859026"]}
{"user_id":"u740909619","problem_id":"p02899","language":"python","submission_id_v0":"s813753303","submission_id_v1":"s285228953","cpu_time_v0":787,"cpu_time_v1":104,"memory_v0":23376,"memory_v1":14008,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":86.79,"input":"# C - Go to School\n\ndef main():\n\n    import numpy as np\n\n    n = int(input())\n\n    a = list(map(int, input().split()))\n\n    a = np.array(a)\n\n    a = np.argsort(a)\n\n    for i in a:\n\n        print(i+1,end=\" \")\n\n\n\nif __name__ ==  \"__main__\":\n\n    main()\n","target":"# C - Go to School\n\ndef main():\n\n    n = int(eval(input()))\n\n    a = list(map(int, input().split()))\n\n    ans = [0] * n\n\n\n\n    for i, o in enumerate(a):\n\n        ans[o-1] = i + 1 \n\n    \n\n    print((*ans))\n\n\n\nif __name__ ==  \"__main__\":\n\n    main()","code_v0_loc":12,"code_v1_loc":13,"code_v0_num_chars":250,"code_v1_num_chars":239,"code_v0_no_empty_lines":"# C - Go to School\ndef main():\n    import numpy as np\n\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = np.array(a)\n    a = np.argsort(a)\n    for i in a:\n        print(i + 1, end=\" \")\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"# C - Go to School\ndef main():\n    n = int(eval(input()))\n    a = list(map(int, input().split()))\n    ans = [0] * n\n    for i, o in enumerate(a):\n        ans[o - 1] = i + 1\n    print((*ans))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":7.6923076923,"diff":["-    import numpy as np","-","-    n = int(input())","+    n = int(eval(input()))","-    a = np.array(a)","-    a = np.argsort(a)","-    for i in a:","-        print(i + 1, end=\" \")","+    ans = [0] * n","+    for i, o in enumerate(a):","+        ans[o - 1] = i + 1","+    print((*ans))"],"diff_only_import_comment":false,"measured_runtime_v0":0.7626473089,"measured_runtime_v1":0.1551200287,"runtime_lift":4.9164979856,"key":["s813753303","s285228953"]}
{"user_id":"u426534722","problem_id":"p02245","language":"python","submission_id_v0":"s237914915","submission_id_v1":"s694650984","cpu_time_v0":730,"cpu_time_v1":50,"memory_v0":25688,"memory_v1":8488,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":93.15,"input":"from collections import deque\n\nN = 3\n\nm = {8: {7, 5}, 7: {8, 6, 4}, 6: {7, 3}, 5: {8, 4, 2}, 4: {7, 5, 3, 1}, 3: {6, 4, 0}, 2: {5, 1}, 1: {4, 2, 0},\n\n     0: {3, 1}}\n\ngoal = 123456780\n\ndef g(i, j, a):\n\n    t = a \/\/ (10 ** j) % 10\n\n    return a - t * (10 ** j) + t * (10 ** i)\n\ndef solve():\n\n    MAP = \"\".join(input().replace(\" \", \"\") for _ in range(N))\n\n    start = 8 - MAP.find(\"0\")\n\n    MAP = int(MAP)\n\n    if MAP == goal:\n\n        return 0\n\n    dp = deque([(0, start, MAP)])\n\n    LOG = {MAP}\n\n    while dp:\n\n        cnt, yx, M = dp.popleft()\n\n        if M == goal:\n\n            return cnt\n\n        cnt += 1\n\n        for nyx in m[yx]:\n\n            CM = g(yx, nyx, M)\n\n            if not CM in LOG:\n\n                dp.append((cnt, nyx, CM))\n\n                LOG.add(CM)\n\ndef MAIN():\n\n    print((solve()))\n\nMAIN()\n\n\n","target":"from collections import deque\n\nN = 3\n\nm = {8: {7, 5}, 7: {8, 6, 4}, 6: {7, 3}, 5: {8, 4, 2}, 4: {7, 5, 3, 1}, 3: {6, 4, 0}, 2: {5, 1}, 1: {4, 2, 0},\n\n     0: {3, 1}}\n\ngoal = 123456780\n\ndef g(i, j, a):\n\n    t = a \/\/ (10 ** j) % 10\n\n    return a - t * (10 ** j) + t * (10 ** i)\n\ndef solve():\n\n    MAP = \"\".join(input().replace(\" \", \"\") for _ in range(N))\n\n    zero = 8 - MAP.find(\"0\")\n\n    start = int(MAP)\n\n    if start == goal:\n\n        return 0\n\n    dp = deque([(0, start, zero, 1), (0, goal, 0, 0)])\n\n    TABLE = {start: (1, 0), goal: (0, 0)}\n\n    while dp:\n\n        cnt, M, yx, flg = dp.popleft()\n\n        cnt += 1\n\n        for nyx in m[yx]:\n\n            key = g(yx, nyx, M)\n\n            if key in TABLE:\n\n                if TABLE[key][0] != flg:\n\n                    return TABLE[key][1] + cnt\n\n                continue\n\n            TABLE[key] = (flg, cnt)\n\n            dp.append((cnt, key, nyx, flg))\n\ndef MAIN():\n\n    print((solve()))\n\nMAIN()\n\n\n","code_v0_loc":30,"code_v1_loc":31,"code_v0_num_chars":815,"code_v1_num_chars":949,"code_v0_no_empty_lines":"from collections import deque\n\nN = 3\nm = {\n    8: {7, 5},\n    7: {8, 6, 4},\n    6: {7, 3},\n    5: {8, 4, 2},\n    4: {7, 5, 3, 1},\n    3: {6, 4, 0},\n    2: {5, 1},\n    1: {4, 2, 0},\n    0: {3, 1},\n}\ngoal = 123456780\n\n\ndef g(i, j, a):\n    t = a \/\/ (10**j) % 10\n    return a - t * (10**j) + t * (10**i)\n\n\ndef solve():\n    MAP = \"\".join(input().replace(\" \", \"\") for _ in range(N))\n    start = 8 - MAP.find(\"0\")\n    MAP = int(MAP)\n    if MAP == goal:\n        return 0\n    dp = deque([(0, start, MAP)])\n    LOG = {MAP}\n    while dp:\n        cnt, yx, M = dp.popleft()\n        if M == goal:\n            return cnt\n        cnt += 1\n        for nyx in m[yx]:\n            CM = g(yx, nyx, M)\n            if not CM in LOG:\n                dp.append((cnt, nyx, CM))\n                LOG.add(CM)\n\n\ndef MAIN():\n    print((solve()))\n\n\nMAIN()\n","code_v1_no_empty_lines":"from collections import deque\n\nN = 3\nm = {\n    8: {7, 5},\n    7: {8, 6, 4},\n    6: {7, 3},\n    5: {8, 4, 2},\n    4: {7, 5, 3, 1},\n    3: {6, 4, 0},\n    2: {5, 1},\n    1: {4, 2, 0},\n    0: {3, 1},\n}\ngoal = 123456780\n\n\ndef g(i, j, a):\n    t = a \/\/ (10**j) % 10\n    return a - t * (10**j) + t * (10**i)\n\n\ndef solve():\n    MAP = \"\".join(input().replace(\" \", \"\") for _ in range(N))\n    zero = 8 - MAP.find(\"0\")\n    start = int(MAP)\n    if start == goal:\n        return 0\n    dp = deque([(0, start, zero, 1), (0, goal, 0, 0)])\n    TABLE = {start: (1, 0), goal: (0, 0)}\n    while dp:\n        cnt, M, yx, flg = dp.popleft()\n        cnt += 1\n        for nyx in m[yx]:\n            key = g(yx, nyx, M)\n            if key in TABLE:\n                if TABLE[key][0] != flg:\n                    return TABLE[key][1] + cnt\n                continue\n            TABLE[key] = (flg, cnt)\n            dp.append((cnt, key, nyx, flg))\n\n\ndef MAIN():\n    print((solve()))\n\n\nMAIN()\n","code_same":false,"relative_loc_diff_percent":3.2258064516,"diff":["-    start = 8 - MAP.find(\"0\")","-    MAP = int(MAP)","-    if MAP == goal:","+    zero = 8 - MAP.find(\"0\")","+    start = int(MAP)","+    if start == goal:","-    dp = deque([(0, start, MAP)])","-    LOG = {MAP}","+    dp = deque([(0, start, zero, 1), (0, goal, 0, 0)])","+    TABLE = {start: (1, 0), goal: (0, 0)}","-        cnt, yx, M = dp.popleft()","-        if M == goal:","-            return cnt","+        cnt, M, yx, flg = dp.popleft()","-            CM = g(yx, nyx, M)","-            if not CM in LOG:","-                dp.append((cnt, nyx, CM))","-                LOG.add(CM)","+            key = g(yx, nyx, M)","+            if key in TABLE:","+                if TABLE[key][0] != flg:","+                    return TABLE[key][1] + cnt","+                continue","+            TABLE[key] = (flg, cnt)","+            dp.append((cnt, key, nyx, flg))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2854871392,"measured_runtime_v1":0.2155938864,"runtime_lift":1.3241894008,"key":["s237914915","s694650984"]}
{"user_id":"u562935282","problem_id":"p03371","language":"python","submission_id_v0":"s168362535","submission_id_v1":"s471284270","cpu_time_v0":242,"cpu_time_v1":98,"memory_v0":3060,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":59.5,"input":"inf = (5000 * 10 ** 5) * 3\n\n\n\na, b, c, x, y = list(map(int, input().split()))\n\n\n\nret = inf\n\nfor cnt_ab in range(max(x, y) * 2 + 1):\n\n    d = cnt_ab \/\/ 2\n\n\n\n    cnt_a = max(0, x - d)\n\n    cnt_b = max(0, y - d)\n\n\n\n    t = cnt_ab * c + cnt_a * a + cnt_b * b\n\n    ret = min(ret, t)\n\nprint(ret)\n","target":"def main():\n\n    A, B, AB, X, Y = list(map(int, input().split()))\n\n    M = max(X, Y)\n\n\n\n    k = 0\n\n    ans = A * X + B * Y\n\n    while True:\n\n        ans = min(\n\n            ans,\n\n            AB * k * 2 + max(0, X - k) * A + max(0, Y - k) * B\n\n        )\n\n\n\n        if k >= M: break\n\n        k += 1\n\n\n\n    print(ans)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":14,"code_v1_loc":20,"code_v0_num_chars":284,"code_v1_num_chars":353,"code_v0_no_empty_lines":"inf = (5000 * 10**5) * 3\na, b, c, x, y = list(map(int, input().split()))\nret = inf\nfor cnt_ab in range(max(x, y) * 2 + 1):\n    d = cnt_ab \/\/ 2\n    cnt_a = max(0, x - d)\n    cnt_b = max(0, y - d)\n    t = cnt_ab * c + cnt_a * a + cnt_b * b\n    ret = min(ret, t)\nprint(ret)\n","code_v1_no_empty_lines":"def main():\n    A, B, AB, X, Y = list(map(int, input().split()))\n    M = max(X, Y)\n    k = 0\n    ans = A * X + B * Y\n    while True:\n        ans = min(ans, AB * k * 2 + max(0, X - k) * A + max(0, Y - k) * B)\n        if k >= M:\n            break\n        k += 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":30.0,"diff":["-inf = (5000 * 10**5) * 3","-a, b, c, x, y = list(map(int, input().split()))","-ret = inf","-for cnt_ab in range(max(x, y) * 2 + 1):","-    d = cnt_ab \/\/ 2","-    cnt_a = max(0, x - d)","-    cnt_b = max(0, y - d)","-    t = cnt_ab * c + cnt_a * a + cnt_b * b","-    ret = min(ret, t)","-print(ret)","+def main():","+    A, B, AB, X, Y = list(map(int, input().split()))","+    M = max(X, Y)","+    k = 0","+    ans = A * X + B * Y","+    while True:","+        ans = min(ans, AB * k * 2 + max(0, X - k) * A + max(0, Y - k) * B)","+        if k >= M:","+            break","+        k += 1","+    print(ans)","+","+","+if __name__ == \"__main__\":","+    main()"],"diff_only_import_comment":false,"measured_runtime_v0":0.4937371187,"measured_runtime_v1":0.3021148317,"runtime_lift":1.6342697111,"key":["s168362535","s471284270"]}
{"user_id":"u349449706","problem_id":"p02555","language":"python","submission_id_v0":"s796837031","submission_id_v1":"s077713004","cpu_time_v0":96,"cpu_time_v1":64,"memory_v0":68168,"memory_v1":63448,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":33.33,"input":"S = int(eval(input()))\n\nf = [0]*(S+1)\n\nf[0] = 1\n\nif S >= 3: f[3] = 1\n\nif S >= 4: f[4] = 1\n\nif S >= 5: f[5] = 1\n\nfor i in range(6, S+1):\n\n    f[i] = sum(f[i-j] for j in range(3, i+1))%(10**9+7)\n\nprint((f[S]))\n","target":"S=int(eval(input()))\n\nf=[1,0,0]\n\nfor i in range(S-2):f.append(f[i]+f[i+2])\n\nprint((f[S]%(10**9+7)))\n","code_v0_loc":9,"code_v1_loc":4,"code_v0_num_chars":200,"code_v1_num_chars":92,"code_v0_no_empty_lines":"S = int(eval(input()))\nf = [0] * (S + 1)\nf[0] = 1\nif S >= 3:\n    f[3] = 1\nif S >= 4:\n    f[4] = 1\nif S >= 5:\n    f[5] = 1\nfor i in range(6, S + 1):\n    f[i] = sum(f[i - j] for j in range(3, i + 1)) % (10**9 + 7)\nprint((f[S]))\n","code_v1_no_empty_lines":"S = int(eval(input()))\nf = [1, 0, 0]\nfor i in range(S - 2):\n    f.append(f[i] + f[i + 2])\nprint((f[S] % (10**9 + 7)))\n","code_same":false,"relative_loc_diff_percent":55.5555555556,"diff":["-f = [0] * (S + 1)","-f[0] = 1","-if S >= 3:","-    f[3] = 1","-if S >= 4:","-    f[4] = 1","-if S >= 5:","-    f[5] = 1","-for i in range(6, S + 1):","-    f[i] = sum(f[i - j] for j in range(3, i + 1)) % (10**9 + 7)","-print((f[S]))","+f = [1, 0, 0]","+for i in range(S - 2):","+    f.append(f[i] + f[i + 2])","+print((f[S] % (10**9 + 7)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.5486869376,"measured_runtime_v1":0.341561399,"runtime_lift":1.6064079231,"key":["s796837031","s077713004"]}
{"user_id":"u296518383","problem_id":"p03806","language":"python","submission_id_v0":"s823150149","submission_id_v1":"s174409855","cpu_time_v0":255,"cpu_time_v1":220,"memory_v0":44124,"memory_v1":43356,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":13.73,"input":"import sys\n\ninput = sys.stdin.buffer.readline\n\n\n\nN, Ma, Mb = list(map(int, input().split()))\n\nABC = [list(map(int, input().split())) for _ in range(N)]\n\n\n\nINF = 10 ** 15\n\ndp = [[INF for j in range(401)] for i in range(401)]\n\ndp[0][0] = 0\n\n\n\nfor a, b, c in ABC:\n\n  for i in range(400, -1, -1):\n\n    for j in range(400, -1, -1):\n\n      if dp[i][j] != INF:\n\n        dp[i + a][j + b] = min(dp[i + a][j + b], dp[i][j] + c)\n\n\n\nanswer = INF\n\nfor i in range(1, 401):\n\n  for j in range(1, 401):\n\n    if dp[i][j] != INF and i \/ j == Ma \/ Mb:\n\n      answer = min(answer, dp[i][j])\n\n      \n\nprint((answer if answer != INF else -1))","target":"import sys\n\ninput = sys.stdin.buffer.readline\n\n\n\nN, Ma, Mb = list(map(int, input().split()))\n\nABC = [list(map(int, input().split())) for _ in range(N)]\n\n\n\nsumA = sum([ABC[i][0] for i in range(N)])\n\nsumB = sum([ABC[i][1] for i in range(N)])\n\n\n\nINF = 10 ** 15\n\ndp = [[INF for j in range(sumB + 1)] for i in range(sumA + 1)]\n\ndp[0][0] = 0\n\n\n\nfor a, b, c in ABC:\n\n  for i in range(sumA, -1, -1):\n\n    for j in range(sumB, -1, -1):\n\n      if dp[i][j] != INF:\n\n        dp[i + a][j + b] = min(dp[i + a][j + b], dp[i][j] + c)\n\n\n\nanswer = INF\n\nfor i in range(1, sumA + 1):\n\n  for j in range(1, sumB + 1):\n\n    if dp[i][j] != INF and i \/ j == Ma \/ Mb:\n\n      answer = min(answer, dp[i][j])\n\n      \n\nprint((answer if answer != INF else -1))","code_v0_loc":23,"code_v1_loc":26,"code_v0_num_chars":611,"code_v1_num_chars":721,"code_v0_no_empty_lines":"import sys\n\ninput = sys.stdin.buffer.readline\nN, Ma, Mb = list(map(int, input().split()))\nABC = [list(map(int, input().split())) for _ in range(N)]\nINF = 10**15\ndp = [[INF for j in range(401)] for i in range(401)]\ndp[0][0] = 0\nfor a, b, c in ABC:\n    for i in range(400, -1, -1):\n        for j in range(400, -1, -1):\n            if dp[i][j] != INF:\n                dp[i + a][j + b] = min(dp[i + a][j + b], dp[i][j] + c)\nanswer = INF\nfor i in range(1, 401):\n    for j in range(1, 401):\n        if dp[i][j] != INF and i \/ j == Ma \/ Mb:\n            answer = min(answer, dp[i][j])\nprint((answer if answer != INF else -1))\n","code_v1_no_empty_lines":"import sys\n\ninput = sys.stdin.buffer.readline\nN, Ma, Mb = list(map(int, input().split()))\nABC = [list(map(int, input().split())) for _ in range(N)]\nsumA = sum([ABC[i][0] for i in range(N)])\nsumB = sum([ABC[i][1] for i in range(N)])\nINF = 10**15\ndp = [[INF for j in range(sumB + 1)] for i in range(sumA + 1)]\ndp[0][0] = 0\nfor a, b, c in ABC:\n    for i in range(sumA, -1, -1):\n        for j in range(sumB, -1, -1):\n            if dp[i][j] != INF:\n                dp[i + a][j + b] = min(dp[i + a][j + b], dp[i][j] + c)\nanswer = INF\nfor i in range(1, sumA + 1):\n    for j in range(1, sumB + 1):\n        if dp[i][j] != INF and i \/ j == Ma \/ Mb:\n            answer = min(answer, dp[i][j])\nprint((answer if answer != INF else -1))\n","code_same":false,"relative_loc_diff_percent":11.5384615385,"diff":["+sumA = sum([ABC[i][0] for i in range(N)])","+sumB = sum([ABC[i][1] for i in range(N)])","-dp = [[INF for j in range(401)] for i in range(401)]","+dp = [[INF for j in range(sumB + 1)] for i in range(sumA + 1)]","-    for i in range(400, -1, -1):","-        for j in range(400, -1, -1):","+    for i in range(sumA, -1, -1):","+        for j in range(sumB, -1, -1):","-for i in range(1, 401):","-    for j in range(1, 401):","+for i in range(1, sumA + 1):","+    for j in range(1, sumB + 1):"],"diff_only_import_comment":false,"measured_runtime_v0":0.8101779278,"measured_runtime_v1":0.2126889092,"runtime_lift":3.8092156792,"key":["s823150149","s174409855"]}
{"user_id":"u064505481","problem_id":"p02555","language":"python","submission_id_v0":"s988049268","submission_id_v1":"s031685542","cpu_time_v0":173,"cpu_time_v1":74,"memory_v0":76464,"memory_v1":70408,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":57.23,"input":"from sys import stdin, stdout, setrecursionlimit\n\nfrom collections import deque, defaultdict, Counter\n\nfrom heapq import heappush, heappop\n\nfrom functools import lru_cache\n\nimport math\n\n\n\nsetrecursionlimit(10**6)\n\nrl = lambda: stdin.readline()\n\nrll = lambda: stdin.readline().split()\n\nrli = lambda: list(map(int, stdin.readline().split()))\n\nrlf = lambda: list(map(float, stdin.readline().split()))\n\n\n\nINF, NINF = float('inf'), float('-inf')\n\nMOD = 10**9 + 7\n\n\n\ndef main():\n\n\ts = int(rl())\n\n\n\n\t@lru_cache(None)\n\n\tdef dp(currsum):\n\n\t\tif currsum == s: return 1\n\n\t\tcnt = 0\n\n\t\tfor d in range(3, 2001):\n\n\t\t\tif currsum + d <= s:\n\n\t\t\t\tcnt += dp(currsum + d)\n\n\t\t\t\tcnt %= MOD \n\n\t\treturn cnt\n\n\tprint((dp(0)))\n\n\tstdout.close()\n\n\n\nif __name__ == \"__main__\":\n\n\tmain()","target":"from sys import stdin, stdout, setrecursionlimit\n\nfrom collections import deque, defaultdict, Counter\n\nfrom heapq import heappush, heappop\n\nfrom functools import lru_cache\n\nimport math\n\n\n\n#setrecursionlimit(10**6)\n\nrl = lambda: stdin.readline()\n\nrll = lambda: stdin.readline().split()\n\nrli = lambda: list(map(int, stdin.readline().split()))\n\nrlf = lambda: list(map(float, stdin.readline().split()))\n\n\n\nINF, NINF = float('inf'), float('-inf')\n\nMOD = 10**9 + 7\n\n\n\ndef main():\n\n\ts = int(rl())\n\n\n\n\tdef binom_tables(n, q):\n\n\t\tfact = [1 for _ in range(n + 1)]\n\n\t\tinv = [1 for _ in range(n + 1)]\n\n\t\tfor i in range(1, n+1):\n\n\t\t\tfact[i] = (fact[i-1] * i) % q\n\n\t\t\tinv[i] = pow(fact[i], q-2, q)\n\n\t\treturn fact, inv\n\n\n\n\tF, I = binom_tables(s + 700, MOD)\n\n\n\n\tdef binom(n, k, q):\n\n\t\treturn (F[n]*((I[k]*I[n-k])%q))%q\n\n\n\n\tans = 0\n\n\tfor r in range(1, 700):\n\n\t\tobjects = s - 3*r\n\n\t\tif objects + r - 1 < objects or objects < 0: \n\n\t\t\tbreak\n\n\t\tx = binom(objects + r - 1, objects, MOD)\n\n\t\tans += x\n\n\t\tans %= MOD \n\n\n\n\tprint(ans)\n\n\tstdout.close()\n\n\n\nif __name__ == \"__main__\":\n\n\tmain()","code_v0_loc":32,"code_v1_loc":45,"code_v0_num_chars":739,"code_v1_num_chars":1050,"code_v0_no_empty_lines":"from sys import stdin, stdout, setrecursionlimit\nfrom collections import deque, defaultdict, Counter\nfrom heapq import heappush, heappop\nfrom functools import lru_cache\nimport math\n\nsetrecursionlimit(10**6)\nrl = lambda: stdin.readline()\nrll = lambda: stdin.readline().split()\nrli = lambda: list(map(int, stdin.readline().split()))\nrlf = lambda: list(map(float, stdin.readline().split()))\nINF, NINF = float(\"inf\"), float(\"-inf\")\nMOD = 10**9 + 7\n\n\ndef main():\n    s = int(rl())\n\n    @lru_cache(None)\n    def dp(currsum):\n        if currsum == s:\n            return 1\n        cnt = 0\n        for d in range(3, 2001):\n            if currsum + d <= s:\n                cnt += dp(currsum + d)\n                cnt %= MOD\n        return cnt\n\n    print((dp(0)))\n    stdout.close()\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"from sys import stdin, stdout, setrecursionlimit\nfrom collections import deque, defaultdict, Counter\nfrom heapq import heappush, heappop\nfrom functools import lru_cache\nimport math\n\n# setrecursionlimit(10**6)\nrl = lambda: stdin.readline()\nrll = lambda: stdin.readline().split()\nrli = lambda: list(map(int, stdin.readline().split()))\nrlf = lambda: list(map(float, stdin.readline().split()))\nINF, NINF = float(\"inf\"), float(\"-inf\")\nMOD = 10**9 + 7\n\n\ndef main():\n    s = int(rl())\n\n    def binom_tables(n, q):\n        fact = [1 for _ in range(n + 1)]\n        inv = [1 for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            fact[i] = (fact[i - 1] * i) % q\n            inv[i] = pow(fact[i], q - 2, q)\n        return fact, inv\n\n    F, I = binom_tables(s + 700, MOD)\n\n    def binom(n, k, q):\n        return (F[n] * ((I[k] * I[n - k]) % q)) % q\n\n    ans = 0\n    for r in range(1, 700):\n        objects = s - 3 * r\n        if objects + r - 1 < objects or objects < 0:\n            break\n        x = binom(objects + r - 1, objects, MOD)\n        ans += x\n        ans %= MOD\n    print(ans)\n    stdout.close()\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":28.8888888889,"diff":["-setrecursionlimit(10**6)","+# setrecursionlimit(10**6)","-    @lru_cache(None)","-    def dp(currsum):","-        if currsum == s:","-            return 1","-        cnt = 0","-        for d in range(3, 2001):","-            if currsum + d <= s:","-                cnt += dp(currsum + d)","-                cnt %= MOD","-        return cnt","+    def binom_tables(n, q):","+        fact = [1 for _ in range(n + 1)]","+        inv = [1 for _ in range(n + 1)]","+        for i in range(1, n + 1):","+            fact[i] = (fact[i - 1] * i) % q","+            inv[i] = pow(fact[i], q - 2, q)","+        return fact, inv","-    print((dp(0)))","+    F, I = binom_tables(s + 700, MOD)","+","+    def binom(n, k, q):","+        return (F[n] * ((I[k] * I[n - k]) % q)) % q","+","+    ans = 0","+    for r in range(1, 700):","+        objects = s - 3 * r","+        if objects + r - 1 < objects or objects < 0:","+            break","+        x = binom(objects + r - 1, objects, MOD)","+        ans += x","+        ans %= MOD","+    print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":0.7214400458,"measured_runtime_v1":0.2090635548,"runtime_lift":3.4508168897,"key":["s988049268","s031685542"]}
{"user_id":"u752898745","problem_id":"p03307","language":"python","submission_id_v0":"s632972821","submission_id_v1":"s560495025","cpu_time_v0":37,"cpu_time_v1":17,"memory_v0":5304,"memory_v1":2940,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":54.05,"input":"import fractions\n\nn=int(eval(input()))\n\nprint(((2*n)\/\/fractions.gcd(2,n)))","target":"N=int(eval(input()));print((N if N%2==0 else N*2))","code_v0_loc":3,"code_v1_loc":1,"code_v0_num_chars":66,"code_v1_num_chars":42,"code_v0_no_empty_lines":"import fractions\n\nn = int(eval(input()))\nprint(((2 * n) \/\/ fractions.gcd(2, n)))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nprint((N if N % 2 == 0 else N * 2))\n","code_same":false,"relative_loc_diff_percent":66.6666666667,"diff":["-import fractions","-","-n = int(eval(input()))","-print(((2 * n) \/\/ fractions.gcd(2, n)))","+N = int(eval(input()))","+print((N if N % 2 == 0 else N * 2))"],"diff_only_import_comment":false,"measured_runtime_v0":0.4506682441,"measured_runtime_v1":0.3598311198,"runtime_lift":1.2524437697,"key":["s632972821","s560495025"]}
{"user_id":"u347640436","problem_id":"p03854","language":"python","submission_id_v0":"s259161069","submission_id_v1":"s688102427","cpu_time_v0":1216,"cpu_time_v1":697,"memory_v0":3420,"memory_v1":3992,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":42.68,"input":"import sys\n\ns = input()\n\nts = ['']\n\nwhile True:\n\n  nts= []\n\n  for t in ts:\n\n    for w in ['dreamer', 'eraser', 'dream', 'erase']:\n\n      if s == t + w:\n\n        print('YES')\n\n        sys.exit()\n\n      if s.startswith(t + w):\n\n        nts.append(t + w)\n\n  if len(nts) == 0:\n\n    print('NO')\n\n    sys.exit()\n\n  ts = nts\n","target":"from sys import exit\n\ns = eval(input())\n\nts = ['']\n\nwhile True:\n\n  nts= []\n\n  for t in ts:\n\n    for w in ['dreamer', 'eraser', 'dream', 'erase']:\n\n      tw = t + w\n\n      if s == tw:\n\n        print('YES')\n\n        exit()\n\n      if s.startswith(tw):\n\n        nts.append(tw)\n\n  if len(nts) == 0:\n\n    print('NO')\n\n    exit()\n\n  ts = nts\n","code_v0_loc":16,"code_v1_loc":17,"code_v0_num_chars":320,"code_v1_num_chars":329,"code_v0_no_empty_lines":"import sys\n\ns = input()\nts = [\"\"]\nwhile True:\n    nts = []\n    for t in ts:\n        for w in [\"dreamer\", \"eraser\", \"dream\", \"erase\"]:\n            if s == t + w:\n                print(\"YES\")\n                sys.exit()\n            if s.startswith(t + w):\n                nts.append(t + w)\n    if len(nts) == 0:\n        print(\"NO\")\n        sys.exit()\n    ts = nts\n","code_v1_no_empty_lines":"from sys import exit\n\ns = eval(input())\nts = [\"\"]\nwhile True:\n    nts = []\n    for t in ts:\n        for w in [\"dreamer\", \"eraser\", \"dream\", \"erase\"]:\n            tw = t + w\n            if s == tw:\n                print(\"YES\")\n                exit()\n            if s.startswith(tw):\n                nts.append(tw)\n    if len(nts) == 0:\n        print(\"NO\")\n        exit()\n    ts = nts\n","code_same":false,"relative_loc_diff_percent":5.8823529412,"diff":["-import sys","+from sys import exit","-s = input()","+s = eval(input())","-            if s == t + w:","+            tw = t + w","+            if s == tw:","-                sys.exit()","-            if s.startswith(t + w):","-                nts.append(t + w)","+                exit()","+            if s.startswith(tw):","+                nts.append(tw)","-        sys.exit()","+        exit()"],"diff_only_import_comment":false,"measured_runtime_v0":0.2929967599,"measured_runtime_v1":0.1979754126,"runtime_lift":1.4799653958,"key":["s259161069","s688102427"]}
{"user_id":"u584658281","problem_id":"p02688","language":"python","submission_id_v0":"s600438109","submission_id_v1":"s928531547","cpu_time_v0":27,"cpu_time_v1":24,"memory_v0":9216,"memory_v1":9264,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":11.11,"input":"N,K=list(map(int,input().split()))\n\na = [[0]*N]*K\n\na = [[0 for n in range(N)] for k in range(K)]\n\n\n\nfor k in range(K):\n\n    d=int(eval(input()))\n\n    have_k=list(map(int,input().split()))\n\n    for h in have_k:\n\n        a[k][h-1]=1\n\n\n\nan=[0]*N\n\nfor k in range(K):\n\n  for n in range(N):\n\n    an[n] = an[n]+a[k][n]\n\n\n\nresult=0\n\nfor i in an:\n\n  if i == 0:\n\n    result+=1\n\n\n\nprint(result)","target":"N,K=list(map(int,input().split()))\n\na = [[0 for n in range(N)] for k in range(K)]\n\n\n\nfor k in range(K):\n\n    d=int(eval(input()))\n\n    have_k=list(map(int,input().split()))\n\n    for h in have_k:\n\n        a[k][h-1]=1\n\n\n\nan=[0]*N\n\nfor k in range(K):\n\n  for n in range(N):\n\n    an[n] = an[n]+a[k][n]\n\n\n\nresult=0\n\nfor i in an:\n\n  if i == 0:\n\n    result+=1\n\n\n\nprint(result)","code_v0_loc":21,"code_v1_loc":20,"code_v0_num_chars":365,"code_v1_num_chars":350,"code_v0_no_empty_lines":"N, K = list(map(int, input().split()))\na = [[0] * N] * K\na = [[0 for n in range(N)] for k in range(K)]\nfor k in range(K):\n    d = int(eval(input()))\n    have_k = list(map(int, input().split()))\n    for h in have_k:\n        a[k][h - 1] = 1\nan = [0] * N\nfor k in range(K):\n    for n in range(N):\n        an[n] = an[n] + a[k][n]\nresult = 0\nfor i in an:\n    if i == 0:\n        result += 1\nprint(result)\n","code_v1_no_empty_lines":"N, K = list(map(int, input().split()))\na = [[0 for n in range(N)] for k in range(K)]\nfor k in range(K):\n    d = int(eval(input()))\n    have_k = list(map(int, input().split()))\n    for h in have_k:\n        a[k][h - 1] = 1\nan = [0] * N\nfor k in range(K):\n    for n in range(N):\n        an[n] = an[n] + a[k][n]\nresult = 0\nfor i in an:\n    if i == 0:\n        result += 1\nprint(result)\n","code_same":false,"relative_loc_diff_percent":4.7619047619,"diff":["-a = [[0] * N] * K"],"diff_only_import_comment":false,"measured_runtime_v0":0.33595281,"measured_runtime_v1":0.2656919487,"runtime_lift":1.264444827,"key":["s600438109","s928531547"]}
{"user_id":"u844646164","problem_id":"p02767","language":"python","submission_id_v0":"s330073490","submission_id_v1":"s440501694","cpu_time_v0":294,"cpu_time_v1":21,"memory_v0":21384,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":92.86,"input":"import numpy as np \n\nn = int(eval(input()))\n\nx = list(map(int, input().split()))\n\nx = np.array(x)\n\nans = float('inf')\n\nidx = 200\n\nfor i in range(100):\n\n  y = x \n\n  ans = min(ans, np.sum((y-i)**2))\n\n  \n\nprint(ans)","target":"N = int(eval(input()))\n\nX = list(map(int, input().split()))\n\nmx = max(X)\n\nans = float('inf')\n\nfor i in range(mx+1):\n\n  tmp = 0\n\n  for x in X:\n\n    tmp += (x-(i+1))**2\n\n  ans = min(ans, tmp)\n\nprint(ans)","code_v0_loc":11,"code_v1_loc":10,"code_v0_num_chars":206,"code_v1_num_chars":195,"code_v0_no_empty_lines":"import numpy as np\n\nn = int(eval(input()))\nx = list(map(int, input().split()))\nx = np.array(x)\nans = float(\"inf\")\nidx = 200\nfor i in range(100):\n    y = x\n    ans = min(ans, np.sum((y - i) ** 2))\nprint(ans)\n","code_v1_no_empty_lines":"N = int(eval(input()))\nX = list(map(int, input().split()))\nmx = max(X)\nans = float(\"inf\")\nfor i in range(mx + 1):\n    tmp = 0\n    for x in X:\n        tmp += (x - (i + 1)) ** 2\n    ans = min(ans, tmp)\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":9.0909090909,"diff":["-import numpy as np","-","-n = int(eval(input()))","-x = list(map(int, input().split()))","-x = np.array(x)","+N = int(eval(input()))","+X = list(map(int, input().split()))","+mx = max(X)","-idx = 200","-for i in range(100):","-    y = x","-    ans = min(ans, np.sum((y - i) ** 2))","+for i in range(mx + 1):","+    tmp = 0","+    for x in X:","+        tmp += (x - (i + 1)) ** 2","+    ans = min(ans, tmp)"],"diff_only_import_comment":false,"measured_runtime_v0":1.4239430195,"measured_runtime_v1":0.19636644,"runtime_lift":7.2514581394,"key":["s330073490","s440501694"]}
{"user_id":"u156896646","problem_id":"p03854","language":"python","submission_id_v0":"s725954700","submission_id_v1":"s400985362","cpu_time_v0":76,"cpu_time_v1":64,"memory_v0":21348,"memory_v1":21348,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":15.79,"input":"import sys\n\nsys.setrecursionlimit(1000000)\n\n\n\nS = eval(input())\n\n\n\nT = ['dream', 'dreamer', 'erase', 'eraser']\n\nlenT = [len(i) for i in T]\n\n\n\ndef dayDream(pin):\n\n    global isDream               #;print('dayDream: ', pin, S[pin:])\n\n    for i, d in enumerate(T):\n\n        #print('d:', d)\n\n        if S[pin:pin+lenT[i]] == d:            \n\n            pout = pin + lenT[i] #; print(d, pout)\n\n            if pout == len(S):                \n\n                isDream = True   #; print('YES')\n\n                return \n\n            else:\n\n                dayDream(pout)\n\n    #print('dayDream return', pin)\n\n    return\n\n    \n\nisDream = False\n\ndayDream(0)\n\nif isDream:\n\n    print('YES')\n\nelse:\n\n    print('NO')","target":"import sys\n\nsys.setrecursionlimit(1000000)\n\n\n\nS = eval(input())\n\n\n\nT = ['dream', 'dreamer', 'erase', 'eraser']\n\nlenT = [len(i) for i in T]\n\n\n\ndef dayDream(pin):\n\n    global isGoal               #;print('dayDream: ', pin, S[pin:])\n\n    for i, d in enumerate(T):\n\n        if isGoal:\n\n            return\n\n        #print('i, d:', i, d)\n\n        if S[pin:pin+lenT[i]] == d:            \n\n            pout = pin + lenT[i] #;print(d, pout)\n\n            if pout == len(S):                \n\n                isGoal = True    #;print('YES')\n\n                return \n\n            else:\n\n                dayDream(pout)\n\n    #print('dayDream return', pin)\n\n    return\n\n    \n\nisGoal = False\n\ndayDream(0)\n\nif isGoal:\n\n    print('YES')\n\nelse:\n\n    print('NO')","code_v0_loc":28,"code_v1_loc":30,"code_v0_num_chars":694,"code_v1_num_chars":735,"code_v0_no_empty_lines":"import sys\n\nsys.setrecursionlimit(1000000)\nS = eval(input())\nT = [\"dream\", \"dreamer\", \"erase\", \"eraser\"]\nlenT = [len(i) for i in T]\n\n\ndef dayDream(pin):\n    global isDream  # ;print('dayDream: ', pin, S[pin:])\n    for i, d in enumerate(T):\n        # print('d:', d)\n        if S[pin : pin + lenT[i]] == d:\n            pout = pin + lenT[i]  # ; print(d, pout)\n            if pout == len(S):\n                isDream = True  # ; print('YES')\n                return\n            else:\n                dayDream(pout)\n    # print('dayDream return', pin)\n    return\n\n\nisDream = False\ndayDream(0)\nif isDream:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n","code_v1_no_empty_lines":"import sys\n\nsys.setrecursionlimit(1000000)\nS = eval(input())\nT = [\"dream\", \"dreamer\", \"erase\", \"eraser\"]\nlenT = [len(i) for i in T]\n\n\ndef dayDream(pin):\n    global isGoal  # ;print('dayDream: ', pin, S[pin:])\n    for i, d in enumerate(T):\n        if isGoal:\n            return\n        # print('i, d:', i, d)\n        if S[pin : pin + lenT[i]] == d:\n            pout = pin + lenT[i]  # ;print(d, pout)\n            if pout == len(S):\n                isGoal = True  # ;print('YES')\n                return\n            else:\n                dayDream(pout)\n    # print('dayDream return', pin)\n    return\n\n\nisGoal = False\ndayDream(0)\nif isGoal:\n    print(\"YES\")\nelse:\n    print(\"NO\")\n","code_same":false,"relative_loc_diff_percent":6.6666666667,"diff":["-    global isDream  # ;print('dayDream: ', pin, S[pin:])","+    global isGoal  # ;print('dayDream: ', pin, S[pin:])","-        # print('d:', d)","+        if isGoal:","+            return","+        # print('i, d:', i, d)","-            pout = pin + lenT[i]  # ; print(d, pout)","+            pout = pin + lenT[i]  # ;print(d, pout)","-                isDream = True  # ; print('YES')","+                isGoal = True  # ;print('YES')","-isDream = False","+isGoal = False","-if isDream:","+if isGoal:"],"diff_only_import_comment":false,"measured_runtime_v0":0.3036904747,"measured_runtime_v1":0.2140211895,"runtime_lift":1.4189738666,"key":["s725954700","s400985362"]}
{"user_id":"u163320134","problem_id":"p03037","language":"python","submission_id_v0":"s012458960","submission_id_v1":"s740832114","cpu_time_v0":351,"cpu_time_v1":278,"memory_v0":6900,"memory_v1":3060,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":20.8,"input":"n,m=list(map(int,input().split()))\n\nc=[0]*(n+2)\n\nfor i in range(m):\n\n  l,r=list(map(int,input().split()))\n\n  c[l-1]+=1\n\n  c[r]-=1\n\nfor i in range(1,n+2):\n\n  c[i]=c[i]+c[i-1]\n\nans=0\n\nfor i in range(n+2):\n\n  if c[i]==m:\n\n    ans+=1\n\nprint(ans)","target":"n,m=list(map(int,input().split()))\n\nl,r=list(map(int,input().split()))\n\nfor i in range(m-1):\n\n  tl,tr=list(map(int,input().split()))\n\n  if l<tl:\n\n    l=tl\n\n  if tr<r:\n\n    r=tr\n\nprint((max(r-l+1,0)))","code_v0_loc":13,"code_v1_loc":9,"code_v0_num_chars":229,"code_v1_num_chars":179,"code_v0_no_empty_lines":"n, m = list(map(int, input().split()))\nc = [0] * (n + 2)\nfor i in range(m):\n    l, r = list(map(int, input().split()))\n    c[l - 1] += 1\n    c[r] -= 1\nfor i in range(1, n + 2):\n    c[i] = c[i] + c[i - 1]\nans = 0\nfor i in range(n + 2):\n    if c[i] == m:\n        ans += 1\nprint(ans)\n","code_v1_no_empty_lines":"n, m = list(map(int, input().split()))\nl, r = list(map(int, input().split()))\nfor i in range(m - 1):\n    tl, tr = list(map(int, input().split()))\n    if l < tl:\n        l = tl\n    if tr < r:\n        r = tr\nprint((max(r - l + 1, 0)))\n","code_same":false,"relative_loc_diff_percent":30.7692307692,"diff":["-c = [0] * (n + 2)","-for i in range(m):","-    l, r = list(map(int, input().split()))","-    c[l - 1] += 1","-    c[r] -= 1","-for i in range(1, n + 2):","-    c[i] = c[i] + c[i - 1]","-ans = 0","-for i in range(n + 2):","-    if c[i] == m:","-        ans += 1","-print(ans)","+l, r = list(map(int, input().split()))","+for i in range(m - 1):","+    tl, tr = list(map(int, input().split()))","+    if l < tl:","+        l = tl","+    if tr < r:","+        r = tr","+print((max(r - l + 1, 0)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.4428963377,"measured_runtime_v1":0.3326621115,"runtime_lift":1.3313699468,"key":["s012458960","s740832114"]}
{"user_id":"u692746605","problem_id":"p03287","language":"python","submission_id_v0":"s303506832","submission_id_v1":"s561375948","cpu_time_v0":133,"cpu_time_v1":114,"memory_v0":16072,"memory_v1":14224,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":14.29,"input":"n,m=list(map(int,input().split()))\n\na=[int(x) for x in input().split()]\n\nb=[0 for x in range(n+1)]\n\nl=list([0])\n\n\n\nfor i in range(1,n+1):\n\n  b[i]=b[i-1]+a[i-1]\n\n\n\nfor i in range(1,n+1):\n\n  l.append(b[i]%m)\n\n\n\nd=list()\n\nl.sort()\n\nt,c=0,1\n\nfor i in range(1,n+1):\n\n  if l[i]==l[i-1]:\n\n    c+=1\n\n  else:\n\n    if c!=1:\n\n      t += c*(c-1)\/\/2\n\n      c=1\n\n\n\nif c!=1:\n\n  t += c*(c-1)\/\/2  \n\n\n\nprint(t)\n","target":"n,m=list(map(int,input().split()))\n\na=[int(x) for x in input().split()]\n\nl=list([0])\n\n\n\nb=0\n\nfor i in range(0,n):\n\n  b += a[i]\n\n  l.append(b%m)\n\nl.append(m)\n\n\n\nl.sort()\n\nt,c=0,1\n\nfor i in range(1,n+2):\n\n  if l[i]==l[i-1]:\n\n    c+=1\n\n  else:\n\n    if c!=1:\n\n      t += c*(c-1)\/\/2\n\n      c=1\n\nprint(t)\n","code_v0_loc":26,"code_v1_loc":20,"code_v0_num_chars":387,"code_v1_num_chars":293,"code_v0_no_empty_lines":"n, m = list(map(int, input().split()))\na = [int(x) for x in input().split()]\nb = [0 for x in range(n + 1)]\nl = list([0])\nfor i in range(1, n + 1):\n    b[i] = b[i - 1] + a[i - 1]\nfor i in range(1, n + 1):\n    l.append(b[i] % m)\nd = list()\nl.sort()\nt, c = 0, 1\nfor i in range(1, n + 1):\n    if l[i] == l[i - 1]:\n        c += 1\n    else:\n        if c != 1:\n            t += c * (c - 1) \/\/ 2\n            c = 1\nif c != 1:\n    t += c * (c - 1) \/\/ 2\nprint(t)\n","code_v1_no_empty_lines":"n, m = list(map(int, input().split()))\na = [int(x) for x in input().split()]\nl = list([0])\nb = 0\nfor i in range(0, n):\n    b += a[i]\n    l.append(b % m)\nl.append(m)\nl.sort()\nt, c = 0, 1\nfor i in range(1, n + 2):\n    if l[i] == l[i - 1]:\n        c += 1\n    else:\n        if c != 1:\n            t += c * (c - 1) \/\/ 2\n            c = 1\nprint(t)\n","code_same":false,"relative_loc_diff_percent":23.0769230769,"diff":["-b = [0 for x in range(n + 1)]","-for i in range(1, n + 1):","-    b[i] = b[i - 1] + a[i - 1]","-for i in range(1, n + 1):","-    l.append(b[i] % m)","-d = list()","+b = 0","+for i in range(0, n):","+    b += a[i]","+    l.append(b % m)","+l.append(m)","-for i in range(1, n + 1):","+for i in range(1, n + 2):","-if c != 1:","-    t += c * (c - 1) \/\/ 2"],"diff_only_import_comment":false,"measured_runtime_v0":0.2560717638,"measured_runtime_v1":0.1275047009,"runtime_lift":2.0083319433,"key":["s303506832","s561375948"]}
{"user_id":"u923662841","problem_id":"p03494","language":"python","submission_id_v0":"s523337024","submission_id_v1":"s427570436","cpu_time_v0":160,"cpu_time_v1":26,"memory_v0":12484,"memory_v1":9180,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":83.75,"input":"import numpy as np\n\n\n\nN = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n\n\nA = np.array(A)\n\ncounter = 0\n\nwhile True:\n\n    if all( i%2==0 for i in A):\n\n        counter  += 1\n\n        A = A\/2\n\n    else:\n\n        print(counter)\n\n        break","target":"N = int(eval(input()))\n\nA = list(map(int, input().split()))\n\n\n\nc = 0\n\nwhile True:\n\n    if all(a% 2 ==0 for a in A):\n\n        c += 1\n\n        A = list([x\/\/2 for x in A])\n\n    else:\n\n        break\n\nprint(c)","code_v0_loc":14,"code_v1_loc":11,"code_v0_num_chars":243,"code_v1_num_chars":202,"code_v0_no_empty_lines":"import numpy as np\n\nN = int(eval(input()))\nA = list(map(int, input().split()))\nA = np.array(A)\ncounter = 0\nwhile True:\n    if all(i % 2 == 0 for i in A):\n        counter += 1\n        A = A \/ 2\n    else:\n        print(counter)\n        break\n","code_v1_no_empty_lines":"N = int(eval(input()))\nA = list(map(int, input().split()))\nc = 0\nwhile True:\n    if all(a % 2 == 0 for a in A):\n        c += 1\n        A = list([x \/\/ 2 for x in A])\n    else:\n        break\nprint(c)\n","code_same":false,"relative_loc_diff_percent":21.4285714286,"diff":["-import numpy as np","-","-A = np.array(A)","-counter = 0","+c = 0","-    if all(i % 2 == 0 for i in A):","-        counter += 1","-        A = A \/ 2","+    if all(a % 2 == 0 for a in A):","+        c += 1","+        A = list([x \/\/ 2 for x in A])","-        print(counter)","+print(c)"],"diff_only_import_comment":false,"measured_runtime_v0":1.3790119479,"measured_runtime_v1":0.2145438817,"runtime_lift":6.4276451846,"key":["s523337024","s427570436"]}
{"user_id":"u256351611","problem_id":"p02850","language":"python","submission_id_v0":"s596506481","submission_id_v1":"s115492739","cpu_time_v0":760,"cpu_time_v1":557,"memory_v0":96808,"memory_v1":30744,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":26.71,"input":"import copy\n\n\n\nn=int(eval(input()))\n\norg_set=set([i for i in range(1,10**5)])\n\nedges=[]\n\nrelations={}\n\nnodes=[]\n\nfor i in range(n-1):\n\n    a,b=list(map(int,input().split(\" \")))\n\n    edges.append([a,b])\n\n    relations.setdefault(a,[]).append(b)\n\n    nodes.append([])\n\nnodes.append([])\n\nnodes.append([])\n\n\n\nmax_color=0\n\nfor start in range(1,n+1):\n\n    targets=relations.get(start,[])\n\n    color=1\n\n    for target in targets:\n\n        if color in nodes[start]:\n\n            color+=1\n\n        else:\n\n            pass\n\n        nodes[target].append(color)\n\n        if color>=max_color:\n\n            max_color=color\n\n        color+=1\n\n\n\nprint(max_color)\n\nfor edge in edges:\n\n    print((nodes[edge[1]][0]))","target":"n=int(eval(input()))\n\nedges=[]\n\nrelations={}\n\nnodes=[0,0]\n\nfor i in range(n-1):\n\n    a,b=list(map(int,input().split(\" \")))\n\n    edges.append([a,b])\n\n    relations.setdefault(a,[]).append(b)\n\n    nodes.append(0)\n\n\n\nmax_color=0\n\nfor start in range(1,n+1):\n\n    targets=relations.get(start,[])\n\n    color=1\n\n    for target in targets:\n\n        if color == nodes[start]:\n\n            color+=1\n\n        else:\n\n            pass\n\n        nodes[target]=color\n\n        if color>=max_color:\n\n            max_color=color\n\n        color+=1\n\n\n\nprint(max_color)\n\nfor edge in edges:\n\n    print((nodes[edge[1]]))","code_v0_loc":32,"code_v1_loc":27,"code_v0_num_chars":684,"code_v1_num_chars":582,"code_v0_no_empty_lines":"import copy\n\nn = int(eval(input()))\norg_set = set([i for i in range(1, 10**5)])\nedges = []\nrelations = {}\nnodes = []\nfor i in range(n - 1):\n    a, b = list(map(int, input().split(\" \")))\n    edges.append([a, b])\n    relations.setdefault(a, []).append(b)\n    nodes.append([])\nnodes.append([])\nnodes.append([])\nmax_color = 0\nfor start in range(1, n + 1):\n    targets = relations.get(start, [])\n    color = 1\n    for target in targets:\n        if color in nodes[start]:\n            color += 1\n        else:\n            pass\n        nodes[target].append(color)\n        if color >= max_color:\n            max_color = color\n        color += 1\nprint(max_color)\nfor edge in edges:\n    print((nodes[edge[1]][0]))\n","code_v1_no_empty_lines":"n = int(eval(input()))\nedges = []\nrelations = {}\nnodes = [0, 0]\nfor i in range(n - 1):\n    a, b = list(map(int, input().split(\" \")))\n    edges.append([a, b])\n    relations.setdefault(a, []).append(b)\n    nodes.append(0)\nmax_color = 0\nfor start in range(1, n + 1):\n    targets = relations.get(start, [])\n    color = 1\n    for target in targets:\n        if color == nodes[start]:\n            color += 1\n        else:\n            pass\n        nodes[target] = color\n        if color >= max_color:\n            max_color = color\n        color += 1\nprint(max_color)\nfor edge in edges:\n    print((nodes[edge[1]]))\n","code_same":false,"relative_loc_diff_percent":15.625,"diff":["-import copy","-","-org_set = set([i for i in range(1, 10**5)])","-nodes = []","+nodes = [0, 0]","-    nodes.append([])","-nodes.append([])","-nodes.append([])","+    nodes.append(0)","-        if color in nodes[start]:","+        if color == nodes[start]:","-        nodes[target].append(color)","+        nodes[target] = color","-    print((nodes[edge[1]][0]))","+    print((nodes[edge[1]]))"],"diff_only_import_comment":false,"measured_runtime_v0":0.2673016732,"measured_runtime_v1":0.1941296165,"runtime_lift":1.3769237172,"key":["s596506481","s115492739"]}
{"user_id":"u102461423","problem_id":"p03780","language":"python","submission_id_v0":"s167085688","submission_id_v1":"s483261544","cpu_time_v0":534,"cpu_time_v1":70,"memory_v0":14552,"memory_v1":3572,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":86.89,"input":"# x < y\u3067y\u304c\u4e0d\u8981\u3068\u3059\u308b\u3002y\u629c\u304d\u3067[K-y,K)\u3092\u4f5c\u308c\u308b\u3002\n\n# \u3053\u306e\u3068\u304d\u306bx\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u306e\u306a\u3089\u3070\u3001x\u3082\u4e0d\u8981\u3002\n\n# x\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u306a\u3089\u3070\u3001xy\u629c\u304d\u3067[K-x-y,K-x)\u3092\u4f5c\u308c\u308b\u3002\n\n# y\u3092\u52a0\u3048\u3066\u3001x\u629c\u304d\u3067[K-x,K)\u3092\u4f5c\u308c\u308b\u3002\n\n# \u3088\u3063\u3066y\u4e0d\u8981\u306a\u3089\u3070x\u4e0d\u8981\u3002\n\nimport numpy as np\n\nimport itertools\n\n\n\nN,K = list(map(int,input().split()))\n\nA = [int(x) for x in input().split()]\n\nA.sort()\n\n\n\n# \u30ab\u30fc\u30c9\u306f[0,N)-indexed\n\n\n\ndef test(i):\n\n  # i\u756a\u76ee\u306e\u30ab\u30fc\u30c9\u306f\u4e0d\u8981\n\n  dp = np.zeros(K,dtype=np.bool)\n\n  dp[0] = True\n\n  for a in itertools.chain(A[:i],A[i+1:]):\n\n    dp[a:] = np.logical_or(dp[a:],dp[:-a])\n\n  return not dp[-A[i]:].any()\n\n\n\nleft = -1 # \u4e0d\u8981\u3060\u3068\u5224\u660e\n\nright = N # \u4e0d\u8981\u3067\u306a\u3044\u3068\u5224\u660e\n\nwhile right - left > 1:\n\n  mid = (left+right)\/\/2\n\n  if test(mid):\n\n    left = mid\n\n  else:\n\n    right = mid\n\n\n\n   \n\nanswer = left+1\n\nprint(answer)","target":"import sys\n\nread = sys.stdin.buffer.read\n\nreadline = sys.stdin.buffer.readline\n\nreadlines = sys.stdin.buffer.readlines\n\n\n\nimport itertools\n\n\n\n\"\"\"\n\n\u30fb\u300c\u5fc5\u8981\u300d\u3068\u306f\uff5e\uff5e\u304c\u5b58\u5728\n\n\u30fbx \u3092\u542b\u307e\u306a\u3044\u3001[K-x,K) \u5185\u306e\u7dcf\u548c\u304c\u5b58\u5728\n\n\u30fb\u96c6\u5408\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u3042\u308b\u5024\u6bb5\u3088\u308a\u4e0a\u5074\n\n\u30fb\u5168\u4f53\u3068\u3057\u3066\u3082\u5358\u8abf\u6027\u304c\u3042\u308b\n\n\"\"\"\n\n\n\nN,K,*A = list(map(int,read().split()))\n\n\n\nA = [x if x <= K else K + 1 for x in A]\n\nA.sort()\n\n\n\nmask = (1 << K) - 1\n\n\n\ndef test(x):\n\n    # x\u756a\u76ee\u306f\u5fc5\u8981\n\n    if A[x] > K:\n\n        return True\n\n    dp = 1\n\n    for a in itertools.chain(A[:x], A[x+1:]):\n\n        dp |= (dp << a)\n\n        dp &= mask\n\n    dp >>= (K - A[x])\n\n    return (dp > 0)\n\n\n\nleft = -1 # \u5fc5\u8981\n\nright = N # \u4e0d\u8981\n\nwhile left + 1 < right:\n\n    x = (left + right) \/\/ 2\n\n    if test(x):\n\n        right = x\n\n    else:\n\n        left = x\n\n\n\nanswer = left + 1\n\nprint(answer)\n","code_v0_loc":34,"code_v1_loc":43,"code_v0_num_chars":676,"code_v1_num_chars":744,"code_v0_no_empty_lines":"# x < y\u3067y\u304c\u4e0d\u8981\u3068\u3059\u308b\u3002y\u629c\u304d\u3067[K-y,K)\u3092\u4f5c\u308c\u308b\u3002\n# \u3053\u306e\u3068\u304d\u306bx\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u306e\u306a\u3089\u3070\u3001x\u3082\u4e0d\u8981\u3002\n# x\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u306a\u3089\u3070\u3001xy\u629c\u304d\u3067[K-x-y,K-x)\u3092\u4f5c\u308c\u308b\u3002\n# y\u3092\u52a0\u3048\u3066\u3001x\u629c\u304d\u3067[K-x,K)\u3092\u4f5c\u308c\u308b\u3002\n# \u3088\u3063\u3066y\u4e0d\u8981\u306a\u3089\u3070x\u4e0d\u8981\u3002\nimport numpy as np\nimport itertools\n\nN, K = list(map(int, input().split()))\nA = [int(x) for x in input().split()]\nA.sort()\n# \u30ab\u30fc\u30c9\u306f[0,N)-indexed\ndef test(i):\n    # i\u756a\u76ee\u306e\u30ab\u30fc\u30c9\u306f\u4e0d\u8981\n    dp = np.zeros(K, dtype=np.bool)\n    dp[0] = True\n    for a in itertools.chain(A[:i], A[i + 1 :]):\n        dp[a:] = np.logical_or(dp[a:], dp[:-a])\n    return not dp[-A[i] :].any()\n\n\nleft = -1  # \u4e0d\u8981\u3060\u3068\u5224\u660e\nright = N  # \u4e0d\u8981\u3067\u306a\u3044\u3068\u5224\u660e\nwhile right - left > 1:\n    mid = (left + right) \/\/ 2\n    if test(mid):\n        left = mid\n    else:\n        right = mid\nanswer = left + 1\nprint(answer)\n","code_v1_no_empty_lines":"import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nimport itertools\n\n\"\"\"\n\u30fb\u300c\u5fc5\u8981\u300d\u3068\u306f\uff5e\uff5e\u304c\u5b58\u5728\n\u30fbx \u3092\u542b\u307e\u306a\u3044\u3001[K-x,K) \u5185\u306e\u7dcf\u548c\u304c\u5b58\u5728\n\u30fb\u96c6\u5408\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u3042\u308b\u5024\u6bb5\u3088\u308a\u4e0a\u5074\n\u30fb\u5168\u4f53\u3068\u3057\u3066\u3082\u5358\u8abf\u6027\u304c\u3042\u308b\n\"\"\"\nN, K, *A = list(map(int, read().split()))\nA = [x if x <= K else K + 1 for x in A]\nA.sort()\nmask = (1 << K) - 1\n\n\ndef test(x):\n    # x\u756a\u76ee\u306f\u5fc5\u8981\n    if A[x] > K:\n        return True\n    dp = 1\n    for a in itertools.chain(A[:x], A[x + 1 :]):\n        dp |= dp << a\n        dp &= mask\n    dp >>= K - A[x]\n    return dp > 0\n\n\nleft = -1  # \u5fc5\u8981\nright = N  # \u4e0d\u8981\nwhile left + 1 < right:\n    x = (left + right) \/\/ 2\n    if test(x):\n        right = x\n    else:\n        left = x\nanswer = left + 1\nprint(answer)\n","code_same":false,"relative_loc_diff_percent":20.9302325581,"diff":["-# x < y\u3067y\u304c\u4e0d\u8981\u3068\u3059\u308b\u3002y\u629c\u304d\u3067[K-y,K)\u3092\u4f5c\u308c\u308b\u3002","-# \u3053\u306e\u3068\u304d\u306bx\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u306e\u306a\u3089\u3070\u3001x\u3082\u4e0d\u8981\u3002","-# x\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u306a\u3089\u3070\u3001xy\u629c\u304d\u3067[K-x-y,K-x)\u3092\u4f5c\u308c\u308b\u3002","-# y\u3092\u52a0\u3048\u3066\u3001x\u629c\u304d\u3067[K-x,K)\u3092\u4f5c\u308c\u308b\u3002","-# \u3088\u3063\u3066y\u4e0d\u8981\u306a\u3089\u3070x\u4e0d\u8981\u3002","-import numpy as np","+import sys","+","+read = sys.stdin.buffer.read","+readline = sys.stdin.buffer.readline","+readlines = sys.stdin.buffer.readlines","-N, K = list(map(int, input().split()))","-A = [int(x) for x in input().split()]","+\"\"\"","+\u30fb\u300c\u5fc5\u8981\u300d\u3068\u306f\uff5e\uff5e\u304c\u5b58\u5728","+\u30fbx \u3092\u542b\u307e\u306a\u3044\u3001[K-x,K) \u5185\u306e\u7dcf\u548c\u304c\u5b58\u5728","+\u30fb\u96c6\u5408\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u3042\u308b\u5024\u6bb5\u3088\u308a\u4e0a\u5074","+\u30fb\u5168\u4f53\u3068\u3057\u3066\u3082\u5358\u8abf\u6027\u304c\u3042\u308b","+\"\"\"","+N, K, *A = list(map(int, read().split()))","+A = [x if x <= K else K + 1 for x in A]","-# \u30ab\u30fc\u30c9\u306f[0,N)-indexed","-def test(i):","-    # i\u756a\u76ee\u306e\u30ab\u30fc\u30c9\u306f\u4e0d\u8981","-    dp = np.zeros(K, dtype=np.bool)","-    dp[0] = True","-    for a in itertools.chain(A[:i], A[i + 1 :]):","-        dp[a:] = np.logical_or(dp[a:], dp[:-a])","-    return not dp[-A[i] :].any()","+mask = (1 << K) - 1","-left = -1  # \u4e0d\u8981\u3060\u3068\u5224\u660e","-right = N  # \u4e0d\u8981\u3067\u306a\u3044\u3068\u5224\u660e","-while right - left > 1:","-    mid = (left + right) \/\/ 2","-    if test(mid):","-        left = mid","+def test(x):","+    # x\u756a\u76ee\u306f\u5fc5\u8981","+    if A[x] > K:","+        return True","+    dp = 1","+    for a in itertools.chain(A[:x], A[x + 1 :]):","+        dp |= dp << a","+        dp &= mask","+    dp >>= K - A[x]","+    return dp > 0","+","+","+left = -1  # \u5fc5\u8981","+right = N  # \u4e0d\u8981","+while left + 1 < right:","+    x = (left + right) \/\/ 2","+    if test(x):","+        right = x","-        right = mid","+        left = x"],"diff_only_import_comment":false,"measured_runtime_v0":3.0458679354,"measured_runtime_v1":0.4234246819,"runtime_lift":7.1934114036,"key":["s167085688","s483261544"]}
{"user_id":"u046158516","problem_id":"p02691","language":"python","submission_id_v0":"s021965299","submission_id_v1":"s412762136","cpu_time_v0":193,"cpu_time_v1":144,"memory_v0":32248,"memory_v1":111628,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":25.39,"input":"n=int(eval(input()))\n\na=list(map(int,input().split()))\n\nk=[]\n\nans=0\n\nfor i in range(400005):\n\n  k.append(0)\n\nfor i in range(n):\n\n  if i-a[i]>=0:\n\n    ans+=k[i-a[i]]\n\n  if a[i]+i<400005:\n\n    k[a[i]+i]+=1\n\nprint(ans)","target":"n=int(eval(input()))\n\na=list(map(int,input().split()))\n\nthing={}\n\nans=0\n\nfor i in range(n):\n\n  if i-a[i] in thing:\n\n    ans+=thing[i-a[i]]\n\n  if i+a[i] in thing:\n\n    thing[i+a[i]]+=1\n\n  else:\n\n    thing[i+a[i]]=1\n\nprint(ans)","code_v0_loc":12,"code_v1_loc":12,"code_v0_num_chars":209,"code_v1_num_chars":219,"code_v0_no_empty_lines":"n = int(eval(input()))\na = list(map(int, input().split()))\nk = []\nans = 0\nfor i in range(400005):\n    k.append(0)\nfor i in range(n):\n    if i - a[i] >= 0:\n        ans += k[i - a[i]]\n    if a[i] + i < 400005:\n        k[a[i] + i] += 1\nprint(ans)\n","code_v1_no_empty_lines":"n = int(eval(input()))\na = list(map(int, input().split()))\nthing = {}\nans = 0\nfor i in range(n):\n    if i - a[i] in thing:\n        ans += thing[i - a[i]]\n    if i + a[i] in thing:\n        thing[i + a[i]] += 1\n    else:\n        thing[i + a[i]] = 1\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":0.0,"diff":["-k = []","+thing = {}","-for i in range(400005):","-    k.append(0)","-    if i - a[i] >= 0:","-        ans += k[i - a[i]]","-    if a[i] + i < 400005:","-        k[a[i] + i] += 1","+    if i - a[i] in thing:","+        ans += thing[i - a[i]]","+    if i + a[i] in thing:","+        thing[i + a[i]] += 1","+    else:","+        thing[i + a[i]] = 1"],"diff_only_import_comment":false,"measured_runtime_v0":0.5354380305,"measured_runtime_v1":0.0057934456,"runtime_lift":92.4213443454,"key":["s021965299","s412762136"]}
{"user_id":"u815878613","problem_id":"p03060","language":"python","submission_id_v0":"s435116687","submission_id_v1":"s841872716","cpu_time_v0":291,"cpu_time_v1":25,"memory_v0":21296,"memory_v1":9028,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":91.41,"input":"import sys\n\nimport numpy as np\n\n\n\nN = eval(input())\n\n\n\nV = input().split()\n\nv = np.array([ int(x) for x in V])\n\n\n\nC = input().split()\n\nc = np.array([ int(x) for x in C])\n\n\n\ndelt = v - c\n\nprint((delt[delt>0].sum()))","target":"N = int(eval(input()))\n\nV = list(map(int, input().split()))\n\nC = list(map(int, input().split()))\n\n\n\nans = 0\n\nfor v, c in zip(V, C):\n\n    p = v - c\n\n    if p > 0:\n\n        ans += p\n\n\n\nprint(ans)\n","code_v0_loc":13,"code_v1_loc":11,"code_v0_num_chars":206,"code_v1_num_chars":188,"code_v0_no_empty_lines":"import sys\nimport numpy as np\n\nN = eval(input())\nV = input().split()\nv = np.array([int(x) for x in V])\nC = input().split()\nc = np.array([int(x) for x in C])\ndelt = v - c\nprint((delt[delt > 0].sum()))\n","code_v1_no_empty_lines":"N = int(eval(input()))\nV = list(map(int, input().split()))\nC = list(map(int, input().split()))\nans = 0\nfor v, c in zip(V, C):\n    p = v - c\n    if p > 0:\n        ans += p\nprint(ans)\n","code_same":false,"relative_loc_diff_percent":15.3846153846,"diff":["-import sys","-import numpy as np","-","-N = eval(input())","-V = input().split()","-v = np.array([int(x) for x in V])","-C = input().split()","-c = np.array([int(x) for x in C])","-delt = v - c","-print((delt[delt > 0].sum()))","+N = int(eval(input()))","+V = list(map(int, input().split()))","+C = list(map(int, input().split()))","+ans = 0","+for v, c in zip(V, C):","+    p = v - c","+    if p > 0:","+        ans += p","+print(ans)"],"diff_only_import_comment":false,"measured_runtime_v0":1.392920809,"measured_runtime_v1":0.2052230692,"runtime_lift":6.7873500501,"key":["s435116687","s841872716"]}
{"user_id":"u389910364","problem_id":"p03007","language":"python","submission_id_v0":"s018798749","submission_id_v1":"s300834964","cpu_time_v0":1421,"cpu_time_v1":375,"memory_v0":124920,"memory_v1":29800,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":73.61,"input":"import heapq\n\nimport os\n\nimport sys\n\n\n\nif os.getenv(\"LOCAL\"):\n\n    sys.stdin = open(\"_in.txt\", \"r\")\n\n\n\nsys.setrecursionlimit(2147483647)\n\nINF = float(\"inf\")\n\n\n\nN = int(sys.stdin.readline())\n\nA = list(map(int, sys.stdin.readline().split()))\n\n\n\n# ans = []\n\n# while len(A) > 2:\n\n#     x = max(A)\n\n#     y = min(A)\n\n#     A = A[1:-1]\n\n#     next_max = max(A)\n\n#     next_min = min(A)\n\n#     if abs(x - y - next_min) < abs(y - x - next_max):\n\n#         x, y = y, x\n\n#     bisect.insort_left(A, x - y)\n\n#     ans.append((x, y))\n\n# x, y = max(A), min(A)\n\n# ans.append((x, y))\n\n# print(x - y)\n\n# for a in ans:\n\n#     print(*a)\n\n\n\n\n\nenable = [True] * N\n\nmins = [(a, i) for i, a in enumerate(A)]\n\nmaxes = [(-a, i) for i, a in enumerate(A)]\n\nheapq.heapify(mins)\n\nheapq.heapify(maxes)\n\n\n\nans = []\n\nfor _ in range(N - 2):\n\n    x, xi = heapq.heappop(maxes)\n\n    x *= -1\n\n    y, yi = heapq.heappop(mins)\n\n    enable[xi] = False\n\n    enable[yi] = False\n\n    while not enable[maxes[0][1]]:\n\n        heapq.heappop(maxes)\n\n    while not enable[mins[0][1]]:\n\n        heapq.heappop(mins)\n\n    next_max = -maxes[0][0]\n\n    next_min = mins[0][0]\n\n    if abs(x - y - next_min) < abs(y - x - next_max):\n\n        x, y = y, x\n\n    enable.append(True)\n\n    heapq.heappush(mins, (x - y, len(enable) - 1))\n\n    heapq.heappush(maxes, (y - x, len(enable) - 1))\n\n    ans.append((x, y))\n\n\n\nx = -maxes[0][0]\n\ny = mins[0][0]\n\nans.append((x, y))\n\nprint((x - y))\n\nfor a in ans:\n\n    print((*a))\n","target":"import bisect\n\nimport os\n\nfrom collections import Counter, deque\n\nfrom fractions import gcd\n\nfrom functools import lru_cache\n\nfrom functools import reduce\n\nimport functools\n\nimport heapq\n\nimport itertools\n\nimport math\n\nimport numpy as np\n\nimport re\n\nimport string\n\nimport sys\n\n\n\nif os.getenv(\"LOCAL\"):\n\n    sys.stdin = open(\"_in.txt\", \"r\")\n\n\n\nsys.setrecursionlimit(2147483647)\n\nINF = float(\"inf\")\n\n\n\nN = int(sys.stdin.readline())\n\nA = list(map(int, sys.stdin.readline().split()))\n\n\n\nplus = []\n\nminus = []\n\n\n\nfor a in A:\n\n    if a >= 0:\n\n        plus.append(a)\n\n    else:\n\n        minus.append(a)\n\nif not plus:\n\n    mm = max(minus)\n\n    plus.append(mm)\n\n    minus.remove(mm)\n\nif not minus:\n\n    mp = min(plus)\n\n    minus.append(mp)\n\n    plus.remove(mp)\n\n\n\nhist = []\n\nx = minus.pop()\n\nwhile len(plus) > 1:\n\n    y = plus.pop()\n\n    hist.append((x, y))\n\n    x = x - y\n\nminus.append(x)\n\n\n\nx = plus.pop()\n\nwhile len(minus) > 1:\n\n    y = minus.pop()\n\n    hist.append((x, y))\n\n    x = x - y\n\ny = minus.pop()\n\nhist.append((x, y))\n\n\n\nprint((x - y))\n\nfor h in hist:\n\n    print((*h))\n","code_v0_loc":63,"code_v1_loc":60,"code_v0_num_chars":1453,"code_v1_num_chars":1068,"code_v0_no_empty_lines":"import heapq\nimport os\nimport sys\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\nsys.setrecursionlimit(2147483647)\nINF = float(\"inf\")\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().split()))\n# ans = []\n# while len(A) > 2:\n#     x = max(A)\n#     y = min(A)\n#     A = A[1:-1]\n#     next_max = max(A)\n#     next_min = min(A)\n#     if abs(x - y - next_min) < abs(y - x - next_max):\n#         x, y = y, x\n#     bisect.insort_left(A, x - y)\n#     ans.append((x, y))\n# x, y = max(A), min(A)\n# ans.append((x, y))\n# print(x - y)\n# for a in ans:\n#     print(*a)\nenable = [True] * N\nmins = [(a, i) for i, a in enumerate(A)]\nmaxes = [(-a, i) for i, a in enumerate(A)]\nheapq.heapify(mins)\nheapq.heapify(maxes)\nans = []\nfor _ in range(N - 2):\n    x, xi = heapq.heappop(maxes)\n    x *= -1\n    y, yi = heapq.heappop(mins)\n    enable[xi] = False\n    enable[yi] = False\n    while not enable[maxes[0][1]]:\n        heapq.heappop(maxes)\n    while not enable[mins[0][1]]:\n        heapq.heappop(mins)\n    next_max = -maxes[0][0]\n    next_min = mins[0][0]\n    if abs(x - y - next_min) < abs(y - x - next_max):\n        x, y = y, x\n    enable.append(True)\n    heapq.heappush(mins, (x - y, len(enable) - 1))\n    heapq.heappush(maxes, (y - x, len(enable) - 1))\n    ans.append((x, y))\nx = -maxes[0][0]\ny = mins[0][0]\nans.append((x, y))\nprint((x - y))\nfor a in ans:\n    print((*a))\n","code_v1_no_empty_lines":"import bisect\nimport os\nfrom collections import Counter, deque\nfrom fractions import gcd\nfrom functools import lru_cache\nfrom functools import reduce\nimport functools\nimport heapq\nimport itertools\nimport math\nimport numpy as np\nimport re\nimport string\nimport sys\n\nif os.getenv(\"LOCAL\"):\n    sys.stdin = open(\"_in.txt\", \"r\")\nsys.setrecursionlimit(2147483647)\nINF = float(\"inf\")\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().split()))\nplus = []\nminus = []\nfor a in A:\n    if a >= 0:\n        plus.append(a)\n    else:\n        minus.append(a)\nif not plus:\n    mm = max(minus)\n    plus.append(mm)\n    minus.remove(mm)\nif not minus:\n    mp = min(plus)\n    minus.append(mp)\n    plus.remove(mp)\nhist = []\nx = minus.pop()\nwhile len(plus) > 1:\n    y = plus.pop()\n    hist.append((x, y))\n    x = x - y\nminus.append(x)\nx = plus.pop()\nwhile len(minus) > 1:\n    y = minus.pop()\n    hist.append((x, y))\n    x = x - y\ny = minus.pop()\nhist.append((x, y))\nprint((x - y))\nfor h in hist:\n    print((*h))\n","code_same":false,"relative_loc_diff_percent":4.7619047619,"diff":["+import bisect","+import os","+from collections import Counter, deque","+from fractions import gcd","+from functools import lru_cache","+from functools import reduce","+import functools","-import os","+import itertools","+import math","+import numpy as np","+import re","+import string","-# ans = []","-# while len(A) > 2:","-#     x = max(A)","-#     y = min(A)","-#     A = A[1:-1]","-#     next_max = max(A)","-#     next_min = min(A)","-#     if abs(x - y - next_min) < abs(y - x - next_max):","-#         x, y = y, x","-#     bisect.insort_left(A, x - y)","-#     ans.append((x, y))","-# x, y = max(A), min(A)","-# ans.append((x, y))","-# print(x - y)","-# for a in ans:","-#     print(*a)","-enable = [True] * N","-mins = [(a, i) for i, a in enumerate(A)]","-maxes = [(-a, i) for i, a in enumerate(A)]","-heapq.heapify(mins)","-heapq.heapify(maxes)","-ans = []","-for _ in range(N - 2):","-    x, xi = heapq.heappop(maxes)","-    x *= -1","-    y, yi = heapq.heappop(mins)","-    enable[xi] = False","-    enable[yi] = False","-    while not enable[maxes[0][1]]:","-        heapq.heappop(maxes)","-    while not enable[mins[0][1]]:","-        heapq.heappop(mins)","-    next_max = -maxes[0][0]","-    next_min = mins[0][0]","-    if abs(x - y - next_min) < abs(y - x - next_max):","-        x, y = y, x","-    enable.append(True)","-    heapq.heappush(mins, (x - y, len(enable) - 1))","-    heapq.heappush(maxes, (y - x, len(enable) - 1))","-    ans.append((x, y))","-x = -maxes[0][0]","-y = mins[0][0]","-ans.append((x, y))","+plus = []","+minus = []","+for a in A:","+    if a >= 0:","+        plus.append(a)","+    else:","+        minus.append(a)","+if not plus:","+    mm = max(minus)","+    plus.append(mm)","+    minus.remove(mm)","+if not minus:","+    mp = min(plus)","+    minus.append(mp)","+    plus.remove(mp)","+hist = []","+x = minus.pop()","+while len(plus) > 1:","+    y = plus.pop()","+    hist.append((x, y))","+    x = x - y","+minus.append(x)","+x = plus.pop()","+while len(minus) > 1:","+    y = minus.pop()","+    hist.append((x, y))","+    x = x - y","+y = minus.pop()","+hist.append((x, y))","-for a in ans:","-    print((*a))","+for h in hist:","+    print((*h))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3442365975,"measured_runtime_v1":0.2437948611,"runtime_lift":1.4119928366,"key":["s018798749","s300834964"]}
{"user_id":"u634079249","problem_id":"p02881","language":"python","submission_id_v0":"s671057519","submission_id_v1":"s116621872","cpu_time_v0":992,"cpu_time_v1":126,"memory_v0":3064,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.3,"input":"import sys\n\nimport os\n\nimport math\n\n\n\nii = lambda: int(sys.stdin.buffer.readline().rstrip())\n\nil = lambda: list(map(int, sys.stdin.buffer.readline().split()))\n\niln = lambda n: [int(sys.stdin.buffer.readline().rstrip()) for _ in range(n)]\n\n\n\niss = lambda: sys.stdin.buffer.readline().decode().rstrip()\n\nisn = lambda n: [sys.stdin.buffer.readline().decode().rstrip() for _ in range(n)]\n\n\n\n\n\ndef main():\n\n    if os.getenv(\"LOCAL\"):\n\n        sys.stdin = open(\"input.txt\", \"r\")\n\n\n\n    N = ii()\n\n    ret = float('inf')\n\n    I = int(math.sqrt(N)) * 10\n\n    for i in range(1, I):\n\n        if N%i == 0:\n\n            j = N\/\/i\n\n            ret = min(ret, j + i - 2)\n\n\n\n    print(ret)\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","target":"import sys\n\nimport os\n\n\n\nii = lambda: int(sys.stdin.buffer.readline().rstrip())\n\nil = lambda: list(map(int, sys.stdin.buffer.readline().split()))\n\niln = lambda n: [int(sys.stdin.buffer.readline().rstrip()) for _ in range(n)]\n\n\n\niss = lambda: sys.stdin.buffer.readline().decode().rstrip()\n\nisn = lambda n: [sys.stdin.buffer.readline().decode().rstrip() for _ in range(n)]\n\n\n\n\n\ndef main():\n\n    if os.getenv(\"LOCAL\"):\n\n        sys.stdin = open(\"input.txt\", \"r\")\n\n\n\n    N = ii()\n\n    m = int(N ** .5)\n\n    while N % m != 0:\n\n        m -= 1\n\n    else:\n\n        print((int(N \/ m + m - 2)))\n\n\n\n\n\nif __name__ == '__main__':\n\n    main()\n","code_v0_loc":29,"code_v1_loc":25,"code_v0_num_chars":717,"code_v1_num_chars":627,"code_v0_no_empty_lines":"import sys\nimport os\nimport math\n\nii = lambda: int(sys.stdin.buffer.readline().rstrip())\nil = lambda: list(map(int, sys.stdin.buffer.readline().split()))\niln = lambda n: [int(sys.stdin.buffer.readline().rstrip()) for _ in range(n)]\niss = lambda: sys.stdin.buffer.readline().decode().rstrip()\nisn = lambda n: [sys.stdin.buffer.readline().decode().rstrip() for _ in range(n)]\n\n\ndef main():\n    if os.getenv(\"LOCAL\"):\n        sys.stdin = open(\"input.txt\", \"r\")\n    N = ii()\n    ret = float(\"inf\")\n    I = int(math.sqrt(N)) * 10\n    for i in range(1, I):\n        if N % i == 0:\n            j = N \/\/ i\n            ret = min(ret, j + i - 2)\n    print(ret)\n\n\nif __name__ == \"__main__\":\n    main()\n","code_v1_no_empty_lines":"import sys\nimport os\n\nii = lambda: int(sys.stdin.buffer.readline().rstrip())\nil = lambda: list(map(int, sys.stdin.buffer.readline().split()))\niln = lambda n: [int(sys.stdin.buffer.readline().rstrip()) for _ in range(n)]\niss = lambda: sys.stdin.buffer.readline().decode().rstrip()\nisn = lambda n: [sys.stdin.buffer.readline().decode().rstrip() for _ in range(n)]\n\n\ndef main():\n    if os.getenv(\"LOCAL\"):\n        sys.stdin = open(\"input.txt\", \"r\")\n    N = ii()\n    m = int(N**0.5)\n    while N % m != 0:\n        m -= 1\n    else:\n        print((int(N \/ m + m - 2)))\n\n\nif __name__ == \"__main__\":\n    main()\n","code_same":false,"relative_loc_diff_percent":13.7931034483,"diff":["-import math","-    ret = float(\"inf\")","-    I = int(math.sqrt(N)) * 10","-    for i in range(1, I):","-        if N % i == 0:","-            j = N \/\/ i","-            ret = min(ret, j + i - 2)","-    print(ret)","+    m = int(N**0.5)","+    while N % m != 0:","+        m -= 1","+    else:","+        print((int(N \/ m + m - 2)))"],"diff_only_import_comment":false,"measured_runtime_v0":0.3067429993,"measured_runtime_v1":0.2119246759,"runtime_lift":1.4474152099,"key":["s671057519","s116621872"]}
{"user_id":"u057993957","problem_id":"p03774","language":"python","submission_id_v0":"s163475264","submission_id_v1":"s392014232","cpu_time_v0":151,"cpu_time_v1":19,"memory_v0":12408,"memory_v1":3064,"status_v0":"Accepted","status_v1":"Accepted","improvement_frac":87.42,"input":"import numpy as np\n\nn, m = list(map(int, input().split()))\n\nab = [list(map(int, input().split())) for i in range(n)]\n\ncd = [list(map(int, input().split())) for i in range(m)]\n\n\n\ndist = np.zeros((n, m))\n\nfor i in range(n):\n\n  for j in range(m):\n\n    dist[i, j] = abs(ab[i][0] - cd[j][0]) + abs(ab[i][1] - cd[j][1])\n\n\n\nfor dis in dist:\n\n  print((dis.argmin()+1))","target":"n, m = list(map(int, input().split()))\n\nab = [list(map(int, input().split())) for i in range(n)]\n\ncd = [list(map(int, input().split())) for i in range(m)]\n\n\n\nfor i in range(n):\n\n  a, b = ab[i]\n\n  \n\n  dist = 1e+15\n\n  ans = 0\n\n  for j in range(m):\n\n    c, d = cd[j]    \n\n\n\n    if dist > abs(a - c) + abs(b - d):\n\n      ans = j\n\n      dist = abs(a - c) + abs(b - d)\n\n  \n\n  print((ans+1))\n\n    \n\n    \n\n    ","code_v0_loc":12,"code_v1_loc":20,"code_v0_num_chars":358,"code_v1_num_chars":400,"code_v0_no_empty_lines":"import numpy as np\n\nn, m = list(map(int, input().split()))\nab = [list(map(int, input().split())) for i in range(n)]\ncd = [list(map(int, input().split())) for i in range(m)]\ndist = np.zeros((n, m))\nfor i in range(n):\n    for j in range(m):\n        dist[i, j] = abs(ab[i][0] - cd[j][0]) + abs(ab[i][1] - cd[j][1])\nfor dis in dist:\n    print((dis.argmin() + 1))\n","code_v1_no_empty_lines":"n, m = list(map(int, input().split()))\nab = [list(map(int, input().split())) for i in range(n)]\ncd = [list(map(int, input().split())) for i in range(m)]\nfor i in range(n):\n    a, b = ab[i]\n    dist = 1e15\n    ans = 0\n    for j in range(m):\n        c, d = cd[j]\n        if dist > abs(a - c) + abs(b - d):\n            ans = j\n            dist = abs(a - c) + abs(b - d)\n    print((ans + 1))\n","code_same":false,"relative_loc_diff_percent":40.0,"diff":["-import numpy as np","-","-dist = np.zeros((n, m))","+    a, b = ab[i]","+    dist = 1e15","+    ans = 0","-        dist[i, j] = abs(ab[i][0] - cd[j][0]) + abs(ab[i][1] - cd[j][1])","-for dis in dist:","-    print((dis.argmin() + 1))","+        c, d = cd[j]","+        if dist > abs(a - c) + abs(b - d):","+            ans = j","+            dist = abs(a - c) + abs(b - d)","+    print((ans + 1))"],"diff_only_import_comment":false,"measured_runtime_v0":2.3915602806,"measured_runtime_v1":0.408453959,"runtime_lift":5.8551526503,"key":["s163475264","s392014232"]}
